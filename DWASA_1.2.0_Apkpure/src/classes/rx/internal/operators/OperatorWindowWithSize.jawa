record `rx.internal.operators.OperatorWindowWithSize` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorWindowWithSize.size` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorWindowWithSize.skip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithSize` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lrx/internal/operators/OperatorWindowWithSize;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ad2b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ad2ba.  v0.`rx.internal.operators.OperatorWindowWithSize.size` @type ^`int` := v1;
  #L4ad2be.  v0.`rx.internal.operators.OperatorWindowWithSize.skip` @type ^`int` := v2;
  #L4ad2c2.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorWindowWithSize` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ad208.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4ad20c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4ad212.  v1:= temp @kind object;
  #L4ad214.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorWindowWithSize` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ad228.  v0:= v3.`rx.internal.operators.OperatorWindowWithSize.skip` @type ^`int`;
  #L4ad22c.  v1:= v3.`rx.internal.operators.OperatorWindowWithSize.size` @type ^`int`;
  #L4ad230.  if v0 != v1 then goto L4ad258;
  #L4ad234.  v0:= new `rx.internal.operators.OperatorWindowWithSize$WindowExact`;
  #L4ad238.  call `<init>`(v0, v4, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.<init>:(Lrx/Subscriber;I)V` @kind direct;
  #L4ad23e.  v1:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowExact.cancel` @type ^`rx.Subscription` @kind object;
  #L4ad242.  call `add`(v4, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ad248.  call temp:= `createProducer`(v0) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.createProducer:()Lrx/Producer;` @kind virtual;
  #L4ad24e.  v1:= temp @kind object;
  #L4ad250.  call `setProducer`(v4, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4ad256.  return v0 @kind object;
  #L4ad258.  if v0 <= v1 then goto L4ad280;
  #L4ad25c.  v2:= new `rx.internal.operators.OperatorWindowWithSize$WindowSkip`;
  #L4ad260.  call `<init>`(v2, v4, v1, v0) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.<init>:(Lrx/Subscriber;II)V` @kind direct;
  #L4ad266.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.cancel` @type ^`rx.Subscription` @kind object;
  #L4ad26a.  call `add`(v4, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ad270.  call temp:= `createProducer`(v2) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.createProducer:()Lrx/Producer;` @kind virtual;
  #L4ad276.  v0:= temp @kind object;
  #L4ad278.  call `setProducer`(v4, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4ad27e.  return v2 @kind object;
  #L4ad280.  v2:= new `rx.internal.operators.OperatorWindowWithSize$WindowOverlap`;
  #L4ad284.  call `<init>`(v2, v4, v1, v0) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.<init>:(Lrx/Subscriber;II)V` @kind direct;
  #L4ad28a.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.cancel` @type ^`rx.Subscription` @kind object;
  #L4ad28e.  call `add`(v4, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ad294.  call temp:= `createProducer`(v2) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.createProducer:()Lrx/Producer;` @kind virtual;
  #L4ad29a.  v0:= temp @kind object;
  #L4ad29c.  call `setProducer`(v4, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4ad2a2.  return v2 @kind object;
}
