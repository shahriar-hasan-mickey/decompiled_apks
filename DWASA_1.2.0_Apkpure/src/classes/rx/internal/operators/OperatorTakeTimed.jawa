record `rx.internal.operators.OperatorTakeTimed` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Scheduler` `rx.internal.operators.OperatorTakeTimed.scheduler` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorTakeTimed.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OperatorTakeTimed.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeTimed` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/internal/operators/OperatorTakeTimed;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aa474.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aa47a.  v0.`rx.internal.operators.OperatorTakeTimed.time` @type ^`long` := v1 @kind wide;
  #L4aa47e.  v0.`rx.internal.operators.OperatorTakeTimed.unit` @type ^`java.util.concurrent.TimeUnit` := v3 @kind object;
  #L4aa482.  v0.`rx.internal.operators.OperatorTakeTimed.scheduler` @type ^`rx.Scheduler` := v4 @kind object;
  #L4aa486.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTakeTimed` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorTakeTimed;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aa40c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4aa410.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorTakeTimed;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4aa416.  v1:= temp @kind object;
  #L4aa418.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorTakeTimed` v4 @kind this, `rx.Subscriber` v5 @kind object) @signature `Lrx/internal/operators/OperatorTakeTimed;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aa42c.  v0:= v4.`rx.internal.operators.OperatorTakeTimed.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4aa430.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4aa436.  v0:= temp @kind object;
  #L4aa438.  call `add`(v5, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aa43e.  v1:= new `rx.internal.operators.OperatorTakeTimed$TakeSubscriber`;
  #L4aa442.  v2:= new `rx.observers.SerializedSubscriber`;
  #L4aa446.  call `<init>`(v2, v5) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4aa44c.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4aa452.  v2:= v4.`rx.internal.operators.OperatorTakeTimed.time` @type ^`long` @kind wide;
  #L4aa456.  v5:= v4.`rx.internal.operators.OperatorTakeTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4aa45a.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4aa460.  return v1 @kind object;
}
