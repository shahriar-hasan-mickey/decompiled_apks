record `rx.internal.operators.OperatorDematerialize` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDematerialize` v0 @kind this) @signature `Lrx/internal/operators/OperatorDematerialize;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a0454.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a045a.  return @kind void;
}
procedure `rx.internal.operators.OperatorDematerialize` `instance`() @signature `Lrx/internal/operators/OperatorDematerialize;.instance:()Lrx/internal/operators/OperatorDematerialize;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a043c.  v0:= `@@rx.internal.operators.OperatorDematerialize$Holder.INSTANCE` @type ^`rx.internal.operators.OperatorDematerialize` @kind object;
  #L4a0440.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorDematerialize` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorDematerialize;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a0400.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a0404.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorDematerialize;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a040a.  v1:= temp @kind object;
  #L4a040c.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorDematerialize` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorDematerialize;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0420.  v0:= new `rx.internal.operators.OperatorDematerialize$1`;
  #L4a0424.  call `<init>`(v0, v1, v2, v2) @signature `Lrx/internal/operators/OperatorDematerialize$1;.<init>:(Lrx/internal/operators/OperatorDematerialize;Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L4a042a.  return v0 @kind object;
}
