record `rx.internal.operators.OperatorWindowWithObservable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Observable` `rx.internal.operators.OperatorWindowWithObservable.other` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OperatorWindowWithObservable.NEXT_SUBJECT` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorWindowWithObservable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ac8ac.  v0:= new `java.lang.Object`;
  #L4ac8b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ac8b6.  `@@rx.internal.operators.OperatorWindowWithObservable.NEXT_SUBJECT` @type ^`java.lang.Object` := v0 @kind object;
  #L4ac8ba.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithObservable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable;.<init>:(Lrx/Observable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ac8cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ac8d2.  v0.`rx.internal.operators.OperatorWindowWithObservable.other` @type ^`rx.Observable` := v1 @kind object;
  #L4ac8d6.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorWindowWithObservable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ac848.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4ac84c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4ac852.  v1:= temp @kind object;
  #L4ac854.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorWindowWithObservable` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ac868.  v0:= new `rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber`;
  #L4ac86c.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4ac872.  v1:= new `rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber`;
  #L4ac876.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/OperatorWindowWithObservable$BoundarySubscriber;.<init>:(Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;)V` @kind direct;
  #L4ac87c.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ac882.  call `add`(v3, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ac888.  call `replaceWindow`(v0) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.replaceWindow:()V` @kind virtual;
  #L4ac88e.  v3:= v2.`rx.internal.operators.OperatorWindowWithObservable.other` @type ^`rx.Observable` @kind object;
  #L4ac892.  call temp:= `unsafeSubscribe`(v3, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4ac898.  return v0 @kind object;
}
