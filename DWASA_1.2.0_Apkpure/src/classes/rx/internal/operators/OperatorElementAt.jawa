record `rx.internal.operators.OperatorElementAt` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `java.lang.Object` `rx.internal.operators.OperatorElementAt.defaultValue` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorElementAt.hasDefault` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorElementAt.index` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorElementAt` v2 @kind this, `int` v3 ) @signature `Lrx/internal/operators/OperatorElementAt;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a1398.  v0:= 0I;
  #L4a139a.  v1:= 0I;
  #L4a139c.  call `<init>`(v2, v3, v0, v1) @signature `Lrx/internal/operators/OperatorElementAt;.<init>:(ILjava/lang/Object;Z)V` @kind direct;
  #L4a13a2.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorElementAt` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorElementAt;.<init>:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a13b4.  v0:= 1I;
  #L4a13b6.  call `<init>`(v1, v2, v3, v0) @signature `Lrx/internal/operators/OperatorElementAt;.<init>:(ILjava/lang/Object;Z)V` @kind direct;
  #L4a13bc.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorElementAt` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object, `boolean` v3 ) @signature `Lrx/internal/operators/OperatorElementAt;.<init>:(ILjava/lang/Object;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4a13d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a13d6.  if v1 < 0 then goto L4a13e8;
  #L4a13da.  v0.`rx.internal.operators.OperatorElementAt.index` @type ^`int` := v1;
  #L4a13de.  v0.`rx.internal.operators.OperatorElementAt.defaultValue` @type ^`java.lang.Object` := v2 @kind object;
  #L4a13e2.  v0.`rx.internal.operators.OperatorElementAt.hasDefault` @type ^`boolean` := v3 @kind boolean;
  #L4a13e6.  return @kind void;
  #L4a13e8.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L4a13ec.  v3:= new `java.lang.StringBuilder`;
  #L4a13f0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a13f6.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a13fc.  v1:= " is out of bounds" @kind object;
  #L4a1400.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a1406.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a140c.  v1:= temp @kind object;
  #L4a140e.  call `<init>`(v2, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a1414.  throw v2;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorElementAt` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorElementAt;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a1354.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a1358.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorElementAt;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a135e.  v1:= temp @kind object;
  #L4a1360.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorElementAt` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorElementAt;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1374.  v0:= new `rx.internal.operators.OperatorElementAt$1`;
  #L4a1378.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorElementAt$1;.<init>:(Lrx/internal/operators/OperatorElementAt;Lrx/Subscriber;)V` @kind direct;
  #L4a137e.  call `add`(v2, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a1384.  return v0 @kind object;
}
