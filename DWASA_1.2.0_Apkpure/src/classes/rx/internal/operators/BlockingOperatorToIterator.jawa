record `rx.internal.operators.BlockingOperatorToIterator` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`rx.internal.operators.BlockingOperatorToIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToIterator;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L493788.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49378e.  v0:= new `java.lang.IllegalStateException`;
  #L493792.  v1:= "No instances!" @kind object;
  #L493796.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49379c.  throw v0;
}
procedure `java.util.Iterator` `toIterator`(`rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/BlockingOperatorToIterator;.toIterator:(Lrx/Observable;)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49375c.  v0:= new `rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator`;
  #L493760.  call `<init>`(v0) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.<init>:()V` @kind direct;
  #L493766.  call temp:= `materialize`(v1) @signature `Lrx/Observable;.materialize:()Lrx/Observable;` @kind virtual;
  #L49376c.  v1:= temp @kind object;
  #L49376e.  call temp:= `subscribe`(v1, v0) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L493774.  return v0 @kind object;
}
