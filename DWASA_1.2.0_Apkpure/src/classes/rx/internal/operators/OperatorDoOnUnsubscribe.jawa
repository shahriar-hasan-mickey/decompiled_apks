record `rx.internal.operators.OperatorDoOnUnsubscribe` @kind class @AccessFlag PUBLIC extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Action0` `rx.internal.operators.OperatorDoOnUnsubscribe.unsubscribe` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDoOnUnsubscribe` v0 @kind this, `rx.functions.Action0` v1 @kind object) @signature `Lrx/internal/operators/OperatorDoOnUnsubscribe;.<init>:(Lrx/functions/Action0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a0b84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a0b8a.  v0.`rx.internal.operators.OperatorDoOnUnsubscribe.unsubscribe` @type ^`rx.functions.Action0` := v1 @kind object;
  #L4a0b8e.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorDoOnUnsubscribe` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorDoOnUnsubscribe;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a0b38.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a0b3c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorDoOnUnsubscribe;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a0b42.  v1:= temp @kind object;
  #L4a0b44.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorDoOnUnsubscribe` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorDoOnUnsubscribe;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0b58.  v0:= v1.`rx.internal.operators.OperatorDoOnUnsubscribe.unsubscribe` @type ^`rx.functions.Action0` @kind object;
  #L4a0b5c.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4a0b62.  v0:= temp @kind object;
  #L4a0b64.  call `add`(v2, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a0b6a.  call temp:= `wrap`(v2) @signature `Lrx/observers/Subscribers;.wrap:(Lrx/Subscriber;)Lrx/Subscriber;` @kind static;
  #L4a0b70.  v2:= temp @kind object;
  #L4a0b72.  return v2 @kind object;
}
