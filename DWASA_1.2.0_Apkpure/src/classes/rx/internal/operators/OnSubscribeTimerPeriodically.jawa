record `rx.internal.operators.OnSubscribeTimerPeriodically` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `long` `rx.internal.operators.OnSubscribeTimerPeriodically.initialDelay` @AccessFlag FINAL;
  `long` `rx.internal.operators.OnSubscribeTimerPeriodically.period` @AccessFlag FINAL;
  `rx.Scheduler` `rx.internal.operators.OnSubscribeTimerPeriodically.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OnSubscribeTimerPeriodically.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeTimerPeriodically` v0 @kind this, `long` v1 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `rx.Scheduler` v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeTimerPeriodically;.<init>:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49d3e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d3ee.  v0.`rx.internal.operators.OnSubscribeTimerPeriodically.initialDelay` @type ^`long` := v1 @kind wide;
  #L49d3f2.  v0.`rx.internal.operators.OnSubscribeTimerPeriodically.period` @type ^`long` := v3 @kind wide;
  #L49d3f6.  v0.`rx.internal.operators.OnSubscribeTimerPeriodically.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L49d3fa.  v0.`rx.internal.operators.OnSubscribeTimerPeriodically.scheduler` @type ^`rx.Scheduler` := v6 @kind object;
  #L49d3fe.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeTimerPeriodically` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeTimerPeriodically;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49d410.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49d414.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeTimerPeriodically;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49d41a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeTimerPeriodically` v8 @kind this, `rx.Subscriber` v9 @kind object) @signature `Lrx/internal/operators/OnSubscribeTimerPeriodically;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49d42c.  v0:= v8.`rx.internal.operators.OnSubscribeTimerPeriodically.scheduler` @type ^`rx.Scheduler` @kind object;
  #L49d430.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L49d436.  v1:= temp @kind object;
  #L49d438.  call `add`(v9, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49d43e.  v2:= new `rx.internal.operators.OnSubscribeTimerPeriodically$1`;
  #L49d442.  call `<init>`(v2, v8, v9, v1) @signature `Lrx/internal/operators/OnSubscribeTimerPeriodically$1;.<init>:(Lrx/internal/operators/OnSubscribeTimerPeriodically;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @kind direct;
  #L49d448.  v3:= v8.`rx.internal.operators.OnSubscribeTimerPeriodically.initialDelay` @type ^`long` @kind wide;
  #L49d44c.  v5:= v8.`rx.internal.operators.OnSubscribeTimerPeriodically.period` @type ^`long` @kind wide;
  #L49d450.  v7:= v8.`rx.internal.operators.OnSubscribeTimerPeriodically.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49d454.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lrx/Scheduler$Worker;.schedulePeriodically:(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L49d45a.  return @kind void;
}
