record `rx.internal.operators.OperatorTakeLast$TakeLastSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.functions.Func1` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.actual` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.count` @AccessFlag FINAL;
  `java.util.ArrayDeque` `rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.requested` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/OperatorTakeLast$TakeLastSubscriber;.<init>:(Lrx/Subscriber;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a9f08.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a9f0e.  v0.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L4a9f12.  v0.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.count` @type ^`int` := v2;
  #L4a9f16.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a9f1a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a9f20.  v0.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a9f24.  v1:= new `java.util.ArrayDeque`;
  #L4a9f28.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4a9f2e.  v0.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.queue` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L4a9f32.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorTakeLast$TakeLastSubscriber;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L4a9eec.  call temp:= `getValue`(v1) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a9ef2.  v1:= temp @kind object;
  #L4a9ef4.  return v1 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorTakeLast$TakeLastSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a9f44.  v0:= v3.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a9f48.  v1:= v3.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L4a9f4c.  v2:= v3.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a9f50.  call `postCompleteDone`(v0, v1, v2, v3) @signature `Lrx/internal/operators/BackpressureUtils;.postCompleteDone:(Ljava/util/concurrent/atomic/AtomicLong;Ljava/util/Queue;Lrx/Subscriber;Lrx/functions/Func1;)V` @kind static;
  #L4a9f56.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeLast$TakeLastSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9f68.  v0:= v1.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L4a9f6c.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4a9f72.  v0:= v1.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a9f76.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a9f7c.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorTakeLast$TakeLastSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9f90.  v0:= v2.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L4a9f94.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L4a9f9a.  v0:= temp;
  #L4a9f9c.  v1:= v2.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.count` @type ^`int`;
  #L4a9fa0.  if v0 != v1 then goto L4a9fae;
  #L4a9fa4.  v0:= v2.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L4a9fa8.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a9fae.  v0:= v2.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L4a9fb2.  call temp:= `next`(v3) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a9fb8.  v3:= temp @kind object;
  #L4a9fba.  call temp:= `offer`(v0, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a9fc0.  return @kind void;
}
procedure `void` `requestMore`(`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber` v9 @kind this, `long` v10 ) @signature `Lrx/internal/operators/OperatorTakeLast$TakeLastSubscriber;.requestMore:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a9fd4.  v0:= 0L;
  #L4a9fd8.  v2:= lcmp(v10, v0);
  #L4a9fdc.  if v2 <= 0 then goto L4a9ff6;
  #L4a9fe0.  v3:= v9.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a9fe4.  v6:= v9.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L4a9fe8.  v7:= v9.`rx.internal.operators.OperatorTakeLast$TakeLastSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a9fec.  v4:= v10 @kind wide;
  #L4a9fee.  v8:= v9 @kind object;
  #L4a9ff0.  call temp:= `postCompleteRequest`(v3, v4, v6, v7, v8) @signature `Lrx/internal/operators/BackpressureUtils;.postCompleteRequest:(Ljava/util/concurrent/atomic/AtomicLong;JLjava/util/Queue;Lrx/Subscriber;Lrx/functions/Func1;)Z` @kind static;
  #L4a9ff6.  return @kind void;
}
