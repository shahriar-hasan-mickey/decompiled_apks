record `rx.internal.operators.SingleTimeout` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleTimeout.other` @AccessFlag FINAL;
  `rx.Scheduler` `rx.internal.operators.SingleTimeout.scheduler` @AccessFlag FINAL;
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleTimeout.source` @AccessFlag FINAL;
  `long` `rx.internal.operators.SingleTimeout.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.SingleTimeout.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTimeout` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object, `rx.Single$OnSubscribe` v6 @kind object) @signature `Lrx/internal/operators/SingleTimeout;.<init>:(Lrx/Single$OnSubscribe;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Single$OnSubscribe;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b0d08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b0d0e.  v0.`rx.internal.operators.SingleTimeout.source` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L4b0d12.  v0.`rx.internal.operators.SingleTimeout.timeout` @type ^`long` := v2 @kind wide;
  #L4b0d16.  v0.`rx.internal.operators.SingleTimeout.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4b0d1a.  v0.`rx.internal.operators.SingleTimeout.scheduler` @type ^`rx.Scheduler` := v5 @kind object;
  #L4b0d1e.  v0.`rx.internal.operators.SingleTimeout.other` @type ^`rx.Single$OnSubscribe` := v6 @kind object;
  #L4b0d22.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleTimeout` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleTimeout;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b0d34.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4b0d38.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleTimeout;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4b0d3e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleTimeout` v4 @kind this, `rx.SingleSubscriber` v5 @kind object) @signature `Lrx/internal/operators/SingleTimeout;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b0d50.  v0:= new `rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber`;
  #L4b0d54.  v1:= v4.`rx.internal.operators.SingleTimeout.other` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4b0d58.  call `<init>`(v0, v5, v1) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/Single$OnSubscribe;)V` @kind direct;
  #L4b0d5e.  v1:= v4.`rx.internal.operators.SingleTimeout.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4b0d62.  call temp:= `createWorker`(v1) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4b0d68.  v1:= temp @kind object;
  #L4b0d6a.  call `add`(v0, v1) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b0d70.  call `add`(v5, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b0d76.  v2:= v4.`rx.internal.operators.SingleTimeout.timeout` @type ^`long` @kind wide;
  #L4b0d7a.  v5:= v4.`rx.internal.operators.SingleTimeout.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b0d7e.  call temp:= `schedule`(v1, v0, v2, v5) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4b0d84.  v5:= v4.`rx.internal.operators.SingleTimeout.source` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4b0d88.  call `call`(v5, v0) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b0d8e.  return @kind void;
}
