record `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.child` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.counter` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.delayError` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.emitted` @AccessFlag ;
  `java.lang.Throwable` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.error` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.finished` @AccessFlag VOLATILE;
  `int` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.limit` @AccessFlag FINAL;
  `java.util.Queue` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.queue` @AccessFlag FINAL;
  `rx.Scheduler$Worker` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.requested` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` v1 @kind this, `rx.Scheduler` v2 @kind object, `rx.Subscriber` v3 @kind object, `boolean` v4 , `int` v5 ) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.<init>:(Lrx/Scheduler;Lrx/Subscriber;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a405c.  call `<init>`(v1) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a4062.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a4066.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a406c.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4a4070.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a4074.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a407a.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.counter` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4a407e.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.child` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a4082.  call temp:= `createWorker`(v2) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4a4088.  v2:= temp @kind object;
  #L4a408a.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` := v2 @kind object;
  #L4a408e.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.delayError` @type ^`boolean` := v4 @kind boolean;
  #L4a4092.  if v5 <= 0 then goto L4a4098;
  #L4a4096.  goto L4a409c;
  #L4a4098.  v5:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a409c.  v2:= v5 ^> 2;
  #L4a40a0.  v2:= v5 - v2 @kind int;
  #L4a40a4.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.limit` @type ^`int` := v2;
  #L4a40a8.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4a40ae.  v2:= temp;
  #L4a40b0.  if v2 == 0 then goto L4a40c4;
  #L4a40b4.  v2:= new `rx.internal.util.unsafe.SpscArrayQueue`;
  #L4a40b8.  call `<init>`(v2, v5) @signature `Lrx/internal/util/unsafe/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4a40be.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.queue` @type ^`java.util.Queue` := v2 @kind object;
  #L4a40c2.  goto L4a40d2;
  #L4a40c4.  v2:= new `rx.internal.util.atomic.SpscAtomicArrayQueue`;
  #L4a40c8.  call `<init>`(v2, v5) @signature `Lrx/internal/util/atomic/SpscAtomicArrayQueue;.<init>:(I)V` @kind direct;
  #L4a40ce.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.queue` @type ^`java.util.Queue` := v2 @kind object;
  #L4a40d2.  v2:= (`long`) v5 @kind i2l;
  #L4a40d4.  call `request`(v1, v2) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.request:(J)V` @kind virtual;
  #L4a40da.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` v15 @kind this) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4a40ec.  v0:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.emitted` @type ^`long` @kind wide;
  #L4a40f0.  v2:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a40f4.  v3:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a40f8.  v4:= 1L;
  #L4a40fc.  v6:= v0 @kind wide;
  #L4a40fe.  v0:= v4 @kind wide;
  #L4a4100.  v8:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a4104.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a410a.  v8:= temp @kind wide;
  #L4a410c.  v10:= 0L;
  #L4a4110.  v12:= lcmp(v8, v6);
  #L4a4114.  if v12 == 0 then goto L4a4176;
  #L4a4118.  v12:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.finished` @type ^`boolean` @kind boolean;
  #L4a411c.  call temp:= `poll`(v2) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a4122.  v13:= temp @kind object;
  #L4a4124.  if v13 != 0 then goto L4a412c;
  #L4a4128.  v14:= 1I;
  #L4a412a.  goto L4a412e;
  #L4a412c.  v14:= 0I;
  #L4a412e.  call temp:= `checkTerminated`(v15, v12, v14, v3, v2) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L4a4134.  v12:= temp;
  #L4a4136.  if v12 == 0 then goto L4a413c;
  #L4a413a.  return @kind void;
  #L4a413c.  if v14 == 0 then goto L4a4142;
  #L4a4140.  goto L4a4176;
  #L4a4142.  call temp:= `getValue`(v13) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a4148.  v12:= temp @kind object;
  #L4a414a.  call `onNext`(v3, v12) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a4150.  v6:= v6 + v4 @kind long;
  #L4a4152.  v12:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.limit` @type ^`int`;
  #L4a4156.  v12:= (`long`) v12 @kind i2l;
  #L4a4158.  v14:= lcmp(v6, v12);
  #L4a415c.  if v14 != 0 then goto L4a410c;
  #L4a4160.  v8:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a4164.  call temp:= `produced`(v8, v6) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a416a.  v8:= temp @kind wide;
  #L4a416c.  call `request`(v15, v6) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.request:(J)V` @kind virtual;
  #L4a4172.  v6:= v10 @kind wide;
  #L4a4174.  goto L4a410c;
  #L4a4176.  v12:= lcmp(v8, v6);
  #L4a417a.  if v12 != 0 then goto L4a4198;
  #L4a417e.  v8:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.finished` @type ^`boolean` @kind boolean;
  #L4a4182.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4a4188.  v9:= temp;
  #L4a418a.  call temp:= `checkTerminated`(v15, v8, v9, v3, v2) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L4a4190.  v8:= temp;
  #L4a4192.  if v8 == 0 then goto L4a4198;
  #L4a4196.  return @kind void;
  #L4a4198.  v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.emitted` @type ^`long` := v6 @kind wide;
  #L4a419c.  v8:= v15.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.counter` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a41a0.  v0:= -v0 @kind long;
  #L4a41a2.  call temp:= `addAndGet`(v8, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4a41a8.  v0:= temp @kind wide;
  #L4a41aa.  v8:= lcmp(v0, v10);
  #L4a41ae.  if v8 != 0 then goto L4a4100;
  #L4a41b2.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `rx.Subscriber` v5 @kind object, `java.util.Queue` v6 @kind object) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a3f80.  call temp:= `isUnsubscribed`(v5) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a3f86.  v0:= temp;
  #L4a3f88.  v1:= 1I;
  #L4a3f8a.  if v0 == 0 then goto L4a3f96;
  #L4a3f8e.  call `clear`(v6) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4a3f94.  return v1;
  #L4a3f96.  if v3 == 0 then goto L4a4028;
  #L4a3f9a.  v3:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L4a3f9e.  if v3 == 0 then goto L4a3fd6;
  #L4a3fa2.  if v4 == 0 then goto L4a4028;
  #L4a3fa6.  v3:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4a3faa.  if v3 == 0 then goto L4a3fb6;
  #L4a3fae.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a3fb4.  goto L4a3fbc;
  #L4a3fb6.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a3fbc.  v3:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a3fc0.  call `unsubscribe`(v3) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4a3fc6.  goto L4a4028;
  #L4a3fc8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a3fca.  v4:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a3fce.  call `unsubscribe`(v4) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4a3fd4.  throw v3;
  #L4a3fd6.  v3:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4a3fda.  if v3 == 0 then goto L4a4004;
  #L4a3fde.  call `clear`(v6) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4a3fe4.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a3fea.  v3:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a3fee.  call `unsubscribe`(v3) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4a3ff4.  return v1;
  #L4a3ff6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a3ff8.  v4:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a3ffc.  call `unsubscribe`(v4) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4a4002.  throw v3;
  #L4a4004.  if v4 == 0 then goto L4a4028;
  #L4a4008.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a400e.  v3:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a4012.  call `unsubscribe`(v3) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4a4018.  return v1;
  #L4a401a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a401c.  v4:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a4020.  call `unsubscribe`(v4) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4a4026.  throw v3;
  #L4a4028.  v3:= 0I;
  #L4a402a.  return v3;
  catch `java.lang.Throwable` @[L4a3fae..L4a3fbc] goto L4a3fc8;
  catch `java.lang.Throwable` @[L4a3fe4..L4a3fea] goto L4a3ff6;
  catch `java.lang.Throwable` @[L4a4008..L4a400e] goto L4a401a;
}
procedure `void` `init`(`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.init:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a41c4.  v0:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a41c8.  v1:= new `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber$1`;
  #L4a41cc.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber$1;.<init>:(Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;)V` @kind direct;
  #L4a41d2.  call `setProducer`(v0, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a41d8.  v1:= v2.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a41dc.  call `add`(v0, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a41e2.  call `add`(v0, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a41e8.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a41fc.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a4202.  v0:= temp;
  #L4a4204.  if v0 != 0 then goto L4a421e;
  #L4a4208.  v0:= v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.finished` @type ^`boolean` @kind boolean;
  #L4a420c.  if v0 == 0 then goto L4a4212;
  #L4a4210.  goto L4a421e;
  #L4a4212.  v0:= 1I;
  #L4a4214.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.finished` @type ^`boolean` := v0 @kind boolean;
  #L4a4218.  call `schedule`(v1) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.schedule:()V` @kind virtual;
  #L4a421e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a4230.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a4236.  v0:= temp;
  #L4a4238.  if v0 != 0 then goto L4a4258;
  #L4a423c.  v0:= v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.finished` @type ^`boolean` @kind boolean;
  #L4a4240.  if v0 == 0 then goto L4a4246;
  #L4a4244.  goto L4a4258;
  #L4a4246.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4a424a.  v2:= 1I;
  #L4a424c.  v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.finished` @type ^`boolean` := v2 @kind boolean;
  #L4a4250.  call `schedule`(v1) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.schedule:()V` @kind virtual;
  #L4a4256.  return @kind void;
  #L4a4258.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a425e.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a4270.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a4276.  v0:= temp;
  #L4a4278.  if v0 != 0 then goto L4a42b6;
  #L4a427c.  v0:= v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.finished` @type ^`boolean` @kind boolean;
  #L4a4280.  if v0 == 0 then goto L4a4286;
  #L4a4284.  goto L4a42b6;
  #L4a4286.  v0:= v1.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a428a.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a4290.  v2:= temp @kind object;
  #L4a4292.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a4298.  v2:= temp;
  #L4a429a.  if v2 != 0 then goto L4a42b0;
  #L4a429e.  v2:= new `rx.exceptions.MissingBackpressureException`;
  #L4a42a2.  call `<init>`(v2) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L4a42a8.  call `onError`(v1, v2) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a42ae.  return @kind void;
  #L4a42b0.  call `schedule`(v1) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.schedule:()V` @kind virtual;
  #L4a42b6.  return @kind void;
}
procedure `void` `schedule`(`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber` v5 @kind this) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.schedule:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a42c8.  v0:= v5.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.counter` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a42cc.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4a42d2.  v0:= temp @kind wide;
  #L4a42d4.  v2:= 0L;
  #L4a42d8.  v4:= lcmp(v0, v2);
  #L4a42dc.  if v4 != 0 then goto L4a42ea;
  #L4a42e0.  v0:= v5.`rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.recursiveScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a42e4.  call temp:= `schedule`(v0, v5) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4a42ea.  return @kind void;
}
