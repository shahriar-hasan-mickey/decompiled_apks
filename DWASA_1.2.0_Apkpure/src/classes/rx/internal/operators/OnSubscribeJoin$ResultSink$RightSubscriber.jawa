record `rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OnSubscribeJoin$ResultSink` `rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber` v0 @kind this, `rx.internal.operators.OnSubscribeJoin$ResultSink` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$RightSubscriber;.<init>:(Lrx/internal/operators/OnSubscribeJoin$ResultSink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49a860.  v0.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` := v1 @kind object;
  #L49a864.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49a86a.  return @kind void;
}
procedure `void` `expire`(`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber` v2 @kind this, `int` v3 , `rx.Subscription` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$RightSubscriber;.expire:(ILrx/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49a87c.  v0:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a880.  @monitorenter v0
  #L49a882.  v1:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a886.  v1:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightMap` @type ^`java.util.Map` @kind object;
  #L49a88a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49a890.  v3:= temp @kind object;
  #L49a892.  call temp:= `remove`(v1, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49a898.  v3:= temp @kind object;
  #L49a89a.  if v3 == 0 then goto L49a8c2;
  #L49a89e.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a8a2.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightMap` @type ^`java.util.Map` @kind object;
  #L49a8a6.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L49a8ac.  v3:= temp;
  #L49a8ae.  if v3 == 0 then goto L49a8c2;
  #L49a8b2.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a8b6.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightDone` @type ^`boolean` @kind boolean;
  #L49a8ba.  if v3 == 0 then goto L49a8c2;
  #L49a8be.  v3:= 1I;
  #L49a8c0.  goto L49a8c4;
  #L49a8c2.  v3:= 0I;
  #L49a8c4.  @monitorexit v0
  #L49a8c6.  if v3 == 0 then goto L49a8e8;
  #L49a8ca.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a8ce.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a8d2.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49a8d8.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a8dc.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a8e0.  call `unsubscribe`(v3) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L49a8e6.  goto L49a8f6;
  #L49a8e8.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a8ec.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49a8f0.  call `remove`(v3, v4) @signature `Lrx/subscriptions/CompositeSubscription;.remove:(Lrx/Subscription;)V` @kind virtual;
  #L49a8f6.  return @kind void;
  #L49a8f8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a8fa.  @monitorexit v0
  #L49a8fc.  throw v3;
  catch `java.lang.Throwable` @[L49a882..L49a8c6] goto L49a8f8;
  catch `java.lang.Throwable` @[L49a8fa..L49a8fc] goto L49a8f8;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$RightSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49a924.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a928.  @monitorenter v0
  #L49a92a.  v1:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a92e.  v2:= 1I;
  #L49a930.  v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightDone` @type ^`boolean` := v2 @kind boolean;
  #L49a934.  v1:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a938.  v1:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.leftDone` @type ^`boolean` @kind boolean;
  #L49a93c.  if v1 != 0 then goto L49a958;
  #L49a940.  v1:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a944.  v1:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightMap` @type ^`java.util.Map` @kind object;
  #L49a948.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L49a94e.  v1:= temp;
  #L49a950.  if v1 == 0 then goto L49a956;
  #L49a954.  goto L49a958;
  #L49a956.  v2:= 0I;
  #L49a958.  @monitorexit v0
  #L49a95a.  if v2 == 0 then goto L49a97c;
  #L49a95e.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a962.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a966.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49a96c.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a970.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a974.  call `unsubscribe`(v0) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L49a97a.  goto L49a98a;
  #L49a97c.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a980.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49a984.  call `remove`(v0, v3) @signature `Lrx/subscriptions/CompositeSubscription;.remove:(Lrx/Subscription;)V` @kind virtual;
  #L49a98a.  return @kind void;
  #L49a98c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a98e.  @monitorexit v0
  #L49a990.  throw v1;
  catch `java.lang.Throwable` @[L49a92a..L49a95a] goto L49a98c;
  catch `java.lang.Throwable` @[L49a98e..L49a990] goto L49a98c;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$RightSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a9b8.  v0:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a9bc.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a9c0.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49a9c6.  v2:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a9ca.  v2:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a9ce.  call `unsubscribe`(v2) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L49a9d4.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$RightSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49a9e8.  v0:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a9ec.  @monitorenter v0
  #L49a9ee.  v1:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a9f2.  v2:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightId` @type ^`int`;
  #L49a9f6.  v3:= v2 + 1;
  #L49a9fa.  v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightId` @type ^`int` := v3;
  #L49a9fe.  v1:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49aa02.  v1:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightMap` @type ^`java.util.Map` @kind object;
  #L49aa06.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49aa0c.  v3:= temp @kind object;
  #L49aa0e.  call temp:= `put`(v1, v3, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49aa14.  v1:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49aa18.  v1:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.leftId` @type ^`int`;
  #L49aa1c.  @monitorexit v0
  #L49aa1e.  v0:= new `rx.subscriptions.SerialSubscription`;
  #L49aa22.  call `<init>`(v0) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L49aa28.  v3:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49aa2c.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49aa30.  call `add`(v3, v0) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49aa36.  v0:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49aa3a.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.this$0` @type ^`rx.internal.operators.OnSubscribeJoin` @kind object;
  #L49aa3e.  v0:= v0.`rx.internal.operators.OnSubscribeJoin.rightDurationSelector` @type ^`rx.functions.Func1` @kind object;
  #L49aa42.  call temp:= `call`(v0, v7) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49aa48.  v0:= temp @kind object;
  #L49aa4a.  v0:= (`rx.Observable`) v0 @kind object;
  #L49aa4e.  v3:= new `rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber`;
  #L49aa52.  call `<init>`(v3, v6, v2) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber;.<init>:(Lrx/internal/operators/OnSubscribeJoin$ResultSink$RightSubscriber;I)V` @kind direct;
  #L49aa58.  v2:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49aa5c.  v2:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49aa60.  call `add`(v2, v3) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49aa66.  call temp:= `unsafeSubscribe`(v0, v3) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49aa6c.  v0:= new `java.util.ArrayList`;
  #L49aa70.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49aa76.  v2:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49aa7a.  @monitorenter v2
  #L49aa7c.  v3:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49aa80.  call temp:= `leftMap`(v3) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink;.leftMap:()Ljava/util/HashMap;` @kind virtual;
  #L49aa86.  v3:= temp @kind object;
  #L49aa88.  call temp:= `entrySet`(v3) @signature `Ljava/util/HashMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L49aa8e.  v3:= temp @kind object;
  #L49aa90.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49aa96.  v3:= temp @kind object;
  #L49aa98.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49aa9e.  v4:= temp;
  #L49aaa0.  if v4 == 0 then goto L49aad8;
  #L49aaa4.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49aaaa.  v4:= temp @kind object;
  #L49aaac.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L49aab0.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L49aab6.  v5:= temp @kind object;
  #L49aab8.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L49aabc.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L49aac2.  v5:= temp;
  #L49aac4.  if v5 >= v1 then goto L49aa98;
  #L49aac8.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L49aace.  v4:= temp @kind object;
  #L49aad0.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49aad6.  goto L49aa98;
  #L49aad8.  @monitorexit v2
  #L49aada.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49aae0.  v0:= temp @kind object;
  #L49aae2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49aae8.  v1:= temp;
  #L49aaea.  if v1 == 0 then goto L49ab28;
  #L49aaee.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49aaf4.  v1:= temp @kind object;
  #L49aaf6.  v2:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49aafa.  v2:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink.this$0` @type ^`rx.internal.operators.OnSubscribeJoin` @kind object;
  #L49aafe.  v2:= v2.`rx.internal.operators.OnSubscribeJoin.resultSelector` @type ^`rx.functions.Func2` @kind object;
  #L49ab02.  call temp:= `call`(v2, v1, v7) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49ab08.  v1:= temp @kind object;
  #L49ab0a.  v2:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49ab0e.  v2:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49ab12.  call `onNext`(v2, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49ab18.  goto L49aae2;
  #L49ab1a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ab1c.  @monitorexit v2
  #L49ab1e.  throw v7;
  #L49ab20.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ab22.  call `throwOrReport`(v7, v6) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49ab28.  return @kind void;
  #L49ab2a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ab2c.  @monitorexit v0
  #L49ab2e.  goto L49ab32;
  #L49ab30.  throw v7;
  #L49ab32.  goto L49ab30;
  catch `java.lang.Throwable` @[L49a9ee..L49aa1e] goto L49ab2a;
  catch `java.lang.Throwable` @[L49aa36..L49aa7c] goto L49ab20;
  catch `java.lang.Throwable` @[L49aa7c..L49aada] goto L49ab1a;
  catch `java.lang.Throwable` @[L49aada..L49ab18] goto L49ab20;
  catch `java.lang.Throwable` @[L49ab1c..L49ab1e] goto L49ab1a;
  catch `java.lang.Throwable` @[L49ab1e..L49ab20] goto L49ab20;
  catch `java.lang.Throwable` @[L49ab2c..L49ab2e] goto L49ab2a;
}
