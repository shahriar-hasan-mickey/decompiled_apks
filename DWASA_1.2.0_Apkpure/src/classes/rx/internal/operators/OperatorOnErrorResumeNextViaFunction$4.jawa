record `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.done` @AccessFlag PRIVATE;
  `long` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.produced` @AccessFlag ;
  `rx.internal.operators.OperatorOnErrorResumeNextViaFunction` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$child` @AccessFlag FINAL_SYNTHETIC;
  `rx.internal.producers.ProducerArbiter` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$pa` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$serial` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4` v0 @kind this, `rx.internal.operators.OperatorOnErrorResumeNextViaFunction` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.internal.producers.ProducerArbiter` v3 @kind object, `rx.subscriptions.SerialSubscription` v4 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4;.<init>:(Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;Lrx/Subscriber;Lrx/internal/producers/ProducerArbiter;Lrx/subscriptions/SerialSubscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a5088.  v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.this$0` @type ^`rx.internal.operators.OperatorOnErrorResumeNextViaFunction` := v1 @kind object;
  #L4a508c.  v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a5090.  v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$pa` @type ^`rx.internal.producers.ProducerArbiter` := v3 @kind object;
  #L4a5094.  v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$serial` @type ^`rx.subscriptions.SerialSubscription` := v4 @kind object;
  #L4a5098.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a509e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4` v1 @kind this) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a50b0.  v0:= v1.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.done` @type ^`boolean` @kind boolean;
  #L4a50b4.  if v0 == 0 then goto L4a50ba;
  #L4a50b8.  return @kind void;
  #L4a50ba.  v0:= 1I;
  #L4a50bc.  v1.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.done` @type ^`boolean` := v0 @kind boolean;
  #L4a50c0.  v0:= v1.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a50c4.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a50ca.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a50dc.  v0:= v6.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.done` @type ^`boolean` @kind boolean;
  #L4a50e0.  if v0 == 0 then goto L4a50f2;
  #L4a50e4.  call `throwIfFatal`(v7) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a50ea.  call `onError`(v7) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a50f0.  return @kind void;
  #L4a50f2.  v0:= 1I;
  #L4a50f4.  v6.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.done` @type ^`boolean` := v0 @kind boolean;
  #L4a50f8.  call `unsubscribe`(v6) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4;.unsubscribe:()V` @kind virtual;
  #L4a50fe.  v0:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1`;
  #L4a5102.  call `<init>`(v0, v6) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4$1;.<init>:(Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4;)V` @kind direct;
  #L4a5108.  v1:= v6.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4a510c.  call `set`(v1, v0) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4a5112.  v1:= v6.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.produced` @type ^`long` @kind wide;
  #L4a5116.  v3:= 0L;
  #L4a511a.  v5:= lcmp(v1, v3);
  #L4a511e.  if v5 == 0 then goto L4a512c;
  #L4a5122.  v3:= v6.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$pa` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a5126.  call `produced`(v3, v1) @signature `Lrx/internal/producers/ProducerArbiter;.produced:(J)V` @kind virtual;
  #L4a512c.  v1:= v6.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.this$0` @type ^`rx.internal.operators.OperatorOnErrorResumeNextViaFunction` @kind object;
  #L4a5130.  v1:= v1.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction.resumeFunction` @type ^`rx.functions.Func1` @kind object;
  #L4a5134.  call temp:= `call`(v1, v7) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a513a.  v7:= temp @kind object;
  #L4a513c.  v7:= (`rx.Observable`) v7 @kind object;
  #L4a5140.  call temp:= `unsafeSubscribe`(v7, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a5146.  goto L4a5154;
  #L4a5148.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a514a.  v0:= v6.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a514e.  call `throwOrReport`(v7, v0) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4a5154.  return @kind void;
  catch `java.lang.Throwable` @[L4a50f8..L4a5146] goto L4a5148;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a5174.  v0:= v4.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.done` @type ^`boolean` @kind boolean;
  #L4a5178.  if v0 == 0 then goto L4a517e;
  #L4a517c.  return @kind void;
  #L4a517e.  v0:= v4.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.produced` @type ^`long` @kind wide;
  #L4a5182.  v2:= 1L;
  #L4a5186.  v0:= v0 + v2 @kind long;
  #L4a5188.  v4.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.produced` @type ^`long` := v0 @kind wide;
  #L4a518c.  v0:= v4.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a5190.  call `onNext`(v0, v5) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a5196.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a51a8.  v0:= v1.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.val$pa` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a51ac.  call `setProducer`(v0, v2) @signature `Lrx/internal/producers/ProducerArbiter;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a51b2.  return @kind void;
}
