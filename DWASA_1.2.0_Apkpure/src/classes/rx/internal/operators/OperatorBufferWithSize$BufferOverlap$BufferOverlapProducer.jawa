record `rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorBufferWithSize$BufferOverlap` `rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer` v0 @kind this, `rx.internal.operators.OperatorBufferWithSize$BufferOverlap` v1 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer;.<init>:(Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49e5b0.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer.this$0` @type ^`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` := v1 @kind object;
  #L49e5b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49e5ba.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer` v5 @kind this, `long` v6 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49e5cc.  v0:= v5.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer.this$0` @type ^`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` @kind object;
  #L49e5d0.  v1:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49e5d4.  v2:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L49e5d8.  v3:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.actual` @type ^`rx.Subscriber` @kind object;
  #L49e5dc.  call temp:= `postCompleteRequest`(v1, v6, v2, v3) @signature `Lrx/internal/operators/BackpressureUtils;.postCompleteRequest:(Ljava/util/concurrent/atomic/AtomicLong;JLjava/util/Queue;Lrx/Subscriber;)Z` @kind static;
  #L49e5e2.  v1:= temp;
  #L49e5e4.  if v1 == 0 then goto L49e64e;
  #L49e5e8.  v1:= 0L;
  #L49e5ec.  v3:= lcmp(v6, v1);
  #L49e5f0.  if v3 == 0 then goto L49e64e;
  #L49e5f4.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer;.get:()Z` @kind virtual;
  #L49e5fa.  v1:= temp;
  #L49e5fc.  if v1 != 0 then goto L49e63a;
  #L49e600.  v1:= 0I;
  #L49e602.  v2:= 1I;
  #L49e604.  call temp:= `compareAndSet`(v5, v1, v2) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49e60a.  v1:= temp;
  #L49e60c.  if v1 == 0 then goto L49e63a;
  #L49e610.  v1:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.skip` @type ^`int`;
  #L49e614.  v1:= (`long`) v1 @kind i2l;
  #L49e616.  v3:= 1L;
  #L49e61a.  v6:= v6 - v3 @kind long;
  #L49e61c.  call temp:= `multiplyCap`(v1, v6) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L49e622.  v6:= temp @kind wide;
  #L49e624.  v1:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.count` @type ^`int`;
  #L49e628.  v1:= (`long`) v1 @kind i2l;
  #L49e62a.  call temp:= `addCap`(v6, v1) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L49e630.  v6:= temp @kind wide;
  #L49e632.  call `access$300`(v0, v6) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.access$300:(Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;J)V` @kind static;
  #L49e638.  goto L49e64e;
  #L49e63a.  v1:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.skip` @type ^`int`;
  #L49e63e.  v1:= (`long`) v1 @kind i2l;
  #L49e640.  call temp:= `multiplyCap`(v1, v6) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L49e646.  v6:= temp @kind wide;
  #L49e648.  call `access$400`(v0, v6) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.access$400:(Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;J)V` @kind static;
  #L49e64e.  return @kind void;
}
