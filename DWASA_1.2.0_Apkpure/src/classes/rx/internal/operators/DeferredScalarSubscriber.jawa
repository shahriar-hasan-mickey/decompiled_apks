record `rx.internal.operators.DeferredScalarSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.DeferredScalarSubscriber.actual` @AccessFlag PROTECTED_FINAL;
  `boolean` `rx.internal.operators.DeferredScalarSubscriber.hasValue` @AccessFlag PROTECTED;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.DeferredScalarSubscriber.state` @AccessFlag FINAL;
  `java.lang.Object` `rx.internal.operators.DeferredScalarSubscriber.value` @AccessFlag PROTECTED;
}
global `int` `@@rx.internal.operators.DeferredScalarSubscriber.HAS_REQUEST_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@rx.internal.operators.DeferredScalarSubscriber.HAS_REQUEST_NO_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@rx.internal.operators.DeferredScalarSubscriber.NO_REQUEST_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@rx.internal.operators.DeferredScalarSubscriber.NO_REQUEST_NO_VALUE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.DeferredScalarSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L495e4c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L495e52.  v0.`rx.internal.operators.DeferredScalarSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L495e56.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L495e5a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L495e60.  v0.`rx.internal.operators.DeferredScalarSubscriber.state` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L495e64.  return @kind void;
}
procedure `void` `complete`(`rx.internal.operators.DeferredScalarSubscriber` v1 @kind this) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.complete:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L495e78.  v0:= v1.`rx.internal.operators.DeferredScalarSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L495e7c.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L495e82.  return @kind void;
}
procedure `void` `complete`(`rx.internal.operators.DeferredScalarSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.complete:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L495e94.  v0:= v5.`rx.internal.operators.DeferredScalarSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L495e98.  v1:= v5.`rx.internal.operators.DeferredScalarSubscriber.state` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495e9c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L495ea2.  v1:= temp;
  #L495ea4.  v2:= 2I;
  #L495ea6.  if v1 == v2 then goto L495efe;
  #L495eaa.  v3:= 3I;
  #L495eac.  if v1 == v3 then goto L495efe;
  #L495eb0.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L495eb6.  v4:= temp;
  #L495eb8.  if v4 == 0 then goto L495ebe;
  #L495ebc.  goto L495efe;
  #L495ebe.  v4:= 1I;
  #L495ec0.  if v1 != v4 then goto L495ee8;
  #L495ec4.  call `onNext`(v0, v6) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L495eca.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L495ed0.  v6:= temp;
  #L495ed2.  if v6 != 0 then goto L495edc;
  #L495ed6.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L495edc.  v6:= v5.`rx.internal.operators.DeferredScalarSubscriber.state` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495ee0.  call `lazySet`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L495ee6.  return @kind void;
  #L495ee8.  v5.`rx.internal.operators.DeferredScalarSubscriber.value` @type ^`java.lang.Object` := v6 @kind object;
  #L495eec.  v1:= v5.`rx.internal.operators.DeferredScalarSubscriber.state` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495ef0.  v3:= 0I;
  #L495ef2.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L495ef8.  v1:= temp;
  #L495efa.  if v1 == 0 then goto L495e98;
  #L495efe.  return @kind void;
}
procedure `void` `downstreamRequest`(`rx.internal.operators.DeferredScalarSubscriber` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.downstreamRequest:(J)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L495f10.  v0:= 0L;
  #L495f14.  v2:= lcmp(v4, v0);
  #L495f18.  if v2 < 0 then goto L495f96;
  #L495f1c.  v2:= lcmp(v4, v0);
  #L495f20.  if v2 == 0 then goto L495f94;
  #L495f24.  v4:= v3.`rx.internal.operators.DeferredScalarSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L495f28.  v5:= v3.`rx.internal.operators.DeferredScalarSubscriber.state` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495f2c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L495f32.  v5:= temp;
  #L495f34.  v0:= 1I;
  #L495f36.  if v5 == v0 then goto L495f94;
  #L495f3a.  v1:= 3I;
  #L495f3c.  if v5 == v1 then goto L495f94;
  #L495f40.  call temp:= `isUnsubscribed`(v4) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L495f46.  v2:= temp;
  #L495f48.  if v2 == 0 then goto L495f4e;
  #L495f4c.  goto L495f94;
  #L495f4e.  v2:= 2I;
  #L495f50.  if v5 != v2 then goto L495f82;
  #L495f54.  v5:= v3.`rx.internal.operators.DeferredScalarSubscriber.state` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495f58.  call temp:= `compareAndSet`(v5, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L495f5e.  v5:= temp;
  #L495f60.  if v5 == 0 then goto L495f80;
  #L495f64.  v5:= v3.`rx.internal.operators.DeferredScalarSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L495f68.  call `onNext`(v4, v5) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L495f6e.  call temp:= `isUnsubscribed`(v4) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L495f74.  v5:= temp;
  #L495f76.  if v5 != 0 then goto L495f80;
  #L495f7a.  call `onCompleted`(v4) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L495f80.  return @kind void;
  #L495f82.  v5:= v3.`rx.internal.operators.DeferredScalarSubscriber.state` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495f86.  v1:= 0I;
  #L495f88.  call temp:= `compareAndSet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L495f8e.  v5:= temp;
  #L495f90.  if v5 == 0 then goto L495f28;
  #L495f94.  return @kind void;
  #L495f96.  v0:= new `java.lang.IllegalArgumentException`;
  #L495f9a.  v1:= new `java.lang.StringBuilder`;
  #L495f9e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L495fa4.  v2:= "n >= 0 required but it was " @kind object;
  #L495fa8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L495fae.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L495fb4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L495fba.  v4:= temp @kind object;
  #L495fbc.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L495fc2.  goto L495fc6;
  #L495fc4.  throw v0;
  #L495fc6.  goto L495fc4;
}
procedure `void` `onCompleted`(`rx.internal.operators.DeferredScalarSubscriber` v1 @kind this) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L495fd8.  v0:= v1.`rx.internal.operators.DeferredScalarSubscriber.hasValue` @type ^`boolean` @kind boolean;
  #L495fdc.  if v0 == 0 then goto L495fec;
  #L495fe0.  v0:= v1.`rx.internal.operators.DeferredScalarSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L495fe4.  call `complete`(v1, v0) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L495fea.  goto L495ff2;
  #L495fec.  call `complete`(v1) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.complete:()V` @kind virtual;
  #L495ff2.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.DeferredScalarSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L496004.  v0:= 0I;
  #L496006.  v1.`rx.internal.operators.DeferredScalarSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L49600a.  v0:= v1.`rx.internal.operators.DeferredScalarSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49600e.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L496014.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.DeferredScalarSubscriber` v2 @kind this, `rx.Producer` v3 @kind object) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L496028.  v0:= 9223372036854775807L;
  #L496032.  call `request`(v3, v0) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L496038.  return @kind void;
}
procedure `void` `setupDownstream`(`rx.internal.operators.DeferredScalarSubscriber` v2 @kind this) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.setupDownstream:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L49604c.  v0:= v2.`rx.internal.operators.DeferredScalarSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L496050.  call `add`(v0, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L496056.  v1:= new `rx.internal.operators.DeferredScalarSubscriber$InnerProducer`;
  #L49605a.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/DeferredScalarSubscriber$InnerProducer;.<init>:(Lrx/internal/operators/DeferredScalarSubscriber;)V` @kind direct;
  #L496060.  call `setProducer`(v0, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L496066.  return @kind void;
}
procedure `void` `subscribeTo`(`rx.internal.operators.DeferredScalarSubscriber` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.subscribeTo:(Lrx/Observable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L496078.  call `setupDownstream`(v0) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.setupDownstream:()V` @kind virtual;
  #L49607e.  call temp:= `unsafeSubscribe`(v1, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L496084.  return @kind void;
}
