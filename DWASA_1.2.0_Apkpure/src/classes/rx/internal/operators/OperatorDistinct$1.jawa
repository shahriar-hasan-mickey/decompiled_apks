record `rx.internal.operators.OperatorDistinct$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `java.util.Set` `rx.internal.operators.OperatorDistinct$1.keyMemory` @AccessFlag ;
  `rx.internal.operators.OperatorDistinct` `rx.internal.operators.OperatorDistinct$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorDistinct$1.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDistinct$1` v0 @kind this, `rx.internal.operators.OperatorDistinct` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorDistinct$1;.<init>:(Lrx/internal/operators/OperatorDistinct;Lrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a046c.  v0.`rx.internal.operators.OperatorDistinct$1.this$0` @type ^`rx.internal.operators.OperatorDistinct` := v1 @kind object;
  #L4a0470.  v0.`rx.internal.operators.OperatorDistinct$1.val$child` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a0474.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a047a.  v1:= new `java.util.HashSet`;
  #L4a047e.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L4a0484.  v0.`rx.internal.operators.OperatorDistinct$1.keyMemory` @type ^`java.util.Set` := v1 @kind object;
  #L4a0488.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorDistinct$1` v1 @kind this) @signature `Lrx/internal/operators/OperatorDistinct$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a049c.  v0:= 0I;
  #L4a049e.  v1.`rx.internal.operators.OperatorDistinct$1.keyMemory` @type ^`java.util.Set` := v0 @kind object;
  #L4a04a2.  v0:= v1.`rx.internal.operators.OperatorDistinct$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a04a6.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a04ac.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorDistinct$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorDistinct$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a04c0.  v0:= 0I;
  #L4a04c2.  v1.`rx.internal.operators.OperatorDistinct$1.keyMemory` @type ^`java.util.Set` := v0 @kind object;
  #L4a04c6.  v0:= v1.`rx.internal.operators.OperatorDistinct$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a04ca.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a04d0.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorDistinct$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorDistinct$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a04e4.  v0:= v2.`rx.internal.operators.OperatorDistinct$1.this$0` @type ^`rx.internal.operators.OperatorDistinct` @kind object;
  #L4a04e8.  v0:= v0.`rx.internal.operators.OperatorDistinct.keySelector` @type ^`rx.functions.Func1` @kind object;
  #L4a04ec.  call temp:= `call`(v0, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a04f2.  v0:= temp @kind object;
  #L4a04f4.  v1:= v2.`rx.internal.operators.OperatorDistinct$1.keyMemory` @type ^`java.util.Set` @kind object;
  #L4a04f8.  call temp:= `add`(v1, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4a04fe.  v0:= temp;
  #L4a0500.  if v0 == 0 then goto L4a0510;
  #L4a0504.  v0:= v2.`rx.internal.operators.OperatorDistinct$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a0508.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a050e.  goto L4a051a;
  #L4a0510.  v0:= 1L;
  #L4a0514.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorDistinct$1;.request:(J)V` @kind virtual;
  #L4a051a.  return @kind void;
}
