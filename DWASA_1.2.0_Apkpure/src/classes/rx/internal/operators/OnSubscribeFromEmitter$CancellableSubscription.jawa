record `rx.internal.operators.OnSubscribeFromEmitter$CancellableSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `rx.Subscription` @kind interface {
}
global `long` `@@rx.internal.operators.OnSubscribeFromEmitter$CancellableSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromEmitter$CancellableSubscription` v0 @kind this, `rx.functions.Cancellable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$CancellableSubscription;.<init>:(Lrx/functions/Cancellable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4992d0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4992d6.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OnSubscribeFromEmitter$CancellableSubscription` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$CancellableSubscription;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4992ac.  call temp:= `get`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$CancellableSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4992b2.  v0:= temp @kind object;
  #L4992b4.  if v0 != 0 then goto L4992bc;
  #L4992b8.  v0:= 1I;
  #L4992ba.  goto L4992be;
  #L4992bc.  v0:= 0I;
  #L4992be.  return v0;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OnSubscribeFromEmitter$CancellableSubscription` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$CancellableSubscription;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4992e8.  call temp:= `get`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$CancellableSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4992ee.  v0:= temp @kind object;
  #L4992f0.  if v0 == 0 then goto L49931c;
  #L4992f4.  v0:= 0I;
  #L4992f6.  call temp:= `getAndSet`(v1, v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$CancellableSubscription;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4992fc.  v0:= temp @kind object;
  #L4992fe.  v0:= (`rx.functions.Cancellable`) v0 @kind object;
  #L499302.  if v0 == 0 then goto L49931c;
  #L499306.  call `cancel`(v0) @signature `Lrx/functions/Cancellable;.cancel:()V` @kind interface;
  #L49930c.  goto L49931c;
  #L49930e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L499310.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L499316.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49931c.  return @kind void;
  catch `java.lang.Exception` @[L499306..L49930c] goto L49930e;
}
