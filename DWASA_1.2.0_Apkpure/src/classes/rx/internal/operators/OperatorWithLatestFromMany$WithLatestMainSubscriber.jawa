record `rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.actual` @AccessFlag FINAL;
  `rx.functions.FuncN` `rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.combiner` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.current` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.done` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.ready` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.EMPTY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ae768.  v0:= new `java.lang.Object`;
  #L4ae76c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ae772.  `@@rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.EMPTY` @type ^`java.lang.Object` := v0 @kind object;
  #L4ae776.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` v1 @kind this, `rx.Subscriber` v2 @kind object, `rx.functions.FuncN` v3 @kind object, `int` v4 ) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/FuncN;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ae788.  call `<init>`(v1) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4ae78e.  v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.actual` @type ^`rx.Subscriber` := v2 @kind object;
  #L4ae792.  v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.combiner` @type ^`rx.functions.FuncN` := v3 @kind object;
  #L4ae796.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L4ae79a.  v3:= v4 + 1;
  #L4ae79e.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4ae7a4.  v3:= 0I;
  #L4ae7a6.  if v3 > v4 then goto L4ae7ba;
  #L4ae7aa.  v0:= `@@rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.EMPTY` @type ^`java.lang.Object` @kind object;
  #L4ae7ae.  call `lazySet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4ae7b4.  v3:= v3 + 1;
  #L4ae7b8.  goto L4ae7a6;
  #L4ae7ba.  v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L4ae7be.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4ae7c2.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4ae7c8.  v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.ready` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4ae7cc.  v2:= 0L;
  #L4ae7d0.  call `request`(v1, v2) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.request:(J)V` @kind virtual;
  #L4ae7d6.  return @kind void;
}
procedure `void` `innerComplete`(`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` v1 @kind this, `int` v2 ) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.innerComplete:(I)V` @AccessFlag  {
    temp;
    v0;

  #L4ae7e8.  v0:= v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4ae7ec.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4ae7f2.  v2:= temp @kind object;
  #L4ae7f4.  v0:= `@@rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.EMPTY` @type ^`java.lang.Object` @kind object;
  #L4ae7f8.  if v2 != v0 then goto L4ae802;
  #L4ae7fc.  call `onCompleted`(v1) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.onCompleted:()V` @kind virtual;
  #L4ae802.  return @kind void;
}
procedure `void` `innerError`(`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` v0 @kind this, `int` v1 , `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.innerError:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;

  #L4ae814.  call `onError`(v0, v2) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ae81a.  return @kind void;
}
procedure `void` `innerNext`(`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.innerNext:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L4ae82c.  v0:= v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4ae830.  call temp:= `getAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ae836.  v2:= temp @kind object;
  #L4ae838.  v3:= `@@rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.EMPTY` @type ^`java.lang.Object` @kind object;
  #L4ae83c.  if v2 != v3 then goto L4ae84a;
  #L4ae840.  v2:= v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.ready` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ae844.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ae84a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae85c.  v0:= v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ae860.  if v0 == 0 then goto L4ae866;
  #L4ae864.  return @kind void;
  #L4ae866.  v0:= 1I;
  #L4ae868.  v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4ae86c.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.unsubscribe:()V` @kind virtual;
  #L4ae872.  v0:= v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4ae876.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4ae87c.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae890.  v0:= v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ae894.  if v0 == 0 then goto L4ae8a0;
  #L4ae898.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ae89e.  return @kind void;
  #L4ae8a0.  v0:= 1I;
  #L4ae8a2.  v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4ae8a6.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.unsubscribe:()V` @kind virtual;
  #L4ae8ac.  v0:= v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4ae8b0.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ae8b6.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ae8c8.  v0:= v4.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ae8cc.  if v0 == 0 then goto L4ae8d2;
  #L4ae8d0.  return @kind void;
  #L4ae8d2.  v0:= v4.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.ready` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ae8d6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4ae8dc.  v0:= temp;
  #L4ae8de.  if v0 != 0 then goto L4ae940;
  #L4ae8e2.  v0:= v4.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4ae8e6.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4ae8ec.  v1:= temp;
  #L4ae8ee.  v2:= 0I;
  #L4ae8f0.  call `lazySet`(v0, v2, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4ae8f6.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4ae8fc.  v5:= temp;
  #L4ae8fe.  v5:= new `java.lang.Object`[v5];
  #L4ae902.  if v2 >= v1 then goto L4ae918;
  #L4ae906.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4ae90c.  v3:= temp @kind object;
  #L4ae90e.  v5[v2]:= v3 @kind object;
  #L4ae912.  v2:= v2 + 1;
  #L4ae916.  goto L4ae902;
  #L4ae918.  v0:= v4.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.combiner` @type ^`rx.functions.FuncN` @kind object;
  #L4ae91c.  call temp:= `call`(v0, v5) @signature `Lrx/functions/FuncN;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ae922.  v5:= temp @kind object;
  #L4ae924.  v0:= v4.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4ae928.  call `onNext`(v0, v5) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ae92e.  goto L4ae94a;
  #L4ae930.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae932.  call `throwIfFatal`(v5) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ae938.  call `onError`(v4, v5) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ae93e.  return @kind void;
  #L4ae940.  v0:= 1L;
  #L4ae944.  call `request`(v4, v0) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.request:(J)V` @kind virtual;
  #L4ae94a.  return @kind void;
  catch `java.lang.Throwable` @[L4ae918..L4ae924] goto L4ae930;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae968.  call `setProducer`(v1, v2) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind super;
  #L4ae96e.  v0:= v1.`rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4ae972.  call `setProducer`(v0, v2) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4ae978.  return @kind void;
}
