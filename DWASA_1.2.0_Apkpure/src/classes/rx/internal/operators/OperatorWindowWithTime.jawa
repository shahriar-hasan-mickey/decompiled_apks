record `rx.internal.operators.OperatorWindowWithTime` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Scheduler` `rx.internal.operators.OperatorWindowWithTime.scheduler` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorWindowWithTime.size` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorWindowWithTime.timeshift` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorWindowWithTime.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OperatorWindowWithTime.unit` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OperatorWindowWithTime.NEXT_SUBJECT` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorWindowWithTime;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ae5ac.  v0:= new `java.lang.Object`;
  #L4ae5b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ae5b6.  `@@rx.internal.operators.OperatorWindowWithTime.NEXT_SUBJECT` @type ^`java.lang.Object` := v0 @kind object;
  #L4ae5ba.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithTime` v0 @kind this, `long` v1 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `int` v6 , `rx.Scheduler` v7 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime;.<init>:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ae5cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ae5d2.  v0.`rx.internal.operators.OperatorWindowWithTime.timespan` @type ^`long` := v1 @kind wide;
  #L4ae5d6.  v0.`rx.internal.operators.OperatorWindowWithTime.timeshift` @type ^`long` := v3 @kind wide;
  #L4ae5da.  v0.`rx.internal.operators.OperatorWindowWithTime.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4ae5de.  v0.`rx.internal.operators.OperatorWindowWithTime.size` @type ^`int` := v6;
  #L4ae5e2.  v0.`rx.internal.operators.OperatorWindowWithTime.scheduler` @type ^`rx.Scheduler` := v7 @kind object;
  #L4ae5e6.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorWindowWithTime` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ae528.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4ae52c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithTime;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4ae532.  v1:= temp @kind object;
  #L4ae534.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorWindowWithTime` v6 @kind this, `rx.Subscriber` v7 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ae548.  v0:= v6.`rx.internal.operators.OperatorWindowWithTime.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4ae54c.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4ae552.  v0:= temp @kind object;
  #L4ae554.  v1:= v6.`rx.internal.operators.OperatorWindowWithTime.timespan` @type ^`long` @kind wide;
  #L4ae558.  v3:= v6.`rx.internal.operators.OperatorWindowWithTime.timeshift` @type ^`long` @kind wide;
  #L4ae55c.  v5:= lcmp(v1, v3);
  #L4ae560.  if v5 != 0 then goto L4ae57c;
  #L4ae564.  v1:= new `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber`;
  #L4ae568.  call `<init>`(v1, v6, v7, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.<init>:(Lrx/internal/operators/OperatorWindowWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @kind direct;
  #L4ae56e.  call `add`(v1, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ae574.  call `scheduleExact`(v1) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.scheduleExact:()V` @kind virtual;
  #L4ae57a.  return v1 @kind object;
  #L4ae57c.  v1:= new `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber`;
  #L4ae580.  call `<init>`(v1, v6, v7, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.<init>:(Lrx/internal/operators/OperatorWindowWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @kind direct;
  #L4ae586.  call `add`(v1, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ae58c.  call `startNewChunk`(v1) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.startNewChunk:()V` @kind virtual;
  #L4ae592.  call `scheduleChunk`(v1) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.scheduleChunk:()V` @kind virtual;
  #L4ae598.  return v1 @kind object;
}
