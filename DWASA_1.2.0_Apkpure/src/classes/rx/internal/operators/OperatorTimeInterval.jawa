record `rx.internal.operators.OperatorTimeInterval` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Scheduler` `rx.internal.operators.OperatorTimeInterval.scheduler` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTimeInterval` v0 @kind this, `rx.Scheduler` v1 @kind object) @signature `Lrx/internal/operators/OperatorTimeInterval;.<init>:(Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aacc0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aacc6.  v0.`rx.internal.operators.OperatorTimeInterval.scheduler` @type ^`rx.Scheduler` := v1 @kind object;
  #L4aacca.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTimeInterval` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorTimeInterval;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aac84.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4aac88.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorTimeInterval;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4aac8e.  v1:= temp @kind object;
  #L4aac90.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorTimeInterval` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorTimeInterval;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aaca4.  v0:= new `rx.internal.operators.OperatorTimeInterval$1`;
  #L4aaca8.  call `<init>`(v0, v1, v2, v2) @signature `Lrx/internal/operators/OperatorTimeInterval$1;.<init>:(Lrx/internal/operators/OperatorTimeInterval;Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L4aacae.  return v0 @kind object;
}
