record `rx.internal.operators.OnSubscribeDetach` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.Observable` `rx.internal.operators.OnSubscribeDetach.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeDetach` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeDetach;.<init>:(Lrx/Observable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L498230.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L498236.  v0.`rx.internal.operators.OnSubscribeDetach.source` @type ^`rx.Observable` := v1 @kind object;
  #L49823a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeDetach` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeDetach;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49824c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L498250.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeDetach;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L498256.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeDetach` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeDetach;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498268.  v0:= new `rx.internal.operators.OnSubscribeDetach$DetachSubscriber`;
  #L49826c.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L498272.  v1:= new `rx.internal.operators.OnSubscribeDetach$DetachProducer`;
  #L498276.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachProducer;.<init>:(Lrx/internal/operators/OnSubscribeDetach$DetachSubscriber;)V` @kind direct;
  #L49827c.  call `add`(v3, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L498282.  call `setProducer`(v3, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L498288.  v3:= v2.`rx.internal.operators.OnSubscribeDetach.source` @type ^`rx.Observable` @kind object;
  #L49828c.  call temp:= `unsafeSubscribe`(v3, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L498292.  return @kind void;
}
