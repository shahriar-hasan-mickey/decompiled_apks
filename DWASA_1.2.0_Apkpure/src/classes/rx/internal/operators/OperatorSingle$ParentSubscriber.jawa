record `rx.internal.operators.OperatorSingle$ParentSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorSingle$ParentSubscriber.child` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `rx.internal.operators.OperatorSingle$ParentSubscriber.defaultValue` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.internal.operators.OperatorSingle$ParentSubscriber.hasDefaultValue` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.internal.operators.OperatorSingle$ParentSubscriber.hasTooManyElements` @AccessFlag PRIVATE;
  `boolean` `rx.internal.operators.OperatorSingle$ParentSubscriber.isNonEmpty` @AccessFlag PRIVATE;
  `java.lang.Object` `rx.internal.operators.OperatorSingle$ParentSubscriber.value` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSingle$ParentSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorSingle$ParentSubscriber;.<init>:(Lrx/Subscriber;ZLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a8574.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a857a.  v0.`rx.internal.operators.OperatorSingle$ParentSubscriber.child` @type ^`rx.Subscriber` := v1 @kind object;
  #L4a857e.  v0.`rx.internal.operators.OperatorSingle$ParentSubscriber.hasDefaultValue` @type ^`boolean` := v2 @kind boolean;
  #L4a8582.  v0.`rx.internal.operators.OperatorSingle$ParentSubscriber.defaultValue` @type ^`java.lang.Object` := v3 @kind object;
  #L4a8586.  v1:= 2L;
  #L4a858a.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorSingle$ParentSubscriber;.request:(J)V` @kind virtual;
  #L4a8590.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSingle$ParentSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorSingle$ParentSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a85a4.  v0:= v3.`rx.internal.operators.OperatorSingle$ParentSubscriber.hasTooManyElements` @type ^`boolean` @kind boolean;
  #L4a85a8.  if v0 != 0 then goto L4a8608;
  #L4a85ac.  v0:= v3.`rx.internal.operators.OperatorSingle$ParentSubscriber.isNonEmpty` @type ^`boolean` @kind boolean;
  #L4a85b0.  if v0 == 0 then goto L4a85ce;
  #L4a85b4.  v0:= v3.`rx.internal.operators.OperatorSingle$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a85b8.  v1:= new `rx.internal.producers.SingleProducer`;
  #L4a85bc.  v2:= v3.`rx.internal.operators.OperatorSingle$ParentSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4a85c0.  call `<init>`(v1, v0, v2) @signature `Lrx/internal/producers/SingleProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L4a85c6.  call `setProducer`(v0, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a85cc.  goto L4a8608;
  #L4a85ce.  v0:= v3.`rx.internal.operators.OperatorSingle$ParentSubscriber.hasDefaultValue` @type ^`boolean` @kind boolean;
  #L4a85d2.  if v0 == 0 then goto L4a85f0;
  #L4a85d6.  v0:= v3.`rx.internal.operators.OperatorSingle$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a85da.  v1:= new `rx.internal.producers.SingleProducer`;
  #L4a85de.  v2:= v3.`rx.internal.operators.OperatorSingle$ParentSubscriber.defaultValue` @type ^`java.lang.Object` @kind object;
  #L4a85e2.  call `<init>`(v1, v0, v2) @signature `Lrx/internal/producers/SingleProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L4a85e8.  call `setProducer`(v0, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a85ee.  goto L4a8608;
  #L4a85f0.  v0:= v3.`rx.internal.operators.OperatorSingle$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a85f4.  v1:= new `java.util.NoSuchElementException`;
  #L4a85f8.  v2:= "Sequence contains no elements" @kind object;
  #L4a85fc.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a8602.  call `onError`(v0, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a8608.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSingle$ParentSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSingle$ParentSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a861c.  v0:= v1.`rx.internal.operators.OperatorSingle$ParentSubscriber.hasTooManyElements` @type ^`boolean` @kind boolean;
  #L4a8620.  if v0 == 0 then goto L4a862c;
  #L4a8624.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a862a.  return @kind void;
  #L4a862c.  v0:= v1.`rx.internal.operators.OperatorSingle$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a8630.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a8636.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSingle$ParentSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorSingle$ParentSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8648.  v0:= v2.`rx.internal.operators.OperatorSingle$ParentSubscriber.hasTooManyElements` @type ^`boolean` @kind boolean;
  #L4a864c.  if v0 != 0 then goto L4a8686;
  #L4a8650.  v0:= v2.`rx.internal.operators.OperatorSingle$ParentSubscriber.isNonEmpty` @type ^`boolean` @kind boolean;
  #L4a8654.  v1:= 1I;
  #L4a8656.  if v0 == 0 then goto L4a867e;
  #L4a865a.  v2.`rx.internal.operators.OperatorSingle$ParentSubscriber.hasTooManyElements` @type ^`boolean` := v1 @kind boolean;
  #L4a865e.  v3:= v2.`rx.internal.operators.OperatorSingle$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a8662.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a8666.  v1:= "Sequence contains too many elements" @kind object;
  #L4a866a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a8670.  call `onError`(v3, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a8676.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorSingle$ParentSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a867c.  goto L4a8686;
  #L4a867e.  v2.`rx.internal.operators.OperatorSingle$ParentSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4a8682.  v2.`rx.internal.operators.OperatorSingle$ParentSubscriber.isNonEmpty` @type ^`boolean` := v1 @kind boolean;
  #L4a8686.  return @kind void;
}
