record `rx.internal.operators.OperatorBufferWithSingleObservable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Func0` `rx.internal.operators.OperatorBufferWithSingleObservable.bufferClosingSelector` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorBufferWithSingleObservable.initialCapacity` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSingleObservable` v1 @kind this, `rx.Observable` v2 @kind object, `int` v3 ) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable;.<init>:(Lrx/Observable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L49e3d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49e3d6.  v0:= new `rx.internal.operators.OperatorBufferWithSingleObservable$1`;
  #L49e3da.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$1;.<init>:(Lrx/internal/operators/OperatorBufferWithSingleObservable;Lrx/Observable;)V` @kind direct;
  #L49e3e0.  v1.`rx.internal.operators.OperatorBufferWithSingleObservable.bufferClosingSelector` @type ^`rx.functions.Func0` := v0 @kind object;
  #L49e3e4.  v1.`rx.internal.operators.OperatorBufferWithSingleObservable.initialCapacity` @type ^`int` := v3;
  #L49e3e8.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSingleObservable` v0 @kind this, `rx.functions.Func0` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable;.<init>:(Lrx/functions/Func0;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49e3fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49e402.  v0.`rx.internal.operators.OperatorBufferWithSingleObservable.bufferClosingSelector` @type ^`rx.functions.Func0` := v1 @kind object;
  #L49e406.  v0.`rx.internal.operators.OperatorBufferWithSingleObservable.initialCapacity` @type ^`int` := v2;
  #L49e40a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorBufferWithSingleObservable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49e340.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49e344.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L49e34a.  v1:= temp @kind object;
  #L49e34c.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorBufferWithSingleObservable` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49e360.  v0:= v3.`rx.internal.operators.OperatorBufferWithSingleObservable.bufferClosingSelector` @type ^`rx.functions.Func0` @kind object;
  #L49e364.  call temp:= `call`(v0) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L49e36a.  v0:= temp @kind object;
  #L49e36c.  v0:= (`rx.Observable`) v0 @kind object;
  #L49e370.  v1:= new `rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber`;
  #L49e374.  v2:= new `rx.observers.SerializedSubscriber`;
  #L49e378.  call `<init>`(v2, v4) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49e37e.  call `<init>`(v1, v3, v2) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.<init>:(Lrx/internal/operators/OperatorBufferWithSingleObservable;Lrx/Subscriber;)V` @kind direct;
  #L49e384.  v2:= new `rx.internal.operators.OperatorBufferWithSingleObservable$2`;
  #L49e388.  call `<init>`(v2, v3, v1) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$2;.<init>:(Lrx/internal/operators/OperatorBufferWithSingleObservable;Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;)V` @kind direct;
  #L49e38e.  call `add`(v4, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49e394.  call `add`(v4, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49e39a.  call temp:= `unsafeSubscribe`(v0, v2) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49e3a0.  return v1 @kind object;
  #L49e3a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e3a4.  call `throwOrReport`(v0, v4) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49e3aa.  call temp:= `empty`() @signature `Lrx/observers/Subscribers;.empty:()Lrx/Subscriber;` @kind static;
  #L49e3b0.  v4:= temp @kind object;
  #L49e3b2.  return v4 @kind object;
  catch `java.lang.Throwable` @[L49e360..L49e370] goto L49e3a2;
}
