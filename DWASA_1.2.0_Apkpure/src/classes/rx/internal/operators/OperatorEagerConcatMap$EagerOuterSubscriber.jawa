record `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.actual` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.error` @AccessFlag ;
  `rx.functions.Func1` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.mapper` @AccessFlag FINAL;
  `rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.sharedProducer` @AccessFlag PRIVATE;
  `java.util.Queue` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v0 @kind this, `rx.functions.Func1` v1 @kind object, `int` v2 , `int` v3 , `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.<init>:(Lrx/functions/Func1;IILrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a0d54.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a0d5a.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.mapper` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4a0d5e.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.bufferSize` @type ^`int` := v2;
  #L4a0d62.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.actual` @type ^`rx.Subscriber` := v4 @kind object;
  #L4a0d66.  v1:= new `java.util.LinkedList`;
  #L4a0d6a.  call `<init>`(v1) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4a0d70.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` := v1 @kind object;
  #L4a0d74.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4a0d78.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a0d7e.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4a0d82.  v1:= 2147483647I;
  #L4a0d88.  if v3 != v1 then goto L4a0d98;
  #L4a0d8c.  v1:= 9223372036854775807L;
  #L4a0d96.  goto L4a0d9a;
  #L4a0d98.  v1:= (`long`) v3 @kind i2l;
  #L4a0d9a.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.request:(J)V` @kind virtual;
  #L4a0da0.  return @kind void;
}
procedure `void` `cleanup`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.cleanup:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4a0db4.  v0:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a0db8.  @monitorenter v0
  #L4a0dba.  v1:= new `java.util.ArrayList`;
  #L4a0dbe.  v2:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a0dc2.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4a0dc8.  v2:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a0dcc.  call `clear`(v2) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4a0dd2.  @monitorexit v0
  #L4a0dd4.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a0dda.  v0:= temp @kind object;
  #L4a0ddc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a0de2.  v1:= temp;
  #L4a0de4.  if v1 == 0 then goto L4a0dfc;
  #L4a0de8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a0dee.  v1:= temp @kind object;
  #L4a0df0.  v1:= (`rx.Subscription`) v1 @kind object;
  #L4a0df4.  call `unsubscribe`(v1) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4a0dfa.  goto L4a0ddc;
  #L4a0dfc.  return @kind void;
  #L4a0dfe.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a0e00.  @monitorexit v0
  #L4a0e02.  goto L4a0e06;
  #L4a0e04.  throw v1;
  #L4a0e06.  goto L4a0e04;
  catch `java.lang.Throwable` @[L4a0dba..L4a0dd4] goto L4a0dfe;
  catch `java.lang.Throwable` @[L4a0e00..L4a0e02] goto L4a0dfe;
}
procedure `void` `drain`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v18 @kind this) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4a0e2c.  v1:= v18 @kind object;
  #L4a0e30.  v0:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a0e34.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a0e3a.  v0:= temp;
  #L4a0e3c.  if v0 == 0 then goto L4a0e42;
  #L4a0e40.  return @kind void;
  #L4a0e42.  v0:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.sharedProducer` @type ^`rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer` @kind object;
  #L4a0e46.  v2:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a0e4a.  v4:= 1I;
  #L4a0e4c.  v5:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4a0e50.  if v5 == 0 then goto L4a0e5c;
  #L4a0e54.  call `cleanup`(v18) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.cleanup:()V` @kind virtual;
  #L4a0e5a.  return @kind void;
  #L4a0e5c.  v5:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.done` @type ^`boolean` @kind boolean;
  #L4a0e60.  v6:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a0e64.  @monitorenter v6
  #L4a0e66.  v7:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a0e6a.  call temp:= `peek`(v7) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L4a0e70.  v7:= temp @kind object;
  #L4a0e72.  v7:= (`rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber`) v7 @kind object;
  #L4a0e76.  @monitorexit v6
  #L4a0e78.  v6:= 0I;
  #L4a0e7a.  if v7 != 0 then goto L4a0e82;
  #L4a0e7e.  v8:= 1I;
  #L4a0e80.  goto L4a0e84;
  #L4a0e82.  v8:= 0I;
  #L4a0e84.  if v5 == 0 then goto L4a0eaa;
  #L4a0e88.  v5:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4a0e8c.  if v5 == 0 then goto L4a0e9e;
  #L4a0e90.  call `cleanup`(v18) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.cleanup:()V` @kind virtual;
  #L4a0e96.  call `onError`(v2, v5) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a0e9c.  return @kind void;
  #L4a0e9e.  if v8 == 0 then goto L4a0eaa;
  #L4a0ea2.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a0ea8.  return @kind void;
  #L4a0eaa.  if v8 != 0 then goto L4a0f92;
  #L4a0eae.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a0eb4.  v8:= temp @kind wide;
  #L4a0eb6.  v5:= v7.`rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a0eba.  v10:= 0L;
  #L4a0ebe.  v12:= v10 @kind wide;
  #L4a0ec0.  v14:= v7.`rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L4a0ec4.  call temp:= `peek`(v5) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L4a0eca.  v15:= temp @kind object;
  #L4a0ecc.  v17:= v4;
  #L4a0ed0.  if v15 != 0 then goto L4a0eda;
  #L4a0ed4.  v16:= 1I;
  #L4a0ed8.  goto L4a0ede;
  #L4a0eda.  v16:= 0I;
  #L4a0ede.  v3:= 1L;
  #L4a0ee2.  if v14 == 0 then goto L4a0f28;
  #L4a0ee6.  v14:= v7.`rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4a0eea.  if v14 == 0 then goto L4a0efc;
  #L4a0eee.  call `cleanup`(v18) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.cleanup:()V` @kind virtual;
  #L4a0ef4.  call `onError`(v2, v14) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a0efa.  return @kind void;
  #L4a0efc.  if v16 == 0 then goto L4a0f28;
  #L4a0f00.  v14:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a0f04.  @monitorenter v14
  #L4a0f06.  v5:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a0f0a.  call temp:= `poll`(v5) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a0f10.  @monitorexit v14
  #L4a0f12.  call `unsubscribe`(v7) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerInnerSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a0f18.  call `request`(v1, v3) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.request:(J)V` @kind virtual;
  #L4a0f1e.  v6:= 1I;
  #L4a0f20.  goto L4a0f36;
  #L4a0f22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a0f24.  @monitorexit v14
  #L4a0f26.  throw v0;
  #L4a0f28.  if v16 == 0 then goto L4a0f2e;
  #L4a0f2c.  goto L4a0f36;
  #L4a0f2e.  v14:= lcmp(v8, v12);
  #L4a0f32.  if v14 != 0 then goto L4a0f6c;
  #L4a0f36.  v3:= lcmp(v12, v10);
  #L4a0f3a.  if v3 == 0 then goto L4a0f60;
  #L4a0f3e.  v3:= 9223372036854775807L;
  #L4a0f48.  v5:= lcmp(v8, v3);
  #L4a0f4c.  if v5 == 0 then goto L4a0f56;
  #L4a0f50.  call temp:= `produced`(v0, v12) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a0f56.  if v6 != 0 then goto L4a0f60;
  #L4a0f5a.  call `requestMore`(v7, v12) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerInnerSubscriber;.requestMore:(J)V` @kind virtual;
  #L4a0f60.  if v6 == 0 then goto L4a0f96;
  #L4a0f64.  v4:= v17;
  #L4a0f68.  goto L4a0e4c;
  #L4a0f6c.  call temp:= `poll`(v5) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a0f72.  call temp:= `getValue`(v15) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a0f78.  v14:= temp @kind object;
  #L4a0f7a.  call `onNext`(v2, v14) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a0f80.  v12:= v12 + v3 @kind long;
  #L4a0f82.  v4:= v17;
  #L4a0f86.  goto L4a0ec0;
  #L4a0f88.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a0f8a.  call `throwOrReport`(v0, v2, v15) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a0f90.  return @kind void;
  #L4a0f92.  v17:= v4;
  #L4a0f96.  v3:= v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a0f9a.  v4:= v17;
  #L4a0f9e.  v4:= -v4 @kind int;
  #L4a0fa0.  call temp:= `addAndGet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a0fa6.  v4:= temp;
  #L4a0fa8.  if v4 != 0 then goto L4a0e4c;
  #L4a0fac.  return @kind void;
  #L4a0fae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a0fb0.  @monitorexit v6
  #L4a0fb2.  goto L4a0fb6;
  #L4a0fb4.  throw v0;
  #L4a0fb6.  goto L4a0fb4;
  catch `java.lang.Throwable` @[L4a0e66..L4a0e78] goto L4a0fae;
  catch `java.lang.Throwable` @[L4a0f06..L4a0f12] goto L4a0f22;
  catch `java.lang.Throwable` @[L4a0f24..L4a0f26] goto L4a0f22;
  catch `java.lang.Throwable` @[L4a0f72..L4a0f80] goto L4a0f88;
  catch `java.lang.Throwable` @[L4a0fb0..L4a0fb2] goto L4a0fae;
}
procedure `void` `init`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.init:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a0ffc.  v0:= new `rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer`;
  #L4a1000.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterProducer;.<init>:(Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;)V` @kind direct;
  #L4a1006.  v2.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.sharedProducer` @type ^`rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer` := v0 @kind object;
  #L4a100a.  v0:= new `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1`;
  #L4a100e.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber$1;.<init>:(Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;)V` @kind direct;
  #L4a1014.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4a101a.  v0:= temp @kind object;
  #L4a101c.  call `add`(v2, v0) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a1022.  v0:= v2.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a1026.  call `add`(v0, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a102c.  v0:= v2.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a1030.  v1:= v2.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.sharedProducer` @type ^`rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer` @kind object;
  #L4a1034.  call `setProducer`(v0, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a103a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a104c.  v0:= 1I;
  #L4a104e.  v1.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4a1052.  call `drain`(v1) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.drain:()V` @kind virtual;
  #L4a1058.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4a106c.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4a1070.  v1:= 1I;
  #L4a1072.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L4a1076.  call `drain`(v0) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.drain:()V` @kind virtual;
  #L4a107c.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a1090.  v0:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.mapper` @type ^`rx.functions.Func1` @kind object;
  #L4a1094.  call temp:= `call`(v0, v4) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a109a.  v0:= temp @kind object;
  #L4a109c.  v0:= (`rx.Observable`) v0 @kind object;
  #L4a10a0.  v4:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4a10a4.  if v4 == 0 then goto L4a10aa;
  #L4a10a8.  return @kind void;
  #L4a10aa.  v4:= new `rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber`;
  #L4a10ae.  v1:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.bufferSize` @type ^`int`;
  #L4a10b2.  call `<init>`(v4, v3, v1) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerInnerSubscriber;.<init>:(Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;I)V` @kind direct;
  #L4a10b8.  v1:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a10bc.  @monitorenter v1
  #L4a10be.  v2:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4a10c2.  if v2 == 0 then goto L4a10ca;
  #L4a10c6.  @monitorexit v1
  #L4a10c8.  return @kind void;
  #L4a10ca.  v2:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.subscribers` @type ^`java.util.Queue` @kind object;
  #L4a10ce.  call temp:= `add`(v2, v4) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4a10d4.  @monitorexit v1
  #L4a10d6.  v1:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4a10da.  if v1 == 0 then goto L4a10e0;
  #L4a10de.  return @kind void;
  #L4a10e0.  call temp:= `unsafeSubscribe`(v0, v4) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a10e6.  call `drain`(v3) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.drain:()V` @kind virtual;
  #L4a10ec.  return @kind void;
  #L4a10ee.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a10f0.  @monitorexit v1
  #L4a10f2.  throw v4;
  #L4a10f4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a10f6.  v1:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a10fa.  call `throwOrReport`(v0, v1, v4) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a1100.  return @kind void;
  catch `java.lang.Throwable` @[L4a1090..L4a10a0] goto L4a10f4;
  catch `java.lang.Throwable` @[L4a10be..L4a10d6] goto L4a10ee;
  catch `java.lang.Throwable` @[L4a10f0..L4a10f2] goto L4a10ee;
}
