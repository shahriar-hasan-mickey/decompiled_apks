record `rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Subscriber` @kind class, `java.util.Iterator` @kind interface {
  `rx.Notification` `rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.buf` @AccessFlag PRIVATE;
  `java.util.concurrent.BlockingQueue` `rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.notifications` @AccessFlag PRIVATE_FINAL;
  `int` `rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.received` @AccessFlag PRIVATE;
}
global `int` `@@rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.LIMIT` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L493660.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L493664.  v0:= v0 * 3;
  #L493668.  v0:= v0 / 4;
  #L49366c.  `@@rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.LIMIT` @type ^`int` := v0;
  #L493670.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v1 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L493684.  call `<init>`(v1) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49368a.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L49368e.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L493694.  v1.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.notifications` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L493698.  return @kind void;
}
procedure `rx.Notification` `take`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v1 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.take:()Lrx/Notification;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L493604.  v0:= v1.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.notifications` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L493608.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49360e.  v0:= temp @kind object;
  #L493610.  v0:= (`rx.Notification`) v0 @kind object;
  #L493614.  if v0 == 0 then goto L49361a;
  #L493618.  return v0 @kind object;
  #L49361a.  v0:= v1.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.notifications` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L49361e.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L493624.  v0:= temp @kind object;
  #L493626.  v0:= (`rx.Notification`) v0 @kind object;
  #L49362a.  return v0 @kind object;
  #L49362c.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L49362e.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.unsubscribe:()V` @kind virtual;
  #L493634.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L49363a.  v0:= temp @kind object;
  #L49363c.  throw v0;
  catch `java.lang.InterruptedException` @[L493604..L49362a] goto L49362c;
}
procedure `boolean` `hasNext`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493544.  v0:= v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.buf` @type ^`rx.Notification` @kind object;
  #L493548.  if v0 != 0 then goto L49357e;
  #L49354c.  call temp:= `take`(v2) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.take:()Lrx/Notification;` @kind direct;
  #L493552.  v0:= temp @kind object;
  #L493554.  v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.buf` @type ^`rx.Notification` := v0 @kind object;
  #L493558.  v0:= v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.received` @type ^`int`;
  #L49355c.  v0:= v0 + 1;
  #L493560.  v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.received` @type ^`int` := v0;
  #L493564.  v0:= v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.received` @type ^`int`;
  #L493568.  v1:= `@@rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.LIMIT` @type ^`int`;
  #L49356c.  if v0 < v1 then goto L49357e;
  #L493570.  v0:= (`long`) v0 @kind i2l;
  #L493572.  call `request`(v2, v0) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.request:(J)V` @kind virtual;
  #L493578.  v0:= 0I;
  #L49357a.  v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.received` @type ^`int` := v0;
  #L49357e.  v0:= v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.buf` @type ^`rx.Notification` @kind object;
  #L493582.  call temp:= `isOnError`(v0) @signature `Lrx/Notification;.isOnError:()Z` @kind virtual;
  #L493588.  v0:= temp;
  #L49358a.  if v0 != 0 then goto L4935a0;
  #L49358e.  v0:= v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.buf` @type ^`rx.Notification` @kind object;
  #L493592.  call temp:= `isOnCompleted`(v0) @signature `Lrx/Notification;.isOnCompleted:()Z` @kind virtual;
  #L493598.  v0:= temp;
  #L49359a.  v0:= v0 ^~ 1;
  #L49359e.  return v0;
  #L4935a0.  v0:= v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.buf` @type ^`rx.Notification` @kind object;
  #L4935a4.  call temp:= `getThrowable`(v0) @signature `Lrx/Notification;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L4935aa.  v0:= temp @kind object;
  #L4935ac.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4935b2.  v0:= temp @kind object;
  #L4935b4.  throw v0;
}
procedure `java.lang.Object` `next`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4935c8.  call temp:= `hasNext`(v2) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.hasNext:()Z` @kind virtual;
  #L4935ce.  v0:= temp;
  #L4935d0.  if v0 == 0 then goto L4935e8;
  #L4935d4.  v0:= v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.buf` @type ^`rx.Notification` @kind object;
  #L4935d8.  call temp:= `getValue`(v0) @signature `Lrx/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4935de.  v0:= temp @kind object;
  #L4935e0.  v1:= 0I;
  #L4935e2.  v2.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.buf` @type ^`rx.Notification` := v1 @kind object;
  #L4935e6.  return v0 @kind object;
  #L4935e8.  v0:= new `java.util.NoSuchElementException`;
  #L4935ec.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4935f2.  throw v0;
}
procedure `void` `onCompleted`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v0 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;

  #L4936ac.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4936c0.  v0:= v1.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.notifications` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4936c4.  call temp:= `createOnError`(v2) @signature `Lrx/Notification;.createOnError:(Ljava/lang/Throwable;)Lrx/Notification;` @kind static;
  #L4936ca.  v2:= temp @kind object;
  #L4936cc.  call temp:= `offer`(v0, v2) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4936d2.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4936e4.  v1:= (`rx.Notification`) v1 @kind object;
  #L4936e8.  call `onNext`(v0, v1) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.onNext:(Lrx/Notification;)V` @kind virtual;
  #L4936ee.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v1 @kind this, `rx.Notification` v2 @kind object) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.onNext:(Lrx/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493700.  v0:= v1.`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator.notifications` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L493704.  call temp:= `offer`(v0, v2) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49370a.  return @kind void;
}
procedure `void` `onStart`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49371c.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L493720.  v0:= (`long`) v0 @kind i2l;
  #L493722.  call `request`(v2, v0) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.request:(J)V` @kind virtual;
  #L493728.  return @kind void;
}
procedure `void` `remove`(`rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToIterator$SubscriberIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49373c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L493740.  v1:= "Read-only iterator" @kind object;
  #L493744.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49374a.  throw v0;
}
