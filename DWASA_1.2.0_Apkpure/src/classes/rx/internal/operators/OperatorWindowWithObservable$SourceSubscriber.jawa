record `rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.child` @AccessFlag FINAL;
  `rx.Observer` `rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.consumer` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.producer` @AccessFlag ;
  `java.util.List` `rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @AccessFlag ;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4abbd0.  call `<init>`(v1) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4abbd6.  v0:= new `rx.observers.SerializedSubscriber`;
  #L4abbda.  call `<init>`(v0, v2) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4abbe0.  v1.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.child` @type ^`rx.Subscriber` := v0 @kind object;
  #L4abbe4.  v2:= new `java.lang.Object`;
  #L4abbe8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4abbee.  v1.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` := v2 @kind object;
  #L4abbf2.  return @kind void;
}
procedure `void` `complete`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.complete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4abc04.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.consumer` @type ^`rx.Observer` @kind object;
  #L4abc08.  v1:= 0I;
  #L4abc0a.  v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.consumer` @type ^`rx.Observer` := v1 @kind object;
  #L4abc0e.  v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.producer` @type ^`rx.Observable` := v1 @kind object;
  #L4abc12.  if v0 == 0 then goto L4abc1c;
  #L4abc16.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4abc1c.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4abc20.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4abc26.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4abc2c.  return @kind void;
}
procedure `void` `createNewWindow`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.createNewWindow:()V` @AccessFlag  {
    temp;
    v0;

  #L4abc40.  call temp:= `create`() @signature `Lrx/subjects/UnicastSubject;.create:()Lrx/subjects/UnicastSubject;` @kind static;
  #L4abc46.  v0:= temp @kind object;
  #L4abc48.  v1.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.consumer` @type ^`rx.Observer` := v0 @kind object;
  #L4abc4c.  v1.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.producer` @type ^`rx.Observable` := v0 @kind object;
  #L4abc50.  return @kind void;
}
procedure `void` `drain`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.drain:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4abc64.  if v3 != 0 then goto L4abc6a;
  #L4abc68.  return @kind void;
  #L4abc6a.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4abc70.  v3:= temp @kind object;
  #L4abc72.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4abc78.  v0:= temp;
  #L4abc7a.  if v0 == 0 then goto L4abcce;
  #L4abc7e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4abc84.  v0:= temp @kind object;
  #L4abc86.  v1:= `@@rx.internal.operators.OperatorWindowWithObservable.NEXT_SUBJECT` @type ^`java.lang.Object` @kind object;
  #L4abc8a.  if v0 != v1 then goto L4abc96;
  #L4abc8e.  call `replaceSubject`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.replaceSubject:()V` @kind virtual;
  #L4abc94.  goto L4abc72;
  #L4abc96.  call temp:= `isError`(v0) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4abc9c.  v1:= temp;
  #L4abc9e.  if v1 == 0 then goto L4abcb2;
  #L4abca2.  call temp:= `getError`(v0) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4abca8.  v3:= temp @kind object;
  #L4abcaa.  call `error`(v2, v3) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4abcb0.  goto L4abcce;
  #L4abcb2.  call temp:= `isCompleted`(v0) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L4abcb8.  v1:= temp;
  #L4abcba.  if v1 == 0 then goto L4abcc6;
  #L4abcbe.  call `complete`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.complete:()V` @kind virtual;
  #L4abcc4.  goto L4abcce;
  #L4abcc6.  call `emitValue`(v2, v0) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.emitValue:(Ljava/lang/Object;)V` @kind virtual;
  #L4abccc.  goto L4abc72;
  #L4abcce.  return @kind void;
}
procedure `void` `emitValue`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.emitValue:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L4abce0.  v0:= v1.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.consumer` @type ^`rx.Observer` @kind object;
  #L4abce4.  if v0 == 0 then goto L4abcee;
  #L4abce8.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4abcee.  return @kind void;
}
procedure `void` `error`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.error:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4abd00.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.consumer` @type ^`rx.Observer` @kind object;
  #L4abd04.  v1:= 0I;
  #L4abd06.  v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.consumer` @type ^`rx.Observer` := v1 @kind object;
  #L4abd0a.  v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.producer` @type ^`rx.Observable` := v1 @kind object;
  #L4abd0e.  if v0 == 0 then goto L4abd18;
  #L4abd12.  call `onError`(v0, v3) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4abd18.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4abd1c.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4abd22.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4abd28.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4abd3c.  v0:= v3.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4abd40.  @monitorenter v0
  #L4abd42.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4abd46.  if v1 == 0 then goto L4abd76;
  #L4abd4a.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4abd4e.  if v1 != 0 then goto L4abd60;
  #L4abd52.  v1:= new `java.util.ArrayList`;
  #L4abd56.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4abd5c.  v3.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4abd60.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4abd64.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4abd6a.  v2:= temp @kind object;
  #L4abd6c.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4abd72.  @monitorexit v0
  #L4abd74.  return @kind void;
  #L4abd76.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4abd7a.  v2:= 0I;
  #L4abd7c.  v3.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4abd80.  v2:= 1I;
  #L4abd82.  v3.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v2 @kind boolean;
  #L4abd86.  @monitorexit v0
  #L4abd88.  call `drain`(v3, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.drain:(Ljava/util/List;)V` @kind virtual;
  #L4abd8e.  call `complete`(v3) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.complete:()V` @kind virtual;
  #L4abd94.  return @kind void;
  #L4abd96.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abd98.  call `error`(v3, v0) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4abd9e.  return @kind void;
  #L4abda0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abda2.  @monitorexit v0
  #L4abda4.  throw v1;
  catch `java.lang.Throwable` @[L4abd42..L4abd88] goto L4abda0;
  catch `java.lang.Throwable` @[L4abd88..L4abd8e] goto L4abd96;
  catch `java.lang.Throwable` @[L4abda2..L4abda4] goto L4abda0;
}
procedure `void` `onError`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4abdd8.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4abddc.  @monitorenter v0
  #L4abdde.  v1:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4abde2.  if v1 == 0 then goto L4abdfe;
  #L4abde6.  call temp:= `error`(v3) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4abdec.  v3:= temp @kind object;
  #L4abdee.  call temp:= `singletonList`(v3) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4abdf4.  v3:= temp @kind object;
  #L4abdf6.  v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v3 @kind object;
  #L4abdfa.  @monitorexit v0
  #L4abdfc.  return @kind void;
  #L4abdfe.  v1:= 0I;
  #L4abe00.  v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4abe04.  v1:= 1I;
  #L4abe06.  v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4abe0a.  @monitorexit v0
  #L4abe0c.  call `error`(v2, v3) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4abe12.  return @kind void;
  #L4abe14.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abe16.  @monitorexit v0
  #L4abe18.  throw v3;
  catch `java.lang.Throwable` @[L4abdde..L4abe0c] goto L4abe14;
  catch `java.lang.Throwable` @[L4abe16..L4abe18] goto L4abe14;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4abe40.  v0:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4abe44.  @monitorenter v0
  #L4abe46.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4abe4a.  if v1 == 0 then goto L4abe72;
  #L4abe4e.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4abe52.  if v1 != 0 then goto L4abe64;
  #L4abe56.  v1:= new `java.util.ArrayList`;
  #L4abe5a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4abe60.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4abe64.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4abe68.  call temp:= `add`(v1, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4abe6e.  @monitorexit v0
  #L4abe70.  return @kind void;
  #L4abe72.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4abe76.  v2:= 0I;
  #L4abe78.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4abe7c.  v3:= 1I;
  #L4abe7e.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v3 @kind boolean;
  #L4abe82.  @monitorexit v0
  #L4abe84.  v0:= 1I;
  #L4abe86.  v4:= 0I;
  #L4abe88.  call `drain`(v6, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.drain:(Ljava/util/List;)V` @kind virtual;
  #L4abe8e.  if v0 == 0 then goto L4abe9a;
  #L4abe92.  call `emitValue`(v6, v7) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.emitValue:(Ljava/lang/Object;)V` @kind virtual;
  #L4abe98.  v0:= 0I;
  #L4abe9a.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4abe9e.  @monitorenter v1
  #L4abea0.  v5:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4abea4.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4abea8.  if v5 != 0 then goto L4abeb4;
  #L4abeac.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4abeb0.  @monitorexit v1
  #L4abeb2.  return @kind void;
  #L4abeb4.  @monitorexit v1
  #L4abeb6.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4abeba.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4abec0.  v1:= temp;
  #L4abec2.  if v1 == 0 then goto L4abeda;
  #L4abec6.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4abeca.  @monitorenter v1
  #L4abecc.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4abed0.  @monitorexit v1
  #L4abed2.  return @kind void;
  #L4abed4.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abed6.  @monitorexit v1
  #L4abed8.  throw v7;
  #L4abeda.  v1:= v5 @kind object;
  #L4abedc.  goto L4abe86;
  #L4abede.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abee0.  v3:= 0I;
  #L4abee2.  @monitorexit v1
  #L4abee4.  throw v7;
  #L4abee6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abee8.  goto L4abef2;
  #L4abeea.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abeec.  goto L4abee2;
  #L4abeee.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abef0.  v3:= 0I;
  #L4abef2.  if v3 != 0 then goto L4abf0a;
  #L4abef6.  v0:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4abefa.  @monitorenter v0
  #L4abefc.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4abf00.  @monitorexit v0
  #L4abf02.  goto L4abf0a;
  #L4abf04.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abf06.  @monitorexit v0
  #L4abf08.  throw v7;
  #L4abf0a.  throw v7;
  #L4abf0c.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4abf0e.  @monitorexit v0
  #L4abf10.  goto L4abf14;
  #L4abf12.  throw v7;
  #L4abf14.  goto L4abf12;
  catch `java.lang.Throwable` @[L4abe46..L4abe84] goto L4abf0c;
  catch `java.lang.Throwable` @[L4abe88..L4abea0] goto L4abeee;
  catch `java.lang.Throwable` @[L4abea0..L4abeb0] goto L4abede;
  catch `java.lang.Throwable` @[L4abeb0..L4abeb2] goto L4abeea;
  catch `java.lang.Throwable` @[L4abeb4..L4abeb6] goto L4abede;
  catch `java.lang.Throwable` @[L4abeb6..L4abec2] goto L4abeee;
  catch `java.lang.Throwable` @[L4abecc..L4abed8] goto L4abed4;
  catch `java.lang.Throwable` @[L4abee2..L4abee4] goto L4abeea;
  catch `java.lang.Throwable` @[L4abee4..L4abee6] goto L4abee6;
  catch `java.lang.Throwable` @[L4abefc..L4abf08] goto L4abf04;
  catch `java.lang.Throwable` @[L4abf0e..L4abf10] goto L4abf0c;
}
procedure `void` `onStart`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4abf90.  v0:= 9223372036854775807L;
  #L4abf9a.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.request:(J)V` @kind virtual;
  #L4abfa0.  return @kind void;
}
procedure `void` `replaceSubject`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.replaceSubject:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4abfb4.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.consumer` @type ^`rx.Observer` @kind object;
  #L4abfb8.  if v0 == 0 then goto L4abfc2;
  #L4abfbc.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4abfc2.  call `createNewWindow`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.createNewWindow:()V` @kind virtual;
  #L4abfc8.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4abfcc.  v1:= v2.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.producer` @type ^`rx.Observable` @kind object;
  #L4abfd0.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4abfd6.  return @kind void;
}
procedure `void` `replaceWindow`(`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber` v6 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.replaceWindow:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4abfe8.  v0:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4abfec.  @monitorenter v0
  #L4abfee.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4abff2.  if v1 == 0 then goto L4ac01e;
  #L4abff6.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4abffa.  if v1 != 0 then goto L4ac00c;
  #L4abffe.  v1:= new `java.util.ArrayList`;
  #L4ac002.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ac008.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4ac00c.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac010.  v2:= `@@rx.internal.operators.OperatorWindowWithObservable.NEXT_SUBJECT` @type ^`java.lang.Object` @kind object;
  #L4ac014.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ac01a.  @monitorexit v0
  #L4ac01c.  return @kind void;
  #L4ac01e.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac022.  v2:= 0I;
  #L4ac024.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4ac028.  v3:= 1I;
  #L4ac02a.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v3 @kind boolean;
  #L4ac02e.  @monitorexit v0
  #L4ac030.  v0:= 1I;
  #L4ac032.  v4:= 0I;
  #L4ac034.  call `drain`(v6, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.drain:(Ljava/util/List;)V` @kind virtual;
  #L4ac03a.  if v0 == 0 then goto L4ac046;
  #L4ac03e.  call `replaceSubject`(v6) @signature `Lrx/internal/operators/OperatorWindowWithObservable$SourceSubscriber;.replaceSubject:()V` @kind virtual;
  #L4ac044.  v0:= 0I;
  #L4ac046.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac04a.  @monitorenter v1
  #L4ac04c.  v5:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac050.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4ac054.  if v5 != 0 then goto L4ac060;
  #L4ac058.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac05c.  @monitorexit v1
  #L4ac05e.  return @kind void;
  #L4ac060.  @monitorexit v1
  #L4ac062.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ac066.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4ac06c.  v1:= temp;
  #L4ac06e.  if v1 == 0 then goto L4ac086;
  #L4ac072.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac076.  @monitorenter v1
  #L4ac078.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac07c.  @monitorexit v1
  #L4ac07e.  return @kind void;
  #L4ac080.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac082.  @monitorexit v1
  #L4ac084.  throw v0;
  #L4ac086.  v1:= v5 @kind object;
  #L4ac088.  goto L4ac032;
  #L4ac08a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac08c.  v3:= 0I;
  #L4ac08e.  @monitorexit v1
  #L4ac090.  throw v0;
  #L4ac092.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac094.  goto L4ac09e;
  #L4ac096.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac098.  goto L4ac08e;
  #L4ac09a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac09c.  v3:= 0I;
  #L4ac09e.  if v3 != 0 then goto L4ac0b6;
  #L4ac0a2.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac0a6.  @monitorenter v1
  #L4ac0a8.  v6.`rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac0ac.  @monitorexit v1
  #L4ac0ae.  goto L4ac0b6;
  #L4ac0b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac0b2.  @monitorexit v1
  #L4ac0b4.  throw v0;
  #L4ac0b6.  throw v0;
  #L4ac0b8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac0ba.  @monitorexit v0
  #L4ac0bc.  goto L4ac0c0;
  #L4ac0be.  throw v1;
  #L4ac0c0.  goto L4ac0be;
  catch `java.lang.Throwable` @[L4abfee..L4ac030] goto L4ac0b8;
  catch `java.lang.Throwable` @[L4ac034..L4ac04c] goto L4ac09a;
  catch `java.lang.Throwable` @[L4ac04c..L4ac05c] goto L4ac08a;
  catch `java.lang.Throwable` @[L4ac05c..L4ac05e] goto L4ac096;
  catch `java.lang.Throwable` @[L4ac060..L4ac062] goto L4ac08a;
  catch `java.lang.Throwable` @[L4ac062..L4ac06e] goto L4ac09a;
  catch `java.lang.Throwable` @[L4ac078..L4ac084] goto L4ac080;
  catch `java.lang.Throwable` @[L4ac08e..L4ac090] goto L4ac096;
  catch `java.lang.Throwable` @[L4ac090..L4ac092] goto L4ac092;
  catch `java.lang.Throwable` @[L4ac0a8..L4ac0b4] goto L4ac0b0;
  catch `java.lang.Throwable` @[L4ac0ba..L4ac0bc] goto L4ac0b8;
}
