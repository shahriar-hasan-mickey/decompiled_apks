record `rx.internal.operators.OnSubscribeDetach$DetachProducer` @kind class @AccessFlag FINAL extends `rx.Producer` @kind interface, `rx.Subscription` @kind interface {
  `rx.internal.operators.OnSubscribeDetach$DetachSubscriber` `rx.internal.operators.OnSubscribeDetach$DetachProducer.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeDetach$DetachProducer` v0 @kind this, `rx.internal.operators.OnSubscribeDetach$DetachSubscriber` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachProducer;.<init>:(Lrx/internal/operators/OnSubscribeDetach$DetachSubscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L497f0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L497f12.  v0.`rx.internal.operators.OnSubscribeDetach$DetachProducer.parent` @type ^`rx.internal.operators.OnSubscribeDetach$DetachSubscriber` := v1 @kind object;
  #L497f16.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OnSubscribeDetach$DetachProducer` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachProducer;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497eec.  v0:= v1.`rx.internal.operators.OnSubscribeDetach$DetachProducer.parent` @type ^`rx.internal.operators.OnSubscribeDetach$DetachSubscriber` @kind object;
  #L497ef0.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L497ef6.  v0:= temp;
  #L497ef8.  return v0;
}
procedure `void` `request`(`rx.internal.operators.OnSubscribeDetach$DetachProducer` v1 @kind this, `long` v2 ) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497f28.  v0:= v1.`rx.internal.operators.OnSubscribeDetach$DetachProducer.parent` @type ^`rx.internal.operators.OnSubscribeDetach$DetachSubscriber` @kind object;
  #L497f2c.  call `innerRequest`(v0, v2) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachSubscriber;.innerRequest:(J)V` @kind virtual;
  #L497f32.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OnSubscribeDetach$DetachProducer` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachProducer;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497f44.  v0:= v1.`rx.internal.operators.OnSubscribeDetach$DetachProducer.parent` @type ^`rx.internal.operators.OnSubscribeDetach$DetachSubscriber` @kind object;
  #L497f48.  call `innerUnsubscribe`(v0) @signature `Lrx/internal/operators/OnSubscribeDetach$DetachSubscriber;.innerUnsubscribe:()V` @kind virtual;
  #L497f4e.  return @kind void;
}
