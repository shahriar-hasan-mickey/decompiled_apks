record `rx.internal.operators.OperatorReplay$5` @kind class @AccessFlag FINAL extends `rx.functions.Func0` @kind interface {
  `int` `rx.internal.operators.OperatorReplay$5.val$bufferSize` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorReplay$5` v0 @kind this, `int` v1 ) @signature `Lrx/internal/operators/OperatorReplay$5;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a606c.  v0.`rx.internal.operators.OperatorReplay$5.val$bufferSize` @type ^`int` := v1;
  #L4a6070.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a6076.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorReplay$5` v1 @kind this) @signature `Lrx/internal/operators/OperatorReplay$5;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4a6030.  call temp:= `call`(v1) @signature `Lrx/internal/operators/OperatorReplay$5;.call:()Lrx/internal/operators/OperatorReplay$ReplayBuffer;` @kind virtual;
  #L4a6036.  v0:= temp @kind object;
  #L4a6038.  return v0 @kind object;
}
procedure `rx.internal.operators.OperatorReplay$ReplayBuffer` `call`(`rx.internal.operators.OperatorReplay$5` v2 @kind this) @signature `Lrx/internal/operators/OperatorReplay$5;.call:()Lrx/internal/operators/OperatorReplay$ReplayBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a604c.  v0:= new `rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer`;
  #L4a6050.  v1:= v2.`rx.internal.operators.OperatorReplay$5.val$bufferSize` @type ^`int`;
  #L4a6054.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorReplay$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L4a605a.  return v0 @kind object;
}
