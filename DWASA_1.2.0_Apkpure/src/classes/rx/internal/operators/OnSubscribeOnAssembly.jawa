record `rx.internal.operators.OnSubscribeOnAssembly` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.Observable$OnSubscribe` `rx.internal.operators.OnSubscribeOnAssembly.source` @AccessFlag FINAL;
  `java.lang.String` `rx.internal.operators.OnSubscribeOnAssembly.stacktrace` @AccessFlag FINAL;
}
global `boolean` `@@rx.internal.operators.OnSubscribeOnAssembly.fullStackTrace` @AccessFlag PUBLIC_STATIC_VOLATILE;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeOnAssembly` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssembly;.<init>:(Lrx/Observable$OnSubscribe;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49b260.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49b266.  v0.`rx.internal.operators.OnSubscribeOnAssembly.source` @type ^`rx.Observable$OnSubscribe` := v1 @kind object;
  #L49b26a.  call temp:= `createStacktrace`() @signature `Lrx/internal/operators/OnSubscribeOnAssembly;.createStacktrace:()Ljava/lang/String;` @kind static;
  #L49b270.  v1:= temp @kind object;
  #L49b272.  v0.`rx.internal.operators.OnSubscribeOnAssembly.stacktrace` @type ^`java.lang.String` := v1 @kind object;
  #L49b276.  return @kind void;
}
procedure `java.lang.String` `createStacktrace`() @signature `Lrx/internal/operators/OnSubscribeOnAssembly;.createStacktrace:()Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49b124.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L49b12a.  v0:= temp @kind object;
  #L49b12c.  call temp:= `getStackTrace`(v0) @signature `Ljava/lang/Thread;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L49b132.  v0:= temp @kind object;
  #L49b134.  v1:= new `java.lang.StringBuilder`;
  #L49b138.  v2:= "Assembly trace:" @kind object;
  #L49b13c.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49b142.  v2:= length @variable v0;
  #L49b144.  v3:= 0I;
  #L49b146.  if v3 >= v2 then goto L49b23a;
  #L49b14a.  v4:= v0[v3] @kind object;
  #L49b14e.  call temp:= `toString`(v4) @signature `Ljava/lang/StackTraceElement;.toString:()Ljava/lang/String;` @kind virtual;
  #L49b154.  v5:= temp @kind object;
  #L49b156.  v6:= `@@rx.internal.operators.OnSubscribeOnAssembly.fullStackTrace` @type ^`boolean` @kind boolean;
  #L49b15a.  if v6 != 0 then goto L49b224;
  #L49b15e.  call temp:= `getLineNumber`(v4) @signature `Ljava/lang/StackTraceElement;.getLineNumber:()I` @kind virtual;
  #L49b164.  v4:= temp;
  #L49b166.  v6:= 1I;
  #L49b168.  if v4 > v6 then goto L49b170;
  #L49b16c.  goto L49b234;
  #L49b170.  v4:= "RxJavaHooks." @kind object;
  #L49b174.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b17a.  v4:= temp;
  #L49b17c.  if v4 == 0 then goto L49b182;
  #L49b180.  goto L49b234;
  #L49b182.  v4:= "OnSubscribeOnAssembly" @kind object;
  #L49b186.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b18c.  v4:= temp;
  #L49b18e.  if v4 == 0 then goto L49b194;
  #L49b192.  goto L49b234;
  #L49b194.  v4:= ".junit.runner" @kind object;
  #L49b198.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b19e.  v4:= temp;
  #L49b1a0.  if v4 == 0 then goto L49b1a6;
  #L49b1a4.  goto L49b234;
  #L49b1a6.  v4:= ".junit4.runner" @kind object;
  #L49b1aa.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b1b0.  v4:= temp;
  #L49b1b2.  if v4 == 0 then goto L49b1b8;
  #L49b1b6.  goto L49b234;
  #L49b1b8.  v4:= ".junit.internal" @kind object;
  #L49b1bc.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b1c2.  v4:= temp;
  #L49b1c4.  if v4 == 0 then goto L49b1ca;
  #L49b1c8.  goto L49b234;
  #L49b1ca.  v4:= "sun.reflect" @kind object;
  #L49b1ce.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b1d4.  v4:= temp;
  #L49b1d6.  if v4 == 0 then goto L49b1dc;
  #L49b1da.  goto L49b234;
  #L49b1dc.  v4:= "java.lang.Thread." @kind object;
  #L49b1e0.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b1e6.  v4:= temp;
  #L49b1e8.  if v4 == 0 then goto L49b1ee;
  #L49b1ec.  goto L49b234;
  #L49b1ee.  v4:= "ThreadPoolExecutor" @kind object;
  #L49b1f2.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b1f8.  v4:= temp;
  #L49b1fa.  if v4 == 0 then goto L49b200;
  #L49b1fe.  goto L49b234;
  #L49b200.  v4:= "org.apache.catalina." @kind object;
  #L49b204.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b20a.  v4:= temp;
  #L49b20c.  if v4 == 0 then goto L49b212;
  #L49b210.  goto L49b234;
  #L49b212.  v4:= "org.apache.tomcat." @kind object;
  #L49b216.  call temp:= `contains`(v5, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L49b21c.  v4:= temp;
  #L49b21e.  if v4 == 0 then goto L49b224;
  #L49b222.  goto L49b234;
  #L49b224.  v4:= "\n at " @kind object;
  #L49b228.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49b22e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49b234.  v3:= v3 + 1;
  #L49b238.  goto L49b146;
  #L49b23a.  v0:= "\nOriginal exception:" @kind object;
  #L49b23e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49b244.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49b24a.  v0:= temp @kind object;
  #L49b24c.  return v0 @kind object;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeOnAssembly` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssembly;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49b288.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49b28c.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeOnAssembly;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49b292.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeOnAssembly` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssembly;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49b2a4.  v0:= v3.`rx.internal.operators.OnSubscribeOnAssembly.source` @type ^`rx.Observable$OnSubscribe` @kind object;
  #L49b2a8.  v1:= new `rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber`;
  #L49b2ac.  v2:= v3.`rx.internal.operators.OnSubscribeOnAssembly.stacktrace` @type ^`java.lang.String` @kind object;
  #L49b2b0.  call `<init>`(v1, v4, v2) @signature `Lrx/internal/operators/OnSubscribeOnAssembly$OnAssemblySubscriber;.<init>:(Lrx/Subscriber;Ljava/lang/String;)V` @kind direct;
  #L49b2b6.  call `call`(v0, v1) @signature `Lrx/Observable$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L49b2bc.  return @kind void;
}
