record `rx.internal.operators.OperatorReplay$InnerProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface, `rx.Subscription` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorReplay$InnerProducer.child` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorReplay$InnerProducer.emitting` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.OperatorReplay$InnerProducer.index` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorReplay$InnerProducer.missed` @AccessFlag ;
  `rx.internal.operators.OperatorReplay$ReplaySubscriber` `rx.internal.operators.OperatorReplay$InnerProducer.parent` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorReplay$InnerProducer.totalRequested` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OperatorReplay$InnerProducer.UNSUBSCRIBED` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OperatorReplay$InnerProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorReplay$InnerProducer` v0 @kind this, `rx.internal.operators.OperatorReplay$ReplaySubscriber` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.<init>:(Lrx/internal/operators/OperatorReplay$ReplaySubscriber;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a6764.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a676a.  v0.`rx.internal.operators.OperatorReplay$InnerProducer.parent` @type ^`rx.internal.operators.OperatorReplay$ReplaySubscriber` := v1 @kind object;
  #L4a676e.  v0.`rx.internal.operators.OperatorReplay$InnerProducer.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a6772.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a6776.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a677c.  v0.`rx.internal.operators.OperatorReplay$InnerProducer.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a6780.  return @kind void;
}
procedure `void` `addTotalRequested`(`rx.internal.operators.OperatorReplay$InnerProducer` v7 @kind this, `long` v8 ) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.addTotalRequested:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4a6794.  v0:= v7.`rx.internal.operators.OperatorReplay$InnerProducer.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6798.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a679e.  v0:= temp @kind wide;
  #L4a67a0.  v2:= v0 + v8 @kind long;
  #L4a67a4.  v4:= 0L;
  #L4a67a8.  v6:= lcmp(v2, v4);
  #L4a67ac.  if v6 >= 0 then goto L4a67ba;
  #L4a67b0.  v2:= 9223372036854775807L;
  #L4a67ba.  v4:= v7.`rx.internal.operators.OperatorReplay$InnerProducer.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a67be.  call temp:= `compareAndSet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a67c4.  v0:= temp;
  #L4a67c6.  if v0 == 0 then goto L4a6794;
  #L4a67ca.  return @kind void;
}
procedure `java.lang.Object` `index`(`rx.internal.operators.OperatorReplay$InnerProducer` v1 @kind this) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.index:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L4a66a4.  v0:= v1.`rx.internal.operators.OperatorReplay$InnerProducer.index` @type ^`java.lang.Object` @kind object;
  #L4a66a8.  return v0 @kind object;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OperatorReplay$InnerProducer` v5 @kind this) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a6678.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.get:()J` @kind virtual;
  #L4a667e.  v0:= temp @kind wide;
  #L4a6680.  v2:= -9223372036854775808L;
  #L4a6684.  v4:= lcmp(v0, v2);
  #L4a6688.  if v4 != 0 then goto L4a6690;
  #L4a668c.  v0:= 1I;
  #L4a668e.  goto L4a6692;
  #L4a6690.  v0:= 0I;
  #L4a6692.  return v0;
}
procedure `long` `produced`(`rx.internal.operators.OperatorReplay$InnerProducer` v7 @kind this, `long` v8 ) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.produced:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4a66bc.  v0:= 0L;
  #L4a66c0.  v2:= lcmp(v8, v0);
  #L4a66c4.  if v2 <= 0 then goto L4a6740;
  #L4a66c8.  call temp:= `get`(v7) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.get:()J` @kind virtual;
  #L4a66ce.  v2:= temp @kind wide;
  #L4a66d0.  v4:= -9223372036854775808L;
  #L4a66d4.  v6:= lcmp(v2, v4);
  #L4a66d8.  if v6 != 0 then goto L4a66de;
  #L4a66dc.  return v4 @kind wide;
  #L4a66de.  v4:= v2 - v8 @kind long;
  #L4a66e2.  v6:= lcmp(v4, v0);
  #L4a66e6.  if v6 < 0 then goto L4a66f8;
  #L4a66ea.  call temp:= `compareAndSet`(v7, v2, v4) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a66f0.  v2:= temp;
  #L4a66f2.  if v2 == 0 then goto L4a66c8;
  #L4a66f6.  return v4 @kind wide;
  #L4a66f8.  v0:= new `java.lang.IllegalStateException`;
  #L4a66fc.  v1:= new `java.lang.StringBuilder`;
  #L4a6700.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a6706.  v4:= "More produced (" @kind object;
  #L4a670a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a6710.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a6716.  v8:= ") than requested (" @kind object;
  #L4a671a.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a6720.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a6726.  v8:= ")" @kind object;
  #L4a672a.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a6730.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a6736.  v8:= temp @kind object;
  #L4a6738.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a673e.  throw v0;
  #L4a6740.  v8:= new `java.lang.IllegalArgumentException`;
  #L4a6744.  v9:= "Cant produce zero or less" @kind object;
  #L4a6748.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a674e.  goto L4a6752;
  #L4a6750.  throw v8;
  #L4a6752.  goto L4a6750;
}
procedure `void` `request`(`rx.internal.operators.OperatorReplay$InnerProducer` v7 @kind this, `long` v8 ) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4a67dc.  v0:= 0L;
  #L4a67e0.  v2:= lcmp(v8, v0);
  #L4a67e4.  if v2 >= 0 then goto L4a67ea;
  #L4a67e8.  return @kind void;
  #L4a67ea.  call temp:= `get`(v7) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.get:()J` @kind virtual;
  #L4a67f0.  v2:= temp @kind wide;
  #L4a67f2.  v4:= -9223372036854775808L;
  #L4a67f6.  v6:= lcmp(v2, v4);
  #L4a67fa.  if v6 != 0 then goto L4a6800;
  #L4a67fe.  return @kind void;
  #L4a6800.  v4:= lcmp(v2, v0);
  #L4a6804.  if v4 < 0 then goto L4a6812;
  #L4a6808.  v4:= lcmp(v8, v0);
  #L4a680c.  if v4 != 0 then goto L4a6812;
  #L4a6810.  return @kind void;
  #L4a6812.  v4:= v2 + v8 @kind long;
  #L4a6816.  v6:= lcmp(v4, v0);
  #L4a681a.  if v6 >= 0 then goto L4a6828;
  #L4a681e.  v4:= 9223372036854775807L;
  #L4a6828.  call temp:= `compareAndSet`(v7, v2, v4) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a682e.  v2:= temp;
  #L4a6830.  if v2 == 0 then goto L4a67ea;
  #L4a6834.  call `addTotalRequested`(v7, v8) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.addTotalRequested:(J)V` @kind virtual;
  #L4a683a.  v8:= v7.`rx.internal.operators.OperatorReplay$InnerProducer.parent` @type ^`rx.internal.operators.OperatorReplay$ReplaySubscriber` @kind object;
  #L4a683e.  call `manageRequests`(v8, v7) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.manageRequests:(Lrx/internal/operators/OperatorReplay$InnerProducer;)V` @kind virtual;
  #L4a6844.  v8:= v7.`rx.internal.operators.OperatorReplay$InnerProducer.parent` @type ^`rx.internal.operators.OperatorReplay$ReplaySubscriber` @kind object;
  #L4a6848.  v8:= v8.`rx.internal.operators.OperatorReplay$ReplaySubscriber.buffer` @type ^`rx.internal.operators.OperatorReplay$ReplayBuffer` @kind object;
  #L4a684c.  call `replay`(v8, v7) @signature `Lrx/internal/operators/OperatorReplay$ReplayBuffer;.replay:(Lrx/internal/operators/OperatorReplay$InnerProducer;)V` @kind interface;
  #L4a6852.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OperatorReplay$InnerProducer` v5 @kind this) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a6864.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.get:()J` @kind virtual;
  #L4a686a.  v0:= temp @kind wide;
  #L4a686c.  v2:= -9223372036854775808L;
  #L4a6870.  v4:= lcmp(v0, v2);
  #L4a6874.  if v4 == 0 then goto L4a68a2;
  #L4a6878.  call temp:= `getAndSet`(v5, v2) @signature `Lrx/internal/operators/OperatorReplay$InnerProducer;.getAndSet:(J)J` @kind virtual;
  #L4a687e.  v0:= temp @kind wide;
  #L4a6880.  v4:= lcmp(v0, v2);
  #L4a6884.  if v4 == 0 then goto L4a68a2;
  #L4a6888.  v0:= v5.`rx.internal.operators.OperatorReplay$InnerProducer.parent` @type ^`rx.internal.operators.OperatorReplay$ReplaySubscriber` @kind object;
  #L4a688c.  call `remove`(v0, v5) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.remove:(Lrx/internal/operators/OperatorReplay$InnerProducer;)V` @kind virtual;
  #L4a6892.  v0:= v5.`rx.internal.operators.OperatorReplay$InnerProducer.parent` @type ^`rx.internal.operators.OperatorReplay$ReplaySubscriber` @kind object;
  #L4a6896.  call `manageRequests`(v0, v5) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.manageRequests:(Lrx/internal/operators/OperatorReplay$InnerProducer;)V` @kind virtual;
  #L4a689c.  v0:= 0I;
  #L4a689e.  v5.`rx.internal.operators.OperatorReplay$InnerProducer.child` @type ^`rx.Subscriber` := v0 @kind object;
  #L4a68a2.  return @kind void;
}
