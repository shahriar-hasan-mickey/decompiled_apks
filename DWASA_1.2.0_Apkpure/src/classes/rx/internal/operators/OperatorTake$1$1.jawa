record `rx.internal.operators.OperatorTake$1$1` @kind class @AccessFlag  extends `rx.Producer` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorTake$1$1.requested` @AccessFlag FINAL;
  `rx.internal.operators.OperatorTake$1` `rx.internal.operators.OperatorTake$1$1.this$1` @AccessFlag FINAL_SYNTHETIC;
  `rx.Producer` `rx.internal.operators.OperatorTake$1$1.val$producer` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTake$1$1` v2 @kind this, `rx.internal.operators.OperatorTake$1` v3 @kind object, `rx.Producer` v4 @kind object) @signature `Lrx/internal/operators/OperatorTake$1$1;.<init>:(Lrx/internal/operators/OperatorTake$1;Lrx/Producer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a9cb8.  v2.`rx.internal.operators.OperatorTake$1$1.this$1` @type ^`rx.internal.operators.OperatorTake$1` := v3 @kind object;
  #L4a9cbc.  v2.`rx.internal.operators.OperatorTake$1$1.val$producer` @type ^`rx.Producer` := v4 @kind object;
  #L4a9cc0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a9cc6.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a9cca.  v0:= 0L;
  #L4a9cce.  call `<init>`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4a9cd4.  v2.`rx.internal.operators.OperatorTake$1$1.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L4a9cd8.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorTake$1$1` v9 @kind this, `long` v10 ) @signature `Lrx/internal/operators/OperatorTake$1$1;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a9cec.  v0:= 0L;
  #L4a9cf0.  v2:= lcmp(v10, v0);
  #L4a9cf4.  if v2 <= 0 then goto L4a9d50;
  #L4a9cf8.  v2:= v9.`rx.internal.operators.OperatorTake$1$1.this$1` @type ^`rx.internal.operators.OperatorTake$1` @kind object;
  #L4a9cfc.  v2:= v2.`rx.internal.operators.OperatorTake$1.completed` @type ^`boolean` @kind boolean;
  #L4a9d00.  if v2 != 0 then goto L4a9d50;
  #L4a9d04.  v2:= v9.`rx.internal.operators.OperatorTake$1$1.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a9d08.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a9d0e.  v2:= temp @kind wide;
  #L4a9d10.  v4:= v9.`rx.internal.operators.OperatorTake$1$1.this$1` @type ^`rx.internal.operators.OperatorTake$1` @kind object;
  #L4a9d14.  v4:= v4.`rx.internal.operators.OperatorTake$1.this$0` @type ^`rx.internal.operators.OperatorTake` @kind object;
  #L4a9d18.  v4:= v4.`rx.internal.operators.OperatorTake.limit` @type ^`int`;
  #L4a9d1c.  v4:= (`long`) v4 @kind i2l;
  #L4a9d1e.  v4:= v4 - v2 @kind long;
  #L4a9d20.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4a9d26.  v4:= temp @kind wide;
  #L4a9d28.  v6:= lcmp(v4, v0);
  #L4a9d2c.  if v6 != 0 then goto L4a9d32;
  #L4a9d30.  goto L4a9d50;
  #L4a9d32.  v6:= v9.`rx.internal.operators.OperatorTake$1$1.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a9d36.  v7:= v2 + v4 @kind long;
  #L4a9d3a.  call temp:= `compareAndSet`(v6, v2, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a9d40.  v2:= temp;
  #L4a9d42.  if v2 == 0 then goto L4a9d04;
  #L4a9d46.  v10:= v9.`rx.internal.operators.OperatorTake$1$1.val$producer` @type ^`rx.Producer` @kind object;
  #L4a9d4a.  call `request`(v10, v4) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a9d50.  return @kind void;
}
