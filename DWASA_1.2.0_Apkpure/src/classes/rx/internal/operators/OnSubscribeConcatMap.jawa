record `rx.internal.operators.OnSubscribeConcatMap` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `int` `rx.internal.operators.OnSubscribeConcatMap.delayErrorMode` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OnSubscribeConcatMap.mapper` @AccessFlag FINAL;
  `int` `rx.internal.operators.OnSubscribeConcatMap.prefetch` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OnSubscribeConcatMap.source` @AccessFlag FINAL;
}
global `int` `@@rx.internal.operators.OnSubscribeConcatMap.BOUNDARY` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@rx.internal.operators.OnSubscribeConcatMap.END` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@rx.internal.operators.OnSubscribeConcatMap.IMMEDIATE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeConcatMap` v0 @kind this, `rx.Observable` v1 @kind object, `rx.functions.Func1` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lrx/internal/operators/OnSubscribeConcatMap;.<init>:(Lrx/Observable;Lrx/functions/Func1;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L497a94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L497a9a.  v0.`rx.internal.operators.OnSubscribeConcatMap.source` @type ^`rx.Observable` := v1 @kind object;
  #L497a9e.  v0.`rx.internal.operators.OnSubscribeConcatMap.mapper` @type ^`rx.functions.Func1` := v2 @kind object;
  #L497aa2.  v0.`rx.internal.operators.OnSubscribeConcatMap.prefetch` @type ^`int` := v3;
  #L497aa6.  v0.`rx.internal.operators.OnSubscribeConcatMap.delayErrorMode` @type ^`int` := v4;
  #L497aaa.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeConcatMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeConcatMap;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L497abc.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L497ac0.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeConcatMap;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L497ac6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeConcatMap` v5 @kind this, `rx.Subscriber` v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeConcatMap;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L497ad8.  v0:= v5.`rx.internal.operators.OnSubscribeConcatMap.delayErrorMode` @type ^`int`;
  #L497adc.  if v0 != 0 then goto L497aec;
  #L497ae0.  v0:= new `rx.observers.SerializedSubscriber`;
  #L497ae4.  call `<init>`(v0, v6) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L497aea.  goto L497aee;
  #L497aec.  v0:= v6 @kind object;
  #L497aee.  v1:= new `rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber`;
  #L497af2.  v2:= v5.`rx.internal.operators.OnSubscribeConcatMap.mapper` @type ^`rx.functions.Func1` @kind object;
  #L497af6.  v3:= v5.`rx.internal.operators.OnSubscribeConcatMap.prefetch` @type ^`int`;
  #L497afa.  v4:= v5.`rx.internal.operators.OnSubscribeConcatMap.delayErrorMode` @type ^`int`;
  #L497afe.  call `<init>`(v1, v0, v2, v3, v4) @signature `Lrx/internal/operators/OnSubscribeConcatMap$ConcatMapSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func1;II)V` @kind direct;
  #L497b04.  call `add`(v6, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L497b0a.  v0:= v1.`rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.inner` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L497b0e.  call `add`(v6, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L497b14.  v0:= new `rx.internal.operators.OnSubscribeConcatMap$1`;
  #L497b18.  call `<init>`(v0, v5, v1) @signature `Lrx/internal/operators/OnSubscribeConcatMap$1;.<init>:(Lrx/internal/operators/OnSubscribeConcatMap;Lrx/internal/operators/OnSubscribeConcatMap$ConcatMapSubscriber;)V` @kind direct;
  #L497b1e.  call `setProducer`(v6, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L497b24.  call temp:= `isUnsubscribed`(v6) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L497b2a.  v6:= temp;
  #L497b2c.  if v6 != 0 then goto L497b3a;
  #L497b30.  v6:= v5.`rx.internal.operators.OnSubscribeConcatMap.source` @type ^`rx.Observable` @kind object;
  #L497b34.  call temp:= `unsafeSubscribe`(v6, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L497b3a.  return @kind void;
}
