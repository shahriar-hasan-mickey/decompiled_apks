record `rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorWindowWithSize$WindowOverlap` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer` v0 @kind this, `rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v1 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer;.<init>:(Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4acaec.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer.this$0` @type ^`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` := v1 @kind object;
  #L4acaf0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4acaf6.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer` v5 @kind this, `long` v6 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4acb08.  v0:= 0L;
  #L4acb0c.  v2:= lcmp(v6, v0);
  #L4acb10.  if v2 < 0 then goto L4acb92;
  #L4acb14.  v2:= lcmp(v6, v0);
  #L4acb18.  if v2 == 0 then goto L4acb90;
  #L4acb1c.  v0:= v5.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer.this$0` @type ^`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` @kind object;
  #L4acb20.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer;.get:()Z` @kind virtual;
  #L4acb26.  v1:= temp;
  #L4acb28.  if v1 != 0 then goto L4acb68;
  #L4acb2c.  v1:= 0I;
  #L4acb2e.  v2:= 1I;
  #L4acb30.  call temp:= `compareAndSet`(v5, v1, v2) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4acb36.  v1:= temp;
  #L4acb38.  if v1 == 0 then goto L4acb68;
  #L4acb3c.  v1:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.skip` @type ^`int`;
  #L4acb40.  v1:= (`long`) v1 @kind i2l;
  #L4acb42.  v3:= 1L;
  #L4acb46.  v3:= v6 - v3 @kind long;
  #L4acb4a.  call temp:= `multiplyCap`(v1, v3) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L4acb50.  v1:= temp @kind wide;
  #L4acb52.  v3:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.size` @type ^`int`;
  #L4acb56.  v3:= (`long`) v3 @kind i2l;
  #L4acb58.  call temp:= `addCap`(v1, v3) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L4acb5e.  v1:= temp @kind wide;
  #L4acb60.  call `access$300`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.access$300:(Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;J)V` @kind static;
  #L4acb66.  goto L4acb80;
  #L4acb68.  v1:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.skip` @type ^`int`;
  #L4acb6c.  v1:= (`long`) v1 @kind i2l;
  #L4acb6e.  call temp:= `multiplyCap`(v1, v6) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L4acb74.  v1:= temp @kind wide;
  #L4acb76.  v3:= v5.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer.this$0` @type ^`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` @kind object;
  #L4acb7a.  call `access$400`(v3, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.access$400:(Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;J)V` @kind static;
  #L4acb80.  v1:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4acb84.  call temp:= `getAndAddRequest`(v1, v6) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4acb8a.  call `drain`(v0) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.drain:()V` @kind virtual;
  #L4acb90.  return @kind void;
  #L4acb92.  v0:= new `java.lang.IllegalArgumentException`;
  #L4acb96.  v1:= new `java.lang.StringBuilder`;
  #L4acb9a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4acba0.  v2:= "n >= 0 required but it was " @kind object;
  #L4acba4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4acbaa.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4acbb0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4acbb6.  v6:= temp @kind object;
  #L4acbb8.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4acbbe.  throw v0;
}
