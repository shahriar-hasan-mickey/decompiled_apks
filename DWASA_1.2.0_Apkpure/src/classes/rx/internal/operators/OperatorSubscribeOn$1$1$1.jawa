record `rx.internal.operators.OperatorSubscribeOn$1$1$1` @kind class @AccessFlag  extends `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorSubscribeOn$1$1` `rx.internal.operators.OperatorSubscribeOn$1$1$1.this$2` @AccessFlag FINAL_SYNTHETIC;
  `rx.Producer` `rx.internal.operators.OperatorSubscribeOn$1$1$1.val$p` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSubscribeOn$1$1$1` v0 @kind this, `rx.internal.operators.OperatorSubscribeOn$1$1` v1 @kind object, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorSubscribeOn$1$1$1;.<init>:(Lrx/internal/operators/OperatorSubscribeOn$1$1;Lrx/Producer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a8f3c.  v0.`rx.internal.operators.OperatorSubscribeOn$1$1$1.this$2` @type ^`rx.internal.operators.OperatorSubscribeOn$1$1` := v1 @kind object;
  #L4a8f40.  v0.`rx.internal.operators.OperatorSubscribeOn$1$1$1.val$p` @type ^`rx.Producer` := v2 @kind object;
  #L4a8f44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a8f4a.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorSubscribeOn$1$1$1` v2 @kind this, `long` v3 ) @signature `Lrx/internal/operators/OperatorSubscribeOn$1$1$1;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8f5c.  v0:= v2.`rx.internal.operators.OperatorSubscribeOn$1$1$1.this$2` @type ^`rx.internal.operators.OperatorSubscribeOn$1$1` @kind object;
  #L4a8f60.  v0:= v0.`rx.internal.operators.OperatorSubscribeOn$1$1.val$t` @type ^`java.lang.Thread` @kind object;
  #L4a8f64.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4a8f6a.  v1:= temp @kind object;
  #L4a8f6c.  if v0 != v1 then goto L4a8f7c;
  #L4a8f70.  v0:= v2.`rx.internal.operators.OperatorSubscribeOn$1$1$1.val$p` @type ^`rx.Producer` @kind object;
  #L4a8f74.  call `request`(v0, v3) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a8f7a.  goto L4a8f98;
  #L4a8f7c.  v0:= v2.`rx.internal.operators.OperatorSubscribeOn$1$1$1.this$2` @type ^`rx.internal.operators.OperatorSubscribeOn$1$1` @kind object;
  #L4a8f80.  v0:= v0.`rx.internal.operators.OperatorSubscribeOn$1$1.this$1` @type ^`rx.internal.operators.OperatorSubscribeOn$1` @kind object;
  #L4a8f84.  v0:= v0.`rx.internal.operators.OperatorSubscribeOn$1.val$inner` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a8f88.  v1:= new `rx.internal.operators.OperatorSubscribeOn$1$1$1$1`;
  #L4a8f8c.  call `<init>`(v1, v2, v3) @signature `Lrx/internal/operators/OperatorSubscribeOn$1$1$1$1;.<init>:(Lrx/internal/operators/OperatorSubscribeOn$1$1$1;J)V` @kind direct;
  #L4a8f92.  call temp:= `schedule`(v0, v1) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4a8f98.  return @kind void;
}
