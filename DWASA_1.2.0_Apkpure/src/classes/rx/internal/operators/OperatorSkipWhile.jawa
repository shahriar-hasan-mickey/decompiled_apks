record `rx.internal.operators.OperatorSkipWhile` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Func2` `rx.internal.operators.OperatorSkipWhile.predicate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSkipWhile` v0 @kind this, `rx.functions.Func2` v1 @kind object) @signature `Lrx/internal/operators/OperatorSkipWhile;.<init>:(Lrx/functions/Func2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a8e50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a8e56.  v0.`rx.internal.operators.OperatorSkipWhile.predicate` @type ^`rx.functions.Func2` := v1 @kind object;
  #L4a8e5a.  return @kind void;
}
procedure `rx.functions.Func2` `toPredicate2`(`rx.functions.Func1` v1 @kind object) @signature `Lrx/internal/operators/OperatorSkipWhile;.toPredicate2:(Lrx/functions/Func1;)Lrx/functions/Func2;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a8e34.  v0:= new `rx.internal.operators.OperatorSkipWhile$2`;
  #L4a8e38.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorSkipWhile$2;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4a8e3e.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorSkipWhile` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorSkipWhile;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8df8.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a8dfc.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorSkipWhile;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a8e02.  v1:= temp @kind object;
  #L4a8e04.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorSkipWhile` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorSkipWhile;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8e18.  v0:= new `rx.internal.operators.OperatorSkipWhile$1`;
  #L4a8e1c.  call `<init>`(v0, v1, v2, v2) @signature `Lrx/internal/operators/OperatorSkipWhile$1;.<init>:(Lrx/internal/operators/OperatorSkipWhile;Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L4a8e22.  return v0 @kind object;
}
