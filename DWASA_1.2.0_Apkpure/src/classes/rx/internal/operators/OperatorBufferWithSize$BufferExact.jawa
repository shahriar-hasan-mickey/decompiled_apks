record `rx.internal.operators.OperatorBufferWithSize$BufferExact` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorBufferWithSize$BufferExact.actual` @AccessFlag FINAL;
  `java.util.List` `rx.internal.operators.OperatorBufferWithSize$BufferExact.buffer` @AccessFlag ;
  `int` `rx.internal.operators.OperatorBufferWithSize$BufferExact.count` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSize$BufferExact` v0 @kind this, `rx.Subscriber` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.<init>:(Lrx/Subscriber;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49e4c4.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49e4ca.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferExact.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L49e4ce.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferExact.count` @type ^`int` := v2;
  #L49e4d2.  v1:= 0L;
  #L49e4d6.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.request:(J)V` @kind virtual;
  #L49e4dc.  return @kind void;
}
procedure `void` `access$000`(`rx.internal.operators.OperatorBufferWithSize$BufferExact` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.access$000:(Lrx/internal/operators/OperatorBufferWithSize$BufferExact;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49e4f0.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.request:(J)V` @kind virtual;
  #L49e4f6.  return @kind void;
}
procedure `rx.Producer` `createProducer`(`rx.internal.operators.OperatorBufferWithSize$BufferExact` v1 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.createProducer:()Lrx/Producer;` @AccessFlag  {
    temp;
    v0;

  #L49e4a8.  v0:= new `rx.internal.operators.OperatorBufferWithSize$BufferExact$1`;
  #L49e4ac.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact$1;.<init>:(Lrx/internal/operators/OperatorBufferWithSize$BufferExact;)V` @kind direct;
  #L49e4b2.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorBufferWithSize$BufferExact` v2 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e508.  v0:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.buffer` @type ^`java.util.List` @kind object;
  #L49e50c.  if v0 == 0 then goto L49e51a;
  #L49e510.  v1:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.actual` @type ^`rx.Subscriber` @kind object;
  #L49e514.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49e51a.  v0:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.actual` @type ^`rx.Subscriber` @kind object;
  #L49e51e.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49e524.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorBufferWithSize$BufferExact` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49e538.  v0:= 0I;
  #L49e53a.  v1.`rx.internal.operators.OperatorBufferWithSize$BufferExact.buffer` @type ^`java.util.List` := v0 @kind object;
  #L49e53e.  v0:= v1.`rx.internal.operators.OperatorBufferWithSize$BufferExact.actual` @type ^`rx.Subscriber` @kind object;
  #L49e542.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49e548.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorBufferWithSize$BufferExact` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e55c.  v0:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.buffer` @type ^`java.util.List` @kind object;
  #L49e560.  if v0 != 0 then goto L49e576;
  #L49e564.  v0:= new `java.util.ArrayList`;
  #L49e568.  v1:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.count` @type ^`int`;
  #L49e56c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L49e572.  v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.buffer` @type ^`java.util.List` := v0 @kind object;
  #L49e576.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49e57c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49e582.  v3:= temp;
  #L49e584.  v1:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.count` @type ^`int`;
  #L49e588.  if v3 != v1 then goto L49e59c;
  #L49e58c.  v3:= 0I;
  #L49e58e.  v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.buffer` @type ^`java.util.List` := v3 @kind object;
  #L49e592.  v3:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferExact.actual` @type ^`rx.Subscriber` @kind object;
  #L49e596.  call `onNext`(v3, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49e59c.  return @kind void;
}
