record `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1` v0 @kind this, `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v1 @kind object) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber$1;.<init>:(Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a0d00.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1.this$0` @type ^`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` := v1 @kind object;
  #L4a0d04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a0d0a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1` v2 @kind this) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0d1c.  v0:= v2.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1.this$0` @type ^`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` @kind object;
  #L4a0d20.  v1:= 1I;
  #L4a0d22.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L4a0d26.  v0:= v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a0d2a.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a0d30.  v0:= temp;
  #L4a0d32.  if v0 != 0 then goto L4a0d40;
  #L4a0d36.  v0:= v2.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1.this$0` @type ^`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` @kind object;
  #L4a0d3a.  call `cleanup`(v0) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.cleanup:()V` @kind virtual;
  #L4a0d40.  return @kind void;
}
