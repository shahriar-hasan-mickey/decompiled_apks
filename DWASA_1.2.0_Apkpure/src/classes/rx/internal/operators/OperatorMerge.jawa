record `rx.internal.operators.OperatorMerge` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `boolean` `rx.internal.operators.OperatorMerge.delayErrors` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorMerge.maxConcurrent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorMerge` v0 @kind this, `boolean` v1 , `int` v2 ) @signature `Lrx/internal/operators/OperatorMerge;.<init>:(ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a3b4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a3b52.  v0.`rx.internal.operators.OperatorMerge.delayErrors` @type ^`boolean` := v1 @kind boolean;
  #L4a3b56.  v0.`rx.internal.operators.OperatorMerge.maxConcurrent` @type ^`int` := v2;
  #L4a3b5a.  return @kind void;
}
procedure `rx.internal.operators.OperatorMerge` `instance`(`boolean` v0 ) @signature `Lrx/internal/operators/OperatorMerge;.instance:(Z)Lrx/internal/operators/OperatorMerge;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4a3ac8.  if v0 == 0 then goto L4a3ad2;
  #L4a3acc.  v0:= `@@rx.internal.operators.OperatorMerge$HolderDelayErrors.INSTANCE` @type ^`rx.internal.operators.OperatorMerge` @kind object;
  #L4a3ad0.  return v0 @kind object;
  #L4a3ad2.  v0:= `@@rx.internal.operators.OperatorMerge$HolderNoDelay.INSTANCE` @type ^`rx.internal.operators.OperatorMerge` @kind object;
  #L4a3ad6.  return v0 @kind object;
}
procedure `rx.internal.operators.OperatorMerge` `instance`(`boolean` v2 , `int` v3 ) @signature `Lrx/internal/operators/OperatorMerge;.instance:(ZI)Lrx/internal/operators/OperatorMerge;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4a3ae8.  if v3 <= 0 then goto L4a3b0c;
  #L4a3aec.  v0:= 2147483647I;
  #L4a3af2.  if v3 != v0 then goto L4a3b00;
  #L4a3af6.  call temp:= `instance`(v2) @signature `Lrx/internal/operators/OperatorMerge;.instance:(Z)Lrx/internal/operators/OperatorMerge;` @kind static;
  #L4a3afc.  v2:= temp @kind object;
  #L4a3afe.  return v2 @kind object;
  #L4a3b00.  v0:= new `rx.internal.operators.OperatorMerge`;
  #L4a3b04.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorMerge;.<init>:(ZI)V` @kind direct;
  #L4a3b0a.  return v0 @kind object;
  #L4a3b0c.  v2:= new `java.lang.IllegalArgumentException`;
  #L4a3b10.  v0:= new `java.lang.StringBuilder`;
  #L4a3b14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a3b1a.  v1:= "maxConcurrent > 0 required but it was " @kind object;
  #L4a3b1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a3b24.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a3b2a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a3b30.  v3:= temp @kind object;
  #L4a3b32.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a3b38.  throw v2;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorMerge` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorMerge;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a3a68.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a3a6c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorMerge;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a3a72.  v1:= temp @kind object;
  #L4a3a74.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorMerge` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorMerge;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a3a88.  v0:= new `rx.internal.operators.OperatorMerge$MergeSubscriber`;
  #L4a3a8c.  v1:= v3.`rx.internal.operators.OperatorMerge.delayErrors` @type ^`boolean` @kind boolean;
  #L4a3a90.  v2:= v3.`rx.internal.operators.OperatorMerge.maxConcurrent` @type ^`int`;
  #L4a3a94.  call `<init>`(v0, v4, v1, v2) @signature `Lrx/internal/operators/OperatorMerge$MergeSubscriber;.<init>:(Lrx/Subscriber;ZI)V` @kind direct;
  #L4a3a9a.  v1:= new `rx.internal.operators.OperatorMerge$MergeProducer`;
  #L4a3a9e.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/OperatorMerge$MergeProducer;.<init>:(Lrx/internal/operators/OperatorMerge$MergeSubscriber;)V` @kind direct;
  #L4a3aa4.  v0.`rx.internal.operators.OperatorMerge$MergeSubscriber.producer` @type ^`rx.internal.operators.OperatorMerge$MergeProducer` := v1 @kind object;
  #L4a3aa8.  call `add`(v4, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a3aae.  call `setProducer`(v4, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a3ab4.  return v0 @kind object;
}
