record `rx.internal.operators.OperatorSkip` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorSkip.toSkip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSkip` v3 @kind this, `int` v4 ) @signature `Lrx/internal/operators/OperatorSkip;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4a8ea8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a8eae.  if v4 < 0 then goto L4a8eb8;
  #L4a8eb2.  v3.`rx.internal.operators.OperatorSkip.toSkip` @type ^`int` := v4;
  #L4a8eb6.  return @kind void;
  #L4a8eb8.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a8ebc.  v1:= new `java.lang.StringBuilder`;
  #L4a8ec0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a8ec6.  v2:= "n >= 0 required but it was " @kind object;
  #L4a8eca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8ed0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8ed6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a8edc.  v4:= temp @kind object;
  #L4a8ede.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a8ee4.  throw v0;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorSkip` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorSkip;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8e6c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a8e70.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorSkip;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a8e76.  v1:= temp @kind object;
  #L4a8e78.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorSkip` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorSkip;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8e8c.  v0:= new `rx.internal.operators.OperatorSkip$1`;
  #L4a8e90.  call `<init>`(v0, v1, v2, v2) @signature `Lrx/internal/operators/OperatorSkip$1;.<init>:(Lrx/internal/operators/OperatorSkip;Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L4a8e96.  return v0 @kind object;
}
