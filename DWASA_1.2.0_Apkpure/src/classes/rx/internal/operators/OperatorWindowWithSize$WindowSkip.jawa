record `rx.internal.operators.OperatorWindowWithSize$WindowSkip` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorWindowWithSize$WindowSkip.actual` @AccessFlag FINAL;
  `rx.Subscription` `rx.internal.operators.OperatorWindowWithSize$WindowSkip.cancel` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowSkip.index` @AccessFlag ;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowSkip.size` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowSkip.skip` @AccessFlag FINAL;
  `rx.subjects.Subject` `rx.internal.operators.OperatorWindowWithSize$WindowSkip.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorWindowWithSize$WindowSkip.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip` v0 @kind this, `rx.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.<init>:(Lrx/Subscriber;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ad07c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4ad082.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L4ad086.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.size` @type ^`int` := v2;
  #L4ad08a.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.skip` @type ^`int` := v3;
  #L4ad08e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4ad092.  v2:= 1I;
  #L4ad094.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4ad09a.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4ad09e.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4ad0a4.  v1:= temp @kind object;
  #L4ad0a6.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.cancel` @type ^`rx.Subscription` := v1 @kind object;
  #L4ad0aa.  v1:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.cancel` @type ^`rx.Subscription` @kind object;
  #L4ad0ae.  call `add`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ad0b4.  v1:= 0L;
  #L4ad0b8.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.request:(J)V` @kind virtual;
  #L4ad0be.  return @kind void;
}
procedure `void` `access$100`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.access$100:(Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4ad0d0.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.request:(J)V` @kind virtual;
  #L4ad0d6.  return @kind void;
}
procedure `void` `access$200`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.access$200:(Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4ad0e8.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.request:(J)V` @kind virtual;
  #L4ad0ee.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip` v1 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ad100.  v0:= v1.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ad104.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ad10a.  v0:= temp;
  #L4ad10c.  if v0 != 0 then goto L4ad116;
  #L4ad110.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.unsubscribe:()V` @kind virtual;
  #L4ad116.  return @kind void;
}
procedure `rx.Producer` `createProducer`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip` v1 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.createProducer:()Lrx/Producer;` @AccessFlag  {
    temp;
    v0;

  #L4ad060.  v0:= new `rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer`;
  #L4ad064.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip$WindowSkipProducer;.<init>:(Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;)V` @kind direct;
  #L4ad06a.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ad128.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.window` @type ^`rx.subjects.Subject` @kind object;
  #L4ad12c.  if v0 == 0 then goto L4ad13c;
  #L4ad130.  v1:= 0I;
  #L4ad132.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.window` @type ^`rx.subjects.Subject` := v1 @kind object;
  #L4ad136.  call `onCompleted`(v0) @signature `Lrx/subjects/Subject;.onCompleted:()V` @kind virtual;
  #L4ad13c.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.actual` @type ^`rx.Subscriber` @kind object;
  #L4ad140.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4ad146.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ad158.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.window` @type ^`rx.subjects.Subject` @kind object;
  #L4ad15c.  if v0 == 0 then goto L4ad16c;
  #L4ad160.  v1:= 0I;
  #L4ad162.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.window` @type ^`rx.subjects.Subject` := v1 @kind object;
  #L4ad166.  call `onError`(v0, v3) @signature `Lrx/subjects/Subject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ad16c.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.actual` @type ^`rx.Subscriber` @kind object;
  #L4ad170.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ad176.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ad188.  v0:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.index` @type ^`int`;
  #L4ad18c.  v1:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.window` @type ^`rx.subjects.Subject` @kind object;
  #L4ad190.  if v0 != 0 then goto L4ad1b8;
  #L4ad194.  v1:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ad198.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ad19e.  v1:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.size` @type ^`int`;
  #L4ad1a2.  call temp:= `create`(v1, v3) @signature `Lrx/subjects/UnicastSubject;.create:(ILrx/functions/Action0;)Lrx/subjects/UnicastSubject;` @kind static;
  #L4ad1a8.  v1:= temp @kind object;
  #L4ad1aa.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.window` @type ^`rx.subjects.Subject` := v1 @kind object;
  #L4ad1ae.  v2:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.actual` @type ^`rx.Subscriber` @kind object;
  #L4ad1b2.  call `onNext`(v2, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ad1b8.  v0:= v0 + 1;
  #L4ad1bc.  if v1 == 0 then goto L4ad1c6;
  #L4ad1c0.  call `onNext`(v1, v4) @signature `Lrx/subjects/Subject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ad1c6.  v4:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.size` @type ^`int`;
  #L4ad1ca.  if v0 != v4 then goto L4ad1e0;
  #L4ad1ce.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.index` @type ^`int` := v0;
  #L4ad1d2.  v4:= 0I;
  #L4ad1d4.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.window` @type ^`rx.subjects.Subject` := v4 @kind object;
  #L4ad1d8.  call `onCompleted`(v1) @signature `Lrx/subjects/Subject;.onCompleted:()V` @kind virtual;
  #L4ad1de.  goto L4ad1f4;
  #L4ad1e0.  v4:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.skip` @type ^`int`;
  #L4ad1e4.  if v0 != v4 then goto L4ad1f0;
  #L4ad1e8.  v4:= 0I;
  #L4ad1ea.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.index` @type ^`int` := v4;
  #L4ad1ee.  goto L4ad1f4;
  #L4ad1f0.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.index` @type ^`int` := v0;
  #L4ad1f4.  return @kind void;
}
