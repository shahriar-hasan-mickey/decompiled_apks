record `rx.internal.operators.OperatorZipIterable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `java.lang.Iterable` `rx.internal.operators.OperatorZipIterable.iterable` @AccessFlag FINAL;
  `rx.functions.Func2` `rx.internal.operators.OperatorZipIterable.zipFunction` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorZipIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object, `rx.functions.Func2` v2 @kind object) @signature `Lrx/internal/operators/OperatorZipIterable;.<init>:(Ljava/lang/Iterable;Lrx/functions/Func2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4af194.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4af19a.  v0.`rx.internal.operators.OperatorZipIterable.iterable` @type ^`java.lang.Iterable` := v1 @kind object;
  #L4af19e.  v0.`rx.internal.operators.OperatorZipIterable.zipFunction` @type ^`rx.functions.Func2` := v2 @kind object;
  #L4af1a2.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorZipIterable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorZipIterable;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4af110.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4af114.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorZipIterable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4af11a.  v1:= temp @kind object;
  #L4af11c.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorZipIterable` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorZipIterable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af130.  v0:= v2.`rx.internal.operators.OperatorZipIterable.iterable` @type ^`java.lang.Iterable` @kind object;
  #L4af134.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4af13a.  v0:= temp @kind object;
  #L4af13c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4af142.  v1:= temp;
  #L4af144.  if v1 != 0 then goto L4af158;
  #L4af148.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4af14e.  call temp:= `empty`() @signature `Lrx/observers/Subscribers;.empty:()Lrx/Subscriber;` @kind static;
  #L4af154.  v3:= temp @kind object;
  #L4af156.  return v3 @kind object;
  #L4af158.  v1:= new `rx.internal.operators.OperatorZipIterable$1`;
  #L4af15c.  call `<init>`(v1, v2, v3, v3, v0) @signature `Lrx/internal/operators/OperatorZipIterable$1;.<init>:(Lrx/internal/operators/OperatorZipIterable;Lrx/Subscriber;Lrx/Subscriber;Ljava/util/Iterator;)V` @kind direct;
  #L4af162.  return v1 @kind object;
  #L4af164.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af166.  call `throwOrReport`(v0, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4af16c.  call temp:= `empty`() @signature `Lrx/observers/Subscribers;.empty:()Lrx/Subscriber;` @kind static;
  #L4af172.  v3:= temp @kind object;
  #L4af174.  return v3 @kind object;
  catch `java.lang.Throwable` @[L4af13c..L4af156] goto L4af164;
}
