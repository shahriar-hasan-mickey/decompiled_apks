record `rx.internal.operators.OperatorGroupBy` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorGroupBy.bufferSize` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorGroupBy.delayError` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OperatorGroupBy.keySelector` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OperatorGroupBy.mapFactory` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OperatorGroupBy.valueSelector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorGroupBy` v6 @kind this, `rx.functions.Func1` v7 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a1f58.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4a1f5e.  v2:= temp @kind object;
  #L4a1f60.  v3:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a1f64.  v4:= 0I;
  #L4a1f66.  v5:= 0I;
  #L4a1f68.  v0:= v6 @kind object;
  #L4a1f6a.  v1:= v7 @kind object;
  #L4a1f6c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;IZLrx/functions/Func1;)V` @kind direct;
  #L4a1f72.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorGroupBy` v6 @kind this, `rx.functions.Func1` v7 @kind object, `rx.functions.Func1` v8 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a1f84.  v3:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a1f88.  v4:= 0I;
  #L4a1f8a.  v5:= 0I;
  #L4a1f8c.  v0:= v6 @kind object;
  #L4a1f8e.  v1:= v7 @kind object;
  #L4a1f90.  v2:= v8 @kind object;
  #L4a1f92.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;IZLrx/functions/Func1;)V` @kind direct;
  #L4a1f98.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorGroupBy` v0 @kind this, `rx.functions.Func1` v1 @kind object, `rx.functions.Func1` v2 @kind object, `int` v3 , `boolean` v4 , `rx.functions.Func1` v5 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;IZLrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a1fac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a1fb2.  v0.`rx.internal.operators.OperatorGroupBy.keySelector` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4a1fb6.  v0.`rx.internal.operators.OperatorGroupBy.valueSelector` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4a1fba.  v0.`rx.internal.operators.OperatorGroupBy.bufferSize` @type ^`int` := v3;
  #L4a1fbe.  v0.`rx.internal.operators.OperatorGroupBy.delayError` @type ^`boolean` := v4 @kind boolean;
  #L4a1fc2.  v0.`rx.internal.operators.OperatorGroupBy.mapFactory` @type ^`rx.functions.Func1` := v5 @kind object;
  #L4a1fc6.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorGroupBy` v6 @kind this, `rx.functions.Func1` v7 @kind object, `rx.functions.Func1` v8 @kind object, `rx.functions.Func1` v9 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a1fd8.  v3:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a1fdc.  v4:= 0I;
  #L4a1fde.  v0:= v6 @kind object;
  #L4a1fe0.  v1:= v7 @kind object;
  #L4a1fe2.  v2:= v8 @kind object;
  #L4a1fe4.  v5:= v9 @kind object;
  #L4a1fe6.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;IZLrx/functions/Func1;)V` @kind direct;
  #L4a1fec.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorGroupBy` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a1ebc.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a1ec0.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorGroupBy;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a1ec6.  v1:= temp @kind object;
  #L4a1ec8.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorGroupBy` v8 @kind this, `rx.Subscriber` v9 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4a1edc.  v7:= new `rx.internal.operators.OperatorGroupBy$GroupBySubscriber`;
  #L4a1ee0.  v2:= v8.`rx.internal.operators.OperatorGroupBy.keySelector` @type ^`rx.functions.Func1` @kind object;
  #L4a1ee4.  v3:= v8.`rx.internal.operators.OperatorGroupBy.valueSelector` @type ^`rx.functions.Func1` @kind object;
  #L4a1ee8.  v4:= v8.`rx.internal.operators.OperatorGroupBy.bufferSize` @type ^`int`;
  #L4a1eec.  v5:= v8.`rx.internal.operators.OperatorGroupBy.delayError` @type ^`boolean` @kind boolean;
  #L4a1ef0.  v6:= v8.`rx.internal.operators.OperatorGroupBy.mapFactory` @type ^`rx.functions.Func1` @kind object;
  #L4a1ef4.  v0:= v7 @kind object;
  #L4a1ef6.  v1:= v9 @kind object;
  #L4a1ef8.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func1;Lrx/functions/Func1;IZLrx/functions/Func1;)V` @kind direct;
  #L4a1efe.  v0:= new `rx.internal.operators.OperatorGroupBy$1`;
  #L4a1f02.  call `<init>`(v0, v8, v7) @signature `Lrx/internal/operators/OperatorGroupBy$1;.<init>:(Lrx/internal/operators/OperatorGroupBy;Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;)V` @kind direct;
  #L4a1f08.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4a1f0e.  v0:= temp @kind object;
  #L4a1f10.  call `add`(v9, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a1f16.  v0:= v7.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.producer` @type ^`rx.internal.operators.OperatorGroupBy$GroupByProducer` @kind object;
  #L4a1f1a.  call `setProducer`(v9, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a1f20.  return v7 @kind object;
  #L4a1f22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a1f24.  call `throwOrReport`(v0, v9) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4a1f2a.  call temp:= `empty`() @signature `Lrx/observers/Subscribers;.empty:()Lrx/Subscriber;` @kind static;
  #L4a1f30.  v9:= temp @kind object;
  #L4a1f32.  call `unsubscribe`(v9) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4a1f38.  return v9 @kind object;
  catch `java.lang.Throwable` @[L4a1edc..L4a1efe] goto L4a1f22;
}
