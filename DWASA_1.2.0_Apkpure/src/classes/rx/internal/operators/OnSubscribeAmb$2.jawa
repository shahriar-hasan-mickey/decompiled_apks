record `rx.internal.operators.OnSubscribeAmb$2` @kind class @AccessFlag  extends `rx.Producer` @kind interface {
  `rx.internal.operators.OnSubscribeAmb` `rx.internal.operators.OnSubscribeAmb$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.internal.operators.OnSubscribeAmb$Selection` `rx.internal.operators.OnSubscribeAmb$2.val$selection` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeAmb$2` v0 @kind this, `rx.internal.operators.OnSubscribeAmb` v1 @kind object, `rx.internal.operators.OnSubscribeAmb$Selection` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb$2;.<init>:(Lrx/internal/operators/OnSubscribeAmb;Lrx/internal/operators/OnSubscribeAmb$Selection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L496554.  v0.`rx.internal.operators.OnSubscribeAmb$2.this$0` @type ^`rx.internal.operators.OnSubscribeAmb` := v1 @kind object;
  #L496558.  v0.`rx.internal.operators.OnSubscribeAmb$2.val$selection` @type ^`rx.internal.operators.OnSubscribeAmb$Selection` := v2 @kind object;
  #L49655c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L496562.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OnSubscribeAmb$2` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OnSubscribeAmb$2;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L496574.  v0:= v3.`rx.internal.operators.OnSubscribeAmb$2.val$selection` @type ^`rx.internal.operators.OnSubscribeAmb$Selection` @kind object;
  #L496578.  call temp:= `get`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.get:()Ljava/lang/Object;` @kind virtual;
  #L49657e.  v0:= temp @kind object;
  #L496580.  v0:= (`rx.internal.operators.OnSubscribeAmb$AmbSubscriber`) v0 @kind object;
  #L496584.  if v0 == 0 then goto L496590;
  #L496588.  call `access$000`(v0, v4) @signature `Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;.access$000:(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;J)V` @kind static;
  #L49658e.  goto L4965e4;
  #L496590.  v0:= v3.`rx.internal.operators.OnSubscribeAmb$2.val$selection` @type ^`rx.internal.operators.OnSubscribeAmb$Selection` @kind object;
  #L496594.  v0:= v0.`rx.internal.operators.OnSubscribeAmb$Selection.ambSubscribers` @type ^`java.util.Collection` @kind object;
  #L496598.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49659e.  v0:= temp @kind object;
  #L4965a0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4965a6.  v1:= temp;
  #L4965a8.  if v1 == 0 then goto L4965e4;
  #L4965ac.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4965b2.  v1:= temp @kind object;
  #L4965b4.  v1:= (`rx.internal.operators.OnSubscribeAmb$AmbSubscriber`) v1 @kind object;
  #L4965b8.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4965be.  v2:= temp;
  #L4965c0.  if v2 != 0 then goto L4965a0;
  #L4965c4.  v2:= v3.`rx.internal.operators.OnSubscribeAmb$2.val$selection` @type ^`rx.internal.operators.OnSubscribeAmb$Selection` @kind object;
  #L4965c8.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.get:()Ljava/lang/Object;` @kind virtual;
  #L4965ce.  v2:= temp @kind object;
  #L4965d0.  if v2 != v1 then goto L4965dc;
  #L4965d4.  call `access$000`(v1, v4) @signature `Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;.access$000:(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;J)V` @kind static;
  #L4965da.  return @kind void;
  #L4965dc.  call `access$000`(v1, v4) @signature `Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;.access$000:(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;J)V` @kind static;
  #L4965e2.  goto L4965a0;
  #L4965e4.  return @kind void;
}
