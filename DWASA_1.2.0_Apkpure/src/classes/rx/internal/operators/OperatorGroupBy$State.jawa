record `rx.internal.operators.OperatorGroupBy$State` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `rx.Producer` @kind interface, `rx.Subscription` @kind interface, `rx.Observable$OnSubscribe` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorGroupBy$State.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OperatorGroupBy$State.cancelled` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorGroupBy$State.delayError` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorGroupBy$State.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `rx.internal.operators.OperatorGroupBy$State.error` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.OperatorGroupBy$State.key` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OperatorGroupBy$State.once` @AccessFlag FINAL;
  `rx.internal.operators.OperatorGroupBy$GroupBySubscriber` `rx.internal.operators.OperatorGroupBy$State.parent` @AccessFlag FINAL;
  `java.util.Queue` `rx.internal.operators.OperatorGroupBy$State.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorGroupBy$State.requested` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OperatorGroupBy$State.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorGroupBy$State` v0 @kind this, `int` v1 , `rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v2 @kind object, `java.lang.Object` v3 @kind object, `boolean` v4 ) @signature `Lrx/internal/operators/OperatorGroupBy$State;.<init>:(ILrx/internal/operators/OperatorGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a1ba4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a1baa.  v1:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L4a1bae.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L4a1bb4.  v0.`rx.internal.operators.OperatorGroupBy$State.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L4a1bb8.  v0.`rx.internal.operators.OperatorGroupBy$State.parent` @type ^`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` := v2 @kind object;
  #L4a1bbc.  v0.`rx.internal.operators.OperatorGroupBy$State.key` @type ^`java.lang.Object` := v3 @kind object;
  #L4a1bc0.  v0.`rx.internal.operators.OperatorGroupBy$State.delayError` @type ^`boolean` := v4 @kind boolean;
  #L4a1bc4.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a1bc8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a1bce.  v0.`rx.internal.operators.OperatorGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4a1bd2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a1bd6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a1bdc.  v0.`rx.internal.operators.OperatorGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a1be0.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a1be4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a1bea.  v0.`rx.internal.operators.OperatorGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4a1bee.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a1bf2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a1bf8.  v0.`rx.internal.operators.OperatorGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a1bfc.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorGroupBy$State` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$State;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a1c10.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a1c14.  call `call`(v0, v1) @signature `Lrx/internal/operators/OperatorGroupBy$State;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4a1c1a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorGroupBy$State` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$State;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a1c2c.  v0:= v3.`rx.internal.operators.OperatorGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a1c30.  v1:= 0I;
  #L4a1c32.  v2:= 1I;
  #L4a1c34.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a1c3a.  v0:= temp;
  #L4a1c3c.  if v0 == 0 then goto L4a1c5e;
  #L4a1c40.  call `add`(v4, v3) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a1c46.  call `setProducer`(v4, v3) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a1c4c.  v0:= v3.`rx.internal.operators.OperatorGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1c50.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1c56.  call `drain`(v3) @signature `Lrx/internal/operators/OperatorGroupBy$State;.drain:()V` @kind virtual;
  #L4a1c5c.  goto L4a1c72;
  #L4a1c5e.  v0:= new `java.lang.IllegalStateException`;
  #L4a1c62.  v1:= "Only one Subscriber allowed!" @kind object;
  #L4a1c66.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a1c6c.  call `onError`(v4, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a1c72.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OperatorGroupBy$State` v2 @kind this, `boolean` v3 , `boolean` v4 , `rx.Subscriber` v5 @kind object, `boolean` v6 ) @signature `Lrx/internal/operators/OperatorGroupBy$State;.checkTerminated:(ZZLrx/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a1af8.  v0:= v2.`rx.internal.operators.OperatorGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a1afc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a1b02.  v0:= temp;
  #L4a1b04.  v1:= 1I;
  #L4a1b06.  if v0 == 0 then goto L4a1b24;
  #L4a1b0a.  v3:= v2.`rx.internal.operators.OperatorGroupBy$State.queue` @type ^`java.util.Queue` @kind object;
  #L4a1b0e.  call `clear`(v3) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4a1b14.  v3:= v2.`rx.internal.operators.OperatorGroupBy$State.parent` @type ^`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` @kind object;
  #L4a1b18.  v4:= v2.`rx.internal.operators.OperatorGroupBy$State.key` @type ^`java.lang.Object` @kind object;
  #L4a1b1c.  call `cancel`(v3, v4) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1b22.  return v1;
  #L4a1b24.  if v3 == 0 then goto L4a1b6e;
  #L4a1b28.  if v6 == 0 then goto L4a1b48;
  #L4a1b2c.  if v4 == 0 then goto L4a1b6e;
  #L4a1b30.  v3:= v2.`rx.internal.operators.OperatorGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L4a1b34.  if v3 == 0 then goto L4a1b40;
  #L4a1b38.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a1b3e.  goto L4a1b46;
  #L4a1b40.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a1b46.  return v1;
  #L4a1b48.  v3:= v2.`rx.internal.operators.OperatorGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L4a1b4c.  if v3 == 0 then goto L4a1b62;
  #L4a1b50.  v4:= v2.`rx.internal.operators.OperatorGroupBy$State.queue` @type ^`java.util.Queue` @kind object;
  #L4a1b54.  call `clear`(v4) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4a1b5a.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a1b60.  return v1;
  #L4a1b62.  if v4 == 0 then goto L4a1b6e;
  #L4a1b66.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a1b6c.  return v1;
  #L4a1b6e.  v3:= 0I;
  #L4a1b70.  return v3;
}
procedure `void` `drain`(`rx.internal.operators.OperatorGroupBy$State` v14 @kind this) @signature `Lrx/internal/operators/OperatorGroupBy$State;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4a1c84.  call temp:= `getAndIncrement`(v14) @signature `Lrx/internal/operators/OperatorGroupBy$State;.getAndIncrement:()I` @kind virtual;
  #L4a1c8a.  v0:= temp;
  #L4a1c8c.  if v0 == 0 then goto L4a1c92;
  #L4a1c90.  return @kind void;
  #L4a1c92.  v0:= v14.`rx.internal.operators.OperatorGroupBy$State.queue` @type ^`java.util.Queue` @kind object;
  #L4a1c96.  v1:= v14.`rx.internal.operators.OperatorGroupBy$State.delayError` @type ^`boolean` @kind boolean;
  #L4a1c9a.  v2:= v14.`rx.internal.operators.OperatorGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1c9e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a1ca4.  v2:= temp @kind object;
  #L4a1ca6.  v2:= (`rx.Subscriber`) v2 @kind object;
  #L4a1caa.  v3:= 1I;
  #L4a1cac.  v4:= 1I;
  #L4a1cae.  if v2 == 0 then goto L4a1d58;
  #L4a1cb2.  v5:= v14.`rx.internal.operators.OperatorGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L4a1cb6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4a1cbc.  v6:= temp;
  #L4a1cbe.  call temp:= `checkTerminated`(v14, v5, v6, v2, v1) @signature `Lrx/internal/operators/OperatorGroupBy$State;.checkTerminated:(ZZLrx/Subscriber;Z)Z` @kind virtual;
  #L4a1cc4.  v5:= temp;
  #L4a1cc6.  if v5 == 0 then goto L4a1ccc;
  #L4a1cca.  return @kind void;
  #L4a1ccc.  v5:= v14.`rx.internal.operators.OperatorGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a1cd0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a1cd6.  v5:= temp @kind wide;
  #L4a1cd8.  v7:= 0L;
  #L4a1cdc.  v9:= v7 @kind wide;
  #L4a1cde.  v11:= lcmp(v9, v5);
  #L4a1ce2.  if v11 == 0 then goto L4a1d26;
  #L4a1ce6.  v11:= v14.`rx.internal.operators.OperatorGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L4a1cea.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a1cf0.  v12:= temp @kind object;
  #L4a1cf2.  if v12 != 0 then goto L4a1cfa;
  #L4a1cf6.  v13:= 1I;
  #L4a1cf8.  goto L4a1cfc;
  #L4a1cfa.  v13:= 0I;
  #L4a1cfc.  call temp:= `checkTerminated`(v14, v11, v13, v2, v1) @signature `Lrx/internal/operators/OperatorGroupBy$State;.checkTerminated:(ZZLrx/Subscriber;Z)Z` @kind virtual;
  #L4a1d02.  v11:= temp;
  #L4a1d04.  if v11 == 0 then goto L4a1d0a;
  #L4a1d08.  return @kind void;
  #L4a1d0a.  if v13 == 0 then goto L4a1d10;
  #L4a1d0e.  goto L4a1d26;
  #L4a1d10.  call temp:= `getValue`(v12) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a1d16.  v11:= temp @kind object;
  #L4a1d18.  call `onNext`(v2, v11) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1d1e.  v11:= 1L;
  #L4a1d22.  v9:= v9 + v11 @kind long;
  #L4a1d24.  goto L4a1cde;
  #L4a1d26.  v11:= lcmp(v9, v7);
  #L4a1d2a.  if v11 == 0 then goto L4a1d58;
  #L4a1d2e.  v7:= 9223372036854775807L;
  #L4a1d38.  v11:= lcmp(v5, v7);
  #L4a1d3c.  if v11 == 0 then goto L4a1d4a;
  #L4a1d40.  v5:= v14.`rx.internal.operators.OperatorGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a1d44.  call temp:= `produced`(v5, v9) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a1d4a.  v5:= v14.`rx.internal.operators.OperatorGroupBy$State.parent` @type ^`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` @kind object;
  #L4a1d4e.  v5:= v5.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.s` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a1d52.  call `request`(v5, v9) @signature `Lrx/internal/producers/ProducerArbiter;.request:(J)V` @kind virtual;
  #L4a1d58.  v4:= -v4 @kind int;
  #L4a1d5a.  call temp:= `addAndGet`(v14, v4) @signature `Lrx/internal/operators/OperatorGroupBy$State;.addAndGet:(I)I` @kind virtual;
  #L4a1d60.  v4:= temp;
  #L4a1d62.  if v4 != 0 then goto L4a1d68;
  #L4a1d66.  return @kind void;
  #L4a1d68.  if v2 != 0 then goto L4a1cae;
  #L4a1d6c.  v2:= v14.`rx.internal.operators.OperatorGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1d70.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a1d76.  v2:= temp @kind object;
  #L4a1d78.  v2:= (`rx.Subscriber`) v2 @kind object;
  #L4a1d7c.  goto L4a1cae;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OperatorGroupBy$State` v1 @kind this) @signature `Lrx/internal/operators/OperatorGroupBy$State;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1b84.  v0:= v1.`rx.internal.operators.OperatorGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a1b88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a1b8e.  v0:= temp;
  #L4a1b90.  return v0;
}
procedure `void` `onComplete`(`rx.internal.operators.OperatorGroupBy$State` v1 @kind this) @signature `Lrx/internal/operators/OperatorGroupBy$State;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1d90.  v0:= 1I;
  #L4a1d92.  v1.`rx.internal.operators.OperatorGroupBy$State.done` @type ^`boolean` := v0 @kind boolean;
  #L4a1d96.  call `drain`(v1) @signature `Lrx/internal/operators/OperatorGroupBy$State;.drain:()V` @kind virtual;
  #L4a1d9c.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorGroupBy$State` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$State;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4a1db0.  v0.`rx.internal.operators.OperatorGroupBy$State.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4a1db4.  v1:= 1I;
  #L4a1db6.  v0.`rx.internal.operators.OperatorGroupBy$State.done` @type ^`boolean` := v1 @kind boolean;
  #L4a1dba.  call `drain`(v0) @signature `Lrx/internal/operators/OperatorGroupBy$State;.drain:()V` @kind virtual;
  #L4a1dc0.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorGroupBy$State` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$State;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1dd4.  if v2 != 0 then goto L4a1dee;
  #L4a1dd8.  v2:= new `java.lang.NullPointerException`;
  #L4a1ddc.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L4a1de2.  v1.`rx.internal.operators.OperatorGroupBy$State.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4a1de6.  v2:= 1I;
  #L4a1de8.  v1.`rx.internal.operators.OperatorGroupBy$State.done` @type ^`boolean` := v2 @kind boolean;
  #L4a1dec.  goto L4a1e00;
  #L4a1dee.  v0:= v1.`rx.internal.operators.OperatorGroupBy$State.queue` @type ^`java.util.Queue` @kind object;
  #L4a1df2.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a1df8.  v2:= temp @kind object;
  #L4a1dfa.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a1e00.  call `drain`(v1) @signature `Lrx/internal/operators/OperatorGroupBy$State;.drain:()V` @kind virtual;
  #L4a1e06.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorGroupBy$State` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OperatorGroupBy$State;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a1e18.  v0:= 0L;
  #L4a1e1c.  v2:= lcmp(v4, v0);
  #L4a1e20.  if v2 < 0 then goto L4a1e3e;
  #L4a1e24.  v2:= lcmp(v4, v0);
  #L4a1e28.  if v2 == 0 then goto L4a1e3c;
  #L4a1e2c.  v0:= v3.`rx.internal.operators.OperatorGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a1e30.  call temp:= `getAndAddRequest`(v0, v4) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a1e36.  call `drain`(v3) @signature `Lrx/internal/operators/OperatorGroupBy$State;.drain:()V` @kind virtual;
  #L4a1e3c.  return @kind void;
  #L4a1e3e.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a1e42.  v1:= new `java.lang.StringBuilder`;
  #L4a1e46.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a1e4c.  v2:= "n >= required but it was " @kind object;
  #L4a1e50.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a1e56.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a1e5c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a1e62.  v4:= temp @kind object;
  #L4a1e64.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a1e6a.  throw v0;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OperatorGroupBy$State` v3 @kind this) @signature `Lrx/internal/operators/OperatorGroupBy$State;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a1e7c.  v0:= v3.`rx.internal.operators.OperatorGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a1e80.  v1:= 0I;
  #L4a1e82.  v2:= 1I;
  #L4a1e84.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a1e8a.  v0:= temp;
  #L4a1e8c.  if v0 == 0 then goto L4a1eaa;
  #L4a1e90.  call temp:= `getAndIncrement`(v3) @signature `Lrx/internal/operators/OperatorGroupBy$State;.getAndIncrement:()I` @kind virtual;
  #L4a1e96.  v0:= temp;
  #L4a1e98.  if v0 != 0 then goto L4a1eaa;
  #L4a1e9c.  v0:= v3.`rx.internal.operators.OperatorGroupBy$State.parent` @type ^`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` @kind object;
  #L4a1ea0.  v1:= v3.`rx.internal.operators.OperatorGroupBy$State.key` @type ^`java.lang.Object` @kind object;
  #L4a1ea4.  call `cancel`(v0, v1) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1eaa.  return @kind void;
}
