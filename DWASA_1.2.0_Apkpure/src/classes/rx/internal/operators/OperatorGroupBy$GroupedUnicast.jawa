record `rx.internal.operators.OperatorGroupBy$GroupedUnicast` @kind class @AccessFlag FINAL extends `rx.observables.GroupedObservable` @kind class {
  `rx.internal.operators.OperatorGroupBy$State` `rx.internal.operators.OperatorGroupBy$GroupedUnicast.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorGroupBy$GroupedUnicast` v0 @kind this, `java.lang.Object` v1 @kind object, `rx.internal.operators.OperatorGroupBy$State` v2 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.<init>:(Ljava/lang/Object;Lrx/internal/operators/OperatorGroupBy$State;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4a1a88.  call `<init>`(v0, v1, v2) @signature `Lrx/observables/GroupedObservable;.<init>:(Ljava/lang/Object;Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4a1a8e.  v0.`rx.internal.operators.OperatorGroupBy$GroupedUnicast.state` @type ^`rx.internal.operators.OperatorGroupBy$State` := v2 @kind object;
  #L4a1a92.  return @kind void;
}
procedure `rx.internal.operators.OperatorGroupBy$GroupedUnicast` `createWith`(`java.lang.Object` v1 @kind object, `int` v2 , `rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v3 @kind object, `boolean` v4 ) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.createWith:(Ljava/lang/Object;ILrx/internal/operators/OperatorGroupBy$GroupBySubscriber;Z)Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a1a60.  v0:= new `rx.internal.operators.OperatorGroupBy$State`;
  #L4a1a64.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lrx/internal/operators/OperatorGroupBy$State;.<init>:(ILrx/internal/operators/OperatorGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @kind direct;
  #L4a1a6a.  v2:= new `rx.internal.operators.OperatorGroupBy$GroupedUnicast`;
  #L4a1a6e.  call `<init>`(v2, v1, v0) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.<init>:(Ljava/lang/Object;Lrx/internal/operators/OperatorGroupBy$State;)V` @kind direct;
  #L4a1a74.  return v2 @kind object;
}
procedure `void` `onComplete`(`rx.internal.operators.OperatorGroupBy$GroupedUnicast` v1 @kind this) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1aa4.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupedUnicast.state` @type ^`rx.internal.operators.OperatorGroupBy$State` @kind object;
  #L4a1aa8.  call `onComplete`(v0) @signature `Lrx/internal/operators/OperatorGroupBy$State;.onComplete:()V` @kind virtual;
  #L4a1aae.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorGroupBy$GroupedUnicast` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1ac0.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupedUnicast.state` @type ^`rx.internal.operators.OperatorGroupBy$State` @kind object;
  #L4a1ac4.  call `onError`(v0, v2) @signature `Lrx/internal/operators/OperatorGroupBy$State;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a1aca.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorGroupBy$GroupedUnicast` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1adc.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupedUnicast.state` @type ^`rx.internal.operators.OperatorGroupBy$State` @kind object;
  #L4a1ae0.  call `onNext`(v0, v2) @signature `Lrx/internal/operators/OperatorGroupBy$State;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1ae6.  return @kind void;
}
