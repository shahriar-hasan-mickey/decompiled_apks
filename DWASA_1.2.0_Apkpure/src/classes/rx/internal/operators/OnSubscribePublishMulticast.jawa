record `rx.internal.operators.OnSubscribePublishMulticast` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `rx.Observable$OnSubscribe` @kind interface, `rx.Observer` @kind interface, `rx.Subscription` @kind interface {
  `boolean` `rx.internal.operators.OnSubscribePublishMulticast.delayError` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribePublishMulticast.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `rx.internal.operators.OnSubscribePublishMulticast.error` @AccessFlag ;
  `rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber` `rx.internal.operators.OnSubscribePublishMulticast.parent` @AccessFlag FINAL;
  `int` `rx.internal.operators.OnSubscribePublishMulticast.prefetch` @AccessFlag FINAL;
  `rx.Producer` `rx.internal.operators.OnSubscribePublishMulticast.producer` @AccessFlag VOLATILE;
  `java.util.Queue` `rx.internal.operators.OnSubscribePublishMulticast.queue` @AccessFlag FINAL;
  `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] `rx.internal.operators.OnSubscribePublishMulticast.subscribers` @AccessFlag VOLATILE;
}
global `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] `@@rx.internal.operators.OnSubscribePublishMulticast.EMPTY` @AccessFlag STATIC_FINAL;
global `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OnSubscribePublishMulticast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49b5f8.  v0:= 0I;
  #L49b5fa.  v1:= new `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[v0];
  #L49b5fe.  `@@rx.internal.operators.OnSubscribePublishMulticast.EMPTY` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] := v1 @kind object;
  #L49b602.  v0:= new `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[v0];
  #L49b606.  `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] := v0 @kind object;
  #L49b60a.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribePublishMulticast` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.<init>:(IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49b61c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49b622.  if v3 <= 0 then goto L49b674;
  #L49b626.  v2.`rx.internal.operators.OnSubscribePublishMulticast.prefetch` @type ^`int` := v3;
  #L49b62a.  v2.`rx.internal.operators.OnSubscribePublishMulticast.delayError` @type ^`boolean` := v4 @kind boolean;
  #L49b62e.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L49b634.  v4:= temp;
  #L49b636.  if v4 == 0 then goto L49b64a;
  #L49b63a.  v4:= new `rx.internal.util.unsafe.SpscArrayQueue`;
  #L49b63e.  call `<init>`(v4, v3) @signature `Lrx/internal/util/unsafe/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L49b644.  v2.`rx.internal.operators.OnSubscribePublishMulticast.queue` @type ^`java.util.Queue` := v4 @kind object;
  #L49b648.  goto L49b658;
  #L49b64a.  v4:= new `rx.internal.util.atomic.SpscAtomicArrayQueue`;
  #L49b64e.  call `<init>`(v4, v3) @signature `Lrx/internal/util/atomic/SpscAtomicArrayQueue;.<init>:(I)V` @kind direct;
  #L49b654.  v2.`rx.internal.operators.OnSubscribePublishMulticast.queue` @type ^`java.util.Queue` := v4 @kind object;
  #L49b658.  v3:= `@@rx.internal.operators.OnSubscribePublishMulticast.EMPTY` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b65c.  v3:= (`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[]) v3 @kind object;
  #L49b660.  v2.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] := v3 @kind object;
  #L49b664.  v3:= new `rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber`;
  #L49b668.  call `<init>`(v3, v2) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$ParentSubscriber;.<init>:(Lrx/internal/operators/OnSubscribePublishMulticast;)V` @kind direct;
  #L49b66e.  v2.`rx.internal.operators.OnSubscribePublishMulticast.parent` @type ^`rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber` := v3 @kind object;
  #L49b672.  return @kind void;
  #L49b674.  v4:= new `java.lang.IllegalArgumentException`;
  #L49b678.  v0:= new `java.lang.StringBuilder`;
  #L49b67c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49b682.  v1:= "prefetch > 0 required but it was " @kind object;
  #L49b686.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49b68c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49b692.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49b698.  v3:= temp @kind object;
  #L49b69a.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49b6a0.  throw v4;
}
procedure `boolean` `add`(`rx.internal.operators.OnSubscribePublishMulticast` v4 @kind this, `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer` v5 @kind object) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.add:(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49b440.  v0:= v4.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b444.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b448.  v2:= 0I;
  #L49b44a.  if v0 != v1 then goto L49b450;
  #L49b44e.  return v2;
  #L49b450.  @monitorenter v4
  #L49b452.  v0:= v4.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b456.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b45a.  if v0 != v1 then goto L49b462;
  #L49b45e.  @monitorexit v4
  #L49b460.  return v2;
  #L49b462.  v1:= length @variable v0;
  #L49b464.  v3:= v1 + 1;
  #L49b468.  v3:= new `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[v3];
  #L49b46c.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49b472.  v3[v1]:= v5 @kind object;
  #L49b476.  v4.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] := v3 @kind object;
  #L49b47a.  @monitorexit v4
  #L49b47c.  v5:= 1I;
  #L49b47e.  return v5;
  #L49b480.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49b482.  @monitorexit v4
  #L49b484.  throw v5;
  catch `java.lang.Throwable` @[L49b452..L49b484] goto L49b480;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribePublishMulticast` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49b6b4.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49b6b8.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49b6be.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribePublishMulticast` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49b6d0.  v0:= new `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`;
  #L49b6d4.  call `<init>`(v0, v3, v2) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;.<init>:(Lrx/Subscriber;Lrx/internal/operators/OnSubscribePublishMulticast;)V` @kind direct;
  #L49b6da.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49b6e0.  call `setProducer`(v3, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49b6e6.  call temp:= `add`(v2, v0) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.add:(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z` @kind virtual;
  #L49b6ec.  v1:= temp;
  #L49b6ee.  if v1 == 0 then goto L49b70e;
  #L49b6f2.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;.isUnsubscribed:()Z` @kind virtual;
  #L49b6f8.  v3:= temp;
  #L49b6fa.  if v3 == 0 then goto L49b706;
  #L49b6fe.  call `remove`(v2, v0) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.remove:(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V` @kind virtual;
  #L49b704.  goto L49b724;
  #L49b706.  call `drain`(v2) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.drain:()V` @kind virtual;
  #L49b70c.  goto L49b724;
  #L49b70e.  v0:= v2.`rx.internal.operators.OnSubscribePublishMulticast.error` @type ^`java.lang.Throwable` @kind object;
  #L49b712.  if v0 == 0 then goto L49b71e;
  #L49b716.  call `onError`(v3, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49b71c.  goto L49b724;
  #L49b71e.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49b724.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OnSubscribePublishMulticast` v4 @kind this, `boolean` v5 , `boolean` v6 ) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.checkTerminated:(ZZ)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49b4a4.  v0:= 0I;
  #L49b4a6.  if v5 == 0 then goto L49b55c;
  #L49b4aa.  v5:= v4.`rx.internal.operators.OnSubscribePublishMulticast.delayError` @type ^`boolean` @kind boolean;
  #L49b4ae.  v1:= 1I;
  #L49b4b0.  if v5 == 0 then goto L49b4fe;
  #L49b4b4.  if v6 == 0 then goto L49b55c;
  #L49b4b8.  call temp:= `terminate`(v4) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.terminate:()[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;` @kind virtual;
  #L49b4be.  v5:= temp @kind object;
  #L49b4c0.  v6:= v4.`rx.internal.operators.OnSubscribePublishMulticast.error` @type ^`java.lang.Throwable` @kind object;
  #L49b4c4.  if v6 == 0 then goto L49b4e2;
  #L49b4c8.  v2:= length @variable v5;
  #L49b4ca.  if v0 >= v2 then goto L49b4fc;
  #L49b4ce.  v3:= v5[v0] @kind object;
  #L49b4d2.  v3:= v3.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L49b4d6.  call `onError`(v3, v6) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49b4dc.  v0:= v0 + 1;
  #L49b4e0.  goto L49b4ca;
  #L49b4e2.  v6:= length @variable v5;
  #L49b4e4.  if v0 >= v6 then goto L49b4fc;
  #L49b4e8.  v2:= v5[v0] @kind object;
  #L49b4ec.  v2:= v2.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L49b4f0.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49b4f6.  v0:= v0 + 1;
  #L49b4fa.  goto L49b4e4;
  #L49b4fc.  return v1;
  #L49b4fe.  v5:= v4.`rx.internal.operators.OnSubscribePublishMulticast.error` @type ^`java.lang.Throwable` @kind object;
  #L49b502.  if v5 == 0 then goto L49b534;
  #L49b506.  v6:= v4.`rx.internal.operators.OnSubscribePublishMulticast.queue` @type ^`java.util.Queue` @kind object;
  #L49b50a.  call `clear`(v6) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L49b510.  call temp:= `terminate`(v4) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.terminate:()[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;` @kind virtual;
  #L49b516.  v6:= temp @kind object;
  #L49b518.  v2:= length @variable v6;
  #L49b51a.  if v0 >= v2 then goto L49b532;
  #L49b51e.  v3:= v6[v0] @kind object;
  #L49b522.  v3:= v3.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L49b526.  call `onError`(v3, v5) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49b52c.  v0:= v0 + 1;
  #L49b530.  goto L49b51a;
  #L49b532.  return v1;
  #L49b534.  if v6 == 0 then goto L49b55c;
  #L49b538.  call temp:= `terminate`(v4) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.terminate:()[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;` @kind virtual;
  #L49b53e.  v5:= temp @kind object;
  #L49b540.  v6:= length @variable v5;
  #L49b542.  if v0 >= v6 then goto L49b55a;
  #L49b546.  v2:= v5[v0] @kind object;
  #L49b54a.  v2:= v2.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L49b54e.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49b554.  v0:= v0 + 1;
  #L49b558.  goto L49b542;
  #L49b55a.  return v1;
  #L49b55c.  return v0;
}
procedure `void` `drain`(`rx.internal.operators.OnSubscribePublishMulticast` v14 @kind this) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L49b738.  call temp:= `getAndIncrement`(v14) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.getAndIncrement:()I` @kind virtual;
  #L49b73e.  v0:= temp;
  #L49b740.  if v0 == 0 then goto L49b746;
  #L49b744.  return @kind void;
  #L49b746.  v0:= v14.`rx.internal.operators.OnSubscribePublishMulticast.queue` @type ^`java.util.Queue` @kind object;
  #L49b74a.  v1:= 0I;
  #L49b74c.  v2:= 0I;
  #L49b74e.  v3:= 9223372036854775807L;
  #L49b758.  v5:= v14.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b75c.  v6:= length @variable v5;
  #L49b75e.  v7:= length @variable v5;
  #L49b760.  v8:= v3 @kind wide;
  #L49b762.  v3:= 0I;
  #L49b764.  if v3 >= v7 then goto L49b782;
  #L49b768.  v4:= v5[v3] @kind object;
  #L49b76c.  call temp:= `get`(v4) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;.get:()J` @kind virtual;
  #L49b772.  v10:= temp @kind wide;
  #L49b774.  call temp:= `min`(v8, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L49b77a.  v8:= temp @kind wide;
  #L49b77c.  v3:= v3 + 1;
  #L49b780.  goto L49b764;
  #L49b782.  if v6 == 0 then goto L49b832;
  #L49b786.  v3:= 0L;
  #L49b78a.  v6:= v3 @kind wide;
  #L49b78c.  v10:= lcmp(v6, v8);
  #L49b790.  if v10 == 0 then goto L49b7e2;
  #L49b794.  v10:= v14.`rx.internal.operators.OnSubscribePublishMulticast.done` @type ^`boolean` @kind boolean;
  #L49b798.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49b79e.  v11:= temp @kind object;
  #L49b7a0.  if v11 != 0 then goto L49b7a8;
  #L49b7a4.  v12:= 1I;
  #L49b7a6.  goto L49b7aa;
  #L49b7a8.  v12:= 0I;
  #L49b7aa.  call temp:= `checkTerminated`(v14, v10, v12) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.checkTerminated:(ZZ)Z` @kind virtual;
  #L49b7b0.  v10:= temp;
  #L49b7b2.  if v10 == 0 then goto L49b7b8;
  #L49b7b6.  return @kind void;
  #L49b7b8.  if v12 == 0 then goto L49b7be;
  #L49b7bc.  goto L49b7e2;
  #L49b7be.  v10:= length @variable v5;
  #L49b7c0.  v12:= 0I;
  #L49b7c2.  if v12 >= v10 then goto L49b7da;
  #L49b7c6.  v13:= v5[v12] @kind object;
  #L49b7ca.  v13:= v13.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L49b7ce.  call `onNext`(v13, v11) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49b7d4.  v12:= v12 + 1;
  #L49b7d8.  goto L49b7c2;
  #L49b7da.  v10:= 1L;
  #L49b7de.  v6:= v6 + v10 @kind long;
  #L49b7e0.  goto L49b78c;
  #L49b7e2.  v10:= lcmp(v6, v8);
  #L49b7e6.  if v10 != 0 then goto L49b804;
  #L49b7ea.  v8:= v14.`rx.internal.operators.OnSubscribePublishMulticast.done` @type ^`boolean` @kind boolean;
  #L49b7ee.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L49b7f4.  v9:= temp;
  #L49b7f6.  call temp:= `checkTerminated`(v14, v8, v9) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.checkTerminated:(ZZ)Z` @kind virtual;
  #L49b7fc.  v8:= temp;
  #L49b7fe.  if v8 == 0 then goto L49b804;
  #L49b802.  return @kind void;
  #L49b804.  v8:= lcmp(v6, v3);
  #L49b808.  if v8 == 0 then goto L49b832;
  #L49b80c.  v3:= v14.`rx.internal.operators.OnSubscribePublishMulticast.producer` @type ^`rx.Producer` @kind object;
  #L49b810.  if v3 == 0 then goto L49b81a;
  #L49b814.  call `request`(v3, v6) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L49b81a.  v3:= length @variable v5;
  #L49b81c.  v4:= 0I;
  #L49b81e.  if v4 >= v3 then goto L49b832;
  #L49b822.  v8:= v5[v4] @kind object;
  #L49b826.  call temp:= `produced`(v8, v6) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49b82c.  v4:= v4 + 1;
  #L49b830.  goto L49b81e;
  #L49b832.  v2:= -v2 @kind int;
  #L49b834.  call temp:= `addAndGet`(v14, v2) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.addAndGet:(I)I` @kind virtual;
  #L49b83a.  v2:= temp;
  #L49b83c.  if v2 != 0 then goto L49b74e;
  #L49b840.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OnSubscribePublishMulticast` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b570.  v0:= v1.`rx.internal.operators.OnSubscribePublishMulticast.parent` @type ^`rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber` @kind object;
  #L49b574.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$ParentSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49b57a.  v0:= temp;
  #L49b57c.  return v0;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribePublishMulticast` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b854.  v0:= 1I;
  #L49b856.  v1.`rx.internal.operators.OnSubscribePublishMulticast.done` @type ^`boolean` := v0 @kind boolean;
  #L49b85a.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.drain:()V` @kind virtual;
  #L49b860.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribePublishMulticast` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L49b874.  v0.`rx.internal.operators.OnSubscribePublishMulticast.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L49b878.  v1:= 1I;
  #L49b87a.  v0.`rx.internal.operators.OnSubscribePublishMulticast.done` @type ^`boolean` := v1 @kind boolean;
  #L49b87e.  call `drain`(v0) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.drain:()V` @kind virtual;
  #L49b884.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribePublishMulticast` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b898.  v0:= v1.`rx.internal.operators.OnSubscribePublishMulticast.queue` @type ^`java.util.Queue` @kind object;
  #L49b89c.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49b8a2.  v2:= temp;
  #L49b8a4.  if v2 != 0 then goto L49b8ca;
  #L49b8a8.  v2:= v1.`rx.internal.operators.OnSubscribePublishMulticast.parent` @type ^`rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber` @kind object;
  #L49b8ac.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$ParentSubscriber;.unsubscribe:()V` @kind virtual;
  #L49b8b2.  v2:= new `rx.exceptions.MissingBackpressureException`;
  #L49b8b6.  v0:= "Queue full?!" @kind object;
  #L49b8ba.  call `<init>`(v2, v0) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49b8c0.  v1.`rx.internal.operators.OnSubscribePublishMulticast.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L49b8c4.  v2:= 1I;
  #L49b8c6.  v1.`rx.internal.operators.OnSubscribePublishMulticast.done` @type ^`boolean` := v2 @kind boolean;
  #L49b8ca.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.drain:()V` @kind virtual;
  #L49b8d0.  return @kind void;
}
procedure `void` `remove`(`rx.internal.operators.OnSubscribePublishMulticast` v6 @kind this, `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.remove:(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49b8e4.  v0:= v6.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b8e8.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b8ec.  if v0 == v1 then goto L49b978;
  #L49b8f0.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.EMPTY` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b8f4.  if v0 != v1 then goto L49b8fa;
  #L49b8f8.  goto L49b978;
  #L49b8fa.  @monitorenter v6
  #L49b8fc.  v0:= v6.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b900.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b904.  if v0 == v1 then goto L49b96e;
  #L49b908.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.EMPTY` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b90c.  if v0 != v1 then goto L49b912;
  #L49b910.  goto L49b96e;
  #L49b912.  v1:= -1I;
  #L49b914.  v2:= length @variable v0;
  #L49b916.  v3:= 0I;
  #L49b918.  v4:= 0I;
  #L49b91a.  if v4 >= v2 then goto L49b930;
  #L49b91e.  v5:= v0[v4] @kind object;
  #L49b922.  if v5 != v7 then goto L49b92a;
  #L49b926.  v1:= v4;
  #L49b928.  goto L49b930;
  #L49b92a.  v4:= v4 + 1;
  #L49b92e.  goto L49b91a;
  #L49b930.  if v1 >= 0 then goto L49b938;
  #L49b934.  @monitorexit v6
  #L49b936.  return @kind void;
  #L49b938.  v7:= 1I;
  #L49b93a.  if v2 != v7 then goto L49b948;
  #L49b93e.  v7:= `@@rx.internal.operators.OnSubscribePublishMulticast.EMPTY` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b942.  v7:= (`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[]) v7 @kind object;
  #L49b946.  goto L49b966;
  #L49b948.  v4:= v2 + -1;
  #L49b94c.  v4:= new `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[v4];
  #L49b950.  call `arraycopy`(v0, v3, v4, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49b956.  v3:= v1 + 1;
  #L49b95a.  v2:= v2 - v1 @kind int;
  #L49b95c.  v2:= v2 - v7 @kind int;
  #L49b95e.  call `arraycopy`(v0, v3, v4, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49b964.  v7:= v4 @kind object;
  #L49b966.  v6.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] := v7 @kind object;
  #L49b96a.  @monitorexit v6
  #L49b96c.  return @kind void;
  #L49b96e.  @monitorexit v6
  #L49b970.  return @kind void;
  #L49b972.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49b974.  @monitorexit v6
  #L49b976.  throw v7;
  #L49b978.  return @kind void;
  catch `java.lang.Throwable` @[L49b8fc..L49b976] goto L49b972;
}
procedure `void` `setProducer`(`rx.internal.operators.OnSubscribePublishMulticast` v2 @kind this, `rx.Producer` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.setProducer:(Lrx/Producer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49b998.  v2.`rx.internal.operators.OnSubscribePublishMulticast.producer` @type ^`rx.Producer` := v3 @kind object;
  #L49b99c.  v0:= v2.`rx.internal.operators.OnSubscribePublishMulticast.prefetch` @type ^`int`;
  #L49b9a0.  v0:= (`long`) v0 @kind i2l;
  #L49b9a2.  call `request`(v3, v0) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L49b9a8.  return @kind void;
}
procedure `rx.Subscriber` `subscriber`(`rx.internal.operators.OnSubscribePublishMulticast` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.subscriber:()Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b590.  v0:= v1.`rx.internal.operators.OnSubscribePublishMulticast.parent` @type ^`rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber` @kind object;
  #L49b594.  return v0 @kind object;
}
procedure `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] `terminate`(`rx.internal.operators.OnSubscribePublishMulticast` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.terminate:()[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49b5a8.  v0:= v2.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b5ac.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b5b0.  if v0 == v1 then goto L49b5d8;
  #L49b5b4.  @monitorenter v2
  #L49b5b6.  v0:= v2.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b5ba.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b5be.  if v0 == v1 then goto L49b5ce;
  #L49b5c2.  v1:= `@@rx.internal.operators.OnSubscribePublishMulticast.TERMINATED` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] @kind object;
  #L49b5c6.  v1:= (`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[]) v1 @kind object;
  #L49b5ca.  v2.`rx.internal.operators.OnSubscribePublishMulticast.subscribers` @type ^`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer`[] := v1 @kind object;
  #L49b5ce.  @monitorexit v2
  #L49b5d0.  goto L49b5d8;
  #L49b5d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49b5d4.  @monitorexit v2
  #L49b5d6.  throw v0;
  #L49b5d8.  return v0 @kind object;
  catch `java.lang.Throwable` @[L49b5b6..L49b5d6] goto L49b5d2;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OnSubscribePublishMulticast` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b9bc.  v0:= v1.`rx.internal.operators.OnSubscribePublishMulticast.parent` @type ^`rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber` @kind object;
  #L49b9c0.  call `unsubscribe`(v0) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$ParentSubscriber;.unsubscribe:()V` @kind virtual;
  #L49b9c6.  return @kind void;
}
