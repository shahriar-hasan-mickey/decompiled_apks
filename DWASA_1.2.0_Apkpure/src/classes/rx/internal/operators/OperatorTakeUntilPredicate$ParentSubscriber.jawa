record `rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.child` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.done` @AccessFlag PRIVATE;
  `rx.internal.operators.OperatorTakeUntilPredicate` `rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber` v0 @kind this, `rx.internal.operators.OperatorTakeUntilPredicate` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate$ParentSubscriber;.<init>:(Lrx/internal/operators/OperatorTakeUntilPredicate;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aa624.  v0.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.this$0` @type ^`rx.internal.operators.OperatorTakeUntilPredicate` := v1 @kind object;
  #L4aa628.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4aa62e.  v0.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4aa632.  return @kind void;
}
procedure `void` `downstreamRequest`(`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber` v0 @kind this, `long` v1 ) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate$ParentSubscriber;.downstreamRequest:(J)V` @AccessFlag  {
    temp;

  #L4aa644.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate$ParentSubscriber;.request:(J)V` @kind virtual;
  #L4aa64a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate$ParentSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa65c.  v0:= v1.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.done` @type ^`boolean` @kind boolean;
  #L4aa660.  if v0 != 0 then goto L4aa66e;
  #L4aa664.  v0:= v1.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aa668.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aa66e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate$ParentSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa680.  v0:= v1.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.done` @type ^`boolean` @kind boolean;
  #L4aa684.  if v0 != 0 then goto L4aa692;
  #L4aa688.  v0:= v1.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aa68c.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aa692.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate$ParentSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aa6a4.  v0:= v2.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aa6a8.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4aa6ae.  v0:= 1I;
  #L4aa6b0.  v1:= v2.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.this$0` @type ^`rx.internal.operators.OperatorTakeUntilPredicate` @kind object;
  #L4aa6b4.  v1:= v1.`rx.internal.operators.OperatorTakeUntilPredicate.stopPredicate` @type ^`rx.functions.Func1` @kind object;
  #L4aa6b8.  call temp:= `call`(v1, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4aa6be.  v1:= temp @kind object;
  #L4aa6c0.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L4aa6c4.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L4aa6ca.  v3:= temp;
  #L4aa6cc.  if v3 == 0 then goto L4aa6e4;
  #L4aa6d0.  v2.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4aa6d4.  v3:= v2.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aa6d8.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aa6de.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate$ParentSubscriber;.unsubscribe:()V` @kind virtual;
  #L4aa6e4.  return @kind void;
  #L4aa6e6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aa6e8.  v2.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4aa6ec.  v0:= v2.`rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aa6f0.  call `throwOrReport`(v1, v0, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4aa6f6.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate$ParentSubscriber;.unsubscribe:()V` @kind virtual;
  #L4aa6fc.  return @kind void;
  catch `java.lang.Throwable` @[L4aa6b0..L4aa6cc] goto L4aa6e6;
}
