record `rx.internal.operators.OperatorAny$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.OperatorAny$1.done` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorAny$1.hasElements` @AccessFlag ;
  `rx.internal.operators.OperatorAny` `rx.internal.operators.OperatorAny$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorAny$1.val$child` @AccessFlag FINAL_SYNTHETIC;
  `rx.internal.producers.SingleDelayedProducer` `rx.internal.operators.OperatorAny$1.val$producer` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorAny$1` v0 @kind this, `rx.internal.operators.OperatorAny` v1 @kind object, `rx.internal.producers.SingleDelayedProducer` v2 @kind object, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorAny$1;.<init>:(Lrx/internal/operators/OperatorAny;Lrx/internal/producers/SingleDelayedProducer;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49de30.  v0.`rx.internal.operators.OperatorAny$1.this$0` @type ^`rx.internal.operators.OperatorAny` := v1 @kind object;
  #L49de34.  v0.`rx.internal.operators.OperatorAny$1.val$producer` @type ^`rx.internal.producers.SingleDelayedProducer` := v2 @kind object;
  #L49de38.  v0.`rx.internal.operators.OperatorAny$1.val$child` @type ^`rx.Subscriber` := v3 @kind object;
  #L49de3c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49de42.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorAny$1` v2 @kind this) @signature `Lrx/internal/operators/OperatorAny$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49de54.  v0:= v2.`rx.internal.operators.OperatorAny$1.done` @type ^`boolean` @kind boolean;
  #L49de58.  if v0 != 0 then goto L49de9a;
  #L49de5c.  v0:= 1I;
  #L49de5e.  v2.`rx.internal.operators.OperatorAny$1.done` @type ^`boolean` := v0 @kind boolean;
  #L49de62.  v0:= v2.`rx.internal.operators.OperatorAny$1.hasElements` @type ^`boolean` @kind boolean;
  #L49de66.  if v0 == 0 then goto L49de80;
  #L49de6a.  v0:= v2.`rx.internal.operators.OperatorAny$1.val$producer` @type ^`rx.internal.producers.SingleDelayedProducer` @kind object;
  #L49de6e.  v1:= 0I;
  #L49de70.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L49de76.  v1:= temp @kind object;
  #L49de78.  call `setValue`(v0, v1) @signature `Lrx/internal/producers/SingleDelayedProducer;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L49de7e.  goto L49de9a;
  #L49de80.  v0:= v2.`rx.internal.operators.OperatorAny$1.val$producer` @type ^`rx.internal.producers.SingleDelayedProducer` @kind object;
  #L49de84.  v1:= v2.`rx.internal.operators.OperatorAny$1.this$0` @type ^`rx.internal.operators.OperatorAny` @kind object;
  #L49de88.  v1:= v1.`rx.internal.operators.OperatorAny.returnOnEmpty` @type ^`boolean` @kind boolean;
  #L49de8c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L49de92.  v1:= temp @kind object;
  #L49de94.  call `setValue`(v0, v1) @signature `Lrx/internal/producers/SingleDelayedProducer;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L49de9a.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorAny$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorAny$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49deac.  v0:= v1.`rx.internal.operators.OperatorAny$1.done` @type ^`boolean` @kind boolean;
  #L49deb0.  if v0 != 0 then goto L49dec6;
  #L49deb4.  v0:= 1I;
  #L49deb6.  v1.`rx.internal.operators.OperatorAny$1.done` @type ^`boolean` := v0 @kind boolean;
  #L49deba.  v0:= v1.`rx.internal.operators.OperatorAny$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L49debe.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49dec4.  goto L49decc;
  #L49dec6.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49decc.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorAny$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorAny$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49dee0.  v0:= v2.`rx.internal.operators.OperatorAny$1.done` @type ^`boolean` @kind boolean;
  #L49dee4.  if v0 == 0 then goto L49deea;
  #L49dee8.  return @kind void;
  #L49deea.  v0:= 1I;
  #L49deec.  v2.`rx.internal.operators.OperatorAny$1.hasElements` @type ^`boolean` := v0 @kind boolean;
  #L49def0.  v1:= v2.`rx.internal.operators.OperatorAny$1.this$0` @type ^`rx.internal.operators.OperatorAny` @kind object;
  #L49def4.  v1:= v1.`rx.internal.operators.OperatorAny.predicate` @type ^`rx.functions.Func1` @kind object;
  #L49def8.  call temp:= `call`(v1, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49defe.  v1:= temp @kind object;
  #L49df00.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L49df04.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L49df0a.  v3:= temp;
  #L49df0c.  if v3 == 0 then goto L49df36;
  #L49df10.  v2.`rx.internal.operators.OperatorAny$1.done` @type ^`boolean` := v0 @kind boolean;
  #L49df14.  v3:= v2.`rx.internal.operators.OperatorAny$1.val$producer` @type ^`rx.internal.producers.SingleDelayedProducer` @kind object;
  #L49df18.  v1:= v2.`rx.internal.operators.OperatorAny$1.this$0` @type ^`rx.internal.operators.OperatorAny` @kind object;
  #L49df1c.  v1:= v1.`rx.internal.operators.OperatorAny.returnOnEmpty` @type ^`boolean` @kind boolean;
  #L49df20.  v0:= v0 ^~ v1 @kind int;
  #L49df22.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L49df28.  v0:= temp @kind object;
  #L49df2a.  call `setValue`(v3, v0) @signature `Lrx/internal/producers/SingleDelayedProducer;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L49df30.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorAny$1;.unsubscribe:()V` @kind virtual;
  #L49df36.  return @kind void;
  #L49df38.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49df3a.  call `throwOrReport`(v0, v2, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L49df40.  return @kind void;
  catch `java.lang.Throwable` @[L49def0..L49df0c] goto L49df38;
}
