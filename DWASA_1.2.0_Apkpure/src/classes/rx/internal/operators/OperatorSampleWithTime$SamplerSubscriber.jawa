record `rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.subscriber` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.value` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.EMPTY_TOKEN` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a7aa8.  v0:= new `java.lang.Object`;
  #L4a7aac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7ab2.  `@@rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.EMPTY_TOKEN` @type ^`java.lang.Object` := v0 @kind object;
  #L4a7ab6.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a7ac8.  call `<init>`(v2) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a7ace.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a7ad2.  v1:= `@@rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.EMPTY_TOKEN` @type ^`java.lang.Object` @kind object;
  #L4a7ad6.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a7adc.  v2.`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.value` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4a7ae0.  v2.`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.subscriber` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a7ae4.  return @kind void;
}
procedure `void` `emitIfNonEmpty`(`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.emitIfNonEmpty:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4a7b10.  v0:= v2.`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a7b14.  v1:= `@@rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.EMPTY_TOKEN` @type ^`java.lang.Object` @kind object;
  #L4a7b18.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a7b1e.  v0:= temp @kind object;
  #L4a7b20.  v1:= `@@rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.EMPTY_TOKEN` @type ^`java.lang.Object` @kind object;
  #L4a7b24.  if v0 == v1 then goto L4a7b3c;
  #L4a7b28.  v1:= v2.`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.subscriber` @type ^`rx.Subscriber` @kind object;
  #L4a7b2c.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a7b32.  goto L4a7b3c;
  #L4a7b34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a7b36.  call `throwOrReport`(v0, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4a7b3c.  return @kind void;
  catch `java.lang.Throwable` @[L4a7b28..L4a7b32] goto L4a7b34;
}
procedure `void` `call`(`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber` v0 @kind this) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.call:()V` @AccessFlag PUBLIC {
    temp;

  #L4a7af8.  call `emitIfNonEmpty`(v0) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.emitIfNonEmpty:()V` @kind direct;
  #L4a7afe.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7b5c.  call `emitIfNonEmpty`(v1) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.emitIfNonEmpty:()V` @kind direct;
  #L4a7b62.  v0:= v1.`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.subscriber` @type ^`rx.Subscriber` @kind object;
  #L4a7b66.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a7b6c.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a7b72.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7b84.  v0:= v1.`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.subscriber` @type ^`rx.Subscriber` @kind object;
  #L4a7b88.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a7b8e.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a7b94.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7ba8.  v0:= v1.`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a7bac.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4a7bb2.  return @kind void;
}
procedure `void` `onStart`(`rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a7bc4.  v0:= 9223372036854775807L;
  #L4a7bce.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.request:(J)V` @kind virtual;
  #L4a7bd4.  return @kind void;
}
