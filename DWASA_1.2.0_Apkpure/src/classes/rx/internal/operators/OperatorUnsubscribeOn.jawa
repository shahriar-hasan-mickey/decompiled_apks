record `rx.internal.operators.OperatorUnsubscribeOn` @kind class @AccessFlag PUBLIC extends `rx.Observable$Operator` @kind interface {
  `rx.Scheduler` `rx.internal.operators.OperatorUnsubscribeOn.scheduler` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorUnsubscribeOn` v0 @kind this, `rx.Scheduler` v1 @kind object) @signature `Lrx/internal/operators/OperatorUnsubscribeOn;.<init>:(Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4abb20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4abb26.  v0.`rx.internal.operators.OperatorUnsubscribeOn.scheduler` @type ^`rx.Scheduler` := v1 @kind object;
  #L4abb2a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorUnsubscribeOn` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorUnsubscribeOn;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4abacc.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4abad0.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorUnsubscribeOn;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4abad6.  v1:= temp @kind object;
  #L4abad8.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorUnsubscribeOn` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorUnsubscribeOn;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4abaec.  v0:= new `rx.internal.operators.OperatorUnsubscribeOn$1`;
  #L4abaf0.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorUnsubscribeOn$1;.<init>:(Lrx/internal/operators/OperatorUnsubscribeOn;Lrx/Subscriber;)V` @kind direct;
  #L4abaf6.  v1:= new `rx.internal.operators.OperatorUnsubscribeOn$2`;
  #L4abafa.  call `<init>`(v1, v2, v0) @signature `Lrx/internal/operators/OperatorUnsubscribeOn$2;.<init>:(Lrx/internal/operators/OperatorUnsubscribeOn;Lrx/Subscriber;)V` @kind direct;
  #L4abb00.  call temp:= `create`(v1) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4abb06.  v1:= temp @kind object;
  #L4abb08.  call `add`(v3, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4abb0e.  return v0 @kind object;
}
