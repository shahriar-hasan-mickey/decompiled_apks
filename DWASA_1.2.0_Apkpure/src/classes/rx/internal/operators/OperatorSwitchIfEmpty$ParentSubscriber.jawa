record `rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Observable` `rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.alternate` @AccessFlag PRIVATE_FINAL;
  `rx.internal.producers.ProducerArbiter` `rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.arbiter` @AccessFlag PRIVATE_FINAL;
  `rx.Subscriber` `rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.child` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.empty` @AccessFlag PRIVATE;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.serial` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber` v1 @kind this, `rx.Subscriber` v2 @kind object, `rx.subscriptions.SerialSubscription` v3 @kind object, `rx.internal.producers.ProducerArbiter` v4 @kind object, `rx.Observable` v5 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$ParentSubscriber;.<init>:(Lrx/Subscriber;Lrx/subscriptions/SerialSubscription;Lrx/internal/producers/ProducerArbiter;Lrx/Observable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4a9aa0.  call `<init>`(v1) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a9aa6.  v0:= 1I;
  #L4a9aa8.  v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.empty` @type ^`boolean` := v0 @kind boolean;
  #L4a9aac.  v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a9ab0.  v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` := v3 @kind object;
  #L4a9ab4.  v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` := v4 @kind object;
  #L4a9ab8.  v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.alternate` @type ^`rx.Observable` := v5 @kind object;
  #L4a9abc.  return @kind void;
}
procedure `void` `subscribeToAlternate`(`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$ParentSubscriber;.subscribeToAlternate:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4a9b74.  v0:= new `rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber`;
  #L4a9b78.  v1:= v3.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a9b7c.  v2:= v3.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a9b80.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$AlternateSubscriber;.<init>:(Lrx/Subscriber;Lrx/internal/producers/ProducerArbiter;)V` @kind direct;
  #L4a9b86.  v1:= v3.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4a9b8a.  call `set`(v1, v0) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4a9b90.  v1:= v3.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.alternate` @type ^`rx.Observable` @kind object;
  #L4a9b94.  call temp:= `unsafeSubscribe`(v1, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a9b9a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$ParentSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9ad0.  v0:= v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.empty` @type ^`boolean` @kind boolean;
  #L4a9ad4.  if v0 != 0 then goto L4a9ae4;
  #L4a9ad8.  v0:= v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a9adc.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a9ae2.  goto L4a9afa;
  #L4a9ae4.  v0:= v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a9ae8.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a9aee.  v0:= temp;
  #L4a9af0.  if v0 != 0 then goto L4a9afa;
  #L4a9af4.  call `subscribeToAlternate`(v1) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$ParentSubscriber;.subscribeToAlternate:()V` @kind direct;
  #L4a9afa.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$ParentSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9b0c.  v0:= v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a9b10.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a9b16.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$ParentSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9b28.  v0:= 0I;
  #L4a9b2a.  v2.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.empty` @type ^`boolean` := v0 @kind boolean;
  #L4a9b2e.  v0:= v2.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a9b32.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9b38.  v3:= v2.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a9b3c.  v0:= 1L;
  #L4a9b40.  call `produced`(v3, v0) @signature `Lrx/internal/producers/ProducerArbiter;.produced:(J)V` @kind virtual;
  #L4a9b46.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$ParentSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9b58.  v0:= v1.`rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a9b5c.  call `setProducer`(v0, v2) @signature `Lrx/internal/producers/ProducerArbiter;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a9b62.  return @kind void;
}
