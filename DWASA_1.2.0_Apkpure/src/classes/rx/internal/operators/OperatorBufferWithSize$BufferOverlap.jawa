record `rx.internal.operators.OperatorBufferWithSize$BufferOverlap` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorBufferWithSize$BufferOverlap.actual` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorBufferWithSize$BufferOverlap.count` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorBufferWithSize$BufferOverlap.index` @AccessFlag ;
  `long` `rx.internal.operators.OperatorBufferWithSize$BufferOverlap.produced` @AccessFlag ;
  `java.util.ArrayDeque` `rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorBufferWithSize$BufferOverlap.requested` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorBufferWithSize$BufferOverlap.skip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` v0 @kind this, `rx.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.<init>:(Lrx/Subscriber;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49e67c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49e682.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L49e686.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.count` @type ^`int` := v2;
  #L49e68a.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.skip` @type ^`int` := v3;
  #L49e68e.  v1:= new `java.util.ArrayDeque`;
  #L49e692.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L49e698.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L49e69c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49e6a0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49e6a6.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L49e6aa.  v1:= 0L;
  #L49e6ae.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.request:(J)V` @kind virtual;
  #L49e6b4.  return @kind void;
}
procedure `void` `access$300`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.access$300:(Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49e6c8.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.request:(J)V` @kind virtual;
  #L49e6ce.  return @kind void;
}
procedure `void` `access$400`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.access$400:(Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49e6e0.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.request:(J)V` @kind virtual;
  #L49e6e6.  return @kind void;
}
procedure `rx.Producer` `createProducer`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` v1 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.createProducer:()Lrx/Producer;` @AccessFlag  {
    temp;
    v0;

  #L49e660.  v0:= new `rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer`;
  #L49e664.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer;.<init>:(Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;)V` @kind direct;
  #L49e66a.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` v6 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49e6f8.  v0:= v6.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.produced` @type ^`long` @kind wide;
  #L49e6fc.  v2:= 0L;
  #L49e700.  v4:= lcmp(v0, v2);
  #L49e704.  if v4 == 0 then goto L49e760;
  #L49e708.  v2:= v6.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49e70c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49e712.  v2:= temp @kind wide;
  #L49e714.  v4:= lcmp(v0, v2);
  #L49e718.  if v4 <= 0 then goto L49e754;
  #L49e71c.  v2:= v6.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.actual` @type ^`rx.Subscriber` @kind object;
  #L49e720.  v3:= new `rx.exceptions.MissingBackpressureException`;
  #L49e724.  v4:= new `java.lang.StringBuilder`;
  #L49e728.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49e72e.  v5:= "More produced than requested? " @kind object;
  #L49e732.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e738.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e73e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49e744.  v0:= temp @kind object;
  #L49e746.  call `<init>`(v3, v0) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49e74c.  call `onError`(v2, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49e752.  return @kind void;
  #L49e754.  v2:= v6.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49e758.  v0:= -v0 @kind long;
  #L49e75a.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L49e760.  v0:= v6.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49e764.  v1:= v6.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L49e768.  v2:= v6.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.actual` @type ^`rx.Subscriber` @kind object;
  #L49e76c.  call `postCompleteDone`(v0, v1, v2) @signature `Lrx/internal/operators/BackpressureUtils;.postCompleteDone:(Ljava/util/concurrent/atomic/AtomicLong;Ljava/util/Queue;Lrx/Subscriber;)V` @kind static;
  #L49e772.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49e784.  v0:= v1.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L49e788.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L49e78e.  v0:= v1.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.actual` @type ^`rx.Subscriber` @kind object;
  #L49e792.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49e798.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorBufferWithSize$BufferOverlap` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e7ac.  v0:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.index` @type ^`long` @kind wide;
  #L49e7b0.  v2:= 0L;
  #L49e7b4.  v4:= lcmp(v0, v2);
  #L49e7b8.  if v4 != 0 then goto L49e7d4;
  #L49e7bc.  v4:= new `java.util.ArrayList`;
  #L49e7c0.  v5:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.count` @type ^`int`;
  #L49e7c4.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L49e7ca.  v5:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L49e7ce.  call temp:= `offer`(v5, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L49e7d4.  v4:= 1L;
  #L49e7d8.  v0:= v0 + v4 @kind long;
  #L49e7da.  v6:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.skip` @type ^`int`;
  #L49e7de.  v6:= (`long`) v6 @kind i2l;
  #L49e7e0.  v8:= lcmp(v0, v6);
  #L49e7e4.  if v8 != 0 then goto L49e7ee;
  #L49e7e8.  v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.index` @type ^`long` := v2 @kind wide;
  #L49e7ec.  goto L49e7f2;
  #L49e7ee.  v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.index` @type ^`long` := v0 @kind wide;
  #L49e7f2.  v0:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L49e7f6.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L49e7fc.  v0:= temp @kind object;
  #L49e7fe.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49e804.  v1:= temp;
  #L49e806.  if v1 == 0 then goto L49e81e;
  #L49e80a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49e810.  v1:= temp @kind object;
  #L49e812.  v1:= (`java.util.List`) v1 @kind object;
  #L49e816.  call temp:= `add`(v1, v10) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49e81c.  goto L49e7fe;
  #L49e81e.  v10:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L49e822.  call temp:= `peek`(v10) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L49e828.  v10:= temp @kind object;
  #L49e82a.  v10:= (`java.util.List`) v10 @kind object;
  #L49e82e.  if v10 == 0 then goto L49e860;
  #L49e832.  call temp:= `size`(v10) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49e838.  v0:= temp;
  #L49e83a.  v1:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.count` @type ^`int`;
  #L49e83e.  if v0 != v1 then goto L49e860;
  #L49e842.  v0:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.queue` @type ^`java.util.ArrayDeque` @kind object;
  #L49e846.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L49e84c.  v0:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.produced` @type ^`long` @kind wide;
  #L49e850.  v0:= v0 + v4 @kind long;
  #L49e852.  v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.produced` @type ^`long` := v0 @kind wide;
  #L49e856.  v0:= v9.`rx.internal.operators.OperatorBufferWithSize$BufferOverlap.actual` @type ^`rx.Subscriber` @kind object;
  #L49e85a.  call `onNext`(v0, v10) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49e860.  return @kind void;
}
