record `rx.internal.operators.OperatorTimeout$2` @kind class @AccessFlag  extends `rx.internal.operators.OperatorTimeoutBase$TimeoutStub` @kind interface {
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OperatorTimeout$2.val$timeUnit` @AccessFlag FINAL_SYNTHETIC;
  `long` `rx.internal.operators.OperatorTimeout$2.val$timeout` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTimeout$2` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lrx/internal/operators/OperatorTimeout$2;.<init>:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aae3c.  v0.`rx.internal.operators.OperatorTimeout$2.val$timeout` @type ^`long` := v1 @kind wide;
  #L4aae40.  v0.`rx.internal.operators.OperatorTimeout$2.val$timeUnit` @type ^`java.util.concurrent.TimeUnit` := v3 @kind object;
  #L4aae44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aae4a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTimeout$2` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorTimeout$2;.call:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aade8.  v1:= (`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber`) v1 @kind object;
  #L4aadec.  v2:= (`java.lang.Long`) v2 @kind object;
  #L4aadf0.  v4:= (`rx.Scheduler$Worker`) v4 @kind object;
  #L4aadf4.  call temp:= `call`(v0, v1, v2, v3, v4) @signature `Lrx/internal/operators/OperatorTimeout$2;.call:(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Ljava/lang/Object;Lrx/Scheduler$Worker;)Lrx/Subscription;` @kind virtual;
  #L4aadfa.  v1:= temp @kind object;
  #L4aadfc.  return v1 @kind object;
}
procedure `rx.Subscription` `call`(`rx.internal.operators.OperatorTimeout$2` v1 @kind this, `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v2 @kind object, `java.lang.Long` v3 @kind object, `java.lang.Object` v4 @kind object, `rx.Scheduler$Worker` v5 @kind object) @signature `Lrx/internal/operators/OperatorTimeout$2;.call:(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Ljava/lang/Object;Lrx/Scheduler$Worker;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aae10.  v4:= new `rx.internal.operators.OperatorTimeout$2$1`;
  #L4aae14.  call `<init>`(v4, v1, v2, v3) @signature `Lrx/internal/operators/OperatorTimeout$2$1;.<init>:(Lrx/internal/operators/OperatorTimeout$2;Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;)V` @kind direct;
  #L4aae1a.  v2:= v1.`rx.internal.operators.OperatorTimeout$2.val$timeout` @type ^`long` @kind wide;
  #L4aae1e.  v0:= v1.`rx.internal.operators.OperatorTimeout$2.val$timeUnit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4aae22.  call temp:= `schedule`(v5, v4, v2, v0) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4aae28.  v2:= temp @kind object;
  #L4aae2a.  return v2 @kind object;
}
