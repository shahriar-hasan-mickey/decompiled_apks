record `rx.internal.operators.CompletableOnSubscribeMergeArray$1` @kind class @AccessFlag  extends `rx.CompletableSubscriber` @kind interface {
  `rx.internal.operators.CompletableOnSubscribeMergeArray` `rx.internal.operators.CompletableOnSubscribeMergeArray$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$once` @AccessFlag FINAL_SYNTHETIC;
  `rx.CompletableSubscriber` `rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$s` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.CompositeSubscription` `rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$set` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$wip` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.CompletableOnSubscribeMergeArray$1` v0 @kind this, `rx.internal.operators.CompletableOnSubscribeMergeArray` v1 @kind object, `rx.subscriptions.CompositeSubscription` v2 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v3 @kind object, `rx.CompletableSubscriber` v4 @kind object, `java.util.concurrent.atomic.AtomicInteger` v5 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeArray$1;.<init>:(Lrx/internal/operators/CompletableOnSubscribeMergeArray;Lrx/subscriptions/CompositeSubscription;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/CompletableSubscriber;Ljava/util/concurrent/atomic/AtomicInteger;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4950cc.  v0.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.this$0` @type ^`rx.internal.operators.CompletableOnSubscribeMergeArray` := v1 @kind object;
  #L4950d0.  v0.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$set` @type ^`rx.subscriptions.CompositeSubscription` := v2 @kind object;
  #L4950d4.  v0.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L4950d8.  v0.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$s` @type ^`rx.CompletableSubscriber` := v4 @kind object;
  #L4950dc.  v0.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v5 @kind object;
  #L4950e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4950e6.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.CompletableOnSubscribeMergeArray$1` v3 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeArray$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4950f8.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4950fc.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L495102.  v0:= temp;
  #L495104.  if v0 != 0 then goto L495126;
  #L495108.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49510c.  v1:= 0I;
  #L49510e.  v2:= 1I;
  #L495110.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L495116.  v0:= temp;
  #L495118.  if v0 == 0 then goto L495126;
  #L49511c.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L495120.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L495126.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.CompletableOnSubscribeMergeArray$1` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeArray$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L495138.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$set` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49513c.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L495142.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L495146.  v1:= 0I;
  #L495148.  v2:= 1I;
  #L49514a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L495150.  v0:= temp;
  #L495152.  if v0 == 0 then goto L495162;
  #L495156.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L49515a.  call `onError`(v0, v4) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L495160.  goto L495168;
  #L495162.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L495168.  return @kind void;
}
procedure `void` `onSubscribe`(`rx.internal.operators.CompletableOnSubscribeMergeArray$1` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeArray$1;.onSubscribe:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49517c.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeMergeArray$1.val$set` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L495180.  call `add`(v0, v2) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L495186.  return @kind void;
}
