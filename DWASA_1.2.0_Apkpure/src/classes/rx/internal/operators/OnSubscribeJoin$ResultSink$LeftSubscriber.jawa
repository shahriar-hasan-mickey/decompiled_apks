record `rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OnSubscribeJoin$ResultSink` `rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber` v0 @kind this, `rx.internal.operators.OnSubscribeJoin$ResultSink` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$LeftSubscriber;.<init>:(Lrx/internal/operators/OnSubscribeJoin$ResultSink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49a4b8.  v0.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` := v1 @kind object;
  #L49a4bc.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49a4c2.  return @kind void;
}
procedure `void` `expire`(`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber` v2 @kind this, `int` v3 , `rx.Subscription` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$LeftSubscriber;.expire:(ILrx/Subscription;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L49a4d4.  v0:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a4d8.  @monitorenter v0
  #L49a4da.  v1:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a4de.  call temp:= `leftMap`(v1) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink;.leftMap:()Ljava/util/HashMap;` @kind virtual;
  #L49a4e4.  v1:= temp @kind object;
  #L49a4e6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49a4ec.  v3:= temp @kind object;
  #L49a4ee.  call temp:= `remove`(v1, v3) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49a4f4.  v3:= temp @kind object;
  #L49a4f6.  if v3 == 0 then goto L49a522;
  #L49a4fa.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a4fe.  call temp:= `leftMap`(v3) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink;.leftMap:()Ljava/util/HashMap;` @kind virtual;
  #L49a504.  v3:= temp @kind object;
  #L49a506.  call temp:= `isEmpty`(v3) @signature `Ljava/util/HashMap;.isEmpty:()Z` @kind virtual;
  #L49a50c.  v3:= temp;
  #L49a50e.  if v3 == 0 then goto L49a522;
  #L49a512.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a516.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.leftDone` @type ^`boolean` @kind boolean;
  #L49a51a.  if v3 == 0 then goto L49a522;
  #L49a51e.  v3:= 1I;
  #L49a520.  goto L49a524;
  #L49a522.  v3:= 0I;
  #L49a524.  @monitorexit v0
  #L49a526.  if v3 == 0 then goto L49a548;
  #L49a52a.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a52e.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a532.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49a538.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a53c.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a540.  call `unsubscribe`(v3) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L49a546.  goto L49a556;
  #L49a548.  v3:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a54c.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49a550.  call `remove`(v3, v4) @signature `Lrx/subscriptions/CompositeSubscription;.remove:(Lrx/Subscription;)V` @kind virtual;
  #L49a556.  return @kind void;
  #L49a558.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a55a.  @monitorexit v0
  #L49a55c.  throw v3;
  catch `java.lang.Throwable` @[L49a4da..L49a526] goto L49a558;
  catch `java.lang.Throwable` @[L49a55a..L49a55c] goto L49a558;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$LeftSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49a584.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a588.  @monitorenter v0
  #L49a58a.  v1:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a58e.  v2:= 1I;
  #L49a590.  v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.leftDone` @type ^`boolean` := v2 @kind boolean;
  #L49a594.  v1:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a598.  v1:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightDone` @type ^`boolean` @kind boolean;
  #L49a59c.  if v1 != 0 then goto L49a5bc;
  #L49a5a0.  v1:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a5a4.  call temp:= `leftMap`(v1) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink;.leftMap:()Ljava/util/HashMap;` @kind virtual;
  #L49a5aa.  v1:= temp @kind object;
  #L49a5ac.  call temp:= `isEmpty`(v1) @signature `Ljava/util/HashMap;.isEmpty:()Z` @kind virtual;
  #L49a5b2.  v1:= temp;
  #L49a5b4.  if v1 == 0 then goto L49a5ba;
  #L49a5b8.  goto L49a5bc;
  #L49a5ba.  v2:= 0I;
  #L49a5bc.  @monitorexit v0
  #L49a5be.  if v2 == 0 then goto L49a5e0;
  #L49a5c2.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a5c6.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a5ca.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49a5d0.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a5d4.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a5d8.  call `unsubscribe`(v0) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L49a5de.  goto L49a5ee;
  #L49a5e0.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a5e4.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49a5e8.  call `remove`(v0, v3) @signature `Lrx/subscriptions/CompositeSubscription;.remove:(Lrx/Subscription;)V` @kind virtual;
  #L49a5ee.  return @kind void;
  #L49a5f0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a5f2.  @monitorexit v0
  #L49a5f4.  throw v1;
  catch `java.lang.Throwable` @[L49a58a..L49a5be] goto L49a5f0;
  catch `java.lang.Throwable` @[L49a5f2..L49a5f4] goto L49a5f0;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$LeftSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a61c.  v0:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a620.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a624.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49a62a.  v2:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a62e.  v2:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a632.  call `unsubscribe`(v2) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L49a638.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$LeftSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49a64c.  v0:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a650.  @monitorenter v0
  #L49a652.  v1:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a656.  v2:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.leftId` @type ^`int`;
  #L49a65a.  v3:= v2 + 1;
  #L49a65e.  v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.leftId` @type ^`int` := v3;
  #L49a662.  v1:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a666.  call temp:= `leftMap`(v1) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink;.leftMap:()Ljava/util/HashMap;` @kind virtual;
  #L49a66c.  v1:= temp @kind object;
  #L49a66e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49a674.  v3:= temp @kind object;
  #L49a676.  call temp:= `put`(v1, v3, v7) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49a67c.  v1:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a680.  v1:= v1.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightId` @type ^`int`;
  #L49a684.  @monitorexit v0
  #L49a686.  v0:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a68a.  v0:= v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.this$0` @type ^`rx.internal.operators.OnSubscribeJoin` @kind object;
  #L49a68e.  v0:= v0.`rx.internal.operators.OnSubscribeJoin.leftDurationSelector` @type ^`rx.functions.Func1` @kind object;
  #L49a692.  call temp:= `call`(v0, v7) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49a698.  v0:= temp @kind object;
  #L49a69a.  v0:= (`rx.Observable`) v0 @kind object;
  #L49a69e.  v3:= new `rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber`;
  #L49a6a2.  call `<init>`(v3, v6, v2) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber;.<init>:(Lrx/internal/operators/OnSubscribeJoin$ResultSink$LeftSubscriber;I)V` @kind direct;
  #L49a6a8.  v2:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a6ac.  v2:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49a6b0.  call `add`(v2, v3) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49a6b6.  call temp:= `unsafeSubscribe`(v0, v3) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49a6bc.  v0:= new `java.util.ArrayList`;
  #L49a6c0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49a6c6.  v2:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a6ca.  @monitorenter v2
  #L49a6cc.  v3:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a6d0.  v3:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightMap` @type ^`java.util.Map` @kind object;
  #L49a6d4.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L49a6da.  v3:= temp @kind object;
  #L49a6dc.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49a6e2.  v3:= temp @kind object;
  #L49a6e4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49a6ea.  v4:= temp;
  #L49a6ec.  if v4 == 0 then goto L49a724;
  #L49a6f0.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49a6f6.  v4:= temp @kind object;
  #L49a6f8.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L49a6fc.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L49a702.  v5:= temp @kind object;
  #L49a704.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L49a708.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L49a70e.  v5:= temp;
  #L49a710.  if v5 >= v1 then goto L49a6e4;
  #L49a714.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L49a71a.  v4:= temp @kind object;
  #L49a71c.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49a722.  goto L49a6e4;
  #L49a724.  @monitorexit v2
  #L49a726.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49a72c.  v0:= temp @kind object;
  #L49a72e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49a734.  v1:= temp;
  #L49a736.  if v1 == 0 then goto L49a774;
  #L49a73a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49a740.  v1:= temp @kind object;
  #L49a742.  v2:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a746.  v2:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink.this$0` @type ^`rx.internal.operators.OnSubscribeJoin` @kind object;
  #L49a74a.  v2:= v2.`rx.internal.operators.OnSubscribeJoin.resultSelector` @type ^`rx.functions.Func2` @kind object;
  #L49a74e.  call temp:= `call`(v2, v7, v1) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49a754.  v1:= temp @kind object;
  #L49a756.  v2:= v6.`rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber.this$1` @type ^`rx.internal.operators.OnSubscribeJoin$ResultSink` @kind object;
  #L49a75a.  v2:= v2.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a75e.  call `onNext`(v2, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49a764.  goto L49a72e;
  #L49a766.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a768.  @monitorexit v2
  #L49a76a.  throw v7;
  #L49a76c.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a76e.  call `throwOrReport`(v7, v6) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49a774.  return @kind void;
  #L49a776.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a778.  @monitorexit v0
  #L49a77a.  goto L49a77e;
  #L49a77c.  throw v7;
  #L49a77e.  goto L49a77c;
  catch `java.lang.Throwable` @[L49a652..L49a686] goto L49a776;
  catch `java.lang.Throwable` @[L49a686..L49a6cc] goto L49a76c;
  catch `java.lang.Throwable` @[L49a6cc..L49a726] goto L49a766;
  catch `java.lang.Throwable` @[L49a726..L49a764] goto L49a76c;
  catch `java.lang.Throwable` @[L49a768..L49a76a] goto L49a766;
  catch `java.lang.Throwable` @[L49a76a..L49a76c] goto L49a76c;
  catch `java.lang.Throwable` @[L49a778..L49a77a] goto L49a776;
}
