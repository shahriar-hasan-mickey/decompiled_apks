record `rx.internal.operators.OperatorBufferWithTime$ExactSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.child` @AccessFlag FINAL;
  `java.util.List` `rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.done` @AccessFlag ;
  `rx.Scheduler$Worker` `rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.inner` @AccessFlag FINAL;
  `rx.internal.operators.OperatorBufferWithTime` `rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber` v0 @kind this, `rx.internal.operators.OperatorBufferWithTime` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.<init>:(Lrx/internal/operators/OperatorBufferWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49f030.  v0.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` := v1 @kind object;
  #L49f034.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49f03a.  v0.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L49f03e.  v0.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.inner` @type ^`rx.Scheduler$Worker` := v3 @kind object;
  #L49f042.  v1:= new `java.util.ArrayList`;
  #L49f046.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49f04c.  v0.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` := v1 @kind object;
  #L49f050.  return @kind void;
}
procedure `void` `emit`(`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49f064.  @monitorenter v2
  #L49f066.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f06a.  if v0 == 0 then goto L49f072;
  #L49f06e.  @monitorexit v2
  #L49f070.  return @kind void;
  #L49f072.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` @kind object;
  #L49f076.  v1:= new `java.util.ArrayList`;
  #L49f07a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49f080.  v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` := v1 @kind object;
  #L49f084.  @monitorexit v2
  #L49f086.  v1:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f08a.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49f090.  goto L49f09a;
  #L49f092.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f094.  call `throwOrReport`(v0, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49f09a.  return @kind void;
  #L49f09c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f09e.  @monitorexit v2
  #L49f0a0.  throw v0;
  catch `java.lang.Throwable` @[L49f066..L49f086] goto L49f09c;
  catch `java.lang.Throwable` @[L49f086..L49f090] goto L49f092;
  catch `java.lang.Throwable` @[L49f09e..L49f0a0] goto L49f09c;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49f0d4.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.inner` @type ^`rx.Scheduler$Worker` @kind object;
  #L49f0d8.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L49f0de.  @monitorenter v2
  #L49f0e0.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f0e4.  if v0 == 0 then goto L49f0ec;
  #L49f0e8.  @monitorexit v2
  #L49f0ea.  return @kind void;
  #L49f0ec.  v0:= 1I;
  #L49f0ee.  v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49f0f2.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` @kind object;
  #L49f0f6.  v1:= 0I;
  #L49f0f8.  v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` := v1 @kind object;
  #L49f0fc.  @monitorexit v2
  #L49f0fe.  v1:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f102.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49f108.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f10c.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49f112.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.unsubscribe:()V` @kind virtual;
  #L49f118.  return @kind void;
  #L49f11a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f11c.  @monitorexit v2
  #L49f11e.  throw v0;
  #L49f120.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f122.  v1:= v2.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f126.  call `throwOrReport`(v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49f12c.  return @kind void;
  catch `java.lang.Throwable` @[L49f0d4..L49f0e0] goto L49f120;
  catch `java.lang.Throwable` @[L49f0e0..L49f0fe] goto L49f11a;
  catch `java.lang.Throwable` @[L49f0fe..L49f108] goto L49f120;
  catch `java.lang.Throwable` @[L49f11c..L49f11e] goto L49f11a;
  catch `java.lang.Throwable` @[L49f11e..L49f120] goto L49f120;
}
procedure `void` `onError`(`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f170.  @monitorenter v1
  #L49f172.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f176.  if v0 == 0 then goto L49f17e;
  #L49f17a.  @monitorexit v1
  #L49f17c.  return @kind void;
  #L49f17e.  v0:= 1I;
  #L49f180.  v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49f184.  v0:= 0I;
  #L49f186.  v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` := v0 @kind object;
  #L49f18a.  @monitorexit v1
  #L49f18c.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f190.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49f196.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.unsubscribe:()V` @kind virtual;
  #L49f19c.  return @kind void;
  #L49f19e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f1a0.  @monitorexit v1
  #L49f1a2.  throw v2;
  catch `java.lang.Throwable` @[L49f172..L49f18c] goto L49f19e;
  catch `java.lang.Throwable` @[L49f1a0..L49f1a2] goto L49f19e;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f1c8.  @monitorenter v1
  #L49f1ca.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f1ce.  if v0 == 0 then goto L49f1d6;
  #L49f1d2.  @monitorexit v1
  #L49f1d4.  return @kind void;
  #L49f1d6.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` @kind object;
  #L49f1da.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49f1e0.  v2:= v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` @kind object;
  #L49f1e4.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49f1ea.  v2:= temp;
  #L49f1ec.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f1f0.  v0:= v0.`rx.internal.operators.OperatorBufferWithTime.count` @type ^`int`;
  #L49f1f4.  if v2 != v0 then goto L49f20c;
  #L49f1f8.  v2:= v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` @kind object;
  #L49f1fc.  v0:= new `java.util.ArrayList`;
  #L49f200.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49f206.  v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.chunk` @type ^`java.util.List` := v0 @kind object;
  #L49f20a.  goto L49f20e;
  #L49f20c.  v2:= 0I;
  #L49f20e.  @monitorexit v1
  #L49f210.  if v2 == 0 then goto L49f21e;
  #L49f214.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f218.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49f21e.  return @kind void;
  #L49f220.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f222.  @monitorexit v1
  #L49f224.  throw v2;
  catch `java.lang.Throwable` @[L49f1ca..L49f210] goto L49f220;
  catch `java.lang.Throwable` @[L49f222..L49f224] goto L49f220;
}
procedure `void` `scheduleExact`(`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber` v7 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.scheduleExact:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49f24c.  v0:= v7.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.inner` @type ^`rx.Scheduler$Worker` @kind object;
  #L49f250.  v1:= new `rx.internal.operators.OperatorBufferWithTime$ExactSubscriber$1`;
  #L49f254.  call `<init>`(v1, v7) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber$1;.<init>:(Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;)V` @kind direct;
  #L49f25a.  v2:= v7.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f25e.  v2:= v2.`rx.internal.operators.OperatorBufferWithTime.timespan` @type ^`long` @kind wide;
  #L49f262.  v4:= v7.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f266.  v4:= v4.`rx.internal.operators.OperatorBufferWithTime.timespan` @type ^`long` @kind wide;
  #L49f26a.  v6:= v7.`rx.internal.operators.OperatorBufferWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f26e.  v6:= v6.`rx.internal.operators.OperatorBufferWithTime.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49f272.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lrx/Scheduler$Worker;.schedulePeriodically:(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L49f278.  return @kind void;
}
