record `rx.internal.operators.OperatorSampleWithObservable$2` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OperatorSampleWithObservable` `rx.internal.operators.OperatorSampleWithObservable$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.observers.SerializedSubscriber` `rx.internal.operators.OperatorSampleWithObservable$2.val$s` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorSampleWithObservable$2.val$samplerSub` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorSampleWithObservable$2.val$value` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSampleWithObservable$2` v0 @kind this, `rx.internal.operators.OperatorSampleWithObservable` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object, `rx.observers.SerializedSubscriber` v3 @kind object, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable$2;.<init>:(Lrx/internal/operators/OperatorSampleWithObservable;Ljava/util/concurrent/atomic/AtomicReference;Lrx/observers/SerializedSubscriber;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a7948.  v0.`rx.internal.operators.OperatorSampleWithObservable$2.this$0` @type ^`rx.internal.operators.OperatorSampleWithObservable` := v1 @kind object;
  #L4a794c.  v0.`rx.internal.operators.OperatorSampleWithObservable$2.val$value` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4a7950.  v0.`rx.internal.operators.OperatorSampleWithObservable$2.val$s` @type ^`rx.observers.SerializedSubscriber` := v3 @kind object;
  #L4a7954.  v0.`rx.internal.operators.OperatorSampleWithObservable$2.val$samplerSub` @type ^`rx.Subscriber` := v4 @kind object;
  #L4a7958.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a795e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSampleWithObservable$2` v2 @kind this) @signature `Lrx/internal/operators/OperatorSampleWithObservable$2;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a7970.  v0:= v2.`rx.internal.operators.OperatorSampleWithObservable$2.val$samplerSub` @type ^`rx.Subscriber` @kind object;
  #L4a7974.  v1:= 0I;
  #L4a7976.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a797c.  v0:= v2.`rx.internal.operators.OperatorSampleWithObservable$2.val$s` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4a7980.  call `onCompleted`(v0) @signature `Lrx/observers/SerializedSubscriber;.onCompleted:()V` @kind virtual;
  #L4a7986.  v0:= v2.`rx.internal.operators.OperatorSampleWithObservable$2.val$samplerSub` @type ^`rx.Subscriber` @kind object;
  #L4a798a.  call `unsubscribe`(v0) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4a7990.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSampleWithObservable$2` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable$2;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a79a4.  v0:= v1.`rx.internal.operators.OperatorSampleWithObservable$2.val$s` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4a79a8.  call `onError`(v0, v2) @signature `Lrx/observers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a79ae.  v2:= v1.`rx.internal.operators.OperatorSampleWithObservable$2.val$samplerSub` @type ^`rx.Subscriber` @kind object;
  #L4a79b2.  call `unsubscribe`(v2) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4a79b8.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSampleWithObservable$2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable$2;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a79cc.  v0:= v1.`rx.internal.operators.OperatorSampleWithObservable$2.val$value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a79d0.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4a79d6.  return @kind void;
}
