record `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.child` @AccessFlag FINAL;
  `java.util.List` `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.chunks` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.done` @AccessFlag ;
  `rx.Scheduler$Worker` `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.inner` @AccessFlag FINAL;
  `rx.internal.operators.OperatorBufferWithTime` `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber` v0 @kind this, `rx.internal.operators.OperatorBufferWithTime` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.<init>:(Lrx/internal/operators/OperatorBufferWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49f304.  v0.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` := v1 @kind object;
  #L49f308.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49f30e.  v0.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L49f312.  v0.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.inner` @type ^`rx.Scheduler$Worker` := v3 @kind object;
  #L49f316.  v1:= new `java.util.LinkedList`;
  #L49f31a.  call `<init>`(v1) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L49f320.  v0.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.chunks` @type ^`java.util.List` := v1 @kind object;
  #L49f324.  return @kind void;
}
procedure `void` `emitChunk`(`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.emitChunk:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49f338.  @monitorenter v2
  #L49f33a.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f33e.  if v0 == 0 then goto L49f346;
  #L49f342.  @monitorexit v2
  #L49f344.  return @kind void;
  #L49f346.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49f34a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49f350.  v0:= temp @kind object;
  #L49f352.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49f358.  v1:= temp;
  #L49f35a.  if v1 == 0 then goto L49f378;
  #L49f35e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49f364.  v1:= temp @kind object;
  #L49f366.  v1:= (`java.util.List`) v1 @kind object;
  #L49f36a.  if v1 != v3 then goto L49f352;
  #L49f36e.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L49f374.  v0:= 1I;
  #L49f376.  goto L49f37a;
  #L49f378.  v0:= 0I;
  #L49f37a.  @monitorexit v2
  #L49f37c.  if v0 == 0 then goto L49f394;
  #L49f380.  v0:= v2.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f384.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49f38a.  goto L49f394;
  #L49f38c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f38e.  call `throwOrReport`(v3, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49f394.  return @kind void;
  #L49f396.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f398.  @monitorexit v2
  #L49f39a.  goto L49f39e;
  #L49f39c.  throw v3;
  #L49f39e.  goto L49f39c;
  catch `java.lang.Throwable` @[L49f33a..L49f37c] goto L49f396;
  catch `java.lang.Throwable` @[L49f380..L49f38a] goto L49f38c;
  catch `java.lang.Throwable` @[L49f398..L49f39a] goto L49f396;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49f3d0.  @monitorenter v3
  #L49f3d2.  v0:= v3.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f3d6.  if v0 == 0 then goto L49f3de;
  #L49f3da.  @monitorexit v3
  #L49f3dc.  return @kind void;
  #L49f3de.  v0:= 1I;
  #L49f3e0.  v3.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49f3e4.  v0:= new `java.util.LinkedList`;
  #L49f3e8.  v1:= v3.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49f3ec.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L49f3f2.  v1:= v3.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49f3f6.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L49f3fc.  @monitorexit v3
  #L49f3fe.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49f404.  v0:= temp @kind object;
  #L49f406.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49f40c.  v1:= temp;
  #L49f40e.  if v1 == 0 then goto L49f42a;
  #L49f412.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49f418.  v1:= temp @kind object;
  #L49f41a.  v1:= (`java.util.List`) v1 @kind object;
  #L49f41e.  v2:= v3.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f422.  call `onNext`(v2, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49f428.  goto L49f406;
  #L49f42a.  v0:= v3.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f42e.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49f434.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.unsubscribe:()V` @kind virtual;
  #L49f43a.  return @kind void;
  #L49f43c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f43e.  @monitorexit v3
  #L49f440.  throw v0;
  #L49f442.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f444.  v1:= v3.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f448.  call `throwOrReport`(v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49f44e.  return @kind void;
  catch `java.lang.Throwable` @[L49f3d0..L49f3d2] goto L49f442;
  catch `java.lang.Throwable` @[L49f3d2..L49f3fe] goto L49f43c;
  catch `java.lang.Throwable` @[L49f3fe..L49f428] goto L49f442;
  catch `java.lang.Throwable` @[L49f43e..L49f440] goto L49f43c;
  catch `java.lang.Throwable` @[L49f440..L49f442] goto L49f442;
}
procedure `void` `onError`(`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f490.  @monitorenter v1
  #L49f492.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f496.  if v0 == 0 then goto L49f49e;
  #L49f49a.  @monitorexit v1
  #L49f49c.  return @kind void;
  #L49f49e.  v0:= 1I;
  #L49f4a0.  v1.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49f4a4.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49f4a8.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L49f4ae.  @monitorexit v1
  #L49f4b0.  v0:= v1.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f4b4.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49f4ba.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.unsubscribe:()V` @kind virtual;
  #L49f4c0.  return @kind void;
  #L49f4c2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f4c4.  @monitorexit v1
  #L49f4c6.  throw v2;
  catch `java.lang.Throwable` @[L49f492..L49f4b0] goto L49f4c2;
  catch `java.lang.Throwable` @[L49f4c4..L49f4c6] goto L49f4c2;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49f4ec.  @monitorenter v5
  #L49f4ee.  v0:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f4f2.  if v0 == 0 then goto L49f4fa;
  #L49f4f6.  @monitorexit v5
  #L49f4f8.  return @kind void;
  #L49f4fa.  v0:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49f4fe.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49f504.  v0:= temp @kind object;
  #L49f506.  v1:= 0I;
  #L49f508.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49f50e.  v2:= temp;
  #L49f510.  if v2 == 0 then goto L49f556;
  #L49f514.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49f51a.  v2:= temp @kind object;
  #L49f51c.  v2:= (`java.util.List`) v2 @kind object;
  #L49f520.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49f526.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49f52c.  v3:= temp;
  #L49f52e.  v4:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f532.  v4:= v4.`rx.internal.operators.OperatorBufferWithTime.count` @type ^`int`;
  #L49f536.  if v3 != v4 then goto L49f508;
  #L49f53a.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L49f540.  if v1 != 0 then goto L49f54e;
  #L49f544.  v1:= new `java.util.LinkedList`;
  #L49f548.  call `<init>`(v1) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L49f54e.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49f554.  goto L49f508;
  #L49f556.  @monitorexit v5
  #L49f558.  if v1 == 0 then goto L49f588;
  #L49f55c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49f562.  v6:= temp @kind object;
  #L49f564.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49f56a.  v0:= temp;
  #L49f56c.  if v0 == 0 then goto L49f588;
  #L49f570.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49f576.  v0:= temp @kind object;
  #L49f578.  v0:= (`java.util.List`) v0 @kind object;
  #L49f57c.  v1:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49f580.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49f586.  goto L49f564;
  #L49f588.  return @kind void;
  #L49f58a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f58c.  @monitorexit v5
  #L49f58e.  goto L49f592;
  #L49f590.  throw v6;
  #L49f592.  goto L49f590;
  catch `java.lang.Throwable` @[L49f4ee..L49f558] goto L49f58a;
  catch `java.lang.Throwable` @[L49f58c..L49f58e] goto L49f58a;
}
procedure `void` `scheduleChunk`(`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber` v7 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.scheduleChunk:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49f5b8.  v0:= v7.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.inner` @type ^`rx.Scheduler$Worker` @kind object;
  #L49f5bc.  v1:= new `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber$1`;
  #L49f5c0.  call `<init>`(v1, v7) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber$1;.<init>:(Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;)V` @kind direct;
  #L49f5c6.  v2:= v7.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f5ca.  v2:= v2.`rx.internal.operators.OperatorBufferWithTime.timeshift` @type ^`long` @kind wide;
  #L49f5ce.  v4:= v7.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f5d2.  v4:= v4.`rx.internal.operators.OperatorBufferWithTime.timeshift` @type ^`long` @kind wide;
  #L49f5d6.  v6:= v7.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f5da.  v6:= v6.`rx.internal.operators.OperatorBufferWithTime.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49f5de.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lrx/Scheduler$Worker;.schedulePeriodically:(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L49f5e4.  return @kind void;
}
procedure `void` `startNewChunk`(`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber` v5 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.startNewChunk:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49f5f8.  v0:= new `java.util.ArrayList`;
  #L49f5fc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49f602.  @monitorenter v5
  #L49f604.  v1:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f608.  if v1 == 0 then goto L49f610;
  #L49f60c.  @monitorexit v5
  #L49f60e.  return @kind void;
  #L49f610.  v1:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49f614.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49f61a.  @monitorexit v5
  #L49f61c.  v1:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.inner` @type ^`rx.Scheduler$Worker` @kind object;
  #L49f620.  v2:= new `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber$2`;
  #L49f624.  call `<init>`(v2, v5, v0) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber$2;.<init>:(Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;Ljava/util/List;)V` @kind direct;
  #L49f62a.  v0:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f62e.  v3:= v0.`rx.internal.operators.OperatorBufferWithTime.timespan` @type ^`long` @kind wide;
  #L49f632.  v0:= v5.`rx.internal.operators.OperatorBufferWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithTime` @kind object;
  #L49f636.  v0:= v0.`rx.internal.operators.OperatorBufferWithTime.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49f63a.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L49f640.  return @kind void;
  #L49f642.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f644.  @monitorexit v5
  #L49f646.  throw v0;
  catch `java.lang.Throwable` @[L49f604..L49f61c] goto L49f642;
  catch `java.lang.Throwable` @[L49f644..L49f646] goto L49f642;
}
