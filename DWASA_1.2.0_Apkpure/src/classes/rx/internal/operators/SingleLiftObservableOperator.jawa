record `rx.internal.operators.SingleLiftObservableOperator` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Observable$Operator` `rx.internal.operators.SingleLiftObservableOperator.lift` @AccessFlag FINAL;
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleLiftObservableOperator.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleLiftObservableOperator` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object, `rx.Observable$Operator` v2 @kind object) @signature `Lrx/internal/operators/SingleLiftObservableOperator;.<init>:(Lrx/Single$OnSubscribe;Lrx/Observable$Operator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4afb0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4afb12.  v0.`rx.internal.operators.SingleLiftObservableOperator.source` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L4afb16.  v0.`rx.internal.operators.SingleLiftObservableOperator.lift` @type ^`rx.Observable$Operator` := v2 @kind object;
  #L4afb1a.  return @kind void;
}
procedure `rx.SingleSubscriber` `wrap`(`rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/SingleLiftObservableOperator;.wrap:(Lrx/Subscriber;)Lrx/SingleSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4afae8.  v0:= new `rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle`;
  #L4afaec.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/SingleLiftObservableOperator$WrapSubscriberIntoSingle;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4afaf2.  call `add`(v1, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4afaf8.  return v0 @kind object;
}
procedure `void` `call`(`rx.internal.operators.SingleLiftObservableOperator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleLiftObservableOperator;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4afb2c.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4afb30.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleLiftObservableOperator;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4afb36.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleLiftObservableOperator` v2 @kind this, `rx.SingleSubscriber` v3 @kind object) @signature `Lrx/internal/operators/SingleLiftObservableOperator;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afb48.  v0:= new `rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber`;
  #L4afb4c.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/SingleFromObservable$WrapSingleIntoSubscriber;.<init>:(Lrx/SingleSubscriber;)V` @kind direct;
  #L4afb52.  call `add`(v3, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4afb58.  v1:= v2.`rx.internal.operators.SingleLiftObservableOperator.lift` @type ^`rx.Observable$Operator` @kind object;
  #L4afb5c.  call temp:= `onSingleLift`(v1) @signature `Lrx/plugins/RxJavaHooks;.onSingleLift:(Lrx/Observable$Operator;)Lrx/Observable$Operator;` @kind static;
  #L4afb62.  v1:= temp @kind object;
  #L4afb64.  call temp:= `call`(v1, v0) @signature `Lrx/Observable$Operator;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4afb6a.  v0:= temp @kind object;
  #L4afb6c.  v0:= (`rx.Subscriber`) v0 @kind object;
  #L4afb70.  call temp:= `wrap`(v0) @signature `Lrx/internal/operators/SingleLiftObservableOperator;.wrap:(Lrx/Subscriber;)Lrx/SingleSubscriber;` @kind static;
  #L4afb76.  v1:= temp @kind object;
  #L4afb78.  call `onStart`(v0) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L4afb7e.  v0:= v2.`rx.internal.operators.SingleLiftObservableOperator.source` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4afb82.  call `call`(v0, v1) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4afb88.  goto L4afb92;
  #L4afb8a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4afb8c.  call `throwOrReport`(v0, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/SingleSubscriber;)V` @kind static;
  #L4afb92.  return @kind void;
  catch `java.lang.Throwable` @[L4afb58..L4afb88] goto L4afb8a;
}
