record `rx.internal.operators.OperatorMulticast$1` @kind class @AccessFlag  extends `rx.Observable$OnSubscribe` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorMulticast$1.val$connectedSubject` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `rx.internal.operators.OperatorMulticast$1.val$guard` @AccessFlag FINAL_SYNTHETIC;
  `java.util.List` `rx.internal.operators.OperatorMulticast$1.val$waitingForConnect` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorMulticast$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lrx/internal/operators/OperatorMulticast$1;.<init>:(Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a3b6c.  v0.`rx.internal.operators.OperatorMulticast$1.val$guard` @type ^`java.lang.Object` := v1 @kind object;
  #L4a3b70.  v0.`rx.internal.operators.OperatorMulticast$1.val$connectedSubject` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4a3b74.  v0.`rx.internal.operators.OperatorMulticast$1.val$waitingForConnect` @type ^`java.util.List` := v3 @kind object;
  #L4a3b78.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a3b7e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorMulticast$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorMulticast$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a3b90.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a3b94.  call `call`(v0, v1) @signature `Lrx/internal/operators/OperatorMulticast$1;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4a3b9a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorMulticast$1` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorMulticast$1;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a3bac.  v0:= v2.`rx.internal.operators.OperatorMulticast$1.val$guard` @type ^`java.lang.Object` @kind object;
  #L4a3bb0.  @monitorenter v0
  #L4a3bb2.  v1:= v2.`rx.internal.operators.OperatorMulticast$1.val$connectedSubject` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a3bb6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a3bbc.  v1:= temp @kind object;
  #L4a3bbe.  if v1 != 0 then goto L4a3bce;
  #L4a3bc2.  v1:= v2.`rx.internal.operators.OperatorMulticast$1.val$waitingForConnect` @type ^`java.util.List` @kind object;
  #L4a3bc6.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4a3bcc.  goto L4a3be4;
  #L4a3bce.  v1:= v2.`rx.internal.operators.OperatorMulticast$1.val$connectedSubject` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a3bd2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a3bd8.  v1:= temp @kind object;
  #L4a3bda.  v1:= (`rx.subjects.Subject`) v1 @kind object;
  #L4a3bde.  call temp:= `unsafeSubscribe`(v1, v3) @signature `Lrx/subjects/Subject;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a3be4.  @monitorexit v0
  #L4a3be6.  return @kind void;
  #L4a3be8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a3bea.  @monitorexit v0
  #L4a3bec.  throw v3;
  catch `java.lang.Throwable` @[L4a3bb2..L4a3bec] goto L4a3be8;
}
