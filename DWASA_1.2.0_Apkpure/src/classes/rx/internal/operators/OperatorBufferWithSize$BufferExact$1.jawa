record `rx.internal.operators.OperatorBufferWithSize$BufferExact$1` @kind class @AccessFlag  extends `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorBufferWithSize$BufferExact` `rx.internal.operators.OperatorBufferWithSize$BufferExact$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSize$BufferExact$1` v0 @kind this, `rx.internal.operators.OperatorBufferWithSize$BufferExact` v1 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact$1;.<init>:(Lrx/internal/operators/OperatorBufferWithSize$BufferExact;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49e41c.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferExact$1.this$0` @type ^`rx.internal.operators.OperatorBufferWithSize$BufferExact` := v1 @kind object;
  #L49e420.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49e426.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorBufferWithSize$BufferExact$1` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact$1;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49e438.  v0:= 0L;
  #L49e43c.  v2:= lcmp(v4, v0);
  #L49e440.  if v2 < 0 then goto L49e46a;
  #L49e444.  v2:= lcmp(v4, v0);
  #L49e448.  if v2 == 0 then goto L49e468;
  #L49e44c.  v0:= v3.`rx.internal.operators.OperatorBufferWithSize$BufferExact$1.this$0` @type ^`rx.internal.operators.OperatorBufferWithSize$BufferExact` @kind object;
  #L49e450.  v0:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferExact.count` @type ^`int`;
  #L49e454.  v0:= (`long`) v0 @kind i2l;
  #L49e456.  call temp:= `multiplyCap`(v4, v0) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L49e45c.  v4:= temp @kind wide;
  #L49e45e.  v0:= v3.`rx.internal.operators.OperatorBufferWithSize$BufferExact$1.this$0` @type ^`rx.internal.operators.OperatorBufferWithSize$BufferExact` @kind object;
  #L49e462.  call `access$000`(v0, v4) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.access$000:(Lrx/internal/operators/OperatorBufferWithSize$BufferExact;J)V` @kind static;
  #L49e468.  return @kind void;
  #L49e46a.  v0:= new `java.lang.IllegalArgumentException`;
  #L49e46e.  v1:= new `java.lang.StringBuilder`;
  #L49e472.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49e478.  v2:= "n >= required but it was " @kind object;
  #L49e47c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e482.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e488.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49e48e.  v4:= temp @kind object;
  #L49e490.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49e496.  throw v0;
}
