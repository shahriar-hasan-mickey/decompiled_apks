record `rx.internal.operators.OnSubscribeJoin$ResultSink` @kind class @AccessFlag FINAL extends `java.util.HashMap` @kind class {
  `rx.subscriptions.CompositeSubscription` `rx.internal.operators.OnSubscribeJoin$ResultSink.group` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeJoin$ResultSink.leftDone` @AccessFlag ;
  `int` `rx.internal.operators.OnSubscribeJoin$ResultSink.leftId` @AccessFlag ;
  `boolean` `rx.internal.operators.OnSubscribeJoin$ResultSink.rightDone` @AccessFlag ;
  `int` `rx.internal.operators.OnSubscribeJoin$ResultSink.rightId` @AccessFlag ;
  `java.util.Map` `rx.internal.operators.OnSubscribeJoin$ResultSink.rightMap` @AccessFlag FINAL;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @AccessFlag FINAL;
  `rx.internal.operators.OnSubscribeJoin` `rx.internal.operators.OnSubscribeJoin$ResultSink.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@rx.internal.operators.OnSubscribeJoin$ResultSink.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeJoin$ResultSink` v0 @kind this, `rx.internal.operators.OnSubscribeJoin` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink;.<init>:(Lrx/internal/operators/OnSubscribeJoin;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49ab9c.  v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.this$0` @type ^`rx.internal.operators.OnSubscribeJoin` := v1 @kind object;
  #L49aba0.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L49aba6.  v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` := v2 @kind object;
  #L49abaa.  v1:= new `rx.subscriptions.CompositeSubscription`;
  #L49abae.  call `<init>`(v1) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L49abb4.  v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` := v1 @kind object;
  #L49abb8.  v1:= new `java.util.HashMap`;
  #L49abbc.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L49abc2.  v0.`rx.internal.operators.OnSubscribeJoin$ResultSink.rightMap` @type ^`java.util.Map` := v1 @kind object;
  #L49abc6.  return @kind void;
}
procedure `java.util.HashMap` `leftMap`(`rx.internal.operators.OnSubscribeJoin$ResultSink` v0 @kind this) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink;.leftMap:()Ljava/util/HashMap;` @AccessFlag  {
    temp;

  #L49ab88.  return v0 @kind object;
}
procedure `void` `run`(`rx.internal.operators.OnSubscribeJoin$ResultSink` v3 @kind this) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49abd8.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49abdc.  v1:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49abe0.  call `add`(v0, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49abe6.  v0:= new `rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber`;
  #L49abea.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$LeftSubscriber;.<init>:(Lrx/internal/operators/OnSubscribeJoin$ResultSink;)V` @kind direct;
  #L49abf0.  v1:= new `rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber`;
  #L49abf4.  call `<init>`(v1, v3) @signature `Lrx/internal/operators/OnSubscribeJoin$ResultSink$RightSubscriber;.<init>:(Lrx/internal/operators/OnSubscribeJoin$ResultSink;)V` @kind direct;
  #L49abfa.  v2:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49abfe.  call `add`(v2, v0) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49ac04.  v2:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49ac08.  call `add`(v2, v1) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49ac0e.  v2:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.this$0` @type ^`rx.internal.operators.OnSubscribeJoin` @kind object;
  #L49ac12.  v2:= v2.`rx.internal.operators.OnSubscribeJoin.left` @type ^`rx.Observable` @kind object;
  #L49ac16.  call temp:= `unsafeSubscribe`(v2, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49ac1c.  v0:= v3.`rx.internal.operators.OnSubscribeJoin$ResultSink.this$0` @type ^`rx.internal.operators.OnSubscribeJoin` @kind object;
  #L49ac20.  v0:= v0.`rx.internal.operators.OnSubscribeJoin.right` @type ^`rx.Observable` @kind object;
  #L49ac24.  call temp:= `unsafeSubscribe`(v0, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49ac2a.  return @kind void;
}
