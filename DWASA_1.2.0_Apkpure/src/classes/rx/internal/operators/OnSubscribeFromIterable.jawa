record `rx.internal.operators.OnSubscribeFromIterable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `java.lang.Iterable` `rx.internal.operators.OnSubscribeFromIterable.is` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromIterable` v1 @kind this, `java.lang.Iterable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4999c4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4999ca.  if v2 == 0 then goto L4999d4;
  #L4999ce.  v1.`rx.internal.operators.OnSubscribeFromIterable.is` @type ^`java.lang.Iterable` := v2 @kind object;
  #L4999d2.  return @kind void;
  #L4999d4.  v2:= new `java.lang.NullPointerException`;
  #L4999d8.  v0:= "iterable must not be null" @kind object;
  #L4999dc.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4999e2.  throw v2;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFromIterable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromIterable;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4999f4.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4999f8.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromIterable;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4999fe.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFromIterable` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromIterable;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L499a10.  v0:= v3.`rx.internal.operators.OnSubscribeFromIterable.is` @type ^`java.lang.Iterable` @kind object;
  #L499a14.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L499a1a.  v0:= temp @kind object;
  #L499a1c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L499a22.  v1:= temp;
  #L499a24.  call temp:= `isUnsubscribed`(v4) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L499a2a.  v2:= temp;
  #L499a2c.  if v2 != 0 then goto L499a4c;
  #L499a30.  if v1 != 0 then goto L499a3c;
  #L499a34.  call `onCompleted`(v4) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L499a3a.  goto L499a4c;
  #L499a3c.  v1:= new `rx.internal.operators.OnSubscribeFromIterable$IterableProducer`;
  #L499a40.  call `<init>`(v1, v4, v0) @signature `Lrx/internal/operators/OnSubscribeFromIterable$IterableProducer;.<init>:(Lrx/Subscriber;Ljava/util/Iterator;)V` @kind direct;
  #L499a46.  call `setProducer`(v4, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L499a4c.  return @kind void;
  #L499a4e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L499a50.  call `throwOrReport`(v0, v4) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L499a56.  return @kind void;
  catch `java.lang.Throwable` @[L499a10..L499a24] goto L499a4e;
}
