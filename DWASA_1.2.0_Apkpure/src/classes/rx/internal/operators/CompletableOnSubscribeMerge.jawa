record `rx.internal.operators.CompletableOnSubscribeMerge` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Completable$OnSubscribe` @kind interface {
  `boolean` `rx.internal.operators.CompletableOnSubscribeMerge.delayErrors` @AccessFlag FINAL;
  `int` `rx.internal.operators.CompletableOnSubscribeMerge.maxConcurrency` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.CompletableOnSubscribeMerge.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.CompletableOnSubscribeMerge` v0 @kind this, `rx.Observable` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge;.<init>:(Lrx/Observable;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L495a88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L495a8e.  v0.`rx.internal.operators.CompletableOnSubscribeMerge.source` @type ^`rx.Observable` := v1 @kind object;
  #L495a92.  v0.`rx.internal.operators.CompletableOnSubscribeMerge.maxConcurrency` @type ^`int` := v2;
  #L495a96.  v0.`rx.internal.operators.CompletableOnSubscribeMerge.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L495a9a.  return @kind void;
}
procedure `java.lang.Throwable` `collectErrors`(`java.util.Queue` v2 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge;.collectErrors:(Ljava/util/Queue;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L495a1c.  v0:= new `java.util.ArrayList`;
  #L495a20.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L495a26.  call temp:= `poll`(v2) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L495a2c.  v1:= temp @kind object;
  #L495a2e.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L495a32.  if v1 == 0 then goto L495a3e;
  #L495a36.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L495a3c.  goto L495a26;
  #L495a3e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L495a44.  v2:= temp;
  #L495a46.  if v2 == 0 then goto L495a4e;
  #L495a4a.  v2:= 0I;
  #L495a4c.  return v2 @kind object;
  #L495a4e.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L495a54.  v2:= temp;
  #L495a56.  v1:= 1I;
  #L495a58.  if v2 != v1 then goto L495a6c;
  #L495a5c.  v2:= 0I;
  #L495a5e.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L495a64.  v2:= temp @kind object;
  #L495a66.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L495a6a.  return v2 @kind object;
  #L495a6c.  v2:= new `rx.exceptions.CompositeException`;
  #L495a70.  call `<init>`(v2, v0) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L495a76.  return v2 @kind object;
}
procedure `void` `call`(`rx.internal.operators.CompletableOnSubscribeMerge` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L495aac.  v1:= (`rx.CompletableSubscriber`) v1 @kind object;
  #L495ab0.  call `call`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge;.call:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L495ab6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.CompletableOnSubscribeMerge` v3 @kind this, `rx.CompletableSubscriber` v4 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge;.call:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L495ac8.  v0:= new `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber`;
  #L495acc.  v1:= v3.`rx.internal.operators.CompletableOnSubscribeMerge.maxConcurrency` @type ^`int`;
  #L495ad0.  v2:= v3.`rx.internal.operators.CompletableOnSubscribeMerge.delayErrors` @type ^`boolean` @kind boolean;
  #L495ad4.  call `<init>`(v0, v4, v1, v2) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.<init>:(Lrx/CompletableSubscriber;IZ)V` @kind direct;
  #L495ada.  call `onSubscribe`(v4, v0) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L495ae0.  v4:= v3.`rx.internal.operators.CompletableOnSubscribeMerge.source` @type ^`rx.Observable` @kind object;
  #L495ae4.  call temp:= `subscribe`(v4, v0) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L495aea.  return @kind void;
}
