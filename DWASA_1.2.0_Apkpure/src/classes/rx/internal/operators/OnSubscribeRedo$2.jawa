record `rx.internal.operators.OnSubscribeRedo$2` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.operators.OnSubscribeRedo` `rx.internal.operators.OnSubscribeRedo$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.internal.producers.ProducerArbiter` `rx.internal.operators.OnSubscribeRedo$2.val$arbiter` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeRedo$2.val$child` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OnSubscribeRedo$2.val$consumerCapacity` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.OnSubscribeRedo$2.val$sourceSubscriptions` @AccessFlag FINAL_SYNTHETIC;
  `rx.subjects.Subject` `rx.internal.operators.OnSubscribeRedo$2.val$terminals` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRedo$2` v0 @kind this, `rx.internal.operators.OnSubscribeRedo` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.subjects.Subject` v3 @kind object, `rx.internal.producers.ProducerArbiter` v4 @kind object, `java.util.concurrent.atomic.AtomicLong` v5 @kind object, `rx.subscriptions.SerialSubscription` v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$2;.<init>:(Lrx/internal/operators/OnSubscribeRedo;Lrx/Subscriber;Lrx/subjects/Subject;Lrx/internal/producers/ProducerArbiter;Ljava/util/concurrent/atomic/AtomicLong;Lrx/subscriptions/SerialSubscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49bdd8.  v0.`rx.internal.operators.OnSubscribeRedo$2.this$0` @type ^`rx.internal.operators.OnSubscribeRedo` := v1 @kind object;
  #L49bddc.  v0.`rx.internal.operators.OnSubscribeRedo$2.val$child` @type ^`rx.Subscriber` := v2 @kind object;
  #L49bde0.  v0.`rx.internal.operators.OnSubscribeRedo$2.val$terminals` @type ^`rx.subjects.Subject` := v3 @kind object;
  #L49bde4.  v0.`rx.internal.operators.OnSubscribeRedo$2.val$arbiter` @type ^`rx.internal.producers.ProducerArbiter` := v4 @kind object;
  #L49bde8.  v0.`rx.internal.operators.OnSubscribeRedo$2.val$consumerCapacity` @type ^`java.util.concurrent.atomic.AtomicLong` := v5 @kind object;
  #L49bdec.  v0.`rx.internal.operators.OnSubscribeRedo$2.val$sourceSubscriptions` @type ^`rx.subscriptions.SerialSubscription` := v6 @kind object;
  #L49bdf0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49bdf6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeRedo$2` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeRedo$2;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49be08.  v0:= v2.`rx.internal.operators.OnSubscribeRedo$2.val$child` @type ^`rx.Subscriber` @kind object;
  #L49be0c.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49be12.  v0:= temp;
  #L49be14.  if v0 == 0 then goto L49be1a;
  #L49be18.  return @kind void;
  #L49be1a.  v0:= new `rx.internal.operators.OnSubscribeRedo$2$1`;
  #L49be1e.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.<init>:(Lrx/internal/operators/OnSubscribeRedo$2;)V` @kind direct;
  #L49be24.  v1:= v2.`rx.internal.operators.OnSubscribeRedo$2.val$sourceSubscriptions` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L49be28.  call `set`(v1, v0) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L49be2e.  v1:= v2.`rx.internal.operators.OnSubscribeRedo$2.this$0` @type ^`rx.internal.operators.OnSubscribeRedo` @kind object;
  #L49be32.  v1:= v1.`rx.internal.operators.OnSubscribeRedo.source` @type ^`rx.Observable` @kind object;
  #L49be36.  call temp:= `unsafeSubscribe`(v1, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49be3c.  return @kind void;
}
