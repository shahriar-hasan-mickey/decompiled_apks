record `rx.internal.operators.OperatorTakeLast` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorTakeLast.count` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeLast` v1 @kind this, `int` v2 ) @signature `Lrx/internal/operators/OperatorTakeLast;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4aa344.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aa34a.  if v2 < 0 then goto L4aa354;
  #L4aa34e.  v1.`rx.internal.operators.OperatorTakeLast.count` @type ^`int` := v2;
  #L4aa352.  return @kind void;
  #L4aa354.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L4aa358.  v0:= "count cannot be negative" @kind object;
  #L4aa35c.  call `<init>`(v2, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aa362.  throw v2;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTakeLast` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorTakeLast;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aa2ec.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4aa2f0.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorTakeLast;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4aa2f6.  v1:= temp @kind object;
  #L4aa2f8.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorTakeLast` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorTakeLast;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aa30c.  v0:= new `rx.internal.operators.OperatorTakeLast$TakeLastSubscriber`;
  #L4aa310.  v1:= v2.`rx.internal.operators.OperatorTakeLast.count` @type ^`int`;
  #L4aa314.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/OperatorTakeLast$TakeLastSubscriber;.<init>:(Lrx/Subscriber;I)V` @kind direct;
  #L4aa31a.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aa320.  v1:= new `rx.internal.operators.OperatorTakeLast$1`;
  #L4aa324.  call `<init>`(v1, v2, v0) @signature `Lrx/internal/operators/OperatorTakeLast$1;.<init>:(Lrx/internal/operators/OperatorTakeLast;Lrx/internal/operators/OperatorTakeLast$TakeLastSubscriber;)V` @kind direct;
  #L4aa32a.  call `setProducer`(v3, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4aa330.  return v0 @kind object;
}
