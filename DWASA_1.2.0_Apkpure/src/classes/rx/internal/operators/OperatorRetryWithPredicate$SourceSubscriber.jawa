record `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.attempts` @AccessFlag FINAL;
  `rx.Subscriber` `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.child` @AccessFlag FINAL;
  `rx.Scheduler$Worker` `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.inner` @AccessFlag FINAL;
  `rx.internal.producers.ProducerArbiter` `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.pa` @AccessFlag FINAL;
  `rx.functions.Func2` `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.predicate` @AccessFlag FINAL;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.serialSubscription` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber` v1 @kind this, `rx.Subscriber` v2 @kind object, `rx.functions.Func2` v3 @kind object, `rx.Scheduler$Worker` v4 @kind object, `rx.subscriptions.SerialSubscription` v5 @kind object, `rx.internal.producers.ProducerArbiter` v6 @kind object) @signature `Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func2;Lrx/Scheduler$Worker;Lrx/subscriptions/SerialSubscription;Lrx/internal/producers/ProducerArbiter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a7734.  call `<init>`(v1) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a773a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4a773e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a7744.  v1.`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.attempts` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4a7748.  v1.`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a774c.  v1.`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.predicate` @type ^`rx.functions.Func2` := v3 @kind object;
  #L4a7750.  v1.`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.inner` @type ^`rx.Scheduler$Worker` := v4 @kind object;
  #L4a7754.  v1.`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.serialSubscription` @type ^`rx.subscriptions.SerialSubscription` := v5 @kind object;
  #L4a7758.  v1.`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.pa` @type ^`rx.internal.producers.ProducerArbiter` := v6 @kind object;
  #L4a775c.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber` v0 @kind this) @signature `Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;

  #L4a7770.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7784.  v0:= v1.`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a7788.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a778e.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a77a0.  v1:= (`rx.Observable`) v1 @kind object;
  #L4a77a4.  call `onNext`(v0, v1) @signature `Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber;.onNext:(Lrx/Observable;)V` @kind virtual;
  #L4a77aa.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber` v2 @kind this, `rx.Observable` v3 @kind object) @signature `Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber;.onNext:(Lrx/Observable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a77bc.  v0:= v2.`rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.inner` @type ^`rx.Scheduler$Worker` @kind object;
  #L4a77c0.  v1:= new `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1`;
  #L4a77c4.  call `<init>`(v1, v2, v3) @signature `Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber$1;.<init>:(Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber;Lrx/Observable;)V` @kind direct;
  #L4a77ca.  call temp:= `schedule`(v0, v1) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4a77d0.  return @kind void;
}
