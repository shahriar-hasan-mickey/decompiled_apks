record `rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorBufferWithSize$BufferSkip` `rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer` v0 @kind this, `rx.internal.operators.OperatorBufferWithSize$BufferSkip` v1 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip$BufferSkipProducer;.<init>:(Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49e874.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer.this$0` @type ^`rx.internal.operators.OperatorBufferWithSize$BufferSkip` := v1 @kind object;
  #L49e878.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49e87e.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer` v7 @kind this, `long` v8 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip$BufferSkipProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49e890.  v0:= 0L;
  #L49e894.  v2:= lcmp(v8, v0);
  #L49e898.  if v2 < 0 then goto L49e912;
  #L49e89c.  v2:= lcmp(v8, v0);
  #L49e8a0.  if v2 == 0 then goto L49e910;
  #L49e8a4.  v0:= v7.`rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer.this$0` @type ^`rx.internal.operators.OperatorBufferWithSize$BufferSkip` @kind object;
  #L49e8a8.  call temp:= `get`(v7) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip$BufferSkipProducer;.get:()Z` @kind virtual;
  #L49e8ae.  v1:= temp;
  #L49e8b0.  if v1 != 0 then goto L49e8fc;
  #L49e8b4.  v1:= 0I;
  #L49e8b6.  v2:= 1I;
  #L49e8b8.  call temp:= `compareAndSet`(v7, v1, v2) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip$BufferSkipProducer;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49e8be.  v1:= temp;
  #L49e8c0.  if v1 == 0 then goto L49e8fc;
  #L49e8c4.  v1:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.count` @type ^`int`;
  #L49e8c8.  v1:= (`long`) v1 @kind i2l;
  #L49e8ca.  call temp:= `multiplyCap`(v8, v1) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L49e8d0.  v1:= temp @kind wide;
  #L49e8d2.  v3:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.skip` @type ^`int`;
  #L49e8d6.  v4:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.count` @type ^`int`;
  #L49e8da.  v3:= v3 - v4 @kind int;
  #L49e8dc.  v3:= (`long`) v3 @kind i2l;
  #L49e8de.  v5:= 1L;
  #L49e8e2.  v8:= v8 - v5 @kind long;
  #L49e8e4.  call temp:= `multiplyCap`(v3, v8) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L49e8ea.  v8:= temp @kind wide;
  #L49e8ec.  call temp:= `addCap`(v1, v8) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L49e8f2.  v8:= temp @kind wide;
  #L49e8f4.  call `access$100`(v0, v8) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.access$100:(Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;J)V` @kind static;
  #L49e8fa.  goto L49e910;
  #L49e8fc.  v1:= v0.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.skip` @type ^`int`;
  #L49e900.  v1:= (`long`) v1 @kind i2l;
  #L49e902.  call temp:= `multiplyCap`(v8, v1) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L49e908.  v8:= temp @kind wide;
  #L49e90a.  call `access$200`(v0, v8) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.access$200:(Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;J)V` @kind static;
  #L49e910.  return @kind void;
  #L49e912.  v0:= new `java.lang.IllegalArgumentException`;
  #L49e916.  v1:= new `java.lang.StringBuilder`;
  #L49e91a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49e920.  v2:= "n >= 0 required but it was " @kind object;
  #L49e924.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e92a.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e930.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49e936.  v8:= temp @kind object;
  #L49e938.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49e93e.  throw v0;
}
