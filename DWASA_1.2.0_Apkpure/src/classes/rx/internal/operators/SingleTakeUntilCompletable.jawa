record `rx.internal.operators.SingleTakeUntilCompletable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Completable` `rx.internal.operators.SingleTakeUntilCompletable.other` @AccessFlag FINAL;
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleTakeUntilCompletable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTakeUntilCompletable` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object, `rx.Completable` v2 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilCompletable;.<init>:(Lrx/Single$OnSubscribe;Lrx/Completable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b07ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b07b2.  v0.`rx.internal.operators.SingleTakeUntilCompletable.source` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L4b07b6.  v0.`rx.internal.operators.SingleTakeUntilCompletable.other` @type ^`rx.Completable` := v2 @kind object;
  #L4b07ba.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleTakeUntilCompletable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilCompletable;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b07cc.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4b07d0.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleTakeUntilCompletable;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4b07d6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleTakeUntilCompletable` v1 @kind this, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilCompletable;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b07e8.  v0:= new `rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber`;
  #L4b07ec.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.<init>:(Lrx/SingleSubscriber;)V` @kind direct;
  #L4b07f2.  call `add`(v2, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b07f8.  v2:= v1.`rx.internal.operators.SingleTakeUntilCompletable.other` @type ^`rx.Completable` @kind object;
  #L4b07fc.  call `subscribe`(v2, v0) @signature `Lrx/Completable;.subscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L4b0802.  v2:= v1.`rx.internal.operators.SingleTakeUntilCompletable.source` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4b0806.  call `call`(v2, v0) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b080c.  return @kind void;
}
