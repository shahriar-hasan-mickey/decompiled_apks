record `rx.internal.operators.BufferUntilSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `rx.subjects.Subject` @kind class {
  `boolean` `rx.internal.operators.BufferUntilSubscriber.forward` @AccessFlag PRIVATE;
  `rx.internal.operators.BufferUntilSubscriber$State` `rx.internal.operators.BufferUntilSubscriber.state` @AccessFlag FINAL;
}
global `rx.Observer` `@@rx.internal.operators.BufferUntilSubscriber.EMPTY_OBSERVER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/BufferUntilSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L493a40.  v0:= new `rx.internal.operators.BufferUntilSubscriber$1`;
  #L493a44.  call `<init>`(v0) @signature `Lrx/internal/operators/BufferUntilSubscriber$1;.<init>:()V` @kind direct;
  #L493a4a.  `@@rx.internal.operators.BufferUntilSubscriber.EMPTY_OBSERVER` @type ^`rx.Observer` := v0 @kind object;
  #L493a4e.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.BufferUntilSubscriber` v1 @kind this, `rx.internal.operators.BufferUntilSubscriber$State` v2 @kind object) @signature `Lrx/internal/operators/BufferUntilSubscriber;.<init>:(Lrx/internal/operators/BufferUntilSubscriber$State;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L493a60.  v0:= new `rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction`;
  #L493a64.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/BufferUntilSubscriber$OnSubscribeAction;.<init>:(Lrx/internal/operators/BufferUntilSubscriber$State;)V` @kind direct;
  #L493a6a.  call `<init>`(v1, v0) @signature `Lrx/subjects/Subject;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L493a70.  v1.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` := v2 @kind object;
  #L493a74.  return @kind void;
}
procedure `rx.internal.operators.BufferUntilSubscriber` `create`() @signature `Lrx/internal/operators/BufferUntilSubscriber;.create:()Lrx/internal/operators/BufferUntilSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L493a18.  v0:= new `rx.internal.operators.BufferUntilSubscriber$State`;
  #L493a1c.  call `<init>`(v0) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.<init>:()V` @kind direct;
  #L493a22.  v1:= new `rx.internal.operators.BufferUntilSubscriber`;
  #L493a26.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/BufferUntilSubscriber;.<init>:(Lrx/internal/operators/BufferUntilSubscriber$State;)V` @kind direct;
  #L493a2c.  return v1 @kind object;
}
procedure `void` `emit`(`rx.internal.operators.BufferUntilSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/BufferUntilSubscriber;.emit:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L493a88.  v0:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493a8c.  v0:= v0.`rx.internal.operators.BufferUntilSubscriber$State.guard` @type ^`java.lang.Object` @kind object;
  #L493a90.  @monitorenter v0
  #L493a92.  v1:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493a96.  v1:= v1.`rx.internal.operators.BufferUntilSubscriber$State.buffer` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L493a9a.  call temp:= `add`(v1, v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L493aa0.  v3:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493aa4.  call temp:= `get`(v3) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.get:()Ljava/lang/Object;` @kind virtual;
  #L493aaa.  v3:= temp @kind object;
  #L493aac.  if v3 == 0 then goto L493aca;
  #L493ab0.  v3:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493ab4.  v3:= v3.`rx.internal.operators.BufferUntilSubscriber$State.emitting` @type ^`boolean` @kind boolean;
  #L493ab8.  if v3 != 0 then goto L493aca;
  #L493abc.  v3:= 1I;
  #L493abe.  v2.`rx.internal.operators.BufferUntilSubscriber.forward` @type ^`boolean` := v3 @kind boolean;
  #L493ac2.  v1:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493ac6.  v1.`rx.internal.operators.BufferUntilSubscriber$State.emitting` @type ^`boolean` := v3 @kind boolean;
  #L493aca.  @monitorexit v0
  #L493acc.  v3:= v2.`rx.internal.operators.BufferUntilSubscriber.forward` @type ^`boolean` @kind boolean;
  #L493ad0.  if v3 == 0 then goto L493b00;
  #L493ad4.  v3:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493ad8.  v3:= v3.`rx.internal.operators.BufferUntilSubscriber$State.buffer` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L493adc.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L493ae2.  v3:= temp @kind object;
  #L493ae4.  if v3 == 0 then goto L493b00;
  #L493ae8.  v0:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493aec.  call temp:= `get`(v0) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.get:()Ljava/lang/Object;` @kind virtual;
  #L493af2.  v0:= temp @kind object;
  #L493af4.  v0:= (`rx.Observer`) v0 @kind object;
  #L493af8.  call temp:= `accept`(v0, v3) @signature `Lrx/internal/operators/NotificationLite;.accept:(Lrx/Observer;Ljava/lang/Object;)Z` @kind static;
  #L493afe.  goto L493ad4;
  #L493b00.  return @kind void;
  #L493b02.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L493b04.  @monitorexit v0
  #L493b06.  goto L493b0a;
  #L493b08.  throw v3;
  #L493b0a.  goto L493b08;
  catch `java.lang.Throwable` @[L493a92..L493acc] goto L493b02;
  catch `java.lang.Throwable` @[L493b04..L493b06] goto L493b02;
}
procedure `boolean` `hasObservers`(`rx.internal.operators.BufferUntilSubscriber` v2 @kind this) @signature `Lrx/internal/operators/BufferUntilSubscriber;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4939d0.  v0:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L4939d4.  v0:= v0.`rx.internal.operators.BufferUntilSubscriber$State.guard` @type ^`java.lang.Object` @kind object;
  #L4939d8.  @monitorenter v0
  #L4939da.  v1:= v2.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L4939de.  call temp:= `get`(v1) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.get:()Ljava/lang/Object;` @kind virtual;
  #L4939e4.  v1:= temp @kind object;
  #L4939e6.  if v1 == 0 then goto L4939ee;
  #L4939ea.  v1:= 1I;
  #L4939ec.  goto L4939f0;
  #L4939ee.  v1:= 0I;
  #L4939f0.  @monitorexit v0
  #L4939f2.  return v1;
  #L4939f4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4939f6.  @monitorexit v0
  #L4939f8.  throw v1;
  catch `java.lang.Throwable` @[L4939da..L4939f8] goto L4939f4;
}
procedure `void` `onCompleted`(`rx.internal.operators.BufferUntilSubscriber` v1 @kind this) @signature `Lrx/internal/operators/BufferUntilSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493b30.  v0:= v1.`rx.internal.operators.BufferUntilSubscriber.forward` @type ^`boolean` @kind boolean;
  #L493b34.  if v0 == 0 then goto L493b50;
  #L493b38.  v0:= v1.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493b3c.  call temp:= `get`(v0) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.get:()Ljava/lang/Object;` @kind virtual;
  #L493b42.  v0:= temp @kind object;
  #L493b44.  v0:= (`rx.Observer`) v0 @kind object;
  #L493b48.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L493b4e.  goto L493b5e;
  #L493b50.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L493b56.  v0:= temp @kind object;
  #L493b58.  call `emit`(v1, v0) @signature `Lrx/internal/operators/BufferUntilSubscriber;.emit:(Ljava/lang/Object;)V` @kind direct;
  #L493b5e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.BufferUntilSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/BufferUntilSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493b70.  v0:= v1.`rx.internal.operators.BufferUntilSubscriber.forward` @type ^`boolean` @kind boolean;
  #L493b74.  if v0 == 0 then goto L493b90;
  #L493b78.  v0:= v1.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493b7c.  call temp:= `get`(v0) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.get:()Ljava/lang/Object;` @kind virtual;
  #L493b82.  v0:= temp @kind object;
  #L493b84.  v0:= (`rx.Observer`) v0 @kind object;
  #L493b88.  call `onError`(v0, v2) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493b8e.  goto L493b9e;
  #L493b90.  call temp:= `error`(v2) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L493b96.  v2:= temp @kind object;
  #L493b98.  call `emit`(v1, v2) @signature `Lrx/internal/operators/BufferUntilSubscriber;.emit:(Ljava/lang/Object;)V` @kind direct;
  #L493b9e.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.BufferUntilSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/BufferUntilSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493bb0.  v0:= v1.`rx.internal.operators.BufferUntilSubscriber.forward` @type ^`boolean` @kind boolean;
  #L493bb4.  if v0 == 0 then goto L493bd0;
  #L493bb8.  v0:= v1.`rx.internal.operators.BufferUntilSubscriber.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493bbc.  call temp:= `get`(v0) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.get:()Ljava/lang/Object;` @kind virtual;
  #L493bc2.  v0:= temp @kind object;
  #L493bc4.  v0:= (`rx.Observer`) v0 @kind object;
  #L493bc8.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L493bce.  goto L493bde;
  #L493bd0.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L493bd6.  v2:= temp @kind object;
  #L493bd8.  call `emit`(v1, v2) @signature `Lrx/internal/operators/BufferUntilSubscriber;.emit:(Ljava/lang/Object;)V` @kind direct;
  #L493bde.  return @kind void;
}
