record `rx.internal.operators.OperatorTakeWhile` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Func2` `rx.internal.operators.OperatorTakeWhile.predicate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeWhile` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeWhile;.<init>:(Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4aa9b0.  v0:= new `rx.internal.operators.OperatorTakeWhile$1`;
  #L4aa9b4.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTakeWhile$1;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4aa9ba.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/OperatorTakeWhile;.<init>:(Lrx/functions/Func2;)V` @kind direct;
  #L4aa9c0.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeWhile` v0 @kind this, `rx.functions.Func2` v1 @kind object) @signature `Lrx/internal/operators/OperatorTakeWhile;.<init>:(Lrx/functions/Func2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aa9d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aa9da.  v0.`rx.internal.operators.OperatorTakeWhile.predicate` @type ^`rx.functions.Func2` := v1 @kind object;
  #L4aa9de.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTakeWhile` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorTakeWhile;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aa96c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4aa970.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorTakeWhile;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4aa976.  v1:= temp @kind object;
  #L4aa978.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorTakeWhile` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorTakeWhile;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aa98c.  v0:= new `rx.internal.operators.OperatorTakeWhile$2`;
  #L4aa990.  v1:= 0I;
  #L4aa992.  call `<init>`(v0, v2, v3, v1, v3) @signature `Lrx/internal/operators/OperatorTakeWhile$2;.<init>:(Lrx/internal/operators/OperatorTakeWhile;Lrx/Subscriber;ZLrx/Subscriber;)V` @kind direct;
  #L4aa998.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aa99e.  return v0 @kind object;
}
