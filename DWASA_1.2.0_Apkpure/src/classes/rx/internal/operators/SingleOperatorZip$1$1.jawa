record `rx.internal.operators.SingleOperatorZip$1$1` @kind class @AccessFlag  extends `rx.SingleSubscriber` @kind class {
  `rx.internal.operators.SingleOperatorZip$1` `rx.internal.operators.SingleOperatorZip$1$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `int` `rx.internal.operators.SingleOperatorZip$1$1.val$j` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.SingleOperatorZip$1$1.val$once` @AccessFlag FINAL_SYNTHETIC;
  `rx.SingleSubscriber` `rx.internal.operators.SingleOperatorZip$1$1.val$subscriber` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object`[] `rx.internal.operators.SingleOperatorZip$1$1.val$values` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.SingleOperatorZip$1$1.val$wip` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOperatorZip$1$1` v0 @kind this, `rx.internal.operators.SingleOperatorZip$1` v1 @kind object, `java.lang.Object`[] v2 @kind object, `int` v3 , `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `rx.SingleSubscriber` v5 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v6 @kind object) @signature `Lrx/internal/operators/SingleOperatorZip$1$1;.<init>:(Lrx/internal/operators/SingleOperatorZip$1;[Ljava/lang/Object;ILjava/util/concurrent/atomic/AtomicInteger;Lrx/SingleSubscriber;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0498.  v0.`rx.internal.operators.SingleOperatorZip$1$1.this$0` @type ^`rx.internal.operators.SingleOperatorZip$1` := v1 @kind object;
  #L4b049c.  v0.`rx.internal.operators.SingleOperatorZip$1$1.val$values` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4b04a0.  v0.`rx.internal.operators.SingleOperatorZip$1$1.val$j` @type ^`int` := v3;
  #L4b04a4.  v0.`rx.internal.operators.SingleOperatorZip$1$1.val$wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v4 @kind object;
  #L4b04a8.  v0.`rx.internal.operators.SingleOperatorZip$1$1.val$subscriber` @type ^`rx.SingleSubscriber` := v5 @kind object;
  #L4b04ac.  v0.`rx.internal.operators.SingleOperatorZip$1$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v6 @kind object;
  #L4b04b0.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4b04b6.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleOperatorZip$1$1` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/SingleOperatorZip$1$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b04c8.  v0:= v3.`rx.internal.operators.SingleOperatorZip$1$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b04cc.  v1:= 0I;
  #L4b04ce.  v2:= 1I;
  #L4b04d0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b04d6.  v0:= temp;
  #L4b04d8.  if v0 == 0 then goto L4b04e8;
  #L4b04dc.  v0:= v3.`rx.internal.operators.SingleOperatorZip$1$1.val$subscriber` @type ^`rx.SingleSubscriber` @kind object;
  #L4b04e0.  call `onError`(v0, v4) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b04e6.  goto L4b04ee;
  #L4b04e8.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b04ee.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleOperatorZip$1$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/SingleOperatorZip$1$1;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b0500.  v0:= v2.`rx.internal.operators.SingleOperatorZip$1$1.val$values` @type ^`java.lang.Object`[] @kind object;
  #L4b0504.  v1:= v2.`rx.internal.operators.SingleOperatorZip$1$1.val$j` @type ^`int`;
  #L4b0508.  v0[v1]:= v3 @kind object;
  #L4b050c.  v3:= v2.`rx.internal.operators.SingleOperatorZip$1$1.val$wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b0510.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4b0516.  v3:= temp;
  #L4b0518.  if v3 != 0 then goto L4b054a;
  #L4b051c.  v3:= v2.`rx.internal.operators.SingleOperatorZip$1$1.this$0` @type ^`rx.internal.operators.SingleOperatorZip$1` @kind object;
  #L4b0520.  v3:= v3.`rx.internal.operators.SingleOperatorZip$1.val$zipper` @type ^`rx.functions.FuncN` @kind object;
  #L4b0524.  v0:= v2.`rx.internal.operators.SingleOperatorZip$1$1.val$values` @type ^`java.lang.Object`[] @kind object;
  #L4b0528.  call temp:= `call`(v3, v0) @signature `Lrx/functions/FuncN;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b052e.  v3:= temp @kind object;
  #L4b0530.  v0:= v2.`rx.internal.operators.SingleOperatorZip$1$1.val$subscriber` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0534.  call `onSuccess`(v0, v3) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4b053a.  goto L4b054a;
  #L4b053c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b053e.  call `throwIfFatal`(v3) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0544.  call `onError`(v2, v3) @signature `Lrx/internal/operators/SingleOperatorZip$1$1;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b054a.  return @kind void;
  catch `java.lang.Throwable` @[L4b051c..L4b0530] goto L4b053c;
}
