record `rx.internal.operators.OnSubscribeRedo` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.Func1` `rx.internal.operators.OnSubscribeRedo.controlHandlerFunction` @AccessFlag PRIVATE_FINAL;
  `rx.Scheduler` `rx.internal.operators.OnSubscribeRedo.scheduler` @AccessFlag PRIVATE_FINAL;
  `rx.Observable` `rx.internal.operators.OnSubscribeRedo.source` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeRedo.stopOnComplete` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeRedo.stopOnError` @AccessFlag FINAL;
}
global `rx.functions.Func1` `@@rx.internal.operators.OnSubscribeRedo.REDO_INFINITE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OnSubscribeRedo;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49c5d4.  v0:= new `rx.internal.operators.OnSubscribeRedo$1`;
  #L49c5d8.  call `<init>`(v0) @signature `Lrx/internal/operators/OnSubscribeRedo$1;.<init>:()V` @kind direct;
  #L49c5de.  `@@rx.internal.operators.OnSubscribeRedo.REDO_INFINITE` @type ^`rx.functions.Func1` := v0 @kind object;
  #L49c5e2.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRedo` v0 @kind this, `rx.Observable` v1 @kind object, `rx.functions.Func1` v2 @kind object, `boolean` v3 , `boolean` v4 , `rx.Scheduler` v5 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.<init>:(Lrx/Observable;Lrx/functions/Func1;ZZLrx/Scheduler;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L49c5f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49c5fa.  v0.`rx.internal.operators.OnSubscribeRedo.source` @type ^`rx.Observable` := v1 @kind object;
  #L49c5fe.  v0.`rx.internal.operators.OnSubscribeRedo.controlHandlerFunction` @type ^`rx.functions.Func1` := v2 @kind object;
  #L49c602.  v0.`rx.internal.operators.OnSubscribeRedo.stopOnComplete` @type ^`boolean` := v3 @kind boolean;
  #L49c606.  v0.`rx.internal.operators.OnSubscribeRedo.stopOnError` @type ^`boolean` := v4 @kind boolean;
  #L49c60a.  v0.`rx.internal.operators.OnSubscribeRedo.scheduler` @type ^`rx.Scheduler` := v5 @kind object;
  #L49c60e.  return @kind void;
}
procedure `rx.Observable` `redo`(`rx.Observable` v7 @kind object, `rx.functions.Func1` v8 @kind object, `rx.Scheduler` v9 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.redo:(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49c3a8.  v6:= new `rx.internal.operators.OnSubscribeRedo`;
  #L49c3ac.  v3:= 0I;
  #L49c3ae.  v4:= 0I;
  #L49c3b0.  v0:= v6 @kind object;
  #L49c3b2.  v1:= v7 @kind object;
  #L49c3b4.  v2:= v8 @kind object;
  #L49c3b6.  v5:= v9 @kind object;
  #L49c3b8.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeRedo;.<init>:(Lrx/Observable;Lrx/functions/Func1;ZZLrx/Scheduler;)V` @kind direct;
  #L49c3be.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L49c3c4.  v7:= temp @kind object;
  #L49c3c6.  return v7 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49c3d8.  call temp:= `trampoline`() @signature `Lrx/schedulers/Schedulers;.trampoline:()Lrx/Scheduler;` @kind static;
  #L49c3de.  v0:= temp @kind object;
  #L49c3e0.  call temp:= `repeat`(v1, v0) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L49c3e6.  v1:= temp @kind object;
  #L49c3e8.  return v1 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v1 @kind object, `long` v2 ) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;J)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49c3fc.  call temp:= `trampoline`() @signature `Lrx/schedulers/Schedulers;.trampoline:()Lrx/Scheduler;` @kind static;
  #L49c402.  v0:= temp @kind object;
  #L49c404.  call temp:= `repeat`(v1, v2, v0) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;` @kind static;
  #L49c40a.  v1:= temp @kind object;
  #L49c40c.  return v1 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v3 @kind object, `long` v4 , `rx.Scheduler` v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49c420.  v0:= 0L;
  #L49c424.  v2:= lcmp(v4, v0);
  #L49c428.  if v2 != 0 then goto L49c436;
  #L49c42c.  call temp:= `empty`() @signature `Lrx/Observable;.empty:()Lrx/Observable;` @kind static;
  #L49c432.  v3:= temp @kind object;
  #L49c434.  return v3 @kind object;
  #L49c436.  v2:= lcmp(v4, v0);
  #L49c43a.  if v2 < 0 then goto L49c458;
  #L49c43e.  v0:= new `rx.internal.operators.OnSubscribeRedo$RedoFinite`;
  #L49c442.  v1:= 1L;
  #L49c446.  v4:= v4 - v1 @kind long;
  #L49c448.  call `<init>`(v0, v4) @signature `Lrx/internal/operators/OnSubscribeRedo$RedoFinite;.<init>:(J)V` @kind direct;
  #L49c44e.  call temp:= `repeat`(v3, v0, v6) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L49c454.  v3:= temp @kind object;
  #L49c456.  return v3 @kind object;
  #L49c458.  v3:= new `java.lang.IllegalArgumentException`;
  #L49c45c.  v4:= "count >= 0 expected" @kind object;
  #L49c460.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49c466.  throw v3;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v1 @kind object, `rx.Scheduler` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49c478.  v0:= `@@rx.internal.operators.OnSubscribeRedo.REDO_INFINITE` @type ^`rx.functions.Func1` @kind object;
  #L49c47c.  call temp:= `repeat`(v1, v0, v2) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L49c482.  v1:= temp @kind object;
  #L49c484.  return v1 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v7 @kind object, `rx.functions.Func1` v8 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49c498.  v6:= new `rx.internal.operators.OnSubscribeRedo`;
  #L49c49c.  call temp:= `trampoline`() @signature `Lrx/schedulers/Schedulers;.trampoline:()Lrx/Scheduler;` @kind static;
  #L49c4a2.  v5:= temp @kind object;
  #L49c4a4.  v3:= 0I;
  #L49c4a6.  v4:= 1I;
  #L49c4a8.  v0:= v6 @kind object;
  #L49c4aa.  v1:= v7 @kind object;
  #L49c4ac.  v2:= v8 @kind object;
  #L49c4ae.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeRedo;.<init>:(Lrx/Observable;Lrx/functions/Func1;ZZLrx/Scheduler;)V` @kind direct;
  #L49c4b4.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L49c4ba.  v7:= temp @kind object;
  #L49c4bc.  return v7 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v7 @kind object, `rx.functions.Func1` v8 @kind object, `rx.Scheduler` v9 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49c4d0.  v6:= new `rx.internal.operators.OnSubscribeRedo`;
  #L49c4d4.  v3:= 0I;
  #L49c4d6.  v4:= 1I;
  #L49c4d8.  v0:= v6 @kind object;
  #L49c4da.  v1:= v7 @kind object;
  #L49c4dc.  v2:= v8 @kind object;
  #L49c4de.  v5:= v9 @kind object;
  #L49c4e0.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeRedo;.<init>:(Lrx/Observable;Lrx/functions/Func1;ZZLrx/Scheduler;)V` @kind direct;
  #L49c4e6.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L49c4ec.  v7:= temp @kind object;
  #L49c4ee.  return v7 @kind object;
}
procedure `rx.Observable` `retry`(`rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49c500.  v0:= `@@rx.internal.operators.OnSubscribeRedo.REDO_INFINITE` @type ^`rx.functions.Func1` @kind object;
  #L49c504.  call temp:= `retry`(v1, v0) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L49c50a.  v1:= temp @kind object;
  #L49c50c.  return v1 @kind object;
}
procedure `rx.Observable` `retry`(`rx.Observable` v3 @kind object, `long` v4 ) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;J)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49c520.  v0:= 0L;
  #L49c524.  v2:= lcmp(v4, v0);
  #L49c528.  if v2 < 0 then goto L49c54a;
  #L49c52c.  v2:= lcmp(v4, v0);
  #L49c530.  if v2 != 0 then goto L49c536;
  #L49c534.  return v3 @kind object;
  #L49c536.  v0:= new `rx.internal.operators.OnSubscribeRedo$RedoFinite`;
  #L49c53a.  call `<init>`(v0, v4) @signature `Lrx/internal/operators/OnSubscribeRedo$RedoFinite;.<init>:(J)V` @kind direct;
  #L49c540.  call temp:= `retry`(v3, v0) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L49c546.  v3:= temp @kind object;
  #L49c548.  return v3 @kind object;
  #L49c54a.  v3:= new `java.lang.IllegalArgumentException`;
  #L49c54e.  v4:= "count >= 0 expected" @kind object;
  #L49c552.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49c558.  throw v3;
}
procedure `rx.Observable` `retry`(`rx.Observable` v7 @kind object, `rx.functions.Func1` v8 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49c56c.  v6:= new `rx.internal.operators.OnSubscribeRedo`;
  #L49c570.  call temp:= `trampoline`() @signature `Lrx/schedulers/Schedulers;.trampoline:()Lrx/Scheduler;` @kind static;
  #L49c576.  v5:= temp @kind object;
  #L49c578.  v3:= 1I;
  #L49c57a.  v4:= 0I;
  #L49c57c.  v0:= v6 @kind object;
  #L49c57e.  v1:= v7 @kind object;
  #L49c580.  v2:= v8 @kind object;
  #L49c582.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeRedo;.<init>:(Lrx/Observable;Lrx/functions/Func1;ZZLrx/Scheduler;)V` @kind direct;
  #L49c588.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L49c58e.  v7:= temp @kind object;
  #L49c590.  return v7 @kind object;
}
procedure `rx.Observable` `retry`(`rx.Observable` v7 @kind object, `rx.functions.Func1` v8 @kind object, `rx.Scheduler` v9 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49c5a4.  v6:= new `rx.internal.operators.OnSubscribeRedo`;
  #L49c5a8.  v3:= 1I;
  #L49c5aa.  v4:= 0I;
  #L49c5ac.  v0:= v6 @kind object;
  #L49c5ae.  v1:= v7 @kind object;
  #L49c5b0.  v2:= v8 @kind object;
  #L49c5b2.  v5:= v9 @kind object;
  #L49c5b4.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeRedo;.<init>:(Lrx/Observable;Lrx/functions/Func1;ZZLrx/Scheduler;)V` @kind direct;
  #L49c5ba.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L49c5c0.  v7:= temp @kind object;
  #L49c5c2.  return v7 @kind object;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeRedo` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49c620.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49c624.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRedo;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49c62a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeRedo` v14 @kind this, `rx.Subscriber` v15 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L49c63c.  v8:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L49c640.  v0:= 1I;
  #L49c642.  call `<init>`(v8, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L49c648.  v9:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49c64c.  call `<init>`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49c652.  v0:= v14.`rx.internal.operators.OnSubscribeRedo.scheduler` @type ^`rx.Scheduler` @kind object;
  #L49c656.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L49c65c.  v10:= temp @kind object;
  #L49c65e.  call `add`(v15, v10) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49c664.  v7:= new `rx.subscriptions.SerialSubscription`;
  #L49c668.  call `<init>`(v7) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L49c66e.  call `add`(v15, v7) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49c674.  call temp:= `create`() @signature `Lrx/subjects/BehaviorSubject;.create:()Lrx/subjects/BehaviorSubject;` @kind static;
  #L49c67a.  v0:= temp @kind object;
  #L49c67c.  call temp:= `toSerialized`(v0) @signature `Lrx/subjects/BehaviorSubject;.toSerialized:()Lrx/subjects/SerializedSubject;` @kind virtual;
  #L49c682.  v0:= temp @kind object;
  #L49c684.  call temp:= `empty`() @signature `Lrx/observers/Subscribers;.empty:()Lrx/Subscriber;` @kind static;
  #L49c68a.  v1:= temp @kind object;
  #L49c68c.  call temp:= `subscribe`(v0, v1) @signature `Lrx/subjects/Subject;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49c692.  v11:= new `rx.internal.producers.ProducerArbiter`;
  #L49c696.  call `<init>`(v11) @signature `Lrx/internal/producers/ProducerArbiter;.<init>:()V` @kind direct;
  #L49c69c.  v12:= new `rx.internal.operators.OnSubscribeRedo$2`;
  #L49c6a0.  v1:= v12 @kind object;
  #L49c6a2.  v2:= v14 @kind object;
  #L49c6a4.  v3:= v15 @kind object;
  #L49c6a6.  v4:= v0 @kind object;
  #L49c6a8.  v5:= v11 @kind object;
  #L49c6aa.  v6:= v9 @kind object;
  #L49c6ac.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/internal/operators/OnSubscribeRedo$2;.<init>:(Lrx/internal/operators/OnSubscribeRedo;Lrx/Subscriber;Lrx/subjects/Subject;Lrx/internal/producers/ProducerArbiter;Ljava/util/concurrent/atomic/AtomicLong;Lrx/subscriptions/SerialSubscription;)V` @kind direct;
  #L49c6b2.  v1:= v14.`rx.internal.operators.OnSubscribeRedo.controlHandlerFunction` @type ^`rx.functions.Func1` @kind object;
  #L49c6b6.  v2:= new `rx.internal.operators.OnSubscribeRedo$3`;
  #L49c6ba.  call `<init>`(v2, v14) @signature `Lrx/internal/operators/OnSubscribeRedo$3;.<init>:(Lrx/internal/operators/OnSubscribeRedo;)V` @kind direct;
  #L49c6c0.  call temp:= `lift`(v0, v2) @signature `Lrx/subjects/Subject;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L49c6c6.  v0:= temp @kind object;
  #L49c6c8.  call temp:= `call`(v1, v0) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49c6ce.  v0:= temp @kind object;
  #L49c6d0.  v2:= v0 @kind object;
  #L49c6d2.  v2:= (`rx.Observable`) v2 @kind object;
  #L49c6d6.  v13:= new `rx.internal.operators.OnSubscribeRedo$4`;
  #L49c6da.  v0:= v13 @kind object;
  #L49c6dc.  v1:= v14 @kind object;
  #L49c6de.  v4:= v9 @kind object;
  #L49c6e0.  v5:= v10 @kind object;
  #L49c6e2.  v6:= v12 @kind object;
  #L49c6e4.  v7:= v8 @kind object;
  #L49c6e6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/internal/operators/OnSubscribeRedo$4;.<init>:(Lrx/internal/operators/OnSubscribeRedo;Lrx/Observable;Lrx/Subscriber;Ljava/util/concurrent/atomic/AtomicLong;Lrx/Scheduler$Worker;Lrx/functions/Action0;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @kind direct;
  #L49c6ec.  call temp:= `schedule`(v10, v13) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L49c6f2.  v7:= new `rx.internal.operators.OnSubscribeRedo$5`;
  #L49c6f6.  v0:= v7 @kind object;
  #L49c6f8.  v2:= v9 @kind object;
  #L49c6fa.  v3:= v11 @kind object;
  #L49c6fc.  v4:= v8 @kind object;
  #L49c6fe.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/internal/operators/OnSubscribeRedo$5;.<init>:(Lrx/internal/operators/OnSubscribeRedo;Ljava/util/concurrent/atomic/AtomicLong;Lrx/internal/producers/ProducerArbiter;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/Scheduler$Worker;Lrx/functions/Action0;)V` @kind direct;
  #L49c704.  call `setProducer`(v15, v7) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49c70a.  return @kind void;
}
