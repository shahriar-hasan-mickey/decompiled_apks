record `rx.internal.operators.SingleTakeUntilObservable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Observable` `rx.internal.operators.SingleTakeUntilObservable.other` @AccessFlag FINAL;
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleTakeUntilObservable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTakeUntilObservable` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object, `rx.Observable` v2 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable;.<init>:(Lrx/Single$OnSubscribe;Lrx/Observable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b0954.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b095a.  v0.`rx.internal.operators.SingleTakeUntilObservable.source` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L4b095e.  v0.`rx.internal.operators.SingleTakeUntilObservable.other` @type ^`rx.Observable` := v2 @kind object;
  #L4b0962.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleTakeUntilObservable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b0974.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4b0978.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleTakeUntilObservable;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4b097e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleTakeUntilObservable` v2 @kind this, `rx.SingleSubscriber` v3 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b0990.  v0:= new `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber`;
  #L4b0994.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;.<init>:(Lrx/SingleSubscriber;)V` @kind direct;
  #L4b099a.  call `add`(v3, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b09a0.  v3:= v2.`rx.internal.operators.SingleTakeUntilObservable.other` @type ^`rx.Observable` @kind object;
  #L4b09a4.  v1:= v0.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.other` @type ^`rx.Subscriber` @kind object;
  #L4b09a8.  call temp:= `subscribe`(v3, v1) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4b09ae.  v3:= v2.`rx.internal.operators.SingleTakeUntilObservable.source` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4b09b2.  call `call`(v3, v0) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b09b8.  return @kind void;
}
