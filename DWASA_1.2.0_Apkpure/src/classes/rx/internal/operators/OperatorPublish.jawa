record `rx.internal.operators.OperatorPublish` @kind class @AccessFlag PUBLIC_FINAL extends `rx.observables.ConnectableObservable` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorPublish.current` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OperatorPublish.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorPublish` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object, `rx.Observable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lrx/internal/operators/OperatorPublish;.<init>:(Lrx/Observable$OnSubscribe;Lrx/Observable;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4a5d40.  call `<init>`(v0, v1) @signature `Lrx/observables/ConnectableObservable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4a5d46.  v0.`rx.internal.operators.OperatorPublish.source` @type ^`rx.Observable` := v2 @kind object;
  #L4a5d4a.  v0.`rx.internal.operators.OperatorPublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4a5d4e.  return @kind void;
}
procedure `rx.Observable` `create`(`rx.Observable` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OperatorPublish;.create:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a5cd0.  v0:= 0I;
  #L4a5cd2.  call temp:= `create`(v1, v2, v0) @signature `Lrx/internal/operators/OperatorPublish;.create:(Lrx/Observable;Lrx/functions/Func1;Z)Lrx/Observable;` @kind static;
  #L4a5cd8.  v1:= temp @kind object;
  #L4a5cda.  return v1 @kind object;
}
procedure `rx.Observable` `create`(`rx.Observable` v1 @kind object, `rx.functions.Func1` v2 @kind object, `boolean` v3 ) @signature `Lrx/internal/operators/OperatorPublish;.create:(Lrx/Observable;Lrx/functions/Func1;Z)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a5cec.  v0:= new `rx.internal.operators.OperatorPublish$2`;
  #L4a5cf0.  call `<init>`(v0, v3, v2, v1) @signature `Lrx/internal/operators/OperatorPublish$2;.<init>:(ZLrx/functions/Func1;Lrx/Observable;)V` @kind direct;
  #L4a5cf6.  call temp:= `create`(v0) @signature `Lrx/internal/operators/OperatorPublish;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L4a5cfc.  v1:= temp @kind object;
  #L4a5cfe.  return v1 @kind object;
}
procedure `rx.observables.ConnectableObservable` `create`(`rx.Observable` v3 @kind object) @signature `Lrx/internal/operators/OperatorPublish;.create:(Lrx/Observable;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a5d10.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a5d14.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a5d1a.  v1:= new `rx.internal.operators.OperatorPublish$1`;
  #L4a5d1e.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/OperatorPublish$1;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4a5d24.  v2:= new `rx.internal.operators.OperatorPublish`;
  #L4a5d28.  call `<init>`(v2, v1, v3, v0) @signature `Lrx/internal/operators/OperatorPublish;.<init>:(Lrx/Observable$OnSubscribe;Lrx/Observable;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4a5d2e.  return v2 @kind object;
}
procedure `void` `connect`(`rx.internal.operators.OperatorPublish` v4 @kind this, `rx.functions.Action1` v5 @kind object) @signature `Lrx/internal/operators/OperatorPublish;.connect:(Lrx/functions/Action1;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a5d60.  v0:= v4.`rx.internal.operators.OperatorPublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a5d64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a5d6a.  v0:= temp @kind object;
  #L4a5d6c.  v0:= (`rx.internal.operators.OperatorPublish$PublishSubscriber`) v0 @kind object;
  #L4a5d70.  if v0 == 0 then goto L4a5d80;
  #L4a5d74.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a5d7a.  v1:= temp;
  #L4a5d7c.  if v1 == 0 then goto L4a5da8;
  #L4a5d80.  v1:= new `rx.internal.operators.OperatorPublish$PublishSubscriber`;
  #L4a5d84.  v2:= v4.`rx.internal.operators.OperatorPublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a5d88.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4a5d8e.  call `init`(v1) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.init:()V` @kind virtual;
  #L4a5d94.  v2:= v4.`rx.internal.operators.OperatorPublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a5d98.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a5d9e.  v0:= temp;
  #L4a5da0.  if v0 != 0 then goto L4a5da6;
  #L4a5da4.  goto L4a5d60;
  #L4a5da6.  v0:= v1 @kind object;
  #L4a5da8.  v1:= v0.`rx.internal.operators.OperatorPublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a5dac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a5db2.  v1:= temp;
  #L4a5db4.  v2:= 1I;
  #L4a5db6.  v3:= 0I;
  #L4a5db8.  if v1 != 0 then goto L4a5dce;
  #L4a5dbc.  v1:= v0.`rx.internal.operators.OperatorPublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a5dc0.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a5dc6.  v1:= temp;
  #L4a5dc8.  if v1 == 0 then goto L4a5dce;
  #L4a5dcc.  goto L4a5dd0;
  #L4a5dce.  v2:= 0I;
  #L4a5dd0.  call `call`(v5, v0) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4a5dd6.  if v2 == 0 then goto L4a5de4;
  #L4a5dda.  v5:= v4.`rx.internal.operators.OperatorPublish.source` @type ^`rx.Observable` @kind object;
  #L4a5dde.  call temp:= `unsafeSubscribe`(v5, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a5de4.  return @kind void;
}
