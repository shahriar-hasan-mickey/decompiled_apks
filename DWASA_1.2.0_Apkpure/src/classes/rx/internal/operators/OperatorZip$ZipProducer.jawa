record `rx.internal.operators.OperatorZip$ZipProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorZip$Zip` `rx.internal.operators.OperatorZip$ZipProducer.zipper` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OperatorZip$ZipProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorZip$ZipProducer` v0 @kind this, `rx.internal.operators.OperatorZip$Zip` v1 @kind object) @signature `Lrx/internal/operators/OperatorZip$ZipProducer;.<init>:(Lrx/internal/operators/OperatorZip$Zip;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aecd4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4aecda.  v0.`rx.internal.operators.OperatorZip$ZipProducer.zipper` @type ^`rx.internal.operators.OperatorZip$Zip` := v1 @kind object;
  #L4aecde.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorZip$ZipProducer` v0 @kind this, `long` v1 ) @signature `Lrx/internal/operators/OperatorZip$ZipProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4aecf0.  call temp:= `getAndAddRequest`(v0, v1) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4aecf6.  v1:= v0.`rx.internal.operators.OperatorZip$ZipProducer.zipper` @type ^`rx.internal.operators.OperatorZip$Zip` @kind object;
  #L4aecfa.  call `tick`(v1) @signature `Lrx/internal/operators/OperatorZip$Zip;.tick:()V` @kind virtual;
  #L4aed00.  return @kind void;
}
