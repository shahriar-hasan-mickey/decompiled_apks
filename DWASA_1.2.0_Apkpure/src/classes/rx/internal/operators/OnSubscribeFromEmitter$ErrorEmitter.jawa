record `rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter` @kind class @AccessFlag FINAL extends `rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseEmitter` @kind class {
  `boolean` `rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter.done` @AccessFlag PRIVATE;
}
global `long` `@@rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$ErrorEmitter;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49936c.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L499372.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$ErrorEmitter;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499384.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter.done` @type ^`boolean` @kind boolean;
  #L499388.  if v0 == 0 then goto L49938e;
  #L49938c.  return @kind void;
  #L49938e.  v0:= 1I;
  #L499390.  v1.`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L499394.  call `onCompleted`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.onCompleted:()V` @kind super;
  #L49939a.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$ErrorEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4993ac.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter.done` @type ^`boolean` @kind boolean;
  #L4993b0.  if v0 == 0 then goto L4993bc;
  #L4993b4.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4993ba.  return @kind void;
  #L4993bc.  v0:= 1I;
  #L4993be.  v1.`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L4993c2.  call `onError`(v1, v2) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L4993c8.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$ErrorEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4993dc.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter.done` @type ^`boolean` @kind boolean;
  #L4993e0.  if v0 == 0 then goto L4993e6;
  #L4993e4.  return @kind void;
  #L4993e6.  call `onNext`(v1, v2) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.onNext:(Ljava/lang/Object;)V` @kind super;
  #L4993ec.  return @kind void;
}
procedure `void` `onOverflow`(`rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$ErrorEmitter;.onOverflow:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L499400.  v0:= new `rx.exceptions.MissingBackpressureException`;
  #L499404.  v1:= "fromEmitter: could not emit value due to lack of requests" @kind object;
  #L499408.  call `<init>`(v0, v1) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49940e.  call `onError`(v2, v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$ErrorEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L499414.  return @kind void;
}
