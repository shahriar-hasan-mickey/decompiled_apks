record `rx.internal.operators.OperatorBufferWithTime` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorBufferWithTime.count` @AccessFlag FINAL;
  `rx.Scheduler` `rx.internal.operators.OperatorBufferWithTime.scheduler` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorBufferWithTime.timeshift` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorBufferWithTime.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OperatorBufferWithTime.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithTime` v0 @kind this, `long` v1 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `int` v6 , `rx.Scheduler` v7 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime;.<init>:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49f704.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49f70a.  v0.`rx.internal.operators.OperatorBufferWithTime.timespan` @type ^`long` := v1 @kind wide;
  #L49f70e.  v0.`rx.internal.operators.OperatorBufferWithTime.timeshift` @type ^`long` := v3 @kind wide;
  #L49f712.  v0.`rx.internal.operators.OperatorBufferWithTime.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L49f716.  v0.`rx.internal.operators.OperatorBufferWithTime.count` @type ^`int` := v6;
  #L49f71a.  v0.`rx.internal.operators.OperatorBufferWithTime.scheduler` @type ^`rx.Scheduler` := v7 @kind object;
  #L49f71e.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorBufferWithTime` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49f66c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49f670.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithTime;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L49f676.  v1:= temp @kind object;
  #L49f678.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorBufferWithTime` v7 @kind this, `rx.Subscriber` v8 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithTime;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49f68c.  v0:= v7.`rx.internal.operators.OperatorBufferWithTime.scheduler` @type ^`rx.Scheduler` @kind object;
  #L49f690.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L49f696.  v0:= temp @kind object;
  #L49f698.  v1:= new `rx.observers.SerializedSubscriber`;
  #L49f69c.  call `<init>`(v1, v8) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49f6a2.  v2:= v7.`rx.internal.operators.OperatorBufferWithTime.timespan` @type ^`long` @kind wide;
  #L49f6a6.  v4:= v7.`rx.internal.operators.OperatorBufferWithTime.timeshift` @type ^`long` @kind wide;
  #L49f6aa.  v6:= lcmp(v2, v4);
  #L49f6ae.  if v6 != 0 then goto L49f6d0;
  #L49f6b2.  v2:= new `rx.internal.operators.OperatorBufferWithTime$ExactSubscriber`;
  #L49f6b6.  call `<init>`(v2, v7, v1, v0) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.<init>:(Lrx/internal/operators/OperatorBufferWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @kind direct;
  #L49f6bc.  call `add`(v2, v0) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49f6c2.  call `add`(v8, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49f6c8.  call `scheduleExact`(v2) @signature `Lrx/internal/operators/OperatorBufferWithTime$ExactSubscriber;.scheduleExact:()V` @kind virtual;
  #L49f6ce.  return v2 @kind object;
  #L49f6d0.  v2:= new `rx.internal.operators.OperatorBufferWithTime$InexactSubscriber`;
  #L49f6d4.  call `<init>`(v2, v7, v1, v0) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.<init>:(Lrx/internal/operators/OperatorBufferWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @kind direct;
  #L49f6da.  call `add`(v2, v0) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49f6e0.  call `add`(v8, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49f6e6.  call `startNewChunk`(v2) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.startNewChunk:()V` @kind virtual;
  #L49f6ec.  call `scheduleChunk`(v2) @signature `Lrx/internal/operators/OperatorBufferWithTime$InexactSubscriber;.scheduleChunk:()V` @kind virtual;
  #L49f6f2.  return v2 @kind object;
}
