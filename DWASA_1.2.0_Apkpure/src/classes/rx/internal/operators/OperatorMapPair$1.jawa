record `rx.internal.operators.OperatorMapPair$1` @kind class @AccessFlag FINAL extends `rx.functions.Func1` @kind interface {
  `rx.functions.Func1` `rx.internal.operators.OperatorMapPair$1.val$selector` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorMapPair$1` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/internal/operators/OperatorMapPair$1;.<init>:(Lrx/functions/Func1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a25c4.  v0.`rx.internal.operators.OperatorMapPair$1.val$selector` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4a25c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a25ce.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorMapPair$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorMapPair$1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a257c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorMapPair$1;.call:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L4a2582.  v1:= temp @kind object;
  #L4a2584.  return v1 @kind object;
}
procedure `rx.Observable` `call`(`rx.internal.operators.OperatorMapPair$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorMapPair$1;.call:(Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a2598.  v0:= v1.`rx.internal.operators.OperatorMapPair$1.val$selector` @type ^`rx.functions.Func1` @kind object;
  #L4a259c.  call temp:= `call`(v0, v2) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a25a2.  v2:= temp @kind object;
  #L4a25a4.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L4a25a8.  call temp:= `from`(v2) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L4a25ae.  v2:= temp @kind object;
  #L4a25b0.  return v2 @kind object;
}
