record `rx.internal.operators.OnSubscribeRedo$2$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.OnSubscribeRedo$2$1.done` @AccessFlag ;
  `rx.internal.operators.OnSubscribeRedo$2` `rx.internal.operators.OnSubscribeRedo$2$1.this$1` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRedo$2$1` v0 @kind this, `rx.internal.operators.OnSubscribeRedo$2` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.<init>:(Lrx/internal/operators/OnSubscribeRedo$2;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49bc94.  v0.`rx.internal.operators.OnSubscribeRedo$2$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$2` := v1 @kind object;
  #L49bc98.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49bc9e.  return @kind void;
}
procedure `void` `decrementConsumerCapacity`(`rx.internal.operators.OnSubscribeRedo$2$1` v5 @kind this) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.decrementConsumerCapacity:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49bcb0.  v0:= v5.`rx.internal.operators.OnSubscribeRedo$2$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$2` @kind object;
  #L49bcb4.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$2.val$consumerCapacity` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49bcb8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49bcbe.  v0:= temp @kind wide;
  #L49bcc0.  v2:= 9223372036854775807L;
  #L49bcca.  v4:= lcmp(v0, v2);
  #L49bcce.  if v4 == 0 then goto L49bcee;
  #L49bcd2.  v2:= v5.`rx.internal.operators.OnSubscribeRedo$2$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$2` @kind object;
  #L49bcd6.  v2:= v2.`rx.internal.operators.OnSubscribeRedo$2.val$consumerCapacity` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49bcda.  v3:= 1L;
  #L49bcde.  v3:= v0 - v3 @kind long;
  #L49bce2.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L49bce8.  v0:= temp;
  #L49bcea.  if v0 == 0 then goto L49bcb0;
  #L49bcee.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeRedo$2$1` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49bd00.  v0:= v2.`rx.internal.operators.OnSubscribeRedo$2$1.done` @type ^`boolean` @kind boolean;
  #L49bd04.  if v0 != 0 then goto L49bd2a;
  #L49bd08.  v0:= 1I;
  #L49bd0a.  v2.`rx.internal.operators.OnSubscribeRedo$2$1.done` @type ^`boolean` := v0 @kind boolean;
  #L49bd0e.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.unsubscribe:()V` @kind virtual;
  #L49bd14.  v0:= v2.`rx.internal.operators.OnSubscribeRedo$2$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$2` @kind object;
  #L49bd18.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$2.val$terminals` @type ^`rx.subjects.Subject` @kind object;
  #L49bd1c.  call temp:= `createOnCompleted`() @signature `Lrx/Notification;.createOnCompleted:()Lrx/Notification;` @kind static;
  #L49bd22.  v1:= temp @kind object;
  #L49bd24.  call `onNext`(v0, v1) @signature `Lrx/subjects/Subject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49bd2a.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeRedo$2$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bd3c.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$2$1.done` @type ^`boolean` @kind boolean;
  #L49bd40.  if v0 != 0 then goto L49bd66;
  #L49bd44.  v0:= 1I;
  #L49bd46.  v1.`rx.internal.operators.OnSubscribeRedo$2$1.done` @type ^`boolean` := v0 @kind boolean;
  #L49bd4a.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.unsubscribe:()V` @kind virtual;
  #L49bd50.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$2$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$2` @kind object;
  #L49bd54.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$2.val$terminals` @type ^`rx.subjects.Subject` @kind object;
  #L49bd58.  call temp:= `createOnError`(v2) @signature `Lrx/Notification;.createOnError:(Ljava/lang/Throwable;)Lrx/Notification;` @kind static;
  #L49bd5e.  v2:= temp @kind object;
  #L49bd60.  call `onNext`(v0, v2) @signature `Lrx/subjects/Subject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49bd66.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeRedo$2$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49bd78.  v0:= v2.`rx.internal.operators.OnSubscribeRedo$2$1.done` @type ^`boolean` @kind boolean;
  #L49bd7c.  if v0 != 0 then goto L49bda6;
  #L49bd80.  v0:= v2.`rx.internal.operators.OnSubscribeRedo$2$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$2` @kind object;
  #L49bd84.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$2.val$child` @type ^`rx.Subscriber` @kind object;
  #L49bd88.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49bd8e.  call `decrementConsumerCapacity`(v2) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.decrementConsumerCapacity:()V` @kind direct;
  #L49bd94.  v3:= v2.`rx.internal.operators.OnSubscribeRedo$2$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$2` @kind object;
  #L49bd98.  v3:= v3.`rx.internal.operators.OnSubscribeRedo$2.val$arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L49bd9c.  v0:= 1L;
  #L49bda0.  call `produced`(v3, v0) @signature `Lrx/internal/producers/ProducerArbiter;.produced:(J)V` @kind virtual;
  #L49bda6.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.OnSubscribeRedo$2$1` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$2$1;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bdb8.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$2$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$2` @kind object;
  #L49bdbc.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$2.val$arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L49bdc0.  call `setProducer`(v0, v2) @signature `Lrx/internal/producers/ProducerArbiter;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49bdc6.  return @kind void;
}
