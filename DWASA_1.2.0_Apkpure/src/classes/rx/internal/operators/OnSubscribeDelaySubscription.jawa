record `rx.internal.operators.OnSubscribeDelaySubscription` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.Scheduler` `rx.internal.operators.OnSubscribeDelaySubscription.scheduler` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OnSubscribeDelaySubscription.source` @AccessFlag FINAL;
  `long` `rx.internal.operators.OnSubscribeDelaySubscription.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OnSubscribeDelaySubscription.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeDelaySubscription` v0 @kind this, `rx.Observable` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/internal/operators/OnSubscribeDelaySubscription;.<init>:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L497e6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L497e72.  v0.`rx.internal.operators.OnSubscribeDelaySubscription.source` @type ^`rx.Observable` := v1 @kind object;
  #L497e76.  v0.`rx.internal.operators.OnSubscribeDelaySubscription.time` @type ^`long` := v2 @kind wide;
  #L497e7a.  v0.`rx.internal.operators.OnSubscribeDelaySubscription.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L497e7e.  v0.`rx.internal.operators.OnSubscribeDelaySubscription.scheduler` @type ^`rx.Scheduler` := v5 @kind object;
  #L497e82.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeDelaySubscription` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeDelaySubscription;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L497e94.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L497e98.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeDelaySubscription;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L497e9e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeDelaySubscription` v4 @kind this, `rx.Subscriber` v5 @kind object) @signature `Lrx/internal/operators/OnSubscribeDelaySubscription;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L497eb0.  v0:= v4.`rx.internal.operators.OnSubscribeDelaySubscription.scheduler` @type ^`rx.Scheduler` @kind object;
  #L497eb4.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L497eba.  v0:= temp @kind object;
  #L497ebc.  call `add`(v5, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L497ec2.  v1:= new `rx.internal.operators.OnSubscribeDelaySubscription$1`;
  #L497ec6.  call `<init>`(v1, v4, v5) @signature `Lrx/internal/operators/OnSubscribeDelaySubscription$1;.<init>:(Lrx/internal/operators/OnSubscribeDelaySubscription;Lrx/Subscriber;)V` @kind direct;
  #L497ecc.  v2:= v4.`rx.internal.operators.OnSubscribeDelaySubscription.time` @type ^`long` @kind wide;
  #L497ed0.  v5:= v4.`rx.internal.operators.OnSubscribeDelaySubscription.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L497ed4.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L497eda.  return @kind void;
}
