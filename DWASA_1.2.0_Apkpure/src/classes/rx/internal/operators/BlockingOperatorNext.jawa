record `rx.internal.operators.BlockingOperatorNext` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`rx.internal.operators.BlockingOperatorNext` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorNext;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L493274.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49327a.  v0:= new `java.lang.IllegalStateException`;
  #L49327e.  v1:= "No instances!" @kind object;
  #L493282.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493288.  throw v0;
}
procedure `java.lang.Iterable` `next`(`rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/BlockingOperatorNext;.next:(Lrx/Observable;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493258.  v0:= new `rx.internal.operators.BlockingOperatorNext$1`;
  #L49325c.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/BlockingOperatorNext$1;.<init>:(Lrx/Observable;)V` @kind direct;
  #L493262.  return v0 @kind object;
}
