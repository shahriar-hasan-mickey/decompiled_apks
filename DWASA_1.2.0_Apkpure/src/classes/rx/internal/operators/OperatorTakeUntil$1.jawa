record `rx.internal.operators.OperatorTakeUntil$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OperatorTakeUntil` `rx.internal.operators.OperatorTakeUntil$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorTakeUntil$1.val$serial` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeUntil$1` v0 @kind this, `rx.internal.operators.OperatorTakeUntil` v1 @kind object, `rx.Subscriber` v2 @kind object, `boolean` v3 , `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntil$1;.<init>:(Lrx/internal/operators/OperatorTakeUntil;Lrx/Subscriber;ZLrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aa498.  v0.`rx.internal.operators.OperatorTakeUntil$1.this$0` @type ^`rx.internal.operators.OperatorTakeUntil` := v1 @kind object;
  #L4aa49c.  v0.`rx.internal.operators.OperatorTakeUntil$1.val$serial` @type ^`rx.Subscriber` := v4 @kind object;
  #L4aa4a0.  call `<init>`(v0, v2, v3) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;Z)V` @kind direct;
  #L4aa4a6.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorTakeUntil$1` v2 @kind this) @signature `Lrx/internal/operators/OperatorTakeUntil$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aa4b8.  v0:= v2.`rx.internal.operators.OperatorTakeUntil$1.val$serial` @type ^`rx.Subscriber` @kind object;
  #L4aa4bc.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aa4c2.  v0:= v2.`rx.internal.operators.OperatorTakeUntil$1.val$serial` @type ^`rx.Subscriber` @kind object;
  #L4aa4c6.  call `unsubscribe`(v0) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4aa4cc.  return @kind void;
  #L4aa4ce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aa4d0.  v1:= v2.`rx.internal.operators.OperatorTakeUntil$1.val$serial` @type ^`rx.Subscriber` @kind object;
  #L4aa4d4.  call `unsubscribe`(v1) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4aa4da.  throw v0;
  catch `java.lang.Throwable` @[L4aa4b8..L4aa4c2] goto L4aa4ce;
}
procedure `void` `onError`(`rx.internal.operators.OperatorTakeUntil$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntil$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa4f8.  v0:= v1.`rx.internal.operators.OperatorTakeUntil$1.val$serial` @type ^`rx.Subscriber` @kind object;
  #L4aa4fc.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aa502.  v2:= v1.`rx.internal.operators.OperatorTakeUntil$1.val$serial` @type ^`rx.Subscriber` @kind object;
  #L4aa506.  call `unsubscribe`(v2) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4aa50c.  return @kind void;
  #L4aa50e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aa510.  v0:= v1.`rx.internal.operators.OperatorTakeUntil$1.val$serial` @type ^`rx.Subscriber` @kind object;
  #L4aa514.  call `unsubscribe`(v0) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4aa51a.  throw v2;
  catch `java.lang.Throwable` @[L4aa4f8..L4aa502] goto L4aa50e;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorTakeUntil$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntil$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa538.  v0:= v1.`rx.internal.operators.OperatorTakeUntil$1.val$serial` @type ^`rx.Subscriber` @kind object;
  #L4aa53c.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4aa542.  return @kind void;
}
