record `rx.internal.operators.SingleOperatorZip$1` @kind class @AccessFlag FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Single`[] `rx.internal.operators.SingleOperatorZip$1.val$singles` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.FuncN` `rx.internal.operators.SingleOperatorZip$1.val$zipper` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOperatorZip$1` v0 @kind this, `rx.Single`[] v1 @kind object, `rx.functions.FuncN` v2 @kind object) @signature `Lrx/internal/operators/SingleOperatorZip$1;.<init>:([Lrx/Single;Lrx/functions/FuncN;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0568.  v0.`rx.internal.operators.SingleOperatorZip$1.val$singles` @type ^`rx.Single`[] := v1 @kind object;
  #L4b056c.  v0.`rx.internal.operators.SingleOperatorZip$1.val$zipper` @type ^`rx.functions.FuncN` := v2 @kind object;
  #L4b0570.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b0576.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleOperatorZip$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleOperatorZip$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b0588.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4b058c.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleOperatorZip$1;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4b0592.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleOperatorZip$1` v13 @kind this, `rx.SingleSubscriber` v14 @kind object) @signature `Lrx/internal/operators/SingleOperatorZip$1;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4b05a4.  v0:= v13.`rx.internal.operators.SingleOperatorZip$1.val$singles` @type ^`rx.Single`[] @kind object;
  #L4b05a8.  v1:= length @variable v0;
  #L4b05aa.  if v1 != 0 then goto L4b05c4;
  #L4b05ae.  v0:= new `java.util.NoSuchElementException`;
  #L4b05b2.  v1:= "Can't zip 0 Singles." @kind object;
  #L4b05b6.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b05bc.  call `onError`(v14, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b05c2.  return @kind void;
  #L4b05c4.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4b05c8.  v0:= length @variable v0;
  #L4b05ca.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4b05d0.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b05d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b05da.  v2:= v13.`rx.internal.operators.SingleOperatorZip$1.val$singles` @type ^`rx.Single`[] @kind object;
  #L4b05de.  v2:= length @variable v2;
  #L4b05e0.  v9:= new `java.lang.Object`[v2];
  #L4b05e4.  v10:= new `rx.subscriptions.CompositeSubscription`;
  #L4b05e8.  call `<init>`(v10) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L4b05ee.  call `add`(v14, v10) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b05f4.  v2:= 0I;
  #L4b05f6.  v11:= 0I;
  #L4b05f8.  v2:= v13.`rx.internal.operators.SingleOperatorZip$1.val$singles` @type ^`rx.Single`[] @kind object;
  #L4b05fc.  v2:= length @variable v2;
  #L4b05fe.  if v11 >= v2 then goto L4b0668;
  #L4b0602.  call temp:= `isUnsubscribed`(v10) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4b0608.  v2:= temp;
  #L4b060a.  if v2 != 0 then goto L4b0668;
  #L4b060e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4b0614.  v2:= temp;
  #L4b0616.  if v2 == 0 then goto L4b061c;
  #L4b061a.  goto L4b0668;
  #L4b061c.  v12:= new `rx.internal.operators.SingleOperatorZip$1$1`;
  #L4b0620.  v2:= v12 @kind object;
  #L4b0622.  v3:= v13 @kind object;
  #L4b0624.  v4:= v9 @kind object;
  #L4b0626.  v5:= v11;
  #L4b0628.  v6:= v1 @kind object;
  #L4b062a.  v7:= v14 @kind object;
  #L4b062c.  v8:= v0 @kind object;
  #L4b062e.  call `<init>`(v2, v3, v4, v5, v6, v7, v8) @signature `Lrx/internal/operators/SingleOperatorZip$1$1;.<init>:(Lrx/internal/operators/SingleOperatorZip$1;[Ljava/lang/Object;ILjava/util/concurrent/atomic/AtomicInteger;Lrx/SingleSubscriber;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @kind direct;
  #L4b0634.  call `add`(v10, v12) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b063a.  call temp:= `isUnsubscribed`(v10) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4b0640.  v2:= temp;
  #L4b0642.  if v2 != 0 then goto L4b0668;
  #L4b0646.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4b064c.  v2:= temp;
  #L4b064e.  if v2 == 0 then goto L4b0654;
  #L4b0652.  goto L4b0668;
  #L4b0654.  v2:= v13.`rx.internal.operators.SingleOperatorZip$1.val$singles` @type ^`rx.Single`[] @kind object;
  #L4b0658.  v2:= v2[v11] @kind object;
  #L4b065c.  call temp:= `subscribe`(v2, v12) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L4b0662.  v11:= v11 + 1;
  #L4b0666.  goto L4b05f8;
  #L4b0668.  return @kind void;
}
