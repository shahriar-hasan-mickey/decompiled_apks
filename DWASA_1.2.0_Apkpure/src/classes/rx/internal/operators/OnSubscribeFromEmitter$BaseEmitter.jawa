record `rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Emitter` @kind interface, `rx.Producer` @kind interface, `rx.Subscription` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.actual` @AccessFlag FINAL;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L498f0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L498f12.  v0.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L498f16.  v1:= new `rx.subscriptions.SerialSubscription`;
  #L498f1a.  call `<init>`(v1) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L498f20.  v0.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @type ^`rx.subscriptions.SerialSubscription` := v1 @kind object;
  #L498f24.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.isUnsubscribed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L498ed0.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L498ed4.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/SerialSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L498eda.  v0:= temp;
  #L498edc.  return v0;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498f38.  v0:= v2.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.actual` @type ^`rx.Subscriber` @kind object;
  #L498f3c.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L498f42.  v0:= temp;
  #L498f44.  if v0 == 0 then goto L498f4a;
  #L498f48.  return @kind void;
  #L498f4a.  v0:= v2.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.actual` @type ^`rx.Subscriber` @kind object;
  #L498f4e.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L498f54.  v0:= v2.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L498f58.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L498f5e.  return @kind void;
  #L498f60.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L498f62.  v1:= v2.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L498f66.  call `unsubscribe`(v1) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L498f6c.  throw v0;
  catch `java.lang.Throwable` @[L498f4a..L498f54] goto L498f60;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498f8c.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.actual` @type ^`rx.Subscriber` @kind object;
  #L498f90.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L498f96.  v0:= temp;
  #L498f98.  if v0 == 0 then goto L498f9e;
  #L498f9c.  return @kind void;
  #L498f9e.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.actual` @type ^`rx.Subscriber` @kind object;
  #L498fa2.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L498fa8.  v2:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L498fac.  call `unsubscribe`(v2) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L498fb2.  return @kind void;
  #L498fb4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L498fb6.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L498fba.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L498fc0.  throw v2;
  catch `java.lang.Throwable` @[L498f9e..L498fa8] goto L498fb4;
}
procedure `void` `onRequested`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v0 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onRequested:()V` @AccessFlag  {
    temp;

  #L498fe0.  return @kind void;
}
procedure `void` `onUnsubscribed`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v0 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onUnsubscribed:()V` @AccessFlag  {
    temp;

  #L498ff4.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v1 @kind this, `long` v2 ) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L499008.  call temp:= `validate`(v2) @signature `Lrx/internal/operators/BackpressureUtils;.validate:(J)Z` @kind static;
  #L49900e.  v0:= temp;
  #L499010.  if v0 == 0 then goto L499020;
  #L499014.  call temp:= `getAndAddRequest`(v1, v2) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49901a.  call `onRequested`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onRequested:()V` @kind virtual;
  #L499020.  return @kind void;
}
procedure `long` `requested`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L498ef0.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.get:()J` @kind virtual;
  #L498ef6.  v0:= temp @kind wide;
  #L498ef8.  return v0 @kind wide;
}
procedure `void` `setCancellation`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v1 @kind this, `rx.functions.Cancellable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.setCancellation:(Lrx/functions/Cancellable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L499034.  v0:= new `rx.internal.operators.OnSubscribeFromEmitter$CancellableSubscription`;
  #L499038.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$CancellableSubscription;.<init>:(Lrx/functions/Cancellable;)V` @kind direct;
  #L49903e.  call `setSubscription`(v1, v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.setSubscription:(Lrx/Subscription;)V` @kind virtual;
  #L499044.  return @kind void;
}
procedure `void` `setSubscription`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.setSubscription:(Lrx/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L499058.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L49905c.  call `set`(v0, v2) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L499062.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.unsubscribe:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L499074.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L499078.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L49907e.  call `onUnsubscribed`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onUnsubscribed:()V` @kind virtual;
  #L499084.  return @kind void;
}
