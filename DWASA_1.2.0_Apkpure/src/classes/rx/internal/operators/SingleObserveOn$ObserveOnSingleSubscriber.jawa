record `rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.SingleSubscriber` `rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.actual` @AccessFlag FINAL;
  `java.lang.Throwable` `rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.error` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.value` @AccessFlag ;
  `rx.Scheduler$Worker` `rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object, `rx.Scheduler$Worker` v2 @kind object) @signature `Lrx/internal/operators/SingleObserveOn$ObserveOnSingleSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/Scheduler$Worker;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4afbb0.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4afbb6.  v0.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4afbba.  v0.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` := v2 @kind object;
  #L4afbbe.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber` v2 @kind this) @signature `Lrx/internal/operators/SingleObserveOn$ObserveOnSingleSubscriber;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afbd0.  v0:= v2.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4afbd4.  v1:= 0I;
  #L4afbd6.  if v0 == 0 then goto L4afbea;
  #L4afbda.  v2.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4afbde.  v1:= v2.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4afbe2.  call `onError`(v1, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4afbe8.  goto L4afbfc;
  #L4afbea.  v0:= v2.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4afbee.  v2.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4afbf2.  v1:= v2.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4afbf6.  call `onSuccess`(v1, v0) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4afbfc.  v0:= v2.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4afc00.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4afc06.  return @kind void;
  #L4afc08.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4afc0a.  v1:= v2.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4afc0e.  call `unsubscribe`(v1) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4afc14.  throw v0;
  catch `java.lang.Throwable` @[L4afbd0..L4afbfc] goto L4afc08;
}
procedure `void` `onError`(`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/SingleObserveOn$ObserveOnSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4afc34.  v0.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4afc38.  v1:= v0.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4afc3c.  call temp:= `schedule`(v1, v0) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4afc42.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleObserveOn$ObserveOnSingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4afc54.  v0.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4afc58.  v1:= v0.`rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4afc5c.  call temp:= `schedule`(v1, v0) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4afc62.  return @kind void;
}
