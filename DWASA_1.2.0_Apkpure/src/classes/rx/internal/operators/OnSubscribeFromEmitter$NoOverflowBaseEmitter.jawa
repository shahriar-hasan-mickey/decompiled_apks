record `rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseEmitter` @kind class @AccessFlag ABSTRACT extends `rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` @kind class {
}
global `long` `@@rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseEmitter` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L499634.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49963a.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseEmitter` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49964c.  v0:= v5.`rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseEmitter.actual` @type ^`rx.Subscriber` @kind object;
  #L499650.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L499656.  v0:= temp;
  #L499658.  if v0 == 0 then goto L49965e;
  #L49965c.  return @kind void;
  #L49965e.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.get:()J` @kind virtual;
  #L499664.  v0:= temp @kind wide;
  #L499666.  v2:= 0L;
  #L49966a.  v4:= lcmp(v0, v2);
  #L49966e.  if v4 == 0 then goto L499688;
  #L499672.  v0:= v5.`rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseEmitter.actual` @type ^`rx.Subscriber` @kind object;
  #L499676.  call `onNext`(v0, v6) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49967c.  v0:= 1L;
  #L499680.  call temp:= `produced`(v5, v0) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L499686.  goto L49968e;
  #L499688.  call `onOverflow`(v5) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.onOverflow:()V` @kind virtual;
  #L49968e.  return @kind void;
}
procedure `void` `onOverflow`() @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoOverflowBaseEmitter;.onOverflow:()V` @AccessFlag ABSTRACT {

  # return;
}
