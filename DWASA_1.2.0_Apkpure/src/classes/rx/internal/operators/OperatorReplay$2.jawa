record `rx.internal.operators.OperatorReplay$2` @kind class @AccessFlag FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.Func0` `rx.internal.operators.OperatorReplay$2.val$connectableFactory` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Func1` `rx.internal.operators.OperatorReplay$2.val$selector` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorReplay$2` v0 @kind this, `rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OperatorReplay$2;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a5e88.  v0.`rx.internal.operators.OperatorReplay$2.val$connectableFactory` @type ^`rx.functions.Func0` := v1 @kind object;
  #L4a5e8c.  v0.`rx.internal.operators.OperatorReplay$2.val$selector` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4a5e90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a5e96.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorReplay$2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorReplay$2;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a5ea8.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a5eac.  call `call`(v0, v1) @signature `Lrx/internal/operators/OperatorReplay$2;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4a5eb2.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorReplay$2` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorReplay$2;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a5ec4.  v0:= v2.`rx.internal.operators.OperatorReplay$2.val$connectableFactory` @type ^`rx.functions.Func0` @kind object;
  #L4a5ec8.  call temp:= `call`(v0) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L4a5ece.  v0:= temp @kind object;
  #L4a5ed0.  v0:= (`rx.observables.ConnectableObservable`) v0 @kind object;
  #L4a5ed4.  v1:= v2.`rx.internal.operators.OperatorReplay$2.val$selector` @type ^`rx.functions.Func1` @kind object;
  #L4a5ed8.  call temp:= `call`(v1, v0) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a5ede.  v1:= temp @kind object;
  #L4a5ee0.  v1:= (`rx.Observable`) v1 @kind object;
  #L4a5ee4.  call temp:= `subscribe`(v1, v3) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a5eea.  v1:= new `rx.internal.operators.OperatorReplay$2$1`;
  #L4a5eee.  call `<init>`(v1, v2, v3) @signature `Lrx/internal/operators/OperatorReplay$2$1;.<init>:(Lrx/internal/operators/OperatorReplay$2;Lrx/Subscriber;)V` @kind direct;
  #L4a5ef4.  call `connect`(v0, v1) @signature `Lrx/observables/ConnectableObservable;.connect:(Lrx/functions/Action1;)V` @kind virtual;
  #L4a5efa.  return @kind void;
  #L4a5efc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5efe.  call `throwOrReport`(v0, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4a5f04.  return @kind void;
  catch `java.lang.Throwable` @[L4a5ec4..L4a5ee4] goto L4a5efc;
}
