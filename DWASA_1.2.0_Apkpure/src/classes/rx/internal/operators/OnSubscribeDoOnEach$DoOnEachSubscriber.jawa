record `rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Observer` `rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.doOnEachObserver` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.done` @AccessFlag PRIVATE;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.subscriber` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.Observer` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeDoOnEach$DoOnEachSubscriber;.<init>:(Lrx/Subscriber;Lrx/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4982a4.  call `<init>`(v0, v1) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4982aa.  v0.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.subscriber` @type ^`rx.Subscriber` := v1 @kind object;
  #L4982ae.  v0.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.doOnEachObserver` @type ^`rx.Observer` := v2 @kind object;
  #L4982b2.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeDoOnEach$DoOnEachSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4982c4.  v0:= v1.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` @kind boolean;
  #L4982c8.  if v0 == 0 then goto L4982ce;
  #L4982cc.  return @kind void;
  #L4982ce.  v0:= v1.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.doOnEachObserver` @type ^`rx.Observer` @kind object;
  #L4982d2.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4982d8.  v0:= 1I;
  #L4982da.  v1.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4982de.  v0:= v1.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.subscriber` @type ^`rx.Subscriber` @kind object;
  #L4982e2.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4982e8.  return @kind void;
  #L4982ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4982ec.  call `throwOrReport`(v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4982f2.  return @kind void;
  catch `java.lang.Throwable` @[L4982ce..L4982d8] goto L4982ea;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribeDoOnEach$DoOnEachSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L498310.  v0:= v6.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` @kind boolean;
  #L498314.  if v0 == 0 then goto L498320;
  #L498318.  call `onError`(v7) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49831e.  return @kind void;
  #L498320.  v0:= 1I;
  #L498322.  v6.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L498326.  v1:= v6.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.doOnEachObserver` @type ^`rx.Observer` @kind object;
  #L49832a.  call `onError`(v1, v7) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L498330.  v0:= v6.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.subscriber` @type ^`rx.Subscriber` @kind object;
  #L498334.  call `onError`(v0, v7) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49833a.  return @kind void;
  #L49833c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49833e.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L498344.  v2:= v6.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.subscriber` @type ^`rx.Subscriber` @kind object;
  #L498348.  v3:= new `rx.exceptions.CompositeException`;
  #L49834c.  v4:= 2I;
  #L49834e.  v4:= new `java.lang.Throwable`[v4];
  #L498352.  v5:= 0I;
  #L498354.  v4[v5]:= v7 @kind object;
  #L498358.  v4[v0]:= v1 @kind object;
  #L49835c.  call temp:= `asList`(v4) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L498362.  v7:= temp @kind object;
  #L498364.  call `<init>`(v3, v7) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L49836a.  call `onError`(v2, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L498370.  return @kind void;
  catch `java.lang.Throwable` @[L498326..L498330] goto L49833c;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeDoOnEach$DoOnEachSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498390.  v0:= v1.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` @kind boolean;
  #L498394.  if v0 == 0 then goto L49839a;
  #L498398.  return @kind void;
  #L49839a.  v0:= v1.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.doOnEachObserver` @type ^`rx.Observer` @kind object;
  #L49839e.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4983a4.  v0:= v1.`rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.subscriber` @type ^`rx.Subscriber` @kind object;
  #L4983a8.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4983ae.  return @kind void;
  #L4983b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4983b2.  call `throwOrReport`(v0, v1, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4983b8.  return @kind void;
  catch `java.lang.Throwable` @[L49839a..L4983a4] goto L4983b0;
}
