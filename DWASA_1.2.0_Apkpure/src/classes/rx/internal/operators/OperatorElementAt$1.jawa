record `rx.internal.operators.OperatorElementAt$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `int` `rx.internal.operators.OperatorElementAt$1.currentIndex` @AccessFlag PRIVATE;
  `rx.internal.operators.OperatorElementAt` `rx.internal.operators.OperatorElementAt$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorElementAt$1.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorElementAt$1` v0 @kind this, `rx.internal.operators.OperatorElementAt` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorElementAt$1;.<init>:(Lrx/internal/operators/OperatorElementAt;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a11a8.  v0.`rx.internal.operators.OperatorElementAt$1.this$0` @type ^`rx.internal.operators.OperatorElementAt` := v1 @kind object;
  #L4a11ac.  v0.`rx.internal.operators.OperatorElementAt$1.val$child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a11b0.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a11b6.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorElementAt$1` v4 @kind this) @signature `Lrx/internal/operators/OperatorElementAt$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a11c8.  v0:= v4.`rx.internal.operators.OperatorElementAt$1.currentIndex` @type ^`int`;
  #L4a11cc.  v1:= v4.`rx.internal.operators.OperatorElementAt$1.this$0` @type ^`rx.internal.operators.OperatorElementAt` @kind object;
  #L4a11d0.  v1:= v1.`rx.internal.operators.OperatorElementAt.index` @type ^`int`;
  #L4a11d4.  if v0 > v1 then goto L4a1240;
  #L4a11d8.  v0:= v4.`rx.internal.operators.OperatorElementAt$1.this$0` @type ^`rx.internal.operators.OperatorElementAt` @kind object;
  #L4a11dc.  v0:= v0.`rx.internal.operators.OperatorElementAt.hasDefault` @type ^`boolean` @kind boolean;
  #L4a11e0.  if v0 == 0 then goto L4a1202;
  #L4a11e4.  v0:= v4.`rx.internal.operators.OperatorElementAt$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a11e8.  v1:= v4.`rx.internal.operators.OperatorElementAt$1.this$0` @type ^`rx.internal.operators.OperatorElementAt` @kind object;
  #L4a11ec.  v1:= v1.`rx.internal.operators.OperatorElementAt.defaultValue` @type ^`java.lang.Object` @kind object;
  #L4a11f0.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a11f6.  v0:= v4.`rx.internal.operators.OperatorElementAt$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a11fa.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a1200.  goto L4a1240;
  #L4a1202.  v0:= v4.`rx.internal.operators.OperatorElementAt$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a1206.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L4a120a.  v2:= new `java.lang.StringBuilder`;
  #L4a120e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a1214.  v3:= v4.`rx.internal.operators.OperatorElementAt$1.this$0` @type ^`rx.internal.operators.OperatorElementAt` @kind object;
  #L4a1218.  v3:= v3.`rx.internal.operators.OperatorElementAt.index` @type ^`int`;
  #L4a121c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a1222.  v3:= " is out of bounds" @kind object;
  #L4a1226.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a122c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a1232.  v2:= temp @kind object;
  #L4a1234.  call `<init>`(v1, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a123a.  call `onError`(v0, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a1240.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorElementAt$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorElementAt$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1254.  v0:= v1.`rx.internal.operators.OperatorElementAt$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a1258.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a125e.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorElementAt$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorElementAt$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1270.  v0:= v2.`rx.internal.operators.OperatorElementAt$1.currentIndex` @type ^`int`;
  #L4a1274.  v1:= v0 + 1;
  #L4a1278.  v2.`rx.internal.operators.OperatorElementAt$1.currentIndex` @type ^`int` := v1;
  #L4a127c.  v1:= v2.`rx.internal.operators.OperatorElementAt$1.this$0` @type ^`rx.internal.operators.OperatorElementAt` @kind object;
  #L4a1280.  v1:= v1.`rx.internal.operators.OperatorElementAt.index` @type ^`int`;
  #L4a1284.  if v0 != v1 then goto L4a12a2;
  #L4a1288.  v0:= v2.`rx.internal.operators.OperatorElementAt$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a128c.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1292.  v3:= v2.`rx.internal.operators.OperatorElementAt$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a1296.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a129c.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorElementAt$1;.unsubscribe:()V` @kind virtual;
  #L4a12a2.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorElementAt$1` v2 @kind this, `rx.Producer` v3 @kind object) @signature `Lrx/internal/operators/OperatorElementAt$1;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a12b4.  v0:= v2.`rx.internal.operators.OperatorElementAt$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a12b8.  v1:= new `rx.internal.operators.OperatorElementAt$InnerProducer`;
  #L4a12bc.  call `<init>`(v1, v3) @signature `Lrx/internal/operators/OperatorElementAt$InnerProducer;.<init>:(Lrx/Producer;)V` @kind direct;
  #L4a12c2.  call `setProducer`(v0, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a12c8.  return @kind void;
}
