record `rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter` @kind class @AccessFlag FINAL extends `rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` @kind class {
  `boolean` `rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.error` @AccessFlag ;
  `java.util.Queue` `rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.wip` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter` v0 @kind this, `rx.Subscriber` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.<init>:(Lrx/Subscriber;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L499098.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49909e.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4990a4.  v1:= temp;
  #L4990a6.  if v1 == 0 then goto L4990b6;
  #L4990aa.  v1:= new `rx.internal.util.unsafe.SpscUnboundedArrayQueue`;
  #L4990ae.  call `<init>`(v1, v2) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.<init>:(I)V` @kind direct;
  #L4990b4.  goto L4990c0;
  #L4990b6.  v1:= new `rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue`;
  #L4990ba.  call `<init>`(v1, v2) @signature `Lrx/internal/util/atomic/SpscUnboundedAtomicArrayQueue;.<init>:(I)V` @kind direct;
  #L4990c0.  v0.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L4990c4.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4990c8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4990ce.  v0.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4990d2.  return @kind void;
}
procedure `void` `drain`(`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter` v13 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4990e4.  v0:= v13.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4990e8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4990ee.  v0:= temp;
  #L4990f0.  if v0 == 0 then goto L4990f6;
  #L4990f4.  return @kind void;
  #L4990f6.  v0:= v13.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.actual` @type ^`rx.Subscriber` @kind object;
  #L4990fa.  v1:= v13.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.queue` @type ^`java.util.Queue` @kind object;
  #L4990fe.  v2:= 1I;
  #L499100.  v3:= 1I;
  #L499102.  call temp:= `get`(v13) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.get:()J` @kind virtual;
  #L499108.  v4:= temp @kind wide;
  #L49910a.  v6:= 0L;
  #L49910e.  v8:= v6 @kind wide;
  #L499110.  v10:= lcmp(v8, v4);
  #L499114.  if v10 == 0 then goto L49917e;
  #L499118.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49911e.  v10:= temp;
  #L499120.  if v10 == 0 then goto L49912c;
  #L499124.  call `clear`(v1) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L49912a.  return @kind void;
  #L49912c.  v10:= v13.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.done` @type ^`boolean` @kind boolean;
  #L499130.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L499136.  v11:= temp @kind object;
  #L499138.  if v11 != 0 then goto L499140;
  #L49913c.  v12:= 1I;
  #L49913e.  goto L499142;
  #L499140.  v12:= 0I;
  #L499142.  if v10 == 0 then goto L499162;
  #L499146.  if v12 == 0 then goto L499162;
  #L49914a.  v0:= v13.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L49914e.  if v0 == 0 then goto L49915a;
  #L499152.  call `onError`(v13, v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L499158.  goto L499160;
  #L49915a.  call `onCompleted`(v13) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onCompleted:()V` @kind super;
  #L499160.  return @kind void;
  #L499162.  if v12 == 0 then goto L499168;
  #L499166.  goto L49917e;
  #L499168.  call temp:= `getValue`(v11) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49916e.  v10:= temp @kind object;
  #L499170.  call `onNext`(v0, v10) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L499176.  v10:= 1L;
  #L49917a.  v8:= v8 + v10 @kind long;
  #L49917c.  goto L499110;
  #L49917e.  v10:= lcmp(v8, v4);
  #L499182.  if v10 != 0 then goto L4991c6;
  #L499186.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49918c.  v4:= temp;
  #L49918e.  if v4 == 0 then goto L49919a;
  #L499192.  call `clear`(v1) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L499198.  return @kind void;
  #L49919a.  v4:= v13.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.done` @type ^`boolean` @kind boolean;
  #L49919e.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4991a4.  v5:= temp;
  #L4991a6.  if v4 == 0 then goto L4991c6;
  #L4991aa.  if v5 == 0 then goto L4991c6;
  #L4991ae.  v0:= v13.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L4991b2.  if v0 == 0 then goto L4991be;
  #L4991b6.  call `onError`(v13, v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L4991bc.  goto L4991c4;
  #L4991be.  call `onCompleted`(v13) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onCompleted:()V` @kind super;
  #L4991c4.  return @kind void;
  #L4991c6.  v4:= lcmp(v8, v6);
  #L4991ca.  if v4 == 0 then goto L4991d4;
  #L4991ce.  call temp:= `produced`(v13, v8) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4991d4.  v4:= v13.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4991d8.  v3:= -v3 @kind int;
  #L4991da.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4991e0.  v3:= temp;
  #L4991e2.  if v3 != 0 then goto L499102;
  #L4991e6.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4991f8.  v0:= 1I;
  #L4991fa.  v1.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L4991fe.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.drain:()V` @kind virtual;
  #L499204.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L499218.  v0.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L49921c.  v1:= 1I;
  #L49921e.  v0.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.done` @type ^`boolean` := v1 @kind boolean;
  #L499222.  call `drain`(v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.drain:()V` @kind virtual;
  #L499228.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49923c.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.queue` @type ^`java.util.Queue` @kind object;
  #L499240.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L499246.  v2:= temp @kind object;
  #L499248.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49924e.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.drain:()V` @kind virtual;
  #L499254.  return @kind void;
}
procedure `void` `onRequested`(`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter` v0 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.onRequested:()V` @AccessFlag  {
    temp;

  #L499268.  call `drain`(v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.drain:()V` @kind virtual;
  #L49926e.  return @kind void;
}
procedure `void` `onUnsubscribed`(`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.onUnsubscribed:()V` @AccessFlag  {
    temp;
    v0;

  #L499280.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L499284.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49928a.  v0:= temp;
  #L49928c.  if v0 != 0 then goto L49929a;
  #L499290.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter.queue` @type ^`java.util.Queue` @kind object;
  #L499294.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L49929a.  return @kind void;
}
