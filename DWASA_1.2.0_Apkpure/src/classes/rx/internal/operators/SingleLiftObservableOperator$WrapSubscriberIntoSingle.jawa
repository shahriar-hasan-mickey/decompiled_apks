record `rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle.actual` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/SingleLiftObservableOperator$WrapSubscriberIntoSingle;.<init>:(Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4afa88.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4afa8e.  v0.`rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L4afa92.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/SingleLiftObservableOperator$WrapSubscriberIntoSingle;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afaa4.  v0:= v1.`rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle.actual` @type ^`rx.Subscriber` @kind object;
  #L4afaa8.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4afaae.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/SingleLiftObservableOperator$WrapSubscriberIntoSingle;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afac0.  v0:= v2.`rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle.actual` @type ^`rx.Subscriber` @kind object;
  #L4afac4.  v1:= new `rx.internal.producers.SingleProducer`;
  #L4afac8.  call `<init>`(v1, v0, v3) @signature `Lrx/internal/producers/SingleProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L4aface.  call `setProducer`(v0, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4afad4.  return @kind void;
}
