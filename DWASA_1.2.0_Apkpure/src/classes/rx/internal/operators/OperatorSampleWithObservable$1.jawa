record `rx.internal.operators.OperatorSampleWithObservable$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OperatorSampleWithObservable` `rx.internal.operators.OperatorSampleWithObservable$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorSampleWithObservable$1.val$main` @AccessFlag FINAL_SYNTHETIC;
  `rx.observers.SerializedSubscriber` `rx.internal.operators.OperatorSampleWithObservable$1.val$s` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorSampleWithObservable$1.val$value` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSampleWithObservable$1` v0 @kind this, `rx.internal.operators.OperatorSampleWithObservable` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object, `rx.observers.SerializedSubscriber` v3 @kind object, `java.util.concurrent.atomic.AtomicReference` v4 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable$1;.<init>:(Lrx/internal/operators/OperatorSampleWithObservable;Ljava/util/concurrent/atomic/AtomicReference;Lrx/observers/SerializedSubscriber;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a787c.  v0.`rx.internal.operators.OperatorSampleWithObservable$1.this$0` @type ^`rx.internal.operators.OperatorSampleWithObservable` := v1 @kind object;
  #L4a7880.  v0.`rx.internal.operators.OperatorSampleWithObservable$1.val$value` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4a7884.  v0.`rx.internal.operators.OperatorSampleWithObservable$1.val$s` @type ^`rx.observers.SerializedSubscriber` := v3 @kind object;
  #L4a7888.  v0.`rx.internal.operators.OperatorSampleWithObservable$1.val$main` @type ^`java.util.concurrent.atomic.AtomicReference` := v4 @kind object;
  #L4a788c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a7892.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSampleWithObservable$1` v1 @kind this) @signature `Lrx/internal/operators/OperatorSampleWithObservable$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a78a4.  v0:= 0I;
  #L4a78a6.  call `onNext`(v1, v0) @signature `Lrx/internal/operators/OperatorSampleWithObservable$1;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a78ac.  v0:= v1.`rx.internal.operators.OperatorSampleWithObservable$1.val$s` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4a78b0.  call `onCompleted`(v0) @signature `Lrx/observers/SerializedSubscriber;.onCompleted:()V` @kind virtual;
  #L4a78b6.  v0:= v1.`rx.internal.operators.OperatorSampleWithObservable$1.val$main` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a78ba.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a78c0.  v0:= temp @kind object;
  #L4a78c2.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4a78c6.  call `unsubscribe`(v0) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4a78cc.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSampleWithObservable$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a78e0.  v0:= v1.`rx.internal.operators.OperatorSampleWithObservable$1.val$s` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4a78e4.  call `onError`(v0, v2) @signature `Lrx/observers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a78ea.  v2:= v1.`rx.internal.operators.OperatorSampleWithObservable$1.val$main` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a78ee.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a78f4.  v2:= temp @kind object;
  #L4a78f6.  v2:= (`rx.Subscription`) v2 @kind object;
  #L4a78fa.  call `unsubscribe`(v2) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4a7900.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSampleWithObservable$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7914.  v2:= v1.`rx.internal.operators.OperatorSampleWithObservable$1.val$value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a7918.  v0:= `@@rx.internal.operators.OperatorSampleWithObservable.EMPTY_TOKEN` @type ^`java.lang.Object` @kind object;
  #L4a791c.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a7922.  v2:= temp @kind object;
  #L4a7924.  v0:= `@@rx.internal.operators.OperatorSampleWithObservable.EMPTY_TOKEN` @type ^`java.lang.Object` @kind object;
  #L4a7928.  if v2 == v0 then goto L4a7936;
  #L4a792c.  v0:= v1.`rx.internal.operators.OperatorSampleWithObservable$1.val$s` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4a7930.  call `onNext`(v0, v2) @signature `Lrx/observers/SerializedSubscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a7936.  return @kind void;
}
