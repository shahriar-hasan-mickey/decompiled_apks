record `rx.internal.operators.OperatorReplay$ReplaySubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.Subscription` @kind interface {
  `rx.internal.operators.OperatorReplay$ReplayBuffer` `rx.internal.operators.OperatorReplay$ReplaySubscriber.buffer` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinateAll` @AccessFlag ;
  `java.util.List` `rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinationQueue` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorReplay$ReplaySubscriber.done` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorReplay$ReplaySubscriber.emitting` @AccessFlag ;
  `long` `rx.internal.operators.OperatorReplay$ReplaySubscriber.maxChildRequested` @AccessFlag ;
  `long` `rx.internal.operators.OperatorReplay$ReplaySubscriber.maxUpstreamRequested` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorReplay$ReplaySubscriber.missed` @AccessFlag ;
  `rx.Producer` `rx.internal.operators.OperatorReplay$ReplaySubscriber.producer` @AccessFlag VOLATILE;
  `rx.internal.util.OpenHashSet` `rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @AccessFlag FINAL;
  `rx.internal.operators.OperatorReplay$InnerProducer`[] `rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCache` @AccessFlag ;
  `long` `rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCacheVersion` @AccessFlag ;
  `long` `rx.internal.operators.OperatorReplay$ReplaySubscriber.producersVersion` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OperatorReplay$ReplaySubscriber.shouldConnect` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorReplay$ReplaySubscriber.terminated` @AccessFlag VOLATILE;
}
global `rx.internal.operators.OperatorReplay$InnerProducer`[] `@@rx.internal.operators.OperatorReplay$ReplaySubscriber.EMPTY` @AccessFlag STATIC_FINAL;
global `rx.internal.operators.OperatorReplay$InnerProducer`[] `@@rx.internal.operators.OperatorReplay$ReplaySubscriber.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a6a1c.  v0:= 0I;
  #L4a6a1e.  v1:= new `rx.internal.operators.OperatorReplay$InnerProducer`[v0];
  #L4a6a22.  `@@rx.internal.operators.OperatorReplay$ReplaySubscriber.EMPTY` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] := v1 @kind object;
  #L4a6a26.  v0:= new `rx.internal.operators.OperatorReplay$InnerProducer`[v0];
  #L4a6a2a.  `@@rx.internal.operators.OperatorReplay$ReplaySubscriber.TERMINATED` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] := v0 @kind object;
  #L4a6a2e.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v2 @kind this, `rx.internal.operators.OperatorReplay$ReplayBuffer` v3 @kind object) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.<init>:(Lrx/internal/operators/OperatorReplay$ReplayBuffer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a6a40.  call `<init>`(v2) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a6a46.  v2.`rx.internal.operators.OperatorReplay$ReplaySubscriber.buffer` @type ^`rx.internal.operators.OperatorReplay$ReplayBuffer` := v3 @kind object;
  #L4a6a4a.  v3:= new `rx.internal.util.OpenHashSet`;
  #L4a6a4e.  call `<init>`(v3) @signature `Lrx/internal/util/OpenHashSet;.<init>:()V` @kind direct;
  #L4a6a54.  v2.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` := v3 @kind object;
  #L4a6a58.  v3:= `@@rx.internal.operators.OperatorReplay$ReplaySubscriber.EMPTY` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] @kind object;
  #L4a6a5c.  v2.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCache` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] := v3 @kind object;
  #L4a6a60.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a6a64.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a6a6a.  v2.`rx.internal.operators.OperatorReplay$ReplaySubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L4a6a6e.  v0:= 0L;
  #L4a6a72.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.request:(J)V` @kind virtual;
  #L4a6a78.  return @kind void;
}
procedure `boolean` `add`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v5 @kind this, `rx.internal.operators.OperatorReplay$InnerProducer` v6 @kind object) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.add:(Lrx/internal/operators/OperatorReplay$InnerProducer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a6964.  if v6 == 0 then goto L4a69aa;
  #L4a6968.  v0:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.terminated` @type ^`boolean` @kind boolean;
  #L4a696c.  v1:= 0I;
  #L4a696e.  if v0 == 0 then goto L4a6974;
  #L4a6972.  return v1;
  #L4a6974.  v0:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a6978.  @monitorenter v0
  #L4a697a.  v2:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.terminated` @type ^`boolean` @kind boolean;
  #L4a697e.  if v2 == 0 then goto L4a6986;
  #L4a6982.  @monitorexit v0
  #L4a6984.  return v1;
  #L4a6986.  v1:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a698a.  call temp:= `add`(v1, v6) @signature `Lrx/internal/util/OpenHashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a6990.  v1:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersVersion` @type ^`long` @kind wide;
  #L4a6994.  v3:= 1L;
  #L4a6998.  v1:= v1 + v3 @kind long;
  #L4a699a.  v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersVersion` @type ^`long` := v1 @kind wide;
  #L4a699e.  @monitorexit v0
  #L4a69a0.  v6:= 1I;
  #L4a69a2.  return v6;
  #L4a69a4.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a69a6.  @monitorexit v0
  #L4a69a8.  throw v6;
  #L4a69aa.  v6:= new `java.lang.NullPointerException`;
  #L4a69ae.  call `<init>`(v6) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L4a69b4.  throw v6;
  catch `java.lang.Throwable` @[L4a697a..L4a69a8] goto L4a69a4;
}
procedure `rx.internal.operators.OperatorReplay$InnerProducer`[] `copyProducers`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v5 @kind this) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.copyProducers:()[Lrx/internal/operators/OperatorReplay$InnerProducer;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a69d4.  v0:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a69d8.  @monitorenter v0
  #L4a69da.  v1:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a69de.  call temp:= `values`(v1) @signature `Lrx/internal/util/OpenHashSet;.values:()[Ljava/lang/Object;` @kind virtual;
  #L4a69e4.  v1:= temp @kind object;
  #L4a69e6.  v2:= length @variable v1;
  #L4a69e8.  v3:= new `rx.internal.operators.OperatorReplay$InnerProducer`[v2];
  #L4a69ec.  v4:= 0I;
  #L4a69ee.  call `arraycopy`(v1, v4, v3, v4, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4a69f4.  @monitorexit v0
  #L4a69f6.  return v3 @kind object;
  #L4a69f8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a69fa.  @monitorexit v0
  #L4a69fc.  throw v1;
  catch `java.lang.Throwable` @[L4a69da..L4a69fc] goto L4a69f8;
}
procedure `void` `init`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.init:()V` @AccessFlag  {
    temp;
    v0;

  #L4a6a8c.  v0:= new `rx.internal.operators.OperatorReplay$ReplaySubscriber$1`;
  #L4a6a90.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber$1;.<init>:(Lrx/internal/operators/OperatorReplay$ReplaySubscriber;)V` @kind direct;
  #L4a6a96.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4a6a9c.  v0:= temp @kind object;
  #L4a6a9e.  call `add`(v1, v0) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a6aa4.  return @kind void;
}
procedure `void` `makeRequest`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.makeRequest:(JJ)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a6ab8.  v0:= v6.`rx.internal.operators.OperatorReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` @kind wide;
  #L4a6abc.  v2:= v6.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producer` @type ^`rx.Producer` @kind object;
  #L4a6ac0.  v9:= v7 - v9 @kind long;
  #L4a6ac4.  v3:= 0L;
  #L4a6ac8.  v5:= lcmp(v9, v3);
  #L4a6acc.  if v5 == 0 then goto L4a6b10;
  #L4a6ad0.  v6.`rx.internal.operators.OperatorReplay$ReplaySubscriber.maxChildRequested` @type ^`long` := v7 @kind wide;
  #L4a6ad4.  if v2 == 0 then goto L4a6af6;
  #L4a6ad8.  v7:= lcmp(v0, v3);
  #L4a6adc.  if v7 == 0 then goto L4a6aee;
  #L4a6ae0.  v6.`rx.internal.operators.OperatorReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v3 @kind wide;
  #L4a6ae4.  v0:= v0 + v9 @kind long;
  #L4a6ae6.  call `request`(v2, v0) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a6aec.  goto L4a6b26;
  #L4a6aee.  call `request`(v2, v9) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a6af4.  goto L4a6b26;
  #L4a6af6.  v0:= v0 + v9 @kind long;
  #L4a6af8.  v7:= lcmp(v0, v3);
  #L4a6afc.  if v7 >= 0 then goto L4a6b0a;
  #L4a6b00.  v0:= 9223372036854775807L;
  #L4a6b0a.  v6.`rx.internal.operators.OperatorReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v0 @kind wide;
  #L4a6b0e.  goto L4a6b26;
  #L4a6b10.  v7:= lcmp(v0, v3);
  #L4a6b14.  if v7 == 0 then goto L4a6b26;
  #L4a6b18.  if v2 == 0 then goto L4a6b26;
  #L4a6b1c.  v6.`rx.internal.operators.OperatorReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v3 @kind wide;
  #L4a6b20.  call `request`(v2, v0) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a6b26.  return @kind void;
}
procedure `void` `manageRequests`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v9 @kind this, `rx.internal.operators.OperatorReplay$InnerProducer` v10 @kind object) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.manageRequests:(Lrx/internal/operators/OperatorReplay$InnerProducer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a6b38.  call temp:= `isUnsubscribed`(v9) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a6b3e.  v0:= temp;
  #L4a6b40.  if v0 == 0 then goto L4a6b46;
  #L4a6b44.  return @kind void;
  #L4a6b46.  @monitorenter v9
  #L4a6b48.  v0:= v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4a6b4c.  v1:= 1I;
  #L4a6b4e.  if v0 == 0 then goto L4a6b80;
  #L4a6b52.  if v10 == 0 then goto L4a6b74;
  #L4a6b56.  v0:= v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinationQueue` @type ^`java.util.List` @kind object;
  #L4a6b5a.  if v0 != 0 then goto L4a6b6c;
  #L4a6b5e.  v0:= new `java.util.ArrayList`;
  #L4a6b62.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4a6b68.  v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinationQueue` @type ^`java.util.List` := v0 @kind object;
  #L4a6b6c.  call temp:= `add`(v0, v10) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4a6b72.  goto L4a6b78;
  #L4a6b74.  v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinateAll` @type ^`boolean` := v1 @kind boolean;
  #L4a6b78.  v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.missed` @type ^`boolean` := v1 @kind boolean;
  #L4a6b7c.  @monitorexit v9
  #L4a6b7e.  return @kind void;
  #L4a6b80.  v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4a6b84.  @monitorexit v9
  #L4a6b86.  v0:= v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.maxChildRequested` @type ^`long` @kind wide;
  #L4a6b8a.  v2:= 0I;
  #L4a6b8c.  if v10 == 0 then goto L4a6ba6;
  #L4a6b90.  v10:= v10.`rx.internal.operators.OperatorReplay$InnerProducer.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6b94.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a6b9a.  v3:= temp @kind wide;
  #L4a6b9c.  call temp:= `max`(v0, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4a6ba2.  v3:= temp @kind wide;
  #L4a6ba4.  goto L4a6bdc;
  #L4a6ba6.  call temp:= `copyProducers`(v9) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.copyProducers:()[Lrx/internal/operators/OperatorReplay$InnerProducer;` @kind virtual;
  #L4a6bac.  v10:= temp @kind object;
  #L4a6bae.  v3:= length @variable v10;
  #L4a6bb0.  v5:= v0 @kind wide;
  #L4a6bb2.  v4:= 0I;
  #L4a6bb4.  if v4 >= v3 then goto L4a6bda;
  #L4a6bb8.  v7:= v10[v4] @kind object;
  #L4a6bbc.  if v7 == 0 then goto L4a6bd4;
  #L4a6bc0.  v7:= v7.`rx.internal.operators.OperatorReplay$InnerProducer.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6bc4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a6bca.  v7:= temp @kind wide;
  #L4a6bcc.  call temp:= `max`(v5, v7) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4a6bd2.  v5:= temp @kind wide;
  #L4a6bd4.  v4:= v4 + 1;
  #L4a6bd8.  goto L4a6bb4;
  #L4a6bda.  v3:= v5 @kind wide;
  #L4a6bdc.  call `makeRequest`(v9, v3, v0) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.makeRequest:(JJ)V` @kind virtual;
  #L4a6be2.  call temp:= `isUnsubscribed`(v9) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a6be8.  v10:= temp;
  #L4a6bea.  if v10 == 0 then goto L4a6bf0;
  #L4a6bee.  return @kind void;
  #L4a6bf0.  @monitorenter v9
  #L4a6bf2.  v10:= v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.missed` @type ^`boolean` @kind boolean;
  #L4a6bf6.  if v10 != 0 then goto L4a6c02;
  #L4a6bfa.  v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.emitting` @type ^`boolean` := v2 @kind boolean;
  #L4a6bfe.  @monitorexit v9
  #L4a6c00.  return @kind void;
  #L4a6c02.  v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.missed` @type ^`boolean` := v2 @kind boolean;
  #L4a6c06.  v10:= v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinationQueue` @type ^`java.util.List` @kind object;
  #L4a6c0a.  v0:= 0I;
  #L4a6c0c.  v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinationQueue` @type ^`java.util.List` := v0 @kind object;
  #L4a6c10.  v0:= v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinateAll` @type ^`boolean` @kind boolean;
  #L4a6c14.  v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.coordinateAll` @type ^`boolean` := v2 @kind boolean;
  #L4a6c18.  @monitorexit v9
  #L4a6c1a.  v3:= v9.`rx.internal.operators.OperatorReplay$ReplaySubscriber.maxChildRequested` @type ^`long` @kind wide;
  #L4a6c1e.  if v10 == 0 then goto L4a6c5a;
  #L4a6c22.  call temp:= `iterator`(v10) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a6c28.  v10:= temp @kind object;
  #L4a6c2a.  v5:= v3 @kind wide;
  #L4a6c2c.  call temp:= `hasNext`(v10) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a6c32.  v1:= temp;
  #L4a6c34.  if v1 == 0 then goto L4a6c5c;
  #L4a6c38.  call temp:= `next`(v10) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a6c3e.  v1:= temp @kind object;
  #L4a6c40.  v1:= (`rx.internal.operators.OperatorReplay$InnerProducer`) v1 @kind object;
  #L4a6c44.  v1:= v1.`rx.internal.operators.OperatorReplay$InnerProducer.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6c48.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a6c4e.  v7:= temp @kind wide;
  #L4a6c50.  call temp:= `max`(v5, v7) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4a6c56.  v5:= temp @kind wide;
  #L4a6c58.  goto L4a6c2c;
  #L4a6c5a.  v5:= v3 @kind wide;
  #L4a6c5c.  if v0 == 0 then goto L4a6c92;
  #L4a6c60.  call temp:= `copyProducers`(v9) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.copyProducers:()[Lrx/internal/operators/OperatorReplay$InnerProducer;` @kind virtual;
  #L4a6c66.  v10:= temp @kind object;
  #L4a6c68.  v0:= length @variable v10;
  #L4a6c6a.  v1:= 0I;
  #L4a6c6c.  if v1 >= v0 then goto L4a6c92;
  #L4a6c70.  v7:= v10[v1] @kind object;
  #L4a6c74.  if v7 == 0 then goto L4a6c8c;
  #L4a6c78.  v7:= v7.`rx.internal.operators.OperatorReplay$InnerProducer.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6c7c.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a6c82.  v7:= temp @kind wide;
  #L4a6c84.  call temp:= `max`(v5, v7) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4a6c8a.  v5:= temp @kind wide;
  #L4a6c8c.  v1:= v1 + 1;
  #L4a6c90.  goto L4a6c6c;
  #L4a6c92.  call `makeRequest`(v9, v5, v3) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.makeRequest:(JJ)V` @kind virtual;
  #L4a6c98.  goto L4a6be2;
  #L4a6c9a.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a6c9c.  @monitorexit v9
  #L4a6c9e.  throw v10;
  #L4a6ca0.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a6ca2.  @monitorexit v9
  #L4a6ca4.  goto L4a6ca8;
  #L4a6ca6.  throw v10;
  #L4a6ca8.  goto L4a6ca6;
  catch `java.lang.Throwable` @[L4a6b48..L4a6b86] goto L4a6ca0;
  catch `java.lang.Throwable` @[L4a6bf2..L4a6c1a] goto L4a6c9a;
  catch `java.lang.Throwable` @[L4a6c9c..L4a6c9e] goto L4a6c9a;
  catch `java.lang.Throwable` @[L4a6ca2..L4a6ca4] goto L4a6ca0;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6ce4.  v0:= v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L4a6ce8.  if v0 != 0 then goto L4a6d14;
  #L4a6cec.  v0:= 1I;
  #L4a6cee.  v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4a6cf2.  v0:= v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.buffer` @type ^`rx.internal.operators.OperatorReplay$ReplayBuffer` @kind object;
  #L4a6cf6.  call `complete`(v0) @signature `Lrx/internal/operators/OperatorReplay$ReplayBuffer;.complete:()V` @kind interface;
  #L4a6cfc.  call `replay`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.replay:()V` @kind virtual;
  #L4a6d02.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.unsubscribe:()V` @kind virtual;
  #L4a6d08.  goto L4a6d14;
  #L4a6d0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a6d0c.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.unsubscribe:()V` @kind virtual;
  #L4a6d12.  throw v0;
  #L4a6d14.  return @kind void;
  catch `java.lang.Throwable` @[L4a6cf2..L4a6d02] goto L4a6d0a;
}
procedure `void` `onError`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6d34.  v0:= v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L4a6d38.  if v0 != 0 then goto L4a6d64;
  #L4a6d3c.  v0:= 1I;
  #L4a6d3e.  v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4a6d42.  v0:= v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.buffer` @type ^`rx.internal.operators.OperatorReplay$ReplayBuffer` @kind object;
  #L4a6d46.  call `error`(v0, v2) @signature `Lrx/internal/operators/OperatorReplay$ReplayBuffer;.error:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a6d4c.  call `replay`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.replay:()V` @kind virtual;
  #L4a6d52.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.unsubscribe:()V` @kind virtual;
  #L4a6d58.  goto L4a6d64;
  #L4a6d5a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a6d5c.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.unsubscribe:()V` @kind virtual;
  #L4a6d62.  throw v2;
  #L4a6d64.  return @kind void;
  catch `java.lang.Throwable` @[L4a6d42..L4a6d52] goto L4a6d5a;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6d84.  v0:= v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L4a6d88.  if v0 != 0 then goto L4a6d9c;
  #L4a6d8c.  v0:= v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.buffer` @type ^`rx.internal.operators.OperatorReplay$ReplayBuffer` @kind object;
  #L4a6d90.  call `next`(v0, v2) @signature `Lrx/internal/operators/OperatorReplay$ReplayBuffer;.next:(Ljava/lang/Object;)V` @kind interface;
  #L4a6d96.  call `replay`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.replay:()V` @kind virtual;
  #L4a6d9c.  return @kind void;
}
procedure `void` `remove`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v5 @kind this, `rx.internal.operators.OperatorReplay$InnerProducer` v6 @kind object) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.remove:(Lrx/internal/operators/OperatorReplay$InnerProducer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a6db0.  v0:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.terminated` @type ^`boolean` @kind boolean;
  #L4a6db4.  if v0 == 0 then goto L4a6dba;
  #L4a6db8.  return @kind void;
  #L4a6dba.  v0:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a6dbe.  @monitorenter v0
  #L4a6dc0.  v1:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.terminated` @type ^`boolean` @kind boolean;
  #L4a6dc4.  if v1 == 0 then goto L4a6dcc;
  #L4a6dc8.  @monitorexit v0
  #L4a6dca.  return @kind void;
  #L4a6dcc.  v1:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a6dd0.  call temp:= `remove`(v1, v6) @signature `Lrx/internal/util/OpenHashSet;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a6dd6.  v6:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a6dda.  call temp:= `isEmpty`(v6) @signature `Lrx/internal/util/OpenHashSet;.isEmpty:()Z` @kind virtual;
  #L4a6de0.  v6:= temp;
  #L4a6de2.  if v6 == 0 then goto L4a6dee;
  #L4a6de6.  v6:= `@@rx.internal.operators.OperatorReplay$ReplaySubscriber.EMPTY` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] @kind object;
  #L4a6dea.  v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCache` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] := v6 @kind object;
  #L4a6dee.  v1:= v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersVersion` @type ^`long` @kind wide;
  #L4a6df2.  v3:= 1L;
  #L4a6df6.  v1:= v1 + v3 @kind long;
  #L4a6df8.  v5.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersVersion` @type ^`long` := v1 @kind wide;
  #L4a6dfc.  @monitorexit v0
  #L4a6dfe.  return @kind void;
  #L4a6e00.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a6e02.  @monitorexit v0
  #L4a6e04.  throw v6;
  catch `java.lang.Throwable` @[L4a6dc0..L4a6e04] goto L4a6e00;
}
procedure `void` `replay`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v7 @kind this) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.replay:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4a6e24.  v0:= v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCache` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] @kind object;
  #L4a6e28.  v1:= v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCacheVersion` @type ^`long` @kind wide;
  #L4a6e2c.  v3:= v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersVersion` @type ^`long` @kind wide;
  #L4a6e30.  v5:= 0I;
  #L4a6e32.  v6:= lcmp(v1, v3);
  #L4a6e36.  if v6 == 0 then goto L4a6e78;
  #L4a6e3a.  v1:= v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a6e3e.  @monitorenter v1
  #L4a6e40.  v0:= v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCache` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] @kind object;
  #L4a6e44.  v2:= v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producers` @type ^`rx.internal.util.OpenHashSet` @kind object;
  #L4a6e48.  call temp:= `values`(v2) @signature `Lrx/internal/util/OpenHashSet;.values:()[Ljava/lang/Object;` @kind virtual;
  #L4a6e4e.  v2:= temp @kind object;
  #L4a6e50.  v3:= length @variable v2;
  #L4a6e52.  v4:= length @variable v0;
  #L4a6e54.  if v4 == v3 then goto L4a6e60;
  #L4a6e58.  v0:= new `rx.internal.operators.OperatorReplay$InnerProducer`[v3];
  #L4a6e5c.  v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCache` @type ^`rx.internal.operators.OperatorReplay$InnerProducer`[] := v0 @kind object;
  #L4a6e60.  call `arraycopy`(v2, v5, v0, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4a6e66.  v2:= v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersVersion` @type ^`long` @kind wide;
  #L4a6e6a.  v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producersCacheVersion` @type ^`long` := v2 @kind wide;
  #L4a6e6e.  @monitorexit v1
  #L4a6e70.  goto L4a6e78;
  #L4a6e72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a6e74.  @monitorexit v1
  #L4a6e76.  throw v0;
  #L4a6e78.  v1:= v7.`rx.internal.operators.OperatorReplay$ReplaySubscriber.buffer` @type ^`rx.internal.operators.OperatorReplay$ReplayBuffer` @kind object;
  #L4a6e7c.  v2:= length @variable v0;
  #L4a6e7e.  if v5 >= v2 then goto L4a6e96;
  #L4a6e82.  v3:= v0[v5] @kind object;
  #L4a6e86.  if v3 == 0 then goto L4a6e90;
  #L4a6e8a.  call `replay`(v1, v3) @signature `Lrx/internal/operators/OperatorReplay$ReplayBuffer;.replay:(Lrx/internal/operators/OperatorReplay$InnerProducer;)V` @kind interface;
  #L4a6e90.  v5:= v5 + 1;
  #L4a6e94.  goto L4a6e7e;
  #L4a6e96.  return @kind void;
  catch `java.lang.Throwable` @[L4a6e40..L4a6e76] goto L4a6e72;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorReplay$ReplaySubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6eb4.  v0:= v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producer` @type ^`rx.Producer` @kind object;
  #L4a6eb8.  if v0 != 0 then goto L4a6ed0;
  #L4a6ebc.  v1.`rx.internal.operators.OperatorReplay$ReplaySubscriber.producer` @type ^`rx.Producer` := v2 @kind object;
  #L4a6ec0.  v2:= 0I;
  #L4a6ec2.  call `manageRequests`(v1, v2) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.manageRequests:(Lrx/internal/operators/OperatorReplay$InnerProducer;)V` @kind virtual;
  #L4a6ec8.  call `replay`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.replay:()V` @kind virtual;
  #L4a6ece.  return @kind void;
  #L4a6ed0.  v2:= new `java.lang.IllegalStateException`;
  #L4a6ed4.  v0:= "Only a single producer can be set on a Subscriber." @kind object;
  #L4a6ed8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a6ede.  throw v2;
}
