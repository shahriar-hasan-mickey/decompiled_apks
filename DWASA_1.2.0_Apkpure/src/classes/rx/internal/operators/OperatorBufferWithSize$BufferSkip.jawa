record `rx.internal.operators.OperatorBufferWithSize$BufferSkip` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorBufferWithSize$BufferSkip.actual` @AccessFlag FINAL;
  `java.util.List` `rx.internal.operators.OperatorBufferWithSize$BufferSkip.buffer` @AccessFlag ;
  `int` `rx.internal.operators.OperatorBufferWithSize$BufferSkip.count` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorBufferWithSize$BufferSkip.index` @AccessFlag ;
  `int` `rx.internal.operators.OperatorBufferWithSize$BufferSkip.skip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip` v0 @kind this, `rx.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.<init>:(Lrx/Subscriber;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49e96c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49e972.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L49e976.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.count` @type ^`int` := v2;
  #L49e97a.  v0.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.skip` @type ^`int` := v3;
  #L49e97e.  v1:= 0L;
  #L49e982.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.request:(J)V` @kind virtual;
  #L49e988.  return @kind void;
}
procedure `void` `access$100`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.access$100:(Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49e99c.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.request:(J)V` @kind virtual;
  #L49e9a2.  return @kind void;
}
procedure `void` `access$200`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.access$200:(Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49e9b4.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.request:(J)V` @kind virtual;
  #L49e9ba.  return @kind void;
}
procedure `rx.Producer` `createProducer`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip` v1 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.createProducer:()Lrx/Producer;` @AccessFlag  {
    temp;
    v0;

  #L49e950.  v0:= new `rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer`;
  #L49e954.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip$BufferSkipProducer;.<init>:(Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;)V` @kind direct;
  #L49e95a.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip` v2 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e9cc.  v0:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.buffer` @type ^`java.util.List` @kind object;
  #L49e9d0.  if v0 == 0 then goto L49e9e4;
  #L49e9d4.  v1:= 0I;
  #L49e9d6.  v2.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.buffer` @type ^`java.util.List` := v1 @kind object;
  #L49e9da.  v1:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.actual` @type ^`rx.Subscriber` @kind object;
  #L49e9de.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49e9e4.  v0:= v2.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.actual` @type ^`rx.Subscriber` @kind object;
  #L49e9e8.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49e9ee.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ea00.  v0:= 0I;
  #L49ea02.  v1.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.buffer` @type ^`java.util.List` := v0 @kind object;
  #L49ea06.  v0:= v1.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.actual` @type ^`rx.Subscriber` @kind object;
  #L49ea0a.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49ea10.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorBufferWithSize$BufferSkip` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49ea24.  v0:= v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.index` @type ^`long` @kind wide;
  #L49ea28.  v2:= v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.buffer` @type ^`java.util.List` @kind object;
  #L49ea2c.  v3:= 0L;
  #L49ea30.  v5:= lcmp(v0, v3);
  #L49ea34.  if v5 != 0 then goto L49ea4a;
  #L49ea38.  v2:= new `java.util.ArrayList`;
  #L49ea3c.  v5:= v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.count` @type ^`int`;
  #L49ea40.  call `<init>`(v2, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L49ea46.  v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.buffer` @type ^`java.util.List` := v2 @kind object;
  #L49ea4a.  v5:= 1L;
  #L49ea4e.  v0:= v0 + v5 @kind long;
  #L49ea50.  v5:= v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.skip` @type ^`int`;
  #L49ea54.  v5:= (`long`) v5 @kind i2l;
  #L49ea56.  v7:= lcmp(v0, v5);
  #L49ea5a.  if v7 != 0 then goto L49ea64;
  #L49ea5e.  v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.index` @type ^`long` := v3 @kind wide;
  #L49ea62.  goto L49ea68;
  #L49ea64.  v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.index` @type ^`long` := v0 @kind wide;
  #L49ea68.  if v2 == 0 then goto L49ea92;
  #L49ea6c.  call temp:= `add`(v2, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49ea72.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49ea78.  v9:= temp;
  #L49ea7a.  v0:= v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.count` @type ^`int`;
  #L49ea7e.  if v9 != v0 then goto L49ea92;
  #L49ea82.  v9:= 0I;
  #L49ea84.  v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.buffer` @type ^`java.util.List` := v9 @kind object;
  #L49ea88.  v9:= v8.`rx.internal.operators.OperatorBufferWithSize$BufferSkip.actual` @type ^`rx.Subscriber` @kind object;
  #L49ea8c.  call `onNext`(v9, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49ea92.  return @kind void;
}
