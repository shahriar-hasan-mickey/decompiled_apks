record `rx.internal.operators.OnSubscribeAutoConnect` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.Action1` `rx.internal.operators.OnSubscribeAutoConnect.connection` @AccessFlag FINAL;
  `int` `rx.internal.operators.OnSubscribeAutoConnect.numberOfSubscribers` @AccessFlag FINAL;
  `rx.observables.ConnectableObservable` `rx.internal.operators.OnSubscribeAutoConnect.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeAutoConnect` v0 @kind this, `rx.observables.ConnectableObservable` v1 @kind object, `int` v2 , `rx.functions.Action1` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeAutoConnect;.<init>:(Lrx/observables/ConnectableObservable;ILrx/functions/Action1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L496b5c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L496b62.  if v2 <= 0 then goto L496b74;
  #L496b66.  v0.`rx.internal.operators.OnSubscribeAutoConnect.source` @type ^`rx.observables.ConnectableObservable` := v1 @kind object;
  #L496b6a.  v0.`rx.internal.operators.OnSubscribeAutoConnect.numberOfSubscribers` @type ^`int` := v2;
  #L496b6e.  v0.`rx.internal.operators.OnSubscribeAutoConnect.connection` @type ^`rx.functions.Action1` := v3 @kind object;
  #L496b72.  return @kind void;
  #L496b74.  v1:= new `java.lang.IllegalArgumentException`;
  #L496b78.  v2:= "numberOfSubscribers > 0 required" @kind object;
  #L496b7c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L496b82.  throw v1;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeAutoConnect` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeAutoConnect;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L496b94.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L496b98.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeAutoConnect;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L496b9e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeAutoConnect` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeAutoConnect;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L496bb0.  v0:= v1.`rx.internal.operators.OnSubscribeAutoConnect.source` @type ^`rx.observables.ConnectableObservable` @kind object;
  #L496bb4.  call temp:= `wrap`(v2) @signature `Lrx/observers/Subscribers;.wrap:(Lrx/Subscriber;)Lrx/Subscriber;` @kind static;
  #L496bba.  v2:= temp @kind object;
  #L496bbc.  call temp:= `unsafeSubscribe`(v0, v2) @signature `Lrx/observables/ConnectableObservable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L496bc2.  call temp:= `incrementAndGet`(v1) @signature `Lrx/internal/operators/OnSubscribeAutoConnect;.incrementAndGet:()I` @kind virtual;
  #L496bc8.  v2:= temp;
  #L496bca.  v0:= v1.`rx.internal.operators.OnSubscribeAutoConnect.numberOfSubscribers` @type ^`int`;
  #L496bce.  if v2 != v0 then goto L496be0;
  #L496bd2.  v2:= v1.`rx.internal.operators.OnSubscribeAutoConnect.source` @type ^`rx.observables.ConnectableObservable` @kind object;
  #L496bd6.  v0:= v1.`rx.internal.operators.OnSubscribeAutoConnect.connection` @type ^`rx.functions.Action1` @kind object;
  #L496bda.  call `connect`(v2, v0) @signature `Lrx/observables/ConnectableObservable;.connect:(Lrx/functions/Action1;)V` @kind virtual;
  #L496be0.  return @kind void;
}
