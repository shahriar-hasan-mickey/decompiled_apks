record `rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class, `rx.CompletableSubscriber` @kind interface {
  `rx.SingleSubscriber` `rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber.once` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.<init>:(Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b06c8.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4b06ce.  v0.`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4b06d2.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b06d6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b06dc.  v0.`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4b06e0.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber` v2 @kind this) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b06f4.  v0:= new `java.util.concurrent.CancellationException`;
  #L4b06f8.  v1:= "Stream was canceled before emitting a terminal event." @kind object;
  #L4b06fc.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b0702.  call `onError`(v2, v0) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0708.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b071c.  v0:= v3.`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b0720.  v1:= 0I;
  #L4b0722.  v2:= 1I;
  #L4b0724.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b072a.  v0:= temp;
  #L4b072c.  if v0 == 0 then goto L4b0742;
  #L4b0730.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0736.  v0:= v3.`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b073a.  call `onError`(v0, v4) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0740.  goto L4b0748;
  #L4b0742.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0748.  return @kind void;
}
procedure `void` `onSubscribe`(`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber` v0 @kind this, `rx.Subscription` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.onSubscribe:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L4b075c.  call `add`(v0, v1) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b0762.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b0774.  v0:= v3.`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b0778.  v1:= 0I;
  #L4b077a.  v2:= 1I;
  #L4b077c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b0782.  v0:= temp;
  #L4b0784.  if v0 == 0 then goto L4b0798;
  #L4b0788.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTakeUntilCompletable$TakeUntilSourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b078e.  v0:= v3.`rx.internal.operators.SingleTakeUntilCompletable$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0792.  call `onSuccess`(v0, v4) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4b0798.  return @kind void;
}
