record `rx.internal.operators.CachedObservable$CachedSubscribe` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.Observable$OnSubscribe` @kind interface {
  `rx.internal.operators.CachedObservable$CacheState` `rx.internal.operators.CachedObservable$CachedSubscribe.state` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.CachedObservable$CachedSubscribe.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.CachedObservable$CachedSubscribe` v0 @kind this, `rx.internal.operators.CachedObservable$CacheState` v1 @kind object) @signature `Lrx/internal/operators/CachedObservable$CachedSubscribe;.<init>:(Lrx/internal/operators/CachedObservable$CacheState;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L493ea8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L493eae.  v0.`rx.internal.operators.CachedObservable$CachedSubscribe.state` @type ^`rx.internal.operators.CachedObservable$CacheState` := v1 @kind object;
  #L493eb2.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.CachedObservable$CachedSubscribe` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/CachedObservable$CachedSubscribe;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L493ec4.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L493ec8.  call `call`(v0, v1) @signature `Lrx/internal/operators/CachedObservable$CachedSubscribe;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L493ece.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.CachedObservable$CachedSubscribe` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/CachedObservable$CachedSubscribe;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493ee0.  v0:= new `rx.internal.operators.CachedObservable$ReplayProducer`;
  #L493ee4.  v1:= v2.`rx.internal.operators.CachedObservable$CachedSubscribe.state` @type ^`rx.internal.operators.CachedObservable$CacheState` @kind object;
  #L493ee8.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.<init>:(Lrx/Subscriber;Lrx/internal/operators/CachedObservable$CacheState;)V` @kind direct;
  #L493eee.  v1:= v2.`rx.internal.operators.CachedObservable$CachedSubscribe.state` @type ^`rx.internal.operators.CachedObservable$CacheState` @kind object;
  #L493ef2.  call `addProducer`(v1, v0) @signature `Lrx/internal/operators/CachedObservable$CacheState;.addProducer:(Lrx/internal/operators/CachedObservable$ReplayProducer;)V` @kind virtual;
  #L493ef8.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L493efe.  call `setProducer`(v3, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L493f04.  call temp:= `get`(v2) @signature `Lrx/internal/operators/CachedObservable$CachedSubscribe;.get:()Z` @kind virtual;
  #L493f0a.  v3:= temp;
  #L493f0c.  if v3 != 0 then goto L493f2a;
  #L493f10.  v3:= 0I;
  #L493f12.  v0:= 1I;
  #L493f14.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Lrx/internal/operators/CachedObservable$CachedSubscribe;.compareAndSet:(ZZ)Z` @kind virtual;
  #L493f1a.  v3:= temp;
  #L493f1c.  if v3 == 0 then goto L493f2a;
  #L493f20.  v3:= v2.`rx.internal.operators.CachedObservable$CachedSubscribe.state` @type ^`rx.internal.operators.CachedObservable$CacheState` @kind object;
  #L493f24.  call `connect`(v3) @signature `Lrx/internal/operators/CachedObservable$CacheState;.connect:()V` @kind virtual;
  #L493f2a.  return @kind void;
}
