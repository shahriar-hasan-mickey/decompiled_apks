record `rx.internal.operators.SingleOperatorOnErrorResumeNext$1` @kind class @AccessFlag FINAL extends `rx.functions.Func1` @kind interface {
  `rx.Single` `rx.internal.operators.SingleOperatorOnErrorResumeNext$1.val$resumeSingleInCaseOfError` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOperatorOnErrorResumeNext$1` v0 @kind this, `rx.Single` v1 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$1;.<init>:(Lrx/Single;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b030c.  v0.`rx.internal.operators.SingleOperatorOnErrorResumeNext$1.val$resumeSingleInCaseOfError` @type ^`rx.Single` := v1 @kind object;
  #L4b0310.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b0316.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.SingleOperatorOnErrorResumeNext$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b02d4.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4b02d8.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$1;.call:(Ljava/lang/Throwable;)Lrx/Single;` @kind virtual;
  #L4b02de.  v1:= temp @kind object;
  #L4b02e0.  return v1 @kind object;
}
procedure `rx.Single` `call`(`rx.internal.operators.SingleOperatorOnErrorResumeNext$1` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$1;.call:(Ljava/lang/Throwable;)Lrx/Single;` @AccessFlag PUBLIC {
    temp;

  #L4b02f4.  v1:= v0.`rx.internal.operators.SingleOperatorOnErrorResumeNext$1.val$resumeSingleInCaseOfError` @type ^`rx.Single` @kind object;
  #L4b02f8.  return v1 @kind object;
}
