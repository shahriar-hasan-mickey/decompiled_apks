record `rx.internal.operators.OperatorSkip$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `int` `rx.internal.operators.OperatorSkip$1.skipped` @AccessFlag ;
  `rx.internal.operators.OperatorSkip` `rx.internal.operators.OperatorSkip$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorSkip$1.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSkip$1` v0 @kind this, `rx.internal.operators.OperatorSkip` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorSkip$1;.<init>:(Lrx/internal/operators/OperatorSkip;Lrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a8754.  v0.`rx.internal.operators.OperatorSkip$1.this$0` @type ^`rx.internal.operators.OperatorSkip` := v1 @kind object;
  #L4a8758.  v0.`rx.internal.operators.OperatorSkip$1.val$child` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a875c.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a8762.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSkip$1` v1 @kind this) @signature `Lrx/internal/operators/OperatorSkip$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8774.  v0:= v1.`rx.internal.operators.OperatorSkip$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a8778.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a877e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSkip$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSkip$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8790.  v0:= v1.`rx.internal.operators.OperatorSkip$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a8794.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a879a.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSkip$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorSkip$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a87ac.  v0:= v2.`rx.internal.operators.OperatorSkip$1.skipped` @type ^`int`;
  #L4a87b0.  v1:= v2.`rx.internal.operators.OperatorSkip$1.this$0` @type ^`rx.internal.operators.OperatorSkip` @kind object;
  #L4a87b4.  v1:= v1.`rx.internal.operators.OperatorSkip.toSkip` @type ^`int`;
  #L4a87b8.  if v0 < v1 then goto L4a87c8;
  #L4a87bc.  v0:= v2.`rx.internal.operators.OperatorSkip$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a87c0.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a87c6.  goto L4a87d4;
  #L4a87c8.  v3:= v2.`rx.internal.operators.OperatorSkip$1.skipped` @type ^`int`;
  #L4a87cc.  v3:= v3 + 1;
  #L4a87d0.  v2.`rx.internal.operators.OperatorSkip$1.skipped` @type ^`int` := v3;
  #L4a87d4.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorSkip$1` v2 @kind this, `rx.Producer` v3 @kind object) @signature `Lrx/internal/operators/OperatorSkip$1;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a87e8.  v0:= v2.`rx.internal.operators.OperatorSkip$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a87ec.  call `setProducer`(v0, v3) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a87f2.  v0:= v2.`rx.internal.operators.OperatorSkip$1.this$0` @type ^`rx.internal.operators.OperatorSkip` @kind object;
  #L4a87f6.  v0:= v0.`rx.internal.operators.OperatorSkip.toSkip` @type ^`int`;
  #L4a87fa.  v0:= (`long`) v0 @kind i2l;
  #L4a87fc.  call `request`(v3, v0) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a8802.  return @kind void;
}
