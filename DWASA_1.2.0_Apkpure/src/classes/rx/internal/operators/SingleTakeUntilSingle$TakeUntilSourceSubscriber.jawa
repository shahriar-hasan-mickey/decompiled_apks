record `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class {
  `rx.SingleSubscriber` `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.once` @AccessFlag FINAL;
  `rx.SingleSubscriber` `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;.<init>:(Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0a2c.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4b0a32.  v0.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4b0a36.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b0a3a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b0a40.  v0.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4b0a44.  v1:= new `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber`;
  #L4b0a48.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber;.<init>:(Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;)V` @kind direct;
  #L4b0a4e.  v0.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.other` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4b0a52.  v1:= v0.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.other` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0a56.  call `add`(v0, v1) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b0a5c.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b0a70.  v0:= v3.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b0a74.  v1:= 0I;
  #L4b0a76.  v2:= 1I;
  #L4b0a78.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b0a7e.  v0:= temp;
  #L4b0a80.  if v0 == 0 then goto L4b0a96;
  #L4b0a84.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0a8a.  v0:= v3.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0a8e.  call `onError`(v0, v4) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0a94.  goto L4b0a9c;
  #L4b0a96.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0a9c.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b0ab0.  v0:= v3.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b0ab4.  v1:= 0I;
  #L4b0ab6.  v2:= 1I;
  #L4b0ab8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b0abe.  v0:= temp;
  #L4b0ac0.  if v0 == 0 then goto L4b0ad4;
  #L4b0ac4.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0aca.  v0:= v3.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0ace.  call `onSuccess`(v0, v4) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4b0ad4.  return @kind void;
}
