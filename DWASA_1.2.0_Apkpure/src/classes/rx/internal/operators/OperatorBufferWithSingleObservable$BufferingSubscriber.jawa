record `rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.child` @AccessFlag FINAL;
  `java.util.List` `rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.chunk` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @AccessFlag ;
  `rx.internal.operators.OperatorBufferWithSingleObservable` `rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber` v0 @kind this, `rx.internal.operators.OperatorBufferWithSingleObservable` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.<init>:(Lrx/internal/operators/OperatorBufferWithSingleObservable;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49e138.  v0.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithSingleObservable` := v1 @kind object;
  #L49e13c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49e142.  v0.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L49e146.  v2:= new `java.util.ArrayList`;
  #L49e14a.  v1:= v1.`rx.internal.operators.OperatorBufferWithSingleObservable.initialCapacity` @type ^`int`;
  #L49e14e.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L49e154.  v0.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.chunk` @type ^`java.util.List` := v2 @kind object;
  #L49e158.  return @kind void;
}
procedure `void` `emit`(`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49e16c.  @monitorenter v3
  #L49e16e.  v0:= v3.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49e172.  if v0 == 0 then goto L49e17a;
  #L49e176.  @monitorexit v3
  #L49e178.  return @kind void;
  #L49e17a.  v0:= v3.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.chunk` @type ^`java.util.List` @kind object;
  #L49e17e.  v1:= new `java.util.ArrayList`;
  #L49e182.  v2:= v3.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithSingleObservable` @kind object;
  #L49e186.  v2:= v2.`rx.internal.operators.OperatorBufferWithSingleObservable.initialCapacity` @type ^`int`;
  #L49e18a.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L49e190.  v3.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.chunk` @type ^`java.util.List` := v1 @kind object;
  #L49e194.  @monitorexit v3
  #L49e196.  v1:= v3.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49e19a.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49e1a0.  goto L49e1ca;
  #L49e1a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e1a4.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.unsubscribe:()V` @kind virtual;
  #L49e1aa.  @monitorenter v3
  #L49e1ac.  v1:= v3.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49e1b0.  if v1 == 0 then goto L49e1b8;
  #L49e1b4.  @monitorexit v3
  #L49e1b6.  return @kind void;
  #L49e1b8.  v1:= 1I;
  #L49e1ba.  v3.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L49e1be.  @monitorexit v3
  #L49e1c0.  v1:= v3.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49e1c4.  call `throwOrReport`(v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49e1ca.  return @kind void;
  #L49e1cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e1ce.  @monitorexit v3
  #L49e1d0.  throw v0;
  #L49e1d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e1d4.  @monitorexit v3
  #L49e1d6.  throw v0;
  catch `java.lang.Throwable` @[L49e16e..L49e196] goto L49e1d2;
  catch `java.lang.Throwable` @[L49e196..L49e1a0] goto L49e1a2;
  catch `java.lang.Throwable` @[L49e1ac..L49e1c0] goto L49e1cc;
  catch `java.lang.Throwable` @[L49e1ce..L49e1d0] goto L49e1cc;
  catch `java.lang.Throwable` @[L49e1d4..L49e1d6] goto L49e1d2;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e218.  @monitorenter v2
  #L49e21a.  v0:= v2.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49e21e.  if v0 == 0 then goto L49e226;
  #L49e222.  @monitorexit v2
  #L49e224.  return @kind void;
  #L49e226.  v0:= 1I;
  #L49e228.  v2.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49e22c.  v0:= v2.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.chunk` @type ^`java.util.List` @kind object;
  #L49e230.  v1:= 0I;
  #L49e232.  v2.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.chunk` @type ^`java.util.List` := v1 @kind object;
  #L49e236.  @monitorexit v2
  #L49e238.  v1:= v2.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49e23c.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49e242.  v0:= v2.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49e246.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49e24c.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.unsubscribe:()V` @kind virtual;
  #L49e252.  return @kind void;
  #L49e254.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e256.  @monitorexit v2
  #L49e258.  throw v0;
  #L49e25a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e25c.  v1:= v2.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49e260.  call `throwOrReport`(v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49e266.  return @kind void;
  catch `java.lang.Throwable` @[L49e218..L49e21a] goto L49e25a;
  catch `java.lang.Throwable` @[L49e21a..L49e238] goto L49e254;
  catch `java.lang.Throwable` @[L49e238..L49e242] goto L49e25a;
  catch `java.lang.Throwable` @[L49e256..L49e258] goto L49e254;
  catch `java.lang.Throwable` @[L49e258..L49e25a] goto L49e25a;
}
procedure `void` `onError`(`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49e2a8.  @monitorenter v1
  #L49e2aa.  v0:= v1.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49e2ae.  if v0 == 0 then goto L49e2b6;
  #L49e2b2.  @monitorexit v1
  #L49e2b4.  return @kind void;
  #L49e2b6.  v0:= 1I;
  #L49e2b8.  v1.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49e2bc.  v0:= 0I;
  #L49e2be.  v1.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.chunk` @type ^`java.util.List` := v0 @kind object;
  #L49e2c2.  @monitorexit v1
  #L49e2c4.  v0:= v1.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49e2c8.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49e2ce.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.unsubscribe:()V` @kind virtual;
  #L49e2d4.  return @kind void;
  #L49e2d6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e2d8.  @monitorexit v1
  #L49e2da.  throw v2;
  catch `java.lang.Throwable` @[L49e2aa..L49e2c4] goto L49e2d6;
  catch `java.lang.Throwable` @[L49e2d8..L49e2da] goto L49e2d6;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable$BufferingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49e300.  @monitorenter v1
  #L49e302.  v0:= v1.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49e306.  if v0 == 0 then goto L49e30e;
  #L49e30a.  @monitorexit v1
  #L49e30c.  return @kind void;
  #L49e30e.  v0:= v1.`rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber.chunk` @type ^`java.util.List` @kind object;
  #L49e312.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49e318.  @monitorexit v1
  #L49e31a.  return @kind void;
  #L49e31c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e31e.  @monitorexit v1
  #L49e320.  throw v2;
  catch `java.lang.Throwable` @[L49e302..L49e320] goto L49e31c;
}
