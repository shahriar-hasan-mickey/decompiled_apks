record `rx.internal.operators.OperatorTakeTimed$TakeSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorTakeTimed$TakeSubscriber.child` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeTimed$TakeSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aa374.  call `<init>`(v0, v1) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4aa37a.  v0.`rx.internal.operators.OperatorTakeTimed$TakeSubscriber.child` @type ^`rx.Subscriber` := v1 @kind object;
  #L4aa37e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorTakeTimed$TakeSubscriber` v0 @kind this) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.call:()V` @AccessFlag PUBLIC {
    temp;

  #L4aa390.  call `onCompleted`(v0) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.onCompleted:()V` @kind virtual;
  #L4aa396.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorTakeTimed$TakeSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa3a8.  v0:= v1.`rx.internal.operators.OperatorTakeTimed$TakeSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aa3ac.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aa3b2.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.unsubscribe:()V` @kind virtual;
  #L4aa3b8.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorTakeTimed$TakeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa3cc.  v0:= v1.`rx.internal.operators.OperatorTakeTimed$TakeSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aa3d0.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aa3d6.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.unsubscribe:()V` @kind virtual;
  #L4aa3dc.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorTakeTimed$TakeSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeTimed$TakeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa3f0.  v0:= v1.`rx.internal.operators.OperatorTakeTimed$TakeSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aa3f4.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4aa3fa.  return @kind void;
}
