record `rx.internal.operators.OnSubscribeFilter$FilterSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OnSubscribeFilter$FilterSubscriber.actual` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeFilter$FilterSubscriber.done` @AccessFlag ;
  `rx.functions.Func1` `rx.internal.operators.OnSubscribeFilter$FilterSubscriber.predicate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFilter$FilterSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L498440.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L498446.  v0.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L49844a.  v0.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.predicate` @type ^`rx.functions.Func1` := v2 @kind object;
  #L49844e.  v1:= 0L;
  #L498452.  call `request`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.request:(J)V` @kind virtual;
  #L498458.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeFilter$FilterSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49846c.  v0:= v1.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L498470.  if v0 == 0 then goto L498476;
  #L498474.  return @kind void;
  #L498476.  v0:= v1.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49847a.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L498480.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeFilter$FilterSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498494.  v0:= v1.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L498498.  if v0 == 0 then goto L4984a4;
  #L49849c.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4984a2.  return @kind void;
  #L4984a4.  v0:= 1I;
  #L4984a6.  v1.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4984aa.  v0:= v1.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4984ae.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4984b4.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeFilter$FilterSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4984c8.  v0:= v2.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.predicate` @type ^`rx.functions.Func1` @kind object;
  #L4984cc.  call temp:= `call`(v0, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4984d2.  v0:= temp @kind object;
  #L4984d4.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L4984d8.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L4984de.  v0:= temp;
  #L4984e0.  if v0 == 0 then goto L4984f0;
  #L4984e4.  v0:= v2.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4984e8.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4984ee.  goto L4984fa;
  #L4984f0.  v0:= 1L;
  #L4984f4.  call `request`(v2, v0) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.request:(J)V` @kind virtual;
  #L4984fa.  return @kind void;
  #L4984fc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4984fe.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L498504.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.unsubscribe:()V` @kind virtual;
  #L49850a.  call temp:= `addValueAsLastCause`(v0, v3) @signature `Lrx/exceptions/OnErrorThrowable;.addValueAsLastCause:(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L498510.  v3:= temp @kind object;
  #L498512.  call `onError`(v2, v3) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L498518.  return @kind void;
  catch `java.lang.Throwable` @[L4984c8..L4984e0] goto L4984fc;
}
procedure `void` `setProducer`(`rx.internal.operators.OnSubscribeFilter$FilterSubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFilter$FilterSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498538.  call `setProducer`(v1, v2) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind super;
  #L49853e.  v0:= v1.`rx.internal.operators.OnSubscribeFilter$FilterSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L498542.  call `setProducer`(v0, v2) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L498548.  return @kind void;
}
