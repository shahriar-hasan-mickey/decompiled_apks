record `rx.internal.operators.OnSubscribeDelaySubscription$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.operators.OnSubscribeDelaySubscription` `rx.internal.operators.OnSubscribeDelaySubscription$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeDelaySubscription$1.val$s` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeDelaySubscription$1` v0 @kind this, `rx.internal.operators.OnSubscribeDelaySubscription` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeDelaySubscription$1;.<init>:(Lrx/internal/operators/OnSubscribeDelaySubscription;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L497bcc.  v0.`rx.internal.operators.OnSubscribeDelaySubscription$1.this$0` @type ^`rx.internal.operators.OnSubscribeDelaySubscription` := v1 @kind object;
  #L497bd0.  v0.`rx.internal.operators.OnSubscribeDelaySubscription$1.val$s` @type ^`rx.Subscriber` := v2 @kind object;
  #L497bd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L497bda.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeDelaySubscription$1` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeDelaySubscription$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L497bec.  v0:= v2.`rx.internal.operators.OnSubscribeDelaySubscription$1.val$s` @type ^`rx.Subscriber` @kind object;
  #L497bf0.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L497bf6.  v0:= temp;
  #L497bf8.  if v0 != 0 then goto L497c16;
  #L497bfc.  v0:= v2.`rx.internal.operators.OnSubscribeDelaySubscription$1.this$0` @type ^`rx.internal.operators.OnSubscribeDelaySubscription` @kind object;
  #L497c00.  v0:= v0.`rx.internal.operators.OnSubscribeDelaySubscription.source` @type ^`rx.Observable` @kind object;
  #L497c04.  v1:= v2.`rx.internal.operators.OnSubscribeDelaySubscription$1.val$s` @type ^`rx.Subscriber` @kind object;
  #L497c08.  call temp:= `wrap`(v1) @signature `Lrx/observers/Subscribers;.wrap:(Lrx/Subscriber;)Lrx/Subscriber;` @kind static;
  #L497c0e.  v1:= temp @kind object;
  #L497c10.  call temp:= `unsafeSubscribe`(v0, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L497c16.  return @kind void;
}
