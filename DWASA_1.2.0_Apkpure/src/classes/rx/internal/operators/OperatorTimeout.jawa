record `rx.internal.operators.OperatorTimeout` @kind class @AccessFlag PUBLIC_FINAL extends `rx.internal.operators.OperatorTimeoutBase` @kind class {
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTimeout` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Scheduler` v7 @kind object) @signature `Lrx/internal/operators/OperatorTimeout;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Observable;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ab4b8.  v0:= new `rx.internal.operators.OperatorTimeout$1`;
  #L4ab4bc.  call `<init>`(v0, v3, v5) @signature `Lrx/internal/operators/OperatorTimeout$1;.<init>:(JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4ab4c2.  v1:= new `rx.internal.operators.OperatorTimeout$2`;
  #L4ab4c6.  call `<init>`(v1, v3, v5) @signature `Lrx/internal/operators/OperatorTimeout$2;.<init>:(JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4ab4cc.  call `<init>`(v2, v0, v1, v6, v7) @signature `Lrx/internal/operators/OperatorTimeoutBase;.<init>:(Lrx/internal/operators/OperatorTimeoutBase$FirstTimeoutStub;Lrx/internal/operators/OperatorTimeoutBase$TimeoutStub;Lrx/Observable;Lrx/Scheduler;)V` @kind direct;
  #L4ab4d2.  return @kind void;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorTimeout` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OperatorTimeout;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab49c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorTimeoutBase;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind super;
  #L4ab4a2.  v1:= temp @kind object;
  #L4ab4a4.  return v1 @kind object;
}
