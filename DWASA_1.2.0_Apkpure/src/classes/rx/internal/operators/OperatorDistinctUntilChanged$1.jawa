record `rx.internal.operators.OperatorDistinctUntilChanged$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.OperatorDistinctUntilChanged$1.hasPrevious` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.OperatorDistinctUntilChanged$1.previousKey` @AccessFlag ;
  `rx.internal.operators.OperatorDistinctUntilChanged` `rx.internal.operators.OperatorDistinctUntilChanged$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorDistinctUntilChanged$1.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDistinctUntilChanged$1` v0 @kind this, `rx.internal.operators.OperatorDistinctUntilChanged` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged$1;.<init>:(Lrx/internal/operators/OperatorDistinctUntilChanged;Lrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a056c.  v0.`rx.internal.operators.OperatorDistinctUntilChanged$1.this$0` @type ^`rx.internal.operators.OperatorDistinctUntilChanged` := v1 @kind object;
  #L4a0570.  v0.`rx.internal.operators.OperatorDistinctUntilChanged$1.val$child` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a0574.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a057a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorDistinctUntilChanged$1` v1 @kind this) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a058c.  v0:= v1.`rx.internal.operators.OperatorDistinctUntilChanged$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a0590.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a0596.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorDistinctUntilChanged$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a05a8.  v0:= v1.`rx.internal.operators.OperatorDistinctUntilChanged$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a05ac.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a05b2.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorDistinctUntilChanged$1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a05c4.  v0:= v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.this$0` @type ^`rx.internal.operators.OperatorDistinctUntilChanged` @kind object;
  #L4a05c8.  v0:= v0.`rx.internal.operators.OperatorDistinctUntilChanged.keySelector` @type ^`rx.functions.Func1` @kind object;
  #L4a05cc.  call temp:= `call`(v0, v4) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a05d2.  v0:= temp @kind object;
  #L4a05d4.  v1:= v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.previousKey` @type ^`java.lang.Object` @kind object;
  #L4a05d8.  v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.previousKey` @type ^`java.lang.Object` := v0 @kind object;
  #L4a05dc.  v2:= v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.hasPrevious` @type ^`boolean` @kind boolean;
  #L4a05e0.  if v2 == 0 then goto L4a062a;
  #L4a05e4.  v2:= v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.this$0` @type ^`rx.internal.operators.OperatorDistinctUntilChanged` @kind object;
  #L4a05e8.  v2:= v2.`rx.internal.operators.OperatorDistinctUntilChanged.comparator` @type ^`rx.functions.Func2` @kind object;
  #L4a05ec.  call temp:= `call`(v2, v1, v0) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a05f2.  v1:= temp @kind object;
  #L4a05f4.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L4a05f8.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L4a05fe.  v0:= temp;
  #L4a0600.  if v0 != 0 then goto L4a0610;
  #L4a0604.  v0:= v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a0608.  call `onNext`(v0, v4) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a060e.  goto L4a063a;
  #L4a0610.  v0:= 1L;
  #L4a0614.  call `request`(v3, v0) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged$1;.request:(J)V` @kind virtual;
  #L4a061a.  goto L4a063a;
  #L4a061c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a061e.  v1:= v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a0622.  call `throwOrReport`(v4, v1, v0) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a0628.  return @kind void;
  #L4a062a.  v0:= 1I;
  #L4a062c.  v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.hasPrevious` @type ^`boolean` := v0 @kind boolean;
  #L4a0630.  v0:= v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a0634.  call `onNext`(v0, v4) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a063a.  return @kind void;
  #L4a063c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a063e.  v1:= v3.`rx.internal.operators.OperatorDistinctUntilChanged$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a0642.  call `throwOrReport`(v0, v1, v4) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a0648.  return @kind void;
  catch `java.lang.Throwable` @[L4a05c4..L4a05d4] goto L4a063c;
  catch `java.lang.Throwable` @[L4a05e4..L4a0600] goto L4a061c;
}
