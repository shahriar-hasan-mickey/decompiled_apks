record `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3` @kind class @AccessFlag FINAL extends `rx.functions.Func1` @kind interface {
  `rx.Observable` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3.val$other` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$3;.<init>:(Lrx/Observable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a4fd0.  v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3.val$other` @type ^`rx.Observable` := v1 @kind object;
  #L4a4fd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a4fda.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$3;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a4f88.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4a4f8c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$3;.call:(Ljava/lang/Throwable;)Lrx/Observable;` @kind virtual;
  #L4a4f92.  v1:= temp @kind object;
  #L4a4f94.  return v1 @kind object;
}
procedure `rx.Observable` `call`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$3;.call:(Ljava/lang/Throwable;)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a4fa8.  v0:= instanceof @variable v2 @type ^`java.lang.Exception` @kind boolean;
  #L4a4fac.  if v0 == 0 then goto L4a4fb6;
  #L4a4fb0.  v2:= v1.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3.val$other` @type ^`rx.Observable` @kind object;
  #L4a4fb4.  return v2 @kind object;
  #L4a4fb6.  call temp:= `error`(v2) @signature `Lrx/Observable;.error:(Ljava/lang/Throwable;)Lrx/Observable;` @kind static;
  #L4a4fbc.  v2:= temp @kind object;
  #L4a4fbe.  return v2 @kind object;
}
