record `rx.internal.operators.OnSubscribeMap$MapSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OnSubscribeMap$MapSubscriber.actual` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeMap$MapSubscriber.done` @AccessFlag ;
  `rx.functions.Func1` `rx.internal.operators.OnSubscribeMap$MapSubscriber.mapper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeMap$MapSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeMap$MapSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49ad68.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49ad6e.  v0.`rx.internal.operators.OnSubscribeMap$MapSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L49ad72.  v0.`rx.internal.operators.OnSubscribeMap$MapSubscriber.mapper` @type ^`rx.functions.Func1` := v2 @kind object;
  #L49ad76.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeMap$MapSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeMap$MapSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ad88.  v0:= v1.`rx.internal.operators.OnSubscribeMap$MapSubscriber.done` @type ^`boolean` @kind boolean;
  #L49ad8c.  if v0 == 0 then goto L49ad92;
  #L49ad90.  return @kind void;
  #L49ad92.  v0:= v1.`rx.internal.operators.OnSubscribeMap$MapSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49ad96.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49ad9c.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeMap$MapSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeMap$MapSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49adb0.  v0:= v1.`rx.internal.operators.OnSubscribeMap$MapSubscriber.done` @type ^`boolean` @kind boolean;
  #L49adb4.  if v0 == 0 then goto L49adc0;
  #L49adb8.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49adbe.  return @kind void;
  #L49adc0.  v0:= 1I;
  #L49adc2.  v1.`rx.internal.operators.OnSubscribeMap$MapSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49adc6.  v0:= v1.`rx.internal.operators.OnSubscribeMap$MapSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49adca.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49add0.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeMap$MapSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeMap$MapSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ade4.  v0:= v1.`rx.internal.operators.OnSubscribeMap$MapSubscriber.mapper` @type ^`rx.functions.Func1` @kind object;
  #L49ade8.  call temp:= `call`(v0, v2) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49adee.  v2:= temp @kind object;
  #L49adf0.  v0:= v1.`rx.internal.operators.OnSubscribeMap$MapSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49adf4.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49adfa.  return @kind void;
  #L49adfc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49adfe.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49ae04.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeMap$MapSubscriber;.unsubscribe:()V` @kind virtual;
  #L49ae0a.  call temp:= `addValueAsLastCause`(v0, v2) @signature `Lrx/exceptions/OnErrorThrowable;.addValueAsLastCause:(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L49ae10.  v2:= temp @kind object;
  #L49ae12.  call `onError`(v1, v2) @signature `Lrx/internal/operators/OnSubscribeMap$MapSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49ae18.  return @kind void;
  catch `java.lang.Throwable` @[L49ade4..L49adf0] goto L49adfc;
}
procedure `void` `setProducer`(`rx.internal.operators.OnSubscribeMap$MapSubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeMap$MapSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ae38.  v0:= v1.`rx.internal.operators.OnSubscribeMap$MapSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49ae3c.  call `setProducer`(v0, v2) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49ae42.  return @kind void;
}
