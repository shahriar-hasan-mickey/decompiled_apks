record `rx.internal.operators.OnSubscribeCollect` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.Func0` `rx.internal.operators.OnSubscribeCollect.collectionFactory` @AccessFlag FINAL;
  `rx.functions.Action2` `rx.internal.operators.OnSubscribeCollect.collector` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OnSubscribeCollect.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeCollect` v0 @kind this, `rx.Observable` v1 @kind object, `rx.functions.Func0` v2 @kind object, `rx.functions.Action2` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeCollect;.<init>:(Lrx/Observable;Lrx/functions/Func0;Lrx/functions/Action2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L496c68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L496c6e.  v0.`rx.internal.operators.OnSubscribeCollect.source` @type ^`rx.Observable` := v1 @kind object;
  #L496c72.  v0.`rx.internal.operators.OnSubscribeCollect.collectionFactory` @type ^`rx.functions.Func0` := v2 @kind object;
  #L496c76.  v0.`rx.internal.operators.OnSubscribeCollect.collector` @type ^`rx.functions.Action2` := v3 @kind object;
  #L496c7a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeCollect` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeCollect;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L496c8c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L496c90.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeCollect;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L496c96.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeCollect` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeCollect;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L496ca8.  v0:= v3.`rx.internal.operators.OnSubscribeCollect.collectionFactory` @type ^`rx.functions.Func0` @kind object;
  #L496cac.  call temp:= `call`(v0) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L496cb2.  v0:= temp @kind object;
  #L496cb4.  v1:= new `rx.internal.operators.OnSubscribeCollect$CollectSubscriber`;
  #L496cb8.  v2:= v3.`rx.internal.operators.OnSubscribeCollect.collector` @type ^`rx.functions.Action2` @kind object;
  #L496cbc.  call `<init>`(v1, v4, v0, v2) @signature `Lrx/internal/operators/OnSubscribeCollect$CollectSubscriber;.<init>:(Lrx/Subscriber;Ljava/lang/Object;Lrx/functions/Action2;)V` @kind direct;
  #L496cc2.  v4:= v3.`rx.internal.operators.OnSubscribeCollect.source` @type ^`rx.Observable` @kind object;
  #L496cc6.  call `subscribeTo`(v1, v4) @signature `Lrx/internal/operators/OnSubscribeCollect$CollectSubscriber;.subscribeTo:(Lrx/Observable;)V` @kind virtual;
  #L496ccc.  return @kind void;
  #L496cce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L496cd0.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L496cd6.  call `onError`(v4, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L496cdc.  return @kind void;
  catch `java.lang.Throwable` @[L496ca8..L496cb4] goto L496cce;
}
