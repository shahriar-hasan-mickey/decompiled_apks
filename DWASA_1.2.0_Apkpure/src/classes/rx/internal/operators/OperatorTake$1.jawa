record `rx.internal.operators.OperatorTake$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.OperatorTake$1.completed` @AccessFlag ;
  `int` `rx.internal.operators.OperatorTake$1.count` @AccessFlag ;
  `rx.internal.operators.OperatorTake` `rx.internal.operators.OperatorTake$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorTake$1.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTake$1` v0 @kind this, `rx.internal.operators.OperatorTake` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorTake$1;.<init>:(Lrx/internal/operators/OperatorTake;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a9d64.  v0.`rx.internal.operators.OperatorTake$1.this$0` @type ^`rx.internal.operators.OperatorTake` := v1 @kind object;
  #L4a9d68.  v0.`rx.internal.operators.OperatorTake$1.val$child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a9d6c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a9d72.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorTake$1` v1 @kind this) @signature `Lrx/internal/operators/OperatorTake$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9d84.  v0:= v1.`rx.internal.operators.OperatorTake$1.completed` @type ^`boolean` @kind boolean;
  #L4a9d88.  if v0 != 0 then goto L4a9d9c;
  #L4a9d8c.  v0:= 1I;
  #L4a9d8e.  v1.`rx.internal.operators.OperatorTake$1.completed` @type ^`boolean` := v0 @kind boolean;
  #L4a9d92.  v0:= v1.`rx.internal.operators.OperatorTake$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a9d96.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a9d9c.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorTake$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorTake$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9db0.  v0:= v1.`rx.internal.operators.OperatorTake$1.completed` @type ^`boolean` @kind boolean;
  #L4a9db4.  if v0 != 0 then goto L4a9dda;
  #L4a9db8.  v0:= 1I;
  #L4a9dba.  v1.`rx.internal.operators.OperatorTake$1.completed` @type ^`boolean` := v0 @kind boolean;
  #L4a9dbe.  v0:= v1.`rx.internal.operators.OperatorTake$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a9dc2.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a9dc8.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorTake$1;.unsubscribe:()V` @kind virtual;
  #L4a9dce.  goto L4a9dda;
  #L4a9dd0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a9dd2.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorTake$1;.unsubscribe:()V` @kind virtual;
  #L4a9dd8.  throw v2;
  #L4a9dda.  return @kind void;
  catch `java.lang.Throwable` @[L4a9dbe..L4a9dc8] goto L4a9dd0;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorTake$1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorTake$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a9df8.  call temp:= `isUnsubscribed`(v3) @signature `Lrx/internal/operators/OperatorTake$1;.isUnsubscribed:()Z` @kind virtual;
  #L4a9dfe.  v0:= temp;
  #L4a9e00.  if v0 != 0 then goto L4a9e6a;
  #L4a9e04.  v0:= v3.`rx.internal.operators.OperatorTake$1.count` @type ^`int`;
  #L4a9e08.  v1:= v0 + 1;
  #L4a9e0c.  v3.`rx.internal.operators.OperatorTake$1.count` @type ^`int` := v1;
  #L4a9e10.  v1:= v3.`rx.internal.operators.OperatorTake$1.this$0` @type ^`rx.internal.operators.OperatorTake` @kind object;
  #L4a9e14.  v1:= v1.`rx.internal.operators.OperatorTake.limit` @type ^`int`;
  #L4a9e18.  if v0 >= v1 then goto L4a9e6a;
  #L4a9e1c.  v0:= v3.`rx.internal.operators.OperatorTake$1.count` @type ^`int`;
  #L4a9e20.  v1:= v3.`rx.internal.operators.OperatorTake$1.this$0` @type ^`rx.internal.operators.OperatorTake` @kind object;
  #L4a9e24.  v1:= v1.`rx.internal.operators.OperatorTake.limit` @type ^`int`;
  #L4a9e28.  v2:= 1I;
  #L4a9e2a.  if v0 != v1 then goto L4a9e32;
  #L4a9e2e.  v0:= 1I;
  #L4a9e30.  goto L4a9e34;
  #L4a9e32.  v0:= 0I;
  #L4a9e34.  v1:= v3.`rx.internal.operators.OperatorTake$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a9e38.  call `onNext`(v1, v4) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9e3e.  if v0 == 0 then goto L4a9e6a;
  #L4a9e42.  v4:= v3.`rx.internal.operators.OperatorTake$1.completed` @type ^`boolean` @kind boolean;
  #L4a9e46.  if v4 != 0 then goto L4a9e6a;
  #L4a9e4a.  v3.`rx.internal.operators.OperatorTake$1.completed` @type ^`boolean` := v2 @kind boolean;
  #L4a9e4e.  v4:= v3.`rx.internal.operators.OperatorTake$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a9e52.  call `onCompleted`(v4) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a9e58.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/OperatorTake$1;.unsubscribe:()V` @kind virtual;
  #L4a9e5e.  goto L4a9e6a;
  #L4a9e60.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a9e62.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/OperatorTake$1;.unsubscribe:()V` @kind virtual;
  #L4a9e68.  throw v4;
  #L4a9e6a.  return @kind void;
  catch `java.lang.Throwable` @[L4a9e4e..L4a9e58] goto L4a9e60;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorTake$1` v2 @kind this, `rx.Producer` v3 @kind object) @signature `Lrx/internal/operators/OperatorTake$1;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9e88.  v0:= v2.`rx.internal.operators.OperatorTake$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a9e8c.  v1:= new `rx.internal.operators.OperatorTake$1$1`;
  #L4a9e90.  call `<init>`(v1, v2, v3) @signature `Lrx/internal/operators/OperatorTake$1$1;.<init>:(Lrx/internal/operators/OperatorTake$1;Lrx/Producer;)V` @kind direct;
  #L4a9e96.  call `setProducer`(v0, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a9e9c.  return @kind void;
}
