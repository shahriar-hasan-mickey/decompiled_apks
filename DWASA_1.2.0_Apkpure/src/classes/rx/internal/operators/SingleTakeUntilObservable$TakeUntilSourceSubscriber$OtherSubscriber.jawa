record `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber` `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber` v0 @kind this, `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber;.<init>:(Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0820.  v0.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber.this$0` @type ^`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber` := v1 @kind object;
  #L4b0824.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4b082a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber` v2 @kind this) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b083c.  v0:= new `java.util.concurrent.CancellationException`;
  #L4b0840.  v1:= "Stream was canceled before emitting a terminal event." @kind object;
  #L4b0844.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b084a.  call `onError`(v2, v0) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0850.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0864.  v0:= v1.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber.this$0` @type ^`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber` @kind object;
  #L4b0868.  call `onError`(v0, v2) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b086e.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4b0880.  call `onCompleted`(v0) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber;.onCompleted:()V` @kind virtual;
  #L4b0886.  return @kind void;
}
