record `rx.internal.operators.CompletableOnSubscribeMergeIterable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Completable$OnSubscribe` @kind interface {
  `java.lang.Iterable` `rx.internal.operators.CompletableOnSubscribeMergeIterable.sources` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.CompletableOnSubscribeMergeIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L495854.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49585a.  v0.`rx.internal.operators.CompletableOnSubscribeMergeIterable.sources` @type ^`java.lang.Iterable` := v1 @kind object;
  #L49585e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.CompletableOnSubscribeMergeIterable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeIterable;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L495870.  v1:= (`rx.CompletableSubscriber`) v1 @kind object;
  #L495874.  call `call`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeIterable;.call:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L49587a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.CompletableOnSubscribeMergeIterable` v13 @kind this, `rx.CompletableSubscriber` v14 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeIterable;.call:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L49588c.  v6:= new `rx.subscriptions.CompositeSubscription`;
  #L495890.  call `<init>`(v6) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L495896.  call `onSubscribe`(v14, v6) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L49589c.  v0:= v13.`rx.internal.operators.CompletableOnSubscribeMergeIterable.sources` @type ^`java.lang.Iterable` @kind object;
  #L4958a0.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4958a6.  v7:= temp @kind object;
  #L4958a8.  if v7 != 0 then goto L4958c2;
  #L4958ac.  v0:= new `java.lang.NullPointerException`;
  #L4958b0.  v1:= "The source iterator returned is null" @kind object;
  #L4958b4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4958ba.  call `onError`(v14, v0) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4958c0.  return @kind void;
  #L4958c2.  v8:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4958c6.  v9:= 1I;
  #L4958c8.  call `<init>`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4958ce.  v10:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4958d2.  call `<init>`(v10) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4958d8.  call temp:= `isUnsubscribed`(v6) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4958de.  v0:= temp;
  #L4958e0.  if v0 == 0 then goto L4958e6;
  #L4958e4.  return @kind void;
  #L4958e6.  v0:= 0I;
  #L4958e8.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4958ee.  v1:= temp;
  #L4958f0.  if v1 != 0 then goto L495914;
  #L4958f4.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4958fa.  v1:= temp;
  #L4958fc.  if v1 != 0 then goto L495912;
  #L495900.  call temp:= `compareAndSet`(v10, v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L495906.  v0:= temp;
  #L495908.  if v0 == 0 then goto L495912;
  #L49590c.  call `onCompleted`(v14) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L495912.  return @kind void;
  #L495914.  call temp:= `isUnsubscribed`(v6) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L49591a.  v1:= temp;
  #L49591c.  if v1 == 0 then goto L495922;
  #L495920.  return @kind void;
  #L495922.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L495928.  v1:= temp @kind object;
  #L49592a.  v11:= v1 @kind object;
  #L49592c.  v11:= (`rx.Completable`) v11 @kind object;
  #L495930.  call temp:= `isUnsubscribed`(v6) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L495936.  v1:= temp;
  #L495938.  if v1 == 0 then goto L49593e;
  #L49593c.  return @kind void;
  #L49593e.  if v11 != 0 then goto L495972;
  #L495942.  call `unsubscribe`(v6) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L495948.  v1:= new `java.lang.NullPointerException`;
  #L49594c.  v2:= "A completable source is null" @kind object;
  #L495950.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L495956.  call temp:= `compareAndSet`(v10, v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49595c.  v0:= temp;
  #L49595e.  if v0 == 0 then goto L49596a;
  #L495962.  call `onError`(v14, v1) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L495968.  goto L495970;
  #L49596a.  call `onError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L495970.  return @kind void;
  #L495972.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L495978.  v12:= new `rx.internal.operators.CompletableOnSubscribeMergeIterable$1`;
  #L49597c.  v0:= v12 @kind object;
  #L49597e.  v1:= v13 @kind object;
  #L495980.  v2:= v6 @kind object;
  #L495982.  v3:= v10 @kind object;
  #L495984.  v4:= v14 @kind object;
  #L495986.  v5:= v8 @kind object;
  #L495988.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeIterable$1;.<init>:(Lrx/internal/operators/CompletableOnSubscribeMergeIterable;Lrx/subscriptions/CompositeSubscription;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/CompletableSubscriber;Ljava/util/concurrent/atomic/AtomicInteger;)V` @kind direct;
  #L49598e.  call `unsafeSubscribe`(v11, v12) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L495994.  goto L4958d8;
  #L495996.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L495998.  call `unsubscribe`(v6) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L49599e.  call temp:= `compareAndSet`(v10, v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4959a4.  v0:= temp;
  #L4959a6.  if v0 == 0 then goto L4959b2;
  #L4959aa.  call `onError`(v14, v1) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4959b0.  goto L4959b8;
  #L4959b2.  call `onError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4959b8.  return @kind void;
  #L4959ba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4959bc.  call `unsubscribe`(v6) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L4959c2.  call temp:= `compareAndSet`(v10, v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4959c8.  v0:= temp;
  #L4959ca.  if v0 == 0 then goto L4959d6;
  #L4959ce.  call `onError`(v14, v1) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4959d4.  goto L4959dc;
  #L4959d6.  call `onError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4959dc.  return @kind void;
  #L4959de.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4959e0.  call `onError`(v14, v0) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4959e6.  return @kind void;
  catch `java.lang.Throwable` @[L49589c..L4958a8] goto L4959de;
  catch `java.lang.Throwable` @[L4958e8..L4958f0] goto L4959ba;
  catch `java.lang.Throwable` @[L495922..L495930] goto L495996;
}
