record `rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `java.util.Iterator` @kind interface {
  `rx.Notification` `rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @AccessFlag ;
  `java.util.concurrent.Semaphore` `rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.notify` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.value` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L492bc4.  call `<init>`(v2) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L492bca.  v0:= new `java.util.concurrent.Semaphore`;
  #L492bce.  v1:= 0I;
  #L492bd0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L492bd6.  v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.notify` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L492bda.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L492bde.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L492be4.  v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L492be8.  return @kind void;
}
procedure `boolean` `hasNext`(`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492a88.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492a8c.  if v0 == 0 then goto L492ab4;
  #L492a90.  call temp:= `isOnError`(v0) @signature `Lrx/Notification;.isOnError:()Z` @kind virtual;
  #L492a96.  v0:= temp;
  #L492a98.  if v0 != 0 then goto L492a9e;
  #L492a9c.  goto L492ab4;
  #L492a9e.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492aa2.  call temp:= `getThrowable`(v0) @signature `Lrx/Notification;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L492aa8.  v0:= temp @kind object;
  #L492aaa.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L492ab0.  v0:= temp @kind object;
  #L492ab2.  throw v0;
  #L492ab4.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492ab8.  if v0 == 0 then goto L492ac8;
  #L492abc.  call temp:= `isOnCompleted`(v0) @signature `Lrx/Notification;.isOnCompleted:()Z` @kind virtual;
  #L492ac2.  v0:= temp;
  #L492ac4.  if v0 != 0 then goto L492b44;
  #L492ac8.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492acc.  if v0 != 0 then goto L492b44;
  #L492ad0.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.notify` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L492ad4.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L492ada.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492ade.  v1:= 0I;
  #L492ae0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L492ae6.  v0:= temp @kind object;
  #L492ae8.  v0:= (`rx.Notification`) v0 @kind object;
  #L492aec.  v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` := v0 @kind object;
  #L492af0.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492af4.  call temp:= `isOnError`(v0) @signature `Lrx/Notification;.isOnError:()Z` @kind virtual;
  #L492afa.  v0:= temp;
  #L492afc.  if v0 != 0 then goto L492b02;
  #L492b00.  goto L492b44;
  #L492b02.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492b06.  call temp:= `getThrowable`(v0) @signature `Lrx/Notification;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L492b0c.  v0:= temp @kind object;
  #L492b0e.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L492b14.  v0:= temp @kind object;
  #L492b16.  throw v0;
  #L492b18.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L492b1a.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.unsubscribe:()V` @kind virtual;
  #L492b20.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L492b26.  v1:= temp @kind object;
  #L492b28.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L492b2e.  call temp:= `createOnError`(v0) @signature `Lrx/Notification;.createOnError:(Ljava/lang/Throwable;)Lrx/Notification;` @kind static;
  #L492b34.  v1:= temp @kind object;
  #L492b36.  v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` := v1 @kind object;
  #L492b3a.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L492b40.  v0:= temp @kind object;
  #L492b42.  throw v0;
  #L492b44.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492b48.  call temp:= `isOnCompleted`(v0) @signature `Lrx/Notification;.isOnCompleted:()Z` @kind virtual;
  #L492b4e.  v0:= temp;
  #L492b50.  v0:= v0 ^~ 1;
  #L492b54.  return v0;
  catch `java.lang.InterruptedException` @[L492ad0..L492ada] goto L492b18;
}
procedure `java.lang.Object` `next`(`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492b78.  call temp:= `hasNext`(v2) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.hasNext:()Z` @kind virtual;
  #L492b7e.  v0:= temp;
  #L492b80.  if v0 == 0 then goto L492ba8;
  #L492b84.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492b88.  call temp:= `isOnNext`(v0) @signature `Lrx/Notification;.isOnNext:()Z` @kind virtual;
  #L492b8e.  v0:= temp;
  #L492b90.  if v0 == 0 then goto L492ba8;
  #L492b94.  v0:= v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` @kind object;
  #L492b98.  call temp:= `getValue`(v0) @signature `Lrx/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L492b9e.  v0:= temp @kind object;
  #L492ba0.  v1:= 0I;
  #L492ba2.  v2.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.iteratorNotification` @type ^`rx.Notification` := v1 @kind object;
  #L492ba6.  return v0 @kind object;
  #L492ba8.  v0:= new `java.util.NoSuchElementException`;
  #L492bac.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L492bb2.  throw v0;
}
procedure `void` `onCompleted`(`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` v0 @kind this) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;

  #L492bfc.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L492c10.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L492c24.  v1:= (`rx.Notification`) v1 @kind object;
  #L492c28.  call `onNext`(v0, v1) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.onNext:(Lrx/Notification;)V` @kind virtual;
  #L492c2e.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` v1 @kind this, `rx.Notification` v2 @kind object) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.onNext:(Lrx/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492c40.  v0:= v1.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492c44.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L492c4a.  v2:= temp @kind object;
  #L492c4c.  if v2 != 0 then goto L492c54;
  #L492c50.  v2:= 1I;
  #L492c52.  goto L492c56;
  #L492c54.  v2:= 0I;
  #L492c56.  if v2 == 0 then goto L492c64;
  #L492c5a.  v2:= v1.`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator.notify` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L492c5e.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L492c64.  return @kind void;
}
procedure `void` `remove`(`rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorLatest$LatestObserverIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492c78.  v0:= new `java.lang.UnsupportedOperationException`;
  #L492c7c.  v1:= "Read-only iterator." @kind object;
  #L492c80.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L492c86.  throw v0;
}
