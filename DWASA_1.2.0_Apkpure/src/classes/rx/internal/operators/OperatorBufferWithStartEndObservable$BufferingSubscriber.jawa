record `rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.child` @AccessFlag FINAL;
  `java.util.List` `rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.chunks` @AccessFlag FINAL;
  `rx.subscriptions.CompositeSubscription` `rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.closingSubscriptions` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.done` @AccessFlag ;
  `rx.internal.operators.OperatorBufferWithStartEndObservable` `rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber` v0 @kind this, `rx.internal.operators.OperatorBufferWithStartEndObservable` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.<init>:(Lrx/internal/operators/OperatorBufferWithStartEndObservable;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49ec9c.  v0.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithStartEndObservable` := v1 @kind object;
  #L49eca0.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49eca6.  v0.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L49ecaa.  v1:= new `java.util.LinkedList`;
  #L49ecae.  call `<init>`(v1) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L49ecb4.  v0.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.chunks` @type ^`java.util.List` := v1 @kind object;
  #L49ecb8.  v1:= new `rx.subscriptions.CompositeSubscription`;
  #L49ecbc.  call `<init>`(v1) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L49ecc2.  v0.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.closingSubscriptions` @type ^`rx.subscriptions.CompositeSubscription` := v1 @kind object;
  #L49ecc6.  v1:= v0.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.closingSubscriptions` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49ecca.  call `add`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49ecd0.  return @kind void;
}
procedure `void` `endBuffer`(`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.endBuffer:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49ece4.  @monitorenter v2
  #L49ece6.  v0:= v2.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49ecea.  if v0 == 0 then goto L49ecf2;
  #L49ecee.  @monitorexit v2
  #L49ecf0.  return @kind void;
  #L49ecf2.  v0:= v2.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49ecf6.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49ecfc.  v0:= temp @kind object;
  #L49ecfe.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49ed04.  v1:= temp;
  #L49ed06.  if v1 == 0 then goto L49ed24;
  #L49ed0a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49ed10.  v1:= temp @kind object;
  #L49ed12.  v1:= (`java.util.List`) v1 @kind object;
  #L49ed16.  if v1 != v3 then goto L49ecfe;
  #L49ed1a.  v1:= 1I;
  #L49ed1c.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L49ed22.  goto L49ed26;
  #L49ed24.  v1:= 0I;
  #L49ed26.  @monitorexit v2
  #L49ed28.  if v1 == 0 then goto L49ed36;
  #L49ed2c.  v0:= v2.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49ed30.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49ed36.  return @kind void;
  #L49ed38.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ed3a.  @monitorexit v2
  #L49ed3c.  goto L49ed40;
  #L49ed3e.  throw v3;
  #L49ed40.  goto L49ed3e;
  catch `java.lang.Throwable` @[L49ece6..L49ed28] goto L49ed38;
  catch `java.lang.Throwable` @[L49ed3a..L49ed3c] goto L49ed38;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49ed68.  @monitorenter v3
  #L49ed6a.  v0:= v3.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49ed6e.  if v0 == 0 then goto L49ed76;
  #L49ed72.  @monitorexit v3
  #L49ed74.  return @kind void;
  #L49ed76.  v0:= 1I;
  #L49ed78.  v3.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49ed7c.  v0:= new `java.util.LinkedList`;
  #L49ed80.  v1:= v3.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49ed84.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L49ed8a.  v1:= v3.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49ed8e.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L49ed94.  @monitorexit v3
  #L49ed96.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49ed9c.  v0:= temp @kind object;
  #L49ed9e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49eda4.  v1:= temp;
  #L49eda6.  if v1 == 0 then goto L49edc2;
  #L49edaa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49edb0.  v1:= temp @kind object;
  #L49edb2.  v1:= (`java.util.List`) v1 @kind object;
  #L49edb6.  v2:= v3.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49edba.  call `onNext`(v2, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49edc0.  goto L49ed9e;
  #L49edc2.  v0:= v3.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49edc6.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49edcc.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.unsubscribe:()V` @kind virtual;
  #L49edd2.  return @kind void;
  #L49edd4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49edd6.  @monitorexit v3
  #L49edd8.  throw v0;
  #L49edda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49eddc.  v1:= v3.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49ede0.  call `throwOrReport`(v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49ede6.  return @kind void;
  catch `java.lang.Throwable` @[L49ed68..L49ed6a] goto L49edda;
  catch `java.lang.Throwable` @[L49ed6a..L49ed96] goto L49edd4;
  catch `java.lang.Throwable` @[L49ed96..L49edc0] goto L49edda;
  catch `java.lang.Throwable` @[L49edd6..L49edd8] goto L49edd4;
  catch `java.lang.Throwable` @[L49edd8..L49edda] goto L49edda;
}
procedure `void` `onError`(`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ee28.  @monitorenter v1
  #L49ee2a.  v0:= v1.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49ee2e.  if v0 == 0 then goto L49ee36;
  #L49ee32.  @monitorexit v1
  #L49ee34.  return @kind void;
  #L49ee36.  v0:= 1I;
  #L49ee38.  v1.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49ee3c.  v0:= v1.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49ee40.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L49ee46.  @monitorexit v1
  #L49ee48.  v0:= v1.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49ee4c.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49ee52.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.unsubscribe:()V` @kind virtual;
  #L49ee58.  return @kind void;
  #L49ee5a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ee5c.  @monitorexit v1
  #L49ee5e.  throw v2;
  catch `java.lang.Throwable` @[L49ee2a..L49ee48] goto L49ee5a;
  catch `java.lang.Throwable` @[L49ee5c..L49ee5e] goto L49ee5a;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49ee84.  @monitorenter v2
  #L49ee86.  v0:= v2.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49ee8a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49ee90.  v0:= temp @kind object;
  #L49ee92.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49ee98.  v1:= temp;
  #L49ee9a.  if v1 == 0 then goto L49eeb2;
  #L49ee9e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49eea4.  v1:= temp @kind object;
  #L49eea6.  v1:= (`java.util.List`) v1 @kind object;
  #L49eeaa.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49eeb0.  goto L49ee92;
  #L49eeb2.  @monitorexit v2
  #L49eeb4.  return @kind void;
  #L49eeb6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49eeb8.  @monitorexit v2
  #L49eeba.  goto L49eebe;
  #L49eebc.  throw v3;
  #L49eebe.  goto L49eebc;
  catch `java.lang.Throwable` @[L49ee86..L49eeba] goto L49eeb6;
}
procedure `void` `startBuffer`(`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;.startBuffer:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49eedc.  v0:= new `java.util.ArrayList`;
  #L49eee0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49eee6.  @monitorenter v2
  #L49eee8.  v1:= v2.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.done` @type ^`boolean` @kind boolean;
  #L49eeec.  if v1 == 0 then goto L49eef4;
  #L49eef0.  @monitorexit v2
  #L49eef2.  return @kind void;
  #L49eef4.  v1:= v2.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L49eef8.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49eefe.  @monitorexit v2
  #L49ef00.  v1:= v2.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.this$0` @type ^`rx.internal.operators.OperatorBufferWithStartEndObservable` @kind object;
  #L49ef04.  v1:= v1.`rx.internal.operators.OperatorBufferWithStartEndObservable.bufferClosing` @type ^`rx.functions.Func1` @kind object;
  #L49ef08.  call temp:= `call`(v1, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49ef0e.  v3:= temp @kind object;
  #L49ef10.  v3:= (`rx.Observable`) v3 @kind object;
  #L49ef14.  v1:= new `rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1`;
  #L49ef18.  call `<init>`(v1, v2, v0) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber$1;.<init>:(Lrx/internal/operators/OperatorBufferWithStartEndObservable$BufferingSubscriber;Ljava/util/List;)V` @kind direct;
  #L49ef1e.  v0:= v2.`rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber.closingSubscriptions` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49ef22.  call `add`(v0, v1) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49ef28.  call temp:= `unsafeSubscribe`(v3, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49ef2e.  return @kind void;
  #L49ef30.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ef32.  call `throwOrReport`(v3, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49ef38.  return @kind void;
  #L49ef3a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ef3c.  @monitorexit v2
  #L49ef3e.  throw v3;
  catch `java.lang.Throwable` @[L49eee8..L49ef00] goto L49ef3a;
  catch `java.lang.Throwable` @[L49ef00..L49ef14] goto L49ef30;
  catch `java.lang.Throwable` @[L49ef3c..L49ef3e] goto L49ef3a;
}
