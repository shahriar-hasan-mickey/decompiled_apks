record `rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `rx.internal.operators.OperatorReplay$BoundedReplayBuffer` @kind class {
  `int` `rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer.limit` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer` v0 @kind this, `int` v1 ) @signature `Lrx/internal/operators/OperatorReplay$SizeBoundReplayBuffer;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a710c.  call `<init>`(v0) @signature `Lrx/internal/operators/OperatorReplay$BoundedReplayBuffer;.<init>:()V` @kind direct;
  #L4a7112.  v0.`rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer.limit` @type ^`int` := v1;
  #L4a7116.  return @kind void;
}
procedure `void` `truncate`(`rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer` v2 @kind this) @signature `Lrx/internal/operators/OperatorReplay$SizeBoundReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a7128.  v0:= v2.`rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer.size` @type ^`int`;
  #L4a712c.  v1:= v2.`rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer.limit` @type ^`int`;
  #L4a7130.  if v0 <= v1 then goto L4a713a;
  #L4a7134.  call `removeFirst`(v2) @signature `Lrx/internal/operators/OperatorReplay$SizeBoundReplayBuffer;.removeFirst:()V` @kind virtual;
  #L4a713a.  return @kind void;
}
