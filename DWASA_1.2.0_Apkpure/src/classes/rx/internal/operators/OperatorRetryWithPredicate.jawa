record `rx.internal.operators.OperatorRetryWithPredicate` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Func2` `rx.internal.operators.OperatorRetryWithPredicate.predicate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorRetryWithPredicate` v0 @kind this, `rx.functions.Func2` v1 @kind object) @signature `Lrx/internal/operators/OperatorRetryWithPredicate;.<init>:(Lrx/functions/Func2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a7860.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7866.  v0.`rx.internal.operators.OperatorRetryWithPredicate.predicate` @type ^`rx.functions.Func2` := v1 @kind object;
  #L4a786a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorRetryWithPredicate` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorRetryWithPredicate;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a77e4.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a77e8.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorRetryWithPredicate;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a77ee.  v1:= temp @kind object;
  #L4a77f0.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorRetryWithPredicate` v7 @kind this, `rx.Subscriber` v8 @kind object) @signature `Lrx/internal/operators/OperatorRetryWithPredicate;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4a7804.  call temp:= `trampoline`() @signature `Lrx/schedulers/Schedulers;.trampoline:()Lrx/Scheduler;` @kind static;
  #L4a780a.  v0:= temp @kind object;
  #L4a780c.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4a7812.  v4:= temp @kind object;
  #L4a7814.  call `add`(v8, v4) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a781a.  v5:= new `rx.subscriptions.SerialSubscription`;
  #L4a781e.  call `<init>`(v5) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L4a7824.  call `add`(v8, v5) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a782a.  v6:= new `rx.internal.producers.ProducerArbiter`;
  #L4a782e.  call `<init>`(v6) @signature `Lrx/internal/producers/ProducerArbiter;.<init>:()V` @kind direct;
  #L4a7834.  call `setProducer`(v8, v6) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a783a.  v0:= new `rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber`;
  #L4a783e.  v3:= v7.`rx.internal.operators.OperatorRetryWithPredicate.predicate` @type ^`rx.functions.Func2` @kind object;
  #L4a7842.  v1:= v0 @kind object;
  #L4a7844.  v2:= v8 @kind object;
  #L4a7846.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lrx/internal/operators/OperatorRetryWithPredicate$SourceSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func2;Lrx/Scheduler$Worker;Lrx/subscriptions/SerialSubscription;Lrx/internal/producers/ProducerArbiter;)V` @kind direct;
  #L4a784c.  return v0 @kind object;
}
