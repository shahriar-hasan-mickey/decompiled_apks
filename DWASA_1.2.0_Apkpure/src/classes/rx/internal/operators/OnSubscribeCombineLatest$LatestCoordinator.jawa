record `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `rx.Producer` @kind interface, `rx.Subscription` @kind interface {
  `int` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.active` @AccessFlag ;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.actual` @AccessFlag FINAL;
  `int` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.bufferSize` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.cancelled` @AccessFlag VOLATILE;
  `rx.functions.FuncN` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.combiner` @AccessFlag FINAL;
  `int` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.complete` @AccessFlag ;
  `boolean` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.delayError` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.error` @AccessFlag FINAL;
  `java.lang.Object`[] `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.latest` @AccessFlag FINAL;
  `rx.internal.util.atomic.SpscLinkedArrayQueue` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.requested` @AccessFlag FINAL;
  `rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber`[] `rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.subscribers` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.MISSING` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L496e88.  v0:= new `java.lang.Object`;
  #L496e8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L496e92.  `@@rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.MISSING` @type ^`java.lang.Object` := v0 @kind object;
  #L496e96.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.functions.FuncN` v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.<init>:(Lrx/Subscriber;Lrx/functions/FuncN;IIZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L496ea8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L496eae.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L496eb2.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.combiner` @type ^`rx.functions.FuncN` := v2 @kind object;
  #L496eb6.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.bufferSize` @type ^`int` := v4;
  #L496eba.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.delayError` @type ^`boolean` := v5 @kind boolean;
  #L496ebe.  v1:= new `java.lang.Object`[v3];
  #L496ec2.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.latest` @type ^`java.lang.Object`[] := v1 @kind object;
  #L496ec6.  v1:= v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L496eca.  v2:= `@@rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.MISSING` @type ^`java.lang.Object` @kind object;
  #L496ece.  call `fill`(v1, v2) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L496ed4.  v1:= new `rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber`[v3];
  #L496ed8.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.subscribers` @type ^`rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber`[] := v1 @kind object;
  #L496edc.  v1:= new `rx.internal.util.atomic.SpscLinkedArrayQueue`;
  #L496ee0.  call `<init>`(v1, v4) @signature `Lrx/internal/util/atomic/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L496ee6.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.queue` @type ^`rx.internal.util.atomic.SpscLinkedArrayQueue` := v1 @kind object;
  #L496eea.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L496eee.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L496ef4.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L496ef8.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L496efc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L496f02.  v0.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L496f06.  return @kind void;
}
procedure `void` `cancel`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v3 @kind this, `java.util.Queue` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.cancel:(Ljava/util/Queue;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L496f18.  call `clear`(v4) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L496f1e.  v4:= v3.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.subscribers` @type ^`rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber`[] @kind object;
  #L496f22.  v0:= length @variable v4;
  #L496f24.  v1:= 0I;
  #L496f26.  if v1 >= v0 then goto L496f3a;
  #L496f2a.  v2:= v4[v1] @kind object;
  #L496f2e.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$CombinerSubscriber;.unsubscribe:()V` @kind virtual;
  #L496f34.  v1:= v1 + 1;
  #L496f38.  goto L496f26;
  #L496f3a.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v2 @kind this, `boolean` v3 , `boolean` v4 , `rx.Subscriber` v5 @kind object, `java.util.Queue` v6 @kind object, `boolean` v7 ) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L496dec.  v0:= v2.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L496df0.  v1:= 1I;
  #L496df2.  if v0 == 0 then goto L496dfe;
  #L496df6.  call `cancel`(v2, v6) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.cancel:(Ljava/util/Queue;)V` @kind virtual;
  #L496dfc.  return v1;
  #L496dfe.  if v3 == 0 then goto L496e5c;
  #L496e02.  if v7 == 0 then goto L496e2e;
  #L496e06.  if v4 == 0 then goto L496e5c;
  #L496e0a.  v3:= v2.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L496e0e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L496e14.  v3:= temp @kind object;
  #L496e16.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L496e1a.  if v3 == 0 then goto L496e26;
  #L496e1e.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L496e24.  goto L496e2c;
  #L496e26.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L496e2c.  return v1;
  #L496e2e.  v3:= v2.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L496e32.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L496e38.  v3:= temp @kind object;
  #L496e3a.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L496e3e.  if v3 == 0 then goto L496e50;
  #L496e42.  call `cancel`(v2, v6) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.cancel:(Ljava/util/Queue;)V` @kind virtual;
  #L496e48.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L496e4e.  return v1;
  #L496e50.  if v4 == 0 then goto L496e5c;
  #L496e54.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L496e5a.  return v1;
  #L496e5c.  v3:= 0I;
  #L496e5e.  return v3;
}
procedure `void` `combine`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v7 @kind this, `java.lang.Object` v8 @kind object, `int` v9 ) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.combine:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L496f4c.  v0:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.subscribers` @type ^`rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber`[] @kind object;
  #L496f50.  v0:= v0[v9] @kind object;
  #L496f54.  @monitorenter v7
  #L496f56.  v1:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L496f5a.  v1:= length @variable v1;
  #L496f5c.  v2:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L496f60.  v2:= v2[v9] @kind object;
  #L496f64.  v3:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.active` @type ^`int`;
  #L496f68.  v4:= `@@rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.MISSING` @type ^`java.lang.Object` @kind object;
  #L496f6c.  if v2 != v4 then goto L496f78;
  #L496f70.  v3:= v3 + 1;
  #L496f74.  v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.active` @type ^`int` := v3;
  #L496f78.  v4:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.complete` @type ^`int`;
  #L496f7c.  if v8 != 0 then goto L496f8a;
  #L496f80.  v4:= v4 + 1;
  #L496f84.  v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.complete` @type ^`int` := v4;
  #L496f88.  goto L496f9a;
  #L496f8a.  v5:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L496f8e.  call temp:= `getValue`(v8) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L496f94.  v6:= temp @kind object;
  #L496f96.  v5[v9]:= v6 @kind object;
  #L496f9a.  v9:= 0I;
  #L496f9c.  v5:= 1I;
  #L496f9e.  if v3 != v1 then goto L496fa6;
  #L496fa2.  v3:= 1I;
  #L496fa4.  goto L496fa8;
  #L496fa6.  v3:= 0I;
  #L496fa8.  if v4 == v1 then goto L496fb8;
  #L496fac.  if v8 != 0 then goto L496fba;
  #L496fb0.  v1:= `@@rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.MISSING` @type ^`java.lang.Object` @kind object;
  #L496fb4.  if v2 != v1 then goto L496fba;
  #L496fb8.  v9:= 1I;
  #L496fba.  if v9 != 0 then goto L497008;
  #L496fbe.  if v8 == 0 then goto L496fde;
  #L496fc2.  if v3 == 0 then goto L496fde;
  #L496fc6.  v9:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.queue` @type ^`rx.internal.util.atomic.SpscLinkedArrayQueue` @kind object;
  #L496fca.  v1:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L496fce.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L496fd4.  v1:= temp @kind object;
  #L496fd6.  call temp:= `offer`(v9, v0, v1) @signature `Lrx/internal/util/atomic/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L496fdc.  goto L49700c;
  #L496fde.  if v8 != 0 then goto L49700c;
  #L496fe2.  v9:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L496fe6.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L496fec.  v9:= temp @kind object;
  #L496fee.  if v9 == 0 then goto L49700c;
  #L496ff2.  v9:= `@@rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.MISSING` @type ^`java.lang.Object` @kind object;
  #L496ff6.  if v2 == v9 then goto L497002;
  #L496ffa.  v9:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.delayError` @type ^`boolean` @kind boolean;
  #L496ffe.  if v9 != 0 then goto L49700c;
  #L497002.  v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.done` @type ^`boolean` := v5 @kind boolean;
  #L497006.  goto L49700c;
  #L497008.  v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.done` @type ^`boolean` := v5 @kind boolean;
  #L49700c.  @monitorexit v7
  #L49700e.  if v3 != 0 then goto L497022;
  #L497012.  if v8 == 0 then goto L497022;
  #L497016.  v8:= 1L;
  #L49701a.  call `requestMore`(v0, v8) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$CombinerSubscriber;.requestMore:(J)V` @kind virtual;
  #L497020.  return @kind void;
  #L497022.  call `drain`(v7) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.drain:()V` @kind virtual;
  #L497028.  return @kind void;
  #L49702a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49702c.  @monitorexit v7
  #L49702e.  throw v8;
  catch `java.lang.Throwable` @[L496f56..L49700e] goto L49702a;
  catch `java.lang.Throwable` @[L49702c..L49702e] goto L49702a;
}
procedure `void` `drain`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v19 @kind this) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L497054.  v7:= v19 @kind object;
  #L497058.  call temp:= `getAndIncrement`(v19) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.getAndIncrement:()I` @kind virtual;
  #L49705e.  v0:= temp;
  #L497060.  if v0 == 0 then goto L497066;
  #L497064.  return @kind void;
  #L497066.  v8:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.queue` @type ^`rx.internal.util.atomic.SpscLinkedArrayQueue` @kind object;
  #L49706a.  v9:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.actual` @type ^`rx.Subscriber` @kind object;
  #L49706e.  v0:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.delayError` @type ^`boolean` @kind boolean;
  #L497072.  v10:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L497076.  v11:= 1I;
  #L497078.  v12:= 1I;
  #L49707a.  v2:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L49707e.  call temp:= `isEmpty`(v8) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L497084.  v3:= temp;
  #L497086.  v1:= v19 @kind object;
  #L49708a.  v4:= v9 @kind object;
  #L49708c.  v5:= v8 @kind object;
  #L49708e.  v6:= v0;
  #L497090.  call temp:= `checkTerminated`(v1, v2, v3, v4, v5, v6) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z` @kind virtual;
  #L497096.  v1:= temp;
  #L497098.  if v1 == 0 then goto L49709e;
  #L49709c.  return @kind void;
  #L49709e.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4970a4.  v13:= temp @kind wide;
  #L4970a6.  v5:= 0L;
  #L4970aa.  v1:= lcmp(v5, v13);
  #L4970ae.  if v1 == 0 then goto L497174;
  #L4970b2.  v2:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L4970b6.  call temp:= `peek`(v8) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L4970bc.  v1:= temp @kind object;
  #L4970be.  v4:= v1 @kind object;
  #L4970c0.  v4:= (`rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber`) v4 @kind object;
  #L4970c4.  if v4 != 0 then goto L4970ce;
  #L4970c8.  v16:= 1I;
  #L4970cc.  goto L4970d4;
  #L4970ce.  v1:= 0I;
  #L4970d0.  v16:= 0I;
  #L4970d4.  v1:= v19 @kind object;
  #L4970d8.  v3:= v16;
  #L4970dc.  v15:= v4 @kind object;
  #L4970de.  v4:= v9 @kind object;
  #L4970e0.  v17:= v5 @kind wide;
  #L4970e4.  v5:= v8 @kind object;
  #L4970e6.  v6:= v0;
  #L4970e8.  call temp:= `checkTerminated`(v1, v2, v3, v4, v5, v6) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z` @kind virtual;
  #L4970ee.  v1:= temp;
  #L4970f0.  if v1 == 0 then goto L4970f6;
  #L4970f4.  return @kind void;
  #L4970f6.  if v16 == 0 then goto L497100;
  #L4970fa.  v3:= v17 @kind wide;
  #L4970fe.  goto L497176;
  #L497100.  call temp:= `poll`(v8) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L497106.  call temp:= `poll`(v8) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49710c.  v1:= temp @kind object;
  #L49710e.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L497112.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L497116.  if v1 != 0 then goto L49713a;
  #L49711a.  v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.cancelled` @type ^`boolean` := v11 @kind boolean;
  #L49711e.  call `cancel`(v7, v8) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.cancel:(Ljava/util/Queue;)V` @kind virtual;
  #L497124.  v0:= new `java.lang.IllegalStateException`;
  #L497128.  v1:= "Broken queue?! Sender received but not the array." @kind object;
  #L49712c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L497132.  call `onError`(v9, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L497138.  return @kind void;
  #L49713a.  v2:= v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.combiner` @type ^`rx.functions.FuncN` @kind object;
  #L49713e.  call temp:= `call`(v2, v1) @signature `Lrx/functions/FuncN;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L497144.  v1:= temp @kind object;
  #L497146.  call `onNext`(v9, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49714c.  v1:= 1L;
  #L497150.  call `requestMore`(v15, v1) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$CombinerSubscriber;.requestMore:(J)V` @kind virtual;
  #L497156.  v3:= v17 @kind wide;
  #L49715a.  v5:= v3 + v1 @kind long;
  #L49715e.  goto L4970aa;
  #L497160.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L497162.  v7.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.cancelled` @type ^`boolean` := v11 @kind boolean;
  #L497166.  call `cancel`(v7, v8) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.cancel:(Ljava/util/Queue;)V` @kind virtual;
  #L49716c.  call `onError`(v9, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L497172.  return @kind void;
  #L497174.  v3:= v5 @kind wide;
  #L497176.  v1:= 0L;
  #L49717a.  v5:= lcmp(v3, v1);
  #L49717e.  if v5 == 0 then goto L49719a;
  #L497182.  v1:= 9223372036854775807L;
  #L49718c.  v5:= lcmp(v13, v1);
  #L497190.  if v5 == 0 then goto L49719a;
  #L497194.  call temp:= `produced`(v10, v3) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49719a.  v1:= -v12 @kind int;
  #L49719c.  call temp:= `addAndGet`(v7, v1) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.addAndGet:(I)I` @kind virtual;
  #L4971a2.  v12:= temp;
  #L4971a4.  if v12 != 0 then goto L49707a;
  #L4971a8.  return @kind void;
  catch `java.lang.Throwable` @[L49713a..L497146] goto L497160;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L496e70.  v0:= v1.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L496e74.  return v0;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.onError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4971c8.  v0:= v5.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4971cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4971d2.  v1:= temp @kind object;
  #L4971d4.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4971d8.  if v1 == 0 then goto L497234;
  #L4971dc.  v2:= instanceof @variable v1 @type ^`rx.exceptions.CompositeException` @kind boolean;
  #L4971e0.  if v2 == 0 then goto L49720e;
  #L4971e4.  v2:= v1 @kind object;
  #L4971e6.  v2:= (`rx.exceptions.CompositeException`) v2 @kind object;
  #L4971ea.  v3:= new `java.util.ArrayList`;
  #L4971ee.  call temp:= `getExceptions`(v2) @signature `Lrx/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L4971f4.  v2:= temp @kind object;
  #L4971f6.  call `<init>`(v3, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4971fc.  call temp:= `add`(v3, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L497202.  v2:= new `rx.exceptions.CompositeException`;
  #L497206.  call `<init>`(v2, v3) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L49720c.  goto L497236;
  #L49720e.  v2:= new `rx.exceptions.CompositeException`;
  #L497212.  v3:= 2I;
  #L497214.  v3:= new `java.lang.Throwable`[v3];
  #L497218.  v4:= 0I;
  #L49721a.  v3[v4]:= v1 @kind object;
  #L49721e.  v4:= 1I;
  #L497220.  v3[v4]:= v6 @kind object;
  #L497224.  call temp:= `asList`(v3) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L49722a.  v3:= temp @kind object;
  #L49722c.  call `<init>`(v2, v3) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L497232.  goto L497236;
  #L497234.  v2:= v6 @kind object;
  #L497236.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49723c.  v1:= temp;
  #L49723e.  if v1 == 0 then goto L4971cc;
  #L497242.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L497254.  v0:= 0L;
  #L497258.  v2:= lcmp(v4, v0);
  #L49725c.  if v2 < 0 then goto L49727a;
  #L497260.  v2:= lcmp(v4, v0);
  #L497264.  if v2 == 0 then goto L497278;
  #L497268.  v0:= v3.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49726c.  call temp:= `getAndAddRequest`(v0, v4) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L497272.  call `drain`(v3) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.drain:()V` @kind virtual;
  #L497278.  return @kind void;
  #L49727a.  v0:= new `java.lang.IllegalArgumentException`;
  #L49727e.  v1:= new `java.lang.StringBuilder`;
  #L497282.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L497288.  v2:= "n >= required but it was " @kind object;
  #L49728c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L497292.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L497298.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49729e.  v4:= temp @kind object;
  #L4972a0.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4972a6.  throw v0;
}
procedure `void` `subscribe`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v5 @kind this, `rx.Observable`[] v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.subscribe:([Lrx/Observable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4972b8.  v0:= v5.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.subscribers` @type ^`rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber`[] @kind object;
  #L4972bc.  v1:= length @variable v0;
  #L4972be.  v2:= 0I;
  #L4972c0.  v3:= 0I;
  #L4972c2.  if v3 >= v1 then goto L4972da;
  #L4972c6.  v4:= new `rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber`;
  #L4972ca.  call `<init>`(v4, v5, v3) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$CombinerSubscriber;.<init>:(Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;I)V` @kind direct;
  #L4972d0.  v0[v3]:= v4 @kind object;
  #L4972d4.  v3:= v3 + 1;
  #L4972d8.  goto L4972c2;
  #L4972da.  call `lazySet`(v5, v2) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.lazySet:(I)V` @kind virtual;
  #L4972e0.  v3:= v5.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.actual` @type ^`rx.Subscriber` @kind object;
  #L4972e4.  call `add`(v3, v5) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4972ea.  v3:= v5.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.actual` @type ^`rx.Subscriber` @kind object;
  #L4972ee.  call `setProducer`(v3, v5) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4972f4.  if v2 >= v1 then goto L497316;
  #L4972f8.  v3:= v5.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L4972fc.  if v3 == 0 then goto L497302;
  #L497300.  return @kind void;
  #L497302.  v3:= v6[v2] @kind object;
  #L497306.  v4:= v0[v2] @kind object;
  #L49730a.  call temp:= `subscribe`(v3, v4) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L497310.  v2:= v2 + 1;
  #L497314.  goto L4972f4;
  #L497316.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497328.  v0:= v1.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L49732c.  if v0 != 0 then goto L49734c;
  #L497330.  v0:= 1I;
  #L497332.  v1.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L497336.  call temp:= `getAndIncrement`(v1) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.getAndIncrement:()I` @kind virtual;
  #L49733c.  v0:= temp;
  #L49733e.  if v0 != 0 then goto L49734c;
  #L497342.  v0:= v1.`rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator.queue` @type ^`rx.internal.util.atomic.SpscLinkedArrayQueue` @kind object;
  #L497346.  call `cancel`(v1, v0) @signature `Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;.cancel:(Ljava/util/Queue;)V` @kind virtual;
  #L49734c.  return @kind void;
}
