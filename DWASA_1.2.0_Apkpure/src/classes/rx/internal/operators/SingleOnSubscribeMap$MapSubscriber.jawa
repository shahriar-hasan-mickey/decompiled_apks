record `rx.internal.operators.SingleOnSubscribeMap$MapSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class {
  `rx.SingleSubscriber` `rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.actual` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.done` @AccessFlag ;
  `rx.functions.Func1` `rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.mapper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeMap$MapSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aff70.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4aff76.  v0.`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4aff7a.  v0.`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.mapper` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4aff7e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeMap$MapSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aff90.  v0:= v1.`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.done` @type ^`boolean` @kind boolean;
  #L4aff94.  if v0 == 0 then goto L4affa0;
  #L4aff98.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4aff9e.  return @kind void;
  #L4affa0.  v0:= 1I;
  #L4affa2.  v1.`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4affa6.  v0:= v1.`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4affaa.  call `onError`(v0, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4affb0.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeMap$MapSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4affc4.  v0:= v1.`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.mapper` @type ^`rx.functions.Func1` @kind object;
  #L4affc8.  call temp:= `call`(v0, v2) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4affce.  v2:= temp @kind object;
  #L4affd0.  v0:= v1.`rx.internal.operators.SingleOnSubscribeMap$MapSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4affd4.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4affda.  return @kind void;
  #L4affdc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4affde.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4affe4.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/SingleOnSubscribeMap$MapSubscriber;.unsubscribe:()V` @kind virtual;
  #L4affea.  call temp:= `addValueAsLastCause`(v0, v2) @signature `Lrx/exceptions/OnErrorThrowable;.addValueAsLastCause:(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4afff0.  v2:= temp @kind object;
  #L4afff2.  call `onError`(v1, v2) @signature `Lrx/internal/operators/SingleOnSubscribeMap$MapSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4afff8.  return @kind void;
  catch `java.lang.Throwable` @[L4affc4..L4affd0] goto L4affdc;
}
