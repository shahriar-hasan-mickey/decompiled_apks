record `rx.internal.operators.OnSubscribeRedo$5` @kind class @AccessFlag  extends `rx.Producer` @kind interface {
  `rx.internal.operators.OnSubscribeRedo` `rx.internal.operators.OnSubscribeRedo$5.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.internal.producers.ProducerArbiter` `rx.internal.operators.OnSubscribeRedo$5.val$arbiter` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OnSubscribeRedo$5.val$consumerCapacity` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OnSubscribeRedo$5.val$resumeBoundary` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Action0` `rx.internal.operators.OnSubscribeRedo$5.val$subscribeToSource` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.internal.operators.OnSubscribeRedo$5.val$worker` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRedo$5` v0 @kind this, `rx.internal.operators.OnSubscribeRedo` v1 @kind object, `java.util.concurrent.atomic.AtomicLong` v2 @kind object, `rx.internal.producers.ProducerArbiter` v3 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v4 @kind object, `rx.Scheduler$Worker` v5 @kind object, `rx.functions.Action0` v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$5;.<init>:(Lrx/internal/operators/OnSubscribeRedo;Ljava/util/concurrent/atomic/AtomicLong;Lrx/internal/producers/ProducerArbiter;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/Scheduler$Worker;Lrx/functions/Action0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49c100.  v0.`rx.internal.operators.OnSubscribeRedo$5.this$0` @type ^`rx.internal.operators.OnSubscribeRedo` := v1 @kind object;
  #L49c104.  v0.`rx.internal.operators.OnSubscribeRedo$5.val$consumerCapacity` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L49c108.  v0.`rx.internal.operators.OnSubscribeRedo$5.val$arbiter` @type ^`rx.internal.producers.ProducerArbiter` := v3 @kind object;
  #L49c10c.  v0.`rx.internal.operators.OnSubscribeRedo$5.val$resumeBoundary` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v4 @kind object;
  #L49c110.  v0.`rx.internal.operators.OnSubscribeRedo$5.val$worker` @type ^`rx.Scheduler$Worker` := v5 @kind object;
  #L49c114.  v0.`rx.internal.operators.OnSubscribeRedo$5.val$subscribeToSource` @type ^`rx.functions.Action0` := v6 @kind object;
  #L49c118.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49c11e.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OnSubscribeRedo$5` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OnSubscribeRedo$5;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49c130.  v0:= 0L;
  #L49c134.  v2:= lcmp(v4, v0);
  #L49c138.  if v2 <= 0 then goto L49c172;
  #L49c13c.  v0:= v3.`rx.internal.operators.OnSubscribeRedo$5.val$consumerCapacity` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49c140.  call temp:= `getAndAddRequest`(v0, v4) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49c146.  v0:= v3.`rx.internal.operators.OnSubscribeRedo$5.val$arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L49c14a.  call `request`(v0, v4) @signature `Lrx/internal/producers/ProducerArbiter;.request:(J)V` @kind virtual;
  #L49c150.  v4:= v3.`rx.internal.operators.OnSubscribeRedo$5.val$resumeBoundary` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49c154.  v5:= 1I;
  #L49c156.  v0:= 0I;
  #L49c158.  call temp:= `compareAndSet`(v4, v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49c15e.  v4:= temp;
  #L49c160.  if v4 == 0 then goto L49c172;
  #L49c164.  v4:= v3.`rx.internal.operators.OnSubscribeRedo$5.val$worker` @type ^`rx.Scheduler$Worker` @kind object;
  #L49c168.  v5:= v3.`rx.internal.operators.OnSubscribeRedo$5.val$subscribeToSource` @type ^`rx.functions.Action0` @kind object;
  #L49c16c.  call temp:= `schedule`(v4, v5) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L49c172.  return @kind void;
}
