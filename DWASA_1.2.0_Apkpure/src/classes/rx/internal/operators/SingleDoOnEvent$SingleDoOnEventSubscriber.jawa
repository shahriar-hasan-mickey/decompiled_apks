record `rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class {
  `rx.SingleSubscriber` `rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.actual` @AccessFlag FINAL;
  `rx.functions.Action1` `rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.onError` @AccessFlag FINAL;
  `rx.functions.Action1` `rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.onSuccess` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object, `rx.functions.Action1` v2 @kind object, `rx.functions.Action1` v3 @kind object) @signature `Lrx/internal/operators/SingleDoOnEvent$SingleDoOnEventSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/functions/Action1;Lrx/functions/Action1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4af5f0.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4af5f6.  v0.`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4af5fa.  v0.`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.onSuccess` @type ^`rx.functions.Action1` := v2 @kind object;
  #L4af5fe.  v0.`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.onError` @type ^`rx.functions.Action1` := v3 @kind object;
  #L4af602.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lrx/internal/operators/SingleDoOnEvent$SingleDoOnEventSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4af614.  v0:= v5.`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.onError` @type ^`rx.functions.Action1` @kind object;
  #L4af618.  call `call`(v0, v6) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4af61e.  v0:= v5.`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af622.  call `onError`(v0, v6) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af628.  return @kind void;
  #L4af62a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af62c.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af632.  v1:= v5.`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af636.  v2:= new `rx.exceptions.CompositeException`;
  #L4af63a.  v3:= 2I;
  #L4af63c.  v3:= new `java.lang.Throwable`[v3];
  #L4af640.  v4:= 0I;
  #L4af642.  v3[v4]:= v6 @kind object;
  #L4af646.  v6:= 1I;
  #L4af648.  v3[v6]:= v0 @kind object;
  #L4af64c.  call `<init>`(v2, v3) @signature `Lrx/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4af652.  call `onError`(v1, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af658.  return @kind void;
  catch `java.lang.Throwable` @[L4af614..L4af61e] goto L4af62a;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/SingleDoOnEvent$SingleDoOnEventSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af678.  v0:= v1.`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.onSuccess` @type ^`rx.functions.Action1` @kind object;
  #L4af67c.  call `call`(v0, v2) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4af682.  v0:= v1.`rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af686.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4af68c.  return @kind void;
  #L4af68e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af690.  call `throwOrReport`(v0, v1, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/SingleSubscriber;Ljava/lang/Object;)V` @kind static;
  #L4af696.  return @kind void;
  catch `java.lang.Throwable` @[L4af678..L4af682] goto L4af68e;
}
