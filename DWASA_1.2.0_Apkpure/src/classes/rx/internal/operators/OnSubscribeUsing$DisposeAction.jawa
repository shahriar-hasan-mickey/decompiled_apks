record `rx.internal.operators.OnSubscribeUsing$DisposeAction` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.functions.Action0` @kind interface, `rx.Subscription` @kind interface {
  `rx.functions.Action1` `rx.internal.operators.OnSubscribeUsing$DisposeAction.dispose` @AccessFlag PRIVATE;
  `java.lang.Object` `rx.internal.operators.OnSubscribeUsing$DisposeAction.resource` @AccessFlag PRIVATE;
}
global `long` `@@rx.internal.operators.OnSubscribeUsing$DisposeAction.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeUsing$DisposeAction` v0 @kind this, `rx.functions.Action1` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.<init>:(Lrx/functions/Action1;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49da90.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49da96.  v0.`rx.internal.operators.OnSubscribeUsing$DisposeAction.dispose` @type ^`rx.functions.Action1` := v1 @kind object;
  #L49da9a.  v0.`rx.internal.operators.OnSubscribeUsing$DisposeAction.resource` @type ^`java.lang.Object` := v2 @kind object;
  #L49da9e.  v1:= 0I;
  #L49daa0.  call `lazySet`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.lazySet:(Z)V` @kind virtual;
  #L49daa6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeUsing$DisposeAction` v3 @kind this) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49dab8.  v0:= 0I;
  #L49daba.  v1:= 1I;
  #L49dabc.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49dac2.  v0:= temp;
  #L49dac4.  if v0 == 0 then goto L49daee;
  #L49dac8.  v0:= 0I;
  #L49daca.  v1:= v3.`rx.internal.operators.OnSubscribeUsing$DisposeAction.dispose` @type ^`rx.functions.Action1` @kind object;
  #L49dace.  v2:= v3.`rx.internal.operators.OnSubscribeUsing$DisposeAction.resource` @type ^`java.lang.Object` @kind object;
  #L49dad2.  call `call`(v1, v2) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L49dad8.  v3.`rx.internal.operators.OnSubscribeUsing$DisposeAction.resource` @type ^`java.lang.Object` := v0 @kind object;
  #L49dadc.  v3.`rx.internal.operators.OnSubscribeUsing$DisposeAction.dispose` @type ^`rx.functions.Action1` := v0 @kind object;
  #L49dae0.  goto L49daee;
  #L49dae2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49dae4.  v3.`rx.internal.operators.OnSubscribeUsing$DisposeAction.resource` @type ^`java.lang.Object` := v0 @kind object;
  #L49dae8.  v3.`rx.internal.operators.OnSubscribeUsing$DisposeAction.dispose` @type ^`rx.functions.Action1` := v0 @kind object;
  #L49daec.  throw v1;
  #L49daee.  return @kind void;
  catch `java.lang.Throwable` @[L49daca..L49dad8] goto L49dae2;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OnSubscribeUsing$DisposeAction` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49da74.  call temp:= `get`(v1) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.get:()Z` @kind virtual;
  #L49da7a.  v0:= temp;
  #L49da7c.  return v0;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OnSubscribeUsing$DisposeAction` v0 @kind this) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;

  #L49db0c.  call `call`(v0) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.call:()V` @kind virtual;
  #L49db12.  return @kind void;
}
