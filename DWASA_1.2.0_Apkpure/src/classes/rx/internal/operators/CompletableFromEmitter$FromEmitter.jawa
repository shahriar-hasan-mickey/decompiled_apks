record `rx.internal.operators.CompletableFromEmitter$FromEmitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.CompletableEmitter` @kind interface, `rx.Subscription` @kind interface {
  `rx.CompletableSubscriber` `rx.internal.operators.CompletableFromEmitter$FromEmitter.actual` @AccessFlag FINAL;
  `rx.internal.subscriptions.SequentialSubscription` `rx.internal.operators.CompletableFromEmitter$FromEmitter.resource` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.CompletableFromEmitter$FromEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.CompletableFromEmitter$FromEmitter` v0 @kind this, `rx.CompletableSubscriber` v1 @kind object) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.<init>:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4944f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4944fe.  v0.`rx.internal.operators.CompletableFromEmitter$FromEmitter.actual` @type ^`rx.CompletableSubscriber` := v1 @kind object;
  #L494502.  v1:= new `rx.internal.subscriptions.SequentialSubscription`;
  #L494506.  call `<init>`(v1) @signature `Lrx/internal/subscriptions/SequentialSubscription;.<init>:()V` @kind direct;
  #L49450c.  v0.`rx.internal.operators.CompletableFromEmitter$FromEmitter.resource` @type ^`rx.internal.subscriptions.SequentialSubscription` := v1 @kind object;
  #L494510.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.CompletableFromEmitter$FromEmitter` v1 @kind this) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4944dc.  call temp:= `get`(v1) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.get:()Z` @kind virtual;
  #L4944e2.  v0:= temp;
  #L4944e4.  return v0;
}
procedure `void` `onCompleted`(`rx.internal.operators.CompletableFromEmitter$FromEmitter` v2 @kind this) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L494524.  v0:= 0I;
  #L494526.  v1:= 1I;
  #L494528.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49452e.  v0:= temp;
  #L494530.  if v0 == 0 then goto L494558;
  #L494534.  v0:= v2.`rx.internal.operators.CompletableFromEmitter$FromEmitter.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L494538.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L49453e.  v0:= v2.`rx.internal.operators.CompletableFromEmitter$FromEmitter.resource` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L494542.  call `unsubscribe`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.unsubscribe:()V` @kind virtual;
  #L494548.  goto L494558;
  #L49454a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49454c.  v1:= v2.`rx.internal.operators.CompletableFromEmitter$FromEmitter.resource` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L494550.  call `unsubscribe`(v1) @signature `Lrx/internal/subscriptions/SequentialSubscription;.unsubscribe:()V` @kind virtual;
  #L494556.  throw v0;
  #L494558.  return @kind void;
  catch `java.lang.Throwable` @[L494534..L49453e] goto L49454a;
}
procedure `void` `onError`(`rx.internal.operators.CompletableFromEmitter$FromEmitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L494578.  v0:= 0I;
  #L49457a.  v1:= 1I;
  #L49457c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.compareAndSet:(ZZ)Z` @kind virtual;
  #L494582.  v0:= temp;
  #L494584.  if v0 == 0 then goto L4945ac;
  #L494588.  v0:= v2.`rx.internal.operators.CompletableFromEmitter$FromEmitter.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L49458c.  call `onError`(v0, v3) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L494592.  v3:= v2.`rx.internal.operators.CompletableFromEmitter$FromEmitter.resource` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L494596.  call `unsubscribe`(v3) @signature `Lrx/internal/subscriptions/SequentialSubscription;.unsubscribe:()V` @kind virtual;
  #L49459c.  goto L4945b2;
  #L49459e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4945a0.  v0:= v2.`rx.internal.operators.CompletableFromEmitter$FromEmitter.resource` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4945a4.  call `unsubscribe`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.unsubscribe:()V` @kind virtual;
  #L4945aa.  throw v3;
  #L4945ac.  call `onError`(v3) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4945b2.  return @kind void;
  catch `java.lang.Throwable` @[L494588..L494592] goto L49459e;
}
procedure `void` `setCancellation`(`rx.internal.operators.CompletableFromEmitter$FromEmitter` v1 @kind this, `rx.functions.Cancellable` v2 @kind object) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.setCancellation:(Lrx/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4945d0.  v0:= new `rx.internal.operators.OnSubscribeFromEmitter$CancellableSubscription`;
  #L4945d4.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$CancellableSubscription;.<init>:(Lrx/functions/Cancellable;)V` @kind direct;
  #L4945da.  call `setSubscription`(v1, v0) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.setSubscription:(Lrx/Subscription;)V` @kind virtual;
  #L4945e0.  return @kind void;
}
procedure `void` `setSubscription`(`rx.internal.operators.CompletableFromEmitter$FromEmitter` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.setSubscription:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4945f4.  v0:= v1.`rx.internal.operators.CompletableFromEmitter$FromEmitter.resource` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4945f8.  call temp:= `update`(v0, v2) @signature `Lrx/internal/subscriptions/SequentialSubscription;.update:(Lrx/Subscription;)Z` @kind virtual;
  #L4945fe.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.operators.CompletableFromEmitter$FromEmitter` v2 @kind this) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L494610.  v0:= 0I;
  #L494612.  v1:= 1I;
  #L494614.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lrx/internal/operators/CompletableFromEmitter$FromEmitter;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49461a.  v0:= temp;
  #L49461c.  if v0 == 0 then goto L49462a;
  #L494620.  v0:= v2.`rx.internal.operators.CompletableFromEmitter$FromEmitter.resource` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L494624.  call `unsubscribe`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.unsubscribe:()V` @kind virtual;
  #L49462a.  return @kind void;
}
