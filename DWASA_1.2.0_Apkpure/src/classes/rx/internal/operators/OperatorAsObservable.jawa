record `rx.internal.operators.OperatorAsObservable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
}
procedure `void` `<init>`(`rx.internal.operators.OperatorAsObservable` v0 @kind this) @signature `Lrx/internal/operators/OperatorAsObservable;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49e058.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49e05e.  return @kind void;
}
procedure `rx.internal.operators.OperatorAsObservable` `instance`() @signature `Lrx/internal/operators/OperatorAsObservable;.instance:()Lrx/internal/operators/OperatorAsObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49e040.  v0:= `@@rx.internal.operators.OperatorAsObservable$Holder.INSTANCE` @type ^`rx.internal.operators.OperatorAsObservable` @kind object;
  #L49e044.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorAsObservable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorAsObservable;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49e00c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49e010.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorAsObservable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L49e016.  v1:= temp @kind object;
  #L49e018.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorAsObservable` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OperatorAsObservable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;

  #L49e02c.  return v1 @kind object;
}
