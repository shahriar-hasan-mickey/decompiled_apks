record `rx.internal.operators.OperatorSwitchIfEmpty` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Observable` `rx.internal.operators.OperatorSwitchIfEmpty.alternate` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSwitchIfEmpty` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty;.<init>:(Lrx/Observable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a9c14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a9c1a.  v0.`rx.internal.operators.OperatorSwitchIfEmpty.alternate` @type ^`rx.Observable` := v1 @kind object;
  #L4a9c1e.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorSwitchIfEmpty` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9bac.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a9bb0.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a9bb6.  v1:= temp @kind object;
  #L4a9bb8.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorSwitchIfEmpty` v4 @kind this, `rx.Subscriber` v5 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a9bcc.  v0:= new `rx.subscriptions.SerialSubscription`;
  #L4a9bd0.  call `<init>`(v0) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L4a9bd6.  v1:= new `rx.internal.producers.ProducerArbiter`;
  #L4a9bda.  call `<init>`(v1) @signature `Lrx/internal/producers/ProducerArbiter;.<init>:()V` @kind direct;
  #L4a9be0.  v2:= new `rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber`;
  #L4a9be4.  v3:= v4.`rx.internal.operators.OperatorSwitchIfEmpty.alternate` @type ^`rx.Observable` @kind object;
  #L4a9be8.  call `<init>`(v2, v5, v0, v1, v3) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$ParentSubscriber;.<init>:(Lrx/Subscriber;Lrx/subscriptions/SerialSubscription;Lrx/internal/producers/ProducerArbiter;Lrx/Observable;)V` @kind direct;
  #L4a9bee.  call `set`(v0, v2) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4a9bf4.  call `add`(v5, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a9bfa.  call `setProducer`(v5, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a9c00.  return v2 @kind object;
}
