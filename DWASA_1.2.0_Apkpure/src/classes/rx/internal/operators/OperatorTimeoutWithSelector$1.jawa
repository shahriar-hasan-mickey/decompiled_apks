record `rx.internal.operators.OperatorTimeoutWithSelector$1` @kind class @AccessFlag  extends `rx.internal.operators.OperatorTimeoutBase$FirstTimeoutStub` @kind interface {
  `rx.functions.Func0` `rx.internal.operators.OperatorTimeoutWithSelector$1.val$firstTimeoutSelector` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTimeoutWithSelector$1` v0 @kind this, `rx.functions.Func0` v1 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$1;.<init>:(Lrx/functions/Func0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ab308.  v0.`rx.internal.operators.OperatorTimeoutWithSelector$1.val$firstTimeoutSelector` @type ^`rx.functions.Func0` := v1 @kind object;
  #L4ab30c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ab312.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTimeoutWithSelector$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$1;.call:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab280.  v1:= (`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber`) v1 @kind object;
  #L4ab284.  v2:= (`java.lang.Long`) v2 @kind object;
  #L4ab288.  v3:= (`rx.Scheduler$Worker`) v3 @kind object;
  #L4ab28c.  call temp:= `call`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$1;.call:(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;` @kind virtual;
  #L4ab292.  v1:= temp @kind object;
  #L4ab294.  return v1 @kind object;
}
procedure `rx.Subscription` `call`(`rx.internal.operators.OperatorTimeoutWithSelector$1` v1 @kind this, `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v2 @kind object, `java.lang.Long` v3 @kind object, `rx.Scheduler$Worker` v4 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$1;.call:(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ab2a8.  v4:= v1.`rx.internal.operators.OperatorTimeoutWithSelector$1.val$firstTimeoutSelector` @type ^`rx.functions.Func0` @kind object;
  #L4ab2ac.  if v4 == 0 then goto L4ab2e2;
  #L4ab2b0.  call temp:= `call`(v4) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L4ab2b6.  v4:= temp @kind object;
  #L4ab2b8.  v4:= (`rx.Observable`) v4 @kind object;
  #L4ab2bc.  v0:= new `rx.internal.operators.OperatorTimeoutWithSelector$1$1`;
  #L4ab2c0.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$1$1;.<init>:(Lrx/internal/operators/OperatorTimeoutWithSelector$1;Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;)V` @kind direct;
  #L4ab2c6.  call temp:= `unsafeSubscribe`(v4, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4ab2cc.  v2:= temp @kind object;
  #L4ab2ce.  return v2 @kind object;
  #L4ab2d0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ab2d2.  call `throwOrReport`(v3, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4ab2d8.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L4ab2de.  v2:= temp @kind object;
  #L4ab2e0.  return v2 @kind object;
  #L4ab2e2.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L4ab2e8.  v2:= temp @kind object;
  #L4ab2ea.  return v2 @kind object;
  catch `java.lang.Throwable` @[L4ab2b0..L4ab2bc] goto L4ab2d0;
}
