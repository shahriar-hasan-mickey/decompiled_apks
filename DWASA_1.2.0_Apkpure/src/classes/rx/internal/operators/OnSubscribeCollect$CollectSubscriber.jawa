record `rx.internal.operators.OnSubscribeCollect$CollectSubscriber` @kind class @AccessFlag FINAL extends `rx.internal.operators.DeferredScalarSubscriberSafe` @kind class {
  `rx.functions.Action2` `rx.internal.operators.OnSubscribeCollect$CollectSubscriber.collector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeCollect$CollectSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `rx.functions.Action2` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeCollect$CollectSubscriber;.<init>:(Lrx/Subscriber;Ljava/lang/Object;Lrx/functions/Action2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L496bf4.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/DeferredScalarSubscriberSafe;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L496bfa.  v0.`rx.internal.operators.OnSubscribeCollect$CollectSubscriber.value` @type ^`java.lang.Object` := v2 @kind object;
  #L496bfe.  v1:= 1I;
  #L496c00.  v0.`rx.internal.operators.OnSubscribeCollect$CollectSubscriber.hasValue` @type ^`boolean` := v1 @kind boolean;
  #L496c04.  v0.`rx.internal.operators.OnSubscribeCollect$CollectSubscriber.collector` @type ^`rx.functions.Action2` := v3 @kind object;
  #L496c08.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeCollect$CollectSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeCollect$CollectSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L496c1c.  v0:= v2.`rx.internal.operators.OnSubscribeCollect$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L496c20.  if v0 == 0 then goto L496c26;
  #L496c24.  return @kind void;
  #L496c26.  v0:= v2.`rx.internal.operators.OnSubscribeCollect$CollectSubscriber.collector` @type ^`rx.functions.Action2` @kind object;
  #L496c2a.  v1:= v2.`rx.internal.operators.OnSubscribeCollect$CollectSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L496c2e.  call `call`(v0, v1, v3) @signature `Lrx/functions/Action2;.call:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L496c34.  goto L496c4a;
  #L496c36.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L496c38.  call `throwIfFatal`(v3) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L496c3e.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OnSubscribeCollect$CollectSubscriber;.unsubscribe:()V` @kind virtual;
  #L496c44.  call `onError`(v2, v3) @signature `Lrx/internal/operators/OnSubscribeCollect$CollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L496c4a.  return @kind void;
  catch `java.lang.Throwable` @[L496c26..L496c34] goto L496c36;
}
