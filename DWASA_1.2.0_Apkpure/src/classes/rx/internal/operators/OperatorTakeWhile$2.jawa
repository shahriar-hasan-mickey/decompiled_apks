record `rx.internal.operators.OperatorTakeWhile$2` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `int` `rx.internal.operators.OperatorTakeWhile$2.counter` @AccessFlag PRIVATE;
  `boolean` `rx.internal.operators.OperatorTakeWhile$2.done` @AccessFlag PRIVATE;
  `rx.internal.operators.OperatorTakeWhile` `rx.internal.operators.OperatorTakeWhile$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorTakeWhile$2.val$subscriber` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeWhile$2` v0 @kind this, `rx.internal.operators.OperatorTakeWhile` v1 @kind object, `rx.Subscriber` v2 @kind object, `boolean` v3 , `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorTakeWhile$2;.<init>:(Lrx/internal/operators/OperatorTakeWhile;Lrx/Subscriber;ZLrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aa878.  v0.`rx.internal.operators.OperatorTakeWhile$2.this$0` @type ^`rx.internal.operators.OperatorTakeWhile` := v1 @kind object;
  #L4aa87c.  v0.`rx.internal.operators.OperatorTakeWhile$2.val$subscriber` @type ^`rx.Subscriber` := v4 @kind object;
  #L4aa880.  call `<init>`(v0, v2, v3) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;Z)V` @kind direct;
  #L4aa886.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorTakeWhile$2` v1 @kind this) @signature `Lrx/internal/operators/OperatorTakeWhile$2;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa898.  v0:= v1.`rx.internal.operators.OperatorTakeWhile$2.done` @type ^`boolean` @kind boolean;
  #L4aa89c.  if v0 != 0 then goto L4aa8aa;
  #L4aa8a0.  v0:= v1.`rx.internal.operators.OperatorTakeWhile$2.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4aa8a4.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aa8aa.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorTakeWhile$2` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorTakeWhile$2;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa8bc.  v0:= v1.`rx.internal.operators.OperatorTakeWhile$2.done` @type ^`boolean` @kind boolean;
  #L4aa8c0.  if v0 != 0 then goto L4aa8ce;
  #L4aa8c4.  v0:= v1.`rx.internal.operators.OperatorTakeWhile$2.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4aa8c8.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aa8ce.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorTakeWhile$2` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/operators/OperatorTakeWhile$2;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aa8e0.  v0:= 1I;
  #L4aa8e2.  v1:= v4.`rx.internal.operators.OperatorTakeWhile$2.this$0` @type ^`rx.internal.operators.OperatorTakeWhile` @kind object;
  #L4aa8e6.  v1:= v1.`rx.internal.operators.OperatorTakeWhile.predicate` @type ^`rx.functions.Func2` @kind object;
  #L4aa8ea.  v2:= v4.`rx.internal.operators.OperatorTakeWhile$2.counter` @type ^`int`;
  #L4aa8ee.  v3:= v2 + 1;
  #L4aa8f2.  v4.`rx.internal.operators.OperatorTakeWhile$2.counter` @type ^`int` := v3;
  #L4aa8f6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4aa8fc.  v2:= temp @kind object;
  #L4aa8fe.  call temp:= `call`(v1, v5, v2) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4aa904.  v1:= temp @kind object;
  #L4aa906.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L4aa90a.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L4aa910.  v1:= temp;
  #L4aa912.  if v1 == 0 then goto L4aa922;
  #L4aa916.  v0:= v4.`rx.internal.operators.OperatorTakeWhile$2.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4aa91a.  call `onNext`(v0, v5) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4aa920.  goto L4aa936;
  #L4aa922.  v4.`rx.internal.operators.OperatorTakeWhile$2.done` @type ^`boolean` := v0 @kind boolean;
  #L4aa926.  v5:= v4.`rx.internal.operators.OperatorTakeWhile$2.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4aa92a.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aa930.  call `unsubscribe`(v4) @signature `Lrx/internal/operators/OperatorTakeWhile$2;.unsubscribe:()V` @kind virtual;
  #L4aa936.  return @kind void;
  #L4aa938.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aa93a.  v4.`rx.internal.operators.OperatorTakeWhile$2.done` @type ^`boolean` := v0 @kind boolean;
  #L4aa93e.  v0:= v4.`rx.internal.operators.OperatorTakeWhile$2.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4aa942.  call `throwOrReport`(v1, v0, v5) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4aa948.  call `unsubscribe`(v4) @signature `Lrx/internal/operators/OperatorTakeWhile$2;.unsubscribe:()V` @kind virtual;
  #L4aa94e.  return @kind void;
  catch `java.lang.Throwable` @[L4aa8e2..L4aa912] goto L4aa938;
}
