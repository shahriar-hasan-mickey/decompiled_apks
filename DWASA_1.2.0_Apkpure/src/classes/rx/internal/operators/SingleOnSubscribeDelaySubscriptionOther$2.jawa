record `rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.done` @AccessFlag ;
  `rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther` `rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.SingleSubscriber` `rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.val$child` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.val$serial` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2` v0 @kind this, `rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther` v1 @kind object, `rx.SingleSubscriber` v2 @kind object, `rx.subscriptions.SerialSubscription` v3 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeDelaySubscriptionOther$2;.<init>:(Lrx/internal/operators/SingleOnSubscribeDelaySubscriptionOther;Lrx/SingleSubscriber;Lrx/subscriptions/SerialSubscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4afe38.  v0.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.this$0` @type ^`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther` := v1 @kind object;
  #L4afe3c.  v0.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.val$child` @type ^`rx.SingleSubscriber` := v2 @kind object;
  #L4afe40.  v0.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.val$serial` @type ^`rx.subscriptions.SerialSubscription` := v3 @kind object;
  #L4afe44.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4afe4a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2` v2 @kind this) @signature `Lrx/internal/operators/SingleOnSubscribeDelaySubscriptionOther$2;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afe5c.  v0:= v2.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.done` @type ^`boolean` @kind boolean;
  #L4afe60.  if v0 == 0 then goto L4afe66;
  #L4afe64.  return @kind void;
  #L4afe66.  v0:= 1I;
  #L4afe68.  v2.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.done` @type ^`boolean` := v0 @kind boolean;
  #L4afe6c.  v0:= v2.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.val$serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4afe70.  v1:= v2.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4afe74.  call `set`(v0, v1) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4afe7a.  v0:= v2.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.this$0` @type ^`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther` @kind object;
  #L4afe7e.  v0:= v0.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther.main` @type ^`rx.Single` @kind object;
  #L4afe82.  v1:= v2.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4afe86.  call temp:= `subscribe`(v0, v1) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L4afe8c.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeDelaySubscriptionOther$2;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afea0.  v0:= v1.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.done` @type ^`boolean` @kind boolean;
  #L4afea4.  if v0 == 0 then goto L4afeb0;
  #L4afea8.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4afeae.  return @kind void;
  #L4afeb0.  v0:= 1I;
  #L4afeb2.  v1.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.done` @type ^`boolean` := v0 @kind boolean;
  #L4afeb6.  v0:= v1.`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4afeba.  call `onError`(v0, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4afec0.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeDelaySubscriptionOther$2;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4afed4.  call `onCompleted`(v0) @signature `Lrx/internal/operators/SingleOnSubscribeDelaySubscriptionOther$2;.onCompleted:()V` @kind virtual;
  #L4afeda.  return @kind void;
}
