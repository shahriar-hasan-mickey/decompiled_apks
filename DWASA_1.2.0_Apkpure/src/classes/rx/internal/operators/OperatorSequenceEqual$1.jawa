record `rx.internal.operators.OperatorSequenceEqual$1` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
  `rx.functions.Func2` `rx.internal.operators.OperatorSequenceEqual$1.val$equality` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSequenceEqual$1` v0 @kind this, `rx.functions.Func2` v1 @kind object) @signature `Lrx/internal/operators/OperatorSequenceEqual$1;.<init>:(Lrx/functions/Func2;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a8348.  v0.`rx.internal.operators.OperatorSequenceEqual$1.val$equality` @type ^`rx.functions.Func2` := v1 @kind object;
  #L4a834c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a8352.  return @kind void;
}
procedure `java.lang.Boolean` `call`(`rx.internal.operators.OperatorSequenceEqual$1` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lrx/internal/operators/OperatorSequenceEqual$1;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a82c4.  v0:= `@@rx.internal.operators.OperatorSequenceEqual.LOCAL_ON_COMPLETED` @type ^`java.lang.Object` @kind object;
  #L4a82c8.  v1:= 1I;
  #L4a82ca.  v2:= 0I;
  #L4a82cc.  if v5 != v0 then goto L4a82d4;
  #L4a82d0.  v0:= 1I;
  #L4a82d2.  goto L4a82d6;
  #L4a82d4.  v0:= 0I;
  #L4a82d6.  v3:= `@@rx.internal.operators.OperatorSequenceEqual.LOCAL_ON_COMPLETED` @type ^`java.lang.Object` @kind object;
  #L4a82da.  if v6 != v3 then goto L4a82e2;
  #L4a82de.  v3:= 1I;
  #L4a82e0.  goto L4a82e4;
  #L4a82e2.  v3:= 0I;
  #L4a82e4.  if v0 == 0 then goto L4a82f6;
  #L4a82e8.  if v3 == 0 then goto L4a82f6;
  #L4a82ec.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4a82f2.  v5:= temp @kind object;
  #L4a82f4.  return v5 @kind object;
  #L4a82f6.  if v0 != 0 then goto L4a8312;
  #L4a82fa.  if v3 == 0 then goto L4a8300;
  #L4a82fe.  goto L4a8312;
  #L4a8300.  v0:= v4.`rx.internal.operators.OperatorSequenceEqual$1.val$equality` @type ^`rx.functions.Func2` @kind object;
  #L4a8304.  call temp:= `call`(v0, v5, v6) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a830a.  v5:= temp @kind object;
  #L4a830c.  v5:= (`java.lang.Boolean`) v5 @kind object;
  #L4a8310.  return v5 @kind object;
  #L4a8312.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4a8318.  v5:= temp @kind object;
  #L4a831a.  return v5 @kind object;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorSequenceEqual$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorSequenceEqual$1;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a832c.  call temp:= `call`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorSequenceEqual$1;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;` @kind virtual;
  #L4a8332.  v1:= temp @kind object;
  #L4a8334.  return v1 @kind object;
}
