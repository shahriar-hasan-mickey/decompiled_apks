record `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.CompletableSubscriber` `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.actual` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.done` @AccessFlag VOLATILE;
  `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber` `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.inner` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.once` @AccessFlag FINAL;
  `rx.internal.util.unsafe.SpscArrayQueue` `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.queue` @AccessFlag FINAL;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.sr` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` v0 @kind this, `rx.CompletableSubscriber` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.<init>:(Lrx/CompletableSubscriber;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L494730.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L494736.  v0.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.actual` @type ^`rx.CompletableSubscriber` := v1 @kind object;
  #L49473a.  v1:= new `rx.internal.util.unsafe.SpscArrayQueue`;
  #L49473e.  call `<init>`(v1, v2) @signature `Lrx/internal/util/unsafe/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L494744.  v0.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.queue` @type ^`rx.internal.util.unsafe.SpscArrayQueue` := v1 @kind object;
  #L494748.  v1:= new `rx.subscriptions.SerialSubscription`;
  #L49474c.  call `<init>`(v1) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L494752.  v0.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.sr` @type ^`rx.subscriptions.SerialSubscription` := v1 @kind object;
  #L494756.  v1:= new `rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber`;
  #L49475a.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber;.<init>:(Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;)V` @kind direct;
  #L494760.  v0.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.inner` @type ^`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber` := v1 @kind object;
  #L494764.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L494768.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49476e.  v0.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L494772.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L494776.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49477c.  v0.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L494780.  v1:= v0.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.sr` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L494784.  call `add`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49478a.  v1:= (`long`) v2 @kind i2l;
  #L49478c.  call `request`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.request:(J)V` @kind virtual;
  #L494792.  return @kind void;
}
procedure `void` `innerComplete`(`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` v2 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4947a4.  v0:= v2.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4947a8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4947ae.  v0:= temp;
  #L4947b0.  if v0 == 0 then goto L4947ba;
  #L4947b4.  call `next`(v2) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.next:()V` @kind virtual;
  #L4947ba.  v0:= v2.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.done` @type ^`boolean` @kind boolean;
  #L4947be.  if v0 != 0 then goto L4947cc;
  #L4947c2.  v0:= 1L;
  #L4947c6.  call `request`(v2, v0) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.request:(J)V` @kind virtual;
  #L4947cc.  return @kind void;
}
procedure `void` `innerError`(`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;

  #L4947e0.  call `unsubscribe`(v0) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.unsubscribe:()V` @kind virtual;
  #L4947e6.  call `onError`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4947ec.  return @kind void;
}
procedure `void` `next`(`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` v3 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L494800.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.done` @type ^`boolean` @kind boolean;
  #L494804.  v1:= v3.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.queue` @type ^`rx.internal.util.unsafe.SpscArrayQueue` @kind object;
  #L494808.  call temp:= `poll`(v1) @signature `Lrx/internal/util/unsafe/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L49480e.  v1:= temp @kind object;
  #L494810.  v1:= (`rx.Completable`) v1 @kind object;
  #L494814.  if v1 != 0 then goto L494852;
  #L494818.  if v0 == 0 then goto L49483c;
  #L49481c.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L494820.  v1:= 0I;
  #L494822.  v2:= 1I;
  #L494824.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49482a.  v0:= temp;
  #L49482c.  if v0 == 0 then goto L49483a;
  #L494830.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L494834.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L49483a.  return @kind void;
  #L49483c.  v0:= new `java.lang.IllegalStateException`;
  #L494840.  v1:= "Queue is empty?!" @kind object;
  #L494844.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49484a.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L494850.  return @kind void;
  #L494852.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.inner` @type ^`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber` @kind object;
  #L494856.  call `unsafeSubscribe`(v1, v0) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L49485c.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494870.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.done` @type ^`boolean` @kind boolean;
  #L494874.  if v0 == 0 then goto L49487a;
  #L494878.  return @kind void;
  #L49487a.  v0:= 1I;
  #L49487c.  v1.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L494880.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L494884.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49488a.  v0:= temp;
  #L49488c.  if v0 != 0 then goto L494896;
  #L494890.  call `next`(v1) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.next:()V` @kind virtual;
  #L494896.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4948a8.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4948ac.  v1:= 0I;
  #L4948ae.  v2:= 1I;
  #L4948b0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4948b6.  v0:= temp;
  #L4948b8.  if v0 == 0 then goto L4948c8;
  #L4948bc.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L4948c0.  call `onError`(v0, v4) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4948c6.  return @kind void;
  #L4948c8.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4948ce.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4948e0.  v1:= (`rx.Completable`) v1 @kind object;
  #L4948e4.  call `onNext`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.onNext:(Lrx/Completable;)V` @kind virtual;
  #L4948ea.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber` v1 @kind this, `rx.Completable` v2 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.onNext:(Lrx/Completable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4948fc.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.queue` @type ^`rx.internal.util.unsafe.SpscArrayQueue` @kind object;
  #L494900.  call temp:= `offer`(v0, v2) @signature `Lrx/internal/util/unsafe/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L494906.  v2:= temp;
  #L494908.  if v2 != 0 then goto L49491e;
  #L49490c.  v2:= new `rx.exceptions.MissingBackpressureException`;
  #L494910.  call `<init>`(v2) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L494916.  call `onError`(v1, v2) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49491c.  return @kind void;
  #L49491e.  v2:= v1.`rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L494922.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L494928.  v2:= temp;
  #L49492a.  if v2 != 0 then goto L494934;
  #L49492e.  call `next`(v1) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat$CompletableConcatSubscriber;.next:()V` @kind virtual;
  #L494934.  return @kind void;
}
