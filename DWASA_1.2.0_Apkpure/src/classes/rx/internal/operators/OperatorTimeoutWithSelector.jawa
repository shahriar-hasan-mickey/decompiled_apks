record `rx.internal.operators.OperatorTimeoutWithSelector` @kind class @AccessFlag PUBLIC extends `rx.internal.operators.OperatorTimeoutBase` @kind class {
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTimeoutWithSelector` v1 @kind this, `rx.functions.Func0` v2 @kind object, `rx.functions.Func1` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/Observable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ab468.  v0:= new `rx.internal.operators.OperatorTimeoutWithSelector$1`;
  #L4ab46c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$1;.<init>:(Lrx/functions/Func0;)V` @kind direct;
  #L4ab472.  v2:= new `rx.internal.operators.OperatorTimeoutWithSelector$2`;
  #L4ab476.  call `<init>`(v2, v3) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$2;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4ab47c.  call temp:= `immediate`() @signature `Lrx/schedulers/Schedulers;.immediate:()Lrx/Scheduler;` @kind static;
  #L4ab482.  v3:= temp @kind object;
  #L4ab484.  call `<init>`(v1, v0, v2, v4, v3) @signature `Lrx/internal/operators/OperatorTimeoutBase;.<init>:(Lrx/internal/operators/OperatorTimeoutBase$FirstTimeoutStub;Lrx/internal/operators/OperatorTimeoutBase$TimeoutStub;Lrx/Observable;Lrx/Scheduler;)V` @kind direct;
  #L4ab48a.  return @kind void;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorTimeoutWithSelector` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab44c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorTimeoutBase;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind super;
  #L4ab452.  v1:= temp @kind object;
  #L4ab454.  return v1 @kind object;
}
