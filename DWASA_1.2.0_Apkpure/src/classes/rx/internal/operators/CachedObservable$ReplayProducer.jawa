record `rx.internal.operators.CachedObservable$ReplayProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface, `rx.Subscription` @kind interface {
  `rx.Subscriber` `rx.internal.operators.CachedObservable$ReplayProducer.child` @AccessFlag FINAL;
  `java.lang.Object`[] `rx.internal.operators.CachedObservable$ReplayProducer.currentBuffer` @AccessFlag ;
  `int` `rx.internal.operators.CachedObservable$ReplayProducer.currentIndexInBuffer` @AccessFlag ;
  `boolean` `rx.internal.operators.CachedObservable$ReplayProducer.emitting` @AccessFlag ;
  `int` `rx.internal.operators.CachedObservable$ReplayProducer.index` @AccessFlag ;
  `boolean` `rx.internal.operators.CachedObservable$ReplayProducer.missed` @AccessFlag ;
  `rx.internal.operators.CachedObservable$CacheState` `rx.internal.operators.CachedObservable$ReplayProducer.state` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.CachedObservable$ReplayProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.CachedObservable$ReplayProducer` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.internal.operators.CachedObservable$CacheState` v2 @kind object) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.<init>:(Lrx/Subscriber;Lrx/internal/operators/CachedObservable$CacheState;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L493f84.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L493f8a.  v0.`rx.internal.operators.CachedObservable$ReplayProducer.child` @type ^`rx.Subscriber` := v1 @kind object;
  #L493f8e.  v0.`rx.internal.operators.CachedObservable$ReplayProducer.state` @type ^`rx.internal.operators.CachedObservable$CacheState` := v2 @kind object;
  #L493f92.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.CachedObservable$ReplayProducer` v5 @kind this) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L493f3c.  call temp:= `get`(v5) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.get:()J` @kind virtual;
  #L493f42.  v0:= temp @kind wide;
  #L493f44.  v2:= 0L;
  #L493f48.  v4:= lcmp(v0, v2);
  #L493f4c.  if v4 >= 0 then goto L493f54;
  #L493f50.  v0:= 1I;
  #L493f52.  goto L493f56;
  #L493f54.  v0:= 0I;
  #L493f56.  return v0;
}
procedure `long` `produced`(`rx.internal.operators.CachedObservable$ReplayProducer` v0 @kind this, `long` v1 ) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.produced:(J)J` @AccessFlag PUBLIC {
    temp;

  #L493f68.  v1:= -v1 @kind long;
  #L493f6a.  call temp:= `addAndGet`(v0, v1) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.addAndGet:(J)J` @kind virtual;
  #L493f70.  v1:= temp @kind wide;
  #L493f72.  return v1 @kind wide;
}
procedure `void` `replay`(`rx.internal.operators.CachedObservable$ReplayProducer` v15 @kind this) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.replay:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L493fa4.  @monitorenter v15
  #L493fa6.  v0:= v15.`rx.internal.operators.CachedObservable$ReplayProducer.emitting` @type ^`boolean` @kind boolean;
  #L493faa.  v1:= 1I;
  #L493fac.  if v0 == 0 then goto L493fb8;
  #L493fb0.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.missed` @type ^`boolean` := v1 @kind boolean;
  #L493fb4.  @monitorexit v15
  #L493fb6.  return @kind void;
  #L493fb8.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.emitting` @type ^`boolean` := v1 @kind boolean;
  #L493fbc.  @monitorexit v15
  #L493fbe.  v0:= 0I;
  #L493fc0.  v2:= v15.`rx.internal.operators.CachedObservable$ReplayProducer.child` @type ^`rx.Subscriber` @kind object;
  #L493fc4.  call temp:= `get`(v15) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.get:()J` @kind virtual;
  #L493fca.  v3:= temp @kind wide;
  #L493fcc.  v5:= 0L;
  #L493fd0.  v7:= lcmp(v3, v5);
  #L493fd4.  if v7 >= 0 then goto L493fda;
  #L493fd8.  return @kind void;
  #L493fda.  v7:= v15.`rx.internal.operators.CachedObservable$ReplayProducer.state` @type ^`rx.internal.operators.CachedObservable$CacheState` @kind object;
  #L493fde.  call temp:= `size`(v7) @signature `Lrx/internal/operators/CachedObservable$CacheState;.size:()I` @kind virtual;
  #L493fe4.  v7:= temp;
  #L493fe6.  if v7 == 0 then goto L49412e;
  #L493fea.  v8:= v15.`rx.internal.operators.CachedObservable$ReplayProducer.currentBuffer` @type ^`java.lang.Object`[] @kind object;
  #L493fee.  if v8 != 0 then goto L494002;
  #L493ff2.  v8:= v15.`rx.internal.operators.CachedObservable$ReplayProducer.state` @type ^`rx.internal.operators.CachedObservable$CacheState` @kind object;
  #L493ff6.  call temp:= `head`(v8) @signature `Lrx/internal/operators/CachedObservable$CacheState;.head:()[Ljava/lang/Object;` @kind virtual;
  #L493ffc.  v8:= temp @kind object;
  #L493ffe.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.currentBuffer` @type ^`java.lang.Object`[] := v8 @kind object;
  #L494002.  v9:= length @variable v8;
  #L494004.  v9:= v9 - v1 @kind int;
  #L494006.  v10:= v15.`rx.internal.operators.CachedObservable$ReplayProducer.index` @type ^`int`;
  #L49400a.  v11:= v15.`rx.internal.operators.CachedObservable$ReplayProducer.currentIndexInBuffer` @type ^`int`;
  #L49400e.  v12:= lcmp(v3, v5);
  #L494012.  if v12 != 0 then goto L494060;
  #L494016.  v3:= v8[v11] @kind object;
  #L49401a.  call temp:= `isCompleted`(v3) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L494020.  v4:= temp;
  #L494022.  if v4 == 0 then goto L49403e;
  #L494026.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49402c.  call `unsubscribe`(v15) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.unsubscribe:()V` @kind virtual;
  #L494032.  return @kind void;
  #L494034.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L494036.  v1:= v2 @kind object;
  #L494038.  v4:= 1I;
  #L49403a.  goto L494162;
  #L49403e.  call temp:= `isError`(v3) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L494044.  v4:= temp;
  #L494046.  if v4 == 0 then goto L49412e;
  #L49404a.  call temp:= `getError`(v3) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L494050.  v3:= temp @kind object;
  #L494052.  call `onError`(v2, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L494058.  call `unsubscribe`(v15) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.unsubscribe:()V` @kind virtual;
  #L49405e.  return @kind void;
  #L494060.  v12:= lcmp(v3, v5);
  #L494064.  if v12 <= 0 then goto L49412e;
  #L494068.  v12:= 0I;
  #L49406a.  if v10 >= v7 then goto L49410c;
  #L49406e.  v13:= lcmp(v3, v5);
  #L494072.  if v13 <= 0 then goto L49410c;
  #L494076.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49407c.  v13:= temp;
  #L49407e.  if v13 == 0 then goto L494084;
  #L494082.  return @kind void;
  #L494084.  if v11 != v9 then goto L494096;
  #L494088.  v8:= v8[v9] @kind object;
  #L49408c.  v8:= (`java.lang.Object`[]) v8 @kind object;
  #L494090.  v8:= (`java.lang.Object`[]) v8 @kind object;
  #L494094.  v11:= 0I;
  #L494096.  v13:= v8[v11] @kind object;
  #L49409a.  call temp:= `accept`(v2, v13) @signature `Lrx/internal/operators/NotificationLite;.accept:(Lrx/Observer;Ljava/lang/Object;)Z` @kind static;
  #L4940a0.  v14:= temp;
  #L4940a2.  if v14 == 0 then goto L4940b4;
  #L4940a6.  call `unsubscribe`(v15) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.unsubscribe:()V` @kind virtual;
  #L4940ac.  return @kind void;
  #L4940ae.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4940b0.  v4:= 1I;
  #L4940b2.  goto L4940cc;
  #L4940b4.  v11:= v11 + 1;
  #L4940b8.  v10:= v10 + 1;
  #L4940bc.  v13:= 1L;
  #L4940c0.  v3:= v3 - v13 @kind long;
  #L4940c2.  v12:= v12 + 1;
  #L4940c6.  goto L49406a;
  #L4940c8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4940ca.  v4:= 0I;
  #L4940cc.  call `throwIfFatal`(v3) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4940d2.  call `unsubscribe`(v15) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.unsubscribe:()V` @kind virtual;
  #L4940d8.  call temp:= `isError`(v13) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4940de.  v4:= temp;
  #L4940e0.  if v4 != 0 then goto L494106;
  #L4940e4.  call temp:= `isCompleted`(v13) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L4940ea.  v4:= temp;
  #L4940ec.  if v4 != 0 then goto L494106;
  #L4940f0.  call temp:= `getValue`(v13) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4940f6.  v4:= temp @kind object;
  #L4940f8.  call temp:= `addValueAsLastCause`(v3, v4) @signature `Lrx/exceptions/OnErrorThrowable;.addValueAsLastCause:(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4940fe.  v3:= temp @kind object;
  #L494100.  call `onError`(v2, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L494106.  return @kind void;
  #L494108.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49410a.  goto L494162;
  #L49410c.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L494112.  v3:= temp;
  #L494114.  if v3 == 0 then goto L49411a;
  #L494118.  return @kind void;
  #L49411a.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.index` @type ^`int` := v10;
  #L49411e.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.currentIndexInBuffer` @type ^`int` := v11;
  #L494122.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.currentBuffer` @type ^`java.lang.Object`[] := v8 @kind object;
  #L494126.  v3:= (`long`) v12 @kind i2l;
  #L494128.  call temp:= `produced`(v15, v3) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.produced:(J)J` @kind virtual;
  #L49412e.  @monitorenter v15
  #L494130.  v3:= v15.`rx.internal.operators.CachedObservable$ReplayProducer.missed` @type ^`boolean` @kind boolean;
  #L494134.  if v3 != 0 then goto L494140;
  #L494138.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.emitting` @type ^`boolean` := v0 @kind boolean;
  #L49413c.  @monitorexit v15
  #L49413e.  return @kind void;
  #L494140.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.missed` @type ^`boolean` := v0 @kind boolean;
  #L494144.  @monitorexit v15
  #L494146.  goto L493fc4;
  #L49414a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49414c.  v1:= 0I;
  #L49414e.  @monitorexit v15
  #L494150.  throw v2;
  #L494152.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L494154.  v4:= v1;
  #L494156.  v1:= v2 @kind object;
  #L494158.  goto L494162;
  #L49415a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49415c.  goto L49414e;
  #L49415e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L494160.  v4:= 0I;
  #L494162.  if v4 != 0 then goto L494176;
  #L494166.  @monitorenter v15
  #L494168.  v15.`rx.internal.operators.CachedObservable$ReplayProducer.emitting` @type ^`boolean` := v0 @kind boolean;
  #L49416c.  @monitorexit v15
  #L49416e.  goto L494176;
  #L494170.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L494172.  @monitorexit v15
  #L494174.  throw v0;
  #L494176.  throw v1;
  #L494178.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49417a.  @monitorexit v15
  #L49417c.  goto L494180;
  #L49417e.  throw v0;
  #L494180.  goto L49417e;
  catch `java.lang.Throwable` @[L493fa6..L493fbe] goto L494178;
  catch `java.lang.Throwable` @[L493fc0..L49402c] goto L49415e;
  catch `java.lang.Throwable` @[L49402c..L494032] goto L494034;
  catch `java.lang.Throwable` @[L49403e..L494058] goto L49415e;
  catch `java.lang.Throwable` @[L494058..L49405e] goto L494034;
  catch `java.lang.Throwable` @[L494076..L49409a] goto L49415e;
  catch `java.lang.Throwable` @[L49409a..L4940a2] goto L4940c8;
  catch `java.lang.Throwable` @[L4940a6..L4940ac] goto L4940ae;
  catch `java.lang.Throwable` @[L4940cc..L4940d2] goto L494108;
  catch `java.lang.Throwable` @[L4940d2..L494106] goto L494034;
  catch `java.lang.Throwable` @[L49410c..L494130] goto L49415e;
  catch `java.lang.Throwable` @[L494130..L49413c] goto L49414a;
  catch `java.lang.Throwable` @[L49413c..L49413e] goto L49415a;
  catch `java.lang.Throwable` @[L494140..L494146] goto L49414a;
  catch `java.lang.Throwable` @[L49414e..L494150] goto L49415a;
  catch `java.lang.Throwable` @[L494150..L494152] goto L494152;
  catch `java.lang.Throwable` @[L494168..L494174] goto L494170;
  catch `java.lang.Throwable` @[L49417a..L49417c] goto L494178;
}
procedure `void` `request`(`rx.internal.operators.CachedObservable$ReplayProducer` v7 @kind this, `long` v8 ) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L494244.  call temp:= `get`(v7) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.get:()J` @kind virtual;
  #L49424a.  v0:= temp @kind wide;
  #L49424c.  v2:= 0L;
  #L494250.  v4:= lcmp(v0, v2);
  #L494254.  if v4 >= 0 then goto L49425a;
  #L494258.  return @kind void;
  #L49425a.  v4:= v0 + v8 @kind long;
  #L49425e.  v6:= lcmp(v4, v2);
  #L494262.  if v6 >= 0 then goto L494270;
  #L494266.  v4:= 9223372036854775807L;
  #L494270.  call temp:= `compareAndSet`(v7, v0, v4) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.compareAndSet:(JJ)Z` @kind virtual;
  #L494276.  v0:= temp;
  #L494278.  if v0 == 0 then goto L494244;
  #L49427c.  call `replay`(v7) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.replay:()V` @kind virtual;
  #L494282.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.operators.CachedObservable$ReplayProducer` v5 @kind this) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L494294.  call temp:= `get`(v5) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.get:()J` @kind virtual;
  #L49429a.  v0:= temp @kind wide;
  #L49429c.  v2:= 0L;
  #L4942a0.  v4:= lcmp(v0, v2);
  #L4942a4.  if v4 < 0 then goto L4942c6;
  #L4942a8.  v0:= -1L;
  #L4942ac.  call temp:= `getAndSet`(v5, v0) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.getAndSet:(J)J` @kind virtual;
  #L4942b2.  v0:= temp @kind wide;
  #L4942b4.  v4:= lcmp(v0, v2);
  #L4942b8.  if v4 < 0 then goto L4942c6;
  #L4942bc.  v0:= v5.`rx.internal.operators.CachedObservable$ReplayProducer.state` @type ^`rx.internal.operators.CachedObservable$CacheState` @kind object;
  #L4942c0.  call `removeProducer`(v0, v5) @signature `Lrx/internal/operators/CachedObservable$CacheState;.removeProducer:(Lrx/internal/operators/CachedObservable$ReplayProducer;)V` @kind virtual;
  #L4942c6.  return @kind void;
}
