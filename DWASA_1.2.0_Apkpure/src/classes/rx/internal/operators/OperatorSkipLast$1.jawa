record `rx.internal.operators.OperatorSkipLast$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `java.util.Deque` `rx.internal.operators.OperatorSkipLast$1.deque` @AccessFlag PRIVATE_FINAL;
  `rx.internal.operators.OperatorSkipLast` `rx.internal.operators.OperatorSkipLast$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorSkipLast$1.val$subscriber` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSkipLast$1` v0 @kind this, `rx.internal.operators.OperatorSkipLast` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorSkipLast$1;.<init>:(Lrx/internal/operators/OperatorSkipLast;Lrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a8814.  v0.`rx.internal.operators.OperatorSkipLast$1.this$0` @type ^`rx.internal.operators.OperatorSkipLast` := v1 @kind object;
  #L4a8818.  v0.`rx.internal.operators.OperatorSkipLast$1.val$subscriber` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a881c.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a8822.  v1:= new `java.util.ArrayDeque`;
  #L4a8826.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4a882c.  v0.`rx.internal.operators.OperatorSkipLast$1.deque` @type ^`java.util.Deque` := v1 @kind object;
  #L4a8830.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSkipLast$1` v1 @kind this) @signature `Lrx/internal/operators/OperatorSkipLast$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8844.  v0:= v1.`rx.internal.operators.OperatorSkipLast$1.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4a8848.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a884e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSkipLast$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSkipLast$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8860.  v0:= v1.`rx.internal.operators.OperatorSkipLast$1.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4a8864.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a886a.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSkipLast$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorSkipLast$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a887c.  v0:= v2.`rx.internal.operators.OperatorSkipLast$1.this$0` @type ^`rx.internal.operators.OperatorSkipLast` @kind object;
  #L4a8880.  v0:= v0.`rx.internal.operators.OperatorSkipLast.count` @type ^`int`;
  #L4a8884.  if v0 != 0 then goto L4a8894;
  #L4a8888.  v0:= v2.`rx.internal.operators.OperatorSkipLast$1.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4a888c.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a8892.  return @kind void;
  #L4a8894.  v0:= v2.`rx.internal.operators.OperatorSkipLast$1.deque` @type ^`java.util.Deque` @kind object;
  #L4a8898.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L4a889e.  v0:= temp;
  #L4a88a0.  v1:= v2.`rx.internal.operators.OperatorSkipLast$1.this$0` @type ^`rx.internal.operators.OperatorSkipLast` @kind object;
  #L4a88a4.  v1:= v1.`rx.internal.operators.OperatorSkipLast.count` @type ^`int`;
  #L4a88a8.  if v0 != v1 then goto L4a88cc;
  #L4a88ac.  v0:= v2.`rx.internal.operators.OperatorSkipLast$1.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4a88b0.  v1:= v2.`rx.internal.operators.OperatorSkipLast$1.deque` @type ^`java.util.Deque` @kind object;
  #L4a88b4.  call temp:= `removeFirst`(v1) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L4a88ba.  v1:= temp @kind object;
  #L4a88bc.  call temp:= `getValue`(v1) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a88c2.  v1:= temp @kind object;
  #L4a88c4.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a88ca.  goto L4a88d6;
  #L4a88cc.  v0:= 1L;
  #L4a88d0.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorSkipLast$1;.request:(J)V` @kind virtual;
  #L4a88d6.  v0:= v2.`rx.internal.operators.OperatorSkipLast$1.deque` @type ^`java.util.Deque` @kind object;
  #L4a88da.  call temp:= `next`(v3) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a88e0.  v3:= temp @kind object;
  #L4a88e2.  call temp:= `offerLast`(v0, v3) @signature `Ljava/util/Deque;.offerLast:(Ljava/lang/Object;)Z` @kind interface;
  #L4a88e8.  return @kind void;
}
