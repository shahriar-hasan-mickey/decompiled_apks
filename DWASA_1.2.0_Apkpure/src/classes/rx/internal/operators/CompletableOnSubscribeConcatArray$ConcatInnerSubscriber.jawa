record `rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `rx.CompletableSubscriber` @kind interface {
  `rx.CompletableSubscriber` `rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.actual` @AccessFlag FINAL;
  `int` `rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.index` @AccessFlag ;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.sd` @AccessFlag FINAL;
  `rx.Completable`[] `rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.sources` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber` v0 @kind this, `rx.CompletableSubscriber` v1 @kind object, `rx.Completable`[] v2 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray$ConcatInnerSubscriber;.<init>:(Lrx/CompletableSubscriber;[Lrx/Completable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L494948.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49494e.  v0.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.actual` @type ^`rx.CompletableSubscriber` := v1 @kind object;
  #L494952.  v0.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.sources` @type ^`rx.Completable`[] := v2 @kind object;
  #L494956.  v1:= new `rx.subscriptions.SerialSubscription`;
  #L49495a.  call `<init>`(v1) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L494960.  v0.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.sd` @type ^`rx.subscriptions.SerialSubscription` := v1 @kind object;
  #L494964.  return @kind void;
}
procedure `void` `next`(`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber` v3 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray$ConcatInnerSubscriber;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L494978.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.sd` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L49497c.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/SerialSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L494982.  v0:= temp;
  #L494984.  if v0 == 0 then goto L49498a;
  #L494988.  return @kind void;
  #L49498a.  call temp:= `getAndIncrement`(v3) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray$ConcatInnerSubscriber;.getAndIncrement:()I` @kind virtual;
  #L494990.  v0:= temp;
  #L494992.  if v0 == 0 then goto L494998;
  #L494996.  return @kind void;
  #L494998.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.sources` @type ^`rx.Completable`[] @kind object;
  #L49499c.  v1:= v3.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.sd` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4949a0.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/subscriptions/SerialSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4949a6.  v1:= temp;
  #L4949a8.  if v1 == 0 then goto L4949ae;
  #L4949ac.  return @kind void;
  #L4949ae.  v1:= v3.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.index` @type ^`int`;
  #L4949b2.  v2:= v1 + 1;
  #L4949b6.  v3.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.index` @type ^`int` := v2;
  #L4949ba.  v2:= length @variable v0;
  #L4949bc.  if v1 != v2 then goto L4949cc;
  #L4949c0.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L4949c4.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L4949ca.  return @kind void;
  #L4949cc.  v1:= v0[v1] @kind object;
  #L4949d0.  call `unsafeSubscribe`(v1, v3) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L4949d6.  call temp:= `decrementAndGet`(v3) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray$ConcatInnerSubscriber;.decrementAndGet:()I` @kind virtual;
  #L4949dc.  v1:= temp;
  #L4949de.  if v1 != 0 then goto L49499c;
  #L4949e2.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber` v0 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray$ConcatInnerSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;

  #L4949f4.  call `next`(v0) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray$ConcatInnerSubscriber;.next:()V` @kind virtual;
  #L4949fa.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray$ConcatInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494a0c.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L494a10.  call `onError`(v0, v2) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L494a16.  return @kind void;
}
procedure `void` `onSubscribe`(`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray$ConcatInnerSubscriber;.onSubscribe:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494a28.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber.sd` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L494a2c.  call `set`(v0, v2) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L494a32.  return @kind void;
}
