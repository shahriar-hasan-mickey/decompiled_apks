record `rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class {
  `rx.SingleSubscriber` `rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber.actual` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber.resumeFunction` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/SingleOnErrorReturn$OnErrorReturnsSingleSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4afcf0.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4afcf6.  v0.`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4afcfa.  v0.`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber.resumeFunction` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4afcfe.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/SingleOnErrorReturn$OnErrorReturnsSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afd10.  v0:= v1.`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber.resumeFunction` @type ^`rx.functions.Func1` @kind object;
  #L4afd14.  call temp:= `call`(v0, v2) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4afd1a.  v2:= temp @kind object;
  #L4afd1c.  v0:= v1.`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4afd20.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4afd26.  return @kind void;
  #L4afd28.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4afd2a.  call `throwIfFatal`(v2) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4afd30.  v0:= v1.`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4afd34.  call `onError`(v0, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4afd3a.  return @kind void;
  catch `java.lang.Throwable` @[L4afd10..L4afd1c] goto L4afd28;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/SingleOnErrorReturn$OnErrorReturnsSingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afd58.  v0:= v1.`rx.internal.operators.SingleOnErrorReturn$OnErrorReturnsSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4afd5c.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4afd62.  return @kind void;
}
