record `rx.internal.operators.BlockingOperatorNext$NextObserver` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `java.util.concurrent.BlockingQueue` `rx.internal.operators.BlockingOperatorNext$NextObserver.buf` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.BlockingOperatorNext$NextObserver.waiting` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.BlockingOperatorNext$NextObserver` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L493158.  call `<init>`(v2) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49315e.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L493162.  v1:= 1I;
  #L493164.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L49316a.  v2.`rx.internal.operators.BlockingOperatorNext$NextObserver.buf` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L49316e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L493172.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L493178.  v2.`rx.internal.operators.BlockingOperatorNext$NextObserver.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L49317c.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.BlockingOperatorNext$NextObserver` v0 @kind this) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;

  #L493190.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.BlockingOperatorNext$NextObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4931a4.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.BlockingOperatorNext$NextObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4931b8.  v1:= (`rx.Notification`) v1 @kind object;
  #L4931bc.  call `onNext`(v0, v1) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.onNext:(Lrx/Notification;)V` @kind virtual;
  #L4931c2.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.BlockingOperatorNext$NextObserver` v2 @kind this, `rx.Notification` v3 @kind object) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.onNext:(Lrx/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4931d4.  v0:= v2.`rx.internal.operators.BlockingOperatorNext$NextObserver.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4931d8.  v1:= 0I;
  #L4931da.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4931e0.  v0:= temp;
  #L4931e2.  v1:= 1I;
  #L4931e4.  if v0 == v1 then goto L4931f4;
  #L4931e8.  call temp:= `isOnNext`(v3) @signature `Lrx/Notification;.isOnNext:()Z` @kind virtual;
  #L4931ee.  v0:= temp;
  #L4931f0.  if v0 != 0 then goto L493228;
  #L4931f4.  v0:= v2.`rx.internal.operators.BlockingOperatorNext$NextObserver.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4931f8.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4931fe.  v0:= temp;
  #L493200.  if v0 != 0 then goto L493228;
  #L493204.  v0:= v2.`rx.internal.operators.BlockingOperatorNext$NextObserver.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L493208.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49320e.  v0:= temp @kind object;
  #L493210.  v0:= (`rx.Notification`) v0 @kind object;
  #L493214.  if v0 == 0 then goto L4931f4;
  #L493218.  call temp:= `isOnNext`(v0) @signature `Lrx/Notification;.isOnNext:()Z` @kind virtual;
  #L49321e.  v1:= temp;
  #L493220.  if v1 != 0 then goto L4931f4;
  #L493224.  v3:= v0 @kind object;
  #L493226.  goto L4931f4;
  #L493228.  return @kind void;
}
procedure `void` `setWaiting`(`rx.internal.operators.BlockingOperatorNext$NextObserver` v1 @kind this, `int` v2 ) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.setWaiting:(I)V` @AccessFlag  {
    temp;
    v0;

  #L49323c.  v0:= v1.`rx.internal.operators.BlockingOperatorNext$NextObserver.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L493240.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L493246.  return @kind void;
}
procedure `rx.Notification` `takeNext`(`rx.internal.operators.BlockingOperatorNext$NextObserver` v1 @kind this) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.takeNext:()Lrx/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49312c.  v0:= 1I;
  #L49312e.  call `setWaiting`(v1, v0) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.setWaiting:(I)V` @kind virtual;
  #L493134.  v0:= v1.`rx.internal.operators.BlockingOperatorNext$NextObserver.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L493138.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L49313e.  v0:= temp @kind object;
  #L493140.  v0:= (`rx.Notification`) v0 @kind object;
  #L493144.  return v0 @kind object;
}
