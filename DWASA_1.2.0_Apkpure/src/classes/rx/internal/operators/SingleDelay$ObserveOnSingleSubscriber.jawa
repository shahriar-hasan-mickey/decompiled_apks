record `rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.SingleSubscriber` `rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.actual` @AccessFlag FINAL;
  `long` `rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.delay` @AccessFlag FINAL;
  `java.lang.Throwable` `rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.error` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.unit` @AccessFlag FINAL;
  `java.lang.Object` `rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.value` @AccessFlag ;
  `rx.Scheduler$Worker` `rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object, `rx.Scheduler$Worker` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lrx/internal/operators/SingleDelay$ObserveOnSingleSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/Scheduler$Worker;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4af350.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4af356.  v0.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4af35a.  v0.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` := v2 @kind object;
  #L4af35e.  v0.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.delay` @type ^`long` := v3 @kind wide;
  #L4af362.  v0.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4af366.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber` v2 @kind this) @signature `Lrx/internal/operators/SingleDelay$ObserveOnSingleSubscriber;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af378.  v0:= v2.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4af37c.  v1:= 0I;
  #L4af37e.  if v0 == 0 then goto L4af392;
  #L4af382.  v2.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4af386.  v1:= v2.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af38a.  call `onError`(v1, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af390.  goto L4af3a4;
  #L4af392.  v0:= v2.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4af396.  v2.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4af39a.  v1:= v2.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af39e.  call `onSuccess`(v1, v0) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4af3a4.  v0:= v2.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4af3a8.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4af3ae.  return @kind void;
  #L4af3b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af3b2.  v1:= v2.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4af3b6.  call `unsubscribe`(v1) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4af3bc.  throw v0;
  catch `java.lang.Throwable` @[L4af378..L4af3a4] goto L4af3b0;
}
procedure `void` `onError`(`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/SingleDelay$ObserveOnSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4af3dc.  v3.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.error` @type ^`java.lang.Throwable` := v4 @kind object;
  #L4af3e0.  v4:= v3.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4af3e4.  v0:= v3.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.delay` @type ^`long` @kind wide;
  #L4af3e8.  v2:= v3.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4af3ec.  call temp:= `schedule`(v4, v3, v0, v2) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4af3f2.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/SingleDelay$ObserveOnSingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4af404.  v3.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4af408.  v4:= v3.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4af40c.  v0:= v3.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.delay` @type ^`long` @kind wide;
  #L4af410.  v2:= v3.`rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4af414.  call temp:= `schedule`(v4, v3, v0, v2) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4af41a.  return @kind void;
}
