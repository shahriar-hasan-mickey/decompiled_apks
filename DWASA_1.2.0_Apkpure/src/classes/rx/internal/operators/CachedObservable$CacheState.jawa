record `rx.internal.operators.CachedObservable$CacheState` @kind class @AccessFlag FINAL extends `rx.internal.util.LinkedArrayList` @kind class, `rx.Observer` @kind interface {
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.CachedObservable$CacheState.connection` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.CachedObservable$CacheState.isConnected` @AccessFlag VOLATILE;
  `rx.internal.operators.CachedObservable$ReplayProducer`[] `rx.internal.operators.CachedObservable$CacheState.producers` @AccessFlag VOLATILE;
  `rx.Observable` `rx.internal.operators.CachedObservable$CacheState.source` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.CachedObservable$CacheState.sourceDone` @AccessFlag ;
}
global `rx.internal.operators.CachedObservable$ReplayProducer`[] `@@rx.internal.operators.CachedObservable$CacheState.EMPTY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/CachedObservable$CacheState;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L493c60.  v0:= 0I;
  #L493c62.  v0:= new `rx.internal.operators.CachedObservable$ReplayProducer`[v0];
  #L493c66.  `@@rx.internal.operators.CachedObservable$CacheState.EMPTY` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] := v0 @kind object;
  #L493c6a.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.CachedObservable$CacheState` v0 @kind this, `rx.Observable` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/CachedObservable$CacheState;.<init>:(Lrx/Observable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L493c7c.  call `<init>`(v0, v2) @signature `Lrx/internal/util/LinkedArrayList;.<init>:(I)V` @kind direct;
  #L493c82.  v0.`rx.internal.operators.CachedObservable$CacheState.source` @type ^`rx.Observable` := v1 @kind object;
  #L493c86.  v1:= `@@rx.internal.operators.CachedObservable$CacheState.EMPTY` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] @kind object;
  #L493c8a.  v0.`rx.internal.operators.CachedObservable$CacheState.producers` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] := v1 @kind object;
  #L493c8e.  v1:= new `rx.subscriptions.SerialSubscription`;
  #L493c92.  call `<init>`(v1) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L493c98.  v0.`rx.internal.operators.CachedObservable$CacheState.connection` @type ^`rx.subscriptions.SerialSubscription` := v1 @kind object;
  #L493c9c.  return @kind void;
}
procedure `void` `addProducer`(`rx.internal.operators.CachedObservable$CacheState` v5 @kind this, `rx.internal.operators.CachedObservable$ReplayProducer` v6 @kind object) @signature `Lrx/internal/operators/CachedObservable$CacheState;.addProducer:(Lrx/internal/operators/CachedObservable$ReplayProducer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L493cb0.  v0:= v5.`rx.internal.operators.CachedObservable$CacheState.connection` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L493cb4.  @monitorenter v0
  #L493cb6.  v1:= v5.`rx.internal.operators.CachedObservable$CacheState.producers` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] @kind object;
  #L493cba.  v2:= length @variable v1;
  #L493cbc.  v3:= v2 + 1;
  #L493cc0.  v3:= new `rx.internal.operators.CachedObservable$ReplayProducer`[v3];
  #L493cc4.  v4:= 0I;
  #L493cc6.  call `arraycopy`(v1, v4, v3, v4, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L493ccc.  v3[v2]:= v6 @kind object;
  #L493cd0.  v5.`rx.internal.operators.CachedObservable$CacheState.producers` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] := v3 @kind object;
  #L493cd4.  @monitorexit v0
  #L493cd6.  return @kind void;
  #L493cd8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L493cda.  @monitorexit v0
  #L493cdc.  throw v6;
  catch `java.lang.Throwable` @[L493cb6..L493cdc] goto L493cd8;
}
procedure `void` `connect`(`rx.internal.operators.CachedObservable$CacheState` v2 @kind this) @signature `Lrx/internal/operators/CachedObservable$CacheState;.connect:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493cfc.  v0:= new `rx.internal.operators.CachedObservable$CacheState$1`;
  #L493d00.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/CachedObservable$CacheState$1;.<init>:(Lrx/internal/operators/CachedObservable$CacheState;)V` @kind direct;
  #L493d06.  v1:= v2.`rx.internal.operators.CachedObservable$CacheState.connection` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L493d0a.  call `set`(v1, v0) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L493d10.  v1:= v2.`rx.internal.operators.CachedObservable$CacheState.source` @type ^`rx.Observable` @kind object;
  #L493d14.  call temp:= `unsafeSubscribe`(v1, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L493d1a.  v0:= 1I;
  #L493d1c.  v2.`rx.internal.operators.CachedObservable$CacheState.isConnected` @type ^`boolean` := v0 @kind boolean;
  #L493d20.  return @kind void;
}
procedure `void` `dispatch`(`rx.internal.operators.CachedObservable$CacheState` v4 @kind this) @signature `Lrx/internal/operators/CachedObservable$CacheState;.dispatch:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L493d34.  v0:= v4.`rx.internal.operators.CachedObservable$CacheState.producers` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] @kind object;
  #L493d38.  v1:= length @variable v0;
  #L493d3a.  v2:= 0I;
  #L493d3c.  if v2 >= v1 then goto L493d50;
  #L493d40.  v3:= v0[v2] @kind object;
  #L493d44.  call `replay`(v3) @signature `Lrx/internal/operators/CachedObservable$ReplayProducer;.replay:()V` @kind virtual;
  #L493d4a.  v2:= v2 + 1;
  #L493d4e.  goto L493d3c;
  #L493d50.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.CachedObservable$CacheState` v1 @kind this) @signature `Lrx/internal/operators/CachedObservable$CacheState;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493d64.  v0:= v1.`rx.internal.operators.CachedObservable$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L493d68.  if v0 != 0 then goto L493d90;
  #L493d6c.  v0:= 1I;
  #L493d6e.  v1.`rx.internal.operators.CachedObservable$CacheState.sourceDone` @type ^`boolean` := v0 @kind boolean;
  #L493d72.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L493d78.  v0:= temp @kind object;
  #L493d7a.  call `add`(v1, v0) @signature `Lrx/internal/operators/CachedObservable$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L493d80.  v0:= v1.`rx.internal.operators.CachedObservable$CacheState.connection` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L493d84.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L493d8a.  call `dispatch`(v1) @signature `Lrx/internal/operators/CachedObservable$CacheState;.dispatch:()V` @kind virtual;
  #L493d90.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.CachedObservable$CacheState` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/CachedObservable$CacheState;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493da4.  v0:= v1.`rx.internal.operators.CachedObservable$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L493da8.  if v0 != 0 then goto L493dd0;
  #L493dac.  v0:= 1I;
  #L493dae.  v1.`rx.internal.operators.CachedObservable$CacheState.sourceDone` @type ^`boolean` := v0 @kind boolean;
  #L493db2.  call temp:= `error`(v2) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L493db8.  v2:= temp @kind object;
  #L493dba.  call `add`(v1, v2) @signature `Lrx/internal/operators/CachedObservable$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L493dc0.  v2:= v1.`rx.internal.operators.CachedObservable$CacheState.connection` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L493dc4.  call `unsubscribe`(v2) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L493dca.  call `dispatch`(v1) @signature `Lrx/internal/operators/CachedObservable$CacheState;.dispatch:()V` @kind virtual;
  #L493dd0.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.CachedObservable$CacheState` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/CachedObservable$CacheState;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493de4.  v0:= v1.`rx.internal.operators.CachedObservable$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L493de8.  if v0 != 0 then goto L493e00;
  #L493dec.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L493df2.  v2:= temp @kind object;
  #L493df4.  call `add`(v1, v2) @signature `Lrx/internal/operators/CachedObservable$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L493dfa.  call `dispatch`(v1) @signature `Lrx/internal/operators/CachedObservable$CacheState;.dispatch:()V` @kind virtual;
  #L493e00.  return @kind void;
}
procedure `void` `removeProducer`(`rx.internal.operators.CachedObservable$CacheState` v7 @kind this, `rx.internal.operators.CachedObservable$ReplayProducer` v8 @kind object) @signature `Lrx/internal/operators/CachedObservable$CacheState;.removeProducer:(Lrx/internal/operators/CachedObservable$ReplayProducer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L493e14.  v0:= v7.`rx.internal.operators.CachedObservable$CacheState.connection` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L493e18.  @monitorenter v0
  #L493e1a.  v1:= v7.`rx.internal.operators.CachedObservable$CacheState.producers` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] @kind object;
  #L493e1e.  v2:= length @variable v1;
  #L493e20.  v3:= -1I;
  #L493e22.  v4:= 0I;
  #L493e24.  v5:= 0I;
  #L493e26.  if v5 >= v2 then goto L493e44;
  #L493e2a.  v6:= v1[v5] @kind object;
  #L493e2e.  call temp:= `equals`(v6, v8) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L493e34.  v6:= temp;
  #L493e36.  if v6 == 0 then goto L493e3e;
  #L493e3a.  v3:= v5;
  #L493e3c.  goto L493e44;
  #L493e3e.  v5:= v5 + 1;
  #L493e42.  goto L493e26;
  #L493e44.  if v3 >= 0 then goto L493e4c;
  #L493e48.  @monitorexit v0
  #L493e4a.  return @kind void;
  #L493e4c.  v8:= 1I;
  #L493e4e.  if v2 != v8 then goto L493e5e;
  #L493e52.  v8:= `@@rx.internal.operators.CachedObservable$CacheState.EMPTY` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] @kind object;
  #L493e56.  v7.`rx.internal.operators.CachedObservable$CacheState.producers` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] := v8 @kind object;
  #L493e5a.  @monitorexit v0
  #L493e5c.  return @kind void;
  #L493e5e.  v5:= v2 + -1;
  #L493e62.  v5:= new `rx.internal.operators.CachedObservable$ReplayProducer`[v5];
  #L493e66.  call `arraycopy`(v1, v4, v5, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L493e6c.  v4:= v3 + 1;
  #L493e70.  v2:= v2 - v3 @kind int;
  #L493e72.  v2:= v2 - v8 @kind int;
  #L493e74.  call `arraycopy`(v1, v4, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L493e7a.  v7.`rx.internal.operators.CachedObservable$CacheState.producers` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] := v5 @kind object;
  #L493e7e.  @monitorexit v0
  #L493e80.  return @kind void;
  #L493e82.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L493e84.  @monitorexit v0
  #L493e86.  goto L493e8a;
  #L493e88.  throw v8;
  #L493e8a.  goto L493e88;
  catch `java.lang.Throwable` @[L493e1a..L493e86] goto L493e82;
}
