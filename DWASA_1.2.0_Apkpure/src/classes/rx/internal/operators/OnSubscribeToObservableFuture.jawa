record `rx.internal.operators.OnSubscribeToObservableFuture` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeToObservableFuture` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49da4c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49da52.  v0:= new `java.lang.IllegalStateException`;
  #L49da56.  v1:= "No instances!" @kind object;
  #L49da5a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49da60.  throw v0;
}
procedure `rx.Observable$OnSubscribe` `toObservableFuture`(`java.util.concurrent.Future` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture;.toObservableFuture:(Ljava/util/concurrent/Future;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49da14.  v0:= new `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture`;
  #L49da18.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;.<init>:(Ljava/util/concurrent/Future;)V` @kind direct;
  #L49da1e.  return v0 @kind object;
}
procedure `rx.Observable$OnSubscribe` `toObservableFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture;.toObservableFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49da30.  v0:= new `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture`;
  #L49da34.  call `<init>`(v0, v1, v2, v4) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L49da3a.  return v0 @kind object;
}
