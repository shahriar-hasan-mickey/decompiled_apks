record `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2` @kind class @AccessFlag FINAL extends `rx.functions.Func1` @kind interface {
  `rx.Observable` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2.val$other` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$2;.<init>:(Lrx/Observable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a4f6c.  v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2.val$other` @type ^`rx.Observable` := v1 @kind object;
  #L4a4f70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a4f76.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$2;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a4f34.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4a4f38.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$2;.call:(Ljava/lang/Throwable;)Lrx/Observable;` @kind virtual;
  #L4a4f3e.  v1:= temp @kind object;
  #L4a4f40.  return v1 @kind object;
}
procedure `rx.Observable` `call`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$2;.call:(Ljava/lang/Throwable;)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;

  #L4a4f54.  v1:= v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2.val$other` @type ^`rx.Observable` @kind object;
  #L4a4f58.  return v1 @kind object;
}
