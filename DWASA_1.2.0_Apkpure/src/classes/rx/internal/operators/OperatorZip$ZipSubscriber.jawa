record `rx.internal.operators.OperatorZip$ZipSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorZip$ZipSubscriber.child` @AccessFlag FINAL;
  `rx.internal.operators.OperatorZip$ZipProducer` `rx.internal.operators.OperatorZip$ZipSubscriber.producer` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorZip$ZipSubscriber.started` @AccessFlag ;
  `rx.internal.operators.OperatorZip` `rx.internal.operators.OperatorZip$ZipSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.internal.operators.OperatorZip$Zip` `rx.internal.operators.OperatorZip$ZipSubscriber.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorZip$ZipSubscriber` v0 @kind this, `rx.internal.operators.OperatorZip` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.internal.operators.OperatorZip$Zip` v3 @kind object, `rx.internal.operators.OperatorZip$ZipProducer` v4 @kind object) @signature `Lrx/internal/operators/OperatorZip$ZipSubscriber;.<init>:(Lrx/internal/operators/OperatorZip;Lrx/Subscriber;Lrx/internal/operators/OperatorZip$Zip;Lrx/internal/operators/OperatorZip$ZipProducer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aed14.  v0.`rx.internal.operators.OperatorZip$ZipSubscriber.this$0` @type ^`rx.internal.operators.OperatorZip` := v1 @kind object;
  #L4aed18.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4aed1e.  v0.`rx.internal.operators.OperatorZip$ZipSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4aed22.  v0.`rx.internal.operators.OperatorZip$ZipSubscriber.zipper` @type ^`rx.internal.operators.OperatorZip$Zip` := v3 @kind object;
  #L4aed26.  v0.`rx.internal.operators.OperatorZip$ZipSubscriber.producer` @type ^`rx.internal.operators.OperatorZip$ZipProducer` := v4 @kind object;
  #L4aed2a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorZip$ZipSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorZip$ZipSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aed3c.  v0:= v1.`rx.internal.operators.OperatorZip$ZipSubscriber.started` @type ^`boolean` @kind boolean;
  #L4aed40.  if v0 != 0 then goto L4aed4e;
  #L4aed44.  v0:= v1.`rx.internal.operators.OperatorZip$ZipSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aed48.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aed4e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorZip$ZipSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorZip$ZipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aed60.  v0:= v1.`rx.internal.operators.OperatorZip$ZipSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aed64.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aed6a.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorZip$ZipSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorZip$ZipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aed7c.  v1:= (`rx.Observable`[]) v1 @kind object;
  #L4aed80.  call `onNext`(v0, v1) @signature `Lrx/internal/operators/OperatorZip$ZipSubscriber;.onNext:([Lrx/Observable;)V` @kind virtual;
  #L4aed86.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorZip$ZipSubscriber` v2 @kind this, `rx.Observable`[] v3 @kind object) @signature `Lrx/internal/operators/OperatorZip$ZipSubscriber;.onNext:([Lrx/Observable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aed98.  if v3 == 0 then goto L4aedba;
  #L4aed9c.  v0:= length @variable v3;
  #L4aed9e.  if v0 != 0 then goto L4aeda4;
  #L4aeda2.  goto L4aedba;
  #L4aeda4.  v0:= 1I;
  #L4aeda6.  v2.`rx.internal.operators.OperatorZip$ZipSubscriber.started` @type ^`boolean` := v0 @kind boolean;
  #L4aedaa.  v0:= v2.`rx.internal.operators.OperatorZip$ZipSubscriber.zipper` @type ^`rx.internal.operators.OperatorZip$Zip` @kind object;
  #L4aedae.  v1:= v2.`rx.internal.operators.OperatorZip$ZipSubscriber.producer` @type ^`rx.internal.operators.OperatorZip$ZipProducer` @kind object;
  #L4aedb2.  call `start`(v0, v3, v1) @signature `Lrx/internal/operators/OperatorZip$Zip;.start:([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V` @kind virtual;
  #L4aedb8.  goto L4aedc4;
  #L4aedba.  v3:= v2.`rx.internal.operators.OperatorZip$ZipSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4aedbe.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aedc4.  return @kind void;
}
