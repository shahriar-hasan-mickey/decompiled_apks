record `rx.internal.operators.BlockingOperatorToFuture` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`rx.internal.operators.BlockingOperatorToFuture` v2 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToFuture;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49351c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L493522.  v0:= new `java.lang.IllegalStateException`;
  #L493526.  v1:= "No instances!" @kind object;
  #L49352a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493530.  throw v0;
}
procedure `java.util.concurrent.Future` `toFuture`(`rx.Observable` v4 @kind object) @signature `Lrx/internal/operators/BlockingOperatorToFuture;.toFuture:(Lrx/Observable;)Ljava/util/concurrent/Future;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4934c4.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L4934c8.  v1:= 1I;
  #L4934ca.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4934d0.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4934d4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4934da.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4934de.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4934e4.  call temp:= `single`(v4) @signature `Lrx/Observable;.single:()Lrx/Observable;` @kind virtual;
  #L4934ea.  v4:= temp @kind object;
  #L4934ec.  v3:= new `rx.internal.operators.BlockingOperatorToFuture$1`;
  #L4934f0.  call `<init>`(v3, v0, v2, v1) @signature `Lrx/internal/operators/BlockingOperatorToFuture$1;.<init>:(Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4934f6.  call temp:= `subscribe`(v4, v3) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4934fc.  v4:= temp @kind object;
  #L4934fe.  v3:= new `rx.internal.operators.BlockingOperatorToFuture$2`;
  #L493502.  call `<init>`(v3, v0, v4, v2, v1) @signature `Lrx/internal/operators/BlockingOperatorToFuture$2;.<init>:(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L493508.  return v3 @kind object;
}
