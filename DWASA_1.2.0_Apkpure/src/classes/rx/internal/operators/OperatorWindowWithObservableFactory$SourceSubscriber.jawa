record `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.child` @AccessFlag FINAL;
  `rx.Observer` `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.consumer` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @AccessFlag FINAL;
  `rx.functions.Func0` `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.otherFactory` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.producer` @AccessFlag ;
  `java.util.List` `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @AccessFlag ;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.serial` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v1 @kind this, `rx.Subscriber` v2 @kind object, `rx.functions.Func0` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ac1f0.  call `<init>`(v1) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4ac1f6.  v0:= new `rx.observers.SerializedSubscriber`;
  #L4ac1fa.  call `<init>`(v0, v2) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4ac200.  v1.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.child` @type ^`rx.Subscriber` := v0 @kind object;
  #L4ac204.  v2:= new `java.lang.Object`;
  #L4ac208.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ac20e.  v1.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` := v2 @kind object;
  #L4ac212.  v2:= new `rx.subscriptions.SerialSubscription`;
  #L4ac216.  call `<init>`(v2) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L4ac21c.  v1.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` := v2 @kind object;
  #L4ac220.  v1.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.otherFactory` @type ^`rx.functions.Func0` := v3 @kind object;
  #L4ac224.  v2:= v1.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4ac228.  call `add`(v1, v2) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ac22e.  return @kind void;
}
procedure `void` `complete`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.complete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ac240.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.consumer` @type ^`rx.Observer` @kind object;
  #L4ac244.  v1:= 0I;
  #L4ac246.  v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.consumer` @type ^`rx.Observer` := v1 @kind object;
  #L4ac24a.  v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.producer` @type ^`rx.Observable` := v1 @kind object;
  #L4ac24e.  if v0 == 0 then goto L4ac258;
  #L4ac252.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4ac258.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ac25c.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4ac262.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4ac268.  return @kind void;
}
procedure `void` `createNewWindow`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.createNewWindow:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ac27c.  call temp:= `create`() @signature `Lrx/subjects/UnicastSubject;.create:()Lrx/subjects/UnicastSubject;` @kind static;
  #L4ac282.  v0:= temp @kind object;
  #L4ac284.  v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.consumer` @type ^`rx.Observer` := v0 @kind object;
  #L4ac288.  v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.producer` @type ^`rx.Observable` := v0 @kind object;
  #L4ac28c.  v0:= v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.otherFactory` @type ^`rx.functions.Func0` @kind object;
  #L4ac290.  call temp:= `call`(v0) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L4ac296.  v0:= temp @kind object;
  #L4ac298.  v0:= (`rx.Observable`) v0 @kind object;
  #L4ac29c.  v1:= new `rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber`;
  #L4ac2a0.  call `<init>`(v1, v3) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$BoundarySubscriber;.<init>:(Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;)V` @kind direct;
  #L4ac2a6.  v2:= v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4ac2aa.  call `set`(v2, v1) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4ac2b0.  call temp:= `unsafeSubscribe`(v0, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4ac2b6.  return @kind void;
  #L4ac2b8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac2ba.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ac2be.  call `onError`(v1, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ac2c4.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4ac2ca.  return @kind void;
  catch `java.lang.Throwable` @[L4ac28c..L4ac29c] goto L4ac2b8;
}
procedure `void` `drain`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.drain:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ac2e8.  if v3 != 0 then goto L4ac2ee;
  #L4ac2ec.  return @kind void;
  #L4ac2ee.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ac2f4.  v3:= temp @kind object;
  #L4ac2f6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ac2fc.  v0:= temp;
  #L4ac2fe.  if v0 == 0 then goto L4ac352;
  #L4ac302.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ac308.  v0:= temp @kind object;
  #L4ac30a.  v1:= `@@rx.internal.operators.OperatorWindowWithObservableFactory.NEXT_SUBJECT` @type ^`java.lang.Object` @kind object;
  #L4ac30e.  if v0 != v1 then goto L4ac31a;
  #L4ac312.  call `replaceSubject`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.replaceSubject:()V` @kind virtual;
  #L4ac318.  goto L4ac2f6;
  #L4ac31a.  call temp:= `isError`(v0) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4ac320.  v1:= temp;
  #L4ac322.  if v1 == 0 then goto L4ac336;
  #L4ac326.  call temp:= `getError`(v0) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4ac32c.  v3:= temp @kind object;
  #L4ac32e.  call `error`(v2, v3) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ac334.  goto L4ac352;
  #L4ac336.  call temp:= `isCompleted`(v0) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L4ac33c.  v1:= temp;
  #L4ac33e.  if v1 == 0 then goto L4ac34a;
  #L4ac342.  call `complete`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.complete:()V` @kind virtual;
  #L4ac348.  goto L4ac352;
  #L4ac34a.  call `emitValue`(v2, v0) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.emitValue:(Ljava/lang/Object;)V` @kind virtual;
  #L4ac350.  goto L4ac2f6;
  #L4ac352.  return @kind void;
}
procedure `void` `emitValue`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.emitValue:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L4ac364.  v0:= v1.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.consumer` @type ^`rx.Observer` @kind object;
  #L4ac368.  if v0 == 0 then goto L4ac372;
  #L4ac36c.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ac372.  return @kind void;
}
procedure `void` `error`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.error:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ac384.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.consumer` @type ^`rx.Observer` @kind object;
  #L4ac388.  v1:= 0I;
  #L4ac38a.  v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.consumer` @type ^`rx.Observer` := v1 @kind object;
  #L4ac38e.  v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.producer` @type ^`rx.Observable` := v1 @kind object;
  #L4ac392.  if v0 == 0 then goto L4ac39c;
  #L4ac396.  call `onError`(v0, v3) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac39c.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ac3a0.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ac3a6.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4ac3ac.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ac3c0.  v0:= v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac3c4.  @monitorenter v0
  #L4ac3c6.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4ac3ca.  if v1 == 0 then goto L4ac3fa;
  #L4ac3ce.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac3d2.  if v1 != 0 then goto L4ac3e4;
  #L4ac3d6.  v1:= new `java.util.ArrayList`;
  #L4ac3da.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ac3e0.  v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4ac3e4.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac3e8.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4ac3ee.  v2:= temp @kind object;
  #L4ac3f0.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ac3f6.  @monitorexit v0
  #L4ac3f8.  return @kind void;
  #L4ac3fa.  v1:= v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac3fe.  v2:= 0I;
  #L4ac400.  v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4ac404.  v2:= 1I;
  #L4ac406.  v3.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v2 @kind boolean;
  #L4ac40a.  @monitorexit v0
  #L4ac40c.  call `drain`(v3, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.drain:(Ljava/util/List;)V` @kind virtual;
  #L4ac412.  call `complete`(v3) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.complete:()V` @kind virtual;
  #L4ac418.  return @kind void;
  #L4ac41a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac41c.  call `error`(v3, v0) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ac422.  return @kind void;
  #L4ac424.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac426.  @monitorexit v0
  #L4ac428.  throw v1;
  catch `java.lang.Throwable` @[L4ac3c6..L4ac40c] goto L4ac424;
  catch `java.lang.Throwable` @[L4ac40c..L4ac412] goto L4ac41a;
  catch `java.lang.Throwable` @[L4ac426..L4ac428] goto L4ac424;
}
procedure `void` `onError`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ac45c.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac460.  @monitorenter v0
  #L4ac462.  v1:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4ac466.  if v1 == 0 then goto L4ac482;
  #L4ac46a.  call temp:= `error`(v3) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4ac470.  v3:= temp @kind object;
  #L4ac472.  call temp:= `singletonList`(v3) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4ac478.  v3:= temp @kind object;
  #L4ac47a.  v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v3 @kind object;
  #L4ac47e.  @monitorexit v0
  #L4ac480.  return @kind void;
  #L4ac482.  v1:= 0I;
  #L4ac484.  v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4ac488.  v1:= 1I;
  #L4ac48a.  v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4ac48e.  @monitorexit v0
  #L4ac490.  call `error`(v2, v3) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ac496.  return @kind void;
  #L4ac498.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac49a.  @monitorexit v0
  #L4ac49c.  throw v3;
  catch `java.lang.Throwable` @[L4ac462..L4ac490] goto L4ac498;
  catch `java.lang.Throwable` @[L4ac49a..L4ac49c] goto L4ac498;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ac4c4.  v0:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac4c8.  @monitorenter v0
  #L4ac4ca.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4ac4ce.  if v1 == 0 then goto L4ac4f6;
  #L4ac4d2.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac4d6.  if v1 != 0 then goto L4ac4e8;
  #L4ac4da.  v1:= new `java.util.ArrayList`;
  #L4ac4de.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ac4e4.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4ac4e8.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac4ec.  call temp:= `add`(v1, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ac4f2.  @monitorexit v0
  #L4ac4f4.  return @kind void;
  #L4ac4f6.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac4fa.  v2:= 0I;
  #L4ac4fc.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4ac500.  v3:= 1I;
  #L4ac502.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v3 @kind boolean;
  #L4ac506.  @monitorexit v0
  #L4ac508.  v0:= 1I;
  #L4ac50a.  v4:= 0I;
  #L4ac50c.  call `drain`(v6, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.drain:(Ljava/util/List;)V` @kind virtual;
  #L4ac512.  if v0 == 0 then goto L4ac51e;
  #L4ac516.  call `emitValue`(v6, v7) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.emitValue:(Ljava/lang/Object;)V` @kind virtual;
  #L4ac51c.  v0:= 0I;
  #L4ac51e.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac522.  @monitorenter v1
  #L4ac524.  v5:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac528.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4ac52c.  if v5 != 0 then goto L4ac538;
  #L4ac530.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac534.  @monitorexit v1
  #L4ac536.  return @kind void;
  #L4ac538.  @monitorexit v1
  #L4ac53a.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ac53e.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4ac544.  v1:= temp;
  #L4ac546.  if v1 == 0 then goto L4ac55e;
  #L4ac54a.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac54e.  @monitorenter v1
  #L4ac550.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac554.  @monitorexit v1
  #L4ac556.  return @kind void;
  #L4ac558.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac55a.  @monitorexit v1
  #L4ac55c.  throw v7;
  #L4ac55e.  v1:= v5 @kind object;
  #L4ac560.  goto L4ac50a;
  #L4ac562.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac564.  v3:= 0I;
  #L4ac566.  @monitorexit v1
  #L4ac568.  throw v7;
  #L4ac56a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac56c.  goto L4ac576;
  #L4ac56e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac570.  goto L4ac566;
  #L4ac572.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac574.  v3:= 0I;
  #L4ac576.  if v3 != 0 then goto L4ac58e;
  #L4ac57a.  v0:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac57e.  @monitorenter v0
  #L4ac580.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac584.  @monitorexit v0
  #L4ac586.  goto L4ac58e;
  #L4ac588.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac58a.  @monitorexit v0
  #L4ac58c.  throw v7;
  #L4ac58e.  throw v7;
  #L4ac590.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac592.  @monitorexit v0
  #L4ac594.  goto L4ac598;
  #L4ac596.  throw v7;
  #L4ac598.  goto L4ac596;
  catch `java.lang.Throwable` @[L4ac4ca..L4ac508] goto L4ac590;
  catch `java.lang.Throwable` @[L4ac50c..L4ac524] goto L4ac572;
  catch `java.lang.Throwable` @[L4ac524..L4ac534] goto L4ac562;
  catch `java.lang.Throwable` @[L4ac534..L4ac536] goto L4ac56e;
  catch `java.lang.Throwable` @[L4ac538..L4ac53a] goto L4ac562;
  catch `java.lang.Throwable` @[L4ac53a..L4ac546] goto L4ac572;
  catch `java.lang.Throwable` @[L4ac550..L4ac55c] goto L4ac558;
  catch `java.lang.Throwable` @[L4ac566..L4ac568] goto L4ac56e;
  catch `java.lang.Throwable` @[L4ac568..L4ac56a] goto L4ac56a;
  catch `java.lang.Throwable` @[L4ac580..L4ac58c] goto L4ac588;
  catch `java.lang.Throwable` @[L4ac592..L4ac594] goto L4ac590;
}
procedure `void` `onStart`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ac614.  v0:= 9223372036854775807L;
  #L4ac61e.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.request:(J)V` @kind virtual;
  #L4ac624.  return @kind void;
}
procedure `void` `replaceSubject`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.replaceSubject:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ac638.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.consumer` @type ^`rx.Observer` @kind object;
  #L4ac63c.  if v0 == 0 then goto L4ac646;
  #L4ac640.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4ac646.  call `createNewWindow`(v2) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.createNewWindow:()V` @kind virtual;
  #L4ac64c.  v0:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ac650.  v1:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.producer` @type ^`rx.Observable` @kind object;
  #L4ac654.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ac65a.  return @kind void;
}
procedure `void` `replaceWindow`(`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber` v6 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.replaceWindow:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ac66c.  v0:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac670.  @monitorenter v0
  #L4ac672.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4ac676.  if v1 == 0 then goto L4ac6a2;
  #L4ac67a.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac67e.  if v1 != 0 then goto L4ac690;
  #L4ac682.  v1:= new `java.util.ArrayList`;
  #L4ac686.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ac68c.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4ac690.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac694.  v2:= `@@rx.internal.operators.OperatorWindowWithObservableFactory.NEXT_SUBJECT` @type ^`java.lang.Object` @kind object;
  #L4ac698.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ac69e.  @monitorexit v0
  #L4ac6a0.  return @kind void;
  #L4ac6a2.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac6a6.  v2:= 0I;
  #L4ac6a8.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4ac6ac.  v3:= 1I;
  #L4ac6ae.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v3 @kind boolean;
  #L4ac6b2.  @monitorexit v0
  #L4ac6b4.  v0:= 1I;
  #L4ac6b6.  v4:= 0I;
  #L4ac6b8.  call `drain`(v6, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.drain:(Ljava/util/List;)V` @kind virtual;
  #L4ac6be.  if v0 == 0 then goto L4ac6ca;
  #L4ac6c2.  call `replaceSubject`(v6) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.replaceSubject:()V` @kind virtual;
  #L4ac6c8.  v0:= 0I;
  #L4ac6ca.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac6ce.  @monitorenter v1
  #L4ac6d0.  v5:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ac6d4.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4ac6d8.  if v5 != 0 then goto L4ac6e4;
  #L4ac6dc.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac6e0.  @monitorexit v1
  #L4ac6e2.  return @kind void;
  #L4ac6e4.  @monitorexit v1
  #L4ac6e6.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ac6ea.  call temp:= `isUnsubscribed`(v1) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4ac6f0.  v1:= temp;
  #L4ac6f2.  if v1 == 0 then goto L4ac70a;
  #L4ac6f6.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac6fa.  @monitorenter v1
  #L4ac6fc.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac700.  @monitorexit v1
  #L4ac702.  return @kind void;
  #L4ac704.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac706.  @monitorexit v1
  #L4ac708.  throw v0;
  #L4ac70a.  v1:= v5 @kind object;
  #L4ac70c.  goto L4ac6b6;
  #L4ac70e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac710.  v3:= 0I;
  #L4ac712.  @monitorexit v1
  #L4ac714.  throw v0;
  #L4ac716.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac718.  goto L4ac722;
  #L4ac71a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac71c.  goto L4ac712;
  #L4ac71e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac720.  v3:= 0I;
  #L4ac722.  if v3 != 0 then goto L4ac73a;
  #L4ac726.  v1:= v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ac72a.  @monitorenter v1
  #L4ac72c.  v6.`rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4ac730.  @monitorexit v1
  #L4ac732.  goto L4ac73a;
  #L4ac734.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac736.  @monitorexit v1
  #L4ac738.  throw v0;
  #L4ac73a.  throw v0;
  #L4ac73c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac73e.  @monitorexit v0
  #L4ac740.  goto L4ac744;
  #L4ac742.  throw v1;
  #L4ac744.  goto L4ac742;
  catch `java.lang.Throwable` @[L4ac672..L4ac6b4] goto L4ac73c;
  catch `java.lang.Throwable` @[L4ac6b8..L4ac6d0] goto L4ac71e;
  catch `java.lang.Throwable` @[L4ac6d0..L4ac6e0] goto L4ac70e;
  catch `java.lang.Throwable` @[L4ac6e0..L4ac6e2] goto L4ac71a;
  catch `java.lang.Throwable` @[L4ac6e4..L4ac6e6] goto L4ac70e;
  catch `java.lang.Throwable` @[L4ac6e6..L4ac6f2] goto L4ac71e;
  catch `java.lang.Throwable` @[L4ac6fc..L4ac708] goto L4ac704;
  catch `java.lang.Throwable` @[L4ac712..L4ac714] goto L4ac71a;
  catch `java.lang.Throwable` @[L4ac714..L4ac716] goto L4ac716;
  catch `java.lang.Throwable` @[L4ac72c..L4ac738] goto L4ac734;
  catch `java.lang.Throwable` @[L4ac73e..L4ac740] goto L4ac73c;
}
