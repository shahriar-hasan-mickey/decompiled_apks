record `rx.internal.operators.OperatorDoOnRequest` @kind class @AccessFlag PUBLIC extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Action1` `rx.internal.operators.OperatorDoOnRequest.request` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDoOnRequest` v0 @kind this, `rx.functions.Action1` v1 @kind object) @signature `Lrx/internal/operators/OperatorDoOnRequest;.<init>:(Lrx/functions/Action1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a0abc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a0ac2.  v0.`rx.internal.operators.OperatorDoOnRequest.request` @type ^`rx.functions.Action1` := v1 @kind object;
  #L4a0ac6.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorDoOnRequest` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorDoOnRequest;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a0a68.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a0a6c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorDoOnRequest;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a0a72.  v1:= temp @kind object;
  #L4a0a74.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorDoOnRequest` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorDoOnRequest;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0a88.  v0:= new `rx.internal.operators.OperatorDoOnRequest$ParentSubscriber`;
  #L4a0a8c.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OperatorDoOnRequest$ParentSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a0a92.  v1:= new `rx.internal.operators.OperatorDoOnRequest$1`;
  #L4a0a96.  call `<init>`(v1, v2, v0) @signature `Lrx/internal/operators/OperatorDoOnRequest$1;.<init>:(Lrx/internal/operators/OperatorDoOnRequest;Lrx/internal/operators/OperatorDoOnRequest$ParentSubscriber;)V` @kind direct;
  #L4a0a9c.  call `setProducer`(v3, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a0aa2.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a0aa8.  return v0 @kind object;
}
