record `rx.internal.operators.OperatorWindowWithObservableFactory` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Func0` `rx.internal.operators.OperatorWindowWithObservableFactory.otherFactory` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OperatorWindowWithObservableFactory.NEXT_SUBJECT` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ac80c.  v0:= new `java.lang.Object`;
  #L4ac810.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ac816.  `@@rx.internal.operators.OperatorWindowWithObservableFactory.NEXT_SUBJECT` @type ^`java.lang.Object` := v0 @kind object;
  #L4ac81a.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithObservableFactory` v0 @kind this, `rx.functions.Func0` v1 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory;.<init>:(Lrx/functions/Func0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ac82c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ac832.  v0.`rx.internal.operators.OperatorWindowWithObservableFactory.otherFactory` @type ^`rx.functions.Func0` := v1 @kind object;
  #L4ac836.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorWindowWithObservableFactory` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ac7c0.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4ac7c4.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4ac7ca.  v1:= temp @kind object;
  #L4ac7cc.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorWindowWithObservableFactory` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ac7e0.  v0:= new `rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber`;
  #L4ac7e4.  v1:= v2.`rx.internal.operators.OperatorWindowWithObservableFactory.otherFactory` @type ^`rx.functions.Func0` @kind object;
  #L4ac7e8.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func0;)V` @kind direct;
  #L4ac7ee.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ac7f4.  call `replaceWindow`(v0) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory$SourceSubscriber;.replaceWindow:()V` @kind virtual;
  #L4ac7fa.  return v0 @kind object;
}
