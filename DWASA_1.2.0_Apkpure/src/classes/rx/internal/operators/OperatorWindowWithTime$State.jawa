record `rx.internal.operators.OperatorWindowWithTime$State` @kind class @AccessFlag FINAL {
  `rx.Observer` `rx.internal.operators.OperatorWindowWithTime$State.consumer` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorWindowWithTime$State.count` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OperatorWindowWithTime$State.producer` @AccessFlag FINAL;
}
global `rx.internal.operators.OperatorWindowWithTime$State` `@@rx.internal.operators.OperatorWindowWithTime$State.EMPTY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4ae4e0.  v0:= new `rx.internal.operators.OperatorWindowWithTime$State`;
  #L4ae4e4.  v1:= 0I;
  #L4ae4e6.  v2:= 0I;
  #L4ae4e8.  call `<init>`(v0, v1, v1, v2) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.<init>:(Lrx/Observer;Lrx/Observable;I)V` @kind direct;
  #L4ae4ee.  `@@rx.internal.operators.OperatorWindowWithTime$State.EMPTY` @type ^`rx.internal.operators.OperatorWindowWithTime$State` := v0 @kind object;
  #L4ae4f2.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithTime$State` v0 @kind this, `rx.Observer` v1 @kind object, `rx.Observable` v2 @kind object, `int` v3 ) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.<init>:(Lrx/Observer;Lrx/Observable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ae504.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ae50a.  v0.`rx.internal.operators.OperatorWindowWithTime$State.consumer` @type ^`rx.Observer` := v1 @kind object;
  #L4ae50e.  v0.`rx.internal.operators.OperatorWindowWithTime$State.producer` @type ^`rx.Observable` := v2 @kind object;
  #L4ae512.  v0.`rx.internal.operators.OperatorWindowWithTime$State.count` @type ^`int` := v3;
  #L4ae516.  return @kind void;
}
procedure `rx.internal.operators.OperatorWindowWithTime$State` `empty`() @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.empty:()Lrx/internal/operators/OperatorWindowWithTime$State;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ae49c.  v0:= `@@rx.internal.operators.OperatorWindowWithTime$State.EMPTY` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4ae4a0.  return v0 @kind object;
}
procedure `rx.internal.operators.OperatorWindowWithTime$State` `clear`(`rx.internal.operators.OperatorWindowWithTime$State` v1 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.clear:()Lrx/internal/operators/OperatorWindowWithTime$State;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae460.  call temp:= `empty`() @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.empty:()Lrx/internal/operators/OperatorWindowWithTime$State;` @kind static;
  #L4ae466.  v0:= temp @kind object;
  #L4ae468.  return v0 @kind object;
}
procedure `rx.internal.operators.OperatorWindowWithTime$State` `create`(`rx.internal.operators.OperatorWindowWithTime$State` v2 @kind this, `rx.Observer` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.create:(Lrx/Observer;Lrx/Observable;)Lrx/internal/operators/OperatorWindowWithTime$State;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae47c.  v0:= new `rx.internal.operators.OperatorWindowWithTime$State`;
  #L4ae480.  v1:= 0I;
  #L4ae482.  call `<init>`(v0, v3, v4, v1) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.<init>:(Lrx/Observer;Lrx/Observable;I)V` @kind direct;
  #L4ae488.  return v0 @kind object;
}
procedure `rx.internal.operators.OperatorWindowWithTime$State` `next`(`rx.internal.operators.OperatorWindowWithTime$State` v4 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.next:()Lrx/internal/operators/OperatorWindowWithTime$State;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ae4b4.  v0:= new `rx.internal.operators.OperatorWindowWithTime$State`;
  #L4ae4b8.  v1:= v4.`rx.internal.operators.OperatorWindowWithTime$State.consumer` @type ^`rx.Observer` @kind object;
  #L4ae4bc.  v2:= v4.`rx.internal.operators.OperatorWindowWithTime$State.producer` @type ^`rx.Observable` @kind object;
  #L4ae4c0.  v3:= v4.`rx.internal.operators.OperatorWindowWithTime$State.count` @type ^`int`;
  #L4ae4c4.  v3:= v3 + 1;
  #L4ae4c8.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.<init>:(Lrx/Observer;Lrx/Observable;I)V` @kind direct;
  #L4ae4ce.  return v0 @kind object;
}
