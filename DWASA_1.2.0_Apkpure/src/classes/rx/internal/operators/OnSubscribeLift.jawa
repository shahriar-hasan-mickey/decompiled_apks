record `rx.internal.operators.OnSubscribeLift` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.Observable$Operator` `rx.internal.operators.OnSubscribeLift.operator` @AccessFlag FINAL;
  `rx.Observable$OnSubscribe` `rx.internal.operators.OnSubscribeLift.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeLift` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object, `rx.Observable$Operator` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeLift;.<init>:(Lrx/Observable$OnSubscribe;Lrx/Observable$Operator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49acb0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49acb6.  v0.`rx.internal.operators.OnSubscribeLift.parent` @type ^`rx.Observable$OnSubscribe` := v1 @kind object;
  #L49acba.  v0.`rx.internal.operators.OnSubscribeLift.operator` @type ^`rx.Observable$Operator` := v2 @kind object;
  #L49acbe.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeLift` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeLift;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49acd0.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49acd4.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeLift;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49acda.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeLift` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeLift;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49acec.  v0:= v2.`rx.internal.operators.OnSubscribeLift.operator` @type ^`rx.Observable$Operator` @kind object;
  #L49acf0.  call temp:= `onObservableLift`(v0) @signature `Lrx/plugins/RxJavaHooks;.onObservableLift:(Lrx/Observable$Operator;)Lrx/Observable$Operator;` @kind static;
  #L49acf6.  v0:= temp @kind object;
  #L49acf8.  call temp:= `call`(v0, v3) @signature `Lrx/Observable$Operator;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49acfe.  v0:= temp @kind object;
  #L49ad00.  v0:= (`rx.Subscriber`) v0 @kind object;
  #L49ad04.  call `onStart`(v0) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L49ad0a.  v1:= v2.`rx.internal.operators.OnSubscribeLift.parent` @type ^`rx.Observable$OnSubscribe` @kind object;
  #L49ad0e.  call `call`(v1, v0) @signature `Lrx/Observable$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L49ad14.  goto L49ad34;
  #L49ad16.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ad18.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49ad1e.  call `onError`(v0, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49ad24.  goto L49ad34;
  #L49ad26.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ad28.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49ad2e.  call `onError`(v3, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49ad34.  return @kind void;
  catch `java.lang.Throwable` @[L49acec..L49ad04] goto L49ad26;
  catch `java.lang.Throwable` @[L49ad04..L49ad14] goto L49ad16;
  catch `java.lang.Throwable` @[L49ad18..L49ad24] goto L49ad26;
}
