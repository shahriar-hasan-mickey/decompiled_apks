record `rx.internal.operators.OperatorSkipLast` @kind class @AccessFlag PUBLIC extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorSkipLast.count` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSkipLast` v1 @kind this, `int` v2 ) @signature `Lrx/internal/operators/OperatorSkipLast;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a8ac4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a8aca.  if v2 < 0 then goto L4a8ad4;
  #L4a8ace.  v1.`rx.internal.operators.OperatorSkipLast.count` @type ^`int` := v2;
  #L4a8ad2.  return @kind void;
  #L4a8ad4.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L4a8ad8.  v0:= "count could not be negative" @kind object;
  #L4a8adc.  call `<init>`(v2, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a8ae2.  throw v2;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorSkipLast` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorSkipLast;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8a88.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a8a8c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorSkipLast;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a8a92.  v1:= temp @kind object;
  #L4a8a94.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorSkipLast` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorSkipLast;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8aa8.  v0:= new `rx.internal.operators.OperatorSkipLast$1`;
  #L4a8aac.  call `<init>`(v0, v1, v2, v2) @signature `Lrx/internal/operators/OperatorSkipLast$1;.<init>:(Lrx/internal/operators/OperatorSkipLast;Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L4a8ab2.  return v0 @kind object;
}
