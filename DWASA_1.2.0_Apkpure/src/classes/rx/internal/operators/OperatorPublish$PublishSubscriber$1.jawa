record `rx.internal.operators.OperatorPublish$PublishSubscriber$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.operators.OperatorPublish$PublishSubscriber` `rx.internal.operators.OperatorPublish$PublishSubscriber$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorPublish$PublishSubscriber$1` v0 @kind this, `rx.internal.operators.OperatorPublish$PublishSubscriber` v1 @kind object) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber$1;.<init>:(Lrx/internal/operators/OperatorPublish$PublishSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a56b4.  v0.`rx.internal.operators.OperatorPublish$PublishSubscriber$1.this$0` @type ^`rx.internal.operators.OperatorPublish$PublishSubscriber` := v1 @kind object;
  #L4a56b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a56be.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorPublish$PublishSubscriber$1` v3 @kind this) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a56d0.  v0:= v3.`rx.internal.operators.OperatorPublish$PublishSubscriber$1.this$0` @type ^`rx.internal.operators.OperatorPublish$PublishSubscriber` @kind object;
  #L4a56d4.  v0:= v0.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a56d8.  v1:= `@@rx.internal.operators.OperatorPublish$PublishSubscriber.TERMINATED` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] @kind object;
  #L4a56dc.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a56e2.  v0:= v3.`rx.internal.operators.OperatorPublish$PublishSubscriber$1.this$0` @type ^`rx.internal.operators.OperatorPublish$PublishSubscriber` @kind object;
  #L4a56e6.  v0:= v0.`rx.internal.operators.OperatorPublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a56ea.  v1:= v3.`rx.internal.operators.OperatorPublish$PublishSubscriber$1.this$0` @type ^`rx.internal.operators.OperatorPublish$PublishSubscriber` @kind object;
  #L4a56ee.  v2:= 0I;
  #L4a56f0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a56f6.  return @kind void;
}
