record `rx.internal.operators.OnSubscribeMap` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.Observable` `rx.internal.operators.OnSubscribeMap.source` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OnSubscribeMap.transformer` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeMap` v0 @kind this, `rx.Observable` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeMap;.<init>:(Lrx/Observable;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49ae54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49ae5a.  v0.`rx.internal.operators.OnSubscribeMap.source` @type ^`rx.Observable` := v1 @kind object;
  #L49ae5e.  v0.`rx.internal.operators.OnSubscribeMap.transformer` @type ^`rx.functions.Func1` := v2 @kind object;
  #L49ae62.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeMap;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49ae74.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49ae78.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeMap;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49ae7e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeMap` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeMap;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49ae90.  v0:= new `rx.internal.operators.OnSubscribeMap$MapSubscriber`;
  #L49ae94.  v1:= v2.`rx.internal.operators.OnSubscribeMap.transformer` @type ^`rx.functions.Func1` @kind object;
  #L49ae98.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/OnSubscribeMap$MapSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func1;)V` @kind direct;
  #L49ae9e.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49aea4.  v3:= v2.`rx.internal.operators.OnSubscribeMap.source` @type ^`rx.Observable` @kind object;
  #L49aea8.  call temp:= `unsafeSubscribe`(v3, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49aeae.  return @kind void;
}
