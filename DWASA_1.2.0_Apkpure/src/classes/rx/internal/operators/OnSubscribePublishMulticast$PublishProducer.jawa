record `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface, `rx.Subscription` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.once` @AccessFlag FINAL;
  `rx.internal.operators.OnSubscribePublishMulticast` `rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.parent` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.internal.operators.OnSubscribePublishMulticast` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;.<init>:(Lrx/Subscriber;Lrx/internal/operators/OnSubscribePublishMulticast;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49b37c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49b382.  v0.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L49b386.  v0.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.parent` @type ^`rx.internal.operators.OnSubscribePublishMulticast` := v2 @kind object;
  #L49b38a.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L49b38e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49b394.  v0.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L49b398.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b35c.  v0:= v1.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49b360.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L49b366.  v0:= temp;
  #L49b368.  return v0;
}
procedure `void` `request`(`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49b3ac.  v0:= 0L;
  #L49b3b0.  v2:= lcmp(v4, v0);
  #L49b3b4.  if v2 < 0 then goto L49b3d2;
  #L49b3b8.  v2:= lcmp(v4, v0);
  #L49b3bc.  if v2 == 0 then goto L49b3d0;
  #L49b3c0.  call temp:= `getAndAddRequest`(v3, v4) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49b3c6.  v4:= v3.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.parent` @type ^`rx.internal.operators.OnSubscribePublishMulticast` @kind object;
  #L49b3ca.  call `drain`(v4) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.drain:()V` @kind virtual;
  #L49b3d0.  return @kind void;
  #L49b3d2.  v0:= new `java.lang.IllegalArgumentException`;
  #L49b3d6.  v1:= new `java.lang.StringBuilder`;
  #L49b3da.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49b3e0.  v2:= "n >= 0 required but it was " @kind object;
  #L49b3e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49b3ea.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L49b3f0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49b3f6.  v4:= temp @kind object;
  #L49b3f8.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49b3fe.  throw v0;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer` v3 @kind this) @signature `Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49b410.  v0:= v3.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49b414.  v1:= 0I;
  #L49b416.  v2:= 1I;
  #L49b418.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49b41e.  v0:= temp;
  #L49b420.  if v0 == 0 then goto L49b42e;
  #L49b424.  v0:= v3.`rx.internal.operators.OnSubscribePublishMulticast$PublishProducer.parent` @type ^`rx.internal.operators.OnSubscribePublishMulticast` @kind object;
  #L49b428.  call `remove`(v0, v3) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.remove:(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V` @kind virtual;
  #L49b42e.  return @kind void;
}
