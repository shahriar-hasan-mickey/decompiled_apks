record `rx.internal.operators.SingleOperatorOnErrorResumeNext$2` @kind class @AccessFlag  extends `rx.SingleSubscriber` @kind class {
  `rx.internal.operators.SingleOperatorOnErrorResumeNext` `rx.internal.operators.SingleOperatorOnErrorResumeNext$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.SingleSubscriber` `rx.internal.operators.SingleOperatorOnErrorResumeNext$2.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOperatorOnErrorResumeNext$2` v0 @kind this, `rx.internal.operators.SingleOperatorOnErrorResumeNext` v1 @kind object, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$2;.<init>:(Lrx/internal/operators/SingleOperatorOnErrorResumeNext;Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0328.  v0.`rx.internal.operators.SingleOperatorOnErrorResumeNext$2.this$0` @type ^`rx.internal.operators.SingleOperatorOnErrorResumeNext` := v1 @kind object;
  #L4b032c.  v0.`rx.internal.operators.SingleOperatorOnErrorResumeNext$2.val$child` @type ^`rx.SingleSubscriber` := v2 @kind object;
  #L4b0330.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4b0336.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleOperatorOnErrorResumeNext$2` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$2;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0348.  v0:= v1.`rx.internal.operators.SingleOperatorOnErrorResumeNext$2.this$0` @type ^`rx.internal.operators.SingleOperatorOnErrorResumeNext` @kind object;
  #L4b034c.  v0:= v0.`rx.internal.operators.SingleOperatorOnErrorResumeNext.resumeFunctionInCaseOfError` @type ^`rx.functions.Func1` @kind object;
  #L4b0350.  call temp:= `call`(v0, v2) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b0356.  v2:= temp @kind object;
  #L4b0358.  v2:= (`rx.Single`) v2 @kind object;
  #L4b035c.  v0:= v1.`rx.internal.operators.SingleOperatorOnErrorResumeNext$2.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0360.  call temp:= `subscribe`(v2, v0) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L4b0366.  goto L4b0374;
  #L4b0368.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b036a.  v0:= v1.`rx.internal.operators.SingleOperatorOnErrorResumeNext$2.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4b036e.  call `throwOrReport`(v2, v0) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/SingleSubscriber;)V` @kind static;
  #L4b0374.  return @kind void;
  catch `java.lang.Throwable` @[L4b0348..L4b0366] goto L4b0368;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleOperatorOnErrorResumeNext$2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$2;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0394.  v0:= v1.`rx.internal.operators.SingleOperatorOnErrorResumeNext$2.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0398.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4b039e.  return @kind void;
}
