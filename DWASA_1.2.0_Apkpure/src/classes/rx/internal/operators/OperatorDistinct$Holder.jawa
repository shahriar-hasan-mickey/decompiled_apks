record `rx.internal.operators.OperatorDistinct$Holder` @kind class @AccessFlag FINAL {
}
global `rx.internal.operators.OperatorDistinct` `@@rx.internal.operators.OperatorDistinct$Holder.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorDistinct$Holder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a052c.  v0:= new `rx.internal.operators.OperatorDistinct`;
  #L4a0530.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4a0536.  v1:= temp @kind object;
  #L4a0538.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorDistinct;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4a053e.  `@@rx.internal.operators.OperatorDistinct$Holder.INSTANCE` @type ^`rx.internal.operators.OperatorDistinct` := v0 @kind object;
  #L4a0542.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDistinct$Holder` v0 @kind this) @signature `Lrx/internal/operators/OperatorDistinct$Holder;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a0554.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a055a.  return @kind void;
}
