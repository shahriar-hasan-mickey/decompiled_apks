record `rx.internal.util.RxRingBuffer` @kind class @AccessFlag PUBLIC extends `rx.Subscription` @kind interface {
  `rx.internal.util.ObjectPool` `rx.internal.util.RxRingBuffer.pool` @AccessFlag PRIVATE_FINAL;
  `java.util.Queue` `rx.internal.util.RxRingBuffer.queue` @AccessFlag PRIVATE;
  `int` `rx.internal.util.RxRingBuffer.size` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `rx.internal.util.RxRingBuffer.terminalState` @AccessFlag PUBLIC_VOLATILE;
}
global `int` `@@rx.internal.util.RxRingBuffer.SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `rx.internal.util.ObjectPool` `@@rx.internal.util.RxRingBuffer.SPMC_POOL` @AccessFlag PUBLIC_STATIC_FINAL;
global `rx.internal.util.ObjectPool` `@@rx.internal.util.RxRingBuffer.SPSC_POOL` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/util/RxRingBuffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b6514.  call temp:= `isAndroid`() @signature `Lrx/internal/util/PlatformDependent;.isAndroid:()Z` @kind static;
  #L4b651a.  v0:= temp;
  #L4b651c.  if v0 == 0 then goto L4b6526;
  #L4b6520.  v0:= 16I;
  #L4b6524.  goto L4b652a;
  #L4b6526.  v0:= 128I;
  #L4b652a.  v1:= "rx.ring-buffer.size" @kind object;
  #L4b652e.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4b6534.  v1:= temp @kind object;
  #L4b6536.  if v1 == 0 then goto L4b658a;
  #L4b653a.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4b6540.  v0:= temp;
  #L4b6542.  goto L4b658a;
  #L4b6544.  v2:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L4b6546.  v3:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L4b654a.  v4:= new `java.lang.StringBuilder`;
  #L4b654e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b6554.  v5:= "Failed to set 'rx.buffer.size' with value " @kind object;
  #L4b6558.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b655e.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b6564.  v1:= " => " @kind object;
  #L4b6568.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b656e.  call temp:= `getMessage`(v2) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L4b6574.  v1:= temp @kind object;
  #L4b6576.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b657c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b6582.  v1:= temp @kind object;
  #L4b6584.  call `println`(v3, v1) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @kind virtual;
  #L4b658a.  `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int` := v0;
  #L4b658e.  v0:= new `rx.internal.util.RxRingBuffer$1`;
  #L4b6592.  call `<init>`(v0) @signature `Lrx/internal/util/RxRingBuffer$1;.<init>:()V` @kind direct;
  #L4b6598.  `@@rx.internal.util.RxRingBuffer.SPSC_POOL` @type ^`rx.internal.util.ObjectPool` := v0 @kind object;
  #L4b659c.  v0:= new `rx.internal.util.RxRingBuffer$2`;
  #L4b65a0.  call `<init>`(v0) @signature `Lrx/internal/util/RxRingBuffer$2;.<init>:()V` @kind direct;
  #L4b65a6.  `@@rx.internal.util.RxRingBuffer.SPMC_POOL` @type ^`rx.internal.util.ObjectPool` := v0 @kind object;
  #L4b65aa.  return @kind void;
  catch `java.lang.NumberFormatException` @[L4b653a..L4b6542] goto L4b6544;
}
procedure `void` `<init>`(`rx.internal.util.RxRingBuffer` v2 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b65cc.  v0:= new `rx.internal.util.SynchronizedQueue`;
  #L4b65d0.  v1:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4b65d4.  call `<init>`(v0, v1) @signature `Lrx/internal/util/SynchronizedQueue;.<init>:(I)V` @kind direct;
  #L4b65da.  v1:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4b65de.  call `<init>`(v2, v0, v1) @signature `Lrx/internal/util/RxRingBuffer;.<init>:(Ljava/util/Queue;I)V` @kind direct;
  #L4b65e4.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.util.RxRingBuffer` v0 @kind this, `java.util.Queue` v1 @kind object, `int` v2 ) @signature `Lrx/internal/util/RxRingBuffer;.<init>:(Ljava/util/Queue;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4b65f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b65fe.  v0.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L4b6602.  v1:= 0I;
  #L4b6604.  v0.`rx.internal.util.RxRingBuffer.pool` @type ^`rx.internal.util.ObjectPool` := v1 @kind object;
  #L4b6608.  v0.`rx.internal.util.RxRingBuffer.size` @type ^`int` := v2;
  #L4b660c.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.util.RxRingBuffer` v0 @kind this, `rx.internal.util.ObjectPool` v1 @kind object, `int` v2 ) @signature `Lrx/internal/util/RxRingBuffer;.<init>:(Lrx/internal/util/ObjectPool;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4b6620.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b6626.  v0.`rx.internal.util.RxRingBuffer.pool` @type ^`rx.internal.util.ObjectPool` := v1 @kind object;
  #L4b662a.  call temp:= `borrowObject`(v1) @signature `Lrx/internal/util/ObjectPool;.borrowObject:()Ljava/lang/Object;` @kind virtual;
  #L4b6630.  v1:= temp @kind object;
  #L4b6632.  v1:= (`java.util.Queue`) v1 @kind object;
  #L4b6636.  v0.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L4b663a.  v0.`rx.internal.util.RxRingBuffer.size` @type ^`int` := v2;
  #L4b663e.  return @kind void;
}
procedure `rx.internal.util.RxRingBuffer` `getSpmcInstance`() @signature `Lrx/internal/util/RxRingBuffer;.getSpmcInstance:()Lrx/internal/util/RxRingBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4b649c.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4b64a2.  v0:= temp;
  #L4b64a4.  if v0 == 0 then goto L4b64bc;
  #L4b64a8.  v0:= new `rx.internal.util.RxRingBuffer`;
  #L4b64ac.  v1:= `@@rx.internal.util.RxRingBuffer.SPMC_POOL` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b64b0.  v2:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4b64b4.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/util/RxRingBuffer;.<init>:(Lrx/internal/util/ObjectPool;I)V` @kind direct;
  #L4b64ba.  return v0 @kind object;
  #L4b64bc.  v0:= new `rx.internal.util.RxRingBuffer`;
  #L4b64c0.  call `<init>`(v0) @signature `Lrx/internal/util/RxRingBuffer;.<init>:()V` @kind direct;
  #L4b64c6.  return v0 @kind object;
}
procedure `rx.internal.util.RxRingBuffer` `getSpscInstance`() @signature `Lrx/internal/util/RxRingBuffer;.getSpscInstance:()Lrx/internal/util/RxRingBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4b64d8.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4b64de.  v0:= temp;
  #L4b64e0.  if v0 == 0 then goto L4b64f8;
  #L4b64e4.  v0:= new `rx.internal.util.RxRingBuffer`;
  #L4b64e8.  v1:= `@@rx.internal.util.RxRingBuffer.SPSC_POOL` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b64ec.  v2:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4b64f0.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/util/RxRingBuffer;.<init>:(Lrx/internal/util/ObjectPool;I)V` @kind direct;
  #L4b64f6.  return v0 @kind object;
  #L4b64f8.  v0:= new `rx.internal.util.RxRingBuffer`;
  #L4b64fc.  call `<init>`(v0) @signature `Lrx/internal/util/RxRingBuffer;.<init>:()V` @kind direct;
  #L4b6502.  return v0 @kind object;
}
procedure `boolean` `accept`(`rx.internal.util.RxRingBuffer` v0 @kind this, `java.lang.Object` v1 @kind object, `rx.Observer` v2 @kind object) @signature `Lrx/internal/util/RxRingBuffer;.accept:(Ljava/lang/Object;Lrx/Observer;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b62ac.  call temp:= `accept`(v2, v1) @signature `Lrx/internal/operators/NotificationLite;.accept:(Lrx/Observer;Ljava/lang/Object;)Z` @kind static;
  #L4b62b2.  v1:= temp;
  #L4b62b4.  return v1;
}
procedure `java.lang.Throwable` `asError`(`rx.internal.util.RxRingBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/RxRingBuffer;.asError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;

  #L4b6480.  call temp:= `getError`(v1) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4b6486.  v1:= temp @kind object;
  #L4b6488.  return v1 @kind object;
}
procedure `int` `available`(`rx.internal.util.RxRingBuffer` v2 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b6350.  v0:= v2.`rx.internal.util.RxRingBuffer.size` @type ^`int`;
  #L4b6354.  call temp:= `count`(v2) @signature `Lrx/internal/util/RxRingBuffer;.count:()I` @kind virtual;
  #L4b635a.  v1:= temp;
  #L4b635c.  v0:= v0 - v1 @kind int;
  #L4b635e.  return v0;
}
procedure `int` `capacity`(`rx.internal.util.RxRingBuffer` v1 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.capacity:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6370.  v0:= v1.`rx.internal.util.RxRingBuffer.size` @type ^`int`;
  #L4b6374.  return v0;
}
procedure `int` `count`(`rx.internal.util.RxRingBuffer` v1 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.count:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6388.  v0:= v1.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` @kind object;
  #L4b638c.  if v0 != 0 then goto L4b6394;
  #L4b6390.  v0:= 0I;
  #L4b6392.  return v0;
  #L4b6394.  call temp:= `size`(v0) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L4b639a.  v0:= temp;
  #L4b639c.  return v0;
}
procedure `java.lang.Object` `getValue`(`rx.internal.util.RxRingBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/RxRingBuffer;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L4b63b0.  call temp:= `getValue`(v1) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4b63b6.  v1:= temp @kind object;
  #L4b63b8.  return v1 @kind object;
}
procedure `boolean` `isCompleted`(`rx.internal.util.RxRingBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/RxRingBuffer;.isCompleted:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b62c8.  call temp:= `isCompleted`(v1) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L4b62ce.  v1:= temp;
  #L4b62d0.  return v1;
}
procedure `boolean` `isEmpty`(`rx.internal.util.RxRingBuffer` v1 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b62e4.  v0:= v1.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` @kind object;
  #L4b62e8.  if v0 == 0 then goto L4b62fe;
  #L4b62ec.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4b62f2.  v0:= temp;
  #L4b62f4.  if v0 == 0 then goto L4b62fa;
  #L4b62f8.  goto L4b62fe;
  #L4b62fa.  v0:= 0I;
  #L4b62fc.  goto L4b6300;
  #L4b62fe.  v0:= 1I;
  #L4b6300.  return v0;
}
procedure `boolean` `isError`(`rx.internal.util.RxRingBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/RxRingBuffer;.isError:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b6314.  call temp:= `isError`(v1) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4b631a.  v1:= temp;
  #L4b631c.  return v1;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.util.RxRingBuffer` v1 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6330.  v0:= v1.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` @kind object;
  #L4b6334.  if v0 != 0 then goto L4b633c;
  #L4b6338.  v0:= 1I;
  #L4b633a.  goto L4b633e;
  #L4b633c.  v0:= 0I;
  #L4b633e.  return v0;
}
procedure `void` `onCompleted`(`rx.internal.util.RxRingBuffer` v1 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6650.  v0:= v1.`rx.internal.util.RxRingBuffer.terminalState` @type ^`java.lang.Object` @kind object;
  #L4b6654.  if v0 != 0 then goto L4b6664;
  #L4b6658.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4b665e.  v0:= temp @kind object;
  #L4b6660.  v1.`rx.internal.util.RxRingBuffer.terminalState` @type ^`java.lang.Object` := v0 @kind object;
  #L4b6664.  return @kind void;
}
procedure `void` `onError`(`rx.internal.util.RxRingBuffer` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/util/RxRingBuffer;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6678.  v0:= v1.`rx.internal.util.RxRingBuffer.terminalState` @type ^`java.lang.Object` @kind object;
  #L4b667c.  if v0 != 0 then goto L4b668c;
  #L4b6680.  call temp:= `error`(v2) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4b6686.  v2:= temp @kind object;
  #L4b6688.  v1.`rx.internal.util.RxRingBuffer.terminalState` @type ^`java.lang.Object` := v2 @kind object;
  #L4b668c.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.util.RxRingBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/util/RxRingBuffer;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b66a0.  @monitorenter v3
  #L4b66a2.  v0:= v3.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` @kind object;
  #L4b66a6.  v1:= 1I;
  #L4b66a8.  v2:= 0I;
  #L4b66aa.  if v0 == 0 then goto L4b66c4;
  #L4b66ae.  call temp:= `next`(v4) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4b66b4.  v4:= temp @kind object;
  #L4b66b6.  call temp:= `offer`(v0, v4) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b66bc.  v4:= temp;
  #L4b66be.  v4:= v4 ^~ v1 @kind int;
  #L4b66c0.  v1:= 0I;
  #L4b66c2.  goto L4b66c6;
  #L4b66c4.  v4:= 0I;
  #L4b66c6.  @monitorexit v3
  #L4b66c8.  if v1 != 0 then goto L4b66de;
  #L4b66cc.  if v4 != 0 then goto L4b66d2;
  #L4b66d0.  return @kind void;
  #L4b66d2.  v4:= new `rx.exceptions.MissingBackpressureException`;
  #L4b66d6.  call `<init>`(v4) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L4b66dc.  throw v4;
  #L4b66de.  v4:= new `java.lang.IllegalStateException`;
  #L4b66e2.  v0:= "This instance has been unsubscribed and the queue is no longer usable." @kind object;
  #L4b66e6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b66ec.  throw v4;
  #L4b66ee.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b66f0.  @monitorexit v3
  #L4b66f2.  throw v4;
  catch `java.lang.Throwable` @[L4b66a2..L4b66c8] goto L4b66ee;
  catch `java.lang.Throwable` @[L4b66f0..L4b66f2] goto L4b66ee;
}
procedure `java.lang.Object` `peek`(`rx.internal.util.RxRingBuffer` v3 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b63cc.  @monitorenter v3
  #L4b63ce.  v0:= v3.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` @kind object;
  #L4b63d2.  if v0 != 0 then goto L4b63dc;
  #L4b63d6.  v0:= 0I;
  #L4b63d8.  @monitorexit v3
  #L4b63da.  return v0 @kind object;
  #L4b63dc.  call temp:= `peek`(v0) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L4b63e2.  v1:= temp @kind object;
  #L4b63e4.  v2:= v3.`rx.internal.util.RxRingBuffer.terminalState` @type ^`java.lang.Object` @kind object;
  #L4b63e8.  if v1 != 0 then goto L4b63fe;
  #L4b63ec.  if v2 == 0 then goto L4b63fe;
  #L4b63f0.  call temp:= `peek`(v0) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L4b63f6.  v0:= temp @kind object;
  #L4b63f8.  if v0 != 0 then goto L4b63fe;
  #L4b63fc.  v1:= v2 @kind object;
  #L4b63fe.  @monitorexit v3
  #L4b6400.  return v1 @kind object;
  #L4b6402.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b6404.  @monitorexit v3
  #L4b6406.  throw v0;
  catch `java.lang.Throwable` @[L4b63ce..L4b6406] goto L4b6402;
}
procedure `java.lang.Object` `poll`(`rx.internal.util.RxRingBuffer` v4 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b6424.  @monitorenter v4
  #L4b6426.  v0:= v4.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` @kind object;
  #L4b642a.  v1:= 0I;
  #L4b642c.  if v0 != 0 then goto L4b6434;
  #L4b6430.  @monitorexit v4
  #L4b6432.  return v1 @kind object;
  #L4b6434.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b643a.  v2:= temp @kind object;
  #L4b643c.  v3:= v4.`rx.internal.util.RxRingBuffer.terminalState` @type ^`java.lang.Object` @kind object;
  #L4b6440.  if v2 != 0 then goto L4b645a;
  #L4b6444.  if v3 == 0 then goto L4b645a;
  #L4b6448.  call temp:= `peek`(v0) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L4b644e.  v0:= temp @kind object;
  #L4b6450.  if v0 != 0 then goto L4b645a;
  #L4b6454.  v4.`rx.internal.util.RxRingBuffer.terminalState` @type ^`java.lang.Object` := v1 @kind object;
  #L4b6458.  v2:= v3 @kind object;
  #L4b645a.  @monitorexit v4
  #L4b645c.  return v2 @kind object;
  #L4b645e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b6460.  @monitorexit v4
  #L4b6462.  throw v0;
  catch `java.lang.Throwable` @[L4b6426..L4b6462] goto L4b645e;
}
procedure `void` `release`(`rx.internal.util.RxRingBuffer` v3 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b6718.  @monitorenter v3
  #L4b671a.  v0:= v3.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` @kind object;
  #L4b671e.  v1:= v3.`rx.internal.util.RxRingBuffer.pool` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b6722.  if v1 == 0 then goto L4b673c;
  #L4b6726.  if v0 == 0 then goto L4b673c;
  #L4b672a.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4b6730.  v2:= 0I;
  #L4b6732.  v3.`rx.internal.util.RxRingBuffer.queue` @type ^`java.util.Queue` := v2 @kind object;
  #L4b6736.  call `returnObject`(v1, v0) @signature `Lrx/internal/util/ObjectPool;.returnObject:(Ljava/lang/Object;)V` @kind virtual;
  #L4b673c.  @monitorexit v3
  #L4b673e.  return @kind void;
  #L4b6740.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b6742.  @monitorexit v3
  #L4b6744.  throw v0;
  catch `java.lang.Throwable` @[L4b671a..L4b673c] goto L4b6740;
}
procedure `void` `unsubscribe`(`rx.internal.util.RxRingBuffer` v0 @kind this) @signature `Lrx/internal/util/RxRingBuffer;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;

  #L4b6764.  call `release`(v0) @signature `Lrx/internal/util/RxRingBuffer;.release:()V` @kind virtual;
  #L4b676a.  return @kind void;
}
