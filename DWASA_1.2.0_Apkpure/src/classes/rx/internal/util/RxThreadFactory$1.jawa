record `rx.internal.util.RxThreadFactory$1` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
}
procedure `void` `<init>`(`rx.internal.util.RxThreadFactory$1` v0 @kind this) @signature `Lrx/internal/util/RxThreadFactory$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b679c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b67a2.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`rx.internal.util.RxThreadFactory$1` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lrx/internal/util/RxThreadFactory$1;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b677c.  v2:= new `java.lang.AssertionError`;
  #L4b6780.  v0:= "No threads allowed." @kind object;
  #L4b6784.  call `<init>`(v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4b678a.  throw v2;
}
