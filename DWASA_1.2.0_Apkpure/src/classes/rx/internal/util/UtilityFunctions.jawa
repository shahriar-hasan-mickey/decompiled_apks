record `rx.internal.util.UtilityFunctions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`rx.internal.util.UtilityFunctions` v2 @kind this) @signature `Lrx/internal/util/UtilityFunctions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b7be8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b7bee.  v0:= new `java.lang.IllegalStateException`;
  #L4b7bf2.  v1:= "No instances!" @kind object;
  #L4b7bf6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b7bfc.  throw v0;
}
procedure `rx.functions.Func1` `alwaysFalse`() @signature `Lrx/internal/util/UtilityFunctions;.alwaysFalse:()Lrx/functions/Func1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b7ba0.  v0:= `@@rx.internal.util.UtilityFunctions$AlwaysFalse.INSTANCE` @type ^`rx.internal.util.UtilityFunctions$AlwaysFalse` @kind object;
  #L4b7ba4.  return v0 @kind object;
}
procedure `rx.functions.Func1` `alwaysTrue`() @signature `Lrx/internal/util/UtilityFunctions;.alwaysTrue:()Lrx/functions/Func1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b7bb8.  v0:= `@@rx.internal.util.UtilityFunctions$AlwaysTrue.INSTANCE` @type ^`rx.internal.util.UtilityFunctions$AlwaysTrue` @kind object;
  #L4b7bbc.  return v0 @kind object;
}
procedure `rx.functions.Func1` `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b7bd0.  v0:= `@@rx.internal.util.UtilityFunctions$Identity.INSTANCE` @type ^`rx.internal.util.UtilityFunctions$Identity` @kind object;
  #L4b7bd4.  return v0 @kind object;
}
