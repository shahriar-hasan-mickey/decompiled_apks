record `rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.Producer` @kind interface, `rx.functions.Action0` @kind interface {
  `rx.Subscriber` `rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.actual` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.onSchedule` @AccessFlag FINAL;
  `java.lang.Object` `rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.value` @AccessFlag FINAL;
}
global `long` `@@rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer` v0 @kind this, `rx.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable$ScalarAsyncProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b6b28.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b6b2e.  v0.`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L4b6b32.  v0.`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.value` @type ^`java.lang.Object` := v2 @kind object;
  #L4b6b36.  v0.`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.onSchedule` @type ^`rx.functions.Func1` := v3 @kind object;
  #L4b6b3a.  return @kind void;
}
procedure `void` `call`(`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer` v3 @kind this) @signature `Lrx/internal/util/ScalarSynchronousObservable$ScalarAsyncProducer;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b6b4c.  v0:= v3.`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L4b6b50.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4b6b56.  v1:= temp;
  #L4b6b58.  if v1 == 0 then goto L4b6b5e;
  #L4b6b5c.  return @kind void;
  #L4b6b5e.  v1:= v3.`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.value` @type ^`java.lang.Object` @kind object;
  #L4b6b62.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4b6b68.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4b6b6e.  v1:= temp;
  #L4b6b70.  if v1 == 0 then goto L4b6b76;
  #L4b6b74.  return @kind void;
  #L4b6b76.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4b6b7c.  return @kind void;
  #L4b6b7e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b6b80.  call `throwOrReport`(v2, v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4b6b86.  return @kind void;
  catch `java.lang.Throwable` @[L4b6b62..L4b6b68] goto L4b6b7e;
}
procedure `void` `request`(`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer` v3 @kind this, `long` v4 ) @signature `Lrx/internal/util/ScalarSynchronousObservable$ScalarAsyncProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b6ba4.  v0:= 0L;
  #L4b6ba8.  v2:= lcmp(v4, v0);
  #L4b6bac.  if v2 < 0 then goto L4b6be4;
  #L4b6bb0.  v2:= lcmp(v4, v0);
  #L4b6bb4.  if v2 == 0 then goto L4b6be2;
  #L4b6bb8.  v4:= 0I;
  #L4b6bba.  v5:= 1I;
  #L4b6bbc.  call temp:= `compareAndSet`(v3, v4, v5) @signature `Lrx/internal/util/ScalarSynchronousObservable$ScalarAsyncProducer;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b6bc2.  v4:= temp;
  #L4b6bc4.  if v4 == 0 then goto L4b6be2;
  #L4b6bc8.  v4:= v3.`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L4b6bcc.  v5:= v3.`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.onSchedule` @type ^`rx.functions.Func1` @kind object;
  #L4b6bd0.  call temp:= `call`(v5, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b6bd6.  v5:= temp @kind object;
  #L4b6bd8.  v5:= (`rx.Subscription`) v5 @kind object;
  #L4b6bdc.  call `add`(v4, v5) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b6be2.  return @kind void;
  #L4b6be4.  v0:= new `java.lang.IllegalArgumentException`;
  #L4b6be8.  v1:= new `java.lang.StringBuilder`;
  #L4b6bec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b6bf2.  v2:= "n >= 0 required but it was " @kind object;
  #L4b6bf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b6bfc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b6c02.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b6c08.  v4:= temp @kind object;
  #L4b6c0a.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b6c10.  throw v0;
}
procedure `java.lang.String` `toString`(`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer` v2 @kind this) @signature `Lrx/internal/util/ScalarSynchronousObservable$ScalarAsyncProducer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b6acc.  v0:= new `java.lang.StringBuilder`;
  #L4b6ad0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b6ad6.  v1:= "ScalarAsyncProducer[" @kind object;
  #L4b6ada.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b6ae0.  v1:= v2.`rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer.value` @type ^`java.lang.Object` @kind object;
  #L4b6ae4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b6aea.  v1:= ", " @kind object;
  #L4b6aee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b6af4.  call temp:= `get`(v2) @signature `Lrx/internal/util/ScalarSynchronousObservable$ScalarAsyncProducer;.get:()Z` @kind virtual;
  #L4b6afa.  v1:= temp;
  #L4b6afc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b6b02.  v1:= "]" @kind object;
  #L4b6b06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b6b0c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b6b12.  v0:= temp @kind object;
  #L4b6b14.  return v0 @kind object;
}
