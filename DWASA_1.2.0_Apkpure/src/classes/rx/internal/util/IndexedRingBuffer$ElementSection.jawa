record `rx.internal.util.IndexedRingBuffer$ElementSection` @kind class @AccessFlag FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `rx.internal.util.IndexedRingBuffer$ElementSection.array` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.util.IndexedRingBuffer$ElementSection.next` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.util.IndexedRingBuffer$ElementSection` v2 @kind this) @signature `Lrx/internal/util/IndexedRingBuffer$ElementSection;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b49e0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b49e6.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L4b49ea.  v1:= `@@rx.internal.util.IndexedRingBuffer.SIZE` @type ^`int`;
  #L4b49ee.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4b49f4.  v2.`rx.internal.util.IndexedRingBuffer$ElementSection.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L4b49f8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b49fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b4a02.  v2.`rx.internal.util.IndexedRingBuffer$ElementSection.next` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4b4a06.  return @kind void;
}
procedure `rx.internal.util.IndexedRingBuffer$ElementSection` `getNext`(`rx.internal.util.IndexedRingBuffer$ElementSection` v3 @kind this) @signature `Lrx/internal/util/IndexedRingBuffer$ElementSection;.getNext:()Lrx/internal/util/IndexedRingBuffer$ElementSection;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4b497c.  v0:= v3.`rx.internal.util.IndexedRingBuffer$ElementSection.next` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4980.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4986.  v0:= temp @kind object;
  #L4b4988.  if v0 == 0 then goto L4b499e;
  #L4b498c.  v0:= v3.`rx.internal.util.IndexedRingBuffer$ElementSection.next` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4990.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4996.  v0:= temp @kind object;
  #L4b4998.  v0:= (`rx.internal.util.IndexedRingBuffer$ElementSection`) v0 @kind object;
  #L4b499c.  return v0 @kind object;
  #L4b499e.  v0:= new `rx.internal.util.IndexedRingBuffer$ElementSection`;
  #L4b49a2.  call `<init>`(v0) @signature `Lrx/internal/util/IndexedRingBuffer$ElementSection;.<init>:()V` @kind direct;
  #L4b49a8.  v1:= v3.`rx.internal.util.IndexedRingBuffer$ElementSection.next` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b49ac.  v2:= 0I;
  #L4b49ae.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b49b4.  v1:= temp;
  #L4b49b6.  if v1 == 0 then goto L4b49bc;
  #L4b49ba.  return v0 @kind object;
  #L4b49bc.  v0:= v3.`rx.internal.util.IndexedRingBuffer$ElementSection.next` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b49c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b49c6.  v0:= temp @kind object;
  #L4b49c8.  v0:= (`rx.internal.util.IndexedRingBuffer$ElementSection`) v0 @kind object;
  #L4b49cc.  return v0 @kind object;
}
