record `rx.internal.util.IndexedRingBuffer$IndexSection` @kind class @AccessFlag  {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.util.IndexedRingBuffer$IndexSection._next` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicIntegerArray` `rx.internal.util.IndexedRingBuffer$IndexSection.unsafeArray` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.util.IndexedRingBuffer$IndexSection` v2 @kind this) @signature `Lrx/internal/util/IndexedRingBuffer$IndexSection;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b4a9c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b4aa2.  v0:= new `java.util.concurrent.atomic.AtomicIntegerArray`;
  #L4b4aa6.  v1:= `@@rx.internal.util.IndexedRingBuffer.SIZE` @type ^`int`;
  #L4b4aaa.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.<init>:(I)V` @kind direct;
  #L4b4ab0.  v2.`rx.internal.util.IndexedRingBuffer$IndexSection.unsafeArray` @type ^`java.util.concurrent.atomic.AtomicIntegerArray` := v0 @kind object;
  #L4b4ab4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b4ab8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b4abe.  v2.`rx.internal.util.IndexedRingBuffer$IndexSection._next` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4b4ac2.  return @kind void;
}
procedure `int` `getAndSet`(`rx.internal.util.IndexedRingBuffer$IndexSection` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lrx/internal/util/IndexedRingBuffer$IndexSection;.getAndSet:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4a18.  v0:= v1.`rx.internal.util.IndexedRingBuffer$IndexSection.unsafeArray` @type ^`java.util.concurrent.atomic.AtomicIntegerArray` @kind object;
  #L4b4a1c.  call temp:= `getAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.getAndSet:(II)I` @kind virtual;
  #L4b4a22.  v2:= temp;
  #L4b4a24.  return v2;
}
procedure `rx.internal.util.IndexedRingBuffer$IndexSection` `getNext`(`rx.internal.util.IndexedRingBuffer$IndexSection` v3 @kind this) @signature `Lrx/internal/util/IndexedRingBuffer$IndexSection;.getNext:()Lrx/internal/util/IndexedRingBuffer$IndexSection;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4b4a38.  v0:= v3.`rx.internal.util.IndexedRingBuffer$IndexSection._next` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4a3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4a42.  v0:= temp @kind object;
  #L4b4a44.  if v0 == 0 then goto L4b4a5a;
  #L4b4a48.  v0:= v3.`rx.internal.util.IndexedRingBuffer$IndexSection._next` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4a4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4a52.  v0:= temp @kind object;
  #L4b4a54.  v0:= (`rx.internal.util.IndexedRingBuffer$IndexSection`) v0 @kind object;
  #L4b4a58.  return v0 @kind object;
  #L4b4a5a.  v0:= new `rx.internal.util.IndexedRingBuffer$IndexSection`;
  #L4b4a5e.  call `<init>`(v0) @signature `Lrx/internal/util/IndexedRingBuffer$IndexSection;.<init>:()V` @kind direct;
  #L4b4a64.  v1:= v3.`rx.internal.util.IndexedRingBuffer$IndexSection._next` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4a68.  v2:= 0I;
  #L4b4a6a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4a70.  v1:= temp;
  #L4b4a72.  if v1 == 0 then goto L4b4a78;
  #L4b4a76.  return v0 @kind object;
  #L4b4a78.  v0:= v3.`rx.internal.util.IndexedRingBuffer$IndexSection._next` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4a7c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4a82.  v0:= temp @kind object;
  #L4b4a84.  v0:= (`rx.internal.util.IndexedRingBuffer$IndexSection`) v0 @kind object;
  #L4b4a88.  return v0 @kind object;
}
procedure `void` `set`(`rx.internal.util.IndexedRingBuffer$IndexSection` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lrx/internal/util/IndexedRingBuffer$IndexSection;.set:(II)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4ad4.  v0:= v1.`rx.internal.util.IndexedRingBuffer$IndexSection.unsafeArray` @type ^`java.util.concurrent.atomic.AtomicIntegerArray` @kind object;
  #L4b4ad8.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.set:(II)V` @kind virtual;
  #L4b4ade.  return @kind void;
}
