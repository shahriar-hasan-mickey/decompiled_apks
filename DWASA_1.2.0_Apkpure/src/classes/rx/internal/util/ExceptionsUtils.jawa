record `rx.internal.util.ExceptionsUtils` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `rx.internal.util.ExceptionsUtils`[] `@@rx.internal.util.ExceptionsUtils.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.lang.Throwable` `@@rx.internal.util.ExceptionsUtils.TERMINATED` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/util/ExceptionsUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b48e4.  v0:= 0I;
  #L4b48e6.  v0:= new `rx.internal.util.ExceptionsUtils`[v0];
  #L4b48ea.  `@@rx.internal.util.ExceptionsUtils.$VALUES` @type ^`rx.internal.util.ExceptionsUtils`[] := v0 @kind object;
  #L4b48ee.  v0:= new `java.lang.Throwable`;
  #L4b48f2.  v1:= "Terminated" @kind object;
  #L4b48f6.  call `<init>`(v0, v1) @signature `Ljava/lang/Throwable;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b48fc.  `@@rx.internal.util.ExceptionsUtils.TERMINATED` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4b4900.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.util.ExceptionsUtils` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lrx/internal/util/ExceptionsUtils;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4b4914.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4b491a.  return @kind void;
}
procedure `boolean` `addThrowable`(`java.util.concurrent.atomic.AtomicReference` v5 @kind object, `java.lang.Throwable` v6 @kind object) @signature `Lrx/internal/util/ExceptionsUtils;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b4794.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b479a.  v0:= temp @kind object;
  #L4b479c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4b47a0.  v1:= `@@rx.internal.util.ExceptionsUtils.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4b47a4.  v2:= 0I;
  #L4b47a6.  if v0 != v1 then goto L4b47ac;
  #L4b47aa.  return v2;
  #L4b47ac.  v1:= 1I;
  #L4b47ae.  if v0 != 0 then goto L4b47b6;
  #L4b47b2.  v3:= v6 @kind object;
  #L4b47b4.  goto L4b4800;
  #L4b47b6.  v3:= instanceof @variable v0 @type ^`rx.exceptions.CompositeException` @kind boolean;
  #L4b47ba.  if v3 == 0 then goto L4b47e8;
  #L4b47be.  v2:= new `java.util.ArrayList`;
  #L4b47c2.  v3:= v0 @kind object;
  #L4b47c4.  v3:= (`rx.exceptions.CompositeException`) v3 @kind object;
  #L4b47c8.  call temp:= `getExceptions`(v3) @signature `Lrx/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L4b47ce.  v3:= temp @kind object;
  #L4b47d0.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4b47d6.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b47dc.  v3:= new `rx.exceptions.CompositeException`;
  #L4b47e0.  call `<init>`(v3, v2) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4b47e6.  goto L4b4800;
  #L4b47e8.  v3:= new `rx.exceptions.CompositeException`;
  #L4b47ec.  v4:= 2I;
  #L4b47ee.  v4:= new `java.lang.Throwable`[v4];
  #L4b47f2.  v4[v2]:= v0 @kind object;
  #L4b47f6.  v4[v1]:= v6 @kind object;
  #L4b47fa.  call `<init>`(v3, v4) @signature `Lrx/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4b4800.  call temp:= `compareAndSet`(v5, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4806.  v0:= temp;
  #L4b4808.  if v0 == 0 then goto L4b4794;
  #L4b480c.  return v1;
}
procedure `boolean` `isTerminated`(`java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/util/ExceptionsUtils;.isTerminated:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b4820.  v0:= `@@rx.internal.util.ExceptionsUtils.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4b4824.  if v1 != v0 then goto L4b482c;
  #L4b4828.  v1:= 1I;
  #L4b482a.  goto L4b482e;
  #L4b482c.  v1:= 0I;
  #L4b482e.  return v1;
}
procedure `boolean` `isTerminated`(`java.util.concurrent.atomic.AtomicReference` v0 @kind object) @signature `Lrx/internal/util/ExceptionsUtils;.isTerminated:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4b4840.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4846.  v0:= temp @kind object;
  #L4b4848.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4b484c.  call temp:= `isTerminated`(v0) @signature `Lrx/internal/util/ExceptionsUtils;.isTerminated:(Ljava/lang/Throwable;)Z` @kind static;
  #L4b4852.  v0:= temp;
  #L4b4854.  return v0;
}
procedure `java.lang.Throwable` `terminate`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lrx/internal/util/ExceptionsUtils;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4b4868.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b486e.  v0:= temp @kind object;
  #L4b4870.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4b4874.  v1:= `@@rx.internal.util.ExceptionsUtils.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4b4878.  if v0 == v1 then goto L4b488a;
  #L4b487c.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b4882.  v2:= temp @kind object;
  #L4b4884.  v0:= v2 @kind object;
  #L4b4886.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4b488a.  return v0 @kind object;
}
procedure `rx.internal.util.ExceptionsUtils` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lrx/internal/util/ExceptionsUtils;.valueOf:(Ljava/lang/String;)Lrx/internal/util/ExceptionsUtils;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b489c.  v0:= constclass @type ^`rx.internal.util.ExceptionsUtils` @kind object;
  #L4b48a0.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L4b48a6.  v1:= temp @kind object;
  #L4b48a8.  v1:= (`rx.internal.util.ExceptionsUtils`) v1 @kind object;
  #L4b48ac.  return v1 @kind object;
}
procedure `rx.internal.util.ExceptionsUtils`[] `values`() @signature `Lrx/internal/util/ExceptionsUtils;.values:()[Lrx/internal/util/ExceptionsUtils;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b48c0.  v0:= `@@rx.internal.util.ExceptionsUtils.$VALUES` @type ^`rx.internal.util.ExceptionsUtils`[] @kind object;
  #L4b48c4.  call temp:= `clone`(v0) @signature `[Lrx/internal/util/ExceptionsUtils;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4b48ca.  v0:= temp @kind object;
  #L4b48cc.  v0:= (`rx.internal.util.ExceptionsUtils`[]) v0 @kind object;
  #L4b48d0.  return v0 @kind object;
}
