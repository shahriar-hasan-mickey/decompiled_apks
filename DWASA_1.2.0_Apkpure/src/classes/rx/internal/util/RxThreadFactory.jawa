record `rx.internal.util.RxThreadFactory` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.String` `rx.internal.util.RxThreadFactory.prefix` @AccessFlag FINAL;
}
global `java.util.concurrent.ThreadFactory` `@@rx.internal.util.RxThreadFactory.NONE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@rx.internal.util.RxThreadFactory.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/util/RxThreadFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b6804.  v0:= new `rx.internal.util.RxThreadFactory$1`;
  #L4b6808.  call `<init>`(v0) @signature `Lrx/internal/util/RxThreadFactory$1;.<init>:()V` @kind direct;
  #L4b680e.  `@@rx.internal.util.RxThreadFactory.NONE` @type ^`java.util.concurrent.ThreadFactory` := v0 @kind object;
  #L4b6812.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.util.RxThreadFactory` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lrx/internal/util/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b6824.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b682a.  v0.`rx.internal.util.RxThreadFactory.prefix` @type ^`java.lang.String` := v1 @kind object;
  #L4b682e.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`rx.internal.util.RxThreadFactory` v4 @kind this, `java.lang.Runnable` v5 @kind object) @signature `Lrx/internal/util/RxThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b67b4.  v0:= new `java.lang.Thread`;
  #L4b67b8.  v1:= new `java.lang.StringBuilder`;
  #L4b67bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b67c2.  v2:= v4.`rx.internal.util.RxThreadFactory.prefix` @type ^`java.lang.String` @kind object;
  #L4b67c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b67cc.  call temp:= `incrementAndGet`(v4) @signature `Lrx/internal/util/RxThreadFactory;.incrementAndGet:()J` @kind virtual;
  #L4b67d2.  v2:= temp @kind wide;
  #L4b67d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b67da.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b67e0.  v1:= temp @kind object;
  #L4b67e2.  call `<init>`(v0, v5, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L4b67e8.  v5:= 1I;
  #L4b67ea.  call `setDaemon`(v0, v5) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L4b67f0.  return v0 @kind object;
}
