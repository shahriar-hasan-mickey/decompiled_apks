record `rx.internal.util.unsafe.UnsafeAccess` @kind class @AccessFlag PUBLIC_FINAL {
}
global `boolean` `@@rx.internal.util.unsafe.UnsafeAccess.DISABLED_BY_USER` @AccessFlag PRIVATE_STATIC_FINAL;
global `sun.misc.Unsafe` `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bafd4.  v0:= "rx.unsafe-disable" @kind object;
  #L4bafd8.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4bafde.  v0:= temp @kind object;
  #L4bafe0.  v1:= 1I;
  #L4bafe2.  if v0 == 0 then goto L4bafea;
  #L4bafe6.  v0:= 1I;
  #L4bafe8.  goto L4bafec;
  #L4bafea.  v0:= 0I;
  #L4bafec.  `@@rx.internal.util.unsafe.UnsafeAccess.DISABLED_BY_USER` @type ^`boolean` := v0 @kind boolean;
  #L4baff0.  v0:= 0I;
  #L4baff2.  v2:= constclass @type ^`sun.misc.Unsafe` @kind object;
  #L4baff6.  v3:= "theUnsafe" @kind object;
  #L4baffa.  call temp:= `getDeclaredField`(v2, v3) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L4bb000.  v2:= temp @kind object;
  #L4bb002.  call `setAccessible`(v2, v1) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L4bb008.  call temp:= `get`(v2, v0) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4bb00e.  v1:= temp @kind object;
  #L4bb010.  v1:= (`sun.misc.Unsafe`) v1 @kind object;
  #L4bb014.  v0:= v1 @kind object;
  #L4bb016.  `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` := v0 @kind object;
  #L4bb01a.  return @kind void;
  catch `java.lang.Throwable` @[L4baff2..L4bb014] goto L4bb016;
}
procedure `void` `<init>`(`rx.internal.util.unsafe.UnsafeAccess` v2 @kind this) @signature `Lrx/internal/util/unsafe/UnsafeAccess;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4bb038.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bb03e.  v0:= new `java.lang.IllegalStateException`;
  #L4bb042.  v1:= "No instances!" @kind object;
  #L4bb046.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bb04c.  throw v0;
}
procedure `long` `addressOf`(`java.lang.Class` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lrx/internal/util/unsafe/UnsafeAccess;.addressOf:(Ljava/lang/Class;Ljava/lang/String;)J` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4baf88.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L4baf8e.  v0:= temp @kind object;
  #L4baf90.  v1:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baf94.  call temp:= `objectFieldOffset`(v1, v0) @signature `Lsun/misc/Unsafe;.objectFieldOffset:(Ljava/lang/reflect/Field;)J` @kind virtual;
  #L4baf9a.  v0:= temp @kind wide;
  #L4baf9c.  return v0 @kind wide;
  #L4baf9e.  v0:= Exception @type ^`java.lang.NoSuchFieldException` @kind object;
  #L4bafa0.  v1:= new `java.lang.InternalError`;
  #L4bafa4.  call `<init>`(v1) @signature `Ljava/lang/InternalError;.<init>:()V` @kind direct;
  #L4bafaa.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/InternalError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4bafb0.  throw v1;
  catch `java.lang.NoSuchFieldException` @[L4baf88..L4baf9c] goto L4baf9e;
}
procedure `boolean` `compareAndSwapInt`(`java.lang.Object` v6 @kind object, `long` v7 , `int` v9 , `int` v10 ) @signature `Lrx/internal/util/unsafe/UnsafeAccess;.compareAndSwapInt:(Ljava/lang/Object;JII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bae90.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4bae94.  v1:= v6 @kind object;
  #L4bae96.  v2:= v7 @kind wide;
  #L4bae98.  v4:= v9;
  #L4bae9a.  v5:= v10;
  #L4bae9c.  call temp:= `compareAndSwapInt`(v0, v1, v2, v4, v5) @signature `Lsun/misc/Unsafe;.compareAndSwapInt:(Ljava/lang/Object;JII)Z` @kind virtual;
  #L4baea2.  v6:= temp;
  #L4baea4.  return v6;
}
procedure `int` `getAndAddInt`(`java.lang.Object` v7 @kind object, `long` v8 , `int` v10 ) @signature `Lrx/internal/util/unsafe/UnsafeAccess;.getAndAddInt:(Ljava/lang/Object;JI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4baee0.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baee4.  call temp:= `getIntVolatile`(v0, v7, v8) @signature `Lsun/misc/Unsafe;.getIntVolatile:(Ljava/lang/Object;J)I` @kind virtual;
  #L4baeea.  v0:= temp;
  #L4baeec.  v6:= v0 + v10 @kind int;
  #L4baef0.  v1:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baef4.  v2:= v7 @kind object;
  #L4baef6.  v3:= v8 @kind wide;
  #L4baef8.  v5:= v0;
  #L4baefa.  call temp:= `compareAndSwapInt`(v1, v2, v3, v5, v6) @signature `Lsun/misc/Unsafe;.compareAndSwapInt:(Ljava/lang/Object;JII)Z` @kind virtual;
  #L4baf00.  v1:= temp;
  #L4baf02.  if v1 == 0 then goto L4baee0;
  #L4baf06.  return v0;
}
procedure `int` `getAndIncrementInt`(`java.lang.Object` v7 @kind object, `long` v8 ) @signature `Lrx/internal/util/unsafe/UnsafeAccess;.getAndIncrementInt:(Ljava/lang/Object;J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4baf18.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baf1c.  call temp:= `getIntVolatile`(v0, v7, v8) @signature `Lsun/misc/Unsafe;.getIntVolatile:(Ljava/lang/Object;J)I` @kind virtual;
  #L4baf22.  v0:= temp;
  #L4baf24.  v6:= v0 + 1;
  #L4baf28.  v1:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baf2c.  v2:= v7 @kind object;
  #L4baf2e.  v3:= v8 @kind wide;
  #L4baf30.  v5:= v0;
  #L4baf32.  call temp:= `compareAndSwapInt`(v1, v2, v3, v5, v6) @signature `Lsun/misc/Unsafe;.compareAndSwapInt:(Ljava/lang/Object;JII)Z` @kind virtual;
  #L4baf38.  v1:= temp;
  #L4baf3a.  if v1 == 0 then goto L4baf18;
  #L4baf3e.  return v0;
}
procedure `int` `getAndSetInt`(`java.lang.Object` v7 @kind object, `long` v8 , `int` v10 ) @signature `Lrx/internal/util/unsafe/UnsafeAccess;.getAndSetInt:(Ljava/lang/Object;JI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4baf50.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baf54.  call temp:= `getIntVolatile`(v0, v7, v8) @signature `Lsun/misc/Unsafe;.getIntVolatile:(Ljava/lang/Object;J)I` @kind virtual;
  #L4baf5a.  v0:= temp;
  #L4baf5c.  v1:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baf60.  v2:= v7 @kind object;
  #L4baf62.  v3:= v8 @kind wide;
  #L4baf64.  v5:= v0;
  #L4baf66.  v6:= v10;
  #L4baf68.  call temp:= `compareAndSwapInt`(v1, v2, v3, v5, v6) @signature `Lsun/misc/Unsafe;.compareAndSwapInt:(Ljava/lang/Object;JII)Z` @kind virtual;
  #L4baf6e.  v1:= temp;
  #L4baf70.  if v1 == 0 then goto L4baf50;
  #L4baf74.  return v0;
}
procedure `boolean` `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4baeb8.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baebc.  if v0 == 0 then goto L4baecc;
  #L4baec0.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.DISABLED_BY_USER` @type ^`boolean` @kind boolean;
  #L4baec4.  if v0 != 0 then goto L4baecc;
  #L4baec8.  v0:= 1I;
  #L4baeca.  goto L4baece;
  #L4baecc.  v0:= 0I;
  #L4baece.  return v0;
}
