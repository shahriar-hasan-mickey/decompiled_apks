record `rx.internal.util.unsafe.SpscUnboundedArrayQueue` @kind class @AccessFlag PUBLIC extends `rx.internal.util.unsafe.SpscUnboundedArrayQueueConsumerField` @kind class, `rx.internal.util.unsafe.QueueProgressIndicators` @kind interface {
}
global `long` `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.C_INDEX_OFFSET` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.HAS_NEXT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.MAX_LOOK_AHEAD_STEP` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.P_INDEX_OFFSET` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.REF_ARRAY_BASE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.REF_ELEMENT_SHIFT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4bac20.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L4bac24.  v1:= 4096I;
  #L4bac28.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L4bac2e.  v0:= temp @kind object;
  #L4bac30.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4bac36.  v0:= temp;
  #L4bac38.  `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.MAX_LOOK_AHEAD_STEP` @type ^`int` := v0;
  #L4bac3c.  v0:= new `java.lang.Object`;
  #L4bac40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bac46.  `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` := v0 @kind object;
  #L4bac4a.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4bac4e.  v1:= constclass @type ^`java.lang.Object`[] @kind object;
  #L4bac52.  call temp:= `arrayIndexScale`(v0, v1) @signature `Lsun/misc/Unsafe;.arrayIndexScale:(Ljava/lang/Class;)I` @kind virtual;
  #L4bac58.  v0:= temp;
  #L4bac5a.  v1:= 4I;
  #L4bac5c.  if v1 != v0 then goto L4bac68;
  #L4bac60.  v0:= 2I;
  #L4bac62.  `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.REF_ELEMENT_SHIFT` @type ^`int` := v0;
  #L4bac66.  goto L4bac76;
  #L4bac68.  v1:= 8I;
  #L4bac6c.  if v1 != v0 then goto L4bacf6;
  #L4bac70.  v0:= 3I;
  #L4bac72.  `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.REF_ELEMENT_SHIFT` @type ^`int` := v0;
  #L4bac76.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4bac7a.  v1:= constclass @type ^`java.lang.Object`[] @kind object;
  #L4bac7e.  call temp:= `arrayBaseOffset`(v0, v1) @signature `Lsun/misc/Unsafe;.arrayBaseOffset:(Ljava/lang/Class;)I` @kind virtual;
  #L4bac84.  v0:= temp;
  #L4bac86.  v0:= (`long`) v0 @kind i2l;
  #L4bac88.  `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.REF_ARRAY_BASE` @type ^`long` := v0 @kind wide;
  #L4bac8c.  v0:= constclass @type ^`rx.internal.util.unsafe.SpscUnboundedArrayQueueProducerFields` @kind object;
  #L4bac90.  v1:= "producerIndex" @kind object;
  #L4bac94.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L4bac9a.  v0:= temp @kind object;
  #L4bac9c.  v1:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4baca0.  call temp:= `objectFieldOffset`(v1, v0) @signature `Lsun/misc/Unsafe;.objectFieldOffset:(Ljava/lang/reflect/Field;)J` @kind virtual;
  #L4baca6.  v0:= temp @kind wide;
  #L4baca8.  `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.P_INDEX_OFFSET` @type ^`long` := v0 @kind wide;
  #L4bacac.  v0:= constclass @type ^`rx.internal.util.unsafe.SpscUnboundedArrayQueueConsumerField` @kind object;
  #L4bacb0.  v1:= "consumerIndex" @kind object;
  #L4bacb4.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L4bacba.  v0:= temp @kind object;
  #L4bacbc.  v1:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4bacc0.  call temp:= `objectFieldOffset`(v1, v0) @signature `Lsun/misc/Unsafe;.objectFieldOffset:(Ljava/lang/reflect/Field;)J` @kind virtual;
  #L4bacc6.  v0:= temp @kind wide;
  #L4bacc8.  `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.C_INDEX_OFFSET` @type ^`long` := v0 @kind wide;
  #L4baccc.  return @kind void;
  #L4bacce.  v0:= Exception @type ^`java.lang.NoSuchFieldException` @kind object;
  #L4bacd0.  v1:= new `java.lang.InternalError`;
  #L4bacd4.  call `<init>`(v1) @signature `Ljava/lang/InternalError;.<init>:()V` @kind direct;
  #L4bacda.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/InternalError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4bace0.  throw v1;
  #L4bace2.  v0:= Exception @type ^`java.lang.NoSuchFieldException` @kind object;
  #L4bace4.  v1:= new `java.lang.InternalError`;
  #L4bace8.  call `<init>`(v1) @signature `Ljava/lang/InternalError;.<init>:()V` @kind direct;
  #L4bacee.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/InternalError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4bacf4.  throw v1;
  #L4bacf6.  v0:= new `java.lang.IllegalStateException`;
  #L4bacfa.  v1:= "Unknown pointer size" @kind object;
  #L4bacfe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bad04.  throw v0;
  catch `java.lang.NoSuchFieldException` @[L4bac8c..L4bacac] goto L4bace2;
  catch `java.lang.NoSuchFieldException` @[L4bacac..L4baccc] goto L4bacce;
}
procedure `void` `<init>`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v4 @kind this, `int` v5 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bad34.  call `<init>`(v4) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueueConsumerField;.<init>:()V` @kind direct;
  #L4bad3a.  call temp:= `roundToPowerOfTwo`(v5) @signature `Lrx/internal/util/unsafe/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L4bad40.  v5:= temp;
  #L4bad42.  v0:= v5 + -1;
  #L4bad46.  v0:= (`long`) v0 @kind i2l;
  #L4bad48.  v2:= v5 + 1;
  #L4bad4c.  v2:= new `java.lang.Object`[v2];
  #L4bad50.  v2:= (`java.lang.Object`[]) v2 @kind object;
  #L4bad54.  v4.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerBuffer` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4bad58.  v4.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerMask` @type ^`long` := v0 @kind wide;
  #L4bad5c.  call `adjustLookAheadStep`(v4, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.adjustLookAheadStep:(I)V` @kind direct;
  #L4bad62.  v4.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerBuffer` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4bad66.  v4.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerMask` @type ^`long` := v0 @kind wide;
  #L4bad6a.  v2:= 1L;
  #L4bad6e.  v0:= v0 - v2 @kind long;
  #L4bad70.  v4.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerLookAhead` @type ^`long` := v0 @kind wide;
  #L4bad74.  v0:= 0L;
  #L4bad78.  call `soProducerIndex`(v4, v0) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soProducerIndex:(J)V` @kind direct;
  #L4bad7e.  return @kind void;
}
procedure `void` `adjustLookAheadStep`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v1 @kind this, `int` v2 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.adjustLookAheadStep:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4bad90.  v2:= v2 / 4;
  #L4bad94.  v0:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.MAX_LOOK_AHEAD_STEP` @type ^`int`;
  #L4bad98.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4bad9e.  v2:= temp;
  #L4bada0.  v1.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerLookAheadStep` @type ^`int` := v2;
  #L4bada4.  return @kind void;
}
procedure `long` `calcDirectOffset`(`long` v3 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcDirectOffset:(J)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4bab64.  v0:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.REF_ARRAY_BASE` @type ^`long` @kind wide;
  #L4bab68.  v2:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.REF_ELEMENT_SHIFT` @type ^`int`;
  #L4bab6c.  v3:= v3 ^< v2 @kind long;
  #L4bab6e.  v0:= v0 + v3 @kind long;
  #L4bab70.  return v0 @kind wide;
}
procedure `long` `calcWrappedOffset`(`long` v0 , `long` v2 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcWrappedOffset:(JJ)J` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4bab84.  v0:= v0 ^& v2 @kind long;
  #L4bab86.  call temp:= `calcDirectOffset`(v0) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcDirectOffset:(J)J` @kind static;
  #L4bab8c.  v0:= temp @kind wide;
  #L4bab8e.  return v0 @kind wide;
}
procedure `long` `lvConsumerIndex`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v3 @kind this) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvConsumerIndex:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4babd8.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4babdc.  v1:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.C_INDEX_OFFSET` @type ^`long` @kind wide;
  #L4babe0.  call temp:= `getLongVolatile`(v0, v3, v1) @signature `Lsun/misc/Unsafe;.getLongVolatile:(Ljava/lang/Object;J)J` @kind virtual;
  #L4babe6.  v0:= temp @kind wide;
  #L4babe8.  return v0 @kind wide;
}
procedure `java.lang.Object` `lvElement`(`java.lang.Object`[] v1 @kind object, `long` v2 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvElement:([Ljava/lang/Object;J)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4ba9cc.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4ba9d0.  call temp:= `getObjectVolatile`(v0, v1, v2) @signature `Lsun/misc/Unsafe;.getObjectVolatile:(Ljava/lang/Object;J)Ljava/lang/Object;` @kind virtual;
  #L4ba9d6.  v1:= temp @kind object;
  #L4ba9d8.  return v1 @kind object;
}
procedure `java.lang.Object`[] `lvNext`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvNext:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4bab14.  v0:= length @variable v3;
  #L4bab16.  v0:= v0 + -1;
  #L4bab1a.  v0:= (`long`) v0 @kind i2l;
  #L4bab1c.  call temp:= `calcDirectOffset`(v0) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcDirectOffset:(J)J` @kind static;
  #L4bab22.  v0:= temp @kind wide;
  #L4bab24.  call temp:= `lvElement`(v3, v0) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvElement:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L4bab2a.  v3:= temp @kind object;
  #L4bab2c.  v3:= (`java.lang.Object`[]) v3 @kind object;
  #L4bab30.  v3:= (`java.lang.Object`[]) v3 @kind object;
  #L4bab34.  return v3 @kind object;
}
procedure `long` `lvProducerIndex`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v3 @kind this) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvProducerIndex:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4babfc.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4bac00.  v1:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.P_INDEX_OFFSET` @type ^`long` @kind wide;
  #L4bac04.  call temp:= `getLongVolatile`(v0, v3, v1) @signature `Lsun/misc/Unsafe;.getLongVolatile:(Ljava/lang/Object;J)J` @kind virtual;
  #L4bac0a.  v0:= temp @kind wide;
  #L4bac0c.  return v0 @kind wide;
}
procedure `java.lang.Object` `newBufferPeek`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v0 @kind this, `java.lang.Object`[] v1 @kind object, `long` v2 , `long` v4 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.newBufferPeek:([Ljava/lang/Object;JJ)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;

  #L4ba9ec.  v0.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerBuffer` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4ba9f0.  call temp:= `calcWrappedOffset`(v2, v4) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcWrappedOffset:(JJ)J` @kind static;
  #L4ba9f6.  v2:= temp @kind wide;
  #L4ba9f8.  call temp:= `lvElement`(v1, v2) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvElement:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L4ba9fe.  v1:= temp @kind object;
  #L4baa00.  return v1 @kind object;
}
procedure `java.lang.Object` `newBufferPoll`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v2 @kind this, `java.lang.Object`[] v3 @kind object, `long` v4 , `long` v6 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.newBufferPoll:([Ljava/lang/Object;JJ)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4baa14.  v2.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerBuffer` @type ^`java.lang.Object`[] := v3 @kind object;
  #L4baa18.  call temp:= `calcWrappedOffset`(v4, v6) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcWrappedOffset:(JJ)J` @kind static;
  #L4baa1e.  v6:= temp @kind wide;
  #L4baa20.  call temp:= `lvElement`(v3, v6) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvElement:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L4baa26.  v0:= temp @kind object;
  #L4baa28.  v1:= 0I;
  #L4baa2a.  if v0 != 0 then goto L4baa30;
  #L4baa2e.  return v1 @kind object;
  #L4baa30.  call `soElement`(v3, v6, v1) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soElement:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L4baa36.  v6:= 1L;
  #L4baa3a.  v4:= v4 + v6 @kind long;
  #L4baa3c.  call `soConsumerIndex`(v2, v4) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soConsumerIndex:(J)V` @kind direct;
  #L4baa42.  return v0 @kind object;
}
procedure `void` `resize`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v3 @kind this, `java.lang.Object`[] v4 @kind object, `long` v5 , `long` v7 , `java.lang.Object` v9 @kind object, `long` v10 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.resize:([Ljava/lang/Object;JJLjava/lang/Object;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4badb8.  v0:= length @variable v4;
  #L4badba.  v0:= new `java.lang.Object`[v0];
  #L4badbe.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4badc2.  v3.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerBuffer` @type ^`java.lang.Object`[] := v0 @kind object;
  #L4badc6.  v10:= v10 + v5 @kind long;
  #L4badc8.  v1:= 1L;
  #L4badcc.  v10:= v10 - v1 @kind long;
  #L4badce.  v3.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerLookAhead` @type ^`long` := v10 @kind wide;
  #L4badd2.  call `soElement`(v0, v7, v9) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soElement:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L4badd8.  call `soNext`(v3, v4, v0) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soNext:([Ljava/lang/Object;[Ljava/lang/Object;)V` @kind direct;
  #L4badde.  v9:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` @kind object;
  #L4bade2.  call `soElement`(v4, v7, v9) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soElement:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L4bade8.  v5:= v5 + v1 @kind long;
  #L4badea.  call `soProducerIndex`(v3, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soProducerIndex:(J)V` @kind direct;
  #L4badf0.  return @kind void;
}
procedure `void` `soConsumerIndex`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v6 @kind this, `long` v7 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soConsumerIndex:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bae04.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4bae08.  v2:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.C_INDEX_OFFSET` @type ^`long` @kind wide;
  #L4bae0c.  v1:= v6 @kind object;
  #L4bae0e.  v4:= v7 @kind wide;
  #L4bae10.  call `putOrderedLong`(v0, v1, v2, v4) @signature `Lsun/misc/Unsafe;.putOrderedLong:(Ljava/lang/Object;JJ)V` @kind virtual;
  #L4bae16.  return @kind void;
}
procedure `void` `soElement`(`java.lang.Object`[] v1 @kind object, `long` v2 , `java.lang.Object` v4 @kind object) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soElement:([Ljava/lang/Object;JLjava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4bae28.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4bae2c.  call `putOrderedObject`(v0, v1, v2, v4) @signature `Lsun/misc/Unsafe;.putOrderedObject:(Ljava/lang/Object;JLjava/lang/Object;)V` @kind virtual;
  #L4bae32.  return @kind void;
}
procedure `void` `soNext`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v2 @kind this, `java.lang.Object`[] v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soNext:([Ljava/lang/Object;[Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4bae44.  v0:= length @variable v3;
  #L4bae46.  v0:= v0 + -1;
  #L4bae4a.  v0:= (`long`) v0 @kind i2l;
  #L4bae4c.  call temp:= `calcDirectOffset`(v0) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcDirectOffset:(J)J` @kind static;
  #L4bae52.  v0:= temp @kind wide;
  #L4bae54.  call `soElement`(v3, v0, v4) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soElement:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L4bae5a.  return @kind void;
}
procedure `void` `soProducerIndex`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v6 @kind this, `long` v7 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soProducerIndex:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bae6c.  v0:= `@@rx.internal.util.unsafe.UnsafeAccess.UNSAFE` @type ^`sun.misc.Unsafe` @kind object;
  #L4bae70.  v2:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.P_INDEX_OFFSET` @type ^`long` @kind wide;
  #L4bae74.  v1:= v6 @kind object;
  #L4bae76.  v4:= v7 @kind wide;
  #L4bae78.  call `putOrderedLong`(v0, v1, v2, v4) @signature `Lsun/misc/Unsafe;.putOrderedLong:(Ljava/lang/Object;JJ)V` @kind virtual;
  #L4bae7e.  return @kind void;
}
procedure `boolean` `writeToQueue`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v0 @kind this, `java.lang.Object`[] v1 @kind object, `java.lang.Object` v2 @kind object, `long` v3 , `long` v5 ) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.writeToQueue:([Ljava/lang/Object;Ljava/lang/Object;JJ)Z` @AccessFlag PRIVATE {
    temp;

  #L4ba968.  call `soElement`(v1, v5, v2) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soElement:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L4ba96e.  v1:= 1L;
  #L4ba972.  v3:= v3 + v1 @kind long;
  #L4ba974.  call `soProducerIndex`(v0, v3) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soProducerIndex:(J)V` @kind direct;
  #L4ba97a.  v1:= 1I;
  #L4ba97c.  return v1;
}
procedure `long` `currentConsumerIndex`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v2 @kind this) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.currentConsumerIndex:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4baba0.  call temp:= `lvConsumerIndex`(v2) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvConsumerIndex:()J` @kind direct;
  #L4baba6.  v0:= temp @kind wide;
  #L4baba8.  return v0 @kind wide;
}
procedure `long` `currentProducerIndex`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v2 @kind this) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.currentProducerIndex:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4babbc.  call temp:= `lvProducerIndex`(v2) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvProducerIndex:()J` @kind direct;
  #L4babc2.  v0:= temp @kind wide;
  #L4babc4.  return v0 @kind wide;
}
procedure `java.util.Iterator` `iterator`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v1 @kind this) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bab48.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4bab4c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4bab52.  throw v0;
}
procedure `boolean` `offer`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4ba8ac.  if v14 == 0 then goto L4ba948;
  #L4ba8b0.  v1:= v13.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerBuffer` @type ^`java.lang.Object`[] @kind object;
  #L4ba8b4.  v3:= v13.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerIndex` @type ^`long` @kind wide;
  #L4ba8b8.  v7:= v13.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerMask` @type ^`long` @kind wide;
  #L4ba8bc.  call temp:= `calcWrappedOffset`(v3, v7) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcWrappedOffset:(JJ)J` @kind static;
  #L4ba8c2.  v5:= temp @kind wide;
  #L4ba8c4.  v9:= v13.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerLookAhead` @type ^`long` @kind wide;
  #L4ba8c8.  v0:= lcmp(v3, v9);
  #L4ba8cc.  if v0 >= 0 then goto L4ba8de;
  #L4ba8d0.  v0:= v13 @kind object;
  #L4ba8d2.  v2:= v14 @kind object;
  #L4ba8d4.  call temp:= `writeToQueue`(v0, v1, v2, v3, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.writeToQueue:([Ljava/lang/Object;Ljava/lang/Object;JJ)Z` @kind direct;
  #L4ba8da.  v14:= temp;
  #L4ba8dc.  return v14;
  #L4ba8de.  v0:= v13.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerLookAheadStep` @type ^`int`;
  #L4ba8e2.  v9:= (`long`) v0 @kind i2l;
  #L4ba8e4.  v9:= v9 + v3 @kind long;
  #L4ba8e6.  call temp:= `calcWrappedOffset`(v9, v7) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcWrappedOffset:(JJ)J` @kind static;
  #L4ba8ec.  v11:= temp @kind wide;
  #L4ba8ee.  call temp:= `lvElement`(v1, v11) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvElement:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L4ba8f4.  v0:= temp @kind object;
  #L4ba8f6.  v11:= 1L;
  #L4ba8fa.  if v0 != 0 then goto L4ba912;
  #L4ba8fe.  v9:= v9 - v11 @kind long;
  #L4ba900.  v13.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.producerLookAhead` @type ^`long` := v9 @kind wide;
  #L4ba904.  v0:= v13 @kind object;
  #L4ba906.  v2:= v14 @kind object;
  #L4ba908.  call temp:= `writeToQueue`(v0, v1, v2, v3, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.writeToQueue:([Ljava/lang/Object;Ljava/lang/Object;JJ)Z` @kind direct;
  #L4ba90e.  v14:= temp;
  #L4ba910.  return v14;
  #L4ba912.  v11:= v11 + v3 @kind long;
  #L4ba914.  call temp:= `calcWrappedOffset`(v11, v7) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcWrappedOffset:(JJ)J` @kind static;
  #L4ba91a.  v9:= temp @kind wide;
  #L4ba91c.  call temp:= `lvElement`(v1, v9) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvElement:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L4ba922.  v0:= temp @kind object;
  #L4ba924.  if v0 == 0 then goto L4ba936;
  #L4ba928.  v0:= v13 @kind object;
  #L4ba92a.  v2:= v14 @kind object;
  #L4ba92c.  call temp:= `writeToQueue`(v0, v1, v2, v3, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.writeToQueue:([Ljava/lang/Object;Ljava/lang/Object;JJ)Z` @kind direct;
  #L4ba932.  v14:= temp;
  #L4ba934.  return v14;
  #L4ba936.  v0:= v13 @kind object;
  #L4ba938.  v2:= v3 @kind wide;
  #L4ba93a.  v4:= v5 @kind wide;
  #L4ba93c.  v6:= v14 @kind object;
  #L4ba93e.  call `resize`(v0, v1, v2, v4, v6, v7) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.resize:([Ljava/lang/Object;JJLjava/lang/Object;J)V` @kind direct;
  #L4ba944.  v14:= 1I;
  #L4ba946.  return v14;
  #L4ba948.  v14:= new `java.lang.NullPointerException`;
  #L4ba94c.  v0:= "Null is not a valid element" @kind object;
  #L4ba950.  call `<init>`(v14, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ba956.  throw v14;
}
procedure `java.lang.Object` `peek`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v7 @kind this) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4baa54.  v0:= v7.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerBuffer` @type ^`java.lang.Object`[] @kind object;
  #L4baa58.  v3:= v7.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerIndex` @type ^`long` @kind wide;
  #L4baa5c.  v5:= v7.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerMask` @type ^`long` @kind wide;
  #L4baa60.  call temp:= `calcWrappedOffset`(v3, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcWrappedOffset:(JJ)J` @kind static;
  #L4baa66.  v1:= temp @kind wide;
  #L4baa68.  call temp:= `lvElement`(v0, v1) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvElement:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L4baa6e.  v1:= temp @kind object;
  #L4baa70.  v2:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` @kind object;
  #L4baa74.  if v1 != v2 then goto L4baa8c;
  #L4baa78.  call temp:= `lvNext`(v7, v0) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvNext:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind direct;
  #L4baa7e.  v2:= temp @kind object;
  #L4baa80.  v1:= v7 @kind object;
  #L4baa82.  call temp:= `newBufferPeek`(v1, v2, v3, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.newBufferPeek:([Ljava/lang/Object;JJ)Ljava/lang/Object;` @kind direct;
  #L4baa88.  v0:= temp @kind object;
  #L4baa8a.  return v0 @kind object;
  #L4baa8c.  return v1 @kind object;
}
procedure `java.lang.Object` `poll`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v10 @kind this) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4baaa0.  v0:= v10.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerBuffer` @type ^`java.lang.Object`[] @kind object;
  #L4baaa4.  v3:= v10.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerIndex` @type ^`long` @kind wide;
  #L4baaa8.  v5:= v10.`rx.internal.util.unsafe.SpscUnboundedArrayQueue.consumerMask` @type ^`long` @kind wide;
  #L4baaac.  call temp:= `calcWrappedOffset`(v3, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.calcWrappedOffset:(JJ)J` @kind static;
  #L4baab2.  v1:= temp @kind wide;
  #L4baab4.  call temp:= `lvElement`(v0, v1) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvElement:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L4baaba.  v7:= temp @kind object;
  #L4baabc.  v8:= `@@rx.internal.util.unsafe.SpscUnboundedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` @kind object;
  #L4baac0.  if v7 != v8 then goto L4baac8;
  #L4baac4.  v8:= 1I;
  #L4baac6.  goto L4baaca;
  #L4baac8.  v8:= 0I;
  #L4baaca.  v9:= 0I;
  #L4baacc.  if v7 == 0 then goto L4baae8;
  #L4baad0.  if v8 != 0 then goto L4baae8;
  #L4baad4.  call `soElement`(v0, v1, v9) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soElement:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L4baada.  v0:= 1L;
  #L4baade.  v3:= v3 + v0 @kind long;
  #L4baae0.  call `soConsumerIndex`(v10, v3) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.soConsumerIndex:(J)V` @kind direct;
  #L4baae6.  return v7 @kind object;
  #L4baae8.  if v8 == 0 then goto L4bab00;
  #L4baaec.  call temp:= `lvNext`(v10, v0) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvNext:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind direct;
  #L4baaf2.  v2:= temp @kind object;
  #L4baaf4.  v1:= v10 @kind object;
  #L4baaf6.  call temp:= `newBufferPoll`(v1, v2, v3, v5) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.newBufferPoll:([Ljava/lang/Object;JJ)Ljava/lang/Object;` @kind direct;
  #L4baafc.  v0:= temp @kind object;
  #L4baafe.  return v0 @kind object;
  #L4bab00.  return v9 @kind object;
}
procedure `int` `size`(`rx.internal.util.unsafe.SpscUnboundedArrayQueue` v7 @kind this) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ba990.  call temp:= `lvConsumerIndex`(v7) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvConsumerIndex:()J` @kind direct;
  #L4ba996.  v0:= temp @kind wide;
  #L4ba998.  call temp:= `lvProducerIndex`(v7) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvProducerIndex:()J` @kind direct;
  #L4ba99e.  v2:= temp @kind wide;
  #L4ba9a0.  call temp:= `lvConsumerIndex`(v7) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.lvConsumerIndex:()J` @kind direct;
  #L4ba9a6.  v4:= temp @kind wide;
  #L4ba9a8.  v6:= lcmp(v0, v4);
  #L4ba9ac.  if v6 != 0 then goto L4ba9b6;
  #L4ba9b0.  v2:= v2 - v4 @kind long;
  #L4ba9b2.  v0:= (`int`) v2 @kind l2i;
  #L4ba9b4.  return v0;
  #L4ba9b6.  v0:= v4 @kind wide;
  #L4ba9b8.  goto L4ba998;
}
