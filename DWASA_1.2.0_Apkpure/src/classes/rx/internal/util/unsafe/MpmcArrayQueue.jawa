record `rx.internal.util.unsafe.MpmcArrayQueue` @kind class @AccessFlag PUBLIC extends `rx.internal.util.unsafe.MpmcArrayQueueConsumerField` @kind class {
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p30` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p31` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p32` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p33` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p34` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p35` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p36` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p37` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p40` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p41` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p42` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p43` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p44` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p45` @AccessFlag ;
  `long` `rx.internal.util.unsafe.MpmcArrayQueue.p46` @AccessFlag ;
}
procedure `void` `<init>`(`rx.internal.util.unsafe.MpmcArrayQueue` v1 @kind this, `int` v2 ) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b9ee8.  v0:= 2I;
  #L4b9eea.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4b9ef0.  v2:= temp;
  #L4b9ef2.  call `<init>`(v1, v2) @signature `Lrx/internal/util/unsafe/MpmcArrayQueueConsumerField;.<init>:(I)V` @kind direct;
  #L4b9ef8.  return @kind void;
}
procedure `boolean` `isEmpty`(`rx.internal.util.unsafe.MpmcArrayQueue` v5 @kind this) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b9ccc.  call temp:= `lvConsumerIndex`(v5) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvConsumerIndex:()J` @kind virtual;
  #L4b9cd2.  v0:= temp @kind wide;
  #L4b9cd4.  call temp:= `lvProducerIndex`(v5) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvProducerIndex:()J` @kind virtual;
  #L4b9cda.  v2:= temp @kind wide;
  #L4b9cdc.  v4:= lcmp(v0, v2);
  #L4b9ce0.  if v4 != 0 then goto L4b9ce8;
  #L4b9ce4.  v0:= 1I;
  #L4b9ce6.  goto L4b9cea;
  #L4b9ce8.  v0:= 0I;
  #L4b9cea.  return v0;
}
procedure `boolean` `offer`(`rx.internal.util.unsafe.MpmcArrayQueue` v18 @kind this, `java.lang.Object` v19 @kind object) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4b9cfc.  v6:= v18 @kind object;
  #L4b9d00.  v0:= v19 @kind object;
  #L4b9d04.  if v0 == 0 then goto L4b9d9e;
  #L4b9d08.  v1:= v6.`rx.internal.util.unsafe.MpmcArrayQueue.mask` @type ^`long` @kind wide;
  #L4b9d0c.  v3:= 1L;
  #L4b9d10.  v1:= v1 + v3 @kind long;
  #L4b9d12.  v5:= v6.`rx.internal.util.unsafe.MpmcArrayQueue.sequenceBuffer` @type ^`long`[] @kind object;
  #L4b9d16.  v7:= 9223372036854775807L;
  #L4b9d20.  call temp:= `lvProducerIndex`(v18) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvProducerIndex:()J` @kind virtual;
  #L4b9d26.  v9:= temp @kind wide;
  #L4b9d28.  call temp:= `calcSequenceOffset`(v6, v9) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.calcSequenceOffset:(J)J` @kind virtual;
  #L4b9d2e.  v11:= temp @kind wide;
  #L4b9d30.  call temp:= `lvSequence`(v6, v5, v11) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvSequence:([JJ)J` @kind virtual;
  #L4b9d36.  v13:= temp @kind wide;
  #L4b9d38.  v13:= v13 - v9 @kind long;
  #L4b9d3a.  v15:= 0L;
  #L4b9d3e.  v17:= lcmp(v13, v15);
  #L4b9d42.  if v17 != 0 then goto L4b9d78;
  #L4b9d46.  v13:= v9 + v3 @kind long;
  #L4b9d4a.  call temp:= `casProducerIndex`(v6, v9, v13) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.casProducerIndex:(JJ)Z` @kind virtual;
  #L4b9d50.  v15:= temp;
  #L4b9d52.  if v15 == 0 then goto L4b9d20;
  #L4b9d56.  call temp:= `calcElementOffset`(v6, v9) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.calcElementOffset:(J)J` @kind virtual;
  #L4b9d5c.  v1:= temp @kind wide;
  #L4b9d5e.  call `spElement`(v6, v1, v0) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.spElement:(JLjava/lang/Object;)V` @kind virtual;
  #L4b9d64.  v0:= v18 @kind object;
  #L4b9d68.  v1:= v5 @kind object;
  #L4b9d6a.  v2:= v11 @kind wide;
  #L4b9d6c.  v4:= v13 @kind wide;
  #L4b9d6e.  call `soSequence`(v0, v1, v2, v4) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.soSequence:([JJJ)V` @kind virtual;
  #L4b9d74.  v0:= 1I;
  #L4b9d76.  return v0;
  #L4b9d78.  v11:= lcmp(v13, v15);
  #L4b9d7c.  if v11 >= 0 then goto L4b9d20;
  #L4b9d80.  v9:= v9 - v1 @kind long;
  #L4b9d82.  v11:= lcmp(v9, v7);
  #L4b9d86.  if v11 > 0 then goto L4b9d20;
  #L4b9d8a.  call temp:= `lvConsumerIndex`(v18) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvConsumerIndex:()J` @kind virtual;
  #L4b9d90.  v7:= temp @kind wide;
  #L4b9d92.  v11:= lcmp(v9, v7);
  #L4b9d96.  if v11 > 0 then goto L4b9d20;
  #L4b9d9a.  v0:= 0I;
  #L4b9d9c.  return v0;
  #L4b9d9e.  v0:= new `java.lang.NullPointerException`;
  #L4b9da2.  v1:= "Null is not a valid element" @kind object;
  #L4b9da6.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b9dac.  goto L4b9db0;
  #L4b9dae.  throw v0;
  #L4b9db0.  goto L4b9dae;
}
procedure `java.lang.Object` `peek`(`rx.internal.util.unsafe.MpmcArrayQueue` v6 @kind this) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b9e00.  call temp:= `lvConsumerIndex`(v6) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvConsumerIndex:()J` @kind virtual;
  #L4b9e06.  v0:= temp @kind wide;
  #L4b9e08.  call temp:= `calcElementOffset`(v6, v0) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.calcElementOffset:(J)J` @kind virtual;
  #L4b9e0e.  v2:= temp @kind wide;
  #L4b9e10.  call temp:= `lpElement`(v6, v2) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lpElement:(J)Ljava/lang/Object;` @kind virtual;
  #L4b9e16.  v2:= temp @kind object;
  #L4b9e18.  if v2 != 0 then goto L4b9e2c;
  #L4b9e1c.  call temp:= `lvProducerIndex`(v6) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvProducerIndex:()J` @kind virtual;
  #L4b9e22.  v3:= temp @kind wide;
  #L4b9e24.  v5:= lcmp(v0, v3);
  #L4b9e28.  if v5 != 0 then goto L4b9e00;
  #L4b9e2c.  return v2 @kind object;
}
procedure `java.lang.Object` `poll`(`rx.internal.util.unsafe.MpmcArrayQueue` v18 @kind this) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4b9e40.  v6:= v18 @kind object;
  #L4b9e44.  v1:= v6.`rx.internal.util.unsafe.MpmcArrayQueue.sequenceBuffer` @type ^`long`[] @kind object;
  #L4b9e48.  v2:= -1L;
  #L4b9e4c.  call temp:= `lvConsumerIndex`(v18) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvConsumerIndex:()J` @kind virtual;
  #L4b9e52.  v4:= temp @kind wide;
  #L4b9e54.  call temp:= `calcSequenceOffset`(v6, v4) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.calcSequenceOffset:(J)J` @kind virtual;
  #L4b9e5a.  v7:= temp @kind wide;
  #L4b9e5c.  call temp:= `lvSequence`(v6, v1, v7) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvSequence:([JJ)J` @kind virtual;
  #L4b9e62.  v9:= temp @kind wide;
  #L4b9e64.  v11:= 1L;
  #L4b9e68.  v13:= v4 + v11 @kind long;
  #L4b9e6c.  v9:= v9 - v13 @kind long;
  #L4b9e6e.  v0:= 0I;
  #L4b9e70.  v15:= 0L;
  #L4b9e74.  v17:= lcmp(v9, v15);
  #L4b9e78.  if v17 != 0 then goto L4b9eb4;
  #L4b9e7c.  call temp:= `casConsumerIndex`(v6, v4, v13) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.casConsumerIndex:(JJ)Z` @kind virtual;
  #L4b9e82.  v9:= temp;
  #L4b9e84.  if v9 == 0 then goto L4b9e4c;
  #L4b9e88.  call temp:= `calcElementOffset`(v6, v4) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.calcElementOffset:(J)J` @kind virtual;
  #L4b9e8e.  v2:= temp @kind wide;
  #L4b9e90.  call temp:= `lpElement`(v6, v2) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lpElement:(J)Ljava/lang/Object;` @kind virtual;
  #L4b9e96.  v9:= temp @kind object;
  #L4b9e98.  call `spElement`(v6, v2, v0) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.spElement:(JLjava/lang/Object;)V` @kind virtual;
  #L4b9e9e.  v2:= v6.`rx.internal.util.unsafe.MpmcArrayQueue.mask` @type ^`long` @kind wide;
  #L4b9ea2.  v4:= v4 + v2 @kind long;
  #L4b9ea4.  v4:= v4 + v11 @kind long;
  #L4b9ea6.  v0:= v18 @kind object;
  #L4b9eaa.  v2:= v7 @kind wide;
  #L4b9eac.  call `soSequence`(v0, v1, v2, v4) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.soSequence:([JJJ)V` @kind virtual;
  #L4b9eb2.  return v9 @kind object;
  #L4b9eb4.  v7:= lcmp(v9, v15);
  #L4b9eb8.  if v7 >= 0 then goto L4b9e4c;
  #L4b9ebc.  v7:= lcmp(v4, v2);
  #L4b9ec0.  if v7 < 0 then goto L4b9e4c;
  #L4b9ec4.  call temp:= `lvProducerIndex`(v18) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvProducerIndex:()J` @kind virtual;
  #L4b9eca.  v2:= temp @kind wide;
  #L4b9ecc.  v7:= lcmp(v4, v2);
  #L4b9ed0.  if v7 != 0 then goto L4b9e4c;
  #L4b9ed4.  return v0 @kind object;
}
procedure `int` `size`(`rx.internal.util.unsafe.MpmcArrayQueue` v7 @kind this) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b9dc4.  call temp:= `lvConsumerIndex`(v7) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvConsumerIndex:()J` @kind virtual;
  #L4b9dca.  v0:= temp @kind wide;
  #L4b9dcc.  call temp:= `lvProducerIndex`(v7) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvProducerIndex:()J` @kind virtual;
  #L4b9dd2.  v2:= temp @kind wide;
  #L4b9dd4.  call temp:= `lvConsumerIndex`(v7) @signature `Lrx/internal/util/unsafe/MpmcArrayQueue;.lvConsumerIndex:()J` @kind virtual;
  #L4b9dda.  v4:= temp @kind wide;
  #L4b9ddc.  v6:= lcmp(v0, v4);
  #L4b9de0.  if v6 != 0 then goto L4b9dea;
  #L4b9de4.  v2:= v2 - v4 @kind long;
  #L4b9de6.  v0:= (`int`) v2 @kind l2i;
  #L4b9de8.  return v0;
  #L4b9dea.  v0:= v4 @kind wide;
  #L4b9dec.  goto L4b9dcc;
}
