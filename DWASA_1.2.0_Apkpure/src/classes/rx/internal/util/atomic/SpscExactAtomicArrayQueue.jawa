record `rx.internal.util.atomic.SpscExactAtomicArrayQueue` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `java.util.Queue` @kind interface {
  `int` `rx.internal.util.atomic.SpscExactAtomicArrayQueue.capacitySkip` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.util.atomic.SpscExactAtomicArrayQueue.consumerIndex` @AccessFlag FINAL;
  `int` `rx.internal.util.atomic.SpscExactAtomicArrayQueue.mask` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.util.atomic.SpscExactAtomicArrayQueue.producerIndex` @AccessFlag FINAL;
}
global `long` `@@rx.internal.util.atomic.SpscExactAtomicArrayQueue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v2 @kind this, `int` v3 ) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b86a0.  call temp:= `roundToPowerOfTwo`(v3) @signature `Lrx/internal/util/unsafe/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L4b86a6.  v0:= temp;
  #L4b86a8.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4b86ae.  call temp:= `length`(v2) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.length:()I` @kind virtual;
  #L4b86b4.  v0:= temp;
  #L4b86b6.  v1:= v0 + -1;
  #L4b86ba.  v2.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.mask` @type ^`int` := v1;
  #L4b86be.  v0:= v0 - v3 @kind int;
  #L4b86c0.  v2.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.capacitySkip` @type ^`int` := v0;
  #L4b86c4.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b86c8.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b86ce.  v2.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L4b86d2.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b86d6.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b86dc.  v2.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L4b86e0.  return @kind void;
}
procedure `boolean` `add`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b83fc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b8400.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b8406.  throw v1;
}
procedure `boolean` `addAll`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b8418.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b841c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b8422.  throw v1;
}
procedure `void` `clear`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b86f4.  call temp:= `poll`(v1) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b86fa.  v0:= temp @kind object;
  #L4b86fc.  if v0 != 0 then goto L4b86f4;
  #L4b8700.  call temp:= `isEmpty`(v1) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4b8706.  v0:= temp;
  #L4b8708.  if v0 != 0 then goto L4b870e;
  #L4b870c.  goto L4b86f4;
  #L4b870e.  return @kind void;
}
procedure `boolean` `contains`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b8434.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b8438.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b843e.  throw v1;
}
procedure `boolean` `containsAll`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b8450.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b8454.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b845a.  throw v1;
}
procedure `java.lang.Object` `element`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.element:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8598.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b859c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b85a2.  throw v0;
}
procedure `boolean` `isEmpty`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v2 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b846c.  v0:= v2.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b8470.  v1:= v2.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b8474.  if v0 != v1 then goto L4b847c;
  #L4b8478.  v0:= 1I;
  #L4b847a.  goto L4b847e;
  #L4b847c.  v0:= 0I;
  #L4b847e.  return v0;
}
procedure `java.util.Iterator` `iterator`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8684.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b8688.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b868e.  throw v0;
}
procedure `boolean` `offer`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b8490.  if v7 == 0 then goto L4b84e0;
  #L4b8494.  v0:= v6.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b8498.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b849e.  v0:= temp @kind wide;
  #L4b84a0.  v2:= v6.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.mask` @type ^`int`;
  #L4b84a4.  v3:= v6.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.capacitySkip` @type ^`int`;
  #L4b84a8.  v3:= (`long`) v3 @kind i2l;
  #L4b84aa.  v3:= v3 + v0 @kind long;
  #L4b84ac.  v4:= (`int`) v3 @kind l2i;
  #L4b84ae.  v3:= v4 ^& v2 @kind int;
  #L4b84b2.  call temp:= `get`(v6, v3) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4b84b8.  v3:= temp @kind object;
  #L4b84ba.  if v3 == 0 then goto L4b84c2;
  #L4b84be.  v7:= 0I;
  #L4b84c0.  return v7;
  #L4b84c2.  v3:= (`int`) v0 @kind l2i;
  #L4b84c4.  v2:= v2 ^& v3 @kind int;
  #L4b84c6.  v3:= v6.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b84ca.  v4:= 1L;
  #L4b84ce.  v0:= v0 + v4 @kind long;
  #L4b84d0.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4b84d6.  call `lazySet`(v6, v2, v7) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4b84dc.  v7:= 1I;
  #L4b84de.  return v7;
  #L4b84e0.  v7:= new `java.lang.NullPointerException`;
  #L4b84e4.  call `<init>`(v7) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L4b84ea.  throw v7;
}
procedure `java.lang.Object` `peek`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v2 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b85b4.  v0:= v2.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b85b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b85be.  v0:= temp @kind wide;
  #L4b85c0.  v1:= (`int`) v0 @kind l2i;
  #L4b85c2.  v0:= v2.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.mask` @type ^`int`;
  #L4b85c6.  v0:= v0 ^& v1 @kind int;
  #L4b85c8.  call temp:= `get`(v2, v0) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4b85ce.  v0:= temp @kind object;
  #L4b85d0.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v8 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4b85e4.  v0:= v8.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b85e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b85ee.  v0:= temp @kind wide;
  #L4b85f0.  v2:= (`int`) v0 @kind l2i;
  #L4b85f2.  v3:= v8.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.mask` @type ^`int`;
  #L4b85f6.  v2:= v2 ^& v3 @kind int;
  #L4b85f8.  call temp:= `get`(v8, v2) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4b85fe.  v3:= temp @kind object;
  #L4b8600.  v4:= 0I;
  #L4b8602.  if v3 != 0 then goto L4b8608;
  #L4b8606.  return v4 @kind object;
  #L4b8608.  v5:= v8.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b860c.  v6:= 1L;
  #L4b8610.  v0:= v0 + v6 @kind long;
  #L4b8612.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4b8618.  call `lazySet`(v8, v2, v4) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4b861e.  return v3 @kind object;
}
procedure `java.lang.Object` `remove`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.remove:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8630.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b8634.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b863a.  throw v0;
}
procedure `boolean` `remove`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b84fc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b8500.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b8506.  throw v1;
}
procedure `boolean` `removeAll`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b8518.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b851c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b8522.  throw v1;
}
procedure `boolean` `retainAll`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4b8534.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b8538.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b853e.  throw v1;
}
procedure `int` `size`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v7 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b8550.  v0:= v7.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b8554.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b855a.  v0:= temp @kind wide;
  #L4b855c.  v2:= v7.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b8560.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b8566.  v2:= temp @kind wide;
  #L4b8568.  v4:= v7.`rx.internal.util.atomic.SpscExactAtomicArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b856c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b8572.  v4:= temp @kind wide;
  #L4b8574.  v6:= lcmp(v0, v4);
  #L4b8578.  if v6 != 0 then goto L4b8582;
  #L4b857c.  v2:= v2 - v4 @kind long;
  #L4b857e.  v0:= (`int`) v2 @kind l2i;
  #L4b8580.  return v0;
  #L4b8582.  v0:= v4 @kind wide;
  #L4b8584.  goto L4b855c;
}
procedure `java.lang.Object`[] `toArray`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b864c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b8650.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b8656.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`rx.internal.util.atomic.SpscExactAtomicArrayQueue` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lrx/internal/util/atomic/SpscExactAtomicArrayQueue;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L4b8668.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b866c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b8672.  throw v1;
}
