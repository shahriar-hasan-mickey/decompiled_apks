record `rx.internal.util.atomic.BaseLinkedAtomicQueue` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractQueue` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.util.atomic.BaseLinkedAtomicQueue.consumerNode` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.util.atomic.BaseLinkedAtomicQueue.producerNode` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b7f00.  call `<init>`(v1) @signature `Ljava/util/AbstractQueue;.<init>:()V` @kind direct;
  #L4b7f06.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b7f0a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b7f10.  v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.producerNode` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4b7f14.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b7f18.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b7f1e.  v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.consumerNode` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4b7f22.  return @kind void;
}
procedure `boolean` `isEmpty`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v2 @kind this) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4b7dbc.  call temp:= `lvConsumerNode`(v2) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.lvConsumerNode:()Lrx/internal/util/atomic/LinkedQueueNode;` @kind virtual;
  #L4b7dc2.  v0:= temp @kind object;
  #L4b7dc4.  call temp:= `lvProducerNode`(v2) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.lvProducerNode:()Lrx/internal/util/atomic/LinkedQueueNode;` @kind virtual;
  #L4b7dca.  v1:= temp @kind object;
  #L4b7dcc.  if v0 != v1 then goto L4b7dd4;
  #L4b7dd0.  v0:= 1I;
  #L4b7dd2.  goto L4b7dd6;
  #L4b7dd4.  v0:= 0I;
  #L4b7dd6.  return v0;
}
procedure `java.util.Iterator` `iterator`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b7e30.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b7e34.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b7e3a.  throw v0;
}
procedure `rx.internal.util.atomic.LinkedQueueNode` `lpConsumerNode`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.lpConsumerNode:()Lrx/internal/util/atomic/LinkedQueueNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4b7e4c.  v0:= v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.consumerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7e50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7e56.  v0:= temp @kind object;
  #L4b7e58.  v0:= (`rx.internal.util.atomic.LinkedQueueNode`) v0 @kind object;
  #L4b7e5c.  return v0 @kind object;
}
procedure `rx.internal.util.atomic.LinkedQueueNode` `lpProducerNode`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.lpProducerNode:()Lrx/internal/util/atomic/LinkedQueueNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4b7e70.  v0:= v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.producerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7e74.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7e7a.  v0:= temp @kind object;
  #L4b7e7c.  v0:= (`rx.internal.util.atomic.LinkedQueueNode`) v0 @kind object;
  #L4b7e80.  return v0 @kind object;
}
procedure `rx.internal.util.atomic.LinkedQueueNode` `lvConsumerNode`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.lvConsumerNode:()Lrx/internal/util/atomic/LinkedQueueNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4b7e94.  v0:= v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.consumerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7e98.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7e9e.  v0:= temp @kind object;
  #L4b7ea0.  v0:= (`rx.internal.util.atomic.LinkedQueueNode`) v0 @kind object;
  #L4b7ea4.  return v0 @kind object;
}
procedure `rx.internal.util.atomic.LinkedQueueNode` `lvProducerNode`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.lvProducerNode:()Lrx/internal/util/atomic/LinkedQueueNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4b7eb8.  v0:= v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.producerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7ebc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7ec2.  v0:= temp @kind object;
  #L4b7ec4.  v0:= (`rx.internal.util.atomic.LinkedQueueNode`) v0 @kind object;
  #L4b7ec8.  return v0 @kind object;
}
procedure `int` `size`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v4 @kind this) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b7de8.  call temp:= `lvConsumerNode`(v4) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.lvConsumerNode:()Lrx/internal/util/atomic/LinkedQueueNode;` @kind virtual;
  #L4b7dee.  v0:= temp @kind object;
  #L4b7df0.  call temp:= `lvProducerNode`(v4) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.lvProducerNode:()Lrx/internal/util/atomic/LinkedQueueNode;` @kind virtual;
  #L4b7df6.  v1:= temp @kind object;
  #L4b7df8.  v2:= 0I;
  #L4b7dfa.  if v0 == v1 then goto L4b7e1e;
  #L4b7dfe.  v3:= 2147483647I;
  #L4b7e04.  if v2 >= v3 then goto L4b7e1e;
  #L4b7e08.  call temp:= `lvNext`(v0) @signature `Lrx/internal/util/atomic/LinkedQueueNode;.lvNext:()Lrx/internal/util/atomic/LinkedQueueNode;` @kind virtual;
  #L4b7e0e.  v3:= temp @kind object;
  #L4b7e10.  if v3 != 0 then goto L4b7e16;
  #L4b7e14.  goto L4b7e08;
  #L4b7e16.  v2:= v2 + 1;
  #L4b7e1a.  v0:= v3 @kind object;
  #L4b7e1c.  goto L4b7dfa;
  #L4b7e1e.  return v2;
}
procedure `void` `spConsumerNode`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this, `rx.internal.util.atomic.LinkedQueueNode` v2 @kind object) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.spConsumerNode:(Lrx/internal/util/atomic/LinkedQueueNode;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4b7f34.  v0:= v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.consumerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7f38.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4b7f3e.  return @kind void;
}
procedure `void` `spProducerNode`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this, `rx.internal.util.atomic.LinkedQueueNode` v2 @kind object) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.spProducerNode:(Lrx/internal/util/atomic/LinkedQueueNode;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4b7f50.  v0:= v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.producerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7f54.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4b7f5a.  return @kind void;
}
procedure `rx.internal.util.atomic.LinkedQueueNode` `xchgProducerNode`(`rx.internal.util.atomic.BaseLinkedAtomicQueue` v1 @kind this, `rx.internal.util.atomic.LinkedQueueNode` v2 @kind object) @signature `Lrx/internal/util/atomic/BaseLinkedAtomicQueue;.xchgProducerNode:(Lrx/internal/util/atomic/LinkedQueueNode;)Lrx/internal/util/atomic/LinkedQueueNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4b7edc.  v0:= v1.`rx.internal.util.atomic.BaseLinkedAtomicQueue.producerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7ee0.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b7ee6.  v2:= temp @kind object;
  #L4b7ee8.  v2:= (`rx.internal.util.atomic.LinkedQueueNode`) v2 @kind object;
  #L4b7eec.  return v2 @kind object;
}
