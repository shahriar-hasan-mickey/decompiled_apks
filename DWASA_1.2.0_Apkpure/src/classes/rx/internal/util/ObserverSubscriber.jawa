record `rx.internal.util.ObserverSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Subscriber` @kind class {
  `rx.Observer` `rx.internal.util.ObserverSubscriber.observer` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.util.ObserverSubscriber` v0 @kind this, `rx.Observer` v1 @kind object) @signature `Lrx/internal/util/ObserverSubscriber;.<init>:(Lrx/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b5ce0.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4b5ce6.  v0.`rx.internal.util.ObserverSubscriber.observer` @type ^`rx.Observer` := v1 @kind object;
  #L4b5cea.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.util.ObserverSubscriber` v1 @kind this) @signature `Lrx/internal/util/ObserverSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5cfc.  v0:= v1.`rx.internal.util.ObserverSubscriber.observer` @type ^`rx.Observer` @kind object;
  #L4b5d00.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4b5d06.  return @kind void;
}
procedure `void` `onError`(`rx.internal.util.ObserverSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/util/ObserverSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5d18.  v0:= v1.`rx.internal.util.ObserverSubscriber.observer` @type ^`rx.Observer` @kind object;
  #L4b5d1c.  call `onError`(v0, v2) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b5d22.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.util.ObserverSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/util/ObserverSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5d34.  v0:= v1.`rx.internal.util.ObserverSubscriber.observer` @type ^`rx.Observer` @kind object;
  #L4b5d38.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b5d3e.  return @kind void;
}
