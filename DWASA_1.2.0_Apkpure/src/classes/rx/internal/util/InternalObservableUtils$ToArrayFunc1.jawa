record `rx.internal.util.InternalObservableUtils$ToArrayFunc1` @kind class @AccessFlag FINAL extends `rx.functions.Func1` @kind interface {
}
procedure `void` `<init>`(`rx.internal.util.InternalObservableUtils$ToArrayFunc1` v0 @kind this) @signature `Lrx/internal/util/InternalObservableUtils$ToArrayFunc1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b5684.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b568a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.util.InternalObservableUtils$ToArrayFunc1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/InternalObservableUtils$ToArrayFunc1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b5638.  v1:= (`java.util.List`) v1 @kind object;
  #L4b563c.  call temp:= `call`(v0, v1) @signature `Lrx/internal/util/InternalObservableUtils$ToArrayFunc1;.call:(Ljava/util/List;)[Lrx/Observable;` @kind virtual;
  #L4b5642.  v1:= temp @kind object;
  #L4b5644.  return v1 @kind object;
}
procedure `rx.Observable`[] `call`(`rx.internal.util.InternalObservableUtils$ToArrayFunc1` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lrx/internal/util/InternalObservableUtils$ToArrayFunc1;.call:(Ljava/util/List;)[Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5658.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4b565e.  v0:= temp;
  #L4b5660.  v0:= new `rx.Observable`[v0];
  #L4b5664.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4b566a.  v2:= temp @kind object;
  #L4b566c.  v2:= (`rx.Observable`[]) v2 @kind object;
  #L4b5670.  return v2 @kind object;
}
