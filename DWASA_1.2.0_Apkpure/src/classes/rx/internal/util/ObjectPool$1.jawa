record `rx.internal.util.ObjectPool$1` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `rx.internal.util.ObjectPool` `rx.internal.util.ObjectPool$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.util.ObjectPool$1` v0 @kind this, `rx.internal.util.ObjectPool` v1 @kind object) @signature `Lrx/internal/util/ObjectPool$1;.<init>:(Lrx/internal/util/ObjectPool;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b5a6c.  v0.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` := v1 @kind object;
  #L4b5a70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b5a76.  return @kind void;
}
procedure `void` `run`(`rx.internal.util.ObjectPool$1` v4 @kind this) @signature `Lrx/internal/util/ObjectPool$1;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b5a88.  v0:= v4.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b5a8c.  v0:= v0.`rx.internal.util.ObjectPool.pool` @type ^`java.util.Queue` @kind object;
  #L4b5a90.  call temp:= `size`(v0) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L4b5a96.  v0:= temp;
  #L4b5a98.  v1:= v4.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b5a9c.  v1:= v1.`rx.internal.util.ObjectPool.minSize` @type ^`int`;
  #L4b5aa0.  v2:= 0I;
  #L4b5aa2.  if v0 >= v1 then goto L4b5ad4;
  #L4b5aa6.  v1:= v4.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b5aaa.  v1:= v1.`rx.internal.util.ObjectPool.maxSize` @type ^`int`;
  #L4b5aae.  v1:= v1 - v0 @kind int;
  #L4b5ab0.  if v2 >= v1 then goto L4b5b02;
  #L4b5ab4.  v0:= v4.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b5ab8.  v0:= v0.`rx.internal.util.ObjectPool.pool` @type ^`java.util.Queue` @kind object;
  #L4b5abc.  v3:= v4.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b5ac0.  call temp:= `createObject`(v3) @signature `Lrx/internal/util/ObjectPool;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L4b5ac6.  v3:= temp @kind object;
  #L4b5ac8.  call temp:= `add`(v0, v3) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b5ace.  v2:= v2 + 1;
  #L4b5ad2.  goto L4b5ab0;
  #L4b5ad4.  v1:= v4.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b5ad8.  v1:= v1.`rx.internal.util.ObjectPool.maxSize` @type ^`int`;
  #L4b5adc.  if v0 <= v1 then goto L4b5b02;
  #L4b5ae0.  v1:= v4.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b5ae4.  v1:= v1.`rx.internal.util.ObjectPool.maxSize` @type ^`int`;
  #L4b5ae8.  v0:= v0 - v1 @kind int;
  #L4b5aea.  if v2 >= v0 then goto L4b5b02;
  #L4b5aee.  v1:= v4.`rx.internal.util.ObjectPool$1.this$0` @type ^`rx.internal.util.ObjectPool` @kind object;
  #L4b5af2.  v1:= v1.`rx.internal.util.ObjectPool.pool` @type ^`java.util.Queue` @kind object;
  #L4b5af6.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b5afc.  v2:= v2 + 1;
  #L4b5b00.  goto L4b5aea;
  #L4b5b02.  return @kind void;
}
