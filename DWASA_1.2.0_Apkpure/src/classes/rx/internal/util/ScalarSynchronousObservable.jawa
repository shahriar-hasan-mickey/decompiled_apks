record `rx.internal.util.ScalarSynchronousObservable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable` @kind class {
  `java.lang.Object` `rx.internal.util.ScalarSynchronousObservable.t` @AccessFlag FINAL;
}
global `boolean` `@@rx.internal.util.ScalarSynchronousObservable.STRONG_MODE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/util/ScalarSynchronousObservable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b6dc4.  v0:= "rx.just.strong-mode" @kind object;
  #L4b6dc8.  v1:= "false" @kind object;
  #L4b6dcc.  call temp:= `getProperty`(v0, v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4b6dd2.  v0:= temp @kind object;
  #L4b6dd4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;` @kind static;
  #L4b6dda.  v0:= temp @kind object;
  #L4b6ddc.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L4b6de2.  v0:= temp;
  #L4b6de4.  `@@rx.internal.util.ScalarSynchronousObservable.STRONG_MODE` @type ^`boolean` := v0 @kind boolean;
  #L4b6de8.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.util.ScalarSynchronousObservable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable;.<init>:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L4b6dfc.  v0:= new `rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe`;
  #L4b6e00.  call `<init>`(v0, v2) @signature `Lrx/internal/util/ScalarSynchronousObservable$JustOnSubscribe;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4b6e06.  call temp:= `onCreate`(v0) @signature `Lrx/plugins/RxJavaHooks;.onCreate:(Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;` @kind static;
  #L4b6e0c.  v0:= temp @kind object;
  #L4b6e0e.  call `<init>`(v1, v0) @signature `Lrx/Observable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4b6e14.  v1.`rx.internal.util.ScalarSynchronousObservable.t` @type ^`java.lang.Object` := v2 @kind object;
  #L4b6e18.  return @kind void;
}
procedure `rx.internal.util.ScalarSynchronousObservable` `create`(`java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable;.create:(Ljava/lang/Object;)Lrx/internal/util/ScalarSynchronousObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b6da8.  v0:= new `rx.internal.util.ScalarSynchronousObservable`;
  #L4b6dac.  call `<init>`(v0, v1) @signature `Lrx/internal/util/ScalarSynchronousObservable;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4b6db2.  return v0 @kind object;
}
procedure `rx.Producer` `createProducer`(`rx.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable;.createProducer:(Lrx/Subscriber;Ljava/lang/Object;)Lrx/Producer;` @AccessFlag STATIC {
    temp;
    v0;

  #L4b6d78.  v0:= `@@rx.internal.util.ScalarSynchronousObservable.STRONG_MODE` @type ^`boolean` @kind boolean;
  #L4b6d7c.  if v0 == 0 then goto L4b6d8c;
  #L4b6d80.  v0:= new `rx.internal.producers.SingleProducer`;
  #L4b6d84.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/producers/SingleProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L4b6d8a.  return v0 @kind object;
  #L4b6d8c.  v0:= new `rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer`;
  #L4b6d90.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/util/ScalarSynchronousObservable$WeakSingleProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L4b6d96.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`rx.internal.util.ScalarSynchronousObservable` v1 @kind this) @signature `Lrx/internal/util/ScalarSynchronousObservable;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6cf0.  v0:= v1.`rx.internal.util.ScalarSynchronousObservable.t` @type ^`java.lang.Object` @kind object;
  #L4b6cf4.  return v0 @kind object;
}
procedure `rx.Observable` `scalarFlatMap`(`rx.internal.util.ScalarSynchronousObservable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6d08.  v0:= new `rx.internal.util.ScalarSynchronousObservable$3`;
  #L4b6d0c.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/util/ScalarSynchronousObservable$3;.<init>:(Lrx/internal/util/ScalarSynchronousObservable;Lrx/functions/Func1;)V` @kind direct;
  #L4b6d12.  call temp:= `create`(v0) @signature `Lrx/internal/util/ScalarSynchronousObservable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L4b6d18.  v2:= temp @kind object;
  #L4b6d1a.  return v2 @kind object;
}
procedure `rx.Observable` `scalarScheduleOn`(`rx.internal.util.ScalarSynchronousObservable` v2 @kind this, `rx.Scheduler` v3 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarScheduleOn:(Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b6d2c.  v0:= instanceof @variable v3 @type ^`rx.internal.schedulers.EventLoopsScheduler` @kind boolean;
  #L4b6d30.  if v0 == 0 then goto L4b6d44;
  #L4b6d34.  v3:= (`rx.internal.schedulers.EventLoopsScheduler`) v3 @kind object;
  #L4b6d38.  v0:= new `rx.internal.util.ScalarSynchronousObservable$1`;
  #L4b6d3c.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/util/ScalarSynchronousObservable$1;.<init>:(Lrx/internal/util/ScalarSynchronousObservable;Lrx/internal/schedulers/EventLoopsScheduler;)V` @kind direct;
  #L4b6d42.  goto L4b6d4e;
  #L4b6d44.  v0:= new `rx.internal.util.ScalarSynchronousObservable$2`;
  #L4b6d48.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/util/ScalarSynchronousObservable$2;.<init>:(Lrx/internal/util/ScalarSynchronousObservable;Lrx/Scheduler;)V` @kind direct;
  #L4b6d4e.  v3:= new `rx.internal.util.ScalarSynchronousObservable$ScalarAsyncOnSubscribe`;
  #L4b6d52.  v1:= v2.`rx.internal.util.ScalarSynchronousObservable.t` @type ^`java.lang.Object` @kind object;
  #L4b6d56.  call `<init>`(v3, v1, v0) @signature `Lrx/internal/util/ScalarSynchronousObservable$ScalarAsyncOnSubscribe;.<init>:(Ljava/lang/Object;Lrx/functions/Func1;)V` @kind direct;
  #L4b6d5c.  call temp:= `create`(v3) @signature `Lrx/internal/util/ScalarSynchronousObservable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L4b6d62.  v3:= temp @kind object;
  #L4b6d64.  return v3 @kind object;
}
