record `rx.internal.util.ScalarSynchronousObservable$2$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.util.ScalarSynchronousObservable$2` `rx.internal.util.ScalarSynchronousObservable$2$1.this$1` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Action0` `rx.internal.util.ScalarSynchronousObservable$2$1.val$a` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.internal.util.ScalarSynchronousObservable$2$1.val$w` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.util.ScalarSynchronousObservable$2$1` v0 @kind this, `rx.internal.util.ScalarSynchronousObservable$2` v1 @kind object, `rx.functions.Action0` v2 @kind object, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable$2$1;.<init>:(Lrx/internal/util/ScalarSynchronousObservable$2;Lrx/functions/Action0;Lrx/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b68a0.  v0.`rx.internal.util.ScalarSynchronousObservable$2$1.this$1` @type ^`rx.internal.util.ScalarSynchronousObservable$2` := v1 @kind object;
  #L4b68a4.  v0.`rx.internal.util.ScalarSynchronousObservable$2$1.val$a` @type ^`rx.functions.Action0` := v2 @kind object;
  #L4b68a8.  v0.`rx.internal.util.ScalarSynchronousObservable$2$1.val$w` @type ^`rx.Scheduler$Worker` := v3 @kind object;
  #L4b68ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b68b2.  return @kind void;
}
procedure `void` `call`(`rx.internal.util.ScalarSynchronousObservable$2$1` v2 @kind this) @signature `Lrx/internal/util/ScalarSynchronousObservable$2$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b68c4.  v0:= v2.`rx.internal.util.ScalarSynchronousObservable$2$1.val$a` @type ^`rx.functions.Action0` @kind object;
  #L4b68c8.  call `call`(v0) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L4b68ce.  v0:= v2.`rx.internal.util.ScalarSynchronousObservable$2$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4b68d2.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4b68d8.  return @kind void;
  #L4b68da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b68dc.  v1:= v2.`rx.internal.util.ScalarSynchronousObservable$2$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L4b68e0.  call `unsubscribe`(v1) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4b68e6.  throw v0;
  catch `java.lang.Throwable` @[L4b68c4..L4b68ce] goto L4b68da;
}
