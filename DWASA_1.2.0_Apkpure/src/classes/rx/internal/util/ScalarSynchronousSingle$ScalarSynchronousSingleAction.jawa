record `rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction` @kind class @AccessFlag FINAL extends `rx.functions.Action0` @kind interface {
  `rx.SingleSubscriber` `rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction.subscriber` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction.value` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction` v0 @kind this, `rx.SingleSubscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/util/ScalarSynchronousSingle$ScalarSynchronousSingleAction;.<init>:(Lrx/SingleSubscriber;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b7050.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b7056.  v0.`rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction.subscriber` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4b705a.  v0.`rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction.value` @type ^`java.lang.Object` := v2 @kind object;
  #L4b705e.  return @kind void;
}
procedure `void` `call`(`rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction` v2 @kind this) @signature `Lrx/internal/util/ScalarSynchronousSingle$ScalarSynchronousSingleAction;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7070.  v0:= v2.`rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction.subscriber` @type ^`rx.SingleSubscriber` @kind object;
  #L4b7074.  v1:= v2.`rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction.value` @type ^`java.lang.Object` @kind object;
  #L4b7078.  call `onSuccess`(v0, v1) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4b707e.  goto L4b708c;
  #L4b7080.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7082.  v1:= v2.`rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction.subscriber` @type ^`rx.SingleSubscriber` @kind object;
  #L4b7086.  call `onError`(v1, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b708c.  return @kind void;
  catch `java.lang.Throwable` @[L4b7070..L4b707e] goto L4b7080;
}
