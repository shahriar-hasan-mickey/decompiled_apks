record `rx.internal.util.ScalarSynchronousObservable$3` @kind class @AccessFlag  extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.internal.util.ScalarSynchronousObservable` `rx.internal.util.ScalarSynchronousObservable$3.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Func1` `rx.internal.util.ScalarSynchronousObservable$3.val$func` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.util.ScalarSynchronousObservable$3` v0 @kind this, `rx.internal.util.ScalarSynchronousObservable` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable$3;.<init>:(Lrx/internal/util/ScalarSynchronousObservable;Lrx/functions/Func1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b6974.  v0.`rx.internal.util.ScalarSynchronousObservable$3.this$0` @type ^`rx.internal.util.ScalarSynchronousObservable` := v1 @kind object;
  #L4b6978.  v0.`rx.internal.util.ScalarSynchronousObservable$3.val$func` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4b697c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b6982.  return @kind void;
}
procedure `void` `call`(`rx.internal.util.ScalarSynchronousObservable$3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable$3;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b6994.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4b6998.  call `call`(v0, v1) @signature `Lrx/internal/util/ScalarSynchronousObservable$3;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4b699e.  return @kind void;
}
procedure `void` `call`(`rx.internal.util.ScalarSynchronousObservable$3` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/util/ScalarSynchronousObservable$3;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b69b0.  v0:= v2.`rx.internal.util.ScalarSynchronousObservable$3.val$func` @type ^`rx.functions.Func1` @kind object;
  #L4b69b4.  v1:= v2.`rx.internal.util.ScalarSynchronousObservable$3.this$0` @type ^`rx.internal.util.ScalarSynchronousObservable` @kind object;
  #L4b69b8.  v1:= v1.`rx.internal.util.ScalarSynchronousObservable.t` @type ^`java.lang.Object` @kind object;
  #L4b69bc.  call temp:= `call`(v0, v1) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b69c2.  v0:= temp @kind object;
  #L4b69c4.  v0:= (`rx.Observable`) v0 @kind object;
  #L4b69c8.  v1:= instanceof @variable v0 @type ^`rx.internal.util.ScalarSynchronousObservable` @kind boolean;
  #L4b69cc.  if v1 == 0 then goto L4b69e8;
  #L4b69d0.  v0:= (`rx.internal.util.ScalarSynchronousObservable`) v0 @kind object;
  #L4b69d4.  v0:= v0.`rx.internal.util.ScalarSynchronousObservable.t` @type ^`java.lang.Object` @kind object;
  #L4b69d8.  call temp:= `createProducer`(v3, v0) @signature `Lrx/internal/util/ScalarSynchronousObservable;.createProducer:(Lrx/Subscriber;Ljava/lang/Object;)Lrx/Producer;` @kind static;
  #L4b69de.  v0:= temp @kind object;
  #L4b69e0.  call `setProducer`(v3, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4b69e6.  goto L4b69f6;
  #L4b69e8.  call temp:= `wrap`(v3) @signature `Lrx/observers/Subscribers;.wrap:(Lrx/Subscriber;)Lrx/Subscriber;` @kind static;
  #L4b69ee.  v3:= temp @kind object;
  #L4b69f0.  call temp:= `unsafeSubscribe`(v0, v3) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4b69f6.  return @kind void;
}
