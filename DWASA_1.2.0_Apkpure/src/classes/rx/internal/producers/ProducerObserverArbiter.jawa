record `rx.internal.producers.ProducerObserverArbiter` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Producer` @kind interface, `rx.Observer` @kind interface {
  `rx.Subscriber` `rx.internal.producers.ProducerObserverArbiter.child` @AccessFlag FINAL;
  `rx.Producer` `rx.internal.producers.ProducerObserverArbiter.currentProducer` @AccessFlag ;
  `boolean` `rx.internal.producers.ProducerObserverArbiter.emitting` @AccessFlag ;
  `boolean` `rx.internal.producers.ProducerObserverArbiter.hasError` @AccessFlag VOLATILE;
  `rx.Producer` `rx.internal.producers.ProducerObserverArbiter.missedProducer` @AccessFlag ;
  `long` `rx.internal.producers.ProducerObserverArbiter.missedRequested` @AccessFlag ;
  `java.lang.Object` `rx.internal.producers.ProducerObserverArbiter.missedTerminal` @AccessFlag ;
  `java.util.List` `rx.internal.producers.ProducerObserverArbiter.queue` @AccessFlag ;
  `long` `rx.internal.producers.ProducerObserverArbiter.requested` @AccessFlag ;
}
global `rx.Producer` `@@rx.internal.producers.ProducerObserverArbiter.NULL_PRODUCER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/producers/ProducerObserverArbiter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b11c8.  v0:= new `rx.internal.producers.ProducerObserverArbiter$1`;
  #L4b11cc.  call `<init>`(v0) @signature `Lrx/internal/producers/ProducerObserverArbiter$1;.<init>:()V` @kind direct;
  #L4b11d2.  `@@rx.internal.producers.ProducerObserverArbiter.NULL_PRODUCER` @type ^`rx.Producer` := v0 @kind object;
  #L4b11d6.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.producers.ProducerObserverArbiter` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/producers/ProducerObserverArbiter;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b11e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b11ee.  v0.`rx.internal.producers.ProducerObserverArbiter.child` @type ^`rx.Subscriber` := v1 @kind object;
  #L4b11f2.  return @kind void;
}
procedure `void` `emitLoop`(`rx.internal.producers.ProducerObserverArbiter` v18 @kind this) @signature `Lrx/internal/producers/ProducerObserverArbiter;.emitLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4b1204.  v1:= v18 @kind object;
  #L4b1208.  v2:= v1.`rx.internal.producers.ProducerObserverArbiter.child` @type ^`rx.Subscriber` @kind object;
  #L4b120c.  v0:= 0I;
  #L4b120e.  v3:= 0L;
  #L4b1212.  v7:= v0 @kind object;
  #L4b1214.  v5:= v3 @kind wide;
  #L4b1216.  @monitorenter v18
  #L4b1218.  v8:= v1.`rx.internal.producers.ProducerObserverArbiter.missedRequested` @type ^`long` @kind wide;
  #L4b121c.  v10:= v1.`rx.internal.producers.ProducerObserverArbiter.missedProducer` @type ^`rx.Producer` @kind object;
  #L4b1220.  v11:= v1.`rx.internal.producers.ProducerObserverArbiter.missedTerminal` @type ^`java.lang.Object` @kind object;
  #L4b1224.  v12:= v1.`rx.internal.producers.ProducerObserverArbiter.queue` @type ^`java.util.List` @kind object;
  #L4b1228.  v13:= 1I;
  #L4b122a.  v14:= 0I;
  #L4b122c.  v15:= lcmp(v8, v3);
  #L4b1230.  if v15 != 0 then goto L4b1248;
  #L4b1234.  if v10 != 0 then goto L4b1248;
  #L4b1238.  if v12 != 0 then goto L4b1248;
  #L4b123c.  if v11 != 0 then goto L4b1248;
  #L4b1240.  v1.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v14 @kind boolean;
  #L4b1244.  v15:= 1I;
  #L4b1246.  goto L4b125a;
  #L4b1248.  v1.`rx.internal.producers.ProducerObserverArbiter.missedRequested` @type ^`long` := v3 @kind wide;
  #L4b124c.  v1.`rx.internal.producers.ProducerObserverArbiter.missedProducer` @type ^`rx.Producer` := v0 @kind object;
  #L4b1250.  v1.`rx.internal.producers.ProducerObserverArbiter.queue` @type ^`java.util.List` := v0 @kind object;
  #L4b1254.  v1.`rx.internal.producers.ProducerObserverArbiter.missedTerminal` @type ^`java.lang.Object` := v0 @kind object;
  #L4b1258.  v15:= 0I;
  #L4b125a.  @monitorexit v18
  #L4b125c.  if v15 == 0 then goto L4b1274;
  #L4b1260.  v0:= lcmp(v5, v3);
  #L4b1264.  if v0 == 0 then goto L4b1272;
  #L4b1268.  if v7 == 0 then goto L4b1272;
  #L4b126c.  call `request`(v7, v5) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4b1272.  return @kind void;
  #L4b1274.  if v12 == 0 then goto L4b1288;
  #L4b1278.  call temp:= `isEmpty`(v12) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4b127e.  v15:= temp;
  #L4b1280.  if v15 == 0 then goto L4b1286;
  #L4b1284.  goto L4b1288;
  #L4b1286.  v13:= 0I;
  #L4b1288.  if v11 == 0 then goto L4b12ac;
  #L4b128c.  v14:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4b1290.  if v11 == v14 then goto L4b12a0;
  #L4b1294.  v11:= (`java.lang.Throwable`) v11 @kind object;
  #L4b1298.  call `onError`(v2, v11) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b129e.  return @kind void;
  #L4b12a0.  if v13 == 0 then goto L4b12ac;
  #L4b12a4.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4b12aa.  return @kind void;
  #L4b12ac.  if v12 == 0 then goto L4b1306;
  #L4b12b0.  call temp:= `iterator`(v12) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b12b6.  v11:= temp @kind object;
  #L4b12b8.  call temp:= `hasNext`(v11) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b12be.  v13:= temp;
  #L4b12c0.  if v13 == 0 then goto L4b12f8;
  #L4b12c4.  call temp:= `next`(v11) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b12ca.  v13:= temp @kind object;
  #L4b12cc.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4b12d2.  v14:= temp;
  #L4b12d4.  if v14 == 0 then goto L4b12da;
  #L4b12d8.  return @kind void;
  #L4b12da.  v14:= v1.`rx.internal.producers.ProducerObserverArbiter.hasError` @type ^`boolean` @kind boolean;
  #L4b12de.  if v14 == 0 then goto L4b12e4;
  #L4b12e2.  goto L4b1216;
  #L4b12e4.  call `onNext`(v2, v13) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4b12ea.  goto L4b12b8;
  #L4b12ec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b12ee.  v3:= v0 @kind object;
  #L4b12f0.  call `throwOrReport`(v3, v2, v13) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4b12f6.  return @kind void;
  #L4b12f8.  call temp:= `size`(v12) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4b12fe.  v11:= temp;
  #L4b1300.  v11:= (`long`) v11 @kind i2l;
  #L4b1302.  v11:= v11 + v3 @kind long;
  #L4b1304.  goto L4b1308;
  #L4b1306.  v11:= v3 @kind wide;
  #L4b1308.  v13:= v1.`rx.internal.producers.ProducerObserverArbiter.requested` @type ^`long` @kind wide;
  #L4b130c.  v15:= 9223372036854775807L;
  #L4b1316.  v17:= lcmp(v13, v15);
  #L4b131a.  if v17 == 0 then goto L4b1362;
  #L4b131e.  v17:= lcmp(v8, v3);
  #L4b1322.  if v17 == 0 then goto L4b1332;
  #L4b1326.  v13:= v13 + v8 @kind long;
  #L4b1328.  v17:= lcmp(v13, v3);
  #L4b132c.  if v17 >= 0 then goto L4b1332;
  #L4b1330.  v13:= v15 @kind wide;
  #L4b1332.  v17:= lcmp(v11, v3);
  #L4b1336.  if v17 == 0 then goto L4b135e;
  #L4b133a.  v17:= lcmp(v13, v15);
  #L4b133e.  if v17 == 0 then goto L4b135e;
  #L4b1342.  v13:= v13 - v11 @kind long;
  #L4b1344.  v11:= lcmp(v13, v3);
  #L4b1348.  if v11 < 0 then goto L4b134e;
  #L4b134c.  goto L4b135e;
  #L4b134e.  v0:= new `java.lang.IllegalStateException`;
  #L4b1352.  v2:= "More produced than requested" @kind object;
  #L4b1356.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b135c.  throw v0;
  #L4b135e.  v1.`rx.internal.producers.ProducerObserverArbiter.requested` @type ^`long` := v13 @kind wide;
  #L4b1362.  if v10 == 0 then goto L4b138c;
  #L4b1366.  v8:= `@@rx.internal.producers.ProducerObserverArbiter.NULL_PRODUCER` @type ^`rx.Producer` @kind object;
  #L4b136a.  if v10 != v8 then goto L4b1376;
  #L4b136e.  v1.`rx.internal.producers.ProducerObserverArbiter.currentProducer` @type ^`rx.Producer` := v0 @kind object;
  #L4b1372.  goto L4b1216;
  #L4b1376.  v1.`rx.internal.producers.ProducerObserverArbiter.currentProducer` @type ^`rx.Producer` := v10 @kind object;
  #L4b137a.  v8:= lcmp(v13, v3);
  #L4b137e.  if v8 == 0 then goto L4b1216;
  #L4b1382.  call temp:= `addCap`(v5, v13) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L4b1388.  v5:= temp @kind wide;
  #L4b138a.  goto L4b13a4;
  #L4b138c.  v10:= v1.`rx.internal.producers.ProducerObserverArbiter.currentProducer` @type ^`rx.Producer` @kind object;
  #L4b1390.  if v10 == 0 then goto L4b1216;
  #L4b1394.  v11:= lcmp(v8, v3);
  #L4b1398.  if v11 == 0 then goto L4b1216;
  #L4b139c.  call temp:= `addCap`(v5, v8) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L4b13a2.  v5:= temp @kind wide;
  #L4b13a4.  v7:= v10 @kind object;
  #L4b13a6.  goto L4b1216;
  #L4b13aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b13ac.  @monitorexit v18
  #L4b13ae.  goto L4b13b2;
  #L4b13b0.  throw v0;
  #L4b13b2.  goto L4b13b0;
  catch `java.lang.Throwable` @[L4b1218..L4b125c] goto L4b13aa;
  catch `java.lang.Throwable` @[L4b12e4..L4b12ea] goto L4b12ec;
  catch `java.lang.Throwable` @[L4b13ac..L4b13ae] goto L4b13aa;
}
procedure `void` `onCompleted`(`rx.internal.producers.ProducerObserverArbiter` v2 @kind this) @signature `Lrx/internal/producers/ProducerObserverArbiter;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b13e4.  @monitorenter v2
  #L4b13e6.  v0:= v2.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` @kind boolean;
  #L4b13ea.  v1:= 1I;
  #L4b13ec.  if v0 == 0 then goto L4b1400;
  #L4b13f0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4b13f6.  v0:= temp @kind object;
  #L4b13f8.  v2.`rx.internal.producers.ProducerObserverArbiter.missedTerminal` @type ^`java.lang.Object` := v0 @kind object;
  #L4b13fc.  @monitorexit v2
  #L4b13fe.  return @kind void;
  #L4b1400.  v2.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4b1404.  @monitorexit v2
  #L4b1406.  v0:= v2.`rx.internal.producers.ProducerObserverArbiter.child` @type ^`rx.Subscriber` @kind object;
  #L4b140a.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4b1410.  return @kind void;
  #L4b1412.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1414.  @monitorexit v2
  #L4b1416.  throw v0;
  catch `java.lang.Throwable` @[L4b13e6..L4b1406] goto L4b1412;
  catch `java.lang.Throwable` @[L4b1414..L4b1416] goto L4b1412;
}
procedure `void` `onError`(`rx.internal.producers.ProducerObserverArbiter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/producers/ProducerObserverArbiter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b143c.  @monitorenter v2
  #L4b143e.  v0:= v2.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` @kind boolean;
  #L4b1442.  v1:= 1I;
  #L4b1444.  if v0 == 0 then goto L4b1450;
  #L4b1448.  v2.`rx.internal.producers.ProducerObserverArbiter.missedTerminal` @type ^`java.lang.Object` := v3 @kind object;
  #L4b144c.  v0:= 0I;
  #L4b144e.  goto L4b1456;
  #L4b1450.  v2.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4b1454.  v0:= 1I;
  #L4b1456.  @monitorexit v2
  #L4b1458.  if v0 == 0 then goto L4b1468;
  #L4b145c.  v0:= v2.`rx.internal.producers.ProducerObserverArbiter.child` @type ^`rx.Subscriber` @kind object;
  #L4b1460.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b1466.  goto L4b146c;
  #L4b1468.  v2.`rx.internal.producers.ProducerObserverArbiter.hasError` @type ^`boolean` := v1 @kind boolean;
  #L4b146c.  return @kind void;
  #L4b146e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1470.  @monitorexit v2
  #L4b1472.  throw v3;
  catch `java.lang.Throwable` @[L4b143e..L4b1458] goto L4b146e;
  catch `java.lang.Throwable` @[L4b1470..L4b1472] goto L4b146e;
}
procedure `void` `onNext`(`rx.internal.producers.ProducerObserverArbiter` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/producers/ProducerObserverArbiter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b1498.  @monitorenter v4
  #L4b149a.  v0:= v4.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` @kind boolean;
  #L4b149e.  if v0 == 0 then goto L4b14c4;
  #L4b14a2.  v0:= v4.`rx.internal.producers.ProducerObserverArbiter.queue` @type ^`java.util.List` @kind object;
  #L4b14a6.  if v0 != 0 then goto L4b14ba;
  #L4b14aa.  v0:= new `java.util.ArrayList`;
  #L4b14ae.  v1:= 4I;
  #L4b14b0.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4b14b6.  v4.`rx.internal.producers.ProducerObserverArbiter.queue` @type ^`java.util.List` := v0 @kind object;
  #L4b14ba.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b14c0.  @monitorexit v4
  #L4b14c2.  return @kind void;
  #L4b14c4.  v0:= 1I;
  #L4b14c6.  v4.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4b14ca.  @monitorexit v4
  #L4b14cc.  v0:= v4.`rx.internal.producers.ProducerObserverArbiter.child` @type ^`rx.Subscriber` @kind object;
  #L4b14d0.  call `onNext`(v0, v5) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4b14d6.  v0:= v4.`rx.internal.producers.ProducerObserverArbiter.requested` @type ^`long` @kind wide;
  #L4b14da.  v2:= 9223372036854775807L;
  #L4b14e4.  v5:= lcmp(v0, v2);
  #L4b14e8.  if v5 == 0 then goto L4b14f6;
  #L4b14ec.  v2:= 1L;
  #L4b14f0.  v0:= v0 - v2 @kind long;
  #L4b14f2.  v4.`rx.internal.producers.ProducerObserverArbiter.requested` @type ^`long` := v0 @kind wide;
  #L4b14f6.  call `emitLoop`(v4) @signature `Lrx/internal/producers/ProducerObserverArbiter;.emitLoop:()V` @kind virtual;
  #L4b14fc.  return @kind void;
  #L4b14fe.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1500.  @monitorenter v4
  #L4b1502.  v0:= 0I;
  #L4b1504.  v4.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4b1508.  @monitorexit v4
  #L4b150a.  throw v5;
  #L4b150c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b150e.  @monitorexit v4
  #L4b1510.  throw v5;
  #L4b1512.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1514.  @monitorexit v4
  #L4b1516.  throw v5;
  catch `java.lang.Throwable` @[L4b149a..L4b14cc] goto L4b1512;
  catch `java.lang.Throwable` @[L4b14cc..L4b14fc] goto L4b14fe;
  catch `java.lang.Throwable` @[L4b1504..L4b150a] goto L4b150c;
  catch `java.lang.Throwable` @[L4b150e..L4b1510] goto L4b150c;
  catch `java.lang.Throwable` @[L4b1514..L4b1516] goto L4b1512;
}
procedure `void` `request`(`rx.internal.producers.ProducerObserverArbiter` v6 @kind this, `long` v7 ) @signature `Lrx/internal/producers/ProducerObserverArbiter;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b1558.  v0:= 0L;
  #L4b155c.  v2:= lcmp(v7, v0);
  #L4b1560.  if v2 < 0 then goto L4b15da;
  #L4b1564.  v2:= lcmp(v7, v0);
  #L4b1568.  if v2 != 0 then goto L4b156e;
  #L4b156c.  return @kind void;
  #L4b156e.  @monitorenter v6
  #L4b1570.  v2:= v6.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` @kind boolean;
  #L4b1574.  if v2 == 0 then goto L4b1586;
  #L4b1578.  v0:= v6.`rx.internal.producers.ProducerObserverArbiter.missedRequested` @type ^`long` @kind wide;
  #L4b157c.  v0:= v0 + v7 @kind long;
  #L4b157e.  v6.`rx.internal.producers.ProducerObserverArbiter.missedRequested` @type ^`long` := v0 @kind wide;
  #L4b1582.  @monitorexit v6
  #L4b1584.  return @kind void;
  #L4b1586.  v2:= 1I;
  #L4b1588.  v6.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v2 @kind boolean;
  #L4b158c.  @monitorexit v6
  #L4b158e.  v2:= v6.`rx.internal.producers.ProducerObserverArbiter.currentProducer` @type ^`rx.Producer` @kind object;
  #L4b1592.  v3:= v6.`rx.internal.producers.ProducerObserverArbiter.requested` @type ^`long` @kind wide;
  #L4b1596.  v3:= v3 + v7 @kind long;
  #L4b1598.  v5:= lcmp(v3, v0);
  #L4b159c.  if v5 >= 0 then goto L4b15aa;
  #L4b15a0.  v3:= 9223372036854775807L;
  #L4b15aa.  v6.`rx.internal.producers.ProducerObserverArbiter.requested` @type ^`long` := v3 @kind wide;
  #L4b15ae.  call `emitLoop`(v6) @signature `Lrx/internal/producers/ProducerObserverArbiter;.emitLoop:()V` @kind virtual;
  #L4b15b4.  if v2 == 0 then goto L4b15be;
  #L4b15b8.  call `request`(v2, v7) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4b15be.  return @kind void;
  #L4b15c0.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b15c2.  @monitorenter v6
  #L4b15c4.  v8:= 0I;
  #L4b15c6.  v6.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v8 @kind boolean;
  #L4b15ca.  @monitorexit v6
  #L4b15cc.  throw v7;
  #L4b15ce.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b15d0.  @monitorexit v6
  #L4b15d2.  throw v7;
  #L4b15d4.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b15d6.  @monitorexit v6
  #L4b15d8.  throw v7;
  #L4b15da.  v7:= new `java.lang.IllegalArgumentException`;
  #L4b15de.  v8:= "n >= 0 required" @kind object;
  #L4b15e2.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b15e8.  throw v7;
  catch `java.lang.Throwable` @[L4b1570..L4b158e] goto L4b15d4;
  catch `java.lang.Throwable` @[L4b1592..L4b15b4] goto L4b15c0;
  catch `java.lang.Throwable` @[L4b15c6..L4b15cc] goto L4b15ce;
  catch `java.lang.Throwable` @[L4b15d0..L4b15d2] goto L4b15ce;
  catch `java.lang.Throwable` @[L4b15d6..L4b15d8] goto L4b15d4;
}
procedure `void` `setProducer`(`rx.internal.producers.ProducerObserverArbiter` v5 @kind this, `rx.Producer` v6 @kind object) @signature `Lrx/internal/producers/ProducerObserverArbiter;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b162c.  @monitorenter v5
  #L4b162e.  v0:= v5.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` @kind boolean;
  #L4b1632.  if v0 == 0 then goto L4b1648;
  #L4b1636.  if v6 == 0 then goto L4b163c;
  #L4b163a.  goto L4b1640;
  #L4b163c.  v6:= `@@rx.internal.producers.ProducerObserverArbiter.NULL_PRODUCER` @type ^`rx.Producer` @kind object;
  #L4b1640.  v5.`rx.internal.producers.ProducerObserverArbiter.missedProducer` @type ^`rx.Producer` := v6 @kind object;
  #L4b1644.  @monitorexit v5
  #L4b1646.  return @kind void;
  #L4b1648.  v0:= 1I;
  #L4b164a.  v5.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4b164e.  @monitorexit v5
  #L4b1650.  v5.`rx.internal.producers.ProducerObserverArbiter.currentProducer` @type ^`rx.Producer` := v6 @kind object;
  #L4b1654.  v0:= v5.`rx.internal.producers.ProducerObserverArbiter.requested` @type ^`long` @kind wide;
  #L4b1658.  call `emitLoop`(v5) @signature `Lrx/internal/producers/ProducerObserverArbiter;.emitLoop:()V` @kind virtual;
  #L4b165e.  if v6 == 0 then goto L4b1674;
  #L4b1662.  v2:= 0L;
  #L4b1666.  v4:= lcmp(v0, v2);
  #L4b166a.  if v4 == 0 then goto L4b1674;
  #L4b166e.  call `request`(v6, v0) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4b1674.  return @kind void;
  #L4b1676.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1678.  @monitorenter v5
  #L4b167a.  v0:= 0I;
  #L4b167c.  v5.`rx.internal.producers.ProducerObserverArbiter.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4b1680.  @monitorexit v5
  #L4b1682.  throw v6;
  #L4b1684.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1686.  @monitorexit v5
  #L4b1688.  throw v6;
  #L4b168a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b168c.  @monitorexit v5
  #L4b168e.  throw v6;
  catch `java.lang.Throwable` @[L4b162e..L4b1650] goto L4b168a;
  catch `java.lang.Throwable` @[L4b1658..L4b165e] goto L4b1676;
  catch `java.lang.Throwable` @[L4b167c..L4b1682] goto L4b1684;
  catch `java.lang.Throwable` @[L4b1686..L4b1688] goto L4b1684;
  catch `java.lang.Throwable` @[L4b168c..L4b168e] goto L4b168a;
}
