record `rx.internal.subscriptions.SequentialSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `rx.Subscription` @kind interface {
}
global `long` `@@rx.internal.subscriptions.SequentialSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.subscriptions.SequentialSubscription` v0 @kind this) @signature `Lrx/internal/subscriptions/SequentialSubscription;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b4170.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b4176.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.subscriptions.SequentialSubscription` v0 @kind this, `rx.Subscription` v1 @kind object) @signature `Lrx/internal/subscriptions/SequentialSubscription;.<init>:(Lrx/Subscription;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b4188.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b418e.  call `lazySet`(v0, v1) @signature `Lrx/internal/subscriptions/SequentialSubscription;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4b4194.  return @kind void;
}
procedure `rx.Subscription` `current`(`rx.internal.subscriptions.SequentialSubscription` v2 @kind this) @signature `Lrx/internal/subscriptions/SequentialSubscription;.current:()Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b4140.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind super;
  #L4b4146.  v0:= temp @kind object;
  #L4b4148.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b414c.  v1:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b4150.  if v0 != v1 then goto L4b415c;
  #L4b4154.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L4b415a.  v0:= temp @kind object;
  #L4b415c.  return v0 @kind object;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.subscriptions.SequentialSubscription` v2 @kind this) @signature `Lrx/internal/subscriptions/SequentialSubscription;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3fbc.  call temp:= `get`(v2) @signature `Lrx/internal/subscriptions/SequentialSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3fc2.  v0:= temp @kind object;
  #L4b3fc4.  v1:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b3fc8.  if v0 != v1 then goto L4b3fd0;
  #L4b3fcc.  v0:= 1I;
  #L4b3fce.  goto L4b3fd2;
  #L4b3fd0.  v0:= 0I;
  #L4b3fd2.  return v0;
}
procedure `boolean` `replace`(`rx.internal.subscriptions.SequentialSubscription` v2 @kind this, `rx.Subscription` v3 @kind object) @signature `Lrx/internal/subscriptions/SequentialSubscription;.replace:(Lrx/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3fe4.  call temp:= `get`(v2) @signature `Lrx/internal/subscriptions/SequentialSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3fea.  v0:= temp @kind object;
  #L4b3fec.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b3ff0.  v1:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b3ff4.  if v0 != v1 then goto L4b4006;
  #L4b3ff8.  if v3 == 0 then goto L4b4002;
  #L4b3ffc.  call `unsubscribe`(v3) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b4002.  v3:= 0I;
  #L4b4004.  return v3;
  #L4b4006.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Lrx/internal/subscriptions/SequentialSubscription;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b400c.  v0:= temp;
  #L4b400e.  if v0 == 0 then goto L4b3fe4;
  #L4b4012.  v3:= 1I;
  #L4b4014.  return v3;
}
procedure `boolean` `replaceWeak`(`rx.internal.subscriptions.SequentialSubscription` v4 @kind this, `rx.Subscription` v5 @kind object) @signature `Lrx/internal/subscriptions/SequentialSubscription;.replaceWeak:(Lrx/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b4028.  call temp:= `get`(v4) @signature `Lrx/internal/subscriptions/SequentialSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b402e.  v0:= temp @kind object;
  #L4b4030.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b4034.  v1:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b4038.  v2:= 0I;
  #L4b403a.  if v0 != v1 then goto L4b404a;
  #L4b403e.  if v5 == 0 then goto L4b4048;
  #L4b4042.  call `unsubscribe`(v5) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b4048.  return v2;
  #L4b404a.  call temp:= `compareAndSet`(v4, v0, v5) @signature `Lrx/internal/subscriptions/SequentialSubscription;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4050.  v0:= temp;
  #L4b4052.  v1:= 1I;
  #L4b4054.  if v0 == 0 then goto L4b405a;
  #L4b4058.  return v1;
  #L4b405a.  call temp:= `get`(v4) @signature `Lrx/internal/subscriptions/SequentialSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4060.  v0:= temp @kind object;
  #L4b4062.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b4066.  v3:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b406a.  if v0 != v3 then goto L4b407a;
  #L4b406e.  if v5 == 0 then goto L4b4078;
  #L4b4072.  call `unsubscribe`(v5) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b4078.  return v2;
  #L4b407a.  return v1;
}
procedure `void` `unsubscribe`(`rx.internal.subscriptions.SequentialSubscription` v2 @kind this) @signature `Lrx/internal/subscriptions/SequentialSubscription;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b41a8.  call temp:= `get`(v2) @signature `Lrx/internal/subscriptions/SequentialSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b41ae.  v0:= temp @kind object;
  #L4b41b0.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b41b4.  v1:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b41b8.  if v0 == v1 then goto L4b41de;
  #L4b41bc.  v0:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b41c0.  call temp:= `getAndSet`(v2, v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b41c6.  v0:= temp @kind object;
  #L4b41c8.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b41cc.  if v0 == 0 then goto L4b41de;
  #L4b41d0.  v1:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b41d4.  if v0 == v1 then goto L4b41de;
  #L4b41d8.  call `unsubscribe`(v0) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b41de.  return @kind void;
}
procedure `boolean` `update`(`rx.internal.subscriptions.SequentialSubscription` v2 @kind this, `rx.Subscription` v3 @kind object) @signature `Lrx/internal/subscriptions/SequentialSubscription;.update:(Lrx/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b408c.  call temp:= `get`(v2) @signature `Lrx/internal/subscriptions/SequentialSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4092.  v0:= temp @kind object;
  #L4b4094.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b4098.  v1:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b409c.  if v0 != v1 then goto L4b40ae;
  #L4b40a0.  if v3 == 0 then goto L4b40aa;
  #L4b40a4.  call `unsubscribe`(v3) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b40aa.  v3:= 0I;
  #L4b40ac.  return v3;
  #L4b40ae.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Lrx/internal/subscriptions/SequentialSubscription;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b40b4.  v1:= temp;
  #L4b40b6.  if v1 == 0 then goto L4b408c;
  #L4b40ba.  if v0 == 0 then goto L4b40c4;
  #L4b40be.  call `unsubscribe`(v0) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b40c4.  v3:= 1I;
  #L4b40c6.  return v3;
}
procedure `boolean` `updateWeak`(`rx.internal.subscriptions.SequentialSubscription` v3 @kind this, `rx.Subscription` v4 @kind object) @signature `Lrx/internal/subscriptions/SequentialSubscription;.updateWeak:(Lrx/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b40d8.  call temp:= `get`(v3) @signature `Lrx/internal/subscriptions/SequentialSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b40de.  v0:= temp @kind object;
  #L4b40e0.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b40e4.  v1:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b40e8.  v2:= 0I;
  #L4b40ea.  if v0 != v1 then goto L4b40fa;
  #L4b40ee.  if v4 == 0 then goto L4b40f8;
  #L4b40f2.  call `unsubscribe`(v4) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b40f8.  return v2;
  #L4b40fa.  call temp:= `compareAndSet`(v3, v0, v4) @signature `Lrx/internal/subscriptions/SequentialSubscription;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4100.  v0:= temp;
  #L4b4102.  v1:= 1I;
  #L4b4104.  if v0 == 0 then goto L4b410a;
  #L4b4108.  return v1;
  #L4b410a.  call temp:= `get`(v3) @signature `Lrx/internal/subscriptions/SequentialSubscription;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4110.  v0:= temp @kind object;
  #L4b4112.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b4116.  if v4 == 0 then goto L4b4120;
  #L4b411a.  call `unsubscribe`(v4) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b4120.  v4:= `@@rx.internal.subscriptions.Unsubscribed.INSTANCE` @type ^`rx.internal.subscriptions.Unsubscribed` @kind object;
  #L4b4124.  if v0 != v4 then goto L4b412a;
  #L4b4128.  goto L4b412c;
  #L4b412a.  v1:= 0I;
  #L4b412c.  return v1;
}
