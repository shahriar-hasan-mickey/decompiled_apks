record `rx.Scheduler` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `long` `@@rx.Scheduler.CLOCK_DRIFT_TOLERANCE_NANOS` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/Scheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48e944.  v0:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48e948.  v1:= "rx.scheduler.drift-tolerance" @kind object;
  #L48e94c.  v2:= 15L;
  #L48e950.  call temp:= `getLong`(v1, v2) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L48e956.  v1:= temp @kind object;
  #L48e958.  call temp:= `longValue`(v1) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L48e95e.  v1:= temp @kind wide;
  #L48e960.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L48e966.  v0:= temp @kind wide;
  #L48e968.  `@@rx.Scheduler.CLOCK_DRIFT_TOLERANCE_NANOS` @type ^`long` := v0 @kind wide;
  #L48e96c.  return @kind void;
}
procedure `void` `<init>`(`rx.Scheduler` v0 @kind this) @signature `Lrx/Scheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48e980.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48e986.  return @kind void;
}
procedure `rx.Scheduler$Worker` `createWorker`() @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `now`(`rx.Scheduler` v2 @kind this) @signature `Lrx/Scheduler;.now:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48e90c.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L48e912.  v0:= temp @kind wide;
  #L48e914.  return v0 @kind wide;
}
procedure `rx.Scheduler` `when`(`rx.Scheduler` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Scheduler;.when:(Lrx/functions/Func1;)Lrx/Scheduler;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e928.  v0:= new `rx.internal.schedulers.SchedulerWhen`;
  #L48e92c.  call `<init>`(v0, v2, v1) @signature `Lrx/internal/schedulers/SchedulerWhen;.<init>:(Lrx/functions/Func1;Lrx/Scheduler;)V` @kind direct;
  #L48e932.  return v0 @kind object;
}
