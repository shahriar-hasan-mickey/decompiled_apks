record `rx.Completable$25$1` @kind class @AccessFlag  extends `rx.CompletableSubscriber` @kind interface {
  `rx.Completable$25` `rx.Completable$25$1.this$1` @AccessFlag FINAL_SYNTHETIC;
  `rx.CompletableSubscriber` `rx.Completable$25$1.val$s` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$25$1` v0 @kind this, `rx.Completable$25` v1 @kind object, `rx.CompletableSubscriber` v2 @kind object) @signature `Lrx/Completable$25$1;.<init>:(Lrx/Completable$25;Lrx/CompletableSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48761c.  v0.`rx.Completable$25$1.this$1` @type ^`rx.Completable$25` := v1 @kind object;
  #L487620.  v0.`rx.Completable$25$1.val$s` @type ^`rx.CompletableSubscriber` := v2 @kind object;
  #L487624.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48762a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.Completable$25$1` v1 @kind this) @signature `Lrx/Completable$25$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48763c.  v0:= v1.`rx.Completable$25$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L487640.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L487646.  return @kind void;
}
procedure `void` `onError`(`rx.Completable$25$1` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lrx/Completable$25$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L487658.  v0:= 0I;
  #L48765a.  v1:= v4.`rx.Completable$25$1.this$1` @type ^`rx.Completable$25` @kind object;
  #L48765e.  v1:= v1.`rx.Completable$25.val$predicate` @type ^`rx.functions.Func1` @kind object;
  #L487662.  call temp:= `call`(v1, v5) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L487668.  v1:= temp @kind object;
  #L48766a.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L48766e.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L487674.  v0:= temp;
  #L487676.  goto L4876a4;
  #L487678.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48767a.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487680.  v2:= new `rx.exceptions.CompositeException`;
  #L487684.  v3:= 2I;
  #L487686.  v3:= new `java.lang.Throwable`[v3];
  #L48768a.  v3[v0]:= v5 @kind object;
  #L48768e.  v5:= 1I;
  #L487690.  v3[v5]:= v1 @kind object;
  #L487694.  call temp:= `asList`(v3) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48769a.  v5:= temp @kind object;
  #L48769c.  call `<init>`(v2, v5) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4876a2.  v5:= v2 @kind object;
  #L4876a4.  if v0 == 0 then goto L4876b4;
  #L4876a8.  v5:= v4.`rx.Completable$25$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L4876ac.  call `onCompleted`(v5) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L4876b2.  goto L4876be;
  #L4876b4.  v0:= v4.`rx.Completable$25$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L4876b8.  call `onError`(v0, v5) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4876be.  return @kind void;
  catch `java.lang.Throwable` @[L48765a..L487676] goto L487678;
}
procedure `void` `onSubscribe`(`rx.Completable$25$1` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/Completable$25$1;.onSubscribe:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4876dc.  v0:= v1.`rx.Completable$25$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L4876e0.  call `onSubscribe`(v0, v2) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L4876e6.  return @kind void;
}
