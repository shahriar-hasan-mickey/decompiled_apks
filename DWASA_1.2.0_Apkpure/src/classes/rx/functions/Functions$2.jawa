record `rx.functions.Functions$2` @kind class @AccessFlag FINAL extends `rx.functions.FuncN` @kind interface {
  `rx.functions.Func1` `rx.functions.Functions$2.val$f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.functions.Functions$2` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/functions/Functions$2;.<init>:(Lrx/functions/Func1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L492140.  v0.`rx.functions.Functions$2.val$f` @type ^`rx.functions.Func1` := v1 @kind object;
  #L492144.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49214a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.functions.Functions$2` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lrx/functions/Functions$2;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492104.  v0:= length @variable v3;
  #L492106.  v1:= 1I;
  #L492108.  if v0 != v1 then goto L492120;
  #L49210c.  v0:= v2.`rx.functions.Functions$2.val$f` @type ^`rx.functions.Func1` @kind object;
  #L492110.  v1:= 0I;
  #L492112.  v3:= v3[v1] @kind object;
  #L492116.  call temp:= `call`(v0, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49211c.  v3:= temp @kind object;
  #L49211e.  return v3 @kind object;
  #L492120.  v3:= new `java.lang.IllegalArgumentException`;
  #L492124.  v0:= "Func1 expecting 1 argument." @kind object;
  #L492128.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49212e.  throw v3;
}
