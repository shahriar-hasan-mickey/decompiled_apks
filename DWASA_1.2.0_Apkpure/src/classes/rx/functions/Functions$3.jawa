record `rx.functions.Functions$3` @kind class @AccessFlag FINAL extends `rx.functions.FuncN` @kind interface {
  `rx.functions.Func2` `rx.functions.Functions$3.val$f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.functions.Functions$3` v0 @kind this, `rx.functions.Func2` v1 @kind object) @signature `Lrx/functions/Functions$3;.<init>:(Lrx/functions/Func2;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4921a0.  v0.`rx.functions.Functions$3.val$f` @type ^`rx.functions.Func2` := v1 @kind object;
  #L4921a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4921aa.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.functions.Functions$3` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lrx/functions/Functions$3;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49215c.  v0:= length @variable v4;
  #L49215e.  v1:= 2I;
  #L492160.  if v0 != v1 then goto L49217e;
  #L492164.  v0:= v3.`rx.functions.Functions$3.val$f` @type ^`rx.functions.Func2` @kind object;
  #L492168.  v1:= 0I;
  #L49216a.  v1:= v4[v1] @kind object;
  #L49216e.  v2:= 1I;
  #L492170.  v4:= v4[v2] @kind object;
  #L492174.  call temp:= `call`(v0, v1, v4) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49217a.  v4:= temp @kind object;
  #L49217c.  return v4 @kind object;
  #L49217e.  v4:= new `java.lang.IllegalArgumentException`;
  #L492182.  v0:= "Func2 expecting 2 arguments." @kind object;
  #L492186.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49218c.  throw v4;
}
