record `rx.functions.Functions$6` @kind class @AccessFlag FINAL extends `rx.functions.FuncN` @kind interface {
  `rx.functions.Func5` `rx.functions.Functions$6.val$f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.functions.Functions$6` v0 @kind this, `rx.functions.Func5` v1 @kind object) @signature `Lrx/functions/Functions$6;.<init>:(Lrx/functions/Func5;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4922e0.  v0.`rx.functions.Functions$6.val$f` @type ^`rx.functions.Func5` := v1 @kind object;
  #L4922e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4922ea.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.functions.Functions$6` v8 @kind this, `java.lang.Object`[] v9 @kind object) @signature `Lrx/functions/Functions$6;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49228c.  v0:= length @variable v9;
  #L49228e.  v1:= 5I;
  #L492290.  if v0 != v1 then goto L4922c0;
  #L492294.  v2:= v8.`rx.functions.Functions$6.val$f` @type ^`rx.functions.Func5` @kind object;
  #L492298.  v0:= 0I;
  #L49229a.  v3:= v9[v0] @kind object;
  #L49229e.  v0:= 1I;
  #L4922a0.  v4:= v9[v0] @kind object;
  #L4922a4.  v0:= 2I;
  #L4922a6.  v5:= v9[v0] @kind object;
  #L4922aa.  v0:= 3I;
  #L4922ac.  v6:= v9[v0] @kind object;
  #L4922b0.  v0:= 4I;
  #L4922b2.  v7:= v9[v0] @kind object;
  #L4922b6.  call temp:= `call`(v2, v3, v4, v5, v6, v7) @signature `Lrx/functions/Func5;.call:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4922bc.  v9:= temp @kind object;
  #L4922be.  return v9 @kind object;
  #L4922c0.  v9:= new `java.lang.IllegalArgumentException`;
  #L4922c4.  v0:= "Func5 expecting 5 arguments." @kind object;
  #L4922c8.  call `<init>`(v9, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4922ce.  throw v9;
}
