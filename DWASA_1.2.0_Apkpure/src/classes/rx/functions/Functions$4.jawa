record `rx.functions.Functions$4` @kind class @AccessFlag FINAL extends `rx.functions.FuncN` @kind interface {
  `rx.functions.Func3` `rx.functions.Functions$4.val$f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.functions.Functions$4` v0 @kind this, `rx.functions.Func3` v1 @kind object) @signature `Lrx/functions/Functions$4;.<init>:(Lrx/functions/Func3;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L492204.  v0.`rx.functions.Functions$4.val$f` @type ^`rx.functions.Func3` := v1 @kind object;
  #L492208.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49220e.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.functions.Functions$4` v4 @kind this, `java.lang.Object`[] v5 @kind object) @signature `Lrx/functions/Functions$4;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4921bc.  v0:= length @variable v5;
  #L4921be.  v1:= 3I;
  #L4921c0.  if v0 != v1 then goto L4921e4;
  #L4921c4.  v0:= v4.`rx.functions.Functions$4.val$f` @type ^`rx.functions.Func3` @kind object;
  #L4921c8.  v1:= 0I;
  #L4921ca.  v1:= v5[v1] @kind object;
  #L4921ce.  v2:= 1I;
  #L4921d0.  v2:= v5[v2] @kind object;
  #L4921d4.  v3:= 2I;
  #L4921d6.  v5:= v5[v3] @kind object;
  #L4921da.  call temp:= `call`(v0, v1, v2, v5) @signature `Lrx/functions/Func3;.call:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4921e0.  v5:= temp @kind object;
  #L4921e2.  return v5 @kind object;
  #L4921e4.  v5:= new `java.lang.IllegalArgumentException`;
  #L4921e8.  v0:= "Func3 expecting 3 arguments." @kind object;
  #L4921ec.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4921f2.  throw v5;
}
