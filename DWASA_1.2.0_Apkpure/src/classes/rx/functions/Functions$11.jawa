record `rx.functions.Functions$11` @kind class @AccessFlag FINAL extends `rx.functions.FuncN` @kind interface {
  `rx.functions.Action0` `rx.functions.Functions$11.val$f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.functions.Functions$11` v0 @kind this, `rx.functions.Action0` v1 @kind object) @signature `Lrx/functions/Functions$11;.<init>:(Lrx/functions/Action0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L491f28.  v0.`rx.functions.Functions$11.val$f` @type ^`rx.functions.Action0` := v1 @kind object;
  #L491f2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L491f32.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.functions.Functions$11` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lrx/functions/Functions$11;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L491ed8.  call temp:= `call`(v0, v1) @signature `Lrx/functions/Functions$11;.call:([Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L491ede.  v1:= temp @kind object;
  #L491ee0.  return v1 @kind object;
}
procedure `java.lang.Void` `call`(`rx.functions.Functions$11` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lrx/functions/Functions$11;.call:([Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491ef4.  v2:= length @variable v2;
  #L491ef6.  if v2 != 0 then goto L491f08;
  #L491efa.  v2:= v1.`rx.functions.Functions$11.val$f` @type ^`rx.functions.Action0` @kind object;
  #L491efe.  call `call`(v2) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L491f04.  v2:= 0I;
  #L491f06.  return v2 @kind object;
  #L491f08.  v2:= new `java.lang.IllegalArgumentException`;
  #L491f0c.  v0:= "Action0 expecting 0 arguments." @kind object;
  #L491f10.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491f16.  throw v2;
}
