record `rx.Single$2$1` @kind class @AccessFlag  extends `rx.SingleSubscriber` @kind class {
  `rx.Single$2` `rx.Single$2$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.SingleSubscriber` `rx.Single$2$1.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$2$1` v0 @kind this, `rx.Single$2` v1 @kind object, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/Single$2$1;.<init>:(Lrx/Single$2;Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48ee4c.  v0.`rx.Single$2$1.this$0` @type ^`rx.Single$2` := v1 @kind object;
  #L48ee50.  v0.`rx.Single$2$1.val$child` @type ^`rx.SingleSubscriber` := v2 @kind object;
  #L48ee54.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L48ee5a.  return @kind void;
}
procedure `void` `onError`(`rx.Single$2$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/Single$2$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ee6c.  v0:= v1.`rx.Single$2$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L48ee70.  call `onError`(v0, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48ee76.  return @kind void;
}
procedure `void` `onSuccess`(`rx.Single$2$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Single$2$1;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48ee88.  v1:= (`rx.Single`) v1 @kind object;
  #L48ee8c.  call `onSuccess`(v0, v1) @signature `Lrx/Single$2$1;.onSuccess:(Lrx/Single;)V` @kind virtual;
  #L48ee92.  return @kind void;
}
procedure `void` `onSuccess`(`rx.Single$2$1` v1 @kind this, `rx.Single` v2 @kind object) @signature `Lrx/Single$2$1;.onSuccess:(Lrx/Single;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eea4.  v0:= v1.`rx.Single$2$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L48eea8.  call temp:= `subscribe`(v2, v0) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L48eeae.  return @kind void;
}
