record `rx.Notification` @kind class @AccessFlag PUBLIC_FINAL {
  `rx.Notification$Kind` `rx.Notification.kind` @AccessFlag PRIVATE_FINAL;
  `java.lang.Throwable` `rx.Notification.throwable` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `rx.Notification.value` @AccessFlag PRIVATE_FINAL;
}
global `rx.Notification` `@@rx.Notification.ON_COMPLETED` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/Notification;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L48a024.  v0:= new `rx.Notification`;
  #L48a028.  v1:= `@@rx.Notification$Kind.OnCompleted` @type ^`rx.Notification$Kind` @kind object;
  #L48a02c.  v2:= 0I;
  #L48a02e.  call `<init>`(v0, v1, v2, v2) @signature `Lrx/Notification;.<init>:(Lrx/Notification$Kind;Ljava/lang/Object;Ljava/lang/Throwable;)V` @kind direct;
  #L48a034.  `@@rx.Notification.ON_COMPLETED` @type ^`rx.Notification` := v0 @kind object;
  #L48a038.  return @kind void;
}
procedure `void` `<init>`(`rx.Notification` v0 @kind this, `rx.Notification$Kind` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lrx/Notification;.<init>:(Lrx/Notification$Kind;Ljava/lang/Object;Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L48a04c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48a052.  v0.`rx.Notification.value` @type ^`java.lang.Object` := v2 @kind object;
  #L48a056.  v0.`rx.Notification.throwable` @type ^`java.lang.Throwable` := v3 @kind object;
  #L48a05a.  v0.`rx.Notification.kind` @type ^`rx.Notification$Kind` := v1 @kind object;
  #L48a05e.  return @kind void;
}
procedure `rx.Notification` `createOnCompleted`() @signature `Lrx/Notification;.createOnCompleted:()Lrx/Notification;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489f94.  v0:= `@@rx.Notification.ON_COMPLETED` @type ^`rx.Notification` @kind object;
  #L489f98.  return v0 @kind object;
}
procedure `rx.Notification` `createOnCompleted`(`java.lang.Class` v0 @kind object) @signature `Lrx/Notification;.createOnCompleted:(Ljava/lang/Class;)Lrx/Notification;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L489fac.  v0:= `@@rx.Notification.ON_COMPLETED` @type ^`rx.Notification` @kind object;
  #L489fb0.  return v0 @kind object;
}
procedure `rx.Notification` `createOnError`(`java.lang.Throwable` v3 @kind object) @signature `Lrx/Notification;.createOnError:(Ljava/lang/Throwable;)Lrx/Notification;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L489fc4.  v0:= new `rx.Notification`;
  #L489fc8.  v1:= `@@rx.Notification$Kind.OnError` @type ^`rx.Notification$Kind` @kind object;
  #L489fcc.  v2:= 0I;
  #L489fce.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/Notification;.<init>:(Lrx/Notification$Kind;Ljava/lang/Object;Ljava/lang/Throwable;)V` @kind direct;
  #L489fd4.  return v0 @kind object;
}
procedure `rx.Notification` `createOnNext`(`java.lang.Object` v3 @kind object) @signature `Lrx/Notification;.createOnNext:(Ljava/lang/Object;)Lrx/Notification;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L489fe8.  v0:= new `rx.Notification`;
  #L489fec.  v1:= `@@rx.Notification$Kind.OnNext` @type ^`rx.Notification$Kind` @kind object;
  #L489ff0.  v2:= 0I;
  #L489ff2.  call `<init>`(v0, v1, v3, v2) @signature `Lrx/Notification;.<init>:(Lrx/Notification$Kind;Ljava/lang/Object;Ljava/lang/Throwable;)V` @kind direct;
  #L489ff8.  return v0 @kind object;
}
procedure `void` `accept`(`rx.Notification` v2 @kind this, `rx.Observer` v3 @kind object) @signature `Lrx/Notification;.accept:(Lrx/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48a070.  v0:= v2.`rx.Notification.kind` @type ^`rx.Notification$Kind` @kind object;
  #L48a074.  v1:= `@@rx.Notification$Kind.OnNext` @type ^`rx.Notification$Kind` @kind object;
  #L48a078.  if v0 != v1 then goto L48a08c;
  #L48a07c.  call temp:= `getValue`(v2) @signature `Lrx/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L48a082.  v0:= temp @kind object;
  #L48a084.  call `onNext`(v3, v0) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48a08a.  goto L48a0ae;
  #L48a08c.  v0:= v2.`rx.Notification.kind` @type ^`rx.Notification$Kind` @kind object;
  #L48a090.  v1:= `@@rx.Notification$Kind.OnCompleted` @type ^`rx.Notification$Kind` @kind object;
  #L48a094.  if v0 != v1 then goto L48a0a0;
  #L48a098.  call `onCompleted`(v3) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L48a09e.  goto L48a0ae;
  #L48a0a0.  call temp:= `getThrowable`(v2) @signature `Lrx/Notification;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L48a0a6.  v0:= temp @kind object;
  #L48a0a8.  call `onError`(v3, v0) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a0ae.  return @kind void;
}
procedure `boolean` `equals`(`rx.Notification` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/Notification;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L489cf4.  v0:= 0I;
  #L489cf6.  if v5 != 0 then goto L489cfc;
  #L489cfa.  return v0;
  #L489cfc.  v1:= 1I;
  #L489cfe.  if v4 != v5 then goto L489d04;
  #L489d02.  return v1;
  #L489d04.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L489d0a.  v2:= temp @kind object;
  #L489d0c.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L489d12.  v3:= temp @kind object;
  #L489d14.  if v2 == v3 then goto L489d1a;
  #L489d18.  return v0;
  #L489d1a.  v5:= (`rx.Notification`) v5 @kind object;
  #L489d1e.  call temp:= `getKind`(v5) @signature `Lrx/Notification;.getKind:()Lrx/Notification$Kind;` @kind virtual;
  #L489d24.  v2:= temp @kind object;
  #L489d26.  call temp:= `getKind`(v4) @signature `Lrx/Notification;.getKind:()Lrx/Notification$Kind;` @kind virtual;
  #L489d2c.  v3:= temp @kind object;
  #L489d2e.  if v2 != v3 then goto L489d6c;
  #L489d32.  v2:= v4.`rx.Notification.value` @type ^`java.lang.Object` @kind object;
  #L489d36.  v3:= v5.`rx.Notification.value` @type ^`java.lang.Object` @kind object;
  #L489d3a.  if v2 == v3 then goto L489d4e;
  #L489d3e.  if v2 == 0 then goto L489d6c;
  #L489d42.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L489d48.  v2:= temp;
  #L489d4a.  if v2 == 0 then goto L489d6c;
  #L489d4e.  v2:= v4.`rx.Notification.throwable` @type ^`java.lang.Throwable` @kind object;
  #L489d52.  v5:= v5.`rx.Notification.throwable` @type ^`java.lang.Throwable` @kind object;
  #L489d56.  if v2 == v5 then goto L489d6a;
  #L489d5a.  if v2 == 0 then goto L489d6c;
  #L489d5e.  call temp:= `equals`(v2, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L489d64.  v5:= temp;
  #L489d66.  if v5 == 0 then goto L489d6c;
  #L489d6a.  v0:= 1I;
  #L489d6c.  return v0;
}
procedure `rx.Notification$Kind` `getKind`(`rx.Notification` v1 @kind this) @signature `Lrx/Notification;.getKind:()Lrx/Notification$Kind;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48a00c.  v0:= v1.`rx.Notification.kind` @type ^`rx.Notification$Kind` @kind object;
  #L48a010.  return v0 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`rx.Notification` v1 @kind this) @signature `Lrx/Notification;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489f7c.  v0:= v1.`rx.Notification.throwable` @type ^`java.lang.Throwable` @kind object;
  #L489f80.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`rx.Notification` v1 @kind this) @signature `Lrx/Notification;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489eb8.  v0:= v1.`rx.Notification.value` @type ^`java.lang.Object` @kind object;
  #L489ebc.  return v0 @kind object;
}
procedure `boolean` `hasThrowable`(`rx.Notification` v1 @kind this) @signature `Lrx/Notification;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489d80.  call temp:= `isOnError`(v1) @signature `Lrx/Notification;.isOnError:()Z` @kind virtual;
  #L489d86.  v0:= temp;
  #L489d88.  if v0 == 0 then goto L489d98;
  #L489d8c.  v0:= v1.`rx.Notification.throwable` @type ^`java.lang.Throwable` @kind object;
  #L489d90.  if v0 == 0 then goto L489d98;
  #L489d94.  v0:= 1I;
  #L489d96.  goto L489d9a;
  #L489d98.  v0:= 0I;
  #L489d9a.  return v0;
}
procedure `boolean` `hasValue`(`rx.Notification` v1 @kind this) @signature `Lrx/Notification;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489dac.  call temp:= `isOnNext`(v1) @signature `Lrx/Notification;.isOnNext:()Z` @kind virtual;
  #L489db2.  v0:= temp;
  #L489db4.  if v0 == 0 then goto L489dc4;
  #L489db8.  v0:= v1.`rx.Notification.value` @type ^`java.lang.Object` @kind object;
  #L489dbc.  if v0 == 0 then goto L489dc4;
  #L489dc0.  v0:= 1I;
  #L489dc2.  goto L489dc6;
  #L489dc4.  v0:= 0I;
  #L489dc6.  return v0;
}
procedure `int` `hashCode`(`rx.Notification` v2 @kind this) @signature `Lrx/Notification;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L489e50.  call temp:= `getKind`(v2) @signature `Lrx/Notification;.getKind:()Lrx/Notification$Kind;` @kind virtual;
  #L489e56.  v0:= temp @kind object;
  #L489e58.  call temp:= `hashCode`(v0) @signature `Lrx/Notification$Kind;.hashCode:()I` @kind virtual;
  #L489e5e.  v0:= temp;
  #L489e60.  call temp:= `hasValue`(v2) @signature `Lrx/Notification;.hasValue:()Z` @kind virtual;
  #L489e66.  v1:= temp;
  #L489e68.  if v1 == 0 then goto L489e82;
  #L489e6c.  v0:= v0 * 31;
  #L489e70.  call temp:= `getValue`(v2) @signature `Lrx/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L489e76.  v1:= temp @kind object;
  #L489e78.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L489e7e.  v1:= temp;
  #L489e80.  v0:= v0 + v1 @kind int;
  #L489e82.  call temp:= `hasThrowable`(v2) @signature `Lrx/Notification;.hasThrowable:()Z` @kind virtual;
  #L489e88.  v1:= temp;
  #L489e8a.  if v1 == 0 then goto L489ea4;
  #L489e8e.  v0:= v0 * 31;
  #L489e92.  call temp:= `getThrowable`(v2) @signature `Lrx/Notification;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L489e98.  v1:= temp @kind object;
  #L489e9a.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L489ea0.  v1:= temp;
  #L489ea2.  v0:= v0 + v1 @kind int;
  #L489ea4.  return v0;
}
procedure `boolean` `isOnCompleted`(`rx.Notification` v2 @kind this) @signature `Lrx/Notification;.isOnCompleted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L489dd8.  call temp:= `getKind`(v2) @signature `Lrx/Notification;.getKind:()Lrx/Notification$Kind;` @kind virtual;
  #L489dde.  v0:= temp @kind object;
  #L489de0.  v1:= `@@rx.Notification$Kind.OnCompleted` @type ^`rx.Notification$Kind` @kind object;
  #L489de4.  if v0 != v1 then goto L489dec;
  #L489de8.  v0:= 1I;
  #L489dea.  goto L489dee;
  #L489dec.  v0:= 0I;
  #L489dee.  return v0;
}
procedure `boolean` `isOnError`(`rx.Notification` v2 @kind this) @signature `Lrx/Notification;.isOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L489e00.  call temp:= `getKind`(v2) @signature `Lrx/Notification;.getKind:()Lrx/Notification$Kind;` @kind virtual;
  #L489e06.  v0:= temp @kind object;
  #L489e08.  v1:= `@@rx.Notification$Kind.OnError` @type ^`rx.Notification$Kind` @kind object;
  #L489e0c.  if v0 != v1 then goto L489e14;
  #L489e10.  v0:= 1I;
  #L489e12.  goto L489e16;
  #L489e14.  v0:= 0I;
  #L489e16.  return v0;
}
procedure `boolean` `isOnNext`(`rx.Notification` v2 @kind this) @signature `Lrx/Notification;.isOnNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L489e28.  call temp:= `getKind`(v2) @signature `Lrx/Notification;.getKind:()Lrx/Notification$Kind;` @kind virtual;
  #L489e2e.  v0:= temp @kind object;
  #L489e30.  v1:= `@@rx.Notification$Kind.OnNext` @type ^`rx.Notification$Kind` @kind object;
  #L489e34.  if v0 != v1 then goto L489e3c;
  #L489e38.  v0:= 1I;
  #L489e3a.  goto L489e3e;
  #L489e3c.  v0:= 0I;
  #L489e3e.  return v0;
}
procedure `java.lang.String` `toString`(`rx.Notification` v3 @kind this) @signature `Lrx/Notification;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L489ed0.  v0:= new `java.lang.StringBuilder`;
  #L489ed4.  v1:= 64I;
  #L489ed8.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L489ede.  v1:= 91I;
  #L489ee2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L489ee8.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind super;
  #L489eee.  v1:= temp @kind object;
  #L489ef0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L489ef6.  v1:= 32I;
  #L489efa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L489f00.  call temp:= `getKind`(v3) @signature `Lrx/Notification;.getKind:()Lrx/Notification$Kind;` @kind virtual;
  #L489f06.  v2:= temp @kind object;
  #L489f08.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L489f0e.  call temp:= `hasValue`(v3) @signature `Lrx/Notification;.hasValue:()Z` @kind virtual;
  #L489f14.  v2:= temp;
  #L489f16.  if v2 == 0 then goto L489f2e;
  #L489f1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L489f20.  call temp:= `getValue`(v3) @signature `Lrx/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L489f26.  v2:= temp @kind object;
  #L489f28.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L489f2e.  call temp:= `hasThrowable`(v3) @signature `Lrx/Notification;.hasThrowable:()Z` @kind virtual;
  #L489f34.  v2:= temp;
  #L489f36.  if v2 == 0 then goto L489f56;
  #L489f3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L489f40.  call temp:= `getThrowable`(v3) @signature `Lrx/Notification;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L489f46.  v1:= temp @kind object;
  #L489f48.  call temp:= `getMessage`(v1) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L489f4e.  v1:= temp @kind object;
  #L489f50.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L489f56.  v1:= 93I;
  #L489f5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L489f60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L489f66.  v0:= temp @kind object;
  #L489f68.  return v0 @kind object;
}
