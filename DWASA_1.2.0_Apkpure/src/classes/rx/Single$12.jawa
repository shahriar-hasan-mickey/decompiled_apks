record `rx.Single$12` @kind class @AccessFlag  extends `rx.SingleSubscriber` @kind class {
  `rx.Single` `rx.Single$12.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Observer` `rx.Single$12.val$observer` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$12` v0 @kind this, `rx.Single` v1 @kind object, `rx.Observer` v2 @kind object) @signature `Lrx/Single$12;.<init>:(Lrx/Single;Lrx/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48eaa0.  v0.`rx.Single$12.this$0` @type ^`rx.Single` := v1 @kind object;
  #L48eaa4.  v0.`rx.Single$12.val$observer` @type ^`rx.Observer` := v2 @kind object;
  #L48eaa8.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L48eaae.  return @kind void;
}
procedure `void` `onError`(`rx.Single$12` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/Single$12;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eac0.  v0:= v1.`rx.Single$12.val$observer` @type ^`rx.Observer` @kind object;
  #L48eac4.  call `onError`(v0, v2) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48eaca.  return @kind void;
}
procedure `void` `onSuccess`(`rx.Single$12` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/Single$12;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eadc.  v0:= v1.`rx.Single$12.val$observer` @type ^`rx.Observer` @kind object;
  #L48eae0.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48eae6.  v2:= v1.`rx.Single$12.val$observer` @type ^`rx.Observer` @kind object;
  #L48eaea.  call `onCompleted`(v2) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L48eaf0.  return @kind void;
}
