record `rx.Single$3` @kind class @AccessFlag FINAL extends `rx.functions.FuncN` @kind interface {
  `rx.functions.Func2` `rx.Single$3.val$zipFunction` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$3` v0 @kind this, `rx.functions.Func2` v1 @kind object) @signature `Lrx/Single$3;.<init>:(Lrx/functions/Func2;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48ef50.  v0.`rx.Single$3.val$zipFunction` @type ^`rx.functions.Func2` := v1 @kind object;
  #L48ef54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48ef5a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.Single$3` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lrx/Single$3;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48ef24.  v0:= v3.`rx.Single$3.val$zipFunction` @type ^`rx.functions.Func2` @kind object;
  #L48ef28.  v1:= 0I;
  #L48ef2a.  v1:= v4[v1] @kind object;
  #L48ef2e.  v2:= 1I;
  #L48ef30.  v4:= v4[v2] @kind object;
  #L48ef34.  call temp:= `call`(v0, v1, v4) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48ef3a.  v4:= temp @kind object;
  #L48ef3c.  return v4 @kind object;
}
