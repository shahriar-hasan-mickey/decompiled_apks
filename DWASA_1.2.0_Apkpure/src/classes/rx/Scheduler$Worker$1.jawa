record `rx.Scheduler$Worker$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `long` `rx.Scheduler$Worker$1.count` @AccessFlag ;
  `long` `rx.Scheduler$Worker$1.lastNowNanos` @AccessFlag ;
  `long` `rx.Scheduler$Worker$1.startInNanos` @AccessFlag ;
  `rx.Scheduler$Worker` `rx.Scheduler$Worker$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Action0` `rx.Scheduler$Worker$1.val$action` @AccessFlag FINAL_SYNTHETIC;
  `long` `rx.Scheduler$Worker$1.val$firstNowNanos` @AccessFlag FINAL_SYNTHETIC;
  `long` `rx.Scheduler$Worker$1.val$firstStartInNanos` @AccessFlag FINAL_SYNTHETIC;
  `rx.internal.subscriptions.SequentialSubscription` `rx.Scheduler$Worker$1.val$mas` @AccessFlag FINAL_SYNTHETIC;
  `long` `rx.Scheduler$Worker$1.val$periodInNanos` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Scheduler$Worker$1` v0 @kind this, `rx.Scheduler$Worker` v1 @kind object, `long` v2 , `long` v4 , `rx.functions.Action0` v6 @kind object, `rx.internal.subscriptions.SequentialSubscription` v7 @kind object, `long` v8 ) @signature `Lrx/Scheduler$Worker$1;.<init>:(Lrx/Scheduler$Worker;JJLrx/functions/Action0;Lrx/internal/subscriptions/SequentialSubscription;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48e748.  v0.`rx.Scheduler$Worker$1.this$0` @type ^`rx.Scheduler$Worker` := v1 @kind object;
  #L48e74c.  v0.`rx.Scheduler$Worker$1.val$firstNowNanos` @type ^`long` := v2 @kind wide;
  #L48e750.  v0.`rx.Scheduler$Worker$1.val$firstStartInNanos` @type ^`long` := v4 @kind wide;
  #L48e754.  v0.`rx.Scheduler$Worker$1.val$action` @type ^`rx.functions.Action0` := v6 @kind object;
  #L48e758.  v0.`rx.Scheduler$Worker$1.val$mas` @type ^`rx.internal.subscriptions.SequentialSubscription` := v7 @kind object;
  #L48e75c.  v0.`rx.Scheduler$Worker$1.val$periodInNanos` @type ^`long` := v8 @kind wide;
  #L48e760.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48e766.  v1:= v0.`rx.Scheduler$Worker$1.val$firstNowNanos` @type ^`long` @kind wide;
  #L48e76a.  v0.`rx.Scheduler$Worker$1.lastNowNanos` @type ^`long` := v1 @kind wide;
  #L48e76e.  v1:= v0.`rx.Scheduler$Worker$1.val$firstStartInNanos` @type ^`long` @kind wide;
  #L48e772.  v0.`rx.Scheduler$Worker$1.startInNanos` @type ^`long` := v1 @kind wide;
  #L48e776.  return @kind void;
}
procedure `void` `call`(`rx.Scheduler$Worker$1` v10 @kind this) @signature `Lrx/Scheduler$Worker$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L48e788.  v0:= v10.`rx.Scheduler$Worker$1.val$action` @type ^`rx.functions.Action0` @kind object;
  #L48e78c.  call `call`(v0) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L48e792.  v0:= v10.`rx.Scheduler$Worker$1.val$mas` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L48e796.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L48e79c.  v0:= temp;
  #L48e79e.  if v0 != 0 then goto L48e840;
  #L48e7a2.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48e7a6.  v1:= v10.`rx.Scheduler$Worker$1.this$0` @type ^`rx.Scheduler$Worker` @kind object;
  #L48e7aa.  call temp:= `now`(v1) @signature `Lrx/Scheduler$Worker;.now:()J` @kind virtual;
  #L48e7b0.  v1:= temp @kind wide;
  #L48e7b2.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L48e7b8.  v0:= temp @kind wide;
  #L48e7ba.  v2:= `@@rx.Scheduler.CLOCK_DRIFT_TOLERANCE_NANOS` @type ^`long` @kind wide;
  #L48e7be.  v2:= v2 + v0 @kind long;
  #L48e7c0.  v4:= v10.`rx.Scheduler$Worker$1.lastNowNanos` @type ^`long` @kind wide;
  #L48e7c4.  v6:= 1L;
  #L48e7c8.  v8:= lcmp(v2, v4);
  #L48e7cc.  if v8 < 0 then goto L48e800;
  #L48e7d0.  v2:= v10.`rx.Scheduler$Worker$1.val$periodInNanos` @type ^`long` @kind wide;
  #L48e7d4.  v4:= v4 + v2 @kind long;
  #L48e7d6.  v2:= `@@rx.Scheduler.CLOCK_DRIFT_TOLERANCE_NANOS` @type ^`long` @kind wide;
  #L48e7da.  v4:= v4 + v2 @kind long;
  #L48e7dc.  v2:= lcmp(v0, v4);
  #L48e7e0.  if v2 < 0 then goto L48e7e6;
  #L48e7e4.  goto L48e800;
  #L48e7e6.  v2:= v10.`rx.Scheduler$Worker$1.startInNanos` @type ^`long` @kind wide;
  #L48e7ea.  v4:= v10.`rx.Scheduler$Worker$1.count` @type ^`long` @kind wide;
  #L48e7ee.  v4:= v4 + v6 @kind long;
  #L48e7f0.  v10.`rx.Scheduler$Worker$1.count` @type ^`long` := v4 @kind wide;
  #L48e7f4.  v6:= v10.`rx.Scheduler$Worker$1.val$periodInNanos` @type ^`long` @kind wide;
  #L48e7f8.  v4:= v4 * v6 @kind long;
  #L48e7fc.  v2:= v2 + v4 @kind long;
  #L48e7fe.  goto L48e820;
  #L48e800.  v2:= v10.`rx.Scheduler$Worker$1.val$periodInNanos` @type ^`long` @kind wide;
  #L48e804.  v4:= v0 + v2 @kind long;
  #L48e808.  v8:= v10.`rx.Scheduler$Worker$1.count` @type ^`long` @kind wide;
  #L48e80c.  v8:= v8 + v6 @kind long;
  #L48e80e.  v10.`rx.Scheduler$Worker$1.count` @type ^`long` := v8 @kind wide;
  #L48e812.  v2:= v2 * v8 @kind long;
  #L48e816.  v2:= v4 - v2 @kind long;
  #L48e81a.  v10.`rx.Scheduler$Worker$1.startInNanos` @type ^`long` := v2 @kind wide;
  #L48e81e.  v2:= v4 @kind wide;
  #L48e820.  v10.`rx.Scheduler$Worker$1.lastNowNanos` @type ^`long` := v0 @kind wide;
  #L48e824.  v2:= v2 - v0 @kind long;
  #L48e826.  v0:= v10.`rx.Scheduler$Worker$1.val$mas` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L48e82a.  v1:= v10.`rx.Scheduler$Worker$1.this$0` @type ^`rx.Scheduler$Worker` @kind object;
  #L48e82e.  v4:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48e832.  call temp:= `schedule`(v1, v10, v2, v4) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L48e838.  v1:= temp @kind object;
  #L48e83a.  call temp:= `replace`(v0, v1) @signature `Lrx/internal/subscriptions/SequentialSubscription;.replace:(Lrx/Subscription;)Z` @kind virtual;
  #L48e840.  return @kind void;
}
