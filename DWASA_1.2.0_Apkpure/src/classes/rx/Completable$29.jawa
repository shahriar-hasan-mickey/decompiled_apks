record `rx.Completable$29` @kind class @AccessFlag  extends `rx.CompletableSubscriber` @kind interface {
  `boolean` `rx.Completable$29.done` @AccessFlag ;
  `rx.Completable` `rx.Completable$29.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.MultipleAssignmentSubscription` `rx.Completable$29.val$mad` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Action0` `rx.Completable$29.val$onComplete` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Action1` `rx.Completable$29.val$onError` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$29` v0 @kind this, `rx.Completable` v1 @kind object, `rx.functions.Action0` v2 @kind object, `rx.subscriptions.MultipleAssignmentSubscription` v3 @kind object, `rx.functions.Action1` v4 @kind object) @signature `Lrx/Completable$29;.<init>:(Lrx/Completable;Lrx/functions/Action0;Lrx/subscriptions/MultipleAssignmentSubscription;Lrx/functions/Action1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L487aa4.  v0.`rx.Completable$29.this$0` @type ^`rx.Completable` := v1 @kind object;
  #L487aa8.  v0.`rx.Completable$29.val$onComplete` @type ^`rx.functions.Action0` := v2 @kind object;
  #L487aac.  v0.`rx.Completable$29.val$mad` @type ^`rx.subscriptions.MultipleAssignmentSubscription` := v3 @kind object;
  #L487ab0.  v0.`rx.Completable$29.val$onError` @type ^`rx.functions.Action1` := v4 @kind object;
  #L487ab4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L487aba.  return @kind void;
}
procedure `void` `callOnError`(`rx.Completable$29` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lrx/Completable$29;.callOnError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L487acc.  v0:= v4.`rx.Completable$29.val$onError` @type ^`rx.functions.Action1` @kind object;
  #L487ad0.  call `call`(v0, v5) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L487ad6.  v5:= v4.`rx.Completable$29.val$mad` @type ^`rx.subscriptions.MultipleAssignmentSubscription` @kind object;
  #L487ada.  call `unsubscribe`(v5) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.unsubscribe:()V` @kind virtual;
  #L487ae0.  goto L487b16;
  #L487ae2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487ae4.  v1:= new `rx.exceptions.CompositeException`;
  #L487ae8.  v2:= 2I;
  #L487aea.  v2:= new `java.lang.Throwable`[v2];
  #L487aee.  v3:= 0I;
  #L487af0.  v2[v3]:= v5 @kind object;
  #L487af4.  v5:= 1I;
  #L487af6.  v2[v5]:= v0 @kind object;
  #L487afa.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L487b00.  v5:= temp @kind object;
  #L487b02.  call `<init>`(v1, v5) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L487b08.  call `onError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487b0e.  call `deliverUncaughtException`(v1) @signature `Lrx/Completable;.deliverUncaughtException:(Ljava/lang/Throwable;)V` @kind static;
  #L487b14.  goto L487ad6;
  #L487b16.  return @kind void;
  #L487b18.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487b1a.  v0:= v4.`rx.Completable$29.val$mad` @type ^`rx.subscriptions.MultipleAssignmentSubscription` @kind object;
  #L487b1e.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.unsubscribe:()V` @kind virtual;
  #L487b24.  goto L487b28;
  #L487b26.  throw v5;
  #L487b28.  goto L487b26;
  catch `java.lang.Throwable` @[L487acc..L487ad6] goto L487ae2;
  catch `java.lang.Throwable` @[L487ae4..L487b14] goto L487b18;
}
procedure `void` `onCompleted`(`rx.Completable$29` v1 @kind this) @signature `Lrx/Completable$29;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487b54.  v0:= v1.`rx.Completable$29.done` @type ^`boolean` @kind boolean;
  #L487b58.  if v0 != 0 then goto L487b80;
  #L487b5c.  v0:= 1I;
  #L487b5e.  v1.`rx.Completable$29.done` @type ^`boolean` := v0 @kind boolean;
  #L487b62.  v0:= v1.`rx.Completable$29.val$onComplete` @type ^`rx.functions.Action0` @kind object;
  #L487b66.  call `call`(v0) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L487b6c.  v0:= v1.`rx.Completable$29.val$mad` @type ^`rx.subscriptions.MultipleAssignmentSubscription` @kind object;
  #L487b70.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.unsubscribe:()V` @kind virtual;
  #L487b76.  goto L487b80;
  #L487b78.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487b7a.  call `callOnError`(v1, v0) @signature `Lrx/Completable$29;.callOnError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L487b80.  return @kind void;
  catch `java.lang.Throwable` @[L487b62..L487b6c] goto L487b78;
}
procedure `void` `onError`(`rx.Completable$29` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/Completable$29;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487ba0.  v0:= v1.`rx.Completable$29.done` @type ^`boolean` @kind boolean;
  #L487ba4.  if v0 != 0 then goto L487bb6;
  #L487ba8.  v0:= 1I;
  #L487baa.  v1.`rx.Completable$29.done` @type ^`boolean` := v0 @kind boolean;
  #L487bae.  call `callOnError`(v1, v2) @signature `Lrx/Completable$29;.callOnError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L487bb4.  goto L487bc2;
  #L487bb6.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487bbc.  call `deliverUncaughtException`(v2) @signature `Lrx/Completable;.deliverUncaughtException:(Ljava/lang/Throwable;)V` @kind static;
  #L487bc2.  return @kind void;
}
procedure `void` `onSubscribe`(`rx.Completable$29` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/Completable$29;.onSubscribe:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487bd4.  v0:= v1.`rx.Completable$29.val$mad` @type ^`rx.subscriptions.MultipleAssignmentSubscription` @kind object;
  #L487bd8.  call `set`(v0, v2) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L487bde.  return @kind void;
}
