record `rx.Completable$16$1$2` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.Completable$16$1` `rx.Completable$16$1$2.this$2` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Throwable` `rx.Completable$16$1$2.val$e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$16$1$2` v0 @kind this, `rx.Completable$16$1` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lrx/Completable$16$1$2;.<init>:(Lrx/Completable$16$1;Ljava/lang/Throwable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L486d2c.  v0.`rx.Completable$16$1$2.this$2` @type ^`rx.Completable$16$1` := v1 @kind object;
  #L486d30.  v0.`rx.Completable$16$1$2.val$e` @type ^`java.lang.Throwable` := v2 @kind object;
  #L486d34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L486d3a.  return @kind void;
}
procedure `void` `call`(`rx.Completable$16$1$2` v2 @kind this) @signature `Lrx/Completable$16$1$2;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486d4c.  v0:= v2.`rx.Completable$16$1$2.this$2` @type ^`rx.Completable$16$1` @kind object;
  #L486d50.  v0:= v0.`rx.Completable$16$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L486d54.  v1:= v2.`rx.Completable$16$1$2.val$e` @type ^`java.lang.Throwable` @kind object;
  #L486d58.  call `onError`(v0, v1) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L486d5e.  v0:= v2.`rx.Completable$16$1$2.this$2` @type ^`rx.Completable$16$1` @kind object;
  #L486d62.  v0:= v0.`rx.Completable$16$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L486d66.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L486d6c.  return @kind void;
  #L486d6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L486d70.  v1:= v2.`rx.Completable$16$1$2.this$2` @type ^`rx.Completable$16$1` @kind object;
  #L486d74.  v1:= v1.`rx.Completable$16$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L486d78.  call `unsubscribe`(v1) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L486d7e.  throw v0;
  catch `java.lang.Throwable` @[L486d4c..L486d5e] goto L486d6e;
}
