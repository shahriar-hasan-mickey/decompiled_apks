record `rx.plugins.RxJavaHooks$2` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
}
procedure `void` `<init>`(`rx.plugins.RxJavaHooks$2` v0 @kind this) @signature `Lrx/plugins/RxJavaHooks$2;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0a98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c0a9e.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.plugins.RxJavaHooks$2` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/plugins/RxJavaHooks$2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c0a48.  v1:= (`rx.Observable`) v1 @kind object;
  #L4c0a4c.  v2:= (`rx.Observable$OnSubscribe`) v2 @kind object;
  #L4c0a50.  call temp:= `call`(v0, v1, v2) @signature `Lrx/plugins/RxJavaHooks$2;.call:(Lrx/Observable;Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;` @kind virtual;
  #L4c0a56.  v1:= temp @kind object;
  #L4c0a58.  return v1 @kind object;
}
procedure `rx.Observable$OnSubscribe` `call`(`rx.plugins.RxJavaHooks$2` v1 @kind this, `rx.Observable` v2 @kind object, `rx.Observable$OnSubscribe` v3 @kind object) @signature `Lrx/plugins/RxJavaHooks$2;.call:(Lrx/Observable;Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0a6c.  call temp:= `getInstance`() @signature `Lrx/plugins/RxJavaPlugins;.getInstance:()Lrx/plugins/RxJavaPlugins;` @kind static;
  #L4c0a72.  v0:= temp @kind object;
  #L4c0a74.  call temp:= `getObservableExecutionHook`(v0) @signature `Lrx/plugins/RxJavaPlugins;.getObservableExecutionHook:()Lrx/plugins/RxJavaObservableExecutionHook;` @kind virtual;
  #L4c0a7a.  v0:= temp @kind object;
  #L4c0a7c.  call temp:= `onSubscribeStart`(v0, v2, v3) @signature `Lrx/plugins/RxJavaObservableExecutionHook;.onSubscribeStart:(Lrx/Observable;Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;` @kind virtual;
  #L4c0a82.  v2:= temp @kind object;
  #L4c0a84.  return v2 @kind object;
}
