record `rx.plugins.RxJavaPlugins` @kind class @AccessFlag PUBLIC {
  `java.util.concurrent.atomic.AtomicReference` `rx.plugins.RxJavaPlugins.completableExecutionHook` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.plugins.RxJavaPlugins.errorHandler` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.plugins.RxJavaPlugins.observableExecutionHook` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.plugins.RxJavaPlugins.schedulersHook` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.plugins.RxJavaPlugins.singleExecutionHook` @AccessFlag PRIVATE_FINAL;
}
global `rx.plugins.RxJavaErrorHandler` `@@rx.plugins.RxJavaPlugins.DEFAULT_ERROR_HANDLER` @AccessFlag STATIC_FINAL;
global `rx.plugins.RxJavaPlugins` `@@rx.plugins.RxJavaPlugins.INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/plugins/RxJavaPlugins;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c1dec.  v0:= new `rx.plugins.RxJavaPlugins`;
  #L4c1df0.  call `<init>`(v0) @signature `Lrx/plugins/RxJavaPlugins;.<init>:()V` @kind direct;
  #L4c1df6.  `@@rx.plugins.RxJavaPlugins.INSTANCE` @type ^`rx.plugins.RxJavaPlugins` := v0 @kind object;
  #L4c1dfa.  v0:= new `rx.plugins.RxJavaPlugins$1`;
  #L4c1dfe.  call `<init>`(v0) @signature `Lrx/plugins/RxJavaPlugins$1;.<init>:()V` @kind direct;
  #L4c1e04.  `@@rx.plugins.RxJavaPlugins.DEFAULT_ERROR_HANDLER` @type ^`rx.plugins.RxJavaErrorHandler` := v0 @kind object;
  #L4c1e08.  return @kind void;
}
procedure `void` `<init>`(`rx.plugins.RxJavaPlugins` v1 @kind this) @signature `Lrx/plugins/RxJavaPlugins;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c1e1c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c1e22.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c1e26.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c1e2c.  v1.`rx.plugins.RxJavaPlugins.errorHandler` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c1e30.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c1e34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c1e3a.  v1.`rx.plugins.RxJavaPlugins.observableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c1e3e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c1e42.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c1e48.  v1.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c1e4c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c1e50.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c1e56.  v1.`rx.plugins.RxJavaPlugins.completableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c1e5a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c1e5e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c1e64.  v1.`rx.plugins.RxJavaPlugins.schedulersHook` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c1e68.  return @kind void;
}
procedure `rx.plugins.RxJavaPlugins` `getInstance`() @signature `Lrx/plugins/RxJavaPlugins;.getInstance:()Lrx/plugins/RxJavaPlugins;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c1cf4.  v0:= `@@rx.plugins.RxJavaPlugins.INSTANCE` @type ^`rx.plugins.RxJavaPlugins` @kind object;
  #L4c1cf8.  return v0 @kind object;
}
procedure `java.lang.Object` `getPluginImplementationViaProperty`(`java.lang.Class` v7 @kind object, `java.util.Properties` v8 @kind object) @signature `Lrx/plugins/RxJavaPlugins;.getPluginImplementationViaProperty:(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c191c.  call temp:= `clone`(v8) @signature `Ljava/util/Properties;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4c1922.  v8:= temp @kind object;
  #L4c1924.  v8:= (`java.util.Properties`) v8 @kind object;
  #L4c1928.  call temp:= `getSimpleName`(v7) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4c192e.  v0:= temp @kind object;
  #L4c1930.  v1:= new `java.lang.StringBuilder`;
  #L4c1934.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c193a.  v2:= "rxjava.plugin." @kind object;
  #L4c193e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1944.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c194a.  v3:= ".implementation" @kind object;
  #L4c194e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1954.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c195a.  v1:= temp @kind object;
  #L4c195c.  call temp:= `getProperty`(v8, v1) @signature `Ljava/util/Properties;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L4c1962.  v1:= temp @kind object;
  #L4c1964.  if v1 != 0 then goto L4c1a6e;
  #L4c1968.  call temp:= `entrySet`(v8) @signature `Ljava/util/Properties;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L4c196e.  v3:= temp @kind object;
  #L4c1970.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c1976.  v3:= temp @kind object;
  #L4c1978.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c197e.  v4:= temp;
  #L4c1980.  if v4 == 0 then goto L4c1a6e;
  #L4c1984.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c198a.  v4:= temp @kind object;
  #L4c198c.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L4c1990.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L4c1996.  v5:= temp @kind object;
  #L4c1998.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c199e.  v5:= temp @kind object;
  #L4c19a0.  call temp:= `startsWith`(v5, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4c19a6.  v6:= temp;
  #L4c19a8.  if v6 == 0 then goto L4c1978;
  #L4c19ac.  v6:= ".class" @kind object;
  #L4c19b0.  call temp:= `endsWith`(v5, v6) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4c19b6.  v6:= temp;
  #L4c19b8.  if v6 == 0 then goto L4c1978;
  #L4c19bc.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4c19c2.  v4:= temp @kind object;
  #L4c19c4.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c19ca.  v4:= temp @kind object;
  #L4c19cc.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c19d2.  v4:= temp;
  #L4c19d4.  if v4 == 0 then goto L4c1978;
  #L4c19d8.  v1:= 0I;
  #L4c19da.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c19e0.  v3:= temp;
  #L4c19e2.  v3:= v3 + -6;
  #L4c19e6.  call temp:= `substring`(v5, v1, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4c19ec.  v1:= temp @kind object;
  #L4c19ee.  v3:= 14I;
  #L4c19f2.  call temp:= `substring`(v1, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4c19f8.  v1:= temp @kind object;
  #L4c19fa.  v3:= new `java.lang.StringBuilder`;
  #L4c19fe.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1a04.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1a0a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1a10.  v1:= ".impl" @kind object;
  #L4c1a14.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1a1a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1a20.  v1:= temp @kind object;
  #L4c1a22.  call temp:= `getProperty`(v8, v1) @signature `Ljava/util/Properties;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L4c1a28.  v8:= temp @kind object;
  #L4c1a2a.  if v8 == 0 then goto L4c1a30;
  #L4c1a2e.  goto L4c1a70;
  #L4c1a30.  v7:= new `java.lang.IllegalStateException`;
  #L4c1a34.  v8:= new `java.lang.StringBuilder`;
  #L4c1a38.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1a3e.  v2:= "Implementing class declaration for " @kind object;
  #L4c1a42.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1a48.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1a4e.  v0:= " missing: " @kind object;
  #L4c1a52.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1a58.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1a5e.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1a64.  v8:= temp @kind object;
  #L4c1a66.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c1a6c.  throw v7;
  #L4c1a6e.  v8:= v1 @kind object;
  #L4c1a70.  if v8 == 0 then goto L4c1b76;
  #L4c1a74.  call temp:= `forName`(v8) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L4c1a7a.  v1:= temp @kind object;
  #L4c1a7c.  call temp:= `asSubclass`(v1, v7) @signature `Ljava/lang/Class;.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L4c1a82.  v7:= temp @kind object;
  #L4c1a84.  call temp:= `newInstance`(v7) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L4c1a8a.  v7:= temp @kind object;
  #L4c1a8c.  return v7 @kind object;
  #L4c1a8e.  v7:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L4c1a90.  v1:= new `java.lang.IllegalStateException`;
  #L4c1a94.  v2:= new `java.lang.StringBuilder`;
  #L4c1a98.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1a9e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1aa4.  v0:= " implementation not able to be accessed: " @kind object;
  #L4c1aa8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1aae.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1ab4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1aba.  v8:= temp @kind object;
  #L4c1abc.  call `<init>`(v1, v8, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4c1ac2.  throw v1;
  #L4c1ac4.  v7:= Exception @type ^`java.lang.InstantiationException` @kind object;
  #L4c1ac6.  v1:= new `java.lang.IllegalStateException`;
  #L4c1aca.  v2:= new `java.lang.StringBuilder`;
  #L4c1ace.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1ad4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1ada.  v0:= " implementation not able to be instantiated: " @kind object;
  #L4c1ade.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1ae4.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1aea.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1af0.  v8:= temp @kind object;
  #L4c1af2.  call `<init>`(v1, v8, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4c1af8.  throw v1;
  #L4c1afa.  v7:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L4c1afc.  v1:= new `java.lang.IllegalStateException`;
  #L4c1b00.  v2:= new `java.lang.StringBuilder`;
  #L4c1b04.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1b0a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1b10.  v0:= " implementation class not found: " @kind object;
  #L4c1b14.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1b1a.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1b20.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1b26.  v8:= temp @kind object;
  #L4c1b28.  call `<init>`(v1, v8, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4c1b2e.  throw v1;
  #L4c1b30.  v7:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L4c1b32.  v1:= new `java.lang.IllegalStateException`;
  #L4c1b36.  v2:= new `java.lang.StringBuilder`;
  #L4c1b3a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1b40.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1b46.  v3:= " implementation is not an instance of " @kind object;
  #L4c1b4a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1b50.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1b56.  v0:= ": " @kind object;
  #L4c1b5a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1b60.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1b66.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1b6c.  v8:= temp @kind object;
  #L4c1b6e.  call `<init>`(v1, v8, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4c1b74.  throw v1;
  #L4c1b76.  v7:= 0I;
  #L4c1b78.  return v7 @kind object;
  catch `java.lang.ClassCastException` @[L4c1a74..L4c1a8c] goto L4c1b30;
  catch `java.lang.ClassNotFoundException` @[L4c1a74..L4c1a8c] goto L4c1afa;
  catch `java.lang.InstantiationException` @[L4c1a74..L4c1a8c] goto L4c1ac4;
  catch `java.lang.IllegalAccessException` @[L4c1a74..L4c1a8c] goto L4c1a8e;
}
procedure `rx.plugins.RxJavaCompletableExecutionHook` `getCompletableExecutionHook`(`rx.plugins.RxJavaPlugins` v3 @kind this) @signature `Lrx/plugins/RxJavaPlugins;.getCompletableExecutionHook:()Lrx/plugins/RxJavaCompletableExecutionHook;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c1ba8.  v0:= v3.`rx.plugins.RxJavaPlugins.completableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1bac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1bb2.  v0:= temp @kind object;
  #L4c1bb4.  if v0 != 0 then goto L4c1bf6;
  #L4c1bb8.  v0:= constclass @type ^`rx.plugins.RxJavaCompletableExecutionHook` @kind object;
  #L4c1bbc.  call temp:= `getProperties`() @signature `Ljava/lang/System;.getProperties:()Ljava/util/Properties;` @kind static;
  #L4c1bc2.  v1:= temp @kind object;
  #L4c1bc4.  call temp:= `getPluginImplementationViaProperty`(v0, v1) @signature `Lrx/plugins/RxJavaPlugins;.getPluginImplementationViaProperty:(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;` @kind static;
  #L4c1bca.  v0:= temp @kind object;
  #L4c1bcc.  v1:= 0I;
  #L4c1bce.  if v0 != 0 then goto L4c1be8;
  #L4c1bd2.  v0:= v3.`rx.plugins.RxJavaPlugins.completableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1bd6.  v2:= new `rx.plugins.RxJavaPlugins$2`;
  #L4c1bda.  call `<init>`(v2, v3) @signature `Lrx/plugins/RxJavaPlugins$2;.<init>:(Lrx/plugins/RxJavaPlugins;)V` @kind direct;
  #L4c1be0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1be6.  goto L4c1bf6;
  #L4c1be8.  v2:= v3.`rx.plugins.RxJavaPlugins.completableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1bec.  v0:= (`rx.plugins.RxJavaCompletableExecutionHook`) v0 @kind object;
  #L4c1bf0.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1bf6.  v0:= v3.`rx.plugins.RxJavaPlugins.completableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1bfa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1c00.  v0:= temp @kind object;
  #L4c1c02.  v0:= (`rx.plugins.RxJavaCompletableExecutionHook`) v0 @kind object;
  #L4c1c06.  return v0 @kind object;
}
procedure `rx.plugins.RxJavaErrorHandler` `getErrorHandler`(`rx.plugins.RxJavaPlugins` v3 @kind this) @signature `Lrx/plugins/RxJavaPlugins;.getErrorHandler:()Lrx/plugins/RxJavaErrorHandler;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c1c18.  v0:= v3.`rx.plugins.RxJavaPlugins.errorHandler` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1c1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1c22.  v0:= temp @kind object;
  #L4c1c24.  if v0 != 0 then goto L4c1c60;
  #L4c1c28.  v0:= constclass @type ^`rx.plugins.RxJavaErrorHandler` @kind object;
  #L4c1c2c.  call temp:= `getProperties`() @signature `Ljava/lang/System;.getProperties:()Ljava/util/Properties;` @kind static;
  #L4c1c32.  v1:= temp @kind object;
  #L4c1c34.  call temp:= `getPluginImplementationViaProperty`(v0, v1) @signature `Lrx/plugins/RxJavaPlugins;.getPluginImplementationViaProperty:(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;` @kind static;
  #L4c1c3a.  v0:= temp @kind object;
  #L4c1c3c.  v1:= 0I;
  #L4c1c3e.  if v0 != 0 then goto L4c1c52;
  #L4c1c42.  v0:= v3.`rx.plugins.RxJavaPlugins.errorHandler` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1c46.  v2:= `@@rx.plugins.RxJavaPlugins.DEFAULT_ERROR_HANDLER` @type ^`rx.plugins.RxJavaErrorHandler` @kind object;
  #L4c1c4a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1c50.  goto L4c1c60;
  #L4c1c52.  v2:= v3.`rx.plugins.RxJavaPlugins.errorHandler` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1c56.  v0:= (`rx.plugins.RxJavaErrorHandler`) v0 @kind object;
  #L4c1c5a.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1c60.  v0:= v3.`rx.plugins.RxJavaPlugins.errorHandler` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1c64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1c6a.  v0:= temp @kind object;
  #L4c1c6c.  v0:= (`rx.plugins.RxJavaErrorHandler`) v0 @kind object;
  #L4c1c70.  return v0 @kind object;
}
procedure `rx.plugins.RxJavaObservableExecutionHook` `getObservableExecutionHook`(`rx.plugins.RxJavaPlugins` v3 @kind this) @signature `Lrx/plugins/RxJavaPlugins;.getObservableExecutionHook:()Lrx/plugins/RxJavaObservableExecutionHook;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c1c84.  v0:= v3.`rx.plugins.RxJavaPlugins.observableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1c88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1c8e.  v0:= temp @kind object;
  #L4c1c90.  if v0 != 0 then goto L4c1cd0;
  #L4c1c94.  v0:= constclass @type ^`rx.plugins.RxJavaObservableExecutionHook` @kind object;
  #L4c1c98.  call temp:= `getProperties`() @signature `Ljava/lang/System;.getProperties:()Ljava/util/Properties;` @kind static;
  #L4c1c9e.  v1:= temp @kind object;
  #L4c1ca0.  call temp:= `getPluginImplementationViaProperty`(v0, v1) @signature `Lrx/plugins/RxJavaPlugins;.getPluginImplementationViaProperty:(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;` @kind static;
  #L4c1ca6.  v0:= temp @kind object;
  #L4c1ca8.  v1:= 0I;
  #L4c1caa.  if v0 != 0 then goto L4c1cc2;
  #L4c1cae.  v0:= v3.`rx.plugins.RxJavaPlugins.observableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1cb2.  call temp:= `getInstance`() @signature `Lrx/plugins/RxJavaObservableExecutionHookDefault;.getInstance:()Lrx/plugins/RxJavaObservableExecutionHook;` @kind static;
  #L4c1cb8.  v2:= temp @kind object;
  #L4c1cba.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1cc0.  goto L4c1cd0;
  #L4c1cc2.  v2:= v3.`rx.plugins.RxJavaPlugins.observableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1cc6.  v0:= (`rx.plugins.RxJavaObservableExecutionHook`) v0 @kind object;
  #L4c1cca.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1cd0.  v0:= v3.`rx.plugins.RxJavaPlugins.observableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1cd4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1cda.  v0:= temp @kind object;
  #L4c1cdc.  v0:= (`rx.plugins.RxJavaObservableExecutionHook`) v0 @kind object;
  #L4c1ce0.  return v0 @kind object;
}
procedure `rx.plugins.RxJavaSchedulersHook` `getSchedulersHook`(`rx.plugins.RxJavaPlugins` v3 @kind this) @signature `Lrx/plugins/RxJavaPlugins;.getSchedulersHook:()Lrx/plugins/RxJavaSchedulersHook;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c1d0c.  v0:= v3.`rx.plugins.RxJavaPlugins.schedulersHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1d10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1d16.  v0:= temp @kind object;
  #L4c1d18.  if v0 != 0 then goto L4c1d58;
  #L4c1d1c.  v0:= constclass @type ^`rx.plugins.RxJavaSchedulersHook` @kind object;
  #L4c1d20.  call temp:= `getProperties`() @signature `Ljava/lang/System;.getProperties:()Ljava/util/Properties;` @kind static;
  #L4c1d26.  v1:= temp @kind object;
  #L4c1d28.  call temp:= `getPluginImplementationViaProperty`(v0, v1) @signature `Lrx/plugins/RxJavaPlugins;.getPluginImplementationViaProperty:(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;` @kind static;
  #L4c1d2e.  v0:= temp @kind object;
  #L4c1d30.  v1:= 0I;
  #L4c1d32.  if v0 != 0 then goto L4c1d4a;
  #L4c1d36.  v0:= v3.`rx.plugins.RxJavaPlugins.schedulersHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1d3a.  call temp:= `getDefaultInstance`() @signature `Lrx/plugins/RxJavaSchedulersHook;.getDefaultInstance:()Lrx/plugins/RxJavaSchedulersHook;` @kind static;
  #L4c1d40.  v2:= temp @kind object;
  #L4c1d42.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1d48.  goto L4c1d58;
  #L4c1d4a.  v2:= v3.`rx.plugins.RxJavaPlugins.schedulersHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1d4e.  v0:= (`rx.plugins.RxJavaSchedulersHook`) v0 @kind object;
  #L4c1d52.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1d58.  v0:= v3.`rx.plugins.RxJavaPlugins.schedulersHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1d5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1d62.  v0:= temp @kind object;
  #L4c1d64.  v0:= (`rx.plugins.RxJavaSchedulersHook`) v0 @kind object;
  #L4c1d68.  return v0 @kind object;
}
procedure `rx.plugins.RxJavaSingleExecutionHook` `getSingleExecutionHook`(`rx.plugins.RxJavaPlugins` v3 @kind this) @signature `Lrx/plugins/RxJavaPlugins;.getSingleExecutionHook:()Lrx/plugins/RxJavaSingleExecutionHook;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c1d7c.  v0:= v3.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1d80.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1d86.  v0:= temp @kind object;
  #L4c1d88.  if v0 != 0 then goto L4c1dc8;
  #L4c1d8c.  v0:= constclass @type ^`rx.plugins.RxJavaSingleExecutionHook` @kind object;
  #L4c1d90.  call temp:= `getProperties`() @signature `Ljava/lang/System;.getProperties:()Ljava/util/Properties;` @kind static;
  #L4c1d96.  v1:= temp @kind object;
  #L4c1d98.  call temp:= `getPluginImplementationViaProperty`(v0, v1) @signature `Lrx/plugins/RxJavaPlugins;.getPluginImplementationViaProperty:(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;` @kind static;
  #L4c1d9e.  v0:= temp @kind object;
  #L4c1da0.  v1:= 0I;
  #L4c1da2.  if v0 != 0 then goto L4c1dba;
  #L4c1da6.  v0:= v3.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1daa.  call temp:= `getInstance`() @signature `Lrx/plugins/RxJavaSingleExecutionHookDefault;.getInstance:()Lrx/plugins/RxJavaSingleExecutionHook;` @kind static;
  #L4c1db0.  v2:= temp @kind object;
  #L4c1db2.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1db8.  goto L4c1dc8;
  #L4c1dba.  v2:= v3.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1dbe.  v0:= (`rx.plugins.RxJavaSingleExecutionHook`) v0 @kind object;
  #L4c1dc2.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1dc8.  v0:= v3.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1dcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1dd2.  v0:= temp @kind object;
  #L4c1dd4.  v0:= (`rx.plugins.RxJavaSingleExecutionHook`) v0 @kind object;
  #L4c1dd8.  return v0 @kind object;
}
procedure `void` `registerCompletableExecutionHook`(`rx.plugins.RxJavaPlugins` v2 @kind this, `rx.plugins.RxJavaCompletableExecutionHook` v3 @kind object) @signature `Lrx/plugins/RxJavaPlugins;.registerCompletableExecutionHook:(Lrx/plugins/RxJavaCompletableExecutionHook;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c1e7c.  v0:= v2.`rx.plugins.RxJavaPlugins.completableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1e80.  v1:= 0I;
  #L4c1e82.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1e88.  v3:= temp;
  #L4c1e8a.  if v3 == 0 then goto L4c1e90;
  #L4c1e8e.  return @kind void;
  #L4c1e90.  v3:= new `java.lang.IllegalStateException`;
  #L4c1e94.  v0:= new `java.lang.StringBuilder`;
  #L4c1e98.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1e9e.  v1:= "Another strategy was already registered: " @kind object;
  #L4c1ea2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1ea8.  v1:= v2.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1eac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1eb2.  v1:= temp @kind object;
  #L4c1eb4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1eba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1ec0.  v0:= temp @kind object;
  #L4c1ec2.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c1ec8.  throw v3;
}
procedure `void` `registerErrorHandler`(`rx.plugins.RxJavaPlugins` v2 @kind this, `rx.plugins.RxJavaErrorHandler` v3 @kind object) @signature `Lrx/plugins/RxJavaPlugins;.registerErrorHandler:(Lrx/plugins/RxJavaErrorHandler;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c1edc.  v0:= v2.`rx.plugins.RxJavaPlugins.errorHandler` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1ee0.  v1:= 0I;
  #L4c1ee2.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1ee8.  v3:= temp;
  #L4c1eea.  if v3 == 0 then goto L4c1ef0;
  #L4c1eee.  return @kind void;
  #L4c1ef0.  v3:= new `java.lang.IllegalStateException`;
  #L4c1ef4.  v0:= new `java.lang.StringBuilder`;
  #L4c1ef8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1efe.  v1:= "Another strategy was already registered: " @kind object;
  #L4c1f02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1f08.  v1:= v2.`rx.plugins.RxJavaPlugins.errorHandler` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1f0c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1f12.  v1:= temp @kind object;
  #L4c1f14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1f1a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1f20.  v0:= temp @kind object;
  #L4c1f22.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c1f28.  throw v3;
}
procedure `void` `registerObservableExecutionHook`(`rx.plugins.RxJavaPlugins` v2 @kind this, `rx.plugins.RxJavaObservableExecutionHook` v3 @kind object) @signature `Lrx/plugins/RxJavaPlugins;.registerObservableExecutionHook:(Lrx/plugins/RxJavaObservableExecutionHook;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c1f3c.  v0:= v2.`rx.plugins.RxJavaPlugins.observableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1f40.  v1:= 0I;
  #L4c1f42.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1f48.  v3:= temp;
  #L4c1f4a.  if v3 == 0 then goto L4c1f50;
  #L4c1f4e.  return @kind void;
  #L4c1f50.  v3:= new `java.lang.IllegalStateException`;
  #L4c1f54.  v0:= new `java.lang.StringBuilder`;
  #L4c1f58.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1f5e.  v1:= "Another strategy was already registered: " @kind object;
  #L4c1f62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1f68.  v1:= v2.`rx.plugins.RxJavaPlugins.observableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1f6c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1f72.  v1:= temp @kind object;
  #L4c1f74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1f7a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1f80.  v0:= temp @kind object;
  #L4c1f82.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c1f88.  throw v3;
}
procedure `void` `registerSchedulersHook`(`rx.plugins.RxJavaPlugins` v2 @kind this, `rx.plugins.RxJavaSchedulersHook` v3 @kind object) @signature `Lrx/plugins/RxJavaPlugins;.registerSchedulersHook:(Lrx/plugins/RxJavaSchedulersHook;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c1f9c.  v0:= v2.`rx.plugins.RxJavaPlugins.schedulersHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1fa0.  v1:= 0I;
  #L4c1fa2.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c1fa8.  v3:= temp;
  #L4c1faa.  if v3 == 0 then goto L4c1fb0;
  #L4c1fae.  return @kind void;
  #L4c1fb0.  v3:= new `java.lang.IllegalStateException`;
  #L4c1fb4.  v0:= new `java.lang.StringBuilder`;
  #L4c1fb8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c1fbe.  v1:= "Another strategy was already registered: " @kind object;
  #L4c1fc2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1fc8.  v1:= v2.`rx.plugins.RxJavaPlugins.schedulersHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1fcc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1fd2.  v1:= temp @kind object;
  #L4c1fd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c1fda.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c1fe0.  v0:= temp @kind object;
  #L4c1fe2.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c1fe8.  throw v3;
}
procedure `void` `registerSingleExecutionHook`(`rx.plugins.RxJavaPlugins` v2 @kind this, `rx.plugins.RxJavaSingleExecutionHook` v3 @kind object) @signature `Lrx/plugins/RxJavaPlugins;.registerSingleExecutionHook:(Lrx/plugins/RxJavaSingleExecutionHook;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c1ffc.  v0:= v2.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2000.  v1:= 0I;
  #L4c2002.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c2008.  v3:= temp;
  #L4c200a.  if v3 == 0 then goto L4c2010;
  #L4c200e.  return @kind void;
  #L4c2010.  v3:= new `java.lang.IllegalStateException`;
  #L4c2014.  v0:= new `java.lang.StringBuilder`;
  #L4c2018.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c201e.  v1:= "Another strategy was already registered: " @kind object;
  #L4c2022.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c2028.  v1:= v2.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c202c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c2032.  v1:= temp @kind object;
  #L4c2034.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c203a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c2040.  v0:= temp @kind object;
  #L4c2042.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c2048.  throw v3;
}
procedure `void` `reset`(`rx.plugins.RxJavaPlugins` v2 @kind this) @signature `Lrx/plugins/RxJavaPlugins;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c205c.  v0:= `@@rx.plugins.RxJavaPlugins.INSTANCE` @type ^`rx.plugins.RxJavaPlugins` @kind object;
  #L4c2060.  v0:= v0.`rx.plugins.RxJavaPlugins.errorHandler` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2064.  v1:= 0I;
  #L4c2066.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c206c.  v0:= `@@rx.plugins.RxJavaPlugins.INSTANCE` @type ^`rx.plugins.RxJavaPlugins` @kind object;
  #L4c2070.  v0:= v0.`rx.plugins.RxJavaPlugins.observableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2074.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c207a.  v0:= `@@rx.plugins.RxJavaPlugins.INSTANCE` @type ^`rx.plugins.RxJavaPlugins` @kind object;
  #L4c207e.  v0:= v0.`rx.plugins.RxJavaPlugins.singleExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2082.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c2088.  v0:= `@@rx.plugins.RxJavaPlugins.INSTANCE` @type ^`rx.plugins.RxJavaPlugins` @kind object;
  #L4c208c.  v0:= v0.`rx.plugins.RxJavaPlugins.completableExecutionHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2090.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c2096.  v0:= `@@rx.plugins.RxJavaPlugins.INSTANCE` @type ^`rx.plugins.RxJavaPlugins` @kind object;
  #L4c209a.  v0:= v0.`rx.plugins.RxJavaPlugins.schedulersHook` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c209e.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c20a4.  return @kind void;
}
