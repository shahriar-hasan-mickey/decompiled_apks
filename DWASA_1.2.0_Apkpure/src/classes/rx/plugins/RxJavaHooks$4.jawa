record `rx.plugins.RxJavaHooks$4` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
}
procedure `void` `<init>`(`rx.plugins.RxJavaHooks$4` v0 @kind this) @signature `Lrx/plugins/RxJavaHooks$4;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0b84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c0b8a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.plugins.RxJavaHooks$4` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/plugins/RxJavaHooks$4;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c0b14.  v1:= (`rx.Single`) v1 @kind object;
  #L4c0b18.  v2:= (`rx.Single$OnSubscribe`) v2 @kind object;
  #L4c0b1c.  call temp:= `call`(v0, v1, v2) @signature `Lrx/plugins/RxJavaHooks$4;.call:(Lrx/Single;Lrx/Single$OnSubscribe;)Lrx/Single$OnSubscribe;` @kind virtual;
  #L4c0b22.  v1:= temp @kind object;
  #L4c0b24.  return v1 @kind object;
}
procedure `rx.Single$OnSubscribe` `call`(`rx.plugins.RxJavaHooks$4` v3 @kind this, `rx.Single` v4 @kind object, `rx.Single$OnSubscribe` v5 @kind object) @signature `Lrx/plugins/RxJavaHooks$4;.call:(Lrx/Single;Lrx/Single$OnSubscribe;)Lrx/Single$OnSubscribe;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c0b38.  call temp:= `getInstance`() @signature `Lrx/plugins/RxJavaPlugins;.getInstance:()Lrx/plugins/RxJavaPlugins;` @kind static;
  #L4c0b3e.  v0:= temp @kind object;
  #L4c0b40.  call temp:= `getSingleExecutionHook`(v0) @signature `Lrx/plugins/RxJavaPlugins;.getSingleExecutionHook:()Lrx/plugins/RxJavaSingleExecutionHook;` @kind virtual;
  #L4c0b46.  v0:= temp @kind object;
  #L4c0b48.  call temp:= `getInstance`() @signature `Lrx/plugins/RxJavaSingleExecutionHookDefault;.getInstance:()Lrx/plugins/RxJavaSingleExecutionHook;` @kind static;
  #L4c0b4e.  v1:= temp @kind object;
  #L4c0b50.  if v0 != v1 then goto L4c0b56;
  #L4c0b54.  return v5 @kind object;
  #L4c0b56.  v1:= new `rx.internal.operators.SingleFromObservable`;
  #L4c0b5a.  v2:= new `rx.internal.operators.SingleToObservable`;
  #L4c0b5e.  call `<init>`(v2, v5) @signature `Lrx/internal/operators/SingleToObservable;.<init>:(Lrx/Single$OnSubscribe;)V` @kind direct;
  #L4c0b64.  call temp:= `onSubscribeStart`(v0, v4, v2) @signature `Lrx/plugins/RxJavaSingleExecutionHook;.onSubscribeStart:(Lrx/Single;Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;` @kind virtual;
  #L4c0b6a.  v4:= temp @kind object;
  #L4c0b6c.  call `<init>`(v1, v4) @signature `Lrx/internal/operators/SingleFromObservable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4c0b72.  return v1 @kind object;
}
