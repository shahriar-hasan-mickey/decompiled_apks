record `rx.plugins.RxJavaHooks$8` @kind class @AccessFlag FINAL extends `rx.functions.Func1` @kind interface {
}
procedure `void` `<init>`(`rx.plugins.RxJavaHooks$8` v0 @kind this) @signature `Lrx/plugins/RxJavaHooks$8;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0d18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c0d1e.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.plugins.RxJavaHooks$8` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/plugins/RxJavaHooks$8;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c0ccc.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4c0cd0.  call temp:= `call`(v0, v1) @signature `Lrx/plugins/RxJavaHooks$8;.call:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4c0cd6.  v1:= temp @kind object;
  #L4c0cd8.  return v1 @kind object;
}
procedure `java.lang.Throwable` `call`(`rx.plugins.RxJavaHooks$8` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/plugins/RxJavaHooks$8;.call:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0cec.  call temp:= `getInstance`() @signature `Lrx/plugins/RxJavaPlugins;.getInstance:()Lrx/plugins/RxJavaPlugins;` @kind static;
  #L4c0cf2.  v0:= temp @kind object;
  #L4c0cf4.  call temp:= `getObservableExecutionHook`(v0) @signature `Lrx/plugins/RxJavaPlugins;.getObservableExecutionHook:()Lrx/plugins/RxJavaObservableExecutionHook;` @kind virtual;
  #L4c0cfa.  v0:= temp @kind object;
  #L4c0cfc.  call temp:= `onSubscribeError`(v0, v2) @signature `Lrx/plugins/RxJavaObservableExecutionHook;.onSubscribeError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4c0d02.  v2:= temp @kind object;
  #L4c0d04.  return v2 @kind object;
}
