record `rx.plugins.RxJavaHooks$3` @kind class @AccessFlag FINAL extends `rx.functions.Func1` @kind interface {
}
procedure `void` `<init>`(`rx.plugins.RxJavaHooks$3` v0 @kind this) @signature `Lrx/plugins/RxJavaHooks$3;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0afc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c0b02.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.plugins.RxJavaHooks$3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/plugins/RxJavaHooks$3;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c0ab0.  v1:= (`rx.Subscription`) v1 @kind object;
  #L4c0ab4.  call temp:= `call`(v0, v1) @signature `Lrx/plugins/RxJavaHooks$3;.call:(Lrx/Subscription;)Lrx/Subscription;` @kind virtual;
  #L4c0aba.  v1:= temp @kind object;
  #L4c0abc.  return v1 @kind object;
}
procedure `rx.Subscription` `call`(`rx.plugins.RxJavaHooks$3` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/plugins/RxJavaHooks$3;.call:(Lrx/Subscription;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0ad0.  call temp:= `getInstance`() @signature `Lrx/plugins/RxJavaPlugins;.getInstance:()Lrx/plugins/RxJavaPlugins;` @kind static;
  #L4c0ad6.  v0:= temp @kind object;
  #L4c0ad8.  call temp:= `getObservableExecutionHook`(v0) @signature `Lrx/plugins/RxJavaPlugins;.getObservableExecutionHook:()Lrx/plugins/RxJavaObservableExecutionHook;` @kind virtual;
  #L4c0ade.  v0:= temp @kind object;
  #L4c0ae0.  call temp:= `onSubscribeReturn`(v0, v2) @signature `Lrx/plugins/RxJavaObservableExecutionHook;.onSubscribeReturn:(Lrx/Subscription;)Lrx/Subscription;` @kind virtual;
  #L4c0ae6.  v2:= temp @kind object;
  #L4c0ae8.  return v2 @kind object;
}
