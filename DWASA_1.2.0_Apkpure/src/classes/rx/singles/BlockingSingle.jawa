record `rx.singles.BlockingSingle` @kind class @AccessFlag PUBLIC_FINAL {
  `rx.Single` `rx.singles.BlockingSingle.single` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.singles.BlockingSingle` v0 @kind this, `rx.Single` v1 @kind object) @signature `Lrx/singles/BlockingSingle;.<init>:(Lrx/Single;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4c2fac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c2fb2.  v0.`rx.singles.BlockingSingle.single` @type ^`rx.Single` := v1 @kind object;
  #L4c2fb6.  return @kind void;
}
procedure `rx.singles.BlockingSingle` `from`(`rx.Single` v1 @kind object) @signature `Lrx/singles/BlockingSingle;.from:(Lrx/Single;)Lrx/singles/BlockingSingle;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c2f90.  v0:= new `rx.singles.BlockingSingle`;
  #L4c2f94.  call `<init>`(v0, v1) @signature `Lrx/singles/BlockingSingle;.<init>:(Lrx/Single;)V` @kind direct;
  #L4c2f9a.  return v0 @kind object;
}
procedure `java.util.concurrent.Future` `toFuture`(`rx.singles.BlockingSingle` v1 @kind this) @signature `Lrx/singles/BlockingSingle;.toFuture:()Ljava/util/concurrent/Future;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2f68.  v0:= v1.`rx.singles.BlockingSingle.single` @type ^`rx.Single` @kind object;
  #L4c2f6c.  call temp:= `toObservable`(v0) @signature `Lrx/Single;.toObservable:()Lrx/Observable;` @kind virtual;
  #L4c2f72.  v0:= temp @kind object;
  #L4c2f74.  call temp:= `toFuture`(v0) @signature `Lrx/internal/operators/BlockingOperatorToFuture;.toFuture:(Lrx/Observable;)Ljava/util/concurrent/Future;` @kind static;
  #L4c2f7a.  v0:= temp @kind object;
  #L4c2f7c.  return v0 @kind object;
}
procedure `java.lang.Object` `value`(`rx.singles.BlockingSingle` v5 @kind this) @signature `Lrx/singles/BlockingSingle;.value:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c2ef8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c2efc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c2f02.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c2f06.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c2f0c.  v2:= new `java.util.concurrent.CountDownLatch`;
  #L4c2f10.  v3:= 1I;
  #L4c2f12.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4c2f18.  v3:= v5.`rx.singles.BlockingSingle.single` @type ^`rx.Single` @kind object;
  #L4c2f1c.  v4:= new `rx.singles.BlockingSingle$1`;
  #L4c2f20.  call `<init>`(v4, v5, v0, v2, v1) @signature `Lrx/singles/BlockingSingle$1;.<init>:(Lrx/singles/BlockingSingle;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4c2f26.  call temp:= `subscribe`(v3, v4) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L4c2f2c.  v3:= temp @kind object;
  #L4c2f2e.  call `awaitForComplete`(v2, v3) @signature `Lrx/internal/util/BlockingUtils;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;)V` @kind static;
  #L4c2f34.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c2f3a.  v1:= temp @kind object;
  #L4c2f3c.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4c2f40.  if v1 != 0 then goto L4c2f4e;
  #L4c2f44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c2f4a.  v0:= temp @kind object;
  #L4c2f4c.  return v0 @kind object;
  #L4c2f4e.  call temp:= `propagate`(v1) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4c2f54.  v0:= temp @kind object;
  #L4c2f56.  throw v0;
}
