record `rx.singles.BlockingSingle$1` @kind class @AccessFlag  extends `rx.SingleSubscriber` @kind class {
  `rx.singles.BlockingSingle` `rx.singles.BlockingSingle$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.CountDownLatch` `rx.singles.BlockingSingle$1.val$latch` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.singles.BlockingSingle$1.val$returnException` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.singles.BlockingSingle$1.val$returnItem` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.singles.BlockingSingle$1` v0 @kind this, `rx.singles.BlockingSingle` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.CountDownLatch` v3 @kind object, `java.util.concurrent.atomic.AtomicReference` v4 @kind object) @signature `Lrx/singles/BlockingSingle$1;.<init>:(Lrx/singles/BlockingSingle;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c2e80.  v0.`rx.singles.BlockingSingle$1.this$0` @type ^`rx.singles.BlockingSingle` := v1 @kind object;
  #L4c2e84.  v0.`rx.singles.BlockingSingle$1.val$returnItem` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c2e88.  v0.`rx.singles.BlockingSingle$1.val$latch` @type ^`java.util.concurrent.CountDownLatch` := v3 @kind object;
  #L4c2e8c.  v0.`rx.singles.BlockingSingle$1.val$returnException` @type ^`java.util.concurrent.atomic.AtomicReference` := v4 @kind object;
  #L4c2e90.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4c2e96.  return @kind void;
}
procedure `void` `onError`(`rx.singles.BlockingSingle$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/singles/BlockingSingle$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2ea8.  v0:= v1.`rx.singles.BlockingSingle$1.val$returnException` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2eac.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c2eb2.  v2:= v1.`rx.singles.BlockingSingle$1.val$latch` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4c2eb6.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4c2ebc.  return @kind void;
}
procedure `void` `onSuccess`(`rx.singles.BlockingSingle$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/singles/BlockingSingle$1;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2ed0.  v0:= v1.`rx.singles.BlockingSingle$1.val$returnItem` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2ed4.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c2eda.  v2:= v1.`rx.singles.BlockingSingle$1.val$latch` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4c2ede.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4c2ee4.  return @kind void;
}
