record `rx.Completable$3` @kind class @AccessFlag FINAL extends `rx.Completable$OnSubscribe` @kind interface {
  `rx.Completable`[] `rx.Completable$3.val$sources` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$3` v0 @kind this, `rx.Completable`[] v1 @kind object) @signature `Lrx/Completable$3;.<init>:([Lrx/Completable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4881a8.  v0.`rx.Completable$3.val$sources` @type ^`rx.Completable`[] := v1 @kind object;
  #L4881ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4881b2.  return @kind void;
}
procedure `void` `call`(`rx.Completable$3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Completable$3;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4881c4.  v1:= (`rx.CompletableSubscriber`) v1 @kind object;
  #L4881c8.  call `call`(v0, v1) @signature `Lrx/Completable$3;.call:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L4881ce.  return @kind void;
}
procedure `void` `call`(`rx.Completable$3` v9 @kind this, `rx.CompletableSubscriber` v10 @kind object) @signature `Lrx/Completable$3;.call:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4881e0.  v0:= new `rx.subscriptions.CompositeSubscription`;
  #L4881e4.  call `<init>`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L4881ea.  call `onSubscribe`(v10, v0) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L4881f0.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4881f4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4881fa.  v2:= new `rx.Completable$3$1`;
  #L4881fe.  call `<init>`(v2, v9, v1, v0, v10) @signature `Lrx/Completable$3$1;.<init>:(Lrx/Completable$3;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/subscriptions/CompositeSubscription;Lrx/CompletableSubscriber;)V` @kind direct;
  #L488204.  v3:= v9.`rx.Completable$3.val$sources` @type ^`rx.Completable`[] @kind object;
  #L488208.  v4:= length @variable v3;
  #L48820a.  v5:= 0I;
  #L48820c.  v6:= 0I;
  #L48820e.  if v6 >= v4 then goto L488280;
  #L488212.  v7:= v3[v6] @kind object;
  #L488216.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L48821c.  v8:= temp;
  #L48821e.  if v8 == 0 then goto L488224;
  #L488222.  return @kind void;
  #L488224.  if v7 != 0 then goto L48825a;
  #L488228.  v2:= new `java.lang.NullPointerException`;
  #L48822c.  v3:= "One of the sources is null" @kind object;
  #L488230.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L488236.  v3:= 1I;
  #L488238.  call temp:= `compareAndSet`(v1, v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L48823e.  v1:= temp;
  #L488240.  if v1 == 0 then goto L488252;
  #L488244.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L48824a.  call `onError`(v10, v2) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L488250.  goto L488258;
  #L488252.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L488258.  return @kind void;
  #L48825a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L488260.  v8:= temp;
  #L488262.  if v8 != 0 then goto L488280;
  #L488266.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L48826c.  v8:= temp;
  #L48826e.  if v8 == 0 then goto L488274;
  #L488272.  goto L488280;
  #L488274.  call `unsafeSubscribe`(v7, v2) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L48827a.  v6:= v6 + 1;
  #L48827e.  goto L48820e;
  #L488280.  return @kind void;
}
