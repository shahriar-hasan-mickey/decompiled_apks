record `rx.SingleSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `rx.Subscription` @kind interface {
  `rx.internal.util.SubscriptionList` `rx.SingleSubscriber.cs` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.SingleSubscriber` v1 @kind this) @signature `Lrx/SingleSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48f1b4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48f1ba.  v0:= new `rx.internal.util.SubscriptionList`;
  #L48f1be.  call `<init>`(v0) @signature `Lrx/internal/util/SubscriptionList;.<init>:()V` @kind direct;
  #L48f1c4.  v1.`rx.SingleSubscriber.cs` @type ^`rx.internal.util.SubscriptionList` := v0 @kind object;
  #L48f1c8.  return @kind void;
}
procedure `void` `add`(`rx.SingleSubscriber` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f1dc.  v0:= v1.`rx.SingleSubscriber.cs` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L48f1e0.  call `add`(v0, v2) @signature `Lrx/internal/util/SubscriptionList;.add:(Lrx/Subscription;)V` @kind virtual;
  #L48f1e6.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.SingleSubscriber` v1 @kind this) @signature `Lrx/SingleSubscriber;.isUnsubscribed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f194.  v0:= v1.`rx.SingleSubscriber.cs` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L48f198.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/util/SubscriptionList;.isUnsubscribed:()Z` @kind virtual;
  #L48f19e.  v0:= temp;
  #L48f1a0.  return v0;
}
procedure `void` `onError`(`java.lang.Throwable` v0 @kind object) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `onSuccess`(`java.lang.Object` v0 @kind object) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `unsubscribe`(`rx.SingleSubscriber` v1 @kind this) @signature `Lrx/SingleSubscriber;.unsubscribe:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f1f8.  v0:= v1.`rx.SingleSubscriber.cs` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L48f1fc.  call `unsubscribe`(v0) @signature `Lrx/internal/util/SubscriptionList;.unsubscribe:()V` @kind virtual;
  #L48f202.  return @kind void;
}
