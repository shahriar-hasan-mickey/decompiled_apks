record `rx.observables.ConnectableObservable` @kind class @AccessFlag PUBLIC_ABSTRACT extends `rx.Observable` @kind class {
}
procedure `void` `<init>`(`rx.observables.ConnectableObservable` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object) @signature `Lrx/observables/ConnectableObservable;.<init>:(Lrx/Observable$OnSubscribe;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4bd688.  call `<init>`(v0, v1) @signature `Lrx/Observable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4bd68e.  return @kind void;
}
procedure `rx.Observable` `autoConnect`(`rx.observables.ConnectableObservable` v1 @kind this) @signature `Lrx/observables/ConnectableObservable;.autoConnect:()Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd5c4.  v0:= 1I;
  #L4bd5c6.  call temp:= `autoConnect`(v1, v0) @signature `Lrx/observables/ConnectableObservable;.autoConnect:(I)Lrx/Observable;` @kind virtual;
  #L4bd5cc.  v0:= temp @kind object;
  #L4bd5ce.  return v0 @kind object;
}
procedure `rx.Observable` `autoConnect`(`rx.observables.ConnectableObservable` v1 @kind this, `int` v2 ) @signature `Lrx/observables/ConnectableObservable;.autoConnect:(I)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd5e0.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L4bd5e6.  v0:= temp @kind object;
  #L4bd5e8.  call temp:= `autoConnect`(v1, v2, v0) @signature `Lrx/observables/ConnectableObservable;.autoConnect:(ILrx/functions/Action1;)Lrx/Observable;` @kind virtual;
  #L4bd5ee.  v2:= temp @kind object;
  #L4bd5f0.  return v2 @kind object;
}
procedure `rx.Observable` `autoConnect`(`rx.observables.ConnectableObservable` v1 @kind this, `int` v2 , `rx.functions.Action1` v3 @kind object) @signature `Lrx/observables/ConnectableObservable;.autoConnect:(ILrx/functions/Action1;)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd604.  if v2 > 0 then goto L4bd610;
  #L4bd608.  call `connect`(v1, v3) @signature `Lrx/observables/ConnectableObservable;.connect:(Lrx/functions/Action1;)V` @kind virtual;
  #L4bd60e.  return v1 @kind object;
  #L4bd610.  v0:= new `rx.internal.operators.OnSubscribeAutoConnect`;
  #L4bd614.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OnSubscribeAutoConnect;.<init>:(Lrx/observables/ConnectableObservable;ILrx/functions/Action1;)V` @kind direct;
  #L4bd61a.  call temp:= `create`(v0) @signature `Lrx/observables/ConnectableObservable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L4bd620.  v2:= temp @kind object;
  #L4bd622.  return v2 @kind object;
}
procedure `rx.Subscription` `connect`(`rx.observables.ConnectableObservable` v2 @kind this) @signature `Lrx/observables/ConnectableObservable;.connect:()Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd658.  v0:= 1I;
  #L4bd65a.  v0:= new `rx.Subscription`[v0];
  #L4bd65e.  v1:= new `rx.observables.ConnectableObservable$1`;
  #L4bd662.  call `<init>`(v1, v2, v0) @signature `Lrx/observables/ConnectableObservable$1;.<init>:(Lrx/observables/ConnectableObservable;[Lrx/Subscription;)V` @kind direct;
  #L4bd668.  call `connect`(v2, v1) @signature `Lrx/observables/ConnectableObservable;.connect:(Lrx/functions/Action1;)V` @kind virtual;
  #L4bd66e.  v1:= 0I;
  #L4bd670.  v0:= v0[v1] @kind object;
  #L4bd674.  return v0 @kind object;
}
procedure `void` `connect`(`rx.functions.Action1` v0 @kind object) @signature `Lrx/observables/ConnectableObservable;.connect:(Lrx/functions/Action1;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `rx.Observable` `refCount`(`rx.observables.ConnectableObservable` v1 @kind this) @signature `Lrx/observables/ConnectableObservable;.refCount:()Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd634.  v0:= new `rx.internal.operators.OnSubscribeRefCount`;
  #L4bd638.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRefCount;.<init>:(Lrx/observables/ConnectableObservable;)V` @kind direct;
  #L4bd63e.  call temp:= `create`(v0) @signature `Lrx/observables/ConnectableObservable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L4bd644.  v0:= temp @kind object;
  #L4bd646.  return v0 @kind object;
}
