record `rx.observables.ConnectableObservable$1` @kind class @AccessFlag  extends `rx.functions.Action1` @kind interface {
  `rx.observables.ConnectableObservable` `rx.observables.ConnectableObservable$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscription`[] `rx.observables.ConnectableObservable$1.val$out` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.ConnectableObservable$1` v0 @kind this, `rx.observables.ConnectableObservable` v1 @kind object, `rx.Subscription`[] v2 @kind object) @signature `Lrx/observables/ConnectableObservable$1;.<init>:(Lrx/observables/ConnectableObservable;[Lrx/Subscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bd56c.  v0.`rx.observables.ConnectableObservable$1.this$0` @type ^`rx.observables.ConnectableObservable` := v1 @kind object;
  #L4bd570.  v0.`rx.observables.ConnectableObservable$1.val$out` @type ^`rx.Subscription`[] := v2 @kind object;
  #L4bd574.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bd57a.  return @kind void;
}
procedure `void` `call`(`rx.observables.ConnectableObservable$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/observables/ConnectableObservable$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bd58c.  v1:= (`rx.Subscription`) v1 @kind object;
  #L4bd590.  call `call`(v0, v1) @signature `Lrx/observables/ConnectableObservable$1;.call:(Lrx/Subscription;)V` @kind virtual;
  #L4bd596.  return @kind void;
}
procedure `void` `call`(`rx.observables.ConnectableObservable$1` v2 @kind this, `rx.Subscription` v3 @kind object) @signature `Lrx/observables/ConnectableObservable$1;.call:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bd5a8.  v0:= v2.`rx.observables.ConnectableObservable$1.val$out` @type ^`rx.Subscription`[] @kind object;
  #L4bd5ac.  v1:= 0I;
  #L4bd5ae.  v0[v1]:= v3 @kind object;
  #L4bd5b2.  return @kind void;
}
