record `rx.observables.BlockingObservable$8` @kind class @AccessFlag  extends `rx.functions.Action1` @kind interface {
  `rx.observables.BlockingObservable` `rx.observables.BlockingObservable$8.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable$8` v0 @kind this, `rx.observables.BlockingObservable` v1 @kind object) @signature `Lrx/observables/BlockingObservable$8;.<init>:(Lrx/observables/BlockingObservable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bcdc8.  v0.`rx.observables.BlockingObservable$8.this$0` @type ^`rx.observables.BlockingObservable` := v1 @kind object;
  #L4bcdcc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bcdd2.  return @kind void;
}
procedure `void` `call`(`rx.observables.BlockingObservable$8` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/observables/BlockingObservable$8;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bcde4.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4bcde8.  call `call`(v0, v1) @signature `Lrx/observables/BlockingObservable$8;.call:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bcdee.  return @kind void;
}
procedure `void` `call`(`rx.observables.BlockingObservable$8` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observables/BlockingObservable$8;.call:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bce00.  v0:= new `rx.exceptions.OnErrorNotImplementedException`;
  #L4bce04.  call `<init>`(v0, v2) @signature `Lrx/exceptions/OnErrorNotImplementedException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4bce0a.  throw v0;
}
