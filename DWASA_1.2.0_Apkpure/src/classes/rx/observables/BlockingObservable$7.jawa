record `rx.observables.BlockingObservable$7` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.observables.BlockingObservable` `rx.observables.BlockingObservable$7.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.BlockingQueue` `rx.observables.BlockingObservable$7.val$queue` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable$7` v0 @kind this, `rx.observables.BlockingObservable` v1 @kind object, `java.util.concurrent.BlockingQueue` v2 @kind object) @signature `Lrx/observables/BlockingObservable$7;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/BlockingQueue;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bcd88.  v0.`rx.observables.BlockingObservable$7.this$0` @type ^`rx.observables.BlockingObservable` := v1 @kind object;
  #L4bcd8c.  v0.`rx.observables.BlockingObservable$7.val$queue` @type ^`java.util.concurrent.BlockingQueue` := v2 @kind object;
  #L4bcd90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bcd96.  return @kind void;
}
procedure `void` `call`(`rx.observables.BlockingObservable$7` v2 @kind this) @signature `Lrx/observables/BlockingObservable$7;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bcda8.  v0:= v2.`rx.observables.BlockingObservable$7.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bcdac.  v1:= `@@rx.observables.BlockingObservable.UNSUBSCRIBE` @type ^`java.lang.Object` @kind object;
  #L4bcdb0.  call temp:= `offer`(v0, v1) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcdb6.  return @kind void;
}
