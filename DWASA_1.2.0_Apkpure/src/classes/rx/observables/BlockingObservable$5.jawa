record `rx.observables.BlockingObservable$5` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.observables.BlockingObservable` `rx.observables.BlockingObservable$5.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.BlockingQueue` `rx.observables.BlockingObservable$5.val$queue` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable$5` v0 @kind this, `rx.observables.BlockingObservable` v1 @kind object, `java.util.concurrent.BlockingQueue` v2 @kind object) @signature `Lrx/observables/BlockingObservable$5;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/BlockingQueue;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bcc20.  v0.`rx.observables.BlockingObservable$5.this$0` @type ^`rx.observables.BlockingObservable` := v1 @kind object;
  #L4bcc24.  v0.`rx.observables.BlockingObservable$5.val$queue` @type ^`java.util.concurrent.BlockingQueue` := v2 @kind object;
  #L4bcc28.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4bcc2e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observables.BlockingObservable$5` v2 @kind this) @signature `Lrx/observables/BlockingObservable$5;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bcc40.  v0:= v2.`rx.observables.BlockingObservable$5.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bcc44.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4bcc4a.  v1:= temp @kind object;
  #L4bcc4c.  call temp:= `offer`(v0, v1) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcc52.  return @kind void;
}
procedure `void` `onError`(`rx.observables.BlockingObservable$5` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observables/BlockingObservable$5;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcc64.  v0:= v1.`rx.observables.BlockingObservable$5.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bcc68.  call temp:= `error`(v2) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4bcc6e.  v2:= temp @kind object;
  #L4bcc70.  call temp:= `offer`(v0, v2) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcc76.  return @kind void;
}
procedure `void` `onNext`(`rx.observables.BlockingObservable$5` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observables/BlockingObservable$5;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcc88.  v0:= v1.`rx.observables.BlockingObservable$5.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bcc8c.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4bcc92.  v2:= temp @kind object;
  #L4bcc94.  call temp:= `offer`(v0, v2) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcc9a.  return @kind void;
}
