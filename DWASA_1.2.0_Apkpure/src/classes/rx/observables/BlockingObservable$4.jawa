record `rx.observables.BlockingObservable$4` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.observables.BlockingObservable` `rx.observables.BlockingObservable$4.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.CountDownLatch` `rx.observables.BlockingObservable$4.val$cdl` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Throwable`[] `rx.observables.BlockingObservable$4.val$error` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable$4` v0 @kind this, `rx.observables.BlockingObservable` v1 @kind object, `java.lang.Throwable`[] v2 @kind object, `java.util.concurrent.CountDownLatch` v3 @kind object) @signature `Lrx/observables/BlockingObservable$4;.<init>:(Lrx/observables/BlockingObservable;[Ljava/lang/Throwable;Ljava/util/concurrent/CountDownLatch;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bcba4.  v0.`rx.observables.BlockingObservable$4.this$0` @type ^`rx.observables.BlockingObservable` := v1 @kind object;
  #L4bcba8.  v0.`rx.observables.BlockingObservable$4.val$error` @type ^`java.lang.Throwable`[] := v2 @kind object;
  #L4bcbac.  v0.`rx.observables.BlockingObservable$4.val$cdl` @type ^`java.util.concurrent.CountDownLatch` := v3 @kind object;
  #L4bcbb0.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4bcbb6.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observables.BlockingObservable$4` v1 @kind this) @signature `Lrx/observables/BlockingObservable$4;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcbc8.  v0:= v1.`rx.observables.BlockingObservable$4.val$cdl` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4bcbcc.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4bcbd2.  return @kind void;
}
procedure `void` `onError`(`rx.observables.BlockingObservable$4` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/observables/BlockingObservable$4;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bcbe4.  v0:= v2.`rx.observables.BlockingObservable$4.val$error` @type ^`java.lang.Throwable`[] @kind object;
  #L4bcbe8.  v1:= 0I;
  #L4bcbea.  v0[v1]:= v3 @kind object;
  #L4bcbee.  v3:= v2.`rx.observables.BlockingObservable$4.val$cdl` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4bcbf2.  call `countDown`(v3) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4bcbf8.  return @kind void;
}
procedure `void` `onNext`(`rx.observables.BlockingObservable$4` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/observables/BlockingObservable$4;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4bcc0c.  return @kind void;
}
