record `rx.observables.BlockingObservable$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.observables.BlockingObservable` `rx.observables.BlockingObservable$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.observables.BlockingObservable$1.val$exceptionFromOnError` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.CountDownLatch` `rx.observables.BlockingObservable$1.val$latch` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Action1` `rx.observables.BlockingObservable$1.val$onNext` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable$1` v0 @kind this, `rx.observables.BlockingObservable` v1 @kind object, `java.util.concurrent.CountDownLatch` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `rx.functions.Action1` v4 @kind object) @signature `Lrx/observables/BlockingObservable$1;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference;Lrx/functions/Action1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bca58.  v0.`rx.observables.BlockingObservable$1.this$0` @type ^`rx.observables.BlockingObservable` := v1 @kind object;
  #L4bca5c.  v0.`rx.observables.BlockingObservable$1.val$latch` @type ^`java.util.concurrent.CountDownLatch` := v2 @kind object;
  #L4bca60.  v0.`rx.observables.BlockingObservable$1.val$exceptionFromOnError` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4bca64.  v0.`rx.observables.BlockingObservable$1.val$onNext` @type ^`rx.functions.Action1` := v4 @kind object;
  #L4bca68.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4bca6e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observables.BlockingObservable$1` v1 @kind this) @signature `Lrx/observables/BlockingObservable$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bca80.  v0:= v1.`rx.observables.BlockingObservable$1.val$latch` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4bca84.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4bca8a.  return @kind void;
}
procedure `void` `onError`(`rx.observables.BlockingObservable$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observables/BlockingObservable$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bca9c.  v0:= v1.`rx.observables.BlockingObservable$1.val$exceptionFromOnError` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bcaa0.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4bcaa6.  v2:= v1.`rx.observables.BlockingObservable$1.val$latch` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4bcaaa.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4bcab0.  return @kind void;
}
procedure `void` `onNext`(`rx.observables.BlockingObservable$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observables/BlockingObservable$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcac4.  v0:= v1.`rx.observables.BlockingObservable$1.val$onNext` @type ^`rx.functions.Action1` @kind object;
  #L4bcac8.  call `call`(v0, v2) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4bcace.  return @kind void;
}
