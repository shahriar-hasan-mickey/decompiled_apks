record `rx.observables.BlockingObservable$3` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.observables.BlockingObservable` `rx.observables.BlockingObservable$3.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.CountDownLatch` `rx.observables.BlockingObservable$3.val$latch` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.observables.BlockingObservable$3.val$returnException` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.observables.BlockingObservable$3.val$returnItem` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable$3` v0 @kind this, `rx.observables.BlockingObservable` v1 @kind object, `java.util.concurrent.CountDownLatch` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.atomic.AtomicReference` v4 @kind object) @signature `Lrx/observables/BlockingObservable$3;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bcb1c.  v0.`rx.observables.BlockingObservable$3.this$0` @type ^`rx.observables.BlockingObservable` := v1 @kind object;
  #L4bcb20.  v0.`rx.observables.BlockingObservable$3.val$latch` @type ^`java.util.concurrent.CountDownLatch` := v2 @kind object;
  #L4bcb24.  v0.`rx.observables.BlockingObservable$3.val$returnException` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4bcb28.  v0.`rx.observables.BlockingObservable$3.val$returnItem` @type ^`java.util.concurrent.atomic.AtomicReference` := v4 @kind object;
  #L4bcb2c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4bcb32.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observables.BlockingObservable$3` v1 @kind this) @signature `Lrx/observables/BlockingObservable$3;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcb44.  v0:= v1.`rx.observables.BlockingObservable$3.val$latch` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4bcb48.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4bcb4e.  return @kind void;
}
procedure `void` `onError`(`rx.observables.BlockingObservable$3` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observables/BlockingObservable$3;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcb60.  v0:= v1.`rx.observables.BlockingObservable$3.val$returnException` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bcb64.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4bcb6a.  v2:= v1.`rx.observables.BlockingObservable$3.val$latch` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4bcb6e.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4bcb74.  return @kind void;
}
procedure `void` `onNext`(`rx.observables.BlockingObservable$3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observables/BlockingObservable$3;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcb88.  v0:= v1.`rx.observables.BlockingObservable$3.val$returnItem` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bcb8c.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4bcb92.  return @kind void;
}
