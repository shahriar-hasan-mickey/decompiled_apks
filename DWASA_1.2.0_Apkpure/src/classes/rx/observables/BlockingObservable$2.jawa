record `rx.observables.BlockingObservable$2` @kind class @AccessFlag  extends `java.lang.Iterable` @kind interface {
  `rx.observables.BlockingObservable` `rx.observables.BlockingObservable$2.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable$2` v0 @kind this, `rx.observables.BlockingObservable` v1 @kind object) @signature `Lrx/observables/BlockingObservable$2;.<init>:(Lrx/observables/BlockingObservable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bcb00.  v0.`rx.observables.BlockingObservable$2.this$0` @type ^`rx.observables.BlockingObservable` := v1 @kind object;
  #L4bcb04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bcb0a.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`rx.observables.BlockingObservable$2` v1 @kind this) @signature `Lrx/observables/BlockingObservable$2;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcae0.  v0:= v1.`rx.observables.BlockingObservable$2.this$0` @type ^`rx.observables.BlockingObservable` @kind object;
  #L4bcae4.  call temp:= `getIterator`(v0) @signature `Lrx/observables/BlockingObservable;.getIterator:()Ljava/util/Iterator;` @kind virtual;
  #L4bcaea.  v0:= temp @kind object;
  #L4bcaec.  return v0 @kind object;
}
