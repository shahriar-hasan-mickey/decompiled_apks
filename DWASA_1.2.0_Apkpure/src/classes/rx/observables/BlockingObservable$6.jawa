record `rx.observables.BlockingObservable$6` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.observables.BlockingObservable` `rx.observables.BlockingObservable$6.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.BlockingQueue` `rx.observables.BlockingObservable$6.val$queue` @AccessFlag FINAL_SYNTHETIC;
  `rx.Producer`[] `rx.observables.BlockingObservable$6.val$theProducer` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable$6` v0 @kind this, `rx.observables.BlockingObservable` v1 @kind object, `java.util.concurrent.BlockingQueue` v2 @kind object, `rx.Producer`[] v3 @kind object) @signature `Lrx/observables/BlockingObservable$6;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/BlockingQueue;[Lrx/Producer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bccac.  v0.`rx.observables.BlockingObservable$6.this$0` @type ^`rx.observables.BlockingObservable` := v1 @kind object;
  #L4bccb0.  v0.`rx.observables.BlockingObservable$6.val$queue` @type ^`java.util.concurrent.BlockingQueue` := v2 @kind object;
  #L4bccb4.  v0.`rx.observables.BlockingObservable$6.val$theProducer` @type ^`rx.Producer`[] := v3 @kind object;
  #L4bccb8.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4bccbe.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observables.BlockingObservable$6` v2 @kind this) @signature `Lrx/observables/BlockingObservable$6;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bccd0.  v0:= v2.`rx.observables.BlockingObservable$6.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bccd4.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4bccda.  v1:= temp @kind object;
  #L4bccdc.  call temp:= `offer`(v0, v1) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcce2.  return @kind void;
}
procedure `void` `onError`(`rx.observables.BlockingObservable$6` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observables/BlockingObservable$6;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bccf4.  v0:= v1.`rx.observables.BlockingObservable$6.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bccf8.  call temp:= `error`(v2) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4bccfe.  v2:= temp @kind object;
  #L4bcd00.  call temp:= `offer`(v0, v2) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcd06.  return @kind void;
}
procedure `void` `onNext`(`rx.observables.BlockingObservable$6` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observables/BlockingObservable$6;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcd18.  v0:= v1.`rx.observables.BlockingObservable$6.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bcd1c.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4bcd22.  v2:= temp @kind object;
  #L4bcd24.  call temp:= `offer`(v0, v2) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcd2a.  return @kind void;
}
procedure `void` `onStart`(`rx.observables.BlockingObservable$6` v2 @kind this) @signature `Lrx/observables/BlockingObservable$6;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bcd3c.  v0:= v2.`rx.observables.BlockingObservable$6.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bcd40.  v1:= `@@rx.observables.BlockingObservable.ON_START` @type ^`java.lang.Object` @kind object;
  #L4bcd44.  call temp:= `offer`(v0, v1) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcd4a.  return @kind void;
}
procedure `void` `setProducer`(`rx.observables.BlockingObservable$6` v2 @kind this, `rx.Producer` v3 @kind object) @signature `Lrx/observables/BlockingObservable$6;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bcd5c.  v0:= v2.`rx.observables.BlockingObservable$6.val$theProducer` @type ^`rx.Producer`[] @kind object;
  #L4bcd60.  v1:= 0I;
  #L4bcd62.  v0[v1]:= v3 @kind object;
  #L4bcd66.  v3:= v2.`rx.observables.BlockingObservable$6.val$queue` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4bcd6a.  v0:= `@@rx.observables.BlockingObservable.SET_PRODUCER` @type ^`java.lang.Object` @kind object;
  #L4bcd6e.  call temp:= `offer`(v3, v0) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bcd74.  return @kind void;
}
