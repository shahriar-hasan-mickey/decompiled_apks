record `rx.observables.BlockingObservable` @kind class @AccessFlag PUBLIC_FINAL {
  `rx.Observable` `rx.observables.BlockingObservable.o` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Object` `@@rx.observables.BlockingObservable.ON_START` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@rx.observables.BlockingObservable.SET_PRODUCER` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@rx.observables.BlockingObservable.UNSUBSCRIBE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/observables/BlockingObservable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4bd238.  v0:= new `java.lang.Object`;
  #L4bd23c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bd242.  `@@rx.observables.BlockingObservable.ON_START` @type ^`java.lang.Object` := v0 @kind object;
  #L4bd246.  v0:= new `java.lang.Object`;
  #L4bd24a.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bd250.  `@@rx.observables.BlockingObservable.SET_PRODUCER` @type ^`java.lang.Object` := v0 @kind object;
  #L4bd254.  v0:= new `java.lang.Object`;
  #L4bd258.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bd25e.  `@@rx.observables.BlockingObservable.UNSUBSCRIBE` @type ^`java.lang.Object` := v0 @kind object;
  #L4bd262.  return @kind void;
}
procedure `void` `<init>`(`rx.observables.BlockingObservable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/observables/BlockingObservable;.<init>:(Lrx/Observable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4bd274.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bd27a.  v0.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` := v1 @kind object;
  #L4bd27e.  return @kind void;
}
procedure `java.lang.Object` `blockForSingle`(`rx.observables.BlockingObservable` v4 @kind this, `rx.Observable` v5 @kind object) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bcf14.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4bcf18.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4bcf1e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4bcf22.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4bcf28.  v2:= new `java.util.concurrent.CountDownLatch`;
  #L4bcf2c.  v3:= 1I;
  #L4bcf2e.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4bcf34.  v3:= new `rx.observables.BlockingObservable$3`;
  #L4bcf38.  call `<init>`(v3, v4, v2, v1, v0) @signature `Lrx/observables/BlockingObservable$3;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4bcf3e.  call temp:= `subscribe`(v5, v3) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4bcf44.  v5:= temp @kind object;
  #L4bcf46.  call `awaitForComplete`(v2, v5) @signature `Lrx/internal/util/BlockingUtils;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;)V` @kind static;
  #L4bcf4c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bcf52.  v5:= temp @kind object;
  #L4bcf54.  if v5 == 0 then goto L4bcf6a;
  #L4bcf58.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bcf5e.  v5:= temp @kind object;
  #L4bcf60.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4bcf64.  call temp:= `propagate`(v5) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4bcf6a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bcf70.  v5:= temp @kind object;
  #L4bcf72.  return v5 @kind object;
}
procedure `rx.observables.BlockingObservable` `from`(`rx.Observable` v1 @kind object) @signature `Lrx/observables/BlockingObservable;.from:(Lrx/Observable;)Lrx/observables/BlockingObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bd21c.  v0:= new `rx.observables.BlockingObservable`;
  #L4bd220.  call `<init>`(v0, v1) @signature `Lrx/observables/BlockingObservable;.<init>:(Lrx/Observable;)V` @kind direct;
  #L4bd226.  return v0 @kind object;
}
procedure `java.lang.Object` `first`(`rx.observables.BlockingObservable` v1 @kind this) @signature `Lrx/observables/BlockingObservable;.first:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcf84.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bcf88.  call temp:= `first`(v0) @signature `Lrx/Observable;.first:()Lrx/Observable;` @kind virtual;
  #L4bcf8e.  v0:= temp @kind object;
  #L4bcf90.  call temp:= `blockForSingle`(v1, v0) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bcf96.  v0:= temp @kind object;
  #L4bcf98.  return v0 @kind object;
}
procedure `java.lang.Object` `first`(`rx.observables.BlockingObservable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/observables/BlockingObservable;.first:(Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcfac.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bcfb0.  call temp:= `first`(v0, v2) @signature `Lrx/Observable;.first:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bcfb6.  v2:= temp @kind object;
  #L4bcfb8.  call temp:= `blockForSingle`(v1, v2) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bcfbe.  v2:= temp @kind object;
  #L4bcfc0.  return v2 @kind object;
}
procedure `java.lang.Object` `firstOrDefault`(`rx.observables.BlockingObservable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/observables/BlockingObservable;.firstOrDefault:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bcfd4.  v0:= v2.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bcfd8.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bcfde.  v1:= temp @kind object;
  #L4bcfe0.  call temp:= `map`(v0, v1) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bcfe6.  v0:= temp @kind object;
  #L4bcfe8.  call temp:= `firstOrDefault`(v0, v3) @signature `Lrx/Observable;.firstOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L4bcfee.  v3:= temp @kind object;
  #L4bcff0.  call temp:= `blockForSingle`(v2, v3) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bcff6.  v3:= temp @kind object;
  #L4bcff8.  return v3 @kind object;
}
procedure `java.lang.Object` `firstOrDefault`(`rx.observables.BlockingObservable` v1 @kind this, `java.lang.Object` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/observables/BlockingObservable;.firstOrDefault:(Ljava/lang/Object;Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd00c.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd010.  call temp:= `filter`(v0, v3) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd016.  v3:= temp @kind object;
  #L4bd018.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd01e.  v0:= temp @kind object;
  #L4bd020.  call temp:= `map`(v3, v0) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd026.  v3:= temp @kind object;
  #L4bd028.  call temp:= `firstOrDefault`(v3, v2) @signature `Lrx/Observable;.firstOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L4bd02e.  v2:= temp @kind object;
  #L4bd030.  call temp:= `blockForSingle`(v1, v2) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd036.  v2:= temp @kind object;
  #L4bd038.  return v2 @kind object;
}
procedure `void` `forEach`(`rx.observables.BlockingObservable` v4 @kind this, `rx.functions.Action1` v5 @kind object) @signature `Lrx/observables/BlockingObservable;.forEach:(Lrx/functions/Action1;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bd290.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L4bd294.  v1:= 1I;
  #L4bd296.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4bd29c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4bd2a0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4bd2a6.  v2:= v4.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd2aa.  v3:= new `rx.observables.BlockingObservable$1`;
  #L4bd2ae.  call `<init>`(v3, v4, v0, v1, v5) @signature `Lrx/observables/BlockingObservable$1;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference;Lrx/functions/Action1;)V` @kind direct;
  #L4bd2b4.  call temp:= `subscribe`(v2, v3) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4bd2ba.  v5:= temp @kind object;
  #L4bd2bc.  call `awaitForComplete`(v0, v5) @signature `Lrx/internal/util/BlockingUtils;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;)V` @kind static;
  #L4bd2c2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bd2c8.  v5:= temp @kind object;
  #L4bd2ca.  if v5 == 0 then goto L4bd2e0;
  #L4bd2ce.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bd2d4.  v5:= temp @kind object;
  #L4bd2d6.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4bd2da.  call temp:= `propagate`(v5) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4bd2e0.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`rx.observables.BlockingObservable` v1 @kind this) @signature `Lrx/observables/BlockingObservable;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd1dc.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd1e0.  call temp:= `toIterator`(v0) @signature `Lrx/internal/operators/BlockingOperatorToIterator;.toIterator:(Lrx/Observable;)Ljava/util/Iterator;` @kind static;
  #L4bd1e6.  v0:= temp @kind object;
  #L4bd1e8.  return v0 @kind object;
}
procedure `java.lang.Object` `last`(`rx.observables.BlockingObservable` v1 @kind this) @signature `Lrx/observables/BlockingObservable;.last:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd04c.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd050.  call temp:= `last`(v0) @signature `Lrx/Observable;.last:()Lrx/Observable;` @kind virtual;
  #L4bd056.  v0:= temp @kind object;
  #L4bd058.  call temp:= `blockForSingle`(v1, v0) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd05e.  v0:= temp @kind object;
  #L4bd060.  return v0 @kind object;
}
procedure `java.lang.Object` `last`(`rx.observables.BlockingObservable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/observables/BlockingObservable;.last:(Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd074.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd078.  call temp:= `last`(v0, v2) @signature `Lrx/Observable;.last:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd07e.  v2:= temp @kind object;
  #L4bd080.  call temp:= `blockForSingle`(v1, v2) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd086.  v2:= temp @kind object;
  #L4bd088.  return v2 @kind object;
}
procedure `java.lang.Object` `lastOrDefault`(`rx.observables.BlockingObservable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/observables/BlockingObservable;.lastOrDefault:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bd09c.  v0:= v2.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd0a0.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd0a6.  v1:= temp @kind object;
  #L4bd0a8.  call temp:= `map`(v0, v1) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd0ae.  v0:= temp @kind object;
  #L4bd0b0.  call temp:= `lastOrDefault`(v0, v3) @signature `Lrx/Observable;.lastOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L4bd0b6.  v3:= temp @kind object;
  #L4bd0b8.  call temp:= `blockForSingle`(v2, v3) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd0be.  v3:= temp @kind object;
  #L4bd0c0.  return v3 @kind object;
}
procedure `java.lang.Object` `lastOrDefault`(`rx.observables.BlockingObservable` v1 @kind this, `java.lang.Object` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/observables/BlockingObservable;.lastOrDefault:(Ljava/lang/Object;Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd0d4.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd0d8.  call temp:= `filter`(v0, v3) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd0de.  v3:= temp @kind object;
  #L4bd0e0.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd0e6.  v0:= temp @kind object;
  #L4bd0e8.  call temp:= `map`(v3, v0) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd0ee.  v3:= temp @kind object;
  #L4bd0f0.  call temp:= `lastOrDefault`(v3, v2) @signature `Lrx/Observable;.lastOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L4bd0f6.  v2:= temp @kind object;
  #L4bd0f8.  call temp:= `blockForSingle`(v1, v2) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd0fe.  v2:= temp @kind object;
  #L4bd100.  return v2 @kind object;
}
procedure `java.lang.Iterable` `latest`(`rx.observables.BlockingObservable` v1 @kind this) @signature `Lrx/observables/BlockingObservable;.latest:()Ljava/lang/Iterable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bce98.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bce9c.  call temp:= `latest`(v0) @signature `Lrx/internal/operators/BlockingOperatorLatest;.latest:(Lrx/Observable;)Ljava/lang/Iterable;` @kind static;
  #L4bcea2.  v0:= temp @kind object;
  #L4bcea4.  return v0 @kind object;
}
procedure `java.lang.Iterable` `mostRecent`(`rx.observables.BlockingObservable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observables/BlockingObservable;.mostRecent:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bceb8.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bcebc.  call temp:= `mostRecent`(v0, v2) @signature `Lrx/internal/operators/BlockingOperatorMostRecent;.mostRecent:(Lrx/Observable;Ljava/lang/Object;)Ljava/lang/Iterable;` @kind static;
  #L4bcec2.  v2:= temp @kind object;
  #L4bcec4.  return v2 @kind object;
}
procedure `java.lang.Iterable` `next`(`rx.observables.BlockingObservable` v1 @kind this) @signature `Lrx/observables/BlockingObservable;.next:()Ljava/lang/Iterable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bced8.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bcedc.  call temp:= `next`(v0) @signature `Lrx/internal/operators/BlockingOperatorNext;.next:(Lrx/Observable;)Ljava/lang/Iterable;` @kind static;
  #L4bcee2.  v0:= temp @kind object;
  #L4bcee4.  return v0 @kind object;
}
procedure `java.lang.Object` `single`(`rx.observables.BlockingObservable` v1 @kind this) @signature `Lrx/observables/BlockingObservable;.single:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd114.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd118.  call temp:= `single`(v0) @signature `Lrx/Observable;.single:()Lrx/Observable;` @kind virtual;
  #L4bd11e.  v0:= temp @kind object;
  #L4bd120.  call temp:= `blockForSingle`(v1, v0) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd126.  v0:= temp @kind object;
  #L4bd128.  return v0 @kind object;
}
procedure `java.lang.Object` `single`(`rx.observables.BlockingObservable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/observables/BlockingObservable;.single:(Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd13c.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd140.  call temp:= `single`(v0, v2) @signature `Lrx/Observable;.single:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd146.  v2:= temp @kind object;
  #L4bd148.  call temp:= `blockForSingle`(v1, v2) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd14e.  v2:= temp @kind object;
  #L4bd150.  return v2 @kind object;
}
procedure `java.lang.Object` `singleOrDefault`(`rx.observables.BlockingObservable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/observables/BlockingObservable;.singleOrDefault:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bd164.  v0:= v2.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd168.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd16e.  v1:= temp @kind object;
  #L4bd170.  call temp:= `map`(v0, v1) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd176.  v0:= temp @kind object;
  #L4bd178.  call temp:= `singleOrDefault`(v0, v3) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L4bd17e.  v3:= temp @kind object;
  #L4bd180.  call temp:= `blockForSingle`(v2, v3) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd186.  v3:= temp @kind object;
  #L4bd188.  return v3 @kind object;
}
procedure `java.lang.Object` `singleOrDefault`(`rx.observables.BlockingObservable` v1 @kind this, `java.lang.Object` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/observables/BlockingObservable;.singleOrDefault:(Ljava/lang/Object;Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd19c.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd1a0.  call temp:= `filter`(v0, v3) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd1a6.  v3:= temp @kind object;
  #L4bd1a8.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd1ae.  v0:= temp @kind object;
  #L4bd1b0.  call temp:= `map`(v3, v0) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd1b6.  v3:= temp @kind object;
  #L4bd1b8.  call temp:= `singleOrDefault`(v3, v2) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L4bd1be.  v2:= temp @kind object;
  #L4bd1c0.  call temp:= `blockForSingle`(v1, v2) @signature `Lrx/observables/BlockingObservable;.blockForSingle:(Lrx/Observable;)Ljava/lang/Object;` @kind direct;
  #L4bd1c6.  v2:= temp @kind object;
  #L4bd1c8.  return v2 @kind object;
}
procedure `void` `subscribe`(`rx.observables.BlockingObservable` v5 @kind this) @signature `Lrx/observables/BlockingObservable;.subscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bd2f4.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L4bd2f8.  v1:= 1I;
  #L4bd2fa.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4bd300.  v1:= new `java.lang.Throwable`[v1];
  #L4bd304.  v2:= 0I;
  #L4bd306.  v3:= 0I;
  #L4bd308.  v1[v2]:= v3 @kind object;
  #L4bd30c.  v3:= v5.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd310.  v4:= new `rx.observables.BlockingObservable$4`;
  #L4bd314.  call `<init>`(v4, v5, v1, v0) @signature `Lrx/observables/BlockingObservable$4;.<init>:(Lrx/observables/BlockingObservable;[Ljava/lang/Throwable;Ljava/util/concurrent/CountDownLatch;)V` @kind direct;
  #L4bd31a.  call temp:= `subscribe`(v3, v4) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4bd320.  v3:= temp @kind object;
  #L4bd322.  call `awaitForComplete`(v0, v3) @signature `Lrx/internal/util/BlockingUtils;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;)V` @kind static;
  #L4bd328.  v0:= v1[v2] @kind object;
  #L4bd32c.  if v0 == 0 then goto L4bd336;
  #L4bd330.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4bd336.  return @kind void;
}
procedure `void` `subscribe`(`rx.observables.BlockingObservable` v3 @kind this, `rx.Observer` v4 @kind object) @signature `Lrx/observables/BlockingObservable;.subscribe:(Lrx/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bd348.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L4bd34c.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L4bd352.  v1:= v3.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd356.  v2:= new `rx.observables.BlockingObservable$5`;
  #L4bd35a.  call `<init>`(v2, v3, v0) @signature `Lrx/observables/BlockingObservable$5;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/BlockingQueue;)V` @kind direct;
  #L4bd360.  call temp:= `subscribe`(v1, v2) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4bd366.  v1:= temp @kind object;
  #L4bd368.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bd36e.  v2:= temp @kind object;
  #L4bd370.  if v2 != 0 then goto L4bd37c;
  #L4bd374.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L4bd37a.  v2:= temp @kind object;
  #L4bd37c.  call temp:= `accept`(v4, v2) @signature `Lrx/internal/operators/NotificationLite;.accept:(Lrx/Observer;Ljava/lang/Object;)Z` @kind static;
  #L4bd382.  v2:= temp;
  #L4bd384.  if v2 == 0 then goto L4bd368;
  #L4bd388.  call `unsubscribe`(v1) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4bd38e.  return @kind void;
  #L4bd390.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bd392.  goto L4bd3b2;
  #L4bd394.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4bd396.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4bd39c.  v2:= temp @kind object;
  #L4bd39e.  call `interrupt`(v2) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L4bd3a4.  call `onError`(v4, v0) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bd3aa.  call `unsubscribe`(v1) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4bd3b0.  return @kind void;
  #L4bd3b2.  call `unsubscribe`(v1) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4bd3b8.  goto L4bd3bc;
  #L4bd3ba.  throw v4;
  #L4bd3bc.  goto L4bd3ba;
  catch `java.lang.InterruptedException` @[L4bd368..L4bd384] goto L4bd394;
  catch `java.lang.Throwable` @[L4bd368..L4bd384] goto L4bd390;
  catch `java.lang.Throwable` @[L4bd396..L4bd3aa] goto L4bd390;
}
procedure `void` `subscribe`(`rx.observables.BlockingObservable` v6 @kind this, `rx.Subscriber` v7 @kind object) @signature `Lrx/observables/BlockingObservable;.subscribe:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bd3e8.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L4bd3ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L4bd3f2.  v1:= 1I;
  #L4bd3f4.  v1:= new `rx.Producer`[v1];
  #L4bd3f8.  v2:= 0I;
  #L4bd3fa.  v3:= 0I;
  #L4bd3fc.  v1[v2]:= v3 @kind object;
  #L4bd400.  v3:= new `rx.observables.BlockingObservable$6`;
  #L4bd404.  call `<init>`(v3, v6, v0, v1) @signature `Lrx/observables/BlockingObservable$6;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/BlockingQueue;[Lrx/Producer;)V` @kind direct;
  #L4bd40a.  call `add`(v7, v3) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4bd410.  v4:= new `rx.observables.BlockingObservable$7`;
  #L4bd414.  call `<init>`(v4, v6, v0) @signature `Lrx/observables/BlockingObservable$7;.<init>:(Lrx/observables/BlockingObservable;Ljava/util/concurrent/BlockingQueue;)V` @kind direct;
  #L4bd41a.  call temp:= `create`(v4) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4bd420.  v4:= temp @kind object;
  #L4bd422.  call `add`(v7, v4) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4bd428.  v4:= v6.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd42c.  call temp:= `subscribe`(v4, v3) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4bd432.  call temp:= `isUnsubscribed`(v7) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4bd438.  v4:= temp;
  #L4bd43a.  if v4 == 0 then goto L4bd440;
  #L4bd43e.  goto L4bd4a2;
  #L4bd440.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bd446.  v4:= temp @kind object;
  #L4bd448.  if v4 != 0 then goto L4bd454;
  #L4bd44c.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L4bd452.  v4:= temp @kind object;
  #L4bd454.  call temp:= `isUnsubscribed`(v7) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4bd45a.  v5:= temp;
  #L4bd45c.  if v5 != 0 then goto L4bd4a2;
  #L4bd460.  v5:= `@@rx.observables.BlockingObservable.UNSUBSCRIBE` @type ^`java.lang.Object` @kind object;
  #L4bd464.  if v4 != v5 then goto L4bd46a;
  #L4bd468.  goto L4bd4a2;
  #L4bd46a.  v5:= `@@rx.observables.BlockingObservable.ON_START` @type ^`java.lang.Object` @kind object;
  #L4bd46e.  if v4 != v5 then goto L4bd47a;
  #L4bd472.  call `onStart`(v7) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L4bd478.  goto L4bd432;
  #L4bd47a.  v5:= `@@rx.observables.BlockingObservable.SET_PRODUCER` @type ^`java.lang.Object` @kind object;
  #L4bd47e.  if v4 != v5 then goto L4bd48e;
  #L4bd482.  v4:= v1[v2] @kind object;
  #L4bd486.  call `setProducer`(v7, v4) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4bd48c.  goto L4bd432;
  #L4bd48e.  call temp:= `accept`(v7, v4) @signature `Lrx/internal/operators/NotificationLite;.accept:(Lrx/Observer;Ljava/lang/Object;)Z` @kind static;
  #L4bd494.  v4:= temp;
  #L4bd496.  if v4 == 0 then goto L4bd432;
  #L4bd49a.  call `unsubscribe`(v3) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4bd4a0.  return @kind void;
  #L4bd4a2.  call `unsubscribe`(v3) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4bd4a8.  goto L4bd4c6;
  #L4bd4aa.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bd4ac.  goto L4bd4c8;
  #L4bd4ae.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4bd4b0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4bd4b6.  v1:= temp @kind object;
  #L4bd4b8.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L4bd4be.  call `onError`(v7, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bd4c4.  goto L4bd4a2;
  #L4bd4c6.  return @kind void;
  #L4bd4c8.  call `unsubscribe`(v3) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4bd4ce.  goto L4bd4d2;
  #L4bd4d0.  throw v7;
  #L4bd4d2.  goto L4bd4d0;
  catch `java.lang.InterruptedException` @[L4bd432..L4bd496] goto L4bd4ae;
  catch `java.lang.Throwable` @[L4bd432..L4bd496] goto L4bd4aa;
  catch `java.lang.Throwable` @[L4bd4b0..L4bd4c4] goto L4bd4aa;
}
procedure `void` `subscribe`(`rx.observables.BlockingObservable` v2 @kind this, `rx.functions.Action1` v3 @kind object) @signature `Lrx/observables/BlockingObservable;.subscribe:(Lrx/functions/Action1;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bd4fc.  v0:= new `rx.observables.BlockingObservable$8`;
  #L4bd500.  call `<init>`(v0, v2) @signature `Lrx/observables/BlockingObservable$8;.<init>:(Lrx/observables/BlockingObservable;)V` @kind direct;
  #L4bd506.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L4bd50c.  v1:= temp @kind object;
  #L4bd50e.  call `subscribe`(v2, v3, v0, v1) @signature `Lrx/observables/BlockingObservable;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind virtual;
  #L4bd514.  return @kind void;
}
procedure `void` `subscribe`(`rx.observables.BlockingObservable` v1 @kind this, `rx.functions.Action1` v2 @kind object, `rx.functions.Action1` v3 @kind object) @signature `Lrx/observables/BlockingObservable;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd528.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L4bd52e.  v0:= temp @kind object;
  #L4bd530.  call `subscribe`(v1, v2, v3, v0) @signature `Lrx/observables/BlockingObservable;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind virtual;
  #L4bd536.  return @kind void;
}
procedure `void` `subscribe`(`rx.observables.BlockingObservable` v1 @kind this, `rx.functions.Action1` v2 @kind object, `rx.functions.Action1` v3 @kind object, `rx.functions.Action0` v4 @kind object) @signature `Lrx/observables/BlockingObservable;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd548.  v0:= new `rx.observables.BlockingObservable$9`;
  #L4bd54c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lrx/observables/BlockingObservable$9;.<init>:(Lrx/observables/BlockingObservable;Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L4bd552.  call `subscribe`(v1, v0) @signature `Lrx/observables/BlockingObservable;.subscribe:(Lrx/Observer;)V` @kind virtual;
  #L4bd558.  return @kind void;
}
procedure `java.util.concurrent.Future` `toFuture`(`rx.observables.BlockingObservable` v1 @kind this) @signature `Lrx/observables/BlockingObservable;.toFuture:()Ljava/util/concurrent/Future;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd1fc.  v0:= v1.`rx.observables.BlockingObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd200.  call temp:= `toFuture`(v0) @signature `Lrx/internal/operators/BlockingOperatorToFuture;.toFuture:(Lrx/Observable;)Ljava/util/concurrent/Future;` @kind static;
  #L4bd206.  v0:= temp @kind object;
  #L4bd208.  return v0 @kind object;
}
procedure `java.lang.Iterable` `toIterable`(`rx.observables.BlockingObservable` v1 @kind this) @signature `Lrx/observables/BlockingObservable;.toIterable:()Ljava/lang/Iterable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcef8.  v0:= new `rx.observables.BlockingObservable$2`;
  #L4bcefc.  call `<init>`(v0, v1) @signature `Lrx/observables/BlockingObservable$2;.<init>:(Lrx/observables/BlockingObservable;)V` @kind direct;
  #L4bcf02.  return v0 @kind object;
}
