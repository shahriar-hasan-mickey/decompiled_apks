record `rx.observables.SyncOnSubscribe$4` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
  `rx.functions.Action1` `rx.observables.SyncOnSubscribe$4.val$next` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observables.SyncOnSubscribe$4` v0 @kind this, `rx.functions.Action1` v1 @kind object) @signature `Lrx/observables/SyncOnSubscribe$4;.<init>:(Lrx/functions/Action1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bdc30.  v0.`rx.observables.SyncOnSubscribe$4.val$next` @type ^`rx.functions.Action1` := v1 @kind object;
  #L4bdc34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bdc3a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.observables.SyncOnSubscribe$4` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/observables/SyncOnSubscribe$4;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bdbec.  v1:= (`java.lang.Void`) v1 @kind object;
  #L4bdbf0.  v2:= (`rx.Observer`) v2 @kind object;
  #L4bdbf4.  call temp:= `call`(v0, v1, v2) @signature `Lrx/observables/SyncOnSubscribe$4;.call:(Ljava/lang/Void;Lrx/Observer;)Ljava/lang/Void;` @kind virtual;
  #L4bdbfa.  v1:= temp @kind object;
  #L4bdbfc.  return v1 @kind object;
}
procedure `java.lang.Void` `call`(`rx.observables.SyncOnSubscribe$4` v0 @kind this, `java.lang.Void` v1 @kind object, `rx.Observer` v2 @kind object) @signature `Lrx/observables/SyncOnSubscribe$4;.call:(Ljava/lang/Void;Lrx/Observer;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L4bdc10.  v1:= v0.`rx.observables.SyncOnSubscribe$4.val$next` @type ^`rx.functions.Action1` @kind object;
  #L4bdc14.  call `call`(v1, v2) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4bdc1a.  v1:= 0I;
  #L4bdc1c.  return v1 @kind object;
}
