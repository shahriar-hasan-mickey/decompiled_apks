record `rx.observables.AsyncOnSubscribe$AsyncOuterManager` @kind class @AccessFlag FINAL extends `rx.Producer` @kind interface, `rx.Subscription` @kind interface, `rx.Observer` @kind interface {
  `rx.Producer` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.concatProducer` @AccessFlag ;
  `boolean` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @AccessFlag ;
  `long` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.expectedDelivery` @AccessFlag ;
  `boolean` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @AccessFlag PRIVATE;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.isUnsubscribed` @AccessFlag FINAL;
  `rx.observables.AsyncOnSubscribe$UnicastSubject` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.merger` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.onNextCalled` @AccessFlag PRIVATE;
  `rx.observables.AsyncOnSubscribe` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.parent` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @AccessFlag ;
  `rx.observers.SerializedObserver` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.serializedSubscriber` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.state` @AccessFlag PRIVATE;
  `rx.subscriptions.CompositeSubscription` `rx.observables.AsyncOnSubscribe$AsyncOuterManager.subscriptions` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v1 @kind this, `rx.observables.AsyncOnSubscribe` v2 @kind object, `java.lang.Object` v3 @kind object, `rx.observables.AsyncOnSubscribe$UnicastSubject` v4 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.<init>:(Lrx/observables/AsyncOnSubscribe;Ljava/lang/Object;Lrx/observables/AsyncOnSubscribe$UnicastSubject;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4bc258.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bc25e.  v0:= new `rx.subscriptions.CompositeSubscription`;
  #L4bc262.  call `<init>`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L4bc268.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.subscriptions` @type ^`rx.subscriptions.CompositeSubscription` := v0 @kind object;
  #L4bc26c.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.parent` @type ^`rx.observables.AsyncOnSubscribe` := v2 @kind object;
  #L4bc270.  v2:= new `rx.observers.SerializedObserver`;
  #L4bc274.  call `<init>`(v2, v1) @signature `Lrx/observers/SerializedObserver;.<init>:(Lrx/Observer;)V` @kind direct;
  #L4bc27a.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.serializedSubscriber` @type ^`rx.observers.SerializedObserver` := v2 @kind object;
  #L4bc27e.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.state` @type ^`java.lang.Object` := v3 @kind object;
  #L4bc282.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.merger` @type ^`rx.observables.AsyncOnSubscribe$UnicastSubject` := v4 @kind object;
  #L4bc286.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4bc28a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4bc290.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.isUnsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4bc294.  return @kind void;
}
procedure `void` `handleThrownError`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.handleThrownError:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4bc2e8.  v0:= v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @type ^`boolean` @kind boolean;
  #L4bc2ec.  if v0 == 0 then goto L4bc2f8;
  #L4bc2f0.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bc2f6.  goto L4bc30e;
  #L4bc2f8.  v0:= 1I;
  #L4bc2fa.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @type ^`boolean` := v0 @kind boolean;
  #L4bc2fe.  v0:= v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.merger` @type ^`rx.observables.AsyncOnSubscribe$UnicastSubject` @kind object;
  #L4bc302.  call `onError`(v0, v2) @signature `Lrx/observables/AsyncOnSubscribe$UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bc308.  call `cleanup`(v1) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.cleanup:()V` @kind virtual;
  #L4bc30e.  return @kind void;
}
procedure `void` `subscribeBufferToObservable`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v4 @kind this, `rx.Observable` v5 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.subscribeBufferToObservable:(Lrx/Observable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bc6b0.  call temp:= `create`() @signature `Lrx/internal/operators/BufferUntilSubscriber;.create:()Lrx/internal/operators/BufferUntilSubscriber;` @kind static;
  #L4bc6b6.  v0:= temp @kind object;
  #L4bc6b8.  v1:= v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.expectedDelivery` @type ^`long` @kind wide;
  #L4bc6bc.  v3:= new `rx.observables.AsyncOnSubscribe$AsyncOuterManager$1`;
  #L4bc6c0.  call `<init>`(v3, v4, v1, v0) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager$1;.<init>:(Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;JLrx/internal/operators/BufferUntilSubscriber;)V` @kind direct;
  #L4bc6c6.  v1:= v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.subscriptions` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4bc6ca.  call `add`(v1, v3) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4bc6d0.  v1:= new `rx.observables.AsyncOnSubscribe$AsyncOuterManager$2`;
  #L4bc6d4.  call `<init>`(v1, v4, v3) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager$2;.<init>:(Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;Lrx/Subscriber;)V` @kind direct;
  #L4bc6da.  call temp:= `doOnTerminate`(v5, v1) @signature `Lrx/Observable;.doOnTerminate:(Lrx/functions/Action0;)Lrx/Observable;` @kind virtual;
  #L4bc6e0.  v5:= temp @kind object;
  #L4bc6e2.  call temp:= `subscribe`(v5, v3) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4bc6e8.  v5:= v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.merger` @type ^`rx.observables.AsyncOnSubscribe$UnicastSubject` @kind object;
  #L4bc6ec.  call `onNext`(v5, v0) @signature `Lrx/observables/AsyncOnSubscribe$UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4bc6f2.  return @kind void;
}
procedure `void` `cleanup`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v2 @kind this) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.cleanup:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bc2a8.  v0:= v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.subscriptions` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4bc2ac.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L4bc2b2.  v0:= v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.parent` @type ^`rx.observables.AsyncOnSubscribe` @kind object;
  #L4bc2b6.  v1:= v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.state` @type ^`java.lang.Object` @kind object;
  #L4bc2ba.  call `onUnsubscribe`(v0, v1) @signature `Lrx/observables/AsyncOnSubscribe;.onUnsubscribe:(Ljava/lang/Object;)V` @kind virtual;
  #L4bc2c0.  goto L4bc2ca;
  #L4bc2c2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc2c4.  call `handleThrownError`(v2, v0) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.handleThrownError:(Ljava/lang/Throwable;)V` @kind direct;
  #L4bc2ca.  return @kind void;
  catch `java.lang.Throwable` @[L4bc2b2..L4bc2c0] goto L4bc2c2;
}
procedure `boolean` `isUnsubscribed`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v1 @kind this) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bc1ac.  v0:= v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.isUnsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4bc1b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4bc1b6.  v0:= temp;
  #L4bc1b8.  return v0;
}
procedure `void` `nextIteration`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v3 @kind this, `long` v4 ) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.nextIteration:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bc320.  v0:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.parent` @type ^`rx.observables.AsyncOnSubscribe` @kind object;
  #L4bc324.  v1:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.state` @type ^`java.lang.Object` @kind object;
  #L4bc328.  v2:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.serializedSubscriber` @type ^`rx.observers.SerializedObserver` @kind object;
  #L4bc32c.  call temp:= `next`(v0, v1, v4, v2) @signature `Lrx/observables/AsyncOnSubscribe;.next:(Ljava/lang/Object;JLrx/Observer;)Ljava/lang/Object;` @kind virtual;
  #L4bc332.  v4:= temp @kind object;
  #L4bc334.  v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.state` @type ^`java.lang.Object` := v4 @kind object;
  #L4bc338.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v2 @kind this) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bc34c.  v0:= v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @type ^`boolean` @kind boolean;
  #L4bc350.  if v0 != 0 then goto L4bc366;
  #L4bc354.  v0:= 1I;
  #L4bc356.  v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @type ^`boolean` := v0 @kind boolean;
  #L4bc35a.  v0:= v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.merger` @type ^`rx.observables.AsyncOnSubscribe$UnicastSubject` @kind object;
  #L4bc35e.  call `onCompleted`(v0) @signature `Lrx/observables/AsyncOnSubscribe$UnicastSubject;.onCompleted:()V` @kind virtual;
  #L4bc364.  return @kind void;
  #L4bc366.  v0:= new `java.lang.IllegalStateException`;
  #L4bc36a.  v1:= "Terminal event already emitted." @kind object;
  #L4bc36e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc374.  throw v0;
}
procedure `void` `onError`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bc388.  v0:= v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @type ^`boolean` @kind boolean;
  #L4bc38c.  if v0 != 0 then goto L4bc3a2;
  #L4bc390.  v0:= 1I;
  #L4bc392.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @type ^`boolean` := v0 @kind boolean;
  #L4bc396.  v0:= v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.merger` @type ^`rx.observables.AsyncOnSubscribe$UnicastSubject` @kind object;
  #L4bc39a.  call `onError`(v0, v2) @signature `Lrx/observables/AsyncOnSubscribe$UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bc3a0.  return @kind void;
  #L4bc3a2.  v2:= new `java.lang.IllegalStateException`;
  #L4bc3a6.  v0:= "Terminal event already emitted." @kind object;
  #L4bc3aa.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc3b0.  throw v2;
}
procedure `void` `onNext`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bc3c4.  v1:= (`rx.Observable`) v1 @kind object;
  #L4bc3c8.  call `onNext`(v0, v1) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.onNext:(Lrx/Observable;)V` @kind virtual;
  #L4bc3ce.  return @kind void;
}
procedure `void` `onNext`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.onNext:(Lrx/Observable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bc3e0.  v0:= v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.onNextCalled` @type ^`boolean` @kind boolean;
  #L4bc3e4.  if v0 != 0 then goto L4bc400;
  #L4bc3e8.  v0:= 1I;
  #L4bc3ea.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.onNextCalled` @type ^`boolean` := v0 @kind boolean;
  #L4bc3ee.  v0:= v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @type ^`boolean` @kind boolean;
  #L4bc3f2.  if v0 == 0 then goto L4bc3f8;
  #L4bc3f6.  return @kind void;
  #L4bc3f8.  call `subscribeBufferToObservable`(v1, v2) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.subscribeBufferToObservable:(Lrx/Observable;)V` @kind direct;
  #L4bc3fe.  return @kind void;
  #L4bc400.  v2:= new `java.lang.IllegalStateException`;
  #L4bc404.  v0:= "onNext called multiple times!" @kind object;
  #L4bc408.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc40e.  throw v2;
}
procedure `void` `request`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v4 @kind this, `long` v5 ) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bc420.  v0:= 0L;
  #L4bc424.  v2:= lcmp(v5, v0);
  #L4bc428.  if v2 != 0 then goto L4bc42e;
  #L4bc42c.  return @kind void;
  #L4bc42e.  v2:= lcmp(v5, v0);
  #L4bc432.  if v2 < 0 then goto L4bc4ec;
  #L4bc436.  @monitorenter v4
  #L4bc438.  v0:= v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @type ^`boolean` @kind boolean;
  #L4bc43c.  v1:= 1I;
  #L4bc43e.  v2:= 0I;
  #L4bc440.  if v0 == 0 then goto L4bc46a;
  #L4bc444.  v0:= v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` @kind object;
  #L4bc448.  if v0 != 0 then goto L4bc45a;
  #L4bc44c.  v0:= new `java.util.ArrayList`;
  #L4bc450.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bc456.  v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` := v0 @kind object;
  #L4bc45a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4bc460.  v3:= temp @kind object;
  #L4bc462.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bc468.  goto L4bc470;
  #L4bc46a.  v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4bc46e.  v1:= 0I;
  #L4bc470.  @monitorexit v4
  #L4bc472.  v0:= v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.concatProducer` @type ^`rx.Producer` @kind object;
  #L4bc476.  call `request`(v0, v5) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4bc47c.  if v1 == 0 then goto L4bc482;
  #L4bc480.  return @kind void;
  #L4bc482.  call temp:= `tryEmit`(v4, v5) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.tryEmit:(J)Z` @kind virtual;
  #L4bc488.  v5:= temp;
  #L4bc48a.  if v5 == 0 then goto L4bc490;
  #L4bc48e.  return @kind void;
  #L4bc490.  @monitorenter v4
  #L4bc492.  v5:= v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` @kind object;
  #L4bc496.  if v5 != 0 then goto L4bc4a2;
  #L4bc49a.  v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @type ^`boolean` := v2 @kind boolean;
  #L4bc49e.  @monitorexit v4
  #L4bc4a0.  return @kind void;
  #L4bc4a2.  v6:= 0I;
  #L4bc4a4.  v4.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` := v6 @kind object;
  #L4bc4a8.  @monitorexit v4
  #L4bc4aa.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4bc4b0.  v5:= temp @kind object;
  #L4bc4b2.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4bc4b8.  v6:= temp;
  #L4bc4ba.  if v6 == 0 then goto L4bc490;
  #L4bc4be.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4bc4c4.  v6:= temp @kind object;
  #L4bc4c6.  v6:= (`java.lang.Long`) v6 @kind object;
  #L4bc4ca.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4bc4d0.  v0:= temp @kind wide;
  #L4bc4d2.  call temp:= `tryEmit`(v4, v0) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.tryEmit:(J)Z` @kind virtual;
  #L4bc4d8.  v6:= temp;
  #L4bc4da.  if v6 == 0 then goto L4bc4b2;
  #L4bc4de.  return @kind void;
  #L4bc4e0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc4e2.  @monitorexit v4
  #L4bc4e4.  throw v5;
  #L4bc4e6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc4e8.  @monitorexit v4
  #L4bc4ea.  throw v5;
  #L4bc4ec.  v0:= new `java.lang.IllegalStateException`;
  #L4bc4f0.  v1:= new `java.lang.StringBuilder`;
  #L4bc4f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4bc4fa.  v2:= "Request can't be negative! " @kind object;
  #L4bc4fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bc504.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bc50a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bc510.  v5:= temp @kind object;
  #L4bc512.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc518.  goto L4bc51c;
  #L4bc51a.  throw v0;
  #L4bc51c.  goto L4bc51a;
  catch `java.lang.Throwable` @[L4bc438..L4bc472] goto L4bc4e6;
  catch `java.lang.Throwable` @[L4bc492..L4bc4aa] goto L4bc4e0;
  catch `java.lang.Throwable` @[L4bc4e2..L4bc4e4] goto L4bc4e0;
  catch `java.lang.Throwable` @[L4bc4e8..L4bc4ea] goto L4bc4e6;
}
procedure `void` `requestRemaining`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v3 @kind this, `long` v4 ) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.requestRemaining:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bc558.  v0:= 0L;
  #L4bc55c.  v2:= lcmp(v4, v0);
  #L4bc560.  if v2 != 0 then goto L4bc566;
  #L4bc564.  return @kind void;
  #L4bc566.  v2:= lcmp(v4, v0);
  #L4bc56a.  if v2 < 0 then goto L4bc614;
  #L4bc56e.  @monitorenter v3
  #L4bc570.  v0:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @type ^`boolean` @kind boolean;
  #L4bc574.  if v0 == 0 then goto L4bc5a0;
  #L4bc578.  v0:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` @kind object;
  #L4bc57c.  if v0 != 0 then goto L4bc58e;
  #L4bc580.  v0:= new `java.util.ArrayList`;
  #L4bc584.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bc58a.  v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` := v0 @kind object;
  #L4bc58e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4bc594.  v4:= temp @kind object;
  #L4bc596.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bc59c.  @monitorexit v3
  #L4bc59e.  return @kind void;
  #L4bc5a0.  v0:= 1I;
  #L4bc5a2.  v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4bc5a6.  @monitorexit v3
  #L4bc5a8.  call temp:= `tryEmit`(v3, v4) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.tryEmit:(J)Z` @kind virtual;
  #L4bc5ae.  v4:= temp;
  #L4bc5b0.  if v4 == 0 then goto L4bc5b6;
  #L4bc5b4.  return @kind void;
  #L4bc5b6.  @monitorenter v3
  #L4bc5b8.  v4:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` @kind object;
  #L4bc5bc.  if v4 != 0 then goto L4bc5ca;
  #L4bc5c0.  v4:= 0I;
  #L4bc5c2.  v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @type ^`boolean` := v4 @kind boolean;
  #L4bc5c6.  @monitorexit v3
  #L4bc5c8.  return @kind void;
  #L4bc5ca.  v5:= 0I;
  #L4bc5cc.  v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` := v5 @kind object;
  #L4bc5d0.  @monitorexit v3
  #L4bc5d2.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4bc5d8.  v4:= temp @kind object;
  #L4bc5da.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4bc5e0.  v5:= temp;
  #L4bc5e2.  if v5 == 0 then goto L4bc5b6;
  #L4bc5e6.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4bc5ec.  v5:= temp @kind object;
  #L4bc5ee.  v5:= (`java.lang.Long`) v5 @kind object;
  #L4bc5f2.  call temp:= `longValue`(v5) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4bc5f8.  v0:= temp @kind wide;
  #L4bc5fa.  call temp:= `tryEmit`(v3, v0) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.tryEmit:(J)Z` @kind virtual;
  #L4bc600.  v5:= temp;
  #L4bc602.  if v5 == 0 then goto L4bc5da;
  #L4bc606.  return @kind void;
  #L4bc608.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc60a.  @monitorexit v3
  #L4bc60c.  throw v4;
  #L4bc60e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc610.  @monitorexit v3
  #L4bc612.  throw v4;
  #L4bc614.  v0:= new `java.lang.IllegalStateException`;
  #L4bc618.  v1:= new `java.lang.StringBuilder`;
  #L4bc61c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4bc622.  v2:= "Request can't be negative! " @kind object;
  #L4bc626.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bc62c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bc632.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bc638.  v4:= temp @kind object;
  #L4bc63a.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc640.  goto L4bc644;
  #L4bc642.  throw v0;
  #L4bc644.  goto L4bc642;
  catch `java.lang.Throwable` @[L4bc570..L4bc5a8] goto L4bc60e;
  catch `java.lang.Throwable` @[L4bc5b8..L4bc5d2] goto L4bc608;
  catch `java.lang.Throwable` @[L4bc60a..L4bc60c] goto L4bc608;
  catch `java.lang.Throwable` @[L4bc610..L4bc612] goto L4bc60e;
}
procedure `void` `setConcatProducer`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.setConcatProducer:(Lrx/Producer;)V` @AccessFlag  {
    temp;
    v0;

  #L4bc680.  v0:= v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.concatProducer` @type ^`rx.Producer` @kind object;
  #L4bc684.  if v0 != 0 then goto L4bc68e;
  #L4bc688.  v1.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.concatProducer` @type ^`rx.Producer` := v2 @kind object;
  #L4bc68c.  return @kind void;
  #L4bc68e.  v2:= new `java.lang.IllegalStateException`;
  #L4bc692.  v0:= "setConcatProducer may be called at most once!" @kind object;
  #L4bc696.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc69c.  throw v2;
}
procedure `boolean` `tryEmit`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v2 @kind this, `long` v3 ) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.tryEmit:(J)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bc1cc.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.isUnsubscribed:()Z` @kind virtual;
  #L4bc1d2.  v0:= temp;
  #L4bc1d4.  v1:= 1I;
  #L4bc1d6.  if v0 == 0 then goto L4bc1e2;
  #L4bc1da.  call `cleanup`(v2) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.cleanup:()V` @kind virtual;
  #L4bc1e0.  return v1;
  #L4bc1e2.  v0:= 0I;
  #L4bc1e4.  v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.onNextCalled` @type ^`boolean` := v0 @kind boolean;
  #L4bc1e8.  v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.expectedDelivery` @type ^`long` := v3 @kind wide;
  #L4bc1ec.  call `nextIteration`(v2, v3) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.nextIteration:(J)V` @kind virtual;
  #L4bc1f2.  v3:= v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.hasTerminated` @type ^`boolean` @kind boolean;
  #L4bc1f6.  if v3 != 0 then goto L4bc228;
  #L4bc1fa.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.isUnsubscribed:()Z` @kind virtual;
  #L4bc200.  v3:= temp;
  #L4bc202.  if v3 == 0 then goto L4bc208;
  #L4bc206.  goto L4bc228;
  #L4bc208.  v3:= v2.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.onNextCalled` @type ^`boolean` @kind boolean;
  #L4bc20c.  if v3 != 0 then goto L4bc226;
  #L4bc210.  v3:= new `java.lang.IllegalStateException`;
  #L4bc214.  v4:= "No events emitted!" @kind object;
  #L4bc218.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc21e.  call `handleThrownError`(v2, v3) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.handleThrownError:(Ljava/lang/Throwable;)V` @kind direct;
  #L4bc224.  return v1;
  #L4bc226.  return v0;
  #L4bc228.  call `cleanup`(v2) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.cleanup:()V` @kind virtual;
  #L4bc22e.  return v1;
  #L4bc230.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc232.  call `handleThrownError`(v2, v3) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.handleThrownError:(Ljava/lang/Throwable;)V` @kind direct;
  #L4bc238.  return v1;
  catch `java.lang.Throwable` @[L4bc1e4..L4bc22e] goto L4bc230;
}
procedure `void` `unsubscribe`(`rx.observables.AsyncOnSubscribe$AsyncOuterManager` v3 @kind this) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bc704.  v0:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.isUnsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4bc708.  v1:= 1I;
  #L4bc70a.  v2:= 0I;
  #L4bc70c.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4bc712.  v0:= temp;
  #L4bc714.  if v0 == 0 then goto L4bc75e;
  #L4bc718.  @monitorenter v3
  #L4bc71a.  v0:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @type ^`boolean` @kind boolean;
  #L4bc71e.  if v0 == 0 then goto L4bc74a;
  #L4bc722.  v0:= new `java.util.ArrayList`;
  #L4bc726.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bc72c.  v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` := v0 @kind object;
  #L4bc730.  v0:= v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.requests` @type ^`java.util.List` @kind object;
  #L4bc734.  v1:= 0L;
  #L4bc738.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4bc73e.  v1:= temp @kind object;
  #L4bc740.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bc746.  @monitorexit v3
  #L4bc748.  return @kind void;
  #L4bc74a.  v3.`rx.observables.AsyncOnSubscribe$AsyncOuterManager.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4bc74e.  @monitorexit v3
  #L4bc750.  call `cleanup`(v3) @signature `Lrx/observables/AsyncOnSubscribe$AsyncOuterManager;.cleanup:()V` @kind virtual;
  #L4bc756.  goto L4bc75e;
  #L4bc758.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc75a.  @monitorexit v3
  #L4bc75c.  throw v0;
  #L4bc75e.  return @kind void;
  catch `java.lang.Throwable` @[L4bc71a..L4bc750] goto L4bc758;
  catch `java.lang.Throwable` @[L4bc75a..L4bc75c] goto L4bc758;
}
