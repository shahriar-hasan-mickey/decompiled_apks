record `rx.observables.AsyncOnSubscribe$UnicastSubject$State` @kind class @AccessFlag FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.Subscriber` `rx.observables.AsyncOnSubscribe$UnicastSubject$State.subscriber` @AccessFlag ;
}
procedure `void` `<init>`(`rx.observables.AsyncOnSubscribe$UnicastSubject$State` v0 @kind this) @signature `Lrx/observables/AsyncOnSubscribe$UnicastSubject$State;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bc784.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bc78a.  return @kind void;
}
procedure `void` `call`(`rx.observables.AsyncOnSubscribe$UnicastSubject$State` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$UnicastSubject$State;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bc79c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4bc7a0.  call `call`(v0, v1) @signature `Lrx/observables/AsyncOnSubscribe$UnicastSubject$State;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4bc7a6.  return @kind void;
}
procedure `void` `call`(`rx.observables.AsyncOnSubscribe$UnicastSubject$State` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/observables/AsyncOnSubscribe$UnicastSubject$State;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bc7b8.  @monitorenter v2
  #L4bc7ba.  v0:= v2.`rx.observables.AsyncOnSubscribe$UnicastSubject$State.subscriber` @type ^`rx.Subscriber` @kind object;
  #L4bc7be.  if v0 != 0 then goto L4bc7ca;
  #L4bc7c2.  v2.`rx.observables.AsyncOnSubscribe$UnicastSubject$State.subscriber` @type ^`rx.Subscriber` := v3 @kind object;
  #L4bc7c6.  @monitorexit v2
  #L4bc7c8.  return @kind void;
  #L4bc7ca.  @monitorexit v2
  #L4bc7cc.  v0:= new `java.lang.IllegalStateException`;
  #L4bc7d0.  v1:= "There can be only one subscriber" @kind object;
  #L4bc7d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc7da.  call `onError`(v3, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bc7e0.  return @kind void;
  #L4bc7e2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc7e4.  @monitorexit v2
  #L4bc7e6.  throw v3;
  catch `java.lang.Throwable` @[L4bc7ba..L4bc7cc] goto L4bc7e2;
  catch `java.lang.Throwable` @[L4bc7e4..L4bc7e6] goto L4bc7e2;
}
