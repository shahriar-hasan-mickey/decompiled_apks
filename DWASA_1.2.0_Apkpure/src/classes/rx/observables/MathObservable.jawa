record `rx.observables.MathObservable` @kind class @AccessFlag PUBLIC {
  `rx.Observable` `rx.observables.MathObservable.o` @AccessFlag PRIVATE_FINAL;
}
global `rx.functions.Func1` `@@rx.observables.MathObservable.INDENTITY` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lrx/observables/MathObservable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4bdaa4.  v0:= new `rx.observables.MathObservable$1`;
  #L4bdaa8.  call `<init>`(v0) @signature `Lrx/observables/MathObservable$1;.<init>:()V` @kind direct;
  #L4bdaae.  `@@rx.observables.MathObservable.INDENTITY` @type ^`rx.functions.Func1` := v0 @kind object;
  #L4bdab2.  return @kind void;
}
procedure `void` `<init>`(`rx.observables.MathObservable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/observables/MathObservable;.<init>:(Lrx/Observable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4bdac4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bdaca.  v0.`rx.observables.MathObservable.o` @type ^`rx.Observable` := v1 @kind object;
  #L4bdace.  return @kind void;
}
procedure `rx.Observable` `averageDouble`(`rx.Observable` v2 @kind object) @signature `Lrx/observables/MathObservable;.averageDouble:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd798.  v0:= new `rx.math.operators.OperatorAverageDouble`;
  #L4bd79c.  call temp:= `identity`() @signature `Lrx/observables/MathObservable;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd7a2.  v1:= temp @kind object;
  #L4bd7a4.  call `<init>`(v0, v1) @signature `Lrx/math/operators/OperatorAverageDouble;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4bd7aa.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L4bd7b0.  v2:= temp @kind object;
  #L4bd7b2.  return v2 @kind object;
}
procedure `rx.Observable` `averageFloat`(`rx.Observable` v2 @kind object) @signature `Lrx/observables/MathObservable;.averageFloat:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd7ec.  v0:= new `rx.math.operators.OperatorAverageFloat`;
  #L4bd7f0.  call temp:= `identity`() @signature `Lrx/observables/MathObservable;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd7f6.  v1:= temp @kind object;
  #L4bd7f8.  call `<init>`(v0, v1) @signature `Lrx/math/operators/OperatorAverageFloat;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4bd7fe.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L4bd804.  v2:= temp @kind object;
  #L4bd806.  return v2 @kind object;
}
procedure `rx.Observable` `averageInteger`(`rx.Observable` v2 @kind object) @signature `Lrx/observables/MathObservable;.averageInteger:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd840.  v0:= new `rx.math.operators.OperatorAverageInteger`;
  #L4bd844.  call temp:= `identity`() @signature `Lrx/observables/MathObservable;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd84a.  v1:= temp @kind object;
  #L4bd84c.  call `<init>`(v0, v1) @signature `Lrx/math/operators/OperatorAverageInteger;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4bd852.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L4bd858.  v2:= temp @kind object;
  #L4bd85a.  return v2 @kind object;
}
procedure `rx.Observable` `averageLong`(`rx.Observable` v2 @kind object) @signature `Lrx/observables/MathObservable;.averageLong:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd894.  v0:= new `rx.math.operators.OperatorAverageLong`;
  #L4bd898.  call temp:= `identity`() @signature `Lrx/observables/MathObservable;.identity:()Lrx/functions/Func1;` @kind static;
  #L4bd89e.  v1:= temp @kind object;
  #L4bd8a0.  call `<init>`(v0, v1) @signature `Lrx/math/operators/OperatorAverageLong;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4bd8a6.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L4bd8ac.  v2:= temp @kind object;
  #L4bd8ae.  return v2 @kind object;
}
procedure `rx.observables.MathObservable` `from`(`rx.Observable` v1 @kind object) @signature `Lrx/observables/MathObservable;.from:(Lrx/Observable;)Lrx/observables/MathObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bda88.  v0:= new `rx.observables.MathObservable`;
  #L4bda8c.  call `<init>`(v0, v1) @signature `Lrx/observables/MathObservable;.<init>:(Lrx/Observable;)V` @kind direct;
  #L4bda92.  return v0 @kind object;
}
procedure `rx.functions.Func1` `identity`() @signature `Lrx/observables/MathObservable;.identity:()Lrx/functions/Func1;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4bda70.  v0:= `@@rx.observables.MathObservable.INDENTITY` @type ^`rx.functions.Func1` @kind object;
  #L4bda74.  return v0 @kind object;
}
procedure `rx.Observable` `max`(`rx.Observable` v0 @kind object) @signature `Lrx/observables/MathObservable;.max:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L4bd908.  call temp:= `max`(v0) @signature `Lrx/math/operators/OperatorMinMax;.max:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bd90e.  v0:= temp @kind object;
  #L4bd910.  return v0 @kind object;
}
procedure `rx.Observable` `min`(`rx.Observable` v0 @kind object) @signature `Lrx/observables/MathObservable;.min:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L4bd944.  call temp:= `min`(v0) @signature `Lrx/math/operators/OperatorMinMax;.min:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bd94a.  v0:= temp @kind object;
  #L4bd94c.  return v0 @kind object;
}
procedure `rx.Observable` `sumDouble`(`rx.Observable` v0 @kind object) @signature `Lrx/observables/MathObservable;.sumDouble:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L4bd960.  call temp:= `sumDoubles`(v0) @signature `Lrx/math/operators/OperatorSum;.sumDoubles:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bd966.  v0:= temp @kind object;
  #L4bd968.  return v0 @kind object;
}
procedure `rx.Observable` `sumFloat`(`rx.Observable` v0 @kind object) @signature `Lrx/observables/MathObservable;.sumFloat:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L4bd9a4.  call temp:= `sumFloats`(v0) @signature `Lrx/math/operators/OperatorSum;.sumFloats:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bd9aa.  v0:= temp @kind object;
  #L4bd9ac.  return v0 @kind object;
}
procedure `rx.Observable` `sumInteger`(`rx.Observable` v0 @kind object) @signature `Lrx/observables/MathObservable;.sumInteger:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L4bd9e8.  call temp:= `sumIntegers`(v0) @signature `Lrx/math/operators/OperatorSum;.sumIntegers:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bd9ee.  v0:= temp @kind object;
  #L4bd9f0.  return v0 @kind object;
}
procedure `rx.Observable` `sumLong`(`rx.Observable` v0 @kind object) @signature `Lrx/observables/MathObservable;.sumLong:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L4bda2c.  call temp:= `sumLongs`(v0) @signature `Lrx/math/operators/OperatorSum;.sumLongs:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bda32.  v0:= temp @kind object;
  #L4bda34.  return v0 @kind object;
}
procedure `rx.Observable` `averageDouble`(`rx.observables.MathObservable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/observables/MathObservable;.averageDouble:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd7c4.  v0:= v2.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd7c8.  v1:= new `rx.math.operators.OperatorAverageDouble`;
  #L4bd7cc.  call `<init>`(v1, v3) @signature `Lrx/math/operators/OperatorAverageDouble;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4bd7d2.  call temp:= `lift`(v0, v1) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L4bd7d8.  v3:= temp @kind object;
  #L4bd7da.  return v3 @kind object;
}
procedure `rx.Observable` `averageFloat`(`rx.observables.MathObservable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/observables/MathObservable;.averageFloat:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd818.  v0:= v2.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd81c.  v1:= new `rx.math.operators.OperatorAverageFloat`;
  #L4bd820.  call `<init>`(v1, v3) @signature `Lrx/math/operators/OperatorAverageFloat;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4bd826.  call temp:= `lift`(v0, v1) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L4bd82c.  v3:= temp @kind object;
  #L4bd82e.  return v3 @kind object;
}
procedure `rx.Observable` `averageInteger`(`rx.observables.MathObservable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/observables/MathObservable;.averageInteger:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd86c.  v0:= v2.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd870.  v1:= new `rx.math.operators.OperatorAverageInteger`;
  #L4bd874.  call `<init>`(v1, v3) @signature `Lrx/math/operators/OperatorAverageInteger;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4bd87a.  call temp:= `lift`(v0, v1) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L4bd880.  v3:= temp @kind object;
  #L4bd882.  return v3 @kind object;
}
procedure `rx.Observable` `averageLong`(`rx.observables.MathObservable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/observables/MathObservable;.averageLong:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd8c0.  v0:= v2.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd8c4.  v1:= new `rx.math.operators.OperatorAverageLong`;
  #L4bd8c8.  call `<init>`(v1, v3) @signature `Lrx/math/operators/OperatorAverageLong;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4bd8ce.  call temp:= `lift`(v0, v1) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L4bd8d4.  v3:= temp @kind object;
  #L4bd8d6.  return v3 @kind object;
}
procedure `rx.Observable` `max`(`rx.observables.MathObservable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lrx/observables/MathObservable;.max:(Ljava/util/Comparator;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bd8e8.  v0:= v1.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd8ec.  call temp:= `max`(v0, v2) @signature `Lrx/math/operators/OperatorMinMax;.max:(Lrx/Observable;Ljava/util/Comparator;)Lrx/Observable;` @kind static;
  #L4bd8f2.  v2:= temp @kind object;
  #L4bd8f4.  return v2 @kind object;
}
procedure `rx.Observable` `min`(`rx.observables.MathObservable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lrx/observables/MathObservable;.min:(Ljava/util/Comparator;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bd924.  v0:= v1.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd928.  call temp:= `min`(v0, v2) @signature `Lrx/math/operators/OperatorMinMax;.min:(Lrx/Observable;Ljava/util/Comparator;)Lrx/Observable;` @kind static;
  #L4bd92e.  v2:= temp @kind object;
  #L4bd930.  return v2 @kind object;
}
procedure `rx.Observable` `sumDouble`(`rx.observables.MathObservable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/observables/MathObservable;.sumDouble:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bd97c.  v0:= v1.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd980.  call temp:= `map`(v0, v2) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd986.  v2:= temp @kind object;
  #L4bd988.  call temp:= `sumAtLeastOneDoubles`(v2) @signature `Lrx/math/operators/OperatorSum;.sumAtLeastOneDoubles:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bd98e.  v2:= temp @kind object;
  #L4bd990.  return v2 @kind object;
}
procedure `rx.Observable` `sumFloat`(`rx.observables.MathObservable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/observables/MathObservable;.sumFloat:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bd9c0.  v0:= v1.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bd9c4.  call temp:= `map`(v0, v2) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bd9ca.  v2:= temp @kind object;
  #L4bd9cc.  call temp:= `sumAtLeastOneFloats`(v2) @signature `Lrx/math/operators/OperatorSum;.sumAtLeastOneFloats:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bd9d2.  v2:= temp @kind object;
  #L4bd9d4.  return v2 @kind object;
}
procedure `rx.Observable` `sumInteger`(`rx.observables.MathObservable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/observables/MathObservable;.sumInteger:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bda04.  v0:= v1.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bda08.  call temp:= `map`(v0, v2) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bda0e.  v2:= temp @kind object;
  #L4bda10.  call temp:= `sumAtLeastOneIntegers`(v2) @signature `Lrx/math/operators/OperatorSum;.sumAtLeastOneIntegers:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bda16.  v2:= temp @kind object;
  #L4bda18.  return v2 @kind object;
}
procedure `rx.Observable` `sumLong`(`rx.observables.MathObservable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/observables/MathObservable;.sumLong:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bda48.  v0:= v1.`rx.observables.MathObservable.o` @type ^`rx.Observable` @kind object;
  #L4bda4c.  call temp:= `map`(v0, v2) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4bda52.  v2:= temp @kind object;
  #L4bda54.  call temp:= `sumAtLeastOneLongs`(v2) @signature `Lrx/math/operators/OperatorSum;.sumAtLeastOneLongs:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4bda5a.  v2:= temp @kind object;
  #L4bda5c.  return v2 @kind object;
}
