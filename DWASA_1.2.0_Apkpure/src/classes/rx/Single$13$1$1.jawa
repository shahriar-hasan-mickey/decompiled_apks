record `rx.Single$13$1$1` @kind class @AccessFlag  extends `rx.SingleSubscriber` @kind class {
  `rx.Single$13$1` `rx.Single$13$1$1.this$2` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$13$1$1` v0 @kind this, `rx.Single$13$1` v1 @kind object) @signature `Lrx/Single$13$1$1;.<init>:(Lrx/Single$13$1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48eb04.  v0.`rx.Single$13$1$1.this$2` @type ^`rx.Single$13$1` := v1 @kind object;
  #L48eb08.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L48eb0e.  return @kind void;
}
procedure `void` `onError`(`rx.Single$13$1$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/Single$13$1$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eb20.  v0:= v1.`rx.Single$13$1$1.this$2` @type ^`rx.Single$13$1` @kind object;
  #L48eb24.  v0:= v0.`rx.Single$13$1.val$t` @type ^`rx.SingleSubscriber` @kind object;
  #L48eb28.  call `onError`(v0, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48eb2e.  v2:= v1.`rx.Single$13$1$1.this$2` @type ^`rx.Single$13$1` @kind object;
  #L48eb32.  v2:= v2.`rx.Single$13$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L48eb36.  call `unsubscribe`(v2) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L48eb3c.  return @kind void;
  #L48eb3e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48eb40.  v0:= v1.`rx.Single$13$1$1.this$2` @type ^`rx.Single$13$1` @kind object;
  #L48eb44.  v0:= v0.`rx.Single$13$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L48eb48.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L48eb4e.  throw v2;
  catch `java.lang.Throwable` @[L48eb20..L48eb2e] goto L48eb3e;
}
procedure `void` `onSuccess`(`rx.Single$13$1$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/Single$13$1$1;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eb6c.  v0:= v1.`rx.Single$13$1$1.this$2` @type ^`rx.Single$13$1` @kind object;
  #L48eb70.  v0:= v0.`rx.Single$13$1.val$t` @type ^`rx.SingleSubscriber` @kind object;
  #L48eb74.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L48eb7a.  v2:= v1.`rx.Single$13$1$1.this$2` @type ^`rx.Single$13$1` @kind object;
  #L48eb7e.  v2:= v2.`rx.Single$13$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L48eb82.  call `unsubscribe`(v2) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L48eb88.  return @kind void;
  #L48eb8a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48eb8c.  v0:= v1.`rx.Single$13$1$1.this$2` @type ^`rx.Single$13$1` @kind object;
  #L48eb90.  v0:= v0.`rx.Single$13$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L48eb94.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L48eb9a.  throw v2;
  catch `java.lang.Throwable` @[L48eb6c..L48eb7a] goto L48eb8a;
}
