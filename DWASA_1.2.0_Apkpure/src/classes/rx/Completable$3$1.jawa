record `rx.Completable$3$1` @kind class @AccessFlag  extends `rx.CompletableSubscriber` @kind interface {
  `rx.Completable$3` `rx.Completable$3$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.Completable$3$1.val$once` @AccessFlag FINAL_SYNTHETIC;
  `rx.CompletableSubscriber` `rx.Completable$3$1.val$s` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.CompositeSubscription` `rx.Completable$3$1.val$set` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$3$1` v0 @kind this, `rx.Completable$3` v1 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v2 @kind object, `rx.subscriptions.CompositeSubscription` v3 @kind object, `rx.CompletableSubscriber` v4 @kind object) @signature `Lrx/Completable$3$1;.<init>:(Lrx/Completable$3;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/subscriptions/CompositeSubscription;Lrx/CompletableSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L487c44.  v0.`rx.Completable$3$1.this$0` @type ^`rx.Completable$3` := v1 @kind object;
  #L487c48.  v0.`rx.Completable$3$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L487c4c.  v0.`rx.Completable$3$1.val$set` @type ^`rx.subscriptions.CompositeSubscription` := v3 @kind object;
  #L487c50.  v0.`rx.Completable$3$1.val$s` @type ^`rx.CompletableSubscriber` := v4 @kind object;
  #L487c54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L487c5a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.Completable$3$1` v3 @kind this) @signature `Lrx/Completable$3$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L487c6c.  v0:= v3.`rx.Completable$3$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L487c70.  v1:= 0I;
  #L487c72.  v2:= 1I;
  #L487c74.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L487c7a.  v0:= temp;
  #L487c7c.  if v0 == 0 then goto L487c94;
  #L487c80.  v0:= v3.`rx.Completable$3$1.val$set` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L487c84.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L487c8a.  v0:= v3.`rx.Completable$3$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L487c8e.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L487c94.  return @kind void;
}
procedure `void` `onError`(`rx.Completable$3$1` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/Completable$3$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L487ca8.  v0:= v3.`rx.Completable$3$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L487cac.  v1:= 0I;
  #L487cae.  v2:= 1I;
  #L487cb0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L487cb6.  v0:= temp;
  #L487cb8.  if v0 == 0 then goto L487cd2;
  #L487cbc.  v0:= v3.`rx.Completable$3$1.val$set` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L487cc0.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L487cc6.  v0:= v3.`rx.Completable$3$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L487cca.  call `onError`(v0, v4) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L487cd0.  goto L487cd8;
  #L487cd2.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487cd8.  return @kind void;
}
procedure `void` `onSubscribe`(`rx.Completable$3$1` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/Completable$3$1;.onSubscribe:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487cec.  v0:= v1.`rx.Completable$3$1.val$set` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L487cf0.  call `add`(v0, v2) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L487cf6.  return @kind void;
}
