record `rx.Completable$33` @kind class @AccessFlag  extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Completable` `rx.Completable$33.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Func0` `rx.Completable$33.val$completionValueFunc0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$33` v0 @kind this, `rx.Completable` v1 @kind object, `rx.functions.Func0` v2 @kind object) @signature `Lrx/Completable$33;.<init>:(Lrx/Completable;Lrx/functions/Func0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L487f64.  v0.`rx.Completable$33.this$0` @type ^`rx.Completable` := v1 @kind object;
  #L487f68.  v0.`rx.Completable$33.val$completionValueFunc0` @type ^`rx.functions.Func0` := v2 @kind object;
  #L487f6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L487f72.  return @kind void;
}
procedure `void` `call`(`rx.Completable$33` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Completable$33;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L487f84.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L487f88.  call `call`(v0, v1) @signature `Lrx/Completable$33;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L487f8e.  return @kind void;
}
procedure `void` `call`(`rx.Completable$33` v2 @kind this, `rx.SingleSubscriber` v3 @kind object) @signature `Lrx/Completable$33;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487fa0.  v0:= v2.`rx.Completable$33.this$0` @type ^`rx.Completable` @kind object;
  #L487fa4.  v1:= new `rx.Completable$33$1`;
  #L487fa8.  call `<init>`(v1, v2, v3) @signature `Lrx/Completable$33$1;.<init>:(Lrx/Completable$33;Lrx/SingleSubscriber;)V` @kind direct;
  #L487fae.  call `unsafeSubscribe`(v0, v1) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L487fb4.  return @kind void;
}
