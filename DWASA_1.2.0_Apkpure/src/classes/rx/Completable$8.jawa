record `rx.Completable$8` @kind class @AccessFlag FINAL extends `rx.Completable$OnSubscribe` @kind interface {
  `rx.functions.Action0` `rx.Completable$8.val$action` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$8` v0 @kind this, `rx.functions.Action0` v1 @kind object) @signature `Lrx/Completable$8;.<init>:(Lrx/functions/Action0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4886bc.  v0.`rx.Completable$8.val$action` @type ^`rx.functions.Action0` := v1 @kind object;
  #L4886c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4886c6.  return @kind void;
}
procedure `void` `call`(`rx.Completable$8` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Completable$8;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4886d8.  v1:= (`rx.CompletableSubscriber`) v1 @kind object;
  #L4886dc.  call `call`(v0, v1) @signature `Lrx/Completable$8;.call:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L4886e2.  return @kind void;
}
procedure `void` `call`(`rx.Completable$8` v2 @kind this, `rx.CompletableSubscriber` v3 @kind object) @signature `Lrx/Completable$8;.call:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4886f4.  v0:= new `rx.subscriptions.BooleanSubscription`;
  #L4886f8.  call `<init>`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.<init>:()V` @kind direct;
  #L4886fe.  call `onSubscribe`(v3, v0) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L488704.  v1:= v2.`rx.Completable$8.val$action` @type ^`rx.functions.Action0` @kind object;
  #L488708.  call `call`(v1) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L48870e.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L488714.  v0:= temp;
  #L488716.  if v0 != 0 then goto L488720;
  #L48871a.  call `onCompleted`(v3) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L488720.  return @kind void;
  #L488722.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L488724.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L48872a.  v0:= temp;
  #L48872c.  if v0 != 0 then goto L488736;
  #L488730.  call `onError`(v3, v1) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L488736.  return @kind void;
  catch `java.lang.Throwable` @[L488704..L48870e] goto L488722;
}
