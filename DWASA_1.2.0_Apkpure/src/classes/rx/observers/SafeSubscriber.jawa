record `rx.observers.SafeSubscriber` @kind class @AccessFlag PUBLIC extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.observers.SafeSubscriber.actual` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.observers.SafeSubscriber.done` @AccessFlag ;
}
procedure `void` `<init>`(`rx.observers.SafeSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/observers/SafeSubscriber;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4be850.  call `<init>`(v0, v1) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4be856.  v0.`rx.observers.SafeSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L4be85a.  return @kind void;
}
procedure `void` `_onError`(`rx.observers.SafeSubscriber` v8 @kind this, `java.lang.Throwable` v9 @kind object) @signature `Lrx/observers/SafeSubscriber;._onError:(Ljava/lang/Throwable;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4be86c.  call temp:= `getInstance`() @signature `Lrx/plugins/RxJavaPlugins;.getInstance:()Lrx/plugins/RxJavaPlugins;` @kind static;
  #L4be872.  v0:= temp @kind object;
  #L4be874.  call temp:= `getErrorHandler`(v0) @signature `Lrx/plugins/RxJavaPlugins;.getErrorHandler:()Lrx/plugins/RxJavaErrorHandler;` @kind virtual;
  #L4be87a.  v0:= temp @kind object;
  #L4be87c.  call `handleError`(v0, v9) @signature `Lrx/plugins/RxJavaErrorHandler;.handleError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4be882.  v0:= 1I;
  #L4be884.  v1:= 0I;
  #L4be886.  v2:= 2I;
  #L4be888.  v3:= v8.`rx.observers.SafeSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4be88c.  call `onError`(v3, v9) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4be892.  call `unsubscribe`(v8) @signature `Lrx/observers/SafeSubscriber;.unsubscribe:()V` @kind virtual;
  #L4be898.  return @kind void;
  #L4be89a.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be89c.  call `onError`(v9) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4be8a2.  v0:= new `rx.exceptions.OnErrorFailedException`;
  #L4be8a6.  call `<init>`(v0, v9) @signature `Lrx/exceptions/OnErrorFailedException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4be8ac.  throw v0;
  #L4be8ae.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be8b0.  call `onError`(v3) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4be8b6.  call `unsubscribe`(v8) @signature `Lrx/observers/SafeSubscriber;.unsubscribe:()V` @kind virtual;
  #L4be8bc.  v4:= new `rx.exceptions.OnErrorFailedException`;
  #L4be8c0.  v5:= new `rx.exceptions.CompositeException`;
  #L4be8c4.  v2:= new `java.lang.Throwable`[v2];
  #L4be8c8.  v2[v1]:= v9 @kind object;
  #L4be8cc.  v2[v0]:= v3 @kind object;
  #L4be8d0.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4be8d6.  v9:= temp @kind object;
  #L4be8d8.  call `<init>`(v5, v9) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4be8de.  v9:= "Error occurred when trying to propagate error to Observer.onError" @kind object;
  #L4be8e2.  call `<init>`(v4, v9, v5) @signature `Lrx/exceptions/OnErrorFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4be8e8.  throw v4;
  #L4be8ea.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be8ec.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4be8f2.  v5:= new `rx.exceptions.OnErrorFailedException`;
  #L4be8f6.  v6:= new `rx.exceptions.CompositeException`;
  #L4be8fa.  v7:= 3I;
  #L4be8fc.  v7:= new `java.lang.Throwable`[v7];
  #L4be900.  v7[v1]:= v9 @kind object;
  #L4be904.  v7[v0]:= v3 @kind object;
  #L4be908.  v7[v2]:= v4 @kind object;
  #L4be90c.  call temp:= `asList`(v7) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4be912.  v9:= temp @kind object;
  #L4be914.  call `<init>`(v6, v9) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4be91a.  v9:= "Error occurred when trying to propagate error to Observer.onError and during unsubscription." @kind object;
  #L4be91e.  call `<init>`(v5, v9, v6) @signature `Lrx/exceptions/OnErrorFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4be924.  throw v5;
  #L4be926.  v3:= Exception @type ^`rx.exceptions.OnErrorNotImplementedException` @kind object;
  #L4be928.  call `unsubscribe`(v8) @signature `Lrx/observers/SafeSubscriber;.unsubscribe:()V` @kind virtual;
  #L4be92e.  throw v3;
  #L4be930.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be932.  call `onError`(v3) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4be938.  v4:= new `rx.exceptions.OnErrorNotImplementedException`;
  #L4be93c.  v5:= new `rx.exceptions.CompositeException`;
  #L4be940.  v2:= new `java.lang.Throwable`[v2];
  #L4be944.  v2[v1]:= v9 @kind object;
  #L4be948.  v2[v0]:= v3 @kind object;
  #L4be94c.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4be952.  v9:= temp @kind object;
  #L4be954.  call `<init>`(v5, v9) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4be95a.  v9:= "Observer.onError not implemented and error while unsubscribing." @kind object;
  #L4be95e.  call `<init>`(v4, v9, v5) @signature `Lrx/exceptions/OnErrorNotImplementedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4be964.  throw v4;
  catch `rx.exceptions.OnErrorNotImplementedException` @[L4be888..L4be892] goto L4be926;
  catch `java.lang.Throwable` @[L4be888..L4be892] goto L4be8ae;
  catch `java.lang.Throwable` @[L4be892..L4be898] goto L4be89a;
  catch `java.lang.Throwable` @[L4be8b6..L4be8bc] goto L4be8ea;
  catch `java.lang.Throwable` @[L4be928..L4be92e] goto L4be930;
}
procedure `rx.Subscriber` `getActual`(`rx.observers.SafeSubscriber` v1 @kind this) @signature `Lrx/observers/SafeSubscriber;.getActual:()Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4be838.  v0:= v1.`rx.observers.SafeSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4be83c.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.observers.SafeSubscriber` v3 @kind this) @signature `Lrx/observers/SafeSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4be9a4.  v0:= v3.`rx.observers.SafeSubscriber.done` @type ^`boolean` @kind boolean;
  #L4be9a8.  if v0 != 0 then goto L4bea28;
  #L4be9ac.  v0:= 1I;
  #L4be9ae.  v3.`rx.observers.SafeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4be9b2.  v0:= v3.`rx.observers.SafeSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4be9b6.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4be9bc.  call `unsubscribe`(v3) @signature `Lrx/observers/SafeSubscriber;.unsubscribe:()V` @kind virtual;
  #L4be9c2.  goto L4bea28;
  #L4be9c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be9c6.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4be9cc.  v1:= new `rx.exceptions.UnsubscribeFailedException`;
  #L4be9d0.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L4be9d6.  v2:= temp @kind object;
  #L4be9d8.  call `<init>`(v1, v2, v0) @signature `Lrx/exceptions/UnsubscribeFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4be9de.  throw v1;
  #L4be9e0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be9e2.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4be9e8.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4be9ee.  v1:= new `rx.exceptions.OnCompletedFailedException`;
  #L4be9f2.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L4be9f8.  v2:= temp @kind object;
  #L4be9fa.  call `<init>`(v1, v2, v0) @signature `Lrx/exceptions/OnCompletedFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4bea00.  throw v1;
  #L4bea02.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bea04.  call `unsubscribe`(v3) @signature `Lrx/observers/SafeSubscriber;.unsubscribe:()V` @kind virtual;
  #L4bea0a.  throw v0;
  #L4bea0c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bea0e.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bea14.  v1:= new `rx.exceptions.UnsubscribeFailedException`;
  #L4bea18.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L4bea1e.  v2:= temp @kind object;
  #L4bea20.  call `<init>`(v1, v2, v0) @signature `Lrx/exceptions/UnsubscribeFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4bea26.  throw v1;
  #L4bea28.  return @kind void;
  catch `java.lang.Throwable` @[L4be9b2..L4be9bc] goto L4be9e0;
  catch `java.lang.Throwable` @[L4be9bc..L4be9c2] goto L4be9c4;
  catch `java.lang.Throwable` @[L4be9e2..L4bea02] goto L4bea02;
  catch `java.lang.Throwable` @[L4bea04..L4bea0a] goto L4bea0c;
}
procedure `void` `onError`(`rx.observers.SafeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observers/SafeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bea68.  call `throwIfFatal`(v2) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bea6e.  v0:= v1.`rx.observers.SafeSubscriber.done` @type ^`boolean` @kind boolean;
  #L4bea72.  if v0 != 0 then goto L4bea82;
  #L4bea76.  v0:= 1I;
  #L4bea78.  v1.`rx.observers.SafeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4bea7c.  call `_onError`(v1, v2) @signature `Lrx/observers/SafeSubscriber;._onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bea82.  return @kind void;
}
procedure `void` `onNext`(`rx.observers.SafeSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observers/SafeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bea94.  v0:= v1.`rx.observers.SafeSubscriber.done` @type ^`boolean` @kind boolean;
  #L4bea98.  if v0 != 0 then goto L4beab0;
  #L4bea9c.  v0:= v1.`rx.observers.SafeSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4beaa0.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4beaa6.  goto L4beab0;
  #L4beaa8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4beaaa.  call `throwOrReport`(v2, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4beab0.  return @kind void;
  catch `java.lang.Throwable` @[L4bea94..L4beaa6] goto L4beaa8;
}
