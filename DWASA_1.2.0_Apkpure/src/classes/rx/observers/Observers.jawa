record `rx.observers.Observers` @kind class @AccessFlag PUBLIC_FINAL {
}
global `rx.Observer` `@@rx.observers.Observers.EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/observers/Observers;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4be688.  v0:= new `rx.observers.Observers$1`;
  #L4be68c.  call `<init>`(v0) @signature `Lrx/observers/Observers$1;.<init>:()V` @kind direct;
  #L4be692.  `@@rx.observers.Observers.EMPTY` @type ^`rx.Observer` := v0 @kind object;
  #L4be696.  return @kind void;
}
procedure `void` `<init>`(`rx.observers.Observers` v2 @kind this) @signature `Lrx/observers/Observers;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4be6a8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4be6ae.  v0:= new `java.lang.IllegalStateException`;
  #L4be6b2.  v1:= "No instances!" @kind object;
  #L4be6b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4be6bc.  throw v0;
}
procedure `rx.Observer` `create`(`rx.functions.Action1` v1 @kind object) @signature `Lrx/observers/Observers;.create:(Lrx/functions/Action1;)Lrx/Observer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4be5a4.  if v1 == 0 then goto L4be5b4;
  #L4be5a8.  v0:= new `rx.observers.Observers$2`;
  #L4be5ac.  call `<init>`(v0, v1) @signature `Lrx/observers/Observers$2;.<init>:(Lrx/functions/Action1;)V` @kind direct;
  #L4be5b2.  return v0 @kind object;
  #L4be5b4.  v1:= new `java.lang.IllegalArgumentException`;
  #L4be5b8.  v0:= "onNext can not be null" @kind object;
  #L4be5bc.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4be5c2.  throw v1;
}
procedure `rx.Observer` `create`(`rx.functions.Action1` v1 @kind object, `rx.functions.Action1` v2 @kind object) @signature `Lrx/observers/Observers;.create:(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Observer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4be5d4.  if v1 == 0 then goto L4be5f8;
  #L4be5d8.  if v2 == 0 then goto L4be5e8;
  #L4be5dc.  v0:= new `rx.observers.Observers$3`;
  #L4be5e0.  call `<init>`(v0, v2, v1) @signature `Lrx/observers/Observers$3;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;)V` @kind direct;
  #L4be5e6.  return v0 @kind object;
  #L4be5e8.  v1:= new `java.lang.IllegalArgumentException`;
  #L4be5ec.  v2:= "onError can not be null" @kind object;
  #L4be5f0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4be5f6.  throw v1;
  #L4be5f8.  v1:= new `java.lang.IllegalArgumentException`;
  #L4be5fc.  v2:= "onNext can not be null" @kind object;
  #L4be600.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4be606.  throw v1;
}
procedure `rx.Observer` `create`(`rx.functions.Action1` v1 @kind object, `rx.functions.Action1` v2 @kind object, `rx.functions.Action0` v3 @kind object) @signature `Lrx/observers/Observers;.create:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Observer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4be618.  if v1 == 0 then goto L4be650;
  #L4be61c.  if v2 == 0 then goto L4be640;
  #L4be620.  if v3 == 0 then goto L4be630;
  #L4be624.  v0:= new `rx.observers.Observers$4`;
  #L4be628.  call `<init>`(v0, v3, v2, v1) @signature `Lrx/observers/Observers$4;.<init>:(Lrx/functions/Action0;Lrx/functions/Action1;Lrx/functions/Action1;)V` @kind direct;
  #L4be62e.  return v0 @kind object;
  #L4be630.  v1:= new `java.lang.IllegalArgumentException`;
  #L4be634.  v2:= "onComplete can not be null" @kind object;
  #L4be638.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4be63e.  throw v1;
  #L4be640.  v1:= new `java.lang.IllegalArgumentException`;
  #L4be644.  v2:= "onError can not be null" @kind object;
  #L4be648.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4be64e.  throw v1;
  #L4be650.  v1:= new `java.lang.IllegalArgumentException`;
  #L4be654.  v2:= "onNext can not be null" @kind object;
  #L4be658.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4be65e.  throw v1;
}
procedure `rx.Observer` `empty`() @signature `Lrx/observers/Observers;.empty:()Lrx/Observer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4be670.  v0:= `@@rx.observers.Observers.EMPTY` @type ^`rx.Observer` @kind object;
  #L4be674.  return v0 @kind object;
}
