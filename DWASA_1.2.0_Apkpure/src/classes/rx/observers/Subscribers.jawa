record `rx.observers.Subscribers` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`rx.observers.Subscribers` v2 @kind this) @signature `Lrx/observers/Subscribers;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4bf198.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bf19e.  v0:= new `java.lang.IllegalStateException`;
  #L4bf1a2.  v1:= "No instances!" @kind object;
  #L4bf1a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bf1ac.  throw v0;
}
procedure `rx.Subscriber` `create`(`rx.functions.Action1` v1 @kind object) @signature `Lrx/observers/Subscribers;.create:(Lrx/functions/Action1;)Lrx/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bf070.  if v1 == 0 then goto L4bf080;
  #L4bf074.  v0:= new `rx.observers.Subscribers$2`;
  #L4bf078.  call `<init>`(v0, v1) @signature `Lrx/observers/Subscribers$2;.<init>:(Lrx/functions/Action1;)V` @kind direct;
  #L4bf07e.  return v0 @kind object;
  #L4bf080.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bf084.  v0:= "onNext can not be null" @kind object;
  #L4bf088.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bf08e.  throw v1;
}
procedure `rx.Subscriber` `create`(`rx.functions.Action1` v1 @kind object, `rx.functions.Action1` v2 @kind object) @signature `Lrx/observers/Subscribers;.create:(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bf0a0.  if v1 == 0 then goto L4bf0c4;
  #L4bf0a4.  if v2 == 0 then goto L4bf0b4;
  #L4bf0a8.  v0:= new `rx.observers.Subscribers$3`;
  #L4bf0ac.  call `<init>`(v0, v2, v1) @signature `Lrx/observers/Subscribers$3;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;)V` @kind direct;
  #L4bf0b2.  return v0 @kind object;
  #L4bf0b4.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bf0b8.  v2:= "onError can not be null" @kind object;
  #L4bf0bc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bf0c2.  throw v1;
  #L4bf0c4.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bf0c8.  v2:= "onNext can not be null" @kind object;
  #L4bf0cc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bf0d2.  throw v1;
}
procedure `rx.Subscriber` `create`(`rx.functions.Action1` v1 @kind object, `rx.functions.Action1` v2 @kind object, `rx.functions.Action0` v3 @kind object) @signature `Lrx/observers/Subscribers;.create:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bf0e4.  if v1 == 0 then goto L4bf11c;
  #L4bf0e8.  if v2 == 0 then goto L4bf10c;
  #L4bf0ec.  if v3 == 0 then goto L4bf0fc;
  #L4bf0f0.  v0:= new `rx.observers.Subscribers$4`;
  #L4bf0f4.  call `<init>`(v0, v3, v2, v1) @signature `Lrx/observers/Subscribers$4;.<init>:(Lrx/functions/Action0;Lrx/functions/Action1;Lrx/functions/Action1;)V` @kind direct;
  #L4bf0fa.  return v0 @kind object;
  #L4bf0fc.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bf100.  v2:= "onComplete can not be null" @kind object;
  #L4bf104.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bf10a.  throw v1;
  #L4bf10c.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bf110.  v2:= "onError can not be null" @kind object;
  #L4bf114.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bf11a.  throw v1;
  #L4bf11c.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bf120.  v2:= "onNext can not be null" @kind object;
  #L4bf124.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bf12a.  throw v1;
}
procedure `rx.Subscriber` `empty`() @signature `Lrx/observers/Subscribers;.empty:()Lrx/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bf13c.  call temp:= `empty`() @signature `Lrx/observers/Observers;.empty:()Lrx/Observer;` @kind static;
  #L4bf142.  v0:= temp @kind object;
  #L4bf144.  call temp:= `from`(v0) @signature `Lrx/observers/Subscribers;.from:(Lrx/Observer;)Lrx/Subscriber;` @kind static;
  #L4bf14a.  v0:= temp @kind object;
  #L4bf14c.  return v0 @kind object;
}
procedure `rx.Subscriber` `from`(`rx.Observer` v1 @kind object) @signature `Lrx/observers/Subscribers;.from:(Lrx/Observer;)Lrx/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bf160.  v0:= new `rx.observers.Subscribers$1`;
  #L4bf164.  call `<init>`(v0, v1) @signature `Lrx/observers/Subscribers$1;.<init>:(Lrx/Observer;)V` @kind direct;
  #L4bf16a.  return v0 @kind object;
}
procedure `rx.Subscriber` `wrap`(`rx.Subscriber` v1 @kind object) @signature `Lrx/observers/Subscribers;.wrap:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bf17c.  v0:= new `rx.observers.Subscribers$5`;
  #L4bf180.  call `<init>`(v0, v1, v1) @signature `Lrx/observers/Subscribers$5;.<init>:(Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L4bf186.  return v0 @kind object;
}
