record `rx.observers.SerializedObserver` @kind class @AccessFlag PUBLIC extends `rx.Observer` @kind interface {
  `rx.Observer` `rx.observers.SerializedObserver.actual` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.observers.SerializedObserver.emitting` @AccessFlag PRIVATE;
  `rx.observers.SerializedObserver$FastList` `rx.observers.SerializedObserver.queue` @AccessFlag PRIVATE;
  `boolean` `rx.observers.SerializedObserver.terminated` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`rx.observers.SerializedObserver` v0 @kind this, `rx.Observer` v1 @kind object) @signature `Lrx/observers/SerializedObserver;.<init>:(Lrx/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4beb40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4beb46.  v0.`rx.observers.SerializedObserver.actual` @type ^`rx.Observer` := v1 @kind object;
  #L4beb4a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observers.SerializedObserver` v2 @kind this) @signature `Lrx/observers/SerializedObserver;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4beb5c.  v0:= v2.`rx.observers.SerializedObserver.terminated` @type ^`boolean` @kind boolean;
  #L4beb60.  if v0 == 0 then goto L4beb66;
  #L4beb64.  return @kind void;
  #L4beb66.  @monitorenter v2
  #L4beb68.  v0:= v2.`rx.observers.SerializedObserver.terminated` @type ^`boolean` @kind boolean;
  #L4beb6c.  if v0 == 0 then goto L4beb74;
  #L4beb70.  @monitorexit v2
  #L4beb72.  return @kind void;
  #L4beb74.  v0:= 1I;
  #L4beb76.  v2.`rx.observers.SerializedObserver.terminated` @type ^`boolean` := v0 @kind boolean;
  #L4beb7a.  v1:= v2.`rx.observers.SerializedObserver.emitting` @type ^`boolean` @kind boolean;
  #L4beb7e.  if v1 == 0 then goto L4bebaa;
  #L4beb82.  v0:= v2.`rx.observers.SerializedObserver.queue` @type ^`rx.observers.SerializedObserver$FastList` @kind object;
  #L4beb86.  if v0 != 0 then goto L4beb98;
  #L4beb8a.  v0:= new `rx.observers.SerializedObserver$FastList`;
  #L4beb8e.  call `<init>`(v0) @signature `Lrx/observers/SerializedObserver$FastList;.<init>:()V` @kind direct;
  #L4beb94.  v2.`rx.observers.SerializedObserver.queue` @type ^`rx.observers.SerializedObserver$FastList` := v0 @kind object;
  #L4beb98.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4beb9e.  v1:= temp @kind object;
  #L4beba0.  call `add`(v0, v1) @signature `Lrx/observers/SerializedObserver$FastList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4beba6.  @monitorexit v2
  #L4beba8.  return @kind void;
  #L4bebaa.  v2.`rx.observers.SerializedObserver.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4bebae.  @monitorexit v2
  #L4bebb0.  v0:= v2.`rx.observers.SerializedObserver.actual` @type ^`rx.Observer` @kind object;
  #L4bebb4.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4bebba.  return @kind void;
  #L4bebbc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bebbe.  @monitorexit v2
  #L4bebc0.  throw v0;
  catch `java.lang.Throwable` @[L4beb68..L4bebb0] goto L4bebbc;
  catch `java.lang.Throwable` @[L4bebbe..L4bebc0] goto L4bebbc;
}
procedure `void` `onError`(`rx.observers.SerializedObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/observers/SerializedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bebe8.  call `throwIfFatal`(v3) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bebee.  v0:= v2.`rx.observers.SerializedObserver.terminated` @type ^`boolean` @kind boolean;
  #L4bebf2.  if v0 == 0 then goto L4bebf8;
  #L4bebf6.  return @kind void;
  #L4bebf8.  @monitorenter v2
  #L4bebfa.  v0:= v2.`rx.observers.SerializedObserver.terminated` @type ^`boolean` @kind boolean;
  #L4bebfe.  if v0 == 0 then goto L4bec06;
  #L4bec02.  @monitorexit v2
  #L4bec04.  return @kind void;
  #L4bec06.  v0:= 1I;
  #L4bec08.  v2.`rx.observers.SerializedObserver.terminated` @type ^`boolean` := v0 @kind boolean;
  #L4bec0c.  v1:= v2.`rx.observers.SerializedObserver.emitting` @type ^`boolean` @kind boolean;
  #L4bec10.  if v1 == 0 then goto L4bec3c;
  #L4bec14.  v0:= v2.`rx.observers.SerializedObserver.queue` @type ^`rx.observers.SerializedObserver$FastList` @kind object;
  #L4bec18.  if v0 != 0 then goto L4bec2a;
  #L4bec1c.  v0:= new `rx.observers.SerializedObserver$FastList`;
  #L4bec20.  call `<init>`(v0) @signature `Lrx/observers/SerializedObserver$FastList;.<init>:()V` @kind direct;
  #L4bec26.  v2.`rx.observers.SerializedObserver.queue` @type ^`rx.observers.SerializedObserver$FastList` := v0 @kind object;
  #L4bec2a.  call temp:= `error`(v3) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4bec30.  v3:= temp @kind object;
  #L4bec32.  call `add`(v0, v3) @signature `Lrx/observers/SerializedObserver$FastList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4bec38.  @monitorexit v2
  #L4bec3a.  return @kind void;
  #L4bec3c.  v2.`rx.observers.SerializedObserver.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4bec40.  @monitorexit v2
  #L4bec42.  v0:= v2.`rx.observers.SerializedObserver.actual` @type ^`rx.Observer` @kind object;
  #L4bec46.  call `onError`(v0, v3) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bec4c.  return @kind void;
  #L4bec4e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bec50.  @monitorexit v2
  #L4bec52.  throw v3;
  catch `java.lang.Throwable` @[L4bebfa..L4bec42] goto L4bec4e;
  catch `java.lang.Throwable` @[L4bec50..L4bec52] goto L4bec4e;
}
procedure `void` `onNext`(`rx.observers.SerializedObserver` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lrx/observers/SerializedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bec78.  v0:= v6.`rx.observers.SerializedObserver.terminated` @type ^`boolean` @kind boolean;
  #L4bec7c.  if v0 == 0 then goto L4bec82;
  #L4bec80.  return @kind void;
  #L4bec82.  @monitorenter v6
  #L4bec84.  v0:= v6.`rx.observers.SerializedObserver.terminated` @type ^`boolean` @kind boolean;
  #L4bec88.  if v0 == 0 then goto L4bec90;
  #L4bec8c.  @monitorexit v6
  #L4bec8e.  return @kind void;
  #L4bec90.  v0:= v6.`rx.observers.SerializedObserver.emitting` @type ^`boolean` @kind boolean;
  #L4bec94.  if v0 == 0 then goto L4becc0;
  #L4bec98.  v0:= v6.`rx.observers.SerializedObserver.queue` @type ^`rx.observers.SerializedObserver$FastList` @kind object;
  #L4bec9c.  if v0 != 0 then goto L4becae;
  #L4beca0.  v0:= new `rx.observers.SerializedObserver$FastList`;
  #L4beca4.  call `<init>`(v0) @signature `Lrx/observers/SerializedObserver$FastList;.<init>:()V` @kind direct;
  #L4becaa.  v6.`rx.observers.SerializedObserver.queue` @type ^`rx.observers.SerializedObserver$FastList` := v0 @kind object;
  #L4becae.  call temp:= `next`(v7) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4becb4.  v7:= temp @kind object;
  #L4becb6.  call `add`(v0, v7) @signature `Lrx/observers/SerializedObserver$FastList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4becbc.  @monitorexit v6
  #L4becbe.  return @kind void;
  #L4becc0.  v0:= 1I;
  #L4becc2.  v6.`rx.observers.SerializedObserver.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4becc6.  @monitorexit v6
  #L4becc8.  v1:= v6.`rx.observers.SerializedObserver.actual` @type ^`rx.Observer` @kind object;
  #L4beccc.  call `onNext`(v1, v7) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4becd2.  @monitorenter v6
  #L4becd4.  v1:= v6.`rx.observers.SerializedObserver.queue` @type ^`rx.observers.SerializedObserver$FastList` @kind object;
  #L4becd8.  v2:= 0I;
  #L4becda.  if v1 != 0 then goto L4bece6;
  #L4becde.  v6.`rx.observers.SerializedObserver.emitting` @type ^`boolean` := v2 @kind boolean;
  #L4bece2.  @monitorexit v6
  #L4bece4.  return @kind void;
  #L4bece6.  v3:= 0I;
  #L4bece8.  v6.`rx.observers.SerializedObserver.queue` @type ^`rx.observers.SerializedObserver$FastList` := v3 @kind object;
  #L4becec.  @monitorexit v6
  #L4becee.  v1:= v1.`rx.observers.SerializedObserver$FastList.array` @type ^`java.lang.Object`[] @kind object;
  #L4becf2.  v3:= length @variable v1;
  #L4becf4.  if v2 >= v3 then goto L4becd2;
  #L4becf8.  v4:= v1[v2] @kind object;
  #L4becfc.  if v4 != 0 then goto L4bed02;
  #L4bed00.  goto L4becd2;
  #L4bed02.  v5:= v6.`rx.observers.SerializedObserver.actual` @type ^`rx.Observer` @kind object;
  #L4bed06.  call temp:= `accept`(v5, v4) @signature `Lrx/internal/operators/NotificationLite;.accept:(Lrx/Observer;Ljava/lang/Object;)Z` @kind static;
  #L4bed0c.  v4:= temp;
  #L4bed0e.  if v4 == 0 then goto L4bed18;
  #L4bed12.  v6.`rx.observers.SerializedObserver.terminated` @type ^`boolean` := v0 @kind boolean;
  #L4bed16.  return @kind void;
  #L4bed18.  v2:= v2 + 1;
  #L4bed1c.  goto L4becf4;
  #L4bed1e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bed20.  v6.`rx.observers.SerializedObserver.terminated` @type ^`boolean` := v0 @kind boolean;
  #L4bed24.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bed2a.  v0:= v6.`rx.observers.SerializedObserver.actual` @type ^`rx.Observer` @kind object;
  #L4bed2e.  call temp:= `addValueAsLastCause`(v1, v7) @signature `Lrx/exceptions/OnErrorThrowable;.addValueAsLastCause:(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4bed34.  v7:= temp @kind object;
  #L4bed36.  call `onError`(v0, v7) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bed3c.  return @kind void;
  #L4bed3e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bed40.  @monitorexit v6
  #L4bed42.  throw v7;
  #L4bed44.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bed46.  v6.`rx.observers.SerializedObserver.terminated` @type ^`boolean` := v0 @kind boolean;
  #L4bed4a.  v0:= v6.`rx.observers.SerializedObserver.actual` @type ^`rx.Observer` @kind object;
  #L4bed4e.  call `throwOrReport`(v1, v0, v7) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4bed54.  return @kind void;
  #L4bed56.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bed58.  @monitorexit v6
  #L4bed5a.  goto L4bed5e;
  #L4bed5c.  throw v7;
  #L4bed5e.  goto L4bed5c;
  catch `java.lang.Throwable` @[L4bec84..L4becc8] goto L4bed56;
  catch `java.lang.Throwable` @[L4becc8..L4becd2] goto L4bed44;
  catch `java.lang.Throwable` @[L4becd4..L4becee] goto L4bed3e;
  catch `java.lang.Throwable` @[L4bed02..L4bed16] goto L4bed1e;
  catch `java.lang.Throwable` @[L4bed40..L4bed42] goto L4bed3e;
  catch `java.lang.Throwable` @[L4bed58..L4bed5a] goto L4bed56;
}
