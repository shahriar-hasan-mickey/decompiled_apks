record `rx.observers.Subscribers$1` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Observer` `rx.observers.Subscribers$1.val$o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.observers.Subscribers$1` v0 @kind this, `rx.Observer` v1 @kind object) @signature `Lrx/observers/Subscribers$1;.<init>:(Lrx/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bee44.  v0.`rx.observers.Subscribers$1.val$o` @type ^`rx.Observer` := v1 @kind object;
  #L4bee48.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4bee4e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observers.Subscribers$1` v1 @kind this) @signature `Lrx/observers/Subscribers$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bee60.  v0:= v1.`rx.observers.Subscribers$1.val$o` @type ^`rx.Observer` @kind object;
  #L4bee64.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4bee6a.  return @kind void;
}
procedure `void` `onError`(`rx.observers.Subscribers$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observers/Subscribers$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bee7c.  v0:= v1.`rx.observers.Subscribers$1.val$o` @type ^`rx.Observer` @kind object;
  #L4bee80.  call `onError`(v0, v2) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bee86.  return @kind void;
}
procedure `void` `onNext`(`rx.observers.Subscribers$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observers/Subscribers$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bee98.  v0:= v1.`rx.observers.Subscribers$1.val$o` @type ^`rx.Observer` @kind object;
  #L4bee9c.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4beea2.  return @kind void;
}
