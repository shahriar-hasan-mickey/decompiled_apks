record `rx.observers.SerializedSubscriber` @kind class @AccessFlag PUBLIC extends `rx.Subscriber` @kind class {
  `rx.Observer` `rx.observers.SerializedSubscriber.s` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.observers.SerializedSubscriber` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4bedac.  v0:= 1I;
  #L4bedae.  call `<init>`(v1, v2, v0) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;Z)V` @kind direct;
  #L4bedb4.  return @kind void;
}
procedure `void` `<init>`(`rx.observers.SerializedSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `boolean` v2 ) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bedc8.  call `<init>`(v0, v1, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;Z)V` @kind direct;
  #L4bedce.  v2:= new `rx.observers.SerializedObserver`;
  #L4bedd2.  call `<init>`(v2, v1) @signature `Lrx/observers/SerializedObserver;.<init>:(Lrx/Observer;)V` @kind direct;
  #L4bedd8.  v0.`rx.observers.SerializedSubscriber.s` @type ^`rx.Observer` := v2 @kind object;
  #L4beddc.  return @kind void;
}
procedure `void` `onCompleted`(`rx.observers.SerializedSubscriber` v1 @kind this) @signature `Lrx/observers/SerializedSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bedf0.  v0:= v1.`rx.observers.SerializedSubscriber.s` @type ^`rx.Observer` @kind object;
  #L4bedf4.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4bedfa.  return @kind void;
}
procedure `void` `onError`(`rx.observers.SerializedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bee0c.  v0:= v1.`rx.observers.SerializedSubscriber.s` @type ^`rx.Observer` @kind object;
  #L4bee10.  call `onError`(v0, v2) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bee16.  return @kind void;
}
procedure `void` `onNext`(`rx.observers.SerializedSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observers/SerializedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bee28.  v0:= v1.`rx.observers.SerializedSubscriber.s` @type ^`rx.Observer` @kind object;
  #L4bee2c.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bee32.  return @kind void;
}
