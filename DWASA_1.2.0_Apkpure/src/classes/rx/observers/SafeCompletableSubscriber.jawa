record `rx.observers.SafeCompletableSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `rx.CompletableSubscriber` @kind interface, `rx.Subscription` @kind interface {
  `rx.CompletableSubscriber` `rx.observers.SafeCompletableSubscriber.actual` @AccessFlag FINAL;
  `boolean` `rx.observers.SafeCompletableSubscriber.done` @AccessFlag ;
  `rx.Subscription` `rx.observers.SafeCompletableSubscriber.s` @AccessFlag ;
}
procedure `void` `<init>`(`rx.observers.SafeCompletableSubscriber` v0 @kind this, `rx.CompletableSubscriber` v1 @kind object) @signature `Lrx/observers/SafeCompletableSubscriber;.<init>:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4be704.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4be70a.  v0.`rx.observers.SafeCompletableSubscriber.actual` @type ^`rx.CompletableSubscriber` := v1 @kind object;
  #L4be70e.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.observers.SafeCompletableSubscriber` v1 @kind this) @signature `Lrx/observers/SafeCompletableSubscriber;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4be6d0.  v0:= v1.`rx.observers.SafeCompletableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4be6d4.  if v0 != 0 then goto L4be6ee;
  #L4be6d8.  v0:= v1.`rx.observers.SafeCompletableSubscriber.s` @type ^`rx.Subscription` @kind object;
  #L4be6dc.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscription;.isUnsubscribed:()Z` @kind interface;
  #L4be6e2.  v0:= temp;
  #L4be6e4.  if v0 == 0 then goto L4be6ea;
  #L4be6e8.  goto L4be6ee;
  #L4be6ea.  v0:= 0I;
  #L4be6ec.  goto L4be6f0;
  #L4be6ee.  v0:= 1I;
  #L4be6f0.  return v0;
}
procedure `void` `onCompleted`(`rx.observers.SafeCompletableSubscriber` v2 @kind this) @signature `Lrx/observers/SafeCompletableSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4be720.  v0:= v2.`rx.observers.SafeCompletableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4be724.  if v0 == 0 then goto L4be72a;
  #L4be728.  return @kind void;
  #L4be72a.  v0:= 1I;
  #L4be72c.  v2.`rx.observers.SafeCompletableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4be730.  v0:= v2.`rx.observers.SafeCompletableSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L4be734.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L4be73a.  return @kind void;
  #L4be73c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be73e.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4be744.  v1:= new `rx.exceptions.OnCompletedFailedException`;
  #L4be748.  call `<init>`(v1, v0) @signature `Lrx/exceptions/OnCompletedFailedException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4be74e.  throw v1;
  catch `java.lang.Throwable` @[L4be730..L4be73a] goto L4be73c;
}
procedure `void` `onError`(`rx.observers.SafeCompletableSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lrx/observers/SafeCompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4be76c.  call `onError`(v7) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4be772.  v0:= v6.`rx.observers.SafeCompletableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4be776.  if v0 == 0 then goto L4be77c;
  #L4be77a.  return @kind void;
  #L4be77c.  v0:= 1I;
  #L4be77e.  v6.`rx.observers.SafeCompletableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4be782.  v1:= v6.`rx.observers.SafeCompletableSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L4be786.  call `onError`(v1, v7) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4be78c.  return @kind void;
  #L4be78e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be790.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4be796.  v2:= new `rx.exceptions.OnErrorFailedException`;
  #L4be79a.  v3:= new `rx.exceptions.CompositeException`;
  #L4be79e.  v4:= 2I;
  #L4be7a0.  v4:= new `java.lang.Throwable`[v4];
  #L4be7a4.  v5:= 0I;
  #L4be7a6.  v4[v5]:= v7 @kind object;
  #L4be7aa.  v4[v0]:= v1 @kind object;
  #L4be7ae.  call `<init>`(v3, v4) @signature `Lrx/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4be7b4.  call `<init>`(v2, v3) @signature `Lrx/exceptions/OnErrorFailedException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4be7ba.  throw v2;
  catch `java.lang.Throwable` @[L4be782..L4be78c] goto L4be78e;
}
procedure `void` `onSubscribe`(`rx.observers.SafeCompletableSubscriber` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/observers/SafeCompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4be7d8.  v1.`rx.observers.SafeCompletableSubscriber.s` @type ^`rx.Subscription` := v2 @kind object;
  #L4be7dc.  v0:= v1.`rx.observers.SafeCompletableSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L4be7e0.  call `onSubscribe`(v0, v1) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L4be7e6.  goto L4be7fc;
  #L4be7e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4be7ea.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4be7f0.  call `unsubscribe`(v2) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4be7f6.  call `onError`(v1, v0) @signature `Lrx/observers/SafeCompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4be7fc.  return @kind void;
  catch `java.lang.Throwable` @[L4be7dc..L4be7e6] goto L4be7e8;
}
procedure `void` `unsubscribe`(`rx.observers.SafeCompletableSubscriber` v1 @kind this) @signature `Lrx/observers/SafeCompletableSubscriber;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4be81c.  v0:= v1.`rx.observers.SafeCompletableSubscriber.s` @type ^`rx.Subscription` @kind object;
  #L4be820.  call `unsubscribe`(v0) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4be826.  return @kind void;
}
