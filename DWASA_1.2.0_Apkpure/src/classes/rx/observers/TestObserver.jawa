record `rx.observers.TestObserver` @kind class @AccessFlag PUBLIC extends `rx.Observer` @kind interface {
  `rx.Observer` `rx.observers.TestObserver.delegate` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `rx.observers.TestObserver.onCompletedEvents` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `rx.observers.TestObserver.onErrorEvents` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `rx.observers.TestObserver.onNextEvents` @AccessFlag PRIVATE_FINAL;
}
global `rx.Observer` `@@rx.observers.TestObserver.INERT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/observers/TestObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4bf2b8.  v0:= new `rx.observers.TestObserver$1`;
  #L4bf2bc.  call `<init>`(v0) @signature `Lrx/observers/TestObserver$1;.<init>:()V` @kind direct;
  #L4bf2c2.  `@@rx.observers.TestObserver.INERT` @type ^`rx.Observer` := v0 @kind object;
  #L4bf2c6.  return @kind void;
}
procedure `void` `<init>`(`rx.observers.TestObserver` v1 @kind this) @signature `Lrx/observers/TestObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4bf2d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bf2de.  v0:= new `java.util.ArrayList`;
  #L4bf2e2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bf2e8.  v1.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` := v0 @kind object;
  #L4bf2ec.  v0:= new `java.util.ArrayList`;
  #L4bf2f0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bf2f6.  v1.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` := v0 @kind object;
  #L4bf2fa.  v0:= new `java.util.ArrayList`;
  #L4bf2fe.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bf304.  v1.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` := v0 @kind object;
  #L4bf308.  v0:= `@@rx.observers.TestObserver.INERT` @type ^`rx.Observer` @kind object;
  #L4bf30c.  v1.`rx.observers.TestObserver.delegate` @type ^`rx.Observer` := v0 @kind object;
  #L4bf310.  return @kind void;
}
procedure `void` `<init>`(`rx.observers.TestObserver` v1 @kind this, `rx.Observer` v2 @kind object) @signature `Lrx/observers/TestObserver;.<init>:(Lrx/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4bf324.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bf32a.  v0:= new `java.util.ArrayList`;
  #L4bf32e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bf334.  v1.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` := v0 @kind object;
  #L4bf338.  v0:= new `java.util.ArrayList`;
  #L4bf33c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bf342.  v1.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` := v0 @kind object;
  #L4bf346.  v0:= new `java.util.ArrayList`;
  #L4bf34a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bf350.  v1.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` := v0 @kind object;
  #L4bf354.  v1.`rx.observers.TestObserver.delegate` @type ^`rx.Observer` := v2 @kind object;
  #L4bf358.  return @kind void;
}
procedure `void` `assertReceivedOnNext`(`rx.observers.TestObserver` v5 @kind this, `java.util.List` v6 @kind object) @signature `Lrx/observers/TestObserver;.assertReceivedOnNext:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bf36c.  v0:= v5.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` @kind object;
  #L4bf370.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf376.  v0:= temp;
  #L4bf378.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf37e.  v1:= temp;
  #L4bf380.  if v0 == v1 then goto L4bf40e;
  #L4bf384.  v0:= new `java.lang.StringBuilder`;
  #L4bf388.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4bf38e.  v1:= "Number of items does not match. Provided: " @kind object;
  #L4bf392.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf398.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf39e.  v1:= temp;
  #L4bf3a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3a6.  v1:= "  Actual: " @kind object;
  #L4bf3aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3b0.  v1:= v5.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` @kind object;
  #L4bf3b4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf3ba.  v1:= temp;
  #L4bf3bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3c2.  v1:= ".\n" @kind object;
  #L4bf3c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3cc.  v1:= "Provided values: " @kind object;
  #L4bf3d0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3d6.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3dc.  v1:= "\n" @kind object;
  #L4bf3e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3e6.  v2:= "Actual values: " @kind object;
  #L4bf3ea.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3f0.  v2:= v5.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` @kind object;
  #L4bf3f4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf3fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf400.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bf406.  v0:= temp @kind object;
  #L4bf408.  call `assertionError`(v5, v0) @signature `Lrx/observers/TestObserver;.assertionError:(Ljava/lang/String;)V` @kind virtual;
  #L4bf40e.  v0:= 0I;
  #L4bf410.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf416.  v1:= temp;
  #L4bf418.  if v0 >= v1 then goto L4bf524;
  #L4bf41c.  call temp:= `get`(v6, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4bf422.  v1:= temp @kind object;
  #L4bf424.  v2:= v5.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` @kind object;
  #L4bf428.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4bf42e.  v2:= temp @kind object;
  #L4bf430.  v3:= "Value at index: " @kind object;
  #L4bf434.  if v1 != 0 then goto L4bf47c;
  #L4bf438.  if v2 == 0 then goto L4bf51c;
  #L4bf43c.  v1:= new `java.lang.StringBuilder`;
  #L4bf440.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4bf446.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf44c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf452.  v3:= " expected to be [null] but was: [" @kind object;
  #L4bf456.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf45c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf462.  v2:= "]\n" @kind object;
  #L4bf466.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf46c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bf472.  v1:= temp @kind object;
  #L4bf474.  call `assertionError`(v5, v1) @signature `Lrx/observers/TestObserver;.assertionError:(Ljava/lang/String;)V` @kind virtual;
  #L4bf47a.  goto L4bf51c;
  #L4bf47c.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4bf482.  v4:= temp;
  #L4bf484.  if v4 != 0 then goto L4bf51c;
  #L4bf488.  v4:= new `java.lang.StringBuilder`;
  #L4bf48c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4bf492.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf498.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf49e.  v3:= " expected to be [" @kind object;
  #L4bf4a2.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf4a8.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf4ae.  v3:= "] (" @kind object;
  #L4bf4b2.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf4b8.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4bf4be.  v1:= temp @kind object;
  #L4bf4c0.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4bf4c6.  v1:= temp @kind object;
  #L4bf4c8.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf4ce.  v1:= ") but was: [" @kind object;
  #L4bf4d2.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf4d8.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf4de.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf4e4.  if v2 == 0 then goto L4bf4fa;
  #L4bf4e8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4bf4ee.  v1:= temp @kind object;
  #L4bf4f0.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4bf4f6.  v1:= temp @kind object;
  #L4bf4f8.  goto L4bf4fe;
  #L4bf4fa.  v1:= "null" @kind object;
  #L4bf4fe.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf504.  v1:= ")\n" @kind object;
  #L4bf508.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf50e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bf514.  v1:= temp @kind object;
  #L4bf516.  call `assertionError`(v5, v1) @signature `Lrx/observers/TestObserver;.assertionError:(Ljava/lang/String;)V` @kind virtual;
  #L4bf51c.  v0:= v0 + 1;
  #L4bf520.  goto L4bf410;
  #L4bf524.  return @kind void;
}
procedure `void` `assertTerminalEvent`(`rx.observers.TestObserver` v3 @kind this) @signature `Lrx/observers/TestObserver;.assertTerminalEvent:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bf538.  v0:= v3.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf53c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf542.  v0:= temp;
  #L4bf544.  v1:= 1I;
  #L4bf546.  if v0 <= v1 then goto L4bf57e;
  #L4bf54a.  v0:= new `java.lang.StringBuilder`;
  #L4bf54e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4bf554.  v2:= "Too many onError events: " @kind object;
  #L4bf558.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf55e.  v2:= v3.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf562.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf568.  v2:= temp;
  #L4bf56a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf570.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bf576.  v0:= temp @kind object;
  #L4bf578.  call `assertionError`(v3, v0) @signature `Lrx/observers/TestObserver;.assertionError:(Ljava/lang/String;)V` @kind virtual;
  #L4bf57e.  v0:= v3.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` @kind object;
  #L4bf582.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf588.  v0:= temp;
  #L4bf58a.  if v0 <= v1 then goto L4bf5c2;
  #L4bf58e.  v0:= new `java.lang.StringBuilder`;
  #L4bf592.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4bf598.  v2:= "Too many onCompleted events: " @kind object;
  #L4bf59c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf5a2.  v2:= v3.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` @kind object;
  #L4bf5a6.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf5ac.  v2:= temp;
  #L4bf5ae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf5b4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bf5ba.  v0:= temp @kind object;
  #L4bf5bc.  call `assertionError`(v3, v0) @signature `Lrx/observers/TestObserver;.assertionError:(Ljava/lang/String;)V` @kind virtual;
  #L4bf5c2.  v0:= v3.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` @kind object;
  #L4bf5c6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf5cc.  v0:= temp;
  #L4bf5ce.  if v0 != v1 then goto L4bf5ec;
  #L4bf5d2.  v0:= v3.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf5d6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf5dc.  v0:= temp;
  #L4bf5de.  if v0 != v1 then goto L4bf5ec;
  #L4bf5e2.  v0:= "Received both an onError and onCompleted. Should be one or the other." @kind object;
  #L4bf5e6.  call `assertionError`(v3, v0) @signature `Lrx/observers/TestObserver;.assertionError:(Ljava/lang/String;)V` @kind virtual;
  #L4bf5ec.  v0:= v3.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` @kind object;
  #L4bf5f0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4bf5f6.  v0:= temp;
  #L4bf5f8.  if v0 == 0 then goto L4bf616;
  #L4bf5fc.  v0:= v3.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf600.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4bf606.  v0:= temp;
  #L4bf608.  if v0 == 0 then goto L4bf616;
  #L4bf60c.  v0:= "No terminal events received." @kind object;
  #L4bf610.  call `assertionError`(v3, v0) @signature `Lrx/observers/TestObserver;.assertionError:(Ljava/lang/String;)V` @kind virtual;
  #L4bf616.  return @kind void;
}
procedure `void` `assertionError`(`rx.observers.TestObserver` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lrx/observers/TestObserver;.assertionError:(Ljava/lang/String;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bf628.  v0:= new `java.lang.StringBuilder`;
  #L4bf62c.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4bf632.  v1:= temp;
  #L4bf634.  v1:= v1 + 32;
  #L4bf638.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4bf63e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf644.  v6:= " (" @kind object;
  #L4bf648.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf64e.  v6:= v5.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` @kind object;
  #L4bf652.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf658.  v6:= temp;
  #L4bf65a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf660.  v1:= " completion" @kind object;
  #L4bf664.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf66a.  v1:= 115I;
  #L4bf66e.  v2:= 1I;
  #L4bf670.  if v6 == v2 then goto L4bf67a;
  #L4bf674.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf67a.  v6:= 41I;
  #L4bf67e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf684.  v3:= v5.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf688.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4bf68e.  v3:= temp;
  #L4bf690.  if v3 != 0 then goto L4bf6ca;
  #L4bf694.  v3:= v5.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf698.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf69e.  v3:= temp;
  #L4bf6a0.  v4:= " (+" @kind object;
  #L4bf6a4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf6aa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf6b0.  v4:= " error" @kind object;
  #L4bf6b4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf6ba.  if v3 == v2 then goto L4bf6c4;
  #L4bf6be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf6c4.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4bf6ca.  v6:= new `java.lang.AssertionError`;
  #L4bf6ce.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bf6d4.  v0:= temp @kind object;
  #L4bf6d6.  call `<init>`(v6, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4bf6dc.  v0:= v5.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf6e0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4bf6e6.  v0:= temp;
  #L4bf6e8.  if v0 != 0 then goto L4bf72a;
  #L4bf6ec.  v0:= v5.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf6f0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bf6f6.  v0:= temp;
  #L4bf6f8.  if v0 != v2 then goto L4bf716;
  #L4bf6fc.  v0:= v5.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf700.  v1:= 0I;
  #L4bf702.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4bf708.  v0:= temp @kind object;
  #L4bf70a.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4bf70e.  call temp:= `initCause`(v6, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4bf714.  goto L4bf72a;
  #L4bf716.  v0:= new `rx.exceptions.CompositeException`;
  #L4bf71a.  v1:= v5.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf71e.  call `<init>`(v0, v1) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4bf724.  call temp:= `initCause`(v6, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4bf72a.  throw v6;
}
procedure `java.util.List` `getEvents`(`rx.observers.TestObserver` v2 @kind this) @signature `Lrx/observers/TestObserver;.getEvents:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bf214.  v0:= new `java.util.ArrayList`;
  #L4bf218.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4bf21e.  v1:= v2.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` @kind object;
  #L4bf222.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4bf228.  v1:= v2.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf22c.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4bf232.  v1:= v2.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` @kind object;
  #L4bf236.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4bf23c.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4bf242.  v0:= temp @kind object;
  #L4bf244.  return v0 @kind object;
}
procedure `java.util.List` `getOnCompletedEvents`(`rx.observers.TestObserver` v1 @kind this) @signature `Lrx/observers/TestObserver;.getOnCompletedEvents:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf258.  v0:= v1.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` @kind object;
  #L4bf25c.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4bf262.  v0:= temp @kind object;
  #L4bf264.  return v0 @kind object;
}
procedure `java.util.List` `getOnErrorEvents`(`rx.observers.TestObserver` v1 @kind this) @signature `Lrx/observers/TestObserver;.getOnErrorEvents:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf278.  v0:= v1.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf27c.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4bf282.  v0:= temp @kind object;
  #L4bf284.  return v0 @kind object;
}
procedure `java.util.List` `getOnNextEvents`(`rx.observers.TestObserver` v1 @kind this) @signature `Lrx/observers/TestObserver;.getOnNextEvents:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf298.  v0:= v1.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` @kind object;
  #L4bf29c.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4bf2a2.  v0:= temp @kind object;
  #L4bf2a4.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.observers.TestObserver` v2 @kind this) @signature `Lrx/observers/TestObserver;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bf73c.  v0:= v2.`rx.observers.TestObserver.onCompletedEvents` @type ^`java.util.List` @kind object;
  #L4bf740.  call temp:= `createOnCompleted`() @signature `Lrx/Notification;.createOnCompleted:()Lrx/Notification;` @kind static;
  #L4bf746.  v1:= temp @kind object;
  #L4bf748.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bf74e.  v0:= v2.`rx.observers.TestObserver.delegate` @type ^`rx.Observer` @kind object;
  #L4bf752.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4bf758.  return @kind void;
}
procedure `void` `onError`(`rx.observers.TestObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/observers/TestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf76c.  v0:= v1.`rx.observers.TestObserver.onErrorEvents` @type ^`java.util.List` @kind object;
  #L4bf770.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bf776.  v0:= v1.`rx.observers.TestObserver.delegate` @type ^`rx.Observer` @kind object;
  #L4bf77a.  call `onError`(v0, v2) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bf780.  return @kind void;
}
procedure `void` `onNext`(`rx.observers.TestObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf794.  v0:= v1.`rx.observers.TestObserver.onNextEvents` @type ^`java.util.List` @kind object;
  #L4bf798.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bf79e.  v0:= v1.`rx.observers.TestObserver.delegate` @type ^`rx.Observer` @kind object;
  #L4bf7a2.  call `onNext`(v0, v2) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bf7a8.  return @kind void;
}
