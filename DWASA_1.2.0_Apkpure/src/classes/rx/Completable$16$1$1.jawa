record `rx.Completable$16$1$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.Completable$16$1` `rx.Completable$16$1$1.this$2` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$16$1$1` v0 @kind this, `rx.Completable$16$1` v1 @kind object) @signature `Lrx/Completable$16$1$1;.<init>:(Lrx/Completable$16$1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L486cc4.  v0.`rx.Completable$16$1$1.this$2` @type ^`rx.Completable$16$1` := v1 @kind object;
  #L486cc8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L486cce.  return @kind void;
}
procedure `void` `call`(`rx.Completable$16$1$1` v2 @kind this) @signature `Lrx/Completable$16$1$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486ce0.  v0:= v2.`rx.Completable$16$1$1.this$2` @type ^`rx.Completable$16$1` @kind object;
  #L486ce4.  v0:= v0.`rx.Completable$16$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L486ce8.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L486cee.  v0:= v2.`rx.Completable$16$1$1.this$2` @type ^`rx.Completable$16$1` @kind object;
  #L486cf2.  v0:= v0.`rx.Completable$16$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L486cf6.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L486cfc.  return @kind void;
  #L486cfe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L486d00.  v1:= v2.`rx.Completable$16$1$1.this$2` @type ^`rx.Completable$16$1` @kind object;
  #L486d04.  v1:= v1.`rx.Completable$16$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L486d08.  call `unsubscribe`(v1) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L486d0e.  throw v0;
  catch `java.lang.Throwable` @[L486ce0..L486cee] goto L486cfe;
}
