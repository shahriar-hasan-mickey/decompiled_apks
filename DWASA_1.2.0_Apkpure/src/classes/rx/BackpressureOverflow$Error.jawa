record `rx.BackpressureOverflow$Error` @kind class @AccessFlag  extends `rx.BackpressureOverflow$Strategy` @kind interface {
}
global `rx.BackpressureOverflow$Error` `@@rx.BackpressureOverflow$Error.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/BackpressureOverflow$Error;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L48650c.  v0:= new `rx.BackpressureOverflow$Error`;
  #L486510.  call `<init>`(v0) @signature `Lrx/BackpressureOverflow$Error;.<init>:()V` @kind direct;
  #L486516.  `@@rx.BackpressureOverflow$Error.INSTANCE` @type ^`rx.BackpressureOverflow$Error` := v0 @kind object;
  #L48651a.  return @kind void;
}
procedure `void` `<init>`(`rx.BackpressureOverflow$Error` v0 @kind this) @signature `Lrx/BackpressureOverflow$Error;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L48652c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L486532.  return @kind void;
}
procedure `boolean` `mayAttemptDrop`(`rx.BackpressureOverflow$Error` v2 @kind this) @signature `Lrx/BackpressureOverflow$Error;.mayAttemptDrop:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4864ec.  v0:= new `rx.exceptions.MissingBackpressureException`;
  #L4864f0.  v1:= "Overflowed buffer" @kind object;
  #L4864f4.  call `<init>`(v0, v1) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4864fa.  throw v0;
}
