record `rx.Completable$12$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.Completable$12` `rx.Completable$12$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.CompletableSubscriber` `rx.Completable$12$1.val$s` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.Completable$12$1.val$w` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$12$1` v0 @kind this, `rx.Completable$12` v1 @kind object, `rx.CompletableSubscriber` v2 @kind object, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/Completable$12$1;.<init>:(Lrx/Completable$12;Lrx/CompletableSubscriber;Lrx/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48671c.  v0.`rx.Completable$12$1.this$0` @type ^`rx.Completable$12` := v1 @kind object;
  #L486720.  v0.`rx.Completable$12$1.val$s` @type ^`rx.CompletableSubscriber` := v2 @kind object;
  #L486724.  v0.`rx.Completable$12$1.val$w` @type ^`rx.Scheduler$Worker` := v3 @kind object;
  #L486728.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48672e.  return @kind void;
}
procedure `void` `call`(`rx.Completable$12$1` v2 @kind this) @signature `Lrx/Completable$12$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486740.  v0:= v2.`rx.Completable$12$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L486744.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L48674a.  v0:= v2.`rx.Completable$12$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L48674e.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L486754.  return @kind void;
  #L486756.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L486758.  v1:= v2.`rx.Completable$12$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L48675c.  call `unsubscribe`(v1) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L486762.  throw v0;
  catch `java.lang.Throwable` @[L486740..L48674a] goto L486756;
}
