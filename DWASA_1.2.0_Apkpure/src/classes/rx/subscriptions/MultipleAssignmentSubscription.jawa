record `rx.subscriptions.MultipleAssignmentSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Subscription` @kind interface {
  `rx.internal.subscriptions.SequentialSubscription` `rx.subscriptions.MultipleAssignmentSubscription.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.subscriptions.MultipleAssignmentSubscription` v1 @kind this) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c6594.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c659a.  v0:= new `rx.internal.subscriptions.SequentialSubscription`;
  #L4c659e.  call `<init>`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.<init>:()V` @kind direct;
  #L4c65a4.  v1.`rx.subscriptions.MultipleAssignmentSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` := v0 @kind object;
  #L4c65a8.  return @kind void;
}
procedure `rx.Subscription` `get`(`rx.subscriptions.MultipleAssignmentSubscription` v1 @kind this) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.get:()Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6574.  v0:= v1.`rx.subscriptions.MultipleAssignmentSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4c6578.  call temp:= `current`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.current:()Lrx/Subscription;` @kind virtual;
  #L4c657e.  v0:= temp @kind object;
  #L4c6580.  return v0 @kind object;
}
procedure `boolean` `isUnsubscribed`(`rx.subscriptions.MultipleAssignmentSubscription` v1 @kind this) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6554.  v0:= v1.`rx.subscriptions.MultipleAssignmentSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4c6558.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4c655e.  v0:= temp;
  #L4c6560.  return v0;
}
procedure `void` `set`(`rx.subscriptions.MultipleAssignmentSubscription` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.set:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c65bc.  if v2 == 0 then goto L4c65cc;
  #L4c65c0.  v0:= v1.`rx.subscriptions.MultipleAssignmentSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4c65c4.  call temp:= `replace`(v0, v2) @signature `Lrx/internal/subscriptions/SequentialSubscription;.replace:(Lrx/Subscription;)Z` @kind virtual;
  #L4c65ca.  return @kind void;
  #L4c65cc.  v2:= new `java.lang.IllegalArgumentException`;
  #L4c65d0.  v0:= "Subscription can not be null" @kind object;
  #L4c65d4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c65da.  throw v2;
}
procedure `void` `unsubscribe`(`rx.subscriptions.MultipleAssignmentSubscription` v1 @kind this) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c65ec.  v0:= v1.`rx.subscriptions.MultipleAssignmentSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4c65f0.  call `unsubscribe`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.unsubscribe:()V` @kind virtual;
  #L4c65f6.  return @kind void;
}
