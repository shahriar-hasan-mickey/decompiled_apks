record `rx.subscriptions.RefCountSubscription$State` @kind class @AccessFlag FINAL {
  `int` `rx.subscriptions.RefCountSubscription$State.children` @AccessFlag FINAL;
  `boolean` `rx.subscriptions.RefCountSubscription$State.isUnsubscribed` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.subscriptions.RefCountSubscription$State` v0 @kind this, `boolean` v1 , `int` v2 ) @signature `Lrx/subscriptions/RefCountSubscription$State;.<init>:(ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c66e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c66ee.  v0.`rx.subscriptions.RefCountSubscription$State.isUnsubscribed` @type ^`boolean` := v1 @kind boolean;
  #L4c66f2.  v0.`rx.subscriptions.RefCountSubscription$State.children` @type ^`int` := v2;
  #L4c66f6.  return @kind void;
}
procedure `rx.subscriptions.RefCountSubscription$State` `addChild`(`rx.subscriptions.RefCountSubscription$State` v3 @kind this) @signature `Lrx/subscriptions/RefCountSubscription$State;.addChild:()Lrx/subscriptions/RefCountSubscription$State;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c6674.  v0:= new `rx.subscriptions.RefCountSubscription$State`;
  #L4c6678.  v1:= v3.`rx.subscriptions.RefCountSubscription$State.isUnsubscribed` @type ^`boolean` @kind boolean;
  #L4c667c.  v2:= v3.`rx.subscriptions.RefCountSubscription$State.children` @type ^`int`;
  #L4c6680.  v2:= v2 + 1;
  #L4c6684.  call `<init>`(v0, v1, v2) @signature `Lrx/subscriptions/RefCountSubscription$State;.<init>:(ZI)V` @kind direct;
  #L4c668a.  return v0 @kind object;
}
procedure `rx.subscriptions.RefCountSubscription$State` `removeChild`(`rx.subscriptions.RefCountSubscription$State` v3 @kind this) @signature `Lrx/subscriptions/RefCountSubscription$State;.removeChild:()Lrx/subscriptions/RefCountSubscription$State;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c669c.  v0:= new `rx.subscriptions.RefCountSubscription$State`;
  #L4c66a0.  v1:= v3.`rx.subscriptions.RefCountSubscription$State.isUnsubscribed` @type ^`boolean` @kind boolean;
  #L4c66a4.  v2:= v3.`rx.subscriptions.RefCountSubscription$State.children` @type ^`int`;
  #L4c66a8.  v2:= v2 + -1;
  #L4c66ac.  call `<init>`(v0, v1, v2) @signature `Lrx/subscriptions/RefCountSubscription$State;.<init>:(ZI)V` @kind direct;
  #L4c66b2.  return v0 @kind object;
}
procedure `rx.subscriptions.RefCountSubscription$State` `unsubscribe`(`rx.subscriptions.RefCountSubscription$State` v3 @kind this) @signature `Lrx/subscriptions/RefCountSubscription$State;.unsubscribe:()Lrx/subscriptions/RefCountSubscription$State;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c66c4.  v0:= new `rx.subscriptions.RefCountSubscription$State`;
  #L4c66c8.  v1:= v3.`rx.subscriptions.RefCountSubscription$State.children` @type ^`int`;
  #L4c66cc.  v2:= 1I;
  #L4c66ce.  call `<init>`(v0, v2, v1) @signature `Lrx/subscriptions/RefCountSubscription$State;.<init>:(ZI)V` @kind direct;
  #L4c66d4.  return v0 @kind object;
}
