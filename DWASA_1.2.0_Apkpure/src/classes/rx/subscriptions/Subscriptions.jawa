record `rx.subscriptions.Subscriptions` @kind class @AccessFlag PUBLIC_FINAL {
}
global `rx.subscriptions.Subscriptions$Unsubscribed` `@@rx.subscriptions.Subscriptions.UNSUBSCRIBED` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/subscriptions/Subscriptions;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c6a74.  v0:= new `rx.subscriptions.Subscriptions$Unsubscribed`;
  #L4c6a78.  call `<init>`(v0) @signature `Lrx/subscriptions/Subscriptions$Unsubscribed;.<init>:()V` @kind direct;
  #L4c6a7e.  `@@rx.subscriptions.Subscriptions.UNSUBSCRIBED` @type ^`rx.subscriptions.Subscriptions$Unsubscribed` := v0 @kind object;
  #L4c6a82.  return @kind void;
}
procedure `void` `<init>`(`rx.subscriptions.Subscriptions` v2 @kind this) @signature `Lrx/subscriptions/Subscriptions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c6a94.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c6a9a.  v0:= new `java.lang.IllegalStateException`;
  #L4c6a9e.  v1:= "No instances!" @kind object;
  #L4c6aa2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c6aa8.  throw v0;
}
procedure `rx.Subscription` `create`(`rx.functions.Action0` v0 @kind object) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4c69ec.  call temp:= `create`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.create:(Lrx/functions/Action0;)Lrx/subscriptions/BooleanSubscription;` @kind static;
  #L4c69f2.  v0:= temp @kind object;
  #L4c69f4.  return v0 @kind object;
}
procedure `rx.Subscription` `empty`() @signature `Lrx/subscriptions/Subscriptions;.empty:()Lrx/Subscription;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c6a08.  call temp:= `create`() @signature `Lrx/subscriptions/BooleanSubscription;.create:()Lrx/subscriptions/BooleanSubscription;` @kind static;
  #L4c6a0e.  v0:= temp @kind object;
  #L4c6a10.  return v0 @kind object;
}
procedure `rx.Subscription` `from`(`java.util.concurrent.Future` v1 @kind object) @signature `Lrx/subscriptions/Subscriptions;.from:(Ljava/util/concurrent/Future;)Lrx/Subscription;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c6a24.  v0:= new `rx.subscriptions.Subscriptions$FutureSubscription`;
  #L4c6a28.  call `<init>`(v0, v1) @signature `Lrx/subscriptions/Subscriptions$FutureSubscription;.<init>:(Ljava/util/concurrent/Future;)V` @kind direct;
  #L4c6a2e.  return v0 @kind object;
}
procedure `rx.subscriptions.CompositeSubscription` `from`(`rx.Subscription`[] v1 @kind object) @signature `Lrx/subscriptions/Subscriptions;.from:([Lrx/Subscription;)Lrx/subscriptions/CompositeSubscription;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c6a58.  v0:= new `rx.subscriptions.CompositeSubscription`;
  #L4c6a5c.  call `<init>`(v0, v1) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:([Lrx/Subscription;)V` @kind direct;
  #L4c6a62.  return v0 @kind object;
}
procedure `rx.Subscription` `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c6a40.  v0:= `@@rx.subscriptions.Subscriptions.UNSUBSCRIBED` @type ^`rx.subscriptions.Subscriptions$Unsubscribed` @kind object;
  #L4c6a44.  return v0 @kind object;
}
