record `rx.subscriptions.BooleanSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `rx.subscriptions.BooleanSubscription.actionRef` @AccessFlag FINAL;
}
global `rx.functions.Action0` `@@rx.subscriptions.BooleanSubscription.EMPTY_ACTION` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/subscriptions/BooleanSubscription;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c6148.  v0:= new `rx.subscriptions.BooleanSubscription$1`;
  #L4c614c.  call `<init>`(v0) @signature `Lrx/subscriptions/BooleanSubscription$1;.<init>:()V` @kind direct;
  #L4c6152.  `@@rx.subscriptions.BooleanSubscription.EMPTY_ACTION` @type ^`rx.functions.Action0` := v0 @kind object;
  #L4c6156.  return @kind void;
}
procedure `void` `<init>`(`rx.subscriptions.BooleanSubscription` v1 @kind this) @signature `Lrx/subscriptions/BooleanSubscription;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c6168.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c616e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c6172.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c6178.  v1.`rx.subscriptions.BooleanSubscription.actionRef` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c617c.  return @kind void;
}
procedure `void` `<init>`(`rx.subscriptions.BooleanSubscription` v1 @kind this, `rx.functions.Action0` v2 @kind object) @signature `Lrx/subscriptions/BooleanSubscription;.<init>:(Lrx/functions/Action0;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4c6190.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c6196.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c619a.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c61a0.  v1.`rx.subscriptions.BooleanSubscription.actionRef` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c61a4.  return @kind void;
}
procedure `rx.subscriptions.BooleanSubscription` `create`() @signature `Lrx/subscriptions/BooleanSubscription;.create:()Lrx/subscriptions/BooleanSubscription;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c6110.  v0:= new `rx.subscriptions.BooleanSubscription`;
  #L4c6114.  call `<init>`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.<init>:()V` @kind direct;
  #L4c611a.  return v0 @kind object;
}
procedure `rx.subscriptions.BooleanSubscription` `create`(`rx.functions.Action0` v1 @kind object) @signature `Lrx/subscriptions/BooleanSubscription;.create:(Lrx/functions/Action0;)Lrx/subscriptions/BooleanSubscription;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c612c.  v0:= new `rx.subscriptions.BooleanSubscription`;
  #L4c6130.  call `<init>`(v0, v1) @signature `Lrx/subscriptions/BooleanSubscription;.<init>:(Lrx/functions/Action0;)V` @kind direct;
  #L4c6136.  return v0 @kind object;
}
procedure `boolean` `isUnsubscribed`(`rx.subscriptions.BooleanSubscription` v2 @kind this) @signature `Lrx/subscriptions/BooleanSubscription;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c60e4.  v0:= v2.`rx.subscriptions.BooleanSubscription.actionRef` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c60e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c60ee.  v0:= temp @kind object;
  #L4c60f0.  v1:= `@@rx.subscriptions.BooleanSubscription.EMPTY_ACTION` @type ^`rx.functions.Action0` @kind object;
  #L4c60f4.  if v0 != v1 then goto L4c60fc;
  #L4c60f8.  v0:= 1I;
  #L4c60fa.  goto L4c60fe;
  #L4c60fc.  v0:= 0I;
  #L4c60fe.  return v0;
}
procedure `void` `unsubscribe`(`rx.subscriptions.BooleanSubscription` v2 @kind this) @signature `Lrx/subscriptions/BooleanSubscription;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c61b8.  v0:= v2.`rx.subscriptions.BooleanSubscription.actionRef` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c61bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c61c2.  v0:= temp @kind object;
  #L4c61c4.  v0:= (`rx.functions.Action0`) v0 @kind object;
  #L4c61c8.  v1:= `@@rx.subscriptions.BooleanSubscription.EMPTY_ACTION` @type ^`rx.functions.Action0` @kind object;
  #L4c61cc.  if v0 == v1 then goto L4c61f2;
  #L4c61d0.  v0:= v2.`rx.subscriptions.BooleanSubscription.actionRef` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c61d4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c61da.  v0:= temp @kind object;
  #L4c61dc.  v0:= (`rx.functions.Action0`) v0 @kind object;
  #L4c61e0.  if v0 == 0 then goto L4c61f2;
  #L4c61e4.  v1:= `@@rx.subscriptions.BooleanSubscription.EMPTY_ACTION` @type ^`rx.functions.Action0` @kind object;
  #L4c61e8.  if v0 == v1 then goto L4c61f2;
  #L4c61ec.  call `call`(v0) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L4c61f2.  return @kind void;
}
