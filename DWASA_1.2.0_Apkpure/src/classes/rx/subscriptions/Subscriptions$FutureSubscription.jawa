record `rx.subscriptions.Subscriptions$FutureSubscription` @kind class @AccessFlag FINAL extends `rx.Subscription` @kind interface {
  `java.util.concurrent.Future` `rx.subscriptions.Subscriptions$FutureSubscription.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.subscriptions.Subscriptions$FutureSubscription` v0 @kind this, `java.util.concurrent.Future` v1 @kind object) @signature `Lrx/subscriptions/Subscriptions$FutureSubscription;.<init>:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c6970.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c6976.  v0.`rx.subscriptions.Subscriptions$FutureSubscription.f` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L4c697a.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.subscriptions.Subscriptions$FutureSubscription` v1 @kind this) @signature `Lrx/subscriptions/Subscriptions$FutureSubscription;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6950.  v0:= v1.`rx.subscriptions.Subscriptions$FutureSubscription.f` @type ^`java.util.concurrent.Future` @kind object;
  #L4c6954.  call temp:= `isCancelled`(v0) @signature `Ljava/util/concurrent/Future;.isCancelled:()Z` @kind interface;
  #L4c695a.  v0:= temp;
  #L4c695c.  return v0;
}
procedure `void` `unsubscribe`(`rx.subscriptions.Subscriptions$FutureSubscription` v2 @kind this) @signature `Lrx/subscriptions/Subscriptions$FutureSubscription;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c698c.  v0:= v2.`rx.subscriptions.Subscriptions$FutureSubscription.f` @type ^`java.util.concurrent.Future` @kind object;
  #L4c6990.  v1:= 1I;
  #L4c6992.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4c6998.  return @kind void;
}
