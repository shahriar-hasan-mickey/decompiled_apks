record `rx.subscriptions.SerialSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Subscription` @kind interface {
  `rx.internal.subscriptions.SequentialSubscription` `rx.subscriptions.SerialSubscription.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.subscriptions.SerialSubscription` v1 @kind this) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c68dc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c68e2.  v0:= new `rx.internal.subscriptions.SequentialSubscription`;
  #L4c68e6.  call `<init>`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.<init>:()V` @kind direct;
  #L4c68ec.  v1.`rx.subscriptions.SerialSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` := v0 @kind object;
  #L4c68f0.  return @kind void;
}
procedure `rx.Subscription` `get`(`rx.subscriptions.SerialSubscription` v1 @kind this) @signature `Lrx/subscriptions/SerialSubscription;.get:()Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c68bc.  v0:= v1.`rx.subscriptions.SerialSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4c68c0.  call temp:= `current`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.current:()Lrx/Subscription;` @kind virtual;
  #L4c68c6.  v0:= temp @kind object;
  #L4c68c8.  return v0 @kind object;
}
procedure `boolean` `isUnsubscribed`(`rx.subscriptions.SerialSubscription` v1 @kind this) @signature `Lrx/subscriptions/SerialSubscription;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c689c.  v0:= v1.`rx.subscriptions.SerialSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4c68a0.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4c68a6.  v0:= temp;
  #L4c68a8.  return v0;
}
procedure `void` `set`(`rx.subscriptions.SerialSubscription` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6904.  if v2 == 0 then goto L4c6914;
  #L4c6908.  v0:= v1.`rx.subscriptions.SerialSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4c690c.  call temp:= `update`(v0, v2) @signature `Lrx/internal/subscriptions/SequentialSubscription;.update:(Lrx/Subscription;)Z` @kind virtual;
  #L4c6912.  return @kind void;
  #L4c6914.  v2:= new `java.lang.IllegalArgumentException`;
  #L4c6918.  v0:= "Subscription can not be null" @kind object;
  #L4c691c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c6922.  throw v2;
}
procedure `void` `unsubscribe`(`rx.subscriptions.SerialSubscription` v1 @kind this) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6934.  v0:= v1.`rx.subscriptions.SerialSubscription.state` @type ^`rx.internal.subscriptions.SequentialSubscription` @kind object;
  #L4c6938.  call `unsubscribe`(v0) @signature `Lrx/internal/subscriptions/SequentialSubscription;.unsubscribe:()V` @kind virtual;
  #L4c693e.  return @kind void;
}
