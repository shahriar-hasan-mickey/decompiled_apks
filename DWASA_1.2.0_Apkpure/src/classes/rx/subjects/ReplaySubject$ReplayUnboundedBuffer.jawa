record `rx.subjects.ReplaySubject$ReplayUnboundedBuffer` @kind class @AccessFlag FINAL extends `rx.subjects.ReplaySubject$ReplayBuffer` @kind interface {
  `int` `rx.subjects.ReplaySubject$ReplayUnboundedBuffer.capacity` @AccessFlag FINAL;
  `boolean` `rx.subjects.ReplaySubject$ReplayUnboundedBuffer.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `rx.subjects.ReplaySubject$ReplayUnboundedBuffer.error` @AccessFlag ;
  `java.lang.Object`[] `rx.subjects.ReplaySubject$ReplayUnboundedBuffer.head` @AccessFlag FINAL;
  `int` `rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @AccessFlag VOLATILE;
  `java.lang.Object`[] `rx.subjects.ReplaySubject$ReplayUnboundedBuffer.tail` @AccessFlag ;
  `int` `rx.subjects.ReplaySubject$ReplayUnboundedBuffer.tailIndex` @AccessFlag ;
}
procedure `void` `<init>`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v0 @kind this, `int` v1 ) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c4928.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c492e.  v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.capacity` @type ^`int` := v1;
  #L4c4932.  v1:= v1 + 1;
  #L4c4936.  v1:= new `java.lang.Object`[v1];
  #L4c493a.  v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.head` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4c493e.  v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.tail` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4c4942.  return @kind void;
}
procedure `void` `complete`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4954.  v0:= 1I;
  #L4c4956.  v1.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.done` @type ^`boolean` := v0 @kind boolean;
  #L4c495a.  return @kind void;
}
procedure `void` `drain`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v18 @kind this, `rx.subjects.ReplaySubject$ReplayProducer` v19 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.drain:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4c496c.  v0:= v18 @kind object;
  #L4c4970.  v1:= v19 @kind object;
  #L4c4974.  call temp:= `getAndIncrement`(v19) @signature `Lrx/subjects/ReplaySubject$ReplayProducer;.getAndIncrement:()I` @kind virtual;
  #L4c497a.  v2:= temp;
  #L4c497c.  if v2 == 0 then goto L4c4982;
  #L4c4980.  return @kind void;
  #L4c4982.  v2:= v1.`rx.subjects.ReplaySubject$ReplayProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L4c4986.  v3:= v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.capacity` @type ^`int`;
  #L4c498a.  v4:= 1I;
  #L4c498c.  v5:= 1I;
  #L4c498e.  v6:= v1.`rx.subjects.ReplaySubject$ReplayProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c4992.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c4998.  v6:= temp @kind wide;
  #L4c499a.  v8:= v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` @kind object;
  #L4c499e.  v8:= (`java.lang.Object`[]) v8 @kind object;
  #L4c49a2.  v8:= (`java.lang.Object`[]) v8 @kind object;
  #L4c49a6.  if v8 != 0 then goto L4c49ae;
  #L4c49aa.  v8:= v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.head` @type ^`java.lang.Object`[] @kind object;
  #L4c49ae.  v9:= v1.`rx.subjects.ReplaySubject$ReplayProducer.tailIndex` @type ^`int`;
  #L4c49b2.  v10:= v1.`rx.subjects.ReplaySubject$ReplayProducer.index` @type ^`int`;
  #L4c49b6.  v14:= v8 @kind object;
  #L4c49b8.  v13:= v9;
  #L4c49ba.  v8:= 0L;
  #L4c49be.  v15:= 0I;
  #L4c49c0.  v17:= lcmp(v8, v6);
  #L4c49c4.  if v17 == 0 then goto L4c4a4c;
  #L4c49c8.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4c49ce.  v17:= temp;
  #L4c49d0.  if v17 == 0 then goto L4c49da;
  #L4c49d4.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v15 @kind object;
  #L4c49d8.  return @kind void;
  #L4c49da.  v11:= v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.done` @type ^`boolean` @kind boolean;
  #L4c49de.  v12:= v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @type ^`int`;
  #L4c49e2.  if v10 != v12 then goto L4c49ea;
  #L4c49e6.  v12:= 1I;
  #L4c49e8.  goto L4c49ec;
  #L4c49ea.  v12:= 0I;
  #L4c49ec.  if v11 == 0 then goto L4c4a10;
  #L4c49f0.  if v12 == 0 then goto L4c4a10;
  #L4c49f4.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v15 @kind object;
  #L4c49f8.  v1:= v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L4c49fc.  if v1 == 0 then goto L4c4a08;
  #L4c4a00.  call `onError`(v2, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c4a06.  goto L4c4a0e;
  #L4c4a08.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4c4a0e.  return @kind void;
  #L4c4a10.  if v12 == 0 then goto L4c4a16;
  #L4c4a14.  goto L4c4a4c;
  #L4c4a16.  if v13 != v3 then goto L4c4a2e;
  #L4c4a1a.  v11:= v14[v13] @kind object;
  #L4c4a1e.  v11:= (`java.lang.Object`[]) v11 @kind object;
  #L4c4a22.  v11:= (`java.lang.Object`[]) v11 @kind object;
  #L4c4a26.  v14:= v11 @kind object;
  #L4c4a28.  v16:= 0I;
  #L4c4a2c.  goto L4c4a32;
  #L4c4a2e.  v16:= v13;
  #L4c4a32.  v11:= v14[v16] @kind object;
  #L4c4a36.  call `onNext`(v2, v11) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c4a3c.  v11:= 1L;
  #L4c4a40.  v8:= v8 + v11 @kind long;
  #L4c4a42.  v13:= v16 + 1;
  #L4c4a46.  v10:= v10 + 1;
  #L4c4a4a.  goto L4c49be;
  #L4c4a4c.  v11:= lcmp(v8, v6);
  #L4c4a50.  if v11 != 0 then goto L4c4aa0;
  #L4c4a54.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4c4a5a.  v11:= temp;
  #L4c4a5c.  if v11 == 0 then goto L4c4a66;
  #L4c4a60.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v15 @kind object;
  #L4c4a64.  return @kind void;
  #L4c4a66.  v11:= v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.done` @type ^`boolean` @kind boolean;
  #L4c4a6a.  v12:= v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @type ^`int`;
  #L4c4a6e.  if v10 != v12 then goto L4c4a78;
  #L4c4a72.  v16:= 1I;
  #L4c4a76.  goto L4c4a7c;
  #L4c4a78.  v16:= 0I;
  #L4c4a7c.  if v11 == 0 then goto L4c4aa0;
  #L4c4a80.  if v16 == 0 then goto L4c4aa0;
  #L4c4a84.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v15 @kind object;
  #L4c4a88.  v1:= v0.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L4c4a8c.  if v1 == 0 then goto L4c4a98;
  #L4c4a90.  call `onError`(v2, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c4a96.  goto L4c4a9e;
  #L4c4a98.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4c4a9e.  return @kind void;
  #L4c4aa0.  v11:= 0L;
  #L4c4aa4.  v15:= lcmp(v8, v11);
  #L4c4aa8.  if v15 == 0 then goto L4c4ac8;
  #L4c4aac.  v11:= 9223372036854775807L;
  #L4c4ab6.  v15:= lcmp(v6, v11);
  #L4c4aba.  if v15 == 0 then goto L4c4ac8;
  #L4c4abe.  v6:= v1.`rx.subjects.ReplaySubject$ReplayProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c4ac2.  call temp:= `produced`(v6, v8) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c4ac8.  v1.`rx.subjects.ReplaySubject$ReplayProducer.index` @type ^`int` := v10;
  #L4c4acc.  v1.`rx.subjects.ReplaySubject$ReplayProducer.tailIndex` @type ^`int` := v13;
  #L4c4ad0.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v14 @kind object;
  #L4c4ad4.  v5:= -v5 @kind int;
  #L4c4ad6.  call temp:= `addAndGet`(v1, v5) @signature `Lrx/subjects/ReplaySubject$ReplayProducer;.addAndGet:(I)I` @kind virtual;
  #L4c4adc.  v5:= temp;
  #L4c4ade.  if v5 != 0 then goto L4c498e;
  #L4c4ae2.  return @kind void;
}
procedure `java.lang.Throwable` `error`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4910.  v0:= v1.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L4c4914.  return v0 @kind object;
}
procedure `void` `error`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4af4.  v0:= v1.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.done` @type ^`boolean` @kind boolean;
  #L4c4af8.  if v0 == 0 then goto L4c4b04;
  #L4c4afc.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4b02.  return @kind void;
  #L4c4b04.  v1.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4c4b08.  v2:= 1I;
  #L4c4b0a.  v1.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.done` @type ^`boolean` := v2 @kind boolean;
  #L4c4b0e.  return @kind void;
}
procedure `boolean` `isComplete`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.isComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c47fc.  v0:= v1.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.done` @type ^`boolean` @kind boolean;
  #L4c4800.  return v0;
}
procedure `boolean` `isEmpty`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4814.  v0:= v1.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @type ^`int`;
  #L4c4818.  if v0 != 0 then goto L4c4820;
  #L4c481c.  v0:= 1I;
  #L4c481e.  goto L4c4822;
  #L4c4820.  v0:= 0I;
  #L4c4822.  return v0;
}
procedure `java.lang.Object` `last`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v3 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.last:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c484c.  v0:= v3.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @type ^`int`;
  #L4c4850.  if v0 != 0 then goto L4c4858;
  #L4c4854.  v0:= 0I;
  #L4c4856.  return v0 @kind object;
  #L4c4858.  v1:= v3.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.head` @type ^`java.lang.Object`[] @kind object;
  #L4c485c.  v2:= v3.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.capacity` @type ^`int`;
  #L4c4860.  if v0 < v2 then goto L4c4874;
  #L4c4864.  v1:= v1[v2] @kind object;
  #L4c4868.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L4c486c.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L4c4870.  v0:= v0 - v2 @kind int;
  #L4c4872.  goto L4c4860;
  #L4c4874.  v0:= v0 + -1;
  #L4c4878.  v0:= v1[v0] @kind object;
  #L4c487c.  return v0 @kind object;
}
procedure `void` `next`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c4b20.  v0:= v5.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.done` @type ^`boolean` @kind boolean;
  #L4c4b24.  if v0 == 0 then goto L4c4b2a;
  #L4c4b28.  return @kind void;
  #L4c4b2a.  v0:= v5.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.tailIndex` @type ^`int`;
  #L4c4b2e.  v1:= v5.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.tail` @type ^`java.lang.Object`[] @kind object;
  #L4c4b32.  v2:= length @variable v1;
  #L4c4b34.  v3:= 1I;
  #L4c4b36.  v2:= v2 - v3 @kind int;
  #L4c4b38.  if v0 != v2 then goto L4c4b56;
  #L4c4b3c.  v2:= length @variable v1;
  #L4c4b3e.  v2:= new `java.lang.Object`[v2];
  #L4c4b42.  v4:= 0I;
  #L4c4b44.  v2[v4]:= v6 @kind object;
  #L4c4b48.  v5.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.tailIndex` @type ^`int` := v3;
  #L4c4b4c.  v1[v0]:= v2 @kind object;
  #L4c4b50.  v5.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.tail` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4c4b54.  goto L4c4b60;
  #L4c4b56.  v1[v0]:= v6 @kind object;
  #L4c4b5a.  v0:= v0 + v3 @kind int;
  #L4c4b5c.  v5.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.tailIndex` @type ^`int` := v0;
  #L4c4b60.  v6:= v5.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @type ^`int`;
  #L4c4b64.  v6:= v6 + v3 @kind int;
  #L4c4b66.  v5.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @type ^`int` := v6;
  #L4c4b6a.  return @kind void;
}
procedure `int` `size`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4834.  v0:= v1.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @type ^`int`;
  #L4c4838.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`rx.subjects.ReplaySubject$ReplayUnboundedBuffer` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c4890.  v0:= v6.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.size` @type ^`int`;
  #L4c4894.  v1:= length @variable v7;
  #L4c4896.  if v1 >= v0 then goto L4c48ba;
  #L4c489a.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4c48a0.  v7:= temp @kind object;
  #L4c48a2.  call temp:= `getComponentType`(v7) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4c48a8.  v7:= temp @kind object;
  #L4c48aa.  call temp:= `newInstance`(v7, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4c48b0.  v7:= temp @kind object;
  #L4c48b2.  v7:= (`java.lang.Object`[]) v7 @kind object;
  #L4c48b6.  v7:= (`java.lang.Object`[]) v7 @kind object;
  #L4c48ba.  v1:= v6.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.head` @type ^`java.lang.Object`[] @kind object;
  #L4c48be.  v2:= v6.`rx.subjects.ReplaySubject$ReplayUnboundedBuffer.capacity` @type ^`int`;
  #L4c48c2.  v3:= 0I;
  #L4c48c4.  v4:= v1 @kind object;
  #L4c48c6.  v1:= 0I;
  #L4c48c8.  v5:= v1 + v2 @kind int;
  #L4c48cc.  if v5 >= v0 then goto L4c48e8;
  #L4c48d0.  call `arraycopy`(v4, v3, v7, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c48d6.  v1:= v4[v2] @kind object;
  #L4c48da.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L4c48de.  v4:= v1 @kind object;
  #L4c48e0.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L4c48e4.  v1:= v5;
  #L4c48e6.  goto L4c48c8;
  #L4c48e8.  v2:= v0 - v1 @kind int;
  #L4c48ec.  call `arraycopy`(v4, v3, v7, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c48f2.  v1:= length @variable v7;
  #L4c48f4.  if v1 <= v0 then goto L4c48fe;
  #L4c48f8.  v1:= 0I;
  #L4c48fa.  v7[v0]:= v1 @kind object;
  #L4c48fe.  return v7 @kind object;
}
