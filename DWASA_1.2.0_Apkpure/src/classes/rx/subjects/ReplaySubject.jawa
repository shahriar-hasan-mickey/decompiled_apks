record `rx.subjects.ReplaySubject` @kind class @AccessFlag PUBLIC_FINAL extends `rx.subjects.Subject` @kind class {
  `rx.subjects.ReplaySubject$ReplayState` `rx.subjects.ReplaySubject.state` @AccessFlag FINAL;
}
global `java.lang.Object`[] `@@rx.subjects.ReplaySubject.EMPTY_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/subjects/ReplaySubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c4eec.  v0:= 0I;
  #L4c4eee.  v0:= new `java.lang.Object`[v0];
  #L4c4ef2.  `@@rx.subjects.ReplaySubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] := v0 @kind object;
  #L4c4ef6.  return @kind void;
}
procedure `void` `<init>`(`rx.subjects.ReplaySubject` v0 @kind this, `rx.subjects.ReplaySubject$ReplayState` v1 @kind object) @signature `Lrx/subjects/ReplaySubject;.<init>:(Lrx/subjects/ReplaySubject$ReplayState;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c4f08.  call `<init>`(v0, v1) @signature `Lrx/subjects/Subject;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4c4f0e.  v0.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` := v1 @kind object;
  #L4c4f12.  return @kind void;
}
procedure `rx.subjects.ReplaySubject` `create`() @signature `Lrx/subjects/ReplaySubject;.create:()Lrx/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c4d60.  v0:= 16I;
  #L4c4d64.  call temp:= `create`(v0) @signature `Lrx/subjects/ReplaySubject;.create:(I)Lrx/subjects/ReplaySubject;` @kind static;
  #L4c4d6a.  v0:= temp @kind object;
  #L4c4d6c.  return v0 @kind object;
}
procedure `rx.subjects.ReplaySubject` `create`(`int` v3 ) @signature `Lrx/subjects/ReplaySubject;.create:(I)Lrx/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4c4d80.  if v3 <= 0 then goto L4c4da4;
  #L4c4d84.  v0:= new `rx.subjects.ReplaySubject$ReplayUnboundedBuffer`;
  #L4c4d88.  call `<init>`(v0, v3) @signature `Lrx/subjects/ReplaySubject$ReplayUnboundedBuffer;.<init>:(I)V` @kind direct;
  #L4c4d8e.  v3:= new `rx.subjects.ReplaySubject$ReplayState`;
  #L4c4d92.  call `<init>`(v3, v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.<init>:(Lrx/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L4c4d98.  v0:= new `rx.subjects.ReplaySubject`;
  #L4c4d9c.  call `<init>`(v0, v3) @signature `Lrx/subjects/ReplaySubject;.<init>:(Lrx/subjects/ReplaySubject$ReplayState;)V` @kind direct;
  #L4c4da2.  return v0 @kind object;
  #L4c4da4.  v0:= new `java.lang.IllegalArgumentException`;
  #L4c4da8.  v1:= new `java.lang.StringBuilder`;
  #L4c4dac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c4db2.  v2:= "capacity > 0 required but it was " @kind object;
  #L4c4db6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c4dbc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c4dc2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c4dc8.  v3:= temp @kind object;
  #L4c4dca.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c4dd0.  throw v0;
}
procedure `rx.subjects.ReplaySubject` `createUnbounded`() @signature `Lrx/subjects/ReplaySubject;.createUnbounded:()Lrx/subjects/ReplaySubject;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4c4de4.  v0:= new `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer`;
  #L4c4de8.  v1:= 2147483647I;
  #L4c4dee.  call `<init>`(v0, v1) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.<init>:(I)V` @kind direct;
  #L4c4df4.  v1:= new `rx.subjects.ReplaySubject$ReplayState`;
  #L4c4df8.  call `<init>`(v1, v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.<init>:(Lrx/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L4c4dfe.  v0:= new `rx.subjects.ReplaySubject`;
  #L4c4e02.  call `<init>`(v0, v1) @signature `Lrx/subjects/ReplaySubject;.<init>:(Lrx/subjects/ReplaySubject$ReplayState;)V` @kind direct;
  #L4c4e08.  return v0 @kind object;
}
procedure `rx.subjects.ReplaySubject` `createUnboundedTime`() @signature `Lrx/subjects/ReplaySubject;.createUnboundedTime:()Lrx/subjects/ReplaySubject;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c4e1c.  v0:= new `rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer`;
  #L4c4e20.  call temp:= `immediate`() @signature `Lrx/schedulers/Schedulers;.immediate:()Lrx/Scheduler;` @kind static;
  #L4c4e26.  v1:= temp @kind object;
  #L4c4e28.  v2:= 2147483647I;
  #L4c4e2e.  v3:= 9223372036854775807L;
  #L4c4e38.  call `<init>`(v0, v2, v3, v1) @signature `Lrx/subjects/ReplaySubject$ReplaySizeAndTimeBoundBuffer;.<init>:(IJLrx/Scheduler;)V` @kind direct;
  #L4c4e3e.  v1:= new `rx.subjects.ReplaySubject$ReplayState`;
  #L4c4e42.  call `<init>`(v1, v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.<init>:(Lrx/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L4c4e48.  v0:= new `rx.subjects.ReplaySubject`;
  #L4c4e4c.  call `<init>`(v0, v1) @signature `Lrx/subjects/ReplaySubject;.<init>:(Lrx/subjects/ReplaySubject$ReplayState;)V` @kind direct;
  #L4c4e52.  return v0 @kind object;
}
procedure `rx.subjects.ReplaySubject` `createWithSize`(`int` v1 ) @signature `Lrx/subjects/ReplaySubject;.createWithSize:(I)Lrx/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c4e64.  v0:= new `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer`;
  #L4c4e68.  call `<init>`(v0, v1) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.<init>:(I)V` @kind direct;
  #L4c4e6e.  v1:= new `rx.subjects.ReplaySubject$ReplayState`;
  #L4c4e72.  call `<init>`(v1, v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.<init>:(Lrx/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L4c4e78.  v0:= new `rx.subjects.ReplaySubject`;
  #L4c4e7c.  call `<init>`(v0, v1) @signature `Lrx/subjects/ReplaySubject;.<init>:(Lrx/subjects/ReplaySubject$ReplayState;)V` @kind direct;
  #L4c4e82.  return v0 @kind object;
}
procedure `rx.subjects.ReplaySubject` `createWithTime`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/subjects/ReplaySubject;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c4e94.  v0:= 2147483647I;
  #L4c4e9a.  call temp:= `createWithTimeAndSize`(v1, v3, v0, v4) @signature `Lrx/subjects/ReplaySubject;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/subjects/ReplaySubject;` @kind static;
  #L4c4ea0.  v1:= temp @kind object;
  #L4c4ea2.  return v1 @kind object;
}
procedure `rx.subjects.ReplaySubject` `createWithTimeAndSize`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `int` v4 , `rx.Scheduler` v5 @kind object) @signature `Lrx/subjects/ReplaySubject;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c4eb4.  v0:= new `rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer`;
  #L4c4eb8.  call temp:= `toMillis`(v3, v1) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L4c4ebe.  v1:= temp @kind wide;
  #L4c4ec0.  call `<init>`(v0, v4, v1, v5) @signature `Lrx/subjects/ReplaySubject$ReplaySizeAndTimeBoundBuffer;.<init>:(IJLrx/Scheduler;)V` @kind direct;
  #L4c4ec6.  v1:= new `rx.subjects.ReplaySubject$ReplayState`;
  #L4c4eca.  call `<init>`(v1, v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.<init>:(Lrx/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L4c4ed0.  v2:= new `rx.subjects.ReplaySubject`;
  #L4c4ed4.  call `<init>`(v2, v1) @signature `Lrx/subjects/ReplaySubject;.<init>:(Lrx/subjects/ReplaySubject$ReplayState;)V` @kind direct;
  #L4c4eda.  return v2 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4d28.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4d2c.  call temp:= `isTerminated`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.isTerminated:()Z` @kind virtual;
  #L4c4d32.  v0:= temp;
  #L4c4d34.  if v0 == 0 then goto L4c4d4a;
  #L4c4d38.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4d3c.  v0:= v0.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4d40.  call temp:= `error`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.error:()Ljava/lang/Throwable;` @kind interface;
  #L4c4d46.  v0:= temp @kind object;
  #L4c4d48.  return v0 @kind object;
  #L4c4d4a.  v0:= 0I;
  #L4c4d4c.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4cb0.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4cb4.  v0:= v0.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4cb8.  call temp:= `last`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.last:()Ljava/lang/Object;` @kind interface;
  #L4c4cbe.  v0:= temp @kind object;
  #L4c4cc0.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`rx.subjects.ReplaySubject` v2 @kind this) @signature `Lrx/subjects/ReplaySubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c4cd4.  v0:= `@@rx.subjects.ReplaySubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L4c4cd8.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4c4cdc.  call temp:= `getValues`(v2, v0) @signature `Lrx/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L4c4ce2.  v0:= temp @kind object;
  #L4c4ce4.  v1:= `@@rx.subjects.ReplaySubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L4c4ce8.  if v0 != v1 then goto L4c4cf2;
  #L4c4cec.  v0:= 0I;
  #L4c4cee.  v0:= new `java.lang.Object`[v0];
  #L4c4cf2.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`rx.subjects.ReplaySubject` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lrx/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4d04.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4d08.  v0:= v0.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4d0c.  call temp:= `toArray`(v0, v2) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4c4d12.  v2:= temp @kind object;
  #L4c4d14.  return v2 @kind object;
}
procedure `boolean` `hasAnyValue`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.hasAnyValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4b7c.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4b80.  v0:= v0.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4b84.  call temp:= `isEmpty`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.isEmpty:()Z` @kind interface;
  #L4c4b8a.  v0:= temp;
  #L4c4b8c.  v0:= v0 ^~ 1;
  #L4c4b90.  return v0;
}
procedure `boolean` `hasCompleted`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.hasCompleted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4ba4.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4ba8.  call temp:= `isTerminated`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.isTerminated:()Z` @kind virtual;
  #L4c4bae.  v0:= temp;
  #L4c4bb0.  if v0 == 0 then goto L4c4bcc;
  #L4c4bb4.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4bb8.  v0:= v0.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4bbc.  call temp:= `error`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.error:()Ljava/lang/Throwable;` @kind interface;
  #L4c4bc2.  v0:= temp @kind object;
  #L4c4bc4.  if v0 != 0 then goto L4c4bcc;
  #L4c4bc8.  v0:= 1I;
  #L4c4bca.  goto L4c4bce;
  #L4c4bcc.  v0:= 0I;
  #L4c4bce.  return v0;
}
procedure `boolean` `hasObservers`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4be0.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4be4.  call temp:= `get`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4bea.  v0:= temp @kind object;
  #L4c4bec.  v0:= (`rx.subjects.ReplaySubject$ReplayProducer`[]) v0 @kind object;
  #L4c4bf0.  v0:= length @variable v0;
  #L4c4bf2.  if v0 == 0 then goto L4c4bfa;
  #L4c4bf6.  v0:= 1I;
  #L4c4bf8.  goto L4c4bfc;
  #L4c4bfa.  v0:= 0I;
  #L4c4bfc.  return v0;
}
procedure `boolean` `hasThrowable`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4c10.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4c14.  call temp:= `isTerminated`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.isTerminated:()Z` @kind virtual;
  #L4c4c1a.  v0:= temp;
  #L4c4c1c.  if v0 == 0 then goto L4c4c38;
  #L4c4c20.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4c24.  v0:= v0.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4c28.  call temp:= `error`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.error:()Ljava/lang/Throwable;` @kind interface;
  #L4c4c2e.  v0:= temp @kind object;
  #L4c4c30.  if v0 == 0 then goto L4c4c38;
  #L4c4c34.  v0:= 1I;
  #L4c4c36.  goto L4c4c3a;
  #L4c4c38.  v0:= 0I;
  #L4c4c3a.  return v0;
}
procedure `boolean` `hasValue`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4c4c.  call temp:= `hasAnyValue`(v1) @signature `Lrx/subjects/ReplaySubject;.hasAnyValue:()Z` @kind virtual;
  #L4c4c52.  v0:= temp;
  #L4c4c54.  return v0;
}
procedure `void` `onCompleted`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4f24.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4f28.  call `onCompleted`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.onCompleted:()V` @kind virtual;
  #L4c4f2e.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.ReplaySubject` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/subjects/ReplaySubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4f40.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4f44.  call `onError`(v0, v2) @signature `Lrx/subjects/ReplaySubject$ReplayState;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c4f4a.  return @kind void;
}
procedure `void` `onNext`(`rx.subjects.ReplaySubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/subjects/ReplaySubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4f5c.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4f60.  call `onNext`(v0, v2) @signature `Lrx/subjects/ReplaySubject$ReplayState;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c4f66.  return @kind void;
}
procedure `int` `size`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4c68.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4c6c.  v0:= v0.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4c70.  call temp:= `size`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.size:()I` @kind interface;
  #L4c4c76.  v0:= temp;
  #L4c4c78.  return v0;
}
procedure `int` `subscriberCount`(`rx.subjects.ReplaySubject` v1 @kind this) @signature `Lrx/subjects/ReplaySubject;.subscriberCount:()I` @AccessFlag  {
    temp;
    v0;

  #L4c4c8c.  v0:= v1.`rx.subjects.ReplaySubject.state` @type ^`rx.subjects.ReplaySubject$ReplayState` @kind object;
  #L4c4c90.  call temp:= `get`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4c96.  v0:= temp @kind object;
  #L4c4c98.  v0:= (`rx.subjects.ReplaySubject$ReplayProducer`[]) v0 @kind object;
  #L4c4c9c.  v0:= length @variable v0;
  #L4c4c9e.  return v0;
}
