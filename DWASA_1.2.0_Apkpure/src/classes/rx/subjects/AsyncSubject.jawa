record `rx.subjects.AsyncSubject` @kind class @AccessFlag PUBLIC_FINAL extends `rx.subjects.Subject` @kind class {
  `java.lang.Object` `rx.subjects.AsyncSubject.lastValue` @AccessFlag VOLATILE;
  `rx.subjects.SubjectSubscriptionManager` `rx.subjects.AsyncSubject.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.subjects.AsyncSubject` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object, `rx.subjects.SubjectSubscriptionManager` v2 @kind object) @signature `Lrx/subjects/AsyncSubject;.<init>:(Lrx/Observable$OnSubscribe;Lrx/subjects/SubjectSubscriptionManager;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4c31f0.  call `<init>`(v0, v1) @signature `Lrx/subjects/Subject;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4c31f6.  v0.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` := v2 @kind object;
  #L4c31fa.  return @kind void;
}
procedure `rx.subjects.AsyncSubject` `create`() @signature `Lrx/subjects/AsyncSubject;.create:()Lrx/subjects/AsyncSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c31bc.  v0:= new `rx.subjects.SubjectSubscriptionManager`;
  #L4c31c0.  call `<init>`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.<init>:()V` @kind direct;
  #L4c31c6.  v1:= new `rx.subjects.AsyncSubject$1`;
  #L4c31ca.  call `<init>`(v1, v0) @signature `Lrx/subjects/AsyncSubject$1;.<init>:(Lrx/subjects/SubjectSubscriptionManager;)V` @kind direct;
  #L4c31d0.  v0.`rx.subjects.SubjectSubscriptionManager.onTerminated` @type ^`rx.functions.Action1` := v1 @kind object;
  #L4c31d4.  v1:= new `rx.subjects.AsyncSubject`;
  #L4c31d8.  call `<init>`(v1, v0, v0) @signature `Lrx/subjects/AsyncSubject;.<init>:(Lrx/Observable$OnSubscribe;Lrx/subjects/SubjectSubscriptionManager;)V` @kind direct;
  #L4c31de.  return v1 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`rx.subjects.AsyncSubject` v2 @kind this) @signature `Lrx/subjects/AsyncSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3184.  v0:= v2.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3188.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c318e.  v0:= temp @kind object;
  #L4c3190.  call temp:= `isError`(v0) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c3196.  v1:= temp;
  #L4c3198.  if v1 == 0 then goto L4c31a6;
  #L4c319c.  call temp:= `getError`(v0) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4c31a2.  v0:= temp @kind object;
  #L4c31a4.  return v0 @kind object;
  #L4c31a6.  v0:= 0I;
  #L4c31a8.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`rx.subjects.AsyncSubject` v2 @kind this) @signature `Lrx/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c313c.  v0:= v2.`rx.subjects.AsyncSubject.lastValue` @type ^`java.lang.Object` @kind object;
  #L4c3140.  v1:= v2.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3144.  call temp:= `getLatest`(v1) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c314a.  v1:= temp @kind object;
  #L4c314c.  call temp:= `isError`(v1) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c3152.  v1:= temp;
  #L4c3154.  if v1 != 0 then goto L4c316e;
  #L4c3158.  call temp:= `isNext`(v0) @signature `Lrx/internal/operators/NotificationLite;.isNext:(Ljava/lang/Object;)Z` @kind static;
  #L4c315e.  v1:= temp;
  #L4c3160.  if v1 == 0 then goto L4c316e;
  #L4c3164.  call temp:= `getValue`(v0) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c316a.  v0:= temp @kind object;
  #L4c316c.  return v0 @kind object;
  #L4c316e.  v0:= 0I;
  #L4c3170.  return v0 @kind object;
}
procedure `boolean` `hasCompleted`(`rx.subjects.AsyncSubject` v1 @kind this) @signature `Lrx/subjects/AsyncSubject;.hasCompleted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3074.  v0:= v1.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3078.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c307e.  v0:= temp @kind object;
  #L4c3080.  if v0 == 0 then goto L4c3094;
  #L4c3084.  call temp:= `isError`(v0) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c308a.  v0:= temp;
  #L4c308c.  if v0 != 0 then goto L4c3094;
  #L4c3090.  v0:= 1I;
  #L4c3092.  goto L4c3096;
  #L4c3094.  v0:= 0I;
  #L4c3096.  return v0;
}
procedure `boolean` `hasObservers`(`rx.subjects.AsyncSubject` v1 @kind this) @signature `Lrx/subjects/AsyncSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c30a8.  v0:= v1.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c30ac.  call temp:= `observers`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.observers:()[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c30b2.  v0:= temp @kind object;
  #L4c30b4.  v0:= length @variable v0;
  #L4c30b6.  if v0 <= 0 then goto L4c30be;
  #L4c30ba.  v0:= 1I;
  #L4c30bc.  goto L4c30c0;
  #L4c30be.  v0:= 0I;
  #L4c30c0.  return v0;
}
procedure `boolean` `hasThrowable`(`rx.subjects.AsyncSubject` v1 @kind this) @signature `Lrx/subjects/AsyncSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c30d4.  v0:= v1.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c30d8.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c30de.  v0:= temp @kind object;
  #L4c30e0.  call temp:= `isError`(v0) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c30e6.  v0:= temp;
  #L4c30e8.  return v0;
}
procedure `boolean` `hasValue`(`rx.subjects.AsyncSubject` v2 @kind this) @signature `Lrx/subjects/AsyncSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c30fc.  v0:= v2.`rx.subjects.AsyncSubject.lastValue` @type ^`java.lang.Object` @kind object;
  #L4c3100.  v1:= v2.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3104.  call temp:= `getLatest`(v1) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c310a.  v1:= temp @kind object;
  #L4c310c.  call temp:= `isError`(v1) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c3112.  v1:= temp;
  #L4c3114.  if v1 != 0 then goto L4c3128;
  #L4c3118.  call temp:= `isNext`(v0) @signature `Lrx/internal/operators/NotificationLite;.isNext:(Ljava/lang/Object;)Z` @kind static;
  #L4c311e.  v0:= temp;
  #L4c3120.  if v0 == 0 then goto L4c3128;
  #L4c3124.  v0:= 1I;
  #L4c3126.  goto L4c312a;
  #L4c3128.  v0:= 0I;
  #L4c312a.  return v0;
}
procedure `void` `onCompleted`(`rx.subjects.AsyncSubject` v8 @kind this) @signature `Lrx/subjects/AsyncSubject;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c320c.  v0:= v8.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3210.  v0:= v0.`rx.subjects.SubjectSubscriptionManager.active` @type ^`boolean` @kind boolean;
  #L4c3214.  if v0 == 0 then goto L4c327a;
  #L4c3218.  v0:= v8.`rx.subjects.AsyncSubject.lastValue` @type ^`java.lang.Object` @kind object;
  #L4c321c.  if v0 != 0 then goto L4c3228;
  #L4c3220.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4c3226.  v0:= temp @kind object;
  #L4c3228.  v1:= v8.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c322c.  call temp:= `terminate`(v1, v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.terminate:(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c3232.  v1:= temp @kind object;
  #L4c3234.  v2:= length @variable v1;
  #L4c3236.  v3:= 0I;
  #L4c3238.  if v3 >= v2 then goto L4c327a;
  #L4c323c.  v4:= v1[v3] @kind object;
  #L4c3240.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4c3246.  v5:= temp @kind object;
  #L4c3248.  if v0 != v5 then goto L4c3254;
  #L4c324c.  call `onCompleted`(v4) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.onCompleted:()V` @kind virtual;
  #L4c3252.  goto L4c3274;
  #L4c3254.  v5:= v4.`rx.subjects.SubjectSubscriptionManager$SubjectObserver.actual` @type ^`rx.Subscriber` @kind object;
  #L4c3258.  v6:= new `rx.internal.producers.SingleProducer`;
  #L4c325c.  v4:= v4.`rx.subjects.SubjectSubscriptionManager$SubjectObserver.actual` @type ^`rx.Subscriber` @kind object;
  #L4c3260.  call temp:= `getValue`(v0) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c3266.  v7:= temp @kind object;
  #L4c3268.  call `<init>`(v6, v4, v7) @signature `Lrx/internal/producers/SingleProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L4c326e.  call `setProducer`(v5, v6) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4c3274.  v3:= v3 + 1;
  #L4c3278.  goto L4c3238;
  #L4c327a.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.AsyncSubject` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lrx/subjects/AsyncSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c328c.  v0:= v5.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3290.  v0:= v0.`rx.subjects.SubjectSubscriptionManager.active` @type ^`boolean` @kind boolean;
  #L4c3294.  if v0 == 0 then goto L4c32e4;
  #L4c3298.  call temp:= `error`(v6) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4c329e.  v0:= temp @kind object;
  #L4c32a0.  v1:= 0I;
  #L4c32a2.  v2:= v5.`rx.subjects.AsyncSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c32a6.  call temp:= `terminate`(v2, v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.terminate:(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c32ac.  v0:= temp @kind object;
  #L4c32ae.  v2:= length @variable v0;
  #L4c32b0.  v3:= 0I;
  #L4c32b2.  if v3 >= v2 then goto L4c32de;
  #L4c32b6.  v4:= v0[v3] @kind object;
  #L4c32ba.  call `onError`(v4, v6) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c32c0.  goto L4c32d8;
  #L4c32c2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c32c4.  if v1 != 0 then goto L4c32d2;
  #L4c32c8.  v1:= new `java.util.ArrayList`;
  #L4c32cc.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4c32d2.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c32d8.  v3:= v3 + 1;
  #L4c32dc.  goto L4c32b2;
  #L4c32de.  call `throwIfAny`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfAny:(Ljava/util/List;)V` @kind static;
  #L4c32e4.  return @kind void;
  catch `java.lang.Throwable` @[L4c32ba..L4c32c0] goto L4c32c2;
}
procedure `void` `onNext`(`rx.subjects.AsyncSubject` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/subjects/AsyncSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4c3304.  call temp:= `next`(v1) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c330a.  v1:= temp @kind object;
  #L4c330c.  v0.`rx.subjects.AsyncSubject.lastValue` @type ^`java.lang.Object` := v1 @kind object;
  #L4c3310.  return @kind void;
}
