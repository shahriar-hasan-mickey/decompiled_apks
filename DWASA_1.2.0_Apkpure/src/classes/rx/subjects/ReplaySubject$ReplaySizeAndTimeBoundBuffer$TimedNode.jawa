record `rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class {
  `long` `rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode.timestamp` @AccessFlag FINAL;
  `java.lang.Object` `rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode.value` @AccessFlag FINAL;
}
global `long` `@@rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode` v0 @kind this, `java.lang.Object` v1 @kind object, `long` v2 ) @signature `Lrx/subjects/ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode;.<init>:(Ljava/lang/Object;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c3db0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c3db6.  v0.`rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4c3dba.  v0.`rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode.timestamp` @type ^`long` := v2 @kind wide;
  #L4c3dbe.  return @kind void;
}
