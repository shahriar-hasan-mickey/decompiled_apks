record `rx.subjects.TestSubject$4` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.subjects.TestSubject` `rx.subjects.TestSubject$4.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `rx.subjects.TestSubject$4.val$v` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.subjects.TestSubject$4` v0 @kind this, `rx.subjects.TestSubject` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/subjects/TestSubject$4;.<init>:(Lrx/subjects/TestSubject;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c57e0.  v0.`rx.subjects.TestSubject$4.this$0` @type ^`rx.subjects.TestSubject` := v1 @kind object;
  #L4c57e4.  v0.`rx.subjects.TestSubject$4.val$v` @type ^`java.lang.Object` := v2 @kind object;
  #L4c57e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c57ee.  return @kind void;
}
procedure `void` `call`(`rx.subjects.TestSubject$4` v2 @kind this) @signature `Lrx/subjects/TestSubject$4;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5800.  v0:= v2.`rx.subjects.TestSubject$4.this$0` @type ^`rx.subjects.TestSubject` @kind object;
  #L4c5804.  v1:= v2.`rx.subjects.TestSubject$4.val$v` @type ^`java.lang.Object` @kind object;
  #L4c5808.  call `internalOnNext`(v0, v1) @signature `Lrx/subjects/TestSubject;.internalOnNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c580e.  return @kind void;
}
