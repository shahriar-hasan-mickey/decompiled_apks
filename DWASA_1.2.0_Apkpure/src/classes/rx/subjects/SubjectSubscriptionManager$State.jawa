record `rx.subjects.SubjectSubscriptionManager$State` @kind class @AccessFlag PUBLIC_FINAL {
  `rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] `rx.subjects.SubjectSubscriptionManager$State.observers` @AccessFlag FINAL;
  `boolean` `rx.subjects.SubjectSubscriptionManager$State.terminated` @AccessFlag FINAL;
}
global `rx.subjects.SubjectSubscriptionManager$State` `@@rx.subjects.SubjectSubscriptionManager$State.EMPTY` @AccessFlag STATIC_FINAL;
global `rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] `@@rx.subjects.SubjectSubscriptionManager$State.NO_OBSERVERS` @AccessFlag STATIC_FINAL;
global `rx.subjects.SubjectSubscriptionManager$State` `@@rx.subjects.SubjectSubscriptionManager$State.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/subjects/SubjectSubscriptionManager$State;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c517c.  v0:= 0I;
  #L4c517e.  v1:= new `rx.subjects.SubjectSubscriptionManager$SubjectObserver`[v0];
  #L4c5182.  `@@rx.subjects.SubjectSubscriptionManager$State.NO_OBSERVERS` @type ^`rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] := v1 @kind object;
  #L4c5186.  v1:= new `rx.subjects.SubjectSubscriptionManager$State`;
  #L4c518a.  v2:= `@@rx.subjects.SubjectSubscriptionManager$State.NO_OBSERVERS` @type ^`rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] @kind object;
  #L4c518e.  v3:= 1I;
  #L4c5190.  call `<init>`(v1, v3, v2) @signature `Lrx/subjects/SubjectSubscriptionManager$State;.<init>:(Z[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @kind direct;
  #L4c5196.  `@@rx.subjects.SubjectSubscriptionManager$State.TERMINATED` @type ^`rx.subjects.SubjectSubscriptionManager$State` := v1 @kind object;
  #L4c519a.  v1:= new `rx.subjects.SubjectSubscriptionManager$State`;
  #L4c519e.  v2:= `@@rx.subjects.SubjectSubscriptionManager$State.NO_OBSERVERS` @type ^`rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] @kind object;
  #L4c51a2.  call `<init>`(v1, v0, v2) @signature `Lrx/subjects/SubjectSubscriptionManager$State;.<init>:(Z[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @kind direct;
  #L4c51a8.  `@@rx.subjects.SubjectSubscriptionManager$State.EMPTY` @type ^`rx.subjects.SubjectSubscriptionManager$State` := v1 @kind object;
  #L4c51ac.  return @kind void;
}
procedure `void` `<init>`(`rx.subjects.SubjectSubscriptionManager$State` v0 @kind this, `boolean` v1 , `rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] v2 @kind object) @signature `Lrx/subjects/SubjectSubscriptionManager$State;.<init>:(Z[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c51c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c51c6.  v0.`rx.subjects.SubjectSubscriptionManager$State.terminated` @type ^`boolean` := v1 @kind boolean;
  #L4c51ca.  v0.`rx.subjects.SubjectSubscriptionManager$State.observers` @type ^`rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] := v2 @kind object;
  #L4c51ce.  return @kind void;
}
procedure `rx.subjects.SubjectSubscriptionManager$State` `add`(`rx.subjects.SubjectSubscriptionManager$State` v4 @kind this, `rx.subjects.SubjectSubscriptionManager$SubjectObserver` v5 @kind object) @signature `Lrx/subjects/SubjectSubscriptionManager$State;.add:(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c50b4.  v0:= v4.`rx.subjects.SubjectSubscriptionManager$State.observers` @type ^`rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] @kind object;
  #L4c50b8.  v1:= length @variable v0;
  #L4c50ba.  v2:= v1 + 1;
  #L4c50be.  v2:= new `rx.subjects.SubjectSubscriptionManager$SubjectObserver`[v2];
  #L4c50c2.  v3:= 0I;
  #L4c50c4.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c50ca.  v2[v1]:= v5 @kind object;
  #L4c50ce.  v5:= new `rx.subjects.SubjectSubscriptionManager$State`;
  #L4c50d2.  v0:= v4.`rx.subjects.SubjectSubscriptionManager$State.terminated` @type ^`boolean` @kind boolean;
  #L4c50d6.  call `<init>`(v5, v0, v2) @signature `Lrx/subjects/SubjectSubscriptionManager$State;.<init>:(Z[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @kind direct;
  #L4c50dc.  return v5 @kind object;
}
procedure `rx.subjects.SubjectSubscriptionManager$State` `remove`(`rx.subjects.SubjectSubscriptionManager$State` v9 @kind this, `rx.subjects.SubjectSubscriptionManager$SubjectObserver` v10 @kind object) @signature `Lrx/subjects/SubjectSubscriptionManager$State;.remove:(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4c50f0.  v0:= v9.`rx.subjects.SubjectSubscriptionManager$State.observers` @type ^`rx.subjects.SubjectSubscriptionManager$SubjectObserver`[] @kind object;
  #L4c50f4.  v1:= length @variable v0;
  #L4c50f6.  v2:= 1I;
  #L4c50f8.  v3:= 0I;
  #L4c50fa.  if v1 != v2 then goto L4c510c;
  #L4c50fe.  v2:= v0[v3] @kind object;
  #L4c5102.  if v2 != v10 then goto L4c510c;
  #L4c5106.  v10:= `@@rx.subjects.SubjectSubscriptionManager$State.EMPTY` @type ^`rx.subjects.SubjectSubscriptionManager$State` @kind object;
  #L4c510a.  return v10 @kind object;
  #L4c510c.  if v1 != 0 then goto L4c5112;
  #L4c5110.  return v9 @kind object;
  #L4c5112.  v2:= v1 + -1;
  #L4c5116.  v4:= new `rx.subjects.SubjectSubscriptionManager$SubjectObserver`[v2];
  #L4c511a.  v5:= 0I;
  #L4c511c.  v6:= 0I;
  #L4c511e.  if v5 >= v1 then goto L4c5140;
  #L4c5122.  v7:= v0[v5] @kind object;
  #L4c5126.  if v7 == v10 then goto L4c513a;
  #L4c512a.  if v6 != v2 then goto L4c5130;
  #L4c512e.  return v9 @kind object;
  #L4c5130.  v8:= v6 + 1;
  #L4c5134.  v4[v6]:= v7 @kind object;
  #L4c5138.  v6:= v8;
  #L4c513a.  v5:= v5 + 1;
  #L4c513e.  goto L4c511e;
  #L4c5140.  if v6 != 0 then goto L4c514a;
  #L4c5144.  v10:= `@@rx.subjects.SubjectSubscriptionManager$State.EMPTY` @type ^`rx.subjects.SubjectSubscriptionManager$State` @kind object;
  #L4c5148.  return v10 @kind object;
  #L4c514a.  if v6 >= v2 then goto L4c515a;
  #L4c514e.  v10:= new `rx.subjects.SubjectSubscriptionManager$SubjectObserver`[v6];
  #L4c5152.  call `arraycopy`(v4, v3, v10, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c5158.  goto L4c515c;
  #L4c515a.  v10:= v4 @kind object;
  #L4c515c.  v0:= new `rx.subjects.SubjectSubscriptionManager$State`;
  #L4c5160.  v1:= v9.`rx.subjects.SubjectSubscriptionManager$State.terminated` @type ^`boolean` @kind boolean;
  #L4c5164.  call `<init>`(v0, v1, v10) @signature `Lrx/subjects/SubjectSubscriptionManager$State;.<init>:(Z[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @kind direct;
  #L4c516a.  return v0 @kind object;
}
