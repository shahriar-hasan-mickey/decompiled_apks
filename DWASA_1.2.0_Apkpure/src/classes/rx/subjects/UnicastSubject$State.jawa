record `rx.subjects.UnicastSubject$State` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface, `rx.Observer` @kind interface, `rx.Observable$OnSubscribe` @kind interface, `rx.Subscription` @kind interface {
  `boolean` `rx.subjects.UnicastSubject$State.caughtUp` @AccessFlag VOLATILE;
  `boolean` `rx.subjects.UnicastSubject$State.done` @AccessFlag VOLATILE;
  `boolean` `rx.subjects.UnicastSubject$State.emitting` @AccessFlag ;
  `java.lang.Throwable` `rx.subjects.UnicastSubject$State.error` @AccessFlag ;
  `boolean` `rx.subjects.UnicastSubject$State.missed` @AccessFlag ;
  `java.util.Queue` `rx.subjects.UnicastSubject$State.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.subjects.UnicastSubject$State.subscriber` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.subjects.UnicastSubject$State.terminateOnce` @AccessFlag FINAL;
}
global `long` `@@rx.subjects.UnicastSubject$State.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.subjects.UnicastSubject$State` v1 @kind this, `int` v2 , `rx.functions.Action0` v3 @kind object) @signature `Lrx/subjects/UnicastSubject$State;.<init>:(ILrx/functions/Action0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c5ac8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c5ace.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c5ad2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c5ad8.  v1.`rx.subjects.UnicastSubject$State.subscriber` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c5adc.  if v3 == 0 then goto L4c5aec;
  #L4c5ae0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c5ae4.  call `<init>`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c5aea.  goto L4c5aee;
  #L4c5aec.  v0:= 0I;
  #L4c5aee.  v1.`rx.subjects.UnicastSubject$State.terminateOnce` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c5af2.  v3:= 1I;
  #L4c5af4.  if v2 <= v3 then goto L4c5b1c;
  #L4c5af8.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4c5afe.  v3:= temp;
  #L4c5b00.  if v3 == 0 then goto L4c5b10;
  #L4c5b04.  v3:= new `rx.internal.util.unsafe.SpscUnboundedArrayQueue`;
  #L4c5b08.  call `<init>`(v3, v2) @signature `Lrx/internal/util/unsafe/SpscUnboundedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c5b0e.  goto L4c5b40;
  #L4c5b10.  v3:= new `rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue`;
  #L4c5b14.  call `<init>`(v3, v2) @signature `Lrx/internal/util/atomic/SpscUnboundedAtomicArrayQueue;.<init>:(I)V` @kind direct;
  #L4c5b1a.  goto L4c5b40;
  #L4c5b1c.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4c5b22.  v2:= temp;
  #L4c5b24.  if v2 == 0 then goto L4c5b34;
  #L4c5b28.  v2:= new `rx.internal.util.unsafe.SpscLinkedQueue`;
  #L4c5b2c.  call `<init>`(v2) @signature `Lrx/internal/util/unsafe/SpscLinkedQueue;.<init>:()V` @kind direct;
  #L4c5b32.  goto L4c5b3e;
  #L4c5b34.  v2:= new `rx.internal.util.atomic.SpscLinkedAtomicQueue`;
  #L4c5b38.  call `<init>`(v2) @signature `Lrx/internal/util/atomic/SpscLinkedAtomicQueue;.<init>:()V` @kind direct;
  #L4c5b3e.  v3:= v2 @kind object;
  #L4c5b40.  v1.`rx.subjects.UnicastSubject$State.queue` @type ^`java.util.Queue` := v3 @kind object;
  #L4c5b44.  return @kind void;
}
procedure `void` `call`(`rx.subjects.UnicastSubject$State` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/subjects/UnicastSubject$State;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c5b58.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4c5b5c.  call `call`(v0, v1) @signature `Lrx/subjects/UnicastSubject$State;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4c5b62.  return @kind void;
}
procedure `void` `call`(`rx.subjects.UnicastSubject$State` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/subjects/UnicastSubject$State;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5b74.  v0:= v2.`rx.subjects.UnicastSubject$State.subscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5b78.  v1:= 0I;
  #L4c5b7a.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c5b80.  v0:= temp;
  #L4c5b82.  if v0 == 0 then goto L4c5b94;
  #L4c5b86.  call `add`(v3, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4c5b8c.  call `setProducer`(v3, v2) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4c5b92.  goto L4c5ba8;
  #L4c5b94.  v0:= new `java.lang.IllegalStateException`;
  #L4c5b98.  v1:= "Only a single subscriber is allowed" @kind object;
  #L4c5b9c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5ba2.  call `onError`(v3, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c5ba8.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.subjects.UnicastSubject$State` v2 @kind this, `boolean` v3 , `boolean` v4 , `rx.Subscriber` v5 @kind object) @signature `Lrx/subjects/UnicastSubject$State;.checkTerminated:(ZZLrx/Subscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c5a58.  call temp:= `isUnsubscribed`(v5) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4c5a5e.  v0:= temp;
  #L4c5a60.  v1:= 1I;
  #L4c5a62.  if v0 == 0 then goto L4c5a72;
  #L4c5a66.  v3:= v2.`rx.subjects.UnicastSubject$State.queue` @type ^`java.util.Queue` @kind object;
  #L4c5a6a.  call `clear`(v3) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4c5a70.  return v1;
  #L4c5a72.  if v3 == 0 then goto L4c5a9c;
  #L4c5a76.  v3:= v2.`rx.subjects.UnicastSubject$State.error` @type ^`java.lang.Throwable` @kind object;
  #L4c5a7a.  if v3 == 0 then goto L4c5a90;
  #L4c5a7e.  v4:= v2.`rx.subjects.UnicastSubject$State.queue` @type ^`java.util.Queue` @kind object;
  #L4c5a82.  call `clear`(v4) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4c5a88.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c5a8e.  return v1;
  #L4c5a90.  if v4 == 0 then goto L4c5a9c;
  #L4c5a94.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4c5a9a.  return v1;
  #L4c5a9c.  v3:= 0I;
  #L4c5a9e.  return v3;
}
procedure `void` `doTerminate`(`rx.subjects.UnicastSubject$State` v3 @kind this) @signature `Lrx/subjects/UnicastSubject$State;.doTerminate:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c5bbc.  v0:= v3.`rx.subjects.UnicastSubject$State.terminateOnce` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5bc0.  if v0 == 0 then goto L4c5be8;
  #L4c5bc4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5bca.  v1:= temp @kind object;
  #L4c5bcc.  v1:= (`rx.functions.Action0`) v1 @kind object;
  #L4c5bd0.  if v1 == 0 then goto L4c5be8;
  #L4c5bd4.  v2:= 0I;
  #L4c5bd6.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c5bdc.  v0:= temp;
  #L4c5bde.  if v0 == 0 then goto L4c5be8;
  #L4c5be2.  call `call`(v1) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L4c5be8.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.subjects.UnicastSubject$State` v1 @kind this) @signature `Lrx/subjects/UnicastSubject$State;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5ab0.  v0:= v1.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` @kind boolean;
  #L4c5ab4.  return v0;
}
procedure `void` `onCompleted`(`rx.subjects.UnicastSubject$State` v2 @kind this) @signature `Lrx/subjects/UnicastSubject$State;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5bfc.  v0:= v2.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` @kind boolean;
  #L4c5c00.  if v0 != 0 then goto L4c5c50;
  #L4c5c04.  call `doTerminate`(v2) @signature `Lrx/subjects/UnicastSubject$State;.doTerminate:()V` @kind virtual;
  #L4c5c0a.  v0:= 1I;
  #L4c5c0c.  v2.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` := v0 @kind boolean;
  #L4c5c10.  v1:= v2.`rx.subjects.UnicastSubject$State.caughtUp` @type ^`boolean` @kind boolean;
  #L4c5c14.  if v1 != 0 then goto L4c5c3a;
  #L4c5c18.  @monitorenter v2
  #L4c5c1a.  v1:= v2.`rx.subjects.UnicastSubject$State.caughtUp` @type ^`boolean` @kind boolean;
  #L4c5c1e.  if v1 != 0 then goto L4c5c24;
  #L4c5c22.  goto L4c5c26;
  #L4c5c24.  v0:= 0I;
  #L4c5c26.  @monitorexit v2
  #L4c5c28.  if v0 == 0 then goto L4c5c3a;
  #L4c5c2c.  call `replay`(v2) @signature `Lrx/subjects/UnicastSubject$State;.replay:()V` @kind virtual;
  #L4c5c32.  return @kind void;
  #L4c5c34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5c36.  @monitorexit v2
  #L4c5c38.  throw v0;
  #L4c5c3a.  v0:= v2.`rx.subjects.UnicastSubject$State.subscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5c3e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5c44.  v0:= temp @kind object;
  #L4c5c46.  v0:= (`rx.Subscriber`) v0 @kind object;
  #L4c5c4a.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4c5c50.  return @kind void;
  catch `java.lang.Throwable` @[L4c5c1a..L4c5c28] goto L4c5c34;
  catch `java.lang.Throwable` @[L4c5c36..L4c5c38] goto L4c5c34;
}
procedure `void` `onError`(`rx.subjects.UnicastSubject$State` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/subjects/UnicastSubject$State;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5c78.  v0:= v2.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` @kind boolean;
  #L4c5c7c.  if v0 != 0 then goto L4c5cd0;
  #L4c5c80.  call `doTerminate`(v2) @signature `Lrx/subjects/UnicastSubject$State;.doTerminate:()V` @kind virtual;
  #L4c5c86.  v2.`rx.subjects.UnicastSubject$State.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4c5c8a.  v0:= 1I;
  #L4c5c8c.  v2.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` := v0 @kind boolean;
  #L4c5c90.  v1:= v2.`rx.subjects.UnicastSubject$State.caughtUp` @type ^`boolean` @kind boolean;
  #L4c5c94.  if v1 != 0 then goto L4c5cba;
  #L4c5c98.  @monitorenter v2
  #L4c5c9a.  v1:= v2.`rx.subjects.UnicastSubject$State.caughtUp` @type ^`boolean` @kind boolean;
  #L4c5c9e.  if v1 != 0 then goto L4c5ca4;
  #L4c5ca2.  goto L4c5ca6;
  #L4c5ca4.  v0:= 0I;
  #L4c5ca6.  @monitorexit v2
  #L4c5ca8.  if v0 == 0 then goto L4c5cba;
  #L4c5cac.  call `replay`(v2) @signature `Lrx/subjects/UnicastSubject$State;.replay:()V` @kind virtual;
  #L4c5cb2.  return @kind void;
  #L4c5cb4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5cb6.  @monitorexit v2
  #L4c5cb8.  throw v3;
  #L4c5cba.  v0:= v2.`rx.subjects.UnicastSubject$State.subscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5cbe.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5cc4.  v0:= temp @kind object;
  #L4c5cc6.  v0:= (`rx.Subscriber`) v0 @kind object;
  #L4c5cca.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c5cd0.  return @kind void;
  catch `java.lang.Throwable` @[L4c5c9a..L4c5ca8] goto L4c5cb4;
  catch `java.lang.Throwable` @[L4c5cb6..L4c5cb8] goto L4c5cb4;
}
procedure `void` `onNext`(`rx.subjects.UnicastSubject$State` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/subjects/UnicastSubject$State;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5cf8.  v0:= v2.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` @kind boolean;
  #L4c5cfc.  if v0 != 0 then goto L4c5d5c;
  #L4c5d00.  v0:= v2.`rx.subjects.UnicastSubject$State.caughtUp` @type ^`boolean` @kind boolean;
  #L4c5d04.  if v0 != 0 then goto L4c5d3c;
  #L4c5d08.  v0:= 0I;
  #L4c5d0a.  @monitorenter v2
  #L4c5d0c.  v1:= v2.`rx.subjects.UnicastSubject$State.caughtUp` @type ^`boolean` @kind boolean;
  #L4c5d10.  if v1 != 0 then goto L4c5d28;
  #L4c5d14.  v0:= v2.`rx.subjects.UnicastSubject$State.queue` @type ^`java.util.Queue` @kind object;
  #L4c5d18.  call temp:= `next`(v3) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c5d1e.  v1:= temp @kind object;
  #L4c5d20.  call temp:= `offer`(v0, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c5d26.  v0:= 1I;
  #L4c5d28.  @monitorexit v2
  #L4c5d2a.  if v0 == 0 then goto L4c5d3c;
  #L4c5d2e.  call `replay`(v2) @signature `Lrx/subjects/UnicastSubject$State;.replay:()V` @kind virtual;
  #L4c5d34.  return @kind void;
  #L4c5d36.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5d38.  @monitorexit v2
  #L4c5d3a.  throw v3;
  #L4c5d3c.  v0:= v2.`rx.subjects.UnicastSubject$State.subscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5d40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5d46.  v0:= temp @kind object;
  #L4c5d48.  v0:= (`rx.Subscriber`) v0 @kind object;
  #L4c5d4c.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5d52.  goto L4c5d5c;
  #L4c5d54.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5d56.  call `throwOrReport`(v1, v0, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4c5d5c.  return @kind void;
  catch `java.lang.Throwable` @[L4c5d0c..L4c5d2a] goto L4c5d36;
  catch `java.lang.Throwable` @[L4c5d38..L4c5d3a] goto L4c5d36;
  catch `java.lang.Throwable` @[L4c5d4c..L4c5d52] goto L4c5d54;
}
procedure `void` `replay`(`rx.subjects.UnicastSubject$State` v14 @kind this) @signature `Lrx/subjects/UnicastSubject$State;.replay:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4c5d90.  @monitorenter v14
  #L4c5d92.  v0:= v14.`rx.subjects.UnicastSubject$State.emitting` @type ^`boolean` @kind boolean;
  #L4c5d96.  v1:= 1I;
  #L4c5d98.  if v0 == 0 then goto L4c5da4;
  #L4c5d9c.  v14.`rx.subjects.UnicastSubject$State.missed` @type ^`boolean` := v1 @kind boolean;
  #L4c5da0.  @monitorexit v14
  #L4c5da2.  return @kind void;
  #L4c5da4.  v14.`rx.subjects.UnicastSubject$State.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4c5da8.  @monitorexit v14
  #L4c5daa.  v0:= v14.`rx.subjects.UnicastSubject$State.queue` @type ^`java.util.Queue` @kind object;
  #L4c5dae.  v2:= v14.`rx.subjects.UnicastSubject$State.subscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5db2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5db8.  v2:= temp @kind object;
  #L4c5dba.  v2:= (`rx.Subscriber`) v2 @kind object;
  #L4c5dbe.  v3:= 0I;
  #L4c5dc0.  if v2 == 0 then goto L4c5e82;
  #L4c5dc4.  v4:= v14.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` @kind boolean;
  #L4c5dc8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4c5dce.  v5:= temp;
  #L4c5dd0.  call temp:= `checkTerminated`(v14, v4, v5, v2) @signature `Lrx/subjects/UnicastSubject$State;.checkTerminated:(ZZLrx/Subscriber;)Z` @kind virtual;
  #L4c5dd6.  v4:= temp;
  #L4c5dd8.  if v4 == 0 then goto L4c5dde;
  #L4c5ddc.  return @kind void;
  #L4c5dde.  call temp:= `get`(v14) @signature `Lrx/subjects/UnicastSubject$State;.get:()J` @kind virtual;
  #L4c5de4.  v4:= temp @kind wide;
  #L4c5de6.  v6:= 9223372036854775807L;
  #L4c5df0.  v8:= lcmp(v4, v6);
  #L4c5df4.  if v8 != 0 then goto L4c5dfc;
  #L4c5df8.  v6:= 1I;
  #L4c5dfa.  goto L4c5dfe;
  #L4c5dfc.  v6:= 0I;
  #L4c5dfe.  v7:= 0L;
  #L4c5e02.  v9:= v7 @kind wide;
  #L4c5e04.  v11:= lcmp(v4, v7);
  #L4c5e08.  if v11 == 0 then goto L4c5e6c;
  #L4c5e0c.  v11:= v14.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` @kind boolean;
  #L4c5e10.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c5e16.  v12:= temp @kind object;
  #L4c5e18.  if v12 != 0 then goto L4c5e20;
  #L4c5e1c.  v13:= 1I;
  #L4c5e1e.  goto L4c5e22;
  #L4c5e20.  v13:= 0I;
  #L4c5e22.  call temp:= `checkTerminated`(v14, v11, v13, v2) @signature `Lrx/subjects/UnicastSubject$State;.checkTerminated:(ZZLrx/Subscriber;)Z` @kind virtual;
  #L4c5e28.  v11:= temp;
  #L4c5e2a.  if v11 == 0 then goto L4c5e30;
  #L4c5e2e.  return @kind void;
  #L4c5e30.  if v13 == 0 then goto L4c5e36;
  #L4c5e34.  goto L4c5e6c;
  #L4c5e36.  call temp:= `getValue`(v12) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c5e3c.  v11:= temp @kind object;
  #L4c5e3e.  call `onNext`(v2, v11) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5e44.  v11:= 1L;
  #L4c5e48.  v4:= v4 - v11 @kind long;
  #L4c5e4a.  v9:= v9 + v11 @kind long;
  #L4c5e4c.  goto L4c5e04;
  #L4c5e4e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5e50.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4c5e56.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5e5c.  call temp:= `addValueAsLastCause`(v1, v11) @signature `Lrx/exceptions/OnErrorThrowable;.addValueAsLastCause:(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4c5e62.  v0:= temp @kind object;
  #L4c5e64.  call `onError`(v2, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c5e6a.  return @kind void;
  #L4c5e6c.  if v6 != 0 then goto L4c5e84;
  #L4c5e70.  v2:= lcmp(v9, v7);
  #L4c5e74.  if v2 == 0 then goto L4c5e84;
  #L4c5e78.  v4:= -v9 @kind long;
  #L4c5e7a.  call temp:= `addAndGet`(v14, v4) @signature `Lrx/subjects/UnicastSubject$State;.addAndGet:(J)J` @kind virtual;
  #L4c5e80.  goto L4c5e84;
  #L4c5e82.  v6:= 0I;
  #L4c5e84.  @monitorenter v14
  #L4c5e86.  v2:= v14.`rx.subjects.UnicastSubject$State.missed` @type ^`boolean` @kind boolean;
  #L4c5e8a.  if v2 != 0 then goto L4c5eaa;
  #L4c5e8e.  if v6 == 0 then goto L4c5ea2;
  #L4c5e92.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4c5e98.  v0:= temp;
  #L4c5e9a.  if v0 == 0 then goto L4c5ea2;
  #L4c5e9e.  v14.`rx.subjects.UnicastSubject$State.caughtUp` @type ^`boolean` := v1 @kind boolean;
  #L4c5ea2.  v14.`rx.subjects.UnicastSubject$State.emitting` @type ^`boolean` := v3 @kind boolean;
  #L4c5ea6.  @monitorexit v14
  #L4c5ea8.  return @kind void;
  #L4c5eaa.  v14.`rx.subjects.UnicastSubject$State.missed` @type ^`boolean` := v3 @kind boolean;
  #L4c5eae.  @monitorexit v14
  #L4c5eb0.  goto L4c5dae;
  #L4c5eb4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5eb6.  @monitorexit v14
  #L4c5eb8.  throw v0;
  #L4c5eba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5ebc.  @monitorexit v14
  #L4c5ebe.  goto L4c5ec2;
  #L4c5ec0.  throw v0;
  #L4c5ec2.  goto L4c5ec0;
  catch `java.lang.Throwable` @[L4c5d92..L4c5daa] goto L4c5eba;
  catch `java.lang.Throwable` @[L4c5e3e..L4c5e44] goto L4c5e4e;
  catch `java.lang.Throwable` @[L4c5e86..L4c5eb8] goto L4c5eb4;
  catch `java.lang.Throwable` @[L4c5ebc..L4c5ebe] goto L4c5eba;
}
procedure `void` `request`(`rx.subjects.UnicastSubject$State` v3 @kind this, `long` v4 ) @signature `Lrx/subjects/UnicastSubject$State;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c5f00.  v0:= 0L;
  #L4c5f04.  v2:= lcmp(v4, v0);
  #L4c5f08.  if v2 < 0 then goto L4c5f32;
  #L4c5f0c.  v2:= lcmp(v4, v0);
  #L4c5f10.  if v2 <= 0 then goto L4c5f22;
  #L4c5f14.  call temp:= `getAndAddRequest`(v3, v4) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c5f1a.  call `replay`(v3) @signature `Lrx/subjects/UnicastSubject$State;.replay:()V` @kind virtual;
  #L4c5f20.  goto L4c5f30;
  #L4c5f22.  v4:= v3.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` @kind boolean;
  #L4c5f26.  if v4 == 0 then goto L4c5f30;
  #L4c5f2a.  call `replay`(v3) @signature `Lrx/subjects/UnicastSubject$State;.replay:()V` @kind virtual;
  #L4c5f30.  return @kind void;
  #L4c5f32.  v4:= new `java.lang.IllegalArgumentException`;
  #L4c5f36.  v5:= "n >= 0 required" @kind object;
  #L4c5f3a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5f40.  throw v4;
}
procedure `void` `unsubscribe`(`rx.subjects.UnicastSubject$State` v2 @kind this) @signature `Lrx/subjects/UnicastSubject$State;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5f54.  call `doTerminate`(v2) @signature `Lrx/subjects/UnicastSubject$State;.doTerminate:()V` @kind virtual;
  #L4c5f5a.  v0:= 1I;
  #L4c5f5c.  v2.`rx.subjects.UnicastSubject$State.done` @type ^`boolean` := v0 @kind boolean;
  #L4c5f60.  @monitorenter v2
  #L4c5f62.  v1:= v2.`rx.subjects.UnicastSubject$State.emitting` @type ^`boolean` @kind boolean;
  #L4c5f66.  if v1 == 0 then goto L4c5f6e;
  #L4c5f6a.  @monitorexit v2
  #L4c5f6c.  return @kind void;
  #L4c5f6e.  v2.`rx.subjects.UnicastSubject$State.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4c5f72.  @monitorexit v2
  #L4c5f74.  v0:= v2.`rx.subjects.UnicastSubject$State.queue` @type ^`java.util.Queue` @kind object;
  #L4c5f78.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4c5f7e.  return @kind void;
  #L4c5f80.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5f82.  @monitorexit v2
  #L4c5f84.  throw v0;
  catch `java.lang.Throwable` @[L4c5f62..L4c5f74] goto L4c5f80;
  catch `java.lang.Throwable` @[L4c5f82..L4c5f84] goto L4c5f80;
}
