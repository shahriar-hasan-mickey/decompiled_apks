record `rx.subjects.TestSubject` @kind class @AccessFlag PUBLIC_FINAL extends `rx.subjects.Subject` @kind class {
  `rx.Scheduler$Worker` `rx.subjects.TestSubject.innerScheduler` @AccessFlag PRIVATE_FINAL;
  `rx.subjects.SubjectSubscriptionManager` `rx.subjects.TestSubject.state` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.subjects.TestSubject` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object, `rx.subjects.SubjectSubscriptionManager` v2 @kind object, `rx.schedulers.TestScheduler` v3 @kind object) @signature `Lrx/subjects/TestSubject;.<init>:(Lrx/Observable$OnSubscribe;Lrx/subjects/SubjectSubscriptionManager;Lrx/schedulers/TestScheduler;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4c5888.  call `<init>`(v0, v1) @signature `Lrx/subjects/Subject;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4c588e.  v0.`rx.subjects.TestSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` := v2 @kind object;
  #L4c5892.  call temp:= `createWorker`(v3) @signature `Lrx/schedulers/TestScheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4c5898.  v1:= temp @kind object;
  #L4c589a.  v0.`rx.subjects.TestSubject.innerScheduler` @type ^`rx.Scheduler$Worker` := v1 @kind object;
  #L4c589e.  return @kind void;
}
procedure `rx.subjects.TestSubject` `create`(`rx.schedulers.TestScheduler` v2 @kind object) @signature `Lrx/subjects/TestSubject;.create:(Lrx/schedulers/TestScheduler;)Lrx/subjects/TestSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c584c.  v0:= new `rx.subjects.SubjectSubscriptionManager`;
  #L4c5850.  call `<init>`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.<init>:()V` @kind direct;
  #L4c5856.  v1:= new `rx.subjects.TestSubject$1`;
  #L4c585a.  call `<init>`(v1, v0) @signature `Lrx/subjects/TestSubject$1;.<init>:(Lrx/subjects/SubjectSubscriptionManager;)V` @kind direct;
  #L4c5860.  v0.`rx.subjects.SubjectSubscriptionManager.onAdded` @type ^`rx.functions.Action1` := v1 @kind object;
  #L4c5864.  v1:= v0.`rx.subjects.SubjectSubscriptionManager.onAdded` @type ^`rx.functions.Action1` @kind object;
  #L4c5868.  v0.`rx.subjects.SubjectSubscriptionManager.onTerminated` @type ^`rx.functions.Action1` := v1 @kind object;
  #L4c586c.  v1:= new `rx.subjects.TestSubject`;
  #L4c5870.  call `<init>`(v1, v0, v0, v2) @signature `Lrx/subjects/TestSubject;.<init>:(Lrx/Observable$OnSubscribe;Lrx/subjects/SubjectSubscriptionManager;Lrx/schedulers/TestScheduler;)V` @kind direct;
  #L4c5876.  return v1 @kind object;
}
procedure `boolean` `hasObservers`(`rx.subjects.TestSubject` v1 @kind this) @signature `Lrx/subjects/TestSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5820.  v0:= v1.`rx.subjects.TestSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c5824.  call temp:= `observers`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.observers:()[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c582a.  v0:= temp @kind object;
  #L4c582c.  v0:= length @variable v0;
  #L4c582e.  if v0 <= 0 then goto L4c5836;
  #L4c5832.  v0:= 1I;
  #L4c5834.  goto L4c5838;
  #L4c5836.  v0:= 0I;
  #L4c5838.  return v0;
}
procedure `void` `internalOnCompleted`(`rx.subjects.TestSubject` v4 @kind this) @signature `Lrx/subjects/TestSubject;.internalOnCompleted:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c58b0.  v0:= v4.`rx.subjects.TestSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c58b4.  v0:= v0.`rx.subjects.SubjectSubscriptionManager.active` @type ^`boolean` @kind boolean;
  #L4c58b8.  if v0 == 0 then goto L4c58e8;
  #L4c58bc.  v0:= v4.`rx.subjects.TestSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c58c0.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4c58c6.  v1:= temp @kind object;
  #L4c58c8.  call temp:= `terminate`(v0, v1) @signature `Lrx/subjects/SubjectSubscriptionManager;.terminate:(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c58ce.  v0:= temp @kind object;
  #L4c58d0.  v1:= length @variable v0;
  #L4c58d2.  v2:= 0I;
  #L4c58d4.  if v2 >= v1 then goto L4c58e8;
  #L4c58d8.  v3:= v0[v2] @kind object;
  #L4c58dc.  call `onCompleted`(v3) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.onCompleted:()V` @kind virtual;
  #L4c58e2.  v2:= v2 + 1;
  #L4c58e6.  goto L4c58d4;
  #L4c58e8.  return @kind void;
}
procedure `void` `internalOnError`(`rx.subjects.TestSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lrx/subjects/TestSubject;.internalOnError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c58fc.  v0:= v4.`rx.subjects.TestSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c5900.  v0:= v0.`rx.subjects.SubjectSubscriptionManager.active` @type ^`boolean` @kind boolean;
  #L4c5904.  if v0 == 0 then goto L4c5934;
  #L4c5908.  v0:= v4.`rx.subjects.TestSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c590c.  call temp:= `error`(v5) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4c5912.  v1:= temp @kind object;
  #L4c5914.  call temp:= `terminate`(v0, v1) @signature `Lrx/subjects/SubjectSubscriptionManager;.terminate:(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c591a.  v0:= temp @kind object;
  #L4c591c.  v1:= length @variable v0;
  #L4c591e.  v2:= 0I;
  #L4c5920.  if v2 >= v1 then goto L4c5934;
  #L4c5924.  v3:= v0[v2] @kind object;
  #L4c5928.  call `onError`(v3, v5) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c592e.  v2:= v2 + 1;
  #L4c5932.  goto L4c5920;
  #L4c5934.  return @kind void;
}
procedure `void` `internalOnNext`(`rx.subjects.TestSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/subjects/TestSubject;.internalOnNext:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c5948.  v0:= v4.`rx.subjects.TestSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c594c.  call temp:= `observers`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.observers:()[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c5952.  v0:= temp @kind object;
  #L4c5954.  v1:= length @variable v0;
  #L4c5956.  v2:= 0I;
  #L4c5958.  if v2 >= v1 then goto L4c596c;
  #L4c595c.  v3:= v0[v2] @kind object;
  #L4c5960.  call `onNext`(v3, v5) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c5966.  v2:= v2 + 1;
  #L4c596a.  goto L4c5958;
  #L4c596c.  return @kind void;
}
procedure `void` `onCompleted`(`rx.subjects.TestSubject` v2 @kind this) @signature `Lrx/subjects/TestSubject;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5980.  v0:= 0L;
  #L4c5984.  call `onCompleted`(v2, v0) @signature `Lrx/subjects/TestSubject;.onCompleted:(J)V` @kind virtual;
  #L4c598a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.subjects.TestSubject` v3 @kind this, `long` v4 ) @signature `Lrx/subjects/TestSubject;.onCompleted:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c599c.  v0:= v3.`rx.subjects.TestSubject.innerScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4c59a0.  v1:= new `rx.subjects.TestSubject$2`;
  #L4c59a4.  call `<init>`(v1, v3) @signature `Lrx/subjects/TestSubject$2;.<init>:(Lrx/subjects/TestSubject;)V` @kind direct;
  #L4c59aa.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c59ae.  call temp:= `schedule`(v0, v1, v4, v2) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4c59b4.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.TestSubject` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/subjects/TestSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c59c8.  v0:= 0L;
  #L4c59cc.  call `onError`(v2, v3, v0) @signature `Lrx/subjects/TestSubject;.onError:(Ljava/lang/Throwable;J)V` @kind virtual;
  #L4c59d2.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.TestSubject` v2 @kind this, `java.lang.Throwable` v3 @kind object, `long` v4 ) @signature `Lrx/subjects/TestSubject;.onError:(Ljava/lang/Throwable;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c59e4.  v0:= v2.`rx.subjects.TestSubject.innerScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4c59e8.  v1:= new `rx.subjects.TestSubject$3`;
  #L4c59ec.  call `<init>`(v1, v2, v3) @signature `Lrx/subjects/TestSubject$3;.<init>:(Lrx/subjects/TestSubject;Ljava/lang/Throwable;)V` @kind direct;
  #L4c59f2.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c59f6.  call temp:= `schedule`(v0, v1, v4, v3) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4c59fc.  return @kind void;
}
procedure `void` `onNext`(`rx.subjects.TestSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/subjects/TestSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5a10.  v0:= 0L;
  #L4c5a14.  call `onNext`(v2, v3, v0) @signature `Lrx/subjects/TestSubject;.onNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L4c5a1a.  return @kind void;
}
procedure `void` `onNext`(`rx.subjects.TestSubject` v2 @kind this, `java.lang.Object` v3 @kind object, `long` v4 ) @signature `Lrx/subjects/TestSubject;.onNext:(Ljava/lang/Object;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5a2c.  v0:= v2.`rx.subjects.TestSubject.innerScheduler` @type ^`rx.Scheduler$Worker` @kind object;
  #L4c5a30.  v1:= new `rx.subjects.TestSubject$4`;
  #L4c5a34.  call `<init>`(v1, v2, v3) @signature `Lrx/subjects/TestSubject$4;.<init>:(Lrx/subjects/TestSubject;Ljava/lang/Object;)V` @kind direct;
  #L4c5a3a.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c5a3e.  call temp:= `schedule`(v0, v1, v4, v3) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4c5a44.  return @kind void;
}
