record `rx.subjects.Subject` @kind class @AccessFlag PUBLIC_ABSTRACT extends `rx.Observable` @kind class, `rx.Observer` @kind interface {
}
procedure `void` `<init>`(`rx.subjects.Subject` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object) @signature `Lrx/subjects/Subject;.<init>:(Lrx/Observable$OnSubscribe;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4c56f4.  call `<init>`(v0, v1) @signature `Lrx/Observable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4c56fa.  return @kind void;
}
procedure `boolean` `hasObservers`() @signature `Lrx/subjects/Subject;.hasObservers:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `rx.subjects.SerializedSubject` `toSerialized`(`rx.subjects.Subject` v2 @kind this) @signature `Lrx/subjects/Subject;.toSerialized:()Lrx/subjects/SerializedSubject;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4c56c0.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4c56c6.  v0:= temp @kind object;
  #L4c56c8.  v1:= constclass @type ^`rx.subjects.SerializedSubject` @kind object;
  #L4c56cc.  if v0 != v1 then goto L4c56d8;
  #L4c56d0.  v0:= v2 @kind object;
  #L4c56d2.  v0:= (`rx.subjects.SerializedSubject`) v0 @kind object;
  #L4c56d6.  return v0 @kind object;
  #L4c56d8.  v0:= new `rx.subjects.SerializedSubject`;
  #L4c56dc.  call `<init>`(v0, v2) @signature `Lrx/subjects/SerializedSubject;.<init>:(Lrx/subjects/Subject;)V` @kind direct;
  #L4c56e2.  return v0 @kind object;
}
