record `rx.subjects.PublishSubject` @kind class @AccessFlag PUBLIC_FINAL extends `rx.subjects.Subject` @kind class {
  `rx.subjects.PublishSubject$PublishSubjectState` `rx.subjects.PublishSubject.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.subjects.PublishSubject` v0 @kind this, `rx.subjects.PublishSubject$PublishSubjectState` v1 @kind object) @signature `Lrx/subjects/PublishSubject;.<init>:(Lrx/subjects/PublishSubject$PublishSubjectState;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4c3c64.  call `<init>`(v0, v1) @signature `Lrx/subjects/Subject;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4c3c6a.  v0.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` := v1 @kind object;
  #L4c3c6e.  return @kind void;
}
procedure `rx.subjects.PublishSubject` `create`() @signature `Lrx/subjects/PublishSubject;.create:()Lrx/subjects/PublishSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c3c3c.  v0:= new `rx.subjects.PublishSubject`;
  #L4c3c40.  v1:= new `rx.subjects.PublishSubject$PublishSubjectState`;
  #L4c3c44.  call `<init>`(v1) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.<init>:()V` @kind direct;
  #L4c3c4a.  call `<init>`(v0, v1) @signature `Lrx/subjects/PublishSubject;.<init>:(Lrx/subjects/PublishSubject$PublishSubjectState;)V` @kind direct;
  #L4c3c50.  return v0 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`rx.subjects.PublishSubject` v2 @kind this) @signature `Lrx/subjects/PublishSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3c08.  v0:= v2.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3c0c.  call temp:= `get`(v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3c12.  v0:= temp @kind object;
  #L4c3c14.  v1:= `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3c18.  if v0 != v1 then goto L4c3c26;
  #L4c3c1c.  v0:= v2.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3c20.  v0:= v0.`rx.subjects.PublishSubject$PublishSubjectState.error` @type ^`java.lang.Throwable` @kind object;
  #L4c3c24.  return v0 @kind object;
  #L4c3c26.  v0:= 0I;
  #L4c3c28.  return v0 @kind object;
}
procedure `boolean` `hasCompleted`(`rx.subjects.PublishSubject` v2 @kind this) @signature `Lrx/subjects/PublishSubject;.hasCompleted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3b68.  v0:= v2.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3b6c.  call temp:= `get`(v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3b72.  v0:= temp @kind object;
  #L4c3b74.  v1:= `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3b78.  if v0 != v1 then goto L4c3b8c;
  #L4c3b7c.  v0:= v2.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3b80.  v0:= v0.`rx.subjects.PublishSubject$PublishSubjectState.error` @type ^`java.lang.Throwable` @kind object;
  #L4c3b84.  if v0 != 0 then goto L4c3b8c;
  #L4c3b88.  v0:= 1I;
  #L4c3b8a.  goto L4c3b8e;
  #L4c3b8c.  v0:= 0I;
  #L4c3b8e.  return v0;
}
procedure `boolean` `hasObservers`(`rx.subjects.PublishSubject` v1 @kind this) @signature `Lrx/subjects/PublishSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3ba0.  v0:= v1.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3ba4.  call temp:= `get`(v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3baa.  v0:= temp @kind object;
  #L4c3bac.  v0:= (`rx.subjects.PublishSubject$PublishSubjectProducer`[]) v0 @kind object;
  #L4c3bb0.  v0:= length @variable v0;
  #L4c3bb2.  if v0 == 0 then goto L4c3bba;
  #L4c3bb6.  v0:= 1I;
  #L4c3bb8.  goto L4c3bbc;
  #L4c3bba.  v0:= 0I;
  #L4c3bbc.  return v0;
}
procedure `boolean` `hasThrowable`(`rx.subjects.PublishSubject` v2 @kind this) @signature `Lrx/subjects/PublishSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3bd0.  v0:= v2.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3bd4.  call temp:= `get`(v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3bda.  v0:= temp @kind object;
  #L4c3bdc.  v1:= `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3be0.  if v0 != v1 then goto L4c3bf4;
  #L4c3be4.  v0:= v2.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3be8.  v0:= v0.`rx.subjects.PublishSubject$PublishSubjectState.error` @type ^`java.lang.Throwable` @kind object;
  #L4c3bec.  if v0 == 0 then goto L4c3bf4;
  #L4c3bf0.  v0:= 1I;
  #L4c3bf2.  goto L4c3bf6;
  #L4c3bf4.  v0:= 0I;
  #L4c3bf6.  return v0;
}
procedure `void` `onCompleted`(`rx.subjects.PublishSubject` v1 @kind this) @signature `Lrx/subjects/PublishSubject;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3c80.  v0:= v1.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3c84.  call `onCompleted`(v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.onCompleted:()V` @kind virtual;
  #L4c3c8a.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.PublishSubject` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3c9c.  v0:= v1.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3ca0.  call `onError`(v0, v2) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c3ca6.  return @kind void;
}
procedure `void` `onNext`(`rx.subjects.PublishSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3cb8.  v0:= v1.`rx.subjects.PublishSubject.state` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c3cbc.  call `onNext`(v0, v2) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c3cc2.  return @kind void;
}
