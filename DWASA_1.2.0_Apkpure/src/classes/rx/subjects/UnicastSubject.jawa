record `rx.subjects.UnicastSubject` @kind class @AccessFlag PUBLIC_FINAL extends `rx.subjects.Subject` @kind class {
  `rx.subjects.UnicastSubject$State` `rx.subjects.UnicastSubject.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.subjects.UnicastSubject` v0 @kind this, `rx.subjects.UnicastSubject$State` v1 @kind object) @signature `Lrx/subjects/UnicastSubject;.<init>:(Lrx/subjects/UnicastSubject$State;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4c6048.  call `<init>`(v0, v1) @signature `Lrx/subjects/Subject;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4c604e.  v0.`rx.subjects.UnicastSubject.state` @type ^`rx.subjects.UnicastSubject$State` := v1 @kind object;
  #L4c6052.  return @kind void;
}
procedure `rx.subjects.UnicastSubject` `create`() @signature `Lrx/subjects/UnicastSubject;.create:()Lrx/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c5fd8.  v0:= 16I;
  #L4c5fdc.  call temp:= `create`(v0) @signature `Lrx/subjects/UnicastSubject;.create:(I)Lrx/subjects/UnicastSubject;` @kind static;
  #L4c5fe2.  v0:= temp @kind object;
  #L4c5fe4.  return v0 @kind object;
}
procedure `rx.subjects.UnicastSubject` `create`(`int` v2 ) @signature `Lrx/subjects/UnicastSubject;.create:(I)Lrx/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c5ff8.  v0:= new `rx.subjects.UnicastSubject$State`;
  #L4c5ffc.  v1:= 0I;
  #L4c5ffe.  call `<init>`(v0, v2, v1) @signature `Lrx/subjects/UnicastSubject$State;.<init>:(ILrx/functions/Action0;)V` @kind direct;
  #L4c6004.  v2:= new `rx.subjects.UnicastSubject`;
  #L4c6008.  call `<init>`(v2, v0) @signature `Lrx/subjects/UnicastSubject;.<init>:(Lrx/subjects/UnicastSubject$State;)V` @kind direct;
  #L4c600e.  return v2 @kind object;
}
procedure `rx.subjects.UnicastSubject` `create`(`int` v1 , `rx.functions.Action0` v2 @kind object) @signature `Lrx/subjects/UnicastSubject;.create:(ILrx/functions/Action0;)Lrx/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c6020.  v0:= new `rx.subjects.UnicastSubject$State`;
  #L4c6024.  call `<init>`(v0, v1, v2) @signature `Lrx/subjects/UnicastSubject$State;.<init>:(ILrx/functions/Action0;)V` @kind direct;
  #L4c602a.  v1:= new `rx.subjects.UnicastSubject`;
  #L4c602e.  call `<init>`(v1, v0) @signature `Lrx/subjects/UnicastSubject;.<init>:(Lrx/subjects/UnicastSubject$State;)V` @kind direct;
  #L4c6034.  return v1 @kind object;
}
procedure `boolean` `hasObservers`(`rx.subjects.UnicastSubject` v1 @kind this) @signature `Lrx/subjects/UnicastSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5fac.  v0:= v1.`rx.subjects.UnicastSubject.state` @type ^`rx.subjects.UnicastSubject$State` @kind object;
  #L4c5fb0.  v0:= v0.`rx.subjects.UnicastSubject$State.subscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5fb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5fba.  v0:= temp @kind object;
  #L4c5fbc.  if v0 == 0 then goto L4c5fc4;
  #L4c5fc0.  v0:= 1I;
  #L4c5fc2.  goto L4c5fc6;
  #L4c5fc4.  v0:= 0I;
  #L4c5fc6.  return v0;
}
procedure `void` `onCompleted`(`rx.subjects.UnicastSubject` v1 @kind this) @signature `Lrx/subjects/UnicastSubject;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6064.  v0:= v1.`rx.subjects.UnicastSubject.state` @type ^`rx.subjects.UnicastSubject$State` @kind object;
  #L4c6068.  call `onCompleted`(v0) @signature `Lrx/subjects/UnicastSubject$State;.onCompleted:()V` @kind virtual;
  #L4c606e.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.UnicastSubject` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6080.  v0:= v1.`rx.subjects.UnicastSubject.state` @type ^`rx.subjects.UnicastSubject$State` @kind object;
  #L4c6084.  call `onError`(v0, v2) @signature `Lrx/subjects/UnicastSubject$State;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c608a.  return @kind void;
}
procedure `void` `onNext`(`rx.subjects.UnicastSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c609c.  v0:= v1.`rx.subjects.UnicastSubject.state` @type ^`rx.subjects.UnicastSubject$State` @kind object;
  #L4c60a0.  call `onNext`(v0, v2) @signature `Lrx/subjects/UnicastSubject$State;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c60a6.  return @kind void;
}
