record `rx.subjects.SerializedSubject$1` @kind class @AccessFlag  extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.subjects.Subject` `rx.subjects.SerializedSubject$1.val$actual` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.subjects.SerializedSubject$1` v0 @kind this, `rx.subjects.Subject` v1 @kind object) @signature `Lrx/subjects/SerializedSubject$1;.<init>:(Lrx/subjects/Subject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c4f78.  v0.`rx.subjects.SerializedSubject$1.val$actual` @type ^`rx.subjects.Subject` := v1 @kind object;
  #L4c4f7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c4f82.  return @kind void;
}
procedure `void` `call`(`rx.subjects.SerializedSubject$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/subjects/SerializedSubject$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c4f94.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4c4f98.  call `call`(v0, v1) @signature `Lrx/subjects/SerializedSubject$1;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4c4f9e.  return @kind void;
}
procedure `void` `call`(`rx.subjects.SerializedSubject$1` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/subjects/SerializedSubject$1;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4fb0.  v0:= v1.`rx.subjects.SerializedSubject$1.val$actual` @type ^`rx.subjects.Subject` @kind object;
  #L4c4fb4.  call temp:= `unsafeSubscribe`(v0, v2) @signature `Lrx/subjects/Subject;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4c4fba.  return @kind void;
}
