record `rx.subjects.ReplaySubject$ReplayBuffer` @kind interface @AccessFlag ABSTRACT_INTERFACE {
}
procedure `void` `complete`() @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.complete:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `drain`(`rx.subjects.ReplaySubject$ReplayProducer` v0 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.drain:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Throwable` `error`() @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `error`(`java.lang.Throwable` v0 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isComplete`() @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.isComplete:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`() @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.isEmpty:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `last`() @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.last:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `next`(`java.lang.Object` v0 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `size`() @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.size:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object`[] `toArray`(`java.lang.Object`[] v0 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
