record `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` @kind class @AccessFlag FINAL extends `rx.subjects.ReplaySubject$ReplayBuffer` @kind interface {
  `boolean` `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.error` @AccessFlag ;
  `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @AccessFlag VOLATILE;
  `int` `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.limit` @AccessFlag FINAL;
  `int` `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.size` @AccessFlag ;
  `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.tail` @AccessFlag ;
}
procedure `void` `<init>`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v1 @kind this, `int` v2 ) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c4340.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c4346.  v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.limit` @type ^`int` := v2;
  #L4c434a.  v2:= new `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`;
  #L4c434e.  v0:= 0I;
  #L4c4350.  call `<init>`(v2, v0) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c4356.  v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.tail` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` := v2 @kind object;
  #L4c435a.  v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` := v2 @kind object;
  #L4c435e.  return @kind void;
}
procedure `void` `complete`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4370.  v0:= 1I;
  #L4c4372.  v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.done` @type ^`boolean` := v0 @kind boolean;
  #L4c4376.  return @kind void;
}
procedure `void` `drain`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v17 @kind this, `rx.subjects.ReplaySubject$ReplayProducer` v18 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.drain:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4c4388.  v0:= v17 @kind object;
  #L4c438c.  v1:= v18 @kind object;
  #L4c4390.  call temp:= `getAndIncrement`(v18) @signature `Lrx/subjects/ReplaySubject$ReplayProducer;.getAndIncrement:()I` @kind virtual;
  #L4c4396.  v2:= temp;
  #L4c4398.  if v2 == 0 then goto L4c439e;
  #L4c439c.  return @kind void;
  #L4c439e.  v2:= v1.`rx.subjects.ReplaySubject$ReplayProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L4c43a2.  v3:= 1I;
  #L4c43a4.  v4:= 1I;
  #L4c43a6.  v5:= v1.`rx.subjects.ReplaySubject$ReplayProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c43aa.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c43b0.  v5:= temp @kind wide;
  #L4c43b2.  v7:= v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` @kind object;
  #L4c43b6.  v7:= (`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`) v7 @kind object;
  #L4c43ba.  v8:= 0L;
  #L4c43be.  if v7 != 0 then goto L4c43c6;
  #L4c43c2.  v7:= v0.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` @kind object;
  #L4c43c6.  v10:= v8 @kind wide;
  #L4c43c8.  v12:= 0I;
  #L4c43ca.  v13:= 0I;
  #L4c43cc.  v14:= lcmp(v10, v5);
  #L4c43d0.  if v14 == 0 then goto L4c4442;
  #L4c43d4.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4c43da.  v14:= temp;
  #L4c43dc.  if v14 == 0 then goto L4c43e6;
  #L4c43e0.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v13 @kind object;
  #L4c43e4.  return @kind void;
  #L4c43e6.  v14:= v0.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.done` @type ^`boolean` @kind boolean;
  #L4c43ea.  call temp:= `get`(v7) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c43f0.  v15:= temp @kind object;
  #L4c43f2.  v15:= (`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`) v15 @kind object;
  #L4c43f6.  if v15 != 0 then goto L4c4400;
  #L4c43fa.  v16:= 1I;
  #L4c43fe.  goto L4c4404;
  #L4c4400.  v16:= 0I;
  #L4c4404.  if v14 == 0 then goto L4c4428;
  #L4c4408.  if v16 == 0 then goto L4c4428;
  #L4c440c.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v13 @kind object;
  #L4c4410.  v1:= v0.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L4c4414.  if v1 == 0 then goto L4c4420;
  #L4c4418.  call `onError`(v2, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c441e.  goto L4c4426;
  #L4c4420.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4c4426.  return @kind void;
  #L4c4428.  if v16 == 0 then goto L4c442e;
  #L4c442c.  goto L4c4442;
  #L4c442e.  v7:= v15.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node.value` @type ^`java.lang.Object` @kind object;
  #L4c4432.  call `onNext`(v2, v7) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c4438.  v12:= 1L;
  #L4c443c.  v10:= v10 + v12 @kind long;
  #L4c443e.  v7:= v15 @kind object;
  #L4c4440.  goto L4c43c8;
  #L4c4442.  v14:= lcmp(v10, v5);
  #L4c4446.  if v14 != 0 then goto L4c4492;
  #L4c444a.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4c4450.  v14:= temp;
  #L4c4452.  if v14 == 0 then goto L4c445c;
  #L4c4456.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v13 @kind object;
  #L4c445a.  return @kind void;
  #L4c445c.  v14:= v0.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.done` @type ^`boolean` @kind boolean;
  #L4c4460.  call temp:= `get`(v7) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4466.  v15:= temp @kind object;
  #L4c4468.  if v15 != 0 then goto L4c446e;
  #L4c446c.  v12:= 1I;
  #L4c446e.  if v14 == 0 then goto L4c4492;
  #L4c4472.  if v12 == 0 then goto L4c4492;
  #L4c4476.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v13 @kind object;
  #L4c447a.  v1:= v0.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L4c447e.  if v1 == 0 then goto L4c448a;
  #L4c4482.  call `onError`(v2, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c4488.  goto L4c4490;
  #L4c448a.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4c4490.  return @kind void;
  #L4c4492.  v12:= lcmp(v10, v8);
  #L4c4496.  if v12 == 0 then goto L4c44b6;
  #L4c449a.  v8:= 9223372036854775807L;
  #L4c44a4.  v12:= lcmp(v5, v8);
  #L4c44a8.  if v12 == 0 then goto L4c44b6;
  #L4c44ac.  v5:= v1.`rx.subjects.ReplaySubject$ReplayProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c44b0.  call temp:= `produced`(v5, v10) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c44b6.  v1.`rx.subjects.ReplaySubject$ReplayProducer.node` @type ^`java.lang.Object` := v7 @kind object;
  #L4c44ba.  v4:= -v4 @kind int;
  #L4c44bc.  call temp:= `addAndGet`(v1, v4) @signature `Lrx/subjects/ReplaySubject$ReplayProducer;.addAndGet:(I)I` @kind virtual;
  #L4c44c2.  v4:= temp;
  #L4c44c4.  if v4 != 0 then goto L4c43a6;
  #L4c44c8.  return @kind void;
}
procedure `java.lang.Throwable` `error`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4328.  v0:= v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L4c432c.  return v0 @kind object;
}
procedure `void` `error`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4c44dc.  v0.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4c44e0.  v1:= 1I;
  #L4c44e2.  v0.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.done` @type ^`boolean` := v1 @kind boolean;
  #L4c44e6.  return @kind void;
}
procedure `boolean` `isComplete`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.isComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4224.  v0:= v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.done` @type ^`boolean` @kind boolean;
  #L4c4228.  return v0;
}
procedure `boolean` `isEmpty`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v1 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c423c.  v0:= v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` @kind object;
  #L4c4240.  call temp:= `get`(v0) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4246.  v0:= temp @kind object;
  #L4c4248.  if v0 != 0 then goto L4c4250;
  #L4c424c.  v0:= 1I;
  #L4c424e.  goto L4c4252;
  #L4c4250.  v0:= 0I;
  #L4c4252.  return v0;
}
procedure `java.lang.Object` `last`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v2 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.last:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c42a8.  v0:= v2.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` @kind object;
  #L4c42ac.  call temp:= `get`(v0) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c42b2.  v1:= temp @kind object;
  #L4c42b4.  v1:= (`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`) v1 @kind object;
  #L4c42b8.  if v1 == 0 then goto L4c42c0;
  #L4c42bc.  v0:= v1 @kind object;
  #L4c42be.  goto L4c42ac;
  #L4c42c0.  v0:= v0.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node.value` @type ^`java.lang.Object` @kind object;
  #L4c42c4.  return v0 @kind object;
}
procedure `void` `next`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c44f8.  v0:= new `rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`;
  #L4c44fc.  call `<init>`(v0, v2) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c4502.  v2:= v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.tail` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` @kind object;
  #L4c4506.  call `set`(v2, v0) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c450c.  v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.tail` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` := v0 @kind object;
  #L4c4510.  v2:= v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.size` @type ^`int`;
  #L4c4514.  v0:= v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.limit` @type ^`int`;
  #L4c4518.  if v2 != v0 then goto L4c4532;
  #L4c451c.  v2:= v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` @kind object;
  #L4c4520.  call temp:= `get`(v2) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4526.  v2:= temp @kind object;
  #L4c4528.  v2:= (`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`) v2 @kind object;
  #L4c452c.  v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` := v2 @kind object;
  #L4c4530.  goto L4c453a;
  #L4c4532.  v2:= v2 + 1;
  #L4c4536.  v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.size` @type ^`int` := v2;
  #L4c453a.  return @kind void;
}
procedure `int` `size`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v3 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c4264.  v0:= v3.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` @kind object;
  #L4c4268.  call temp:= `get`(v0) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c426e.  v0:= temp @kind object;
  #L4c4270.  v0:= (`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`) v0 @kind object;
  #L4c4274.  v1:= 0I;
  #L4c4276.  if v0 == 0 then goto L4c4296;
  #L4c427a.  v2:= 2147483647I;
  #L4c4280.  if v1 == v2 then goto L4c4296;
  #L4c4284.  call temp:= `get`(v0) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c428a.  v0:= temp @kind object;
  #L4c428c.  v0:= (`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`) v0 @kind object;
  #L4c4290.  v1:= v1 + 1;
  #L4c4294.  goto L4c4276;
  #L4c4296.  return v1;
}
procedure `java.lang.Object`[] `toArray`(`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c42d8.  v0:= new `java.util.ArrayList`;
  #L4c42dc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4c42e2.  v1:= v3.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer.head` @type ^`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node` @kind object;
  #L4c42e6.  call temp:= `get`(v1) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c42ec.  v1:= temp @kind object;
  #L4c42ee.  v1:= (`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`) v1 @kind object;
  #L4c42f2.  if v1 == 0 then goto L4c430e;
  #L4c42f6.  v2:= v1.`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node.value` @type ^`java.lang.Object` @kind object;
  #L4c42fa.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c4300.  call temp:= `get`(v1) @signature `Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4306.  v1:= temp @kind object;
  #L4c4308.  v1:= (`rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node`) v1 @kind object;
  #L4c430c.  goto L4c42f2;
  #L4c430e.  call temp:= `toArray`(v0, v4) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4c4314.  v4:= temp @kind object;
  #L4c4316.  return v4 @kind object;
}
