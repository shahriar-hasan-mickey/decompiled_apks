record `rx.subjects.AsyncSubject$1` @kind class @AccessFlag FINAL extends `rx.functions.Action1` @kind interface {
  `rx.subjects.SubjectSubscriptionManager` `rx.subjects.AsyncSubject$1.val$state` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.subjects.AsyncSubject$1` v0 @kind this, `rx.subjects.SubjectSubscriptionManager` v1 @kind object) @signature `Lrx/subjects/AsyncSubject$1;.<init>:(Lrx/subjects/SubjectSubscriptionManager;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c2fc8.  v0.`rx.subjects.AsyncSubject$1.val$state` @type ^`rx.subjects.SubjectSubscriptionManager` := v1 @kind object;
  #L4c2fcc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c2fd2.  return @kind void;
}
procedure `void` `call`(`rx.subjects.AsyncSubject$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/subjects/AsyncSubject$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c2fe4.  v1:= (`rx.subjects.SubjectSubscriptionManager$SubjectObserver`) v1 @kind object;
  #L4c2fe8.  call `call`(v0, v1) @signature `Lrx/subjects/AsyncSubject$1;.call:(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @kind virtual;
  #L4c2fee.  return @kind void;
}
procedure `void` `call`(`rx.subjects.AsyncSubject$1` v3 @kind this, `rx.subjects.SubjectSubscriptionManager$SubjectObserver` v4 @kind object) @signature `Lrx/subjects/AsyncSubject$1;.call:(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c3000.  v0:= v3.`rx.subjects.AsyncSubject$1.val$state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3004.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c300a.  v0:= temp @kind object;
  #L4c300c.  if v0 == 0 then goto L4c305c;
  #L4c3010.  call temp:= `isCompleted`(v0) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L4c3016.  v1:= temp;
  #L4c3018.  if v1 == 0 then goto L4c301e;
  #L4c301c.  goto L4c305c;
  #L4c301e.  call temp:= `isError`(v0) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c3024.  v1:= temp;
  #L4c3026.  if v1 == 0 then goto L4c303a;
  #L4c302a.  call temp:= `getError`(v0) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4c3030.  v0:= temp @kind object;
  #L4c3032.  call `onError`(v4, v0) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c3038.  goto L4c3062;
  #L4c303a.  v1:= v4.`rx.subjects.SubjectSubscriptionManager$SubjectObserver.actual` @type ^`rx.Subscriber` @kind object;
  #L4c303e.  v2:= new `rx.internal.producers.SingleProducer`;
  #L4c3042.  v4:= v4.`rx.subjects.SubjectSubscriptionManager$SubjectObserver.actual` @type ^`rx.Subscriber` @kind object;
  #L4c3046.  call temp:= `getValue`(v0) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c304c.  v0:= temp @kind object;
  #L4c304e.  call `<init>`(v2, v4, v0) @signature `Lrx/internal/producers/SingleProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L4c3054.  call `setProducer`(v1, v2) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4c305a.  goto L4c3062;
  #L4c305c.  call `onCompleted`(v4) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.onCompleted:()V` @kind virtual;
  #L4c3062.  return @kind void;
}
