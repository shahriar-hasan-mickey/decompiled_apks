record `rx.subjects.TestSubject$3` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.subjects.TestSubject` `rx.subjects.TestSubject$3.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Throwable` `rx.subjects.TestSubject$3.val$e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.subjects.TestSubject$3` v0 @kind this, `rx.subjects.TestSubject` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lrx/subjects/TestSubject$3;.<init>:(Lrx/subjects/TestSubject;Ljava/lang/Throwable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c57a0.  v0.`rx.subjects.TestSubject$3.this$0` @type ^`rx.subjects.TestSubject` := v1 @kind object;
  #L4c57a4.  v0.`rx.subjects.TestSubject$3.val$e` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4c57a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c57ae.  return @kind void;
}
procedure `void` `call`(`rx.subjects.TestSubject$3` v2 @kind this) @signature `Lrx/subjects/TestSubject$3;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c57c0.  v0:= v2.`rx.subjects.TestSubject$3.this$0` @type ^`rx.subjects.TestSubject` @kind object;
  #L4c57c4.  v1:= v2.`rx.subjects.TestSubject$3.val$e` @type ^`java.lang.Throwable` @kind object;
  #L4c57c8.  call `internalOnError`(v0, v1) @signature `Lrx/subjects/TestSubject;.internalOnError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c57ce.  return @kind void;
}
