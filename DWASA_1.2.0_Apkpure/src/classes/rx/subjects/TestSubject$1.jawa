record `rx.subjects.TestSubject$1` @kind class @AccessFlag FINAL extends `rx.functions.Action1` @kind interface {
  `rx.subjects.SubjectSubscriptionManager` `rx.subjects.TestSubject$1.val$state` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.subjects.TestSubject$1` v0 @kind this, `rx.subjects.SubjectSubscriptionManager` v1 @kind object) @signature `Lrx/subjects/TestSubject$1;.<init>:(Lrx/subjects/SubjectSubscriptionManager;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c570c.  v0.`rx.subjects.TestSubject$1.val$state` @type ^`rx.subjects.SubjectSubscriptionManager` := v1 @kind object;
  #L4c5710.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c5716.  return @kind void;
}
procedure `void` `call`(`rx.subjects.TestSubject$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/subjects/TestSubject$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c5728.  v1:= (`rx.subjects.SubjectSubscriptionManager$SubjectObserver`) v1 @kind object;
  #L4c572c.  call `call`(v0, v1) @signature `Lrx/subjects/TestSubject$1;.call:(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @kind virtual;
  #L4c5732.  return @kind void;
}
procedure `void` `call`(`rx.subjects.TestSubject$1` v1 @kind this, `rx.subjects.SubjectSubscriptionManager$SubjectObserver` v2 @kind object) @signature `Lrx/subjects/TestSubject$1;.call:(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5744.  v0:= v1.`rx.subjects.TestSubject$1.val$state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c5748.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c574e.  v0:= temp @kind object;
  #L4c5750.  call `emitFirst`(v2, v0) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.emitFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5756.  return @kind void;
}
