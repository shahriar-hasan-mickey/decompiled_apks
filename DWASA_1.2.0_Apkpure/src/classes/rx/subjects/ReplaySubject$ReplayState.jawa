record `rx.subjects.ReplaySubject$ReplayState` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `rx.Observable$OnSubscribe` @kind interface, `rx.Observer` @kind interface {
  `rx.subjects.ReplaySubject$ReplayBuffer` `rx.subjects.ReplaySubject$ReplayState.buffer` @AccessFlag FINAL;
}
global `rx.subjects.ReplaySubject$ReplayProducer`[] `@@rx.subjects.ReplaySubject$ReplayState.EMPTY` @AccessFlag STATIC_FINAL;
global `rx.subjects.ReplaySubject$ReplayProducer`[] `@@rx.subjects.ReplaySubject$ReplayState.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@rx.subjects.ReplaySubject$ReplayState.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/subjects/ReplaySubject$ReplayState;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c45c0.  v0:= 0I;
  #L4c45c2.  v1:= new `rx.subjects.ReplaySubject$ReplayProducer`[v0];
  #L4c45c6.  `@@rx.subjects.ReplaySubject$ReplayState.EMPTY` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] := v1 @kind object;
  #L4c45ca.  v0:= new `rx.subjects.ReplaySubject$ReplayProducer`[v0];
  #L4c45ce.  `@@rx.subjects.ReplaySubject$ReplayState.TERMINATED` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] := v0 @kind object;
  #L4c45d2.  return @kind void;
}
procedure `void` `<init>`(`rx.subjects.ReplaySubject$ReplayState` v0 @kind this, `rx.subjects.ReplaySubject$ReplayBuffer` v1 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayState;.<init>:(Lrx/subjects/ReplaySubject$ReplayBuffer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c45e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c45ea.  v0.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` := v1 @kind object;
  #L4c45ee.  v1:= `@@rx.subjects.ReplaySubject$ReplayState.EMPTY` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] @kind object;
  #L4c45f2.  call `lazySet`(v0, v1) @signature `Lrx/subjects/ReplaySubject$ReplayState;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c45f8.  return @kind void;
}
procedure `boolean` `add`(`rx.subjects.ReplaySubject$ReplayState` v4 @kind this, `rx.subjects.ReplaySubject$ReplayProducer` v5 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayState;.add:(Lrx/subjects/ReplaySubject$ReplayProducer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c454c.  call temp:= `get`(v4) @signature `Lrx/subjects/ReplaySubject$ReplayState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4552.  v0:= temp @kind object;
  #L4c4554.  v0:= (`rx.subjects.ReplaySubject$ReplayProducer`[]) v0 @kind object;
  #L4c4558.  v1:= `@@rx.subjects.ReplaySubject$ReplayState.TERMINATED` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] @kind object;
  #L4c455c.  v2:= 0I;
  #L4c455e.  if v0 != v1 then goto L4c4564;
  #L4c4562.  return v2;
  #L4c4564.  v1:= length @variable v0;
  #L4c4566.  v3:= v1 + 1;
  #L4c456a.  v3:= new `rx.subjects.ReplaySubject$ReplayProducer`[v3];
  #L4c456e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c4574.  v3[v1]:= v5 @kind object;
  #L4c4578.  call temp:= `compareAndSet`(v4, v0, v3) @signature `Lrx/subjects/ReplaySubject$ReplayState;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c457e.  v0:= temp;
  #L4c4580.  if v0 == 0 then goto L4c454c;
  #L4c4584.  v5:= 1I;
  #L4c4586.  return v5;
}
procedure `void` `call`(`rx.subjects.ReplaySubject$ReplayState` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayState;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c460c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4c4610.  call `call`(v0, v1) @signature `Lrx/subjects/ReplaySubject$ReplayState;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4c4616.  return @kind void;
}
procedure `void` `call`(`rx.subjects.ReplaySubject$ReplayState` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayState;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4628.  v0:= new `rx.subjects.ReplaySubject$ReplayProducer`;
  #L4c462c.  call `<init>`(v0, v2, v1) @signature `Lrx/subjects/ReplaySubject$ReplayProducer;.<init>:(Lrx/Subscriber;Lrx/subjects/ReplaySubject$ReplayState;)V` @kind direct;
  #L4c4632.  call `add`(v2, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4c4638.  call `setProducer`(v2, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4c463e.  call temp:= `add`(v1, v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.add:(Lrx/subjects/ReplaySubject$ReplayProducer;)Z` @kind virtual;
  #L4c4644.  v2:= temp;
  #L4c4646.  if v2 == 0 then goto L4c465e;
  #L4c464a.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayProducer;.isUnsubscribed:()Z` @kind virtual;
  #L4c4650.  v2:= temp;
  #L4c4652.  if v2 == 0 then goto L4c465e;
  #L4c4656.  call `remove`(v1, v0) @signature `Lrx/subjects/ReplaySubject$ReplayState;.remove:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @kind virtual;
  #L4c465c.  return @kind void;
  #L4c465e.  v2:= v1.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4662.  call `drain`(v2, v0) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.drain:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @kind interface;
  #L4c4668.  return @kind void;
}
procedure `boolean` `isTerminated`(`rx.subjects.ReplaySubject$ReplayState` v2 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplayState;.isTerminated:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c4598.  call temp:= `get`(v2) @signature `Lrx/subjects/ReplaySubject$ReplayState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c459e.  v0:= temp @kind object;
  #L4c45a0.  v1:= `@@rx.subjects.ReplaySubject$ReplayState.TERMINATED` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] @kind object;
  #L4c45a4.  if v0 != v1 then goto L4c45ac;
  #L4c45a8.  v0:= 1I;
  #L4c45aa.  goto L4c45ae;
  #L4c45ac.  v0:= 0I;
  #L4c45ae.  return v0;
}
procedure `void` `onCompleted`(`rx.subjects.ReplaySubject$ReplayState` v5 @kind this) @signature `Lrx/subjects/ReplaySubject$ReplayState;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c467c.  v0:= v5.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4680.  call `complete`(v0) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.complete:()V` @kind interface;
  #L4c4686.  v1:= `@@rx.subjects.ReplaySubject$ReplayState.TERMINATED` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] @kind object;
  #L4c468a.  call temp:= `getAndSet`(v5, v1) @signature `Lrx/subjects/ReplaySubject$ReplayState;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c4690.  v1:= temp @kind object;
  #L4c4692.  v1:= (`rx.subjects.ReplaySubject$ReplayProducer`[]) v1 @kind object;
  #L4c4696.  v2:= length @variable v1;
  #L4c4698.  v3:= 0I;
  #L4c469a.  if v3 >= v2 then goto L4c46ae;
  #L4c469e.  v4:= v1[v3] @kind object;
  #L4c46a2.  call `drain`(v0, v4) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.drain:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @kind interface;
  #L4c46a8.  v3:= v3 + 1;
  #L4c46ac.  goto L4c469a;
  #L4c46ae.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.ReplaySubject$ReplayState` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayState;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c46c0.  v0:= v5.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c46c4.  call `error`(v0, v6) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.error:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c46ca.  v6:= `@@rx.subjects.ReplaySubject$ReplayState.TERMINATED` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] @kind object;
  #L4c46ce.  call temp:= `getAndSet`(v5, v6) @signature `Lrx/subjects/ReplaySubject$ReplayState;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c46d4.  v6:= temp @kind object;
  #L4c46d6.  v6:= (`rx.subjects.ReplaySubject$ReplayProducer`[]) v6 @kind object;
  #L4c46da.  v1:= length @variable v6;
  #L4c46dc.  v2:= 0I;
  #L4c46de.  v3:= 0I;
  #L4c46e0.  if v3 >= v1 then goto L4c470c;
  #L4c46e4.  v4:= v6[v3] @kind object;
  #L4c46e8.  call `drain`(v0, v4) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.drain:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @kind interface;
  #L4c46ee.  goto L4c4706;
  #L4c46f0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c46f2.  if v2 != 0 then goto L4c4700;
  #L4c46f6.  v2:= new `java.util.ArrayList`;
  #L4c46fa.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4c4700.  call temp:= `add`(v2, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c4706.  v3:= v3 + 1;
  #L4c470a.  goto L4c46e0;
  #L4c470c.  call `throwIfAny`(v2) @signature `Lrx/exceptions/Exceptions;.throwIfAny:(Ljava/util/List;)V` @kind static;
  #L4c4712.  return @kind void;
  catch `java.lang.Throwable` @[L4c46e8..L4c46ee] goto L4c46f0;
}
procedure `void` `onNext`(`rx.subjects.ReplaySubject$ReplayState` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayState;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c4730.  v0:= v4.`rx.subjects.ReplaySubject$ReplayState.buffer` @type ^`rx.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4c4734.  call `next`(v0, v5) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.next:(Ljava/lang/Object;)V` @kind interface;
  #L4c473a.  call temp:= `get`(v4) @signature `Lrx/subjects/ReplaySubject$ReplayState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4740.  v5:= temp @kind object;
  #L4c4742.  v5:= (`rx.subjects.ReplaySubject$ReplayProducer`[]) v5 @kind object;
  #L4c4746.  v1:= length @variable v5;
  #L4c4748.  v2:= 0I;
  #L4c474a.  if v2 >= v1 then goto L4c475e;
  #L4c474e.  v3:= v5[v2] @kind object;
  #L4c4752.  call `drain`(v0, v3) @signature `Lrx/subjects/ReplaySubject$ReplayBuffer;.drain:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @kind interface;
  #L4c4758.  v2:= v2 + 1;
  #L4c475c.  goto L4c474a;
  #L4c475e.  return @kind void;
}
procedure `void` `remove`(`rx.subjects.ReplaySubject$ReplayState` v6 @kind this, `rx.subjects.ReplaySubject$ReplayProducer` v7 @kind object) @signature `Lrx/subjects/ReplaySubject$ReplayState;.remove:(Lrx/subjects/ReplaySubject$ReplayProducer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c4770.  call temp:= `get`(v6) @signature `Lrx/subjects/ReplaySubject$ReplayState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4776.  v0:= temp @kind object;
  #L4c4778.  v0:= (`rx.subjects.ReplaySubject$ReplayProducer`[]) v0 @kind object;
  #L4c477c.  v1:= `@@rx.subjects.ReplaySubject$ReplayState.TERMINATED` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] @kind object;
  #L4c4780.  if v0 == v1 then goto L4c47e8;
  #L4c4784.  v1:= `@@rx.subjects.ReplaySubject$ReplayState.EMPTY` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] @kind object;
  #L4c4788.  if v0 != v1 then goto L4c478e;
  #L4c478c.  goto L4c47e8;
  #L4c478e.  v1:= length @variable v0;
  #L4c4790.  v2:= -1I;
  #L4c4792.  v3:= 0I;
  #L4c4794.  v4:= 0I;
  #L4c4796.  if v4 >= v1 then goto L4c47ac;
  #L4c479a.  v5:= v0[v4] @kind object;
  #L4c479e.  if v5 != v7 then goto L4c47a6;
  #L4c47a2.  v2:= v4;
  #L4c47a4.  goto L4c47ac;
  #L4c47a6.  v4:= v4 + 1;
  #L4c47aa.  goto L4c4796;
  #L4c47ac.  if v2 >= 0 then goto L4c47b2;
  #L4c47b0.  return @kind void;
  #L4c47b2.  v4:= 1I;
  #L4c47b4.  if v1 != v4 then goto L4c47be;
  #L4c47b8.  v1:= `@@rx.subjects.ReplaySubject$ReplayState.EMPTY` @type ^`rx.subjects.ReplaySubject$ReplayProducer`[] @kind object;
  #L4c47bc.  goto L4c47dc;
  #L4c47be.  v5:= v1 + -1;
  #L4c47c2.  v5:= new `rx.subjects.ReplaySubject$ReplayProducer`[v5];
  #L4c47c6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c47cc.  v3:= v2 + 1;
  #L4c47d0.  v1:= v1 - v2 @kind int;
  #L4c47d2.  v1:= v1 - v4 @kind int;
  #L4c47d4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c47da.  v1:= v5 @kind object;
  #L4c47dc.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Lrx/subjects/ReplaySubject$ReplayState;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c47e2.  v0:= temp;
  #L4c47e4.  if v0 == 0 then goto L4c4770;
  #L4c47e8.  return @kind void;
}
