record `rx.subjects.PublishSubject$PublishSubjectState` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `rx.Observable$OnSubscribe` @kind interface, `rx.Observer` @kind interface {
  `java.lang.Throwable` `rx.subjects.PublishSubject$PublishSubjectState.error` @AccessFlag ;
}
global `rx.subjects.PublishSubject$PublishSubjectProducer`[] `@@rx.subjects.PublishSubject$PublishSubjectState.EMPTY` @AccessFlag STATIC_FINAL;
global `rx.subjects.PublishSubject$PublishSubjectProducer`[] `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@rx.subjects.PublishSubject$PublishSubjectState.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c3938.  v0:= 0I;
  #L4c393a.  v1:= new `rx.subjects.PublishSubject$PublishSubjectProducer`[v0];
  #L4c393e.  `@@rx.subjects.PublishSubject$PublishSubjectState.EMPTY` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] := v1 @kind object;
  #L4c3942.  v0:= new `rx.subjects.PublishSubject$PublishSubjectProducer`[v0];
  #L4c3946.  `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] := v0 @kind object;
  #L4c394a.  return @kind void;
}
procedure `void` `<init>`(`rx.subjects.PublishSubject$PublishSubjectState` v1 @kind this) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c395c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c3962.  v0:= `@@rx.subjects.PublishSubject$PublishSubjectState.EMPTY` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3966.  call `lazySet`(v1, v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c396c.  return @kind void;
}
procedure `boolean` `add`(`rx.subjects.PublishSubject$PublishSubjectState` v4 @kind this, `rx.subjects.PublishSubject$PublishSubjectProducer` v5 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.add:(Lrx/subjects/PublishSubject$PublishSubjectProducer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c38ec.  call temp:= `get`(v4) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c38f2.  v0:= temp @kind object;
  #L4c38f4.  v0:= (`rx.subjects.PublishSubject$PublishSubjectProducer`[]) v0 @kind object;
  #L4c38f8.  v1:= `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c38fc.  v2:= 0I;
  #L4c38fe.  if v0 != v1 then goto L4c3904;
  #L4c3902.  return v2;
  #L4c3904.  v1:= length @variable v0;
  #L4c3906.  v3:= v1 + 1;
  #L4c390a.  v3:= new `rx.subjects.PublishSubject$PublishSubjectProducer`[v3];
  #L4c390e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c3914.  v3[v1]:= v5 @kind object;
  #L4c3918.  call temp:= `compareAndSet`(v4, v0, v3) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c391e.  v0:= temp;
  #L4c3920.  if v0 == 0 then goto L4c38ec;
  #L4c3924.  v5:= 1I;
  #L4c3926.  return v5;
}
procedure `void` `call`(`rx.subjects.PublishSubject$PublishSubjectState` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c3980.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4c3984.  call `call`(v0, v1) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4c398a.  return @kind void;
}
procedure `void` `call`(`rx.subjects.PublishSubject$PublishSubjectState` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c399c.  v0:= new `rx.subjects.PublishSubject$PublishSubjectProducer`;
  #L4c39a0.  call `<init>`(v0, v2, v3) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.<init>:(Lrx/subjects/PublishSubject$PublishSubjectState;Lrx/Subscriber;)V` @kind direct;
  #L4c39a6.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4c39ac.  call `setProducer`(v3, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4c39b2.  call temp:= `add`(v2, v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.add:(Lrx/subjects/PublishSubject$PublishSubjectProducer;)Z` @kind virtual;
  #L4c39b8.  v1:= temp;
  #L4c39ba.  if v1 == 0 then goto L4c39d2;
  #L4c39be.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.isUnsubscribed:()Z` @kind virtual;
  #L4c39c4.  v3:= temp;
  #L4c39c6.  if v3 == 0 then goto L4c39e8;
  #L4c39ca.  call `remove`(v2, v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.remove:(Lrx/subjects/PublishSubject$PublishSubjectProducer;)V` @kind virtual;
  #L4c39d0.  goto L4c39e8;
  #L4c39d2.  v0:= v2.`rx.subjects.PublishSubject$PublishSubjectState.error` @type ^`java.lang.Throwable` @kind object;
  #L4c39d6.  if v0 == 0 then goto L4c39e2;
  #L4c39da.  call `onError`(v3, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c39e0.  goto L4c39e8;
  #L4c39e2.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4c39e8.  return @kind void;
}
procedure `void` `onCompleted`(`rx.subjects.PublishSubject$PublishSubjectState` v4 @kind this) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c39fc.  v0:= `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3a00.  call temp:= `getAndSet`(v4, v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c3a06.  v0:= temp @kind object;
  #L4c3a08.  v0:= (`rx.subjects.PublishSubject$PublishSubjectProducer`[]) v0 @kind object;
  #L4c3a0c.  v1:= length @variable v0;
  #L4c3a0e.  v2:= 0I;
  #L4c3a10.  if v2 >= v1 then goto L4c3a24;
  #L4c3a14.  v3:= v0[v2] @kind object;
  #L4c3a18.  call `onCompleted`(v3) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.onCompleted:()V` @kind virtual;
  #L4c3a1e.  v2:= v2 + 1;
  #L4c3a22.  goto L4c3a10;
  #L4c3a24.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.PublishSubject$PublishSubjectState` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c3a38.  v6.`rx.subjects.PublishSubject$PublishSubjectState.error` @type ^`java.lang.Throwable` := v7 @kind object;
  #L4c3a3c.  v0:= `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3a40.  call temp:= `getAndSet`(v6, v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c3a46.  v0:= temp @kind object;
  #L4c3a48.  v0:= (`rx.subjects.PublishSubject$PublishSubjectProducer`[]) v0 @kind object;
  #L4c3a4c.  v1:= length @variable v0;
  #L4c3a4e.  v2:= 0I;
  #L4c3a50.  v3:= 0I;
  #L4c3a52.  if v3 >= v1 then goto L4c3a80;
  #L4c3a56.  v4:= v0[v3] @kind object;
  #L4c3a5a.  call `onError`(v4, v7) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c3a60.  goto L4c3a7a;
  #L4c3a62.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c3a64.  if v2 != 0 then goto L4c3a74;
  #L4c3a68.  v2:= new `java.util.ArrayList`;
  #L4c3a6c.  v5:= 1I;
  #L4c3a6e.  call `<init>`(v2, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4c3a74.  call temp:= `add`(v2, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c3a7a.  v3:= v3 + 1;
  #L4c3a7e.  goto L4c3a52;
  #L4c3a80.  call `throwIfAny`(v2) @signature `Lrx/exceptions/Exceptions;.throwIfAny:(Ljava/util/List;)V` @kind static;
  #L4c3a86.  return @kind void;
  catch `java.lang.Throwable` @[L4c3a5a..L4c3a60] goto L4c3a62;
}
procedure `void` `onNext`(`rx.subjects.PublishSubject$PublishSubjectState` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c3aa4.  call temp:= `get`(v4) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3aaa.  v0:= temp @kind object;
  #L4c3aac.  v0:= (`rx.subjects.PublishSubject$PublishSubjectProducer`[]) v0 @kind object;
  #L4c3ab0.  v1:= length @variable v0;
  #L4c3ab2.  v2:= 0I;
  #L4c3ab4.  if v2 >= v1 then goto L4c3ac8;
  #L4c3ab8.  v3:= v0[v2] @kind object;
  #L4c3abc.  call `onNext`(v3, v5) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c3ac2.  v2:= v2 + 1;
  #L4c3ac6.  goto L4c3ab4;
  #L4c3ac8.  return @kind void;
}
procedure `void` `remove`(`rx.subjects.PublishSubject$PublishSubjectState` v6 @kind this, `rx.subjects.PublishSubject$PublishSubjectProducer` v7 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.remove:(Lrx/subjects/PublishSubject$PublishSubjectProducer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c3adc.  call temp:= `get`(v6) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3ae2.  v0:= temp @kind object;
  #L4c3ae4.  v0:= (`rx.subjects.PublishSubject$PublishSubjectProducer`[]) v0 @kind object;
  #L4c3ae8.  v1:= `@@rx.subjects.PublishSubject$PublishSubjectState.TERMINATED` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3aec.  if v0 == v1 then goto L4c3b54;
  #L4c3af0.  v1:= `@@rx.subjects.PublishSubject$PublishSubjectState.EMPTY` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3af4.  if v0 != v1 then goto L4c3afa;
  #L4c3af8.  goto L4c3b54;
  #L4c3afa.  v1:= length @variable v0;
  #L4c3afc.  v2:= -1I;
  #L4c3afe.  v3:= 0I;
  #L4c3b00.  v4:= 0I;
  #L4c3b02.  if v4 >= v1 then goto L4c3b18;
  #L4c3b06.  v5:= v0[v4] @kind object;
  #L4c3b0a.  if v5 != v7 then goto L4c3b12;
  #L4c3b0e.  v2:= v4;
  #L4c3b10.  goto L4c3b18;
  #L4c3b12.  v4:= v4 + 1;
  #L4c3b16.  goto L4c3b02;
  #L4c3b18.  if v2 >= 0 then goto L4c3b1e;
  #L4c3b1c.  return @kind void;
  #L4c3b1e.  v4:= 1I;
  #L4c3b20.  if v1 != v4 then goto L4c3b2a;
  #L4c3b24.  v1:= `@@rx.subjects.PublishSubject$PublishSubjectState.EMPTY` @type ^`rx.subjects.PublishSubject$PublishSubjectProducer`[] @kind object;
  #L4c3b28.  goto L4c3b48;
  #L4c3b2a.  v5:= v1 + -1;
  #L4c3b2e.  v5:= new `rx.subjects.PublishSubject$PublishSubjectProducer`[v5];
  #L4c3b32.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c3b38.  v3:= v2 + 1;
  #L4c3b3c.  v1:= v1 - v2 @kind int;
  #L4c3b3e.  v1:= v1 - v4 @kind int;
  #L4c3b40.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c3b46.  v1:= v5 @kind object;
  #L4c3b48.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c3b4e.  v0:= temp;
  #L4c3b50.  if v0 == 0 then goto L4c3adc;
  #L4c3b54.  return @kind void;
}
