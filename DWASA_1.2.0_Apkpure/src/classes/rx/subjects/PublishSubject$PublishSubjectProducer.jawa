record `rx.subjects.PublishSubject$PublishSubjectProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface, `rx.Subscription` @kind interface, `rx.Observer` @kind interface {
  `rx.Subscriber` `rx.subjects.PublishSubject$PublishSubjectProducer.actual` @AccessFlag FINAL;
  `rx.subjects.PublishSubject$PublishSubjectState` `rx.subjects.PublishSubject$PublishSubjectProducer.parent` @AccessFlag FINAL;
  `long` `rx.subjects.PublishSubject$PublishSubjectProducer.produced` @AccessFlag ;
}
global `long` `@@rx.subjects.PublishSubject$PublishSubjectProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.subjects.PublishSubject$PublishSubjectProducer` v0 @kind this, `rx.subjects.PublishSubject$PublishSubjectState` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.<init>:(Lrx/subjects/PublishSubject$PublishSubjectState;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c378c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c3792.  v0.`rx.subjects.PublishSubject$PublishSubjectProducer.parent` @type ^`rx.subjects.PublishSubject$PublishSubjectState` := v1 @kind object;
  #L4c3796.  v0.`rx.subjects.PublishSubject$PublishSubjectProducer.actual` @type ^`rx.Subscriber` := v2 @kind object;
  #L4c379a.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.subjects.PublishSubject$PublishSubjectProducer` v5 @kind this) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c3760.  call temp:= `get`(v5) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.get:()J` @kind virtual;
  #L4c3766.  v0:= temp @kind wide;
  #L4c3768.  v2:= -9223372036854775808L;
  #L4c376c.  v4:= lcmp(v0, v2);
  #L4c3770.  if v4 != 0 then goto L4c3778;
  #L4c3774.  v0:= 1I;
  #L4c3776.  goto L4c377a;
  #L4c3778.  v0:= 0I;
  #L4c377a.  return v0;
}
procedure `void` `onCompleted`(`rx.subjects.PublishSubject$PublishSubjectProducer` v5 @kind this) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c37ac.  call temp:= `get`(v5) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.get:()J` @kind virtual;
  #L4c37b2.  v0:= temp @kind wide;
  #L4c37b4.  v2:= -9223372036854775808L;
  #L4c37b8.  v4:= lcmp(v0, v2);
  #L4c37bc.  if v4 == 0 then goto L4c37ca;
  #L4c37c0.  v0:= v5.`rx.subjects.PublishSubject$PublishSubjectProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L4c37c4.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4c37ca.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.PublishSubject$PublishSubjectProducer` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c37dc.  call temp:= `get`(v5) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.get:()J` @kind virtual;
  #L4c37e2.  v0:= temp @kind wide;
  #L4c37e4.  v2:= -9223372036854775808L;
  #L4c37e8.  v4:= lcmp(v0, v2);
  #L4c37ec.  if v4 == 0 then goto L4c37fa;
  #L4c37f0.  v0:= v5.`rx.subjects.PublishSubject$PublishSubjectProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L4c37f4.  call `onError`(v0, v6) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c37fa.  return @kind void;
}
procedure `void` `onNext`(`rx.subjects.PublishSubject$PublishSubjectProducer` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c380c.  call temp:= `get`(v5) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.get:()J` @kind virtual;
  #L4c3812.  v0:= temp @kind wide;
  #L4c3814.  v2:= -9223372036854775808L;
  #L4c3818.  v4:= lcmp(v0, v2);
  #L4c381c.  if v4 == 0 then goto L4c3860;
  #L4c3820.  v2:= v5.`rx.subjects.PublishSubject$PublishSubjectProducer.produced` @type ^`long` @kind wide;
  #L4c3824.  v4:= lcmp(v0, v2);
  #L4c3828.  if v4 == 0 then goto L4c3842;
  #L4c382c.  v0:= 1L;
  #L4c3830.  v2:= v2 + v0 @kind long;
  #L4c3832.  v5.`rx.subjects.PublishSubject$PublishSubjectProducer.produced` @type ^`long` := v2 @kind wide;
  #L4c3836.  v0:= v5.`rx.subjects.PublishSubject$PublishSubjectProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L4c383a.  call `onNext`(v0, v6) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c3840.  goto L4c3860;
  #L4c3842.  call `unsubscribe`(v5) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.unsubscribe:()V` @kind virtual;
  #L4c3848.  v6:= v5.`rx.subjects.PublishSubject$PublishSubjectProducer.actual` @type ^`rx.Subscriber` @kind object;
  #L4c384c.  v0:= new `rx.exceptions.MissingBackpressureException`;
  #L4c3850.  v1:= "PublishSubject: could not emit value due to lack of requests" @kind object;
  #L4c3854.  call `<init>`(v0, v1) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c385a.  call `onError`(v6, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c3860.  return @kind void;
}
procedure `void` `request`(`rx.subjects.PublishSubject$PublishSubjectProducer` v5 @kind this, `long` v6 ) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c3874.  call temp:= `validate`(v6) @signature `Lrx/internal/operators/BackpressureUtils;.validate:(J)Z` @kind static;
  #L4c387a.  v0:= temp;
  #L4c387c.  if v0 == 0 then goto L4c38aa;
  #L4c3880.  call temp:= `get`(v5) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.get:()J` @kind virtual;
  #L4c3886.  v0:= temp @kind wide;
  #L4c3888.  v2:= -9223372036854775808L;
  #L4c388c.  v4:= lcmp(v0, v2);
  #L4c3890.  if v4 != 0 then goto L4c3896;
  #L4c3894.  return @kind void;
  #L4c3896.  call temp:= `addCap`(v0, v6) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L4c389c.  v2:= temp @kind wide;
  #L4c389e.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.compareAndSet:(JJ)Z` @kind virtual;
  #L4c38a4.  v0:= temp;
  #L4c38a6.  if v0 == 0 then goto L4c3880;
  #L4c38aa.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.subjects.PublishSubject$PublishSubjectProducer` v5 @kind this) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c38bc.  v0:= -9223372036854775808L;
  #L4c38c0.  call temp:= `getAndSet`(v5, v0) @signature `Lrx/subjects/PublishSubject$PublishSubjectProducer;.getAndSet:(J)J` @kind virtual;
  #L4c38c6.  v2:= temp @kind wide;
  #L4c38c8.  v4:= lcmp(v2, v0);
  #L4c38cc.  if v4 == 0 then goto L4c38da;
  #L4c38d0.  v0:= v5.`rx.subjects.PublishSubject$PublishSubjectProducer.parent` @type ^`rx.subjects.PublishSubject$PublishSubjectState` @kind object;
  #L4c38d4.  call `remove`(v0, v5) @signature `Lrx/subjects/PublishSubject$PublishSubjectState;.remove:(Lrx/subjects/PublishSubject$PublishSubjectProducer;)V` @kind virtual;
  #L4c38da.  return @kind void;
}
