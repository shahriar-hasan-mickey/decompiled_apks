record `rx.subjects.BehaviorSubject` @kind class @AccessFlag PUBLIC_FINAL extends `rx.subjects.Subject` @kind class {
  `rx.subjects.SubjectSubscriptionManager` `rx.subjects.BehaviorSubject.state` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Object`[] `@@rx.subjects.BehaviorSubject.EMPTY_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/subjects/BehaviorSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c35e8.  v0:= 0I;
  #L4c35ea.  v0:= new `java.lang.Object`[v0];
  #L4c35ee.  `@@rx.subjects.BehaviorSubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] := v0 @kind object;
  #L4c35f2.  return @kind void;
}
procedure `void` `<init>`(`rx.subjects.BehaviorSubject` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object, `rx.subjects.SubjectSubscriptionManager` v2 @kind object) @signature `Lrx/subjects/BehaviorSubject;.<init>:(Lrx/Observable$OnSubscribe;Lrx/subjects/SubjectSubscriptionManager;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4c3604.  call `<init>`(v0, v1) @signature `Lrx/subjects/Subject;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4c360a.  v0.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` := v2 @kind object;
  #L4c360e.  return @kind void;
}
procedure `rx.subjects.BehaviorSubject` `create`() @signature `Lrx/subjects/BehaviorSubject;.create:()Lrx/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c355c.  v0:= 0I;
  #L4c355e.  v1:= 0I;
  #L4c3560.  call temp:= `create`(v0, v1) @signature `Lrx/subjects/BehaviorSubject;.create:(Ljava/lang/Object;Z)Lrx/subjects/BehaviorSubject;` @kind static;
  #L4c3566.  v0:= temp @kind object;
  #L4c3568.  return v0 @kind object;
}
procedure `rx.subjects.BehaviorSubject` `create`(`java.lang.Object` v1 @kind object) @signature `Lrx/subjects/BehaviorSubject;.create:(Ljava/lang/Object;)Lrx/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c357c.  v0:= 1I;
  #L4c357e.  call temp:= `create`(v1, v0) @signature `Lrx/subjects/BehaviorSubject;.create:(Ljava/lang/Object;Z)Lrx/subjects/BehaviorSubject;` @kind static;
  #L4c3584.  v1:= temp @kind object;
  #L4c3586.  return v1 @kind object;
}
procedure `rx.subjects.BehaviorSubject` `create`(`java.lang.Object` v1 @kind object, `boolean` v2 ) @signature `Lrx/subjects/BehaviorSubject;.create:(Ljava/lang/Object;Z)Lrx/subjects/BehaviorSubject;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4c3598.  v0:= new `rx.subjects.SubjectSubscriptionManager`;
  #L4c359c.  call `<init>`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.<init>:()V` @kind direct;
  #L4c35a2.  if v2 == 0 then goto L4c35b4;
  #L4c35a6.  call temp:= `next`(v1) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c35ac.  v1:= temp @kind object;
  #L4c35ae.  call `setLatest`(v0, v1) @signature `Lrx/subjects/SubjectSubscriptionManager;.setLatest:(Ljava/lang/Object;)V` @kind virtual;
  #L4c35b4.  v1:= new `rx.subjects.BehaviorSubject$1`;
  #L4c35b8.  call `<init>`(v1, v0) @signature `Lrx/subjects/BehaviorSubject$1;.<init>:(Lrx/subjects/SubjectSubscriptionManager;)V` @kind direct;
  #L4c35be.  v0.`rx.subjects.SubjectSubscriptionManager.onAdded` @type ^`rx.functions.Action1` := v1 @kind object;
  #L4c35c2.  v1:= v0.`rx.subjects.SubjectSubscriptionManager.onAdded` @type ^`rx.functions.Action1` @kind object;
  #L4c35c6.  v0.`rx.subjects.SubjectSubscriptionManager.onTerminated` @type ^`rx.functions.Action1` := v1 @kind object;
  #L4c35ca.  v1:= new `rx.subjects.BehaviorSubject`;
  #L4c35ce.  call `<init>`(v1, v0, v0) @signature `Lrx/subjects/BehaviorSubject;.<init>:(Lrx/Observable$OnSubscribe;Lrx/subjects/SubjectSubscriptionManager;)V` @kind direct;
  #L4c35d4.  return v1 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`rx.subjects.BehaviorSubject` v2 @kind this) @signature `Lrx/subjects/BehaviorSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3524.  v0:= v2.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3528.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c352e.  v0:= temp @kind object;
  #L4c3530.  call temp:= `isError`(v0) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c3536.  v1:= temp;
  #L4c3538.  if v1 == 0 then goto L4c3546;
  #L4c353c.  call temp:= `getError`(v0) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4c3542.  v0:= temp @kind object;
  #L4c3544.  return v0 @kind object;
  #L4c3546.  v0:= 0I;
  #L4c3548.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`rx.subjects.BehaviorSubject` v2 @kind this) @signature `Lrx/subjects/BehaviorSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3444.  v0:= v2.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3448.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c344e.  v0:= temp @kind object;
  #L4c3450.  call temp:= `isNext`(v0) @signature `Lrx/internal/operators/NotificationLite;.isNext:(Ljava/lang/Object;)Z` @kind static;
  #L4c3456.  v1:= temp;
  #L4c3458.  if v1 == 0 then goto L4c3466;
  #L4c345c.  call temp:= `getValue`(v0) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c3462.  v0:= temp @kind object;
  #L4c3464.  return v0 @kind object;
  #L4c3466.  v0:= 0I;
  #L4c3468.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`rx.subjects.BehaviorSubject` v2 @kind this) @signature `Lrx/subjects/BehaviorSubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c347c.  v0:= `@@rx.subjects.BehaviorSubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L4c3480.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4c3484.  call temp:= `getValues`(v2, v0) @signature `Lrx/subjects/BehaviorSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L4c348a.  v0:= temp @kind object;
  #L4c348c.  v1:= `@@rx.subjects.BehaviorSubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L4c3490.  if v0 != v1 then goto L4c349a;
  #L4c3494.  v0:= 0I;
  #L4c3496.  v0:= new `java.lang.Object`[v0];
  #L4c349a.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`rx.subjects.BehaviorSubject` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lrx/subjects/BehaviorSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c34ac.  v0:= v5.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c34b0.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c34b6.  v0:= temp @kind object;
  #L4c34b8.  call temp:= `isNext`(v0) @signature `Lrx/internal/operators/NotificationLite;.isNext:(Ljava/lang/Object;)Z` @kind static;
  #L4c34be.  v1:= temp;
  #L4c34c0.  v2:= 0I;
  #L4c34c2.  v3:= 0I;
  #L4c34c4.  if v1 == 0 then goto L4c3508;
  #L4c34c8.  v1:= length @variable v6;
  #L4c34ca.  v4:= 1I;
  #L4c34cc.  if v1 != 0 then goto L4c34f0;
  #L4c34d0.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4c34d6.  v6:= temp @kind object;
  #L4c34d8.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4c34de.  v6:= temp @kind object;
  #L4c34e0.  call temp:= `newInstance`(v6, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4c34e6.  v6:= temp @kind object;
  #L4c34e8.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4c34ec.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4c34f0.  call temp:= `getValue`(v0) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c34f6.  v0:= temp @kind object;
  #L4c34f8.  v6[v3]:= v0 @kind object;
  #L4c34fc.  v0:= length @variable v6;
  #L4c34fe.  if v0 <= v4 then goto L4c3512;
  #L4c3502.  v6[v4]:= v2 @kind object;
  #L4c3506.  goto L4c3512;
  #L4c3508.  v0:= length @variable v6;
  #L4c350a.  if v0 <= 0 then goto L4c3512;
  #L4c350e.  v6[v3]:= v2 @kind object;
  #L4c3512.  return v6 @kind object;
}
procedure `boolean` `hasCompleted`(`rx.subjects.BehaviorSubject` v1 @kind this) @signature `Lrx/subjects/BehaviorSubject;.hasCompleted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3380.  v0:= v1.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3384.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c338a.  v0:= temp @kind object;
  #L4c338c.  call temp:= `isCompleted`(v0) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L4c3392.  v0:= temp;
  #L4c3394.  return v0;
}
procedure `boolean` `hasObservers`(`rx.subjects.BehaviorSubject` v1 @kind this) @signature `Lrx/subjects/BehaviorSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c33a8.  v0:= v1.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c33ac.  call temp:= `observers`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.observers:()[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c33b2.  v0:= temp @kind object;
  #L4c33b4.  v0:= length @variable v0;
  #L4c33b6.  if v0 <= 0 then goto L4c33be;
  #L4c33ba.  v0:= 1I;
  #L4c33bc.  goto L4c33c0;
  #L4c33be.  v0:= 0I;
  #L4c33c0.  return v0;
}
procedure `boolean` `hasThrowable`(`rx.subjects.BehaviorSubject` v1 @kind this) @signature `Lrx/subjects/BehaviorSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c33d4.  v0:= v1.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c33d8.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c33de.  v0:= temp @kind object;
  #L4c33e0.  call temp:= `isError`(v0) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c33e6.  v0:= temp;
  #L4c33e8.  return v0;
}
procedure `boolean` `hasValue`(`rx.subjects.BehaviorSubject` v1 @kind this) @signature `Lrx/subjects/BehaviorSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c33fc.  v0:= v1.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3400.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c3406.  v0:= temp @kind object;
  #L4c3408.  call temp:= `isNext`(v0) @signature `Lrx/internal/operators/NotificationLite;.isNext:(Ljava/lang/Object;)Z` @kind static;
  #L4c340e.  v0:= temp;
  #L4c3410.  return v0;
}
procedure `void` `onCompleted`(`rx.subjects.BehaviorSubject` v5 @kind this) @signature `Lrx/subjects/BehaviorSubject;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c3620.  v0:= v5.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3624.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c362a.  v0:= temp @kind object;
  #L4c362c.  if v0 == 0 then goto L4c363c;
  #L4c3630.  v0:= v5.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3634.  v0:= v0.`rx.subjects.SubjectSubscriptionManager.active` @type ^`boolean` @kind boolean;
  #L4c3638.  if v0 == 0 then goto L4c3668;
  #L4c363c.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4c3642.  v0:= temp @kind object;
  #L4c3644.  v1:= v5.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3648.  call temp:= `terminate`(v1, v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.terminate:(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c364e.  v1:= temp @kind object;
  #L4c3650.  v2:= length @variable v1;
  #L4c3652.  v3:= 0I;
  #L4c3654.  if v3 >= v2 then goto L4c3668;
  #L4c3658.  v4:= v1[v3] @kind object;
  #L4c365c.  call `emitNext`(v4, v0) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.emitNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c3662.  v3:= v3 + 1;
  #L4c3666.  goto L4c3654;
  #L4c3668.  return @kind void;
}
procedure `void` `onError`(`rx.subjects.BehaviorSubject` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lrx/subjects/BehaviorSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c367c.  v0:= v5.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3680.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c3686.  v0:= temp @kind object;
  #L4c3688.  if v0 == 0 then goto L4c3698;
  #L4c368c.  v0:= v5.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3690.  v0:= v0.`rx.subjects.SubjectSubscriptionManager.active` @type ^`boolean` @kind boolean;
  #L4c3694.  if v0 == 0 then goto L4c36e4;
  #L4c3698.  call temp:= `error`(v6) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4c369e.  v6:= temp @kind object;
  #L4c36a0.  v0:= 0I;
  #L4c36a2.  v1:= v5.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c36a6.  call temp:= `terminate`(v1, v6) @signature `Lrx/subjects/SubjectSubscriptionManager;.terminate:(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c36ac.  v1:= temp @kind object;
  #L4c36ae.  v2:= length @variable v1;
  #L4c36b0.  v3:= 0I;
  #L4c36b2.  if v3 >= v2 then goto L4c36de;
  #L4c36b6.  v4:= v1[v3] @kind object;
  #L4c36ba.  call `emitNext`(v4, v6) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.emitNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c36c0.  goto L4c36d8;
  #L4c36c2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c36c4.  if v0 != 0 then goto L4c36d2;
  #L4c36c8.  v0:= new `java.util.ArrayList`;
  #L4c36cc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4c36d2.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c36d8.  v3:= v3 + 1;
  #L4c36dc.  goto L4c36b2;
  #L4c36de.  call `throwIfAny`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfAny:(Ljava/util/List;)V` @kind static;
  #L4c36e4.  return @kind void;
  catch `java.lang.Throwable` @[L4c36ba..L4c36c0] goto L4c36c2;
}
procedure `void` `onNext`(`rx.subjects.BehaviorSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/subjects/BehaviorSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c3704.  v0:= v4.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3708.  call temp:= `getLatest`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.getLatest:()Ljava/lang/Object;` @kind virtual;
  #L4c370e.  v0:= temp @kind object;
  #L4c3710.  if v0 == 0 then goto L4c3720;
  #L4c3714.  v0:= v4.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3718.  v0:= v0.`rx.subjects.SubjectSubscriptionManager.active` @type ^`boolean` @kind boolean;
  #L4c371c.  if v0 == 0 then goto L4c374c;
  #L4c3720.  call temp:= `next`(v5) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c3726.  v5:= temp @kind object;
  #L4c3728.  v0:= v4.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c372c.  call temp:= `next`(v0, v5) @signature `Lrx/subjects/SubjectSubscriptionManager;.next:(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c3732.  v0:= temp @kind object;
  #L4c3734.  v1:= length @variable v0;
  #L4c3736.  v2:= 0I;
  #L4c3738.  if v2 >= v1 then goto L4c374c;
  #L4c373c.  v3:= v0[v2] @kind object;
  #L4c3740.  call `emitNext`(v3, v5) @signature `Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;.emitNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c3746.  v2:= v2 + 1;
  #L4c374a.  goto L4c3738;
  #L4c374c.  return @kind void;
}
procedure `int` `subscriberCount`(`rx.subjects.BehaviorSubject` v1 @kind this) @signature `Lrx/subjects/BehaviorSubject;.subscriberCount:()I` @AccessFlag  {
    temp;
    v0;

  #L4c3424.  v0:= v1.`rx.subjects.BehaviorSubject.state` @type ^`rx.subjects.SubjectSubscriptionManager` @kind object;
  #L4c3428.  call temp:= `observers`(v0) @signature `Lrx/subjects/SubjectSubscriptionManager;.observers:()[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;` @kind virtual;
  #L4c342e.  v0:= temp @kind object;
  #L4c3430.  v0:= length @variable v0;
  #L4c3432.  return v0;
}
