record `rx.Single$13` @kind class @AccessFlag  extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Single` `rx.Single$13.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler` `rx.Single$13.val$scheduler` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$13` v0 @kind this, `rx.Single` v1 @kind object, `rx.Scheduler` v2 @kind object) @signature `Lrx/Single$13;.<init>:(Lrx/Single;Lrx/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48ec10.  v0.`rx.Single$13.this$0` @type ^`rx.Single` := v1 @kind object;
  #L48ec14.  v0.`rx.Single$13.val$scheduler` @type ^`rx.Scheduler` := v2 @kind object;
  #L48ec18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48ec1e.  return @kind void;
}
procedure `void` `call`(`rx.Single$13` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Single$13;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48ec30.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L48ec34.  call `call`(v0, v1) @signature `Lrx/Single$13;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L48ec3a.  return @kind void;
}
procedure `void` `call`(`rx.Single$13` v2 @kind this, `rx.SingleSubscriber` v3 @kind object) @signature `Lrx/Single$13;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48ec4c.  v0:= v2.`rx.Single$13.val$scheduler` @type ^`rx.Scheduler` @kind object;
  #L48ec50.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L48ec56.  v0:= temp @kind object;
  #L48ec58.  call `add`(v3, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L48ec5e.  v1:= new `rx.Single$13$1`;
  #L48ec62.  call `<init>`(v1, v2, v3, v0) @signature `Lrx/Single$13$1;.<init>:(Lrx/Single$13;Lrx/SingleSubscriber;Lrx/Scheduler$Worker;)V` @kind direct;
  #L48ec68.  call temp:= `schedule`(v0, v1) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L48ec6e.  return @kind void;
}
