record `rx.Completable$13$1` @kind class @AccessFlag  extends `rx.CompletableSubscriber` @kind interface {
  `rx.Subscription` `rx.Completable$13$1.d` @AccessFlag ;
  `rx.Completable$13` `rx.Completable$13$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.Completable$13$1.val$once` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `rx.Completable$13$1.val$resource` @AccessFlag FINAL_SYNTHETIC;
  `rx.CompletableSubscriber` `rx.Completable$13$1.val$s` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$13$1` v0 @kind this, `rx.Completable$13` v1 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v2 @kind object, `java.lang.Object` v3 @kind object, `rx.CompletableSubscriber` v4 @kind object) @signature `Lrx/Completable$13$1;.<init>:(Lrx/Completable$13;Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/Object;Lrx/CompletableSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L486850.  v0.`rx.Completable$13$1.this$0` @type ^`rx.Completable$13` := v1 @kind object;
  #L486854.  v0.`rx.Completable$13$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L486858.  v0.`rx.Completable$13$1.val$resource` @type ^`java.lang.Object` := v3 @kind object;
  #L48685c.  v0.`rx.Completable$13$1.val$s` @type ^`rx.CompletableSubscriber` := v4 @kind object;
  #L486860.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L486866.  return @kind void;
}
procedure `void` `dispose`(`rx.Completable$13$1` v3 @kind this) @signature `Lrx/Completable$13$1;.dispose:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L486878.  v0:= v3.`rx.Completable$13$1.d` @type ^`rx.Subscription` @kind object;
  #L48687c.  call `unsubscribe`(v0) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L486882.  v0:= v3.`rx.Completable$13$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L486886.  v1:= 0I;
  #L486888.  v2:= 1I;
  #L48688a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L486890.  v0:= temp;
  #L486892.  if v0 == 0 then goto L4868b2;
  #L486896.  v0:= v3.`rx.Completable$13$1.this$0` @type ^`rx.Completable$13` @kind object;
  #L48689a.  v0:= v0.`rx.Completable$13.val$disposer` @type ^`rx.functions.Action1` @kind object;
  #L48689e.  v1:= v3.`rx.Completable$13$1.val$resource` @type ^`java.lang.Object` @kind object;
  #L4868a2.  call `call`(v0, v1) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4868a8.  goto L4868b2;
  #L4868aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4868ac.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4868b2.  return @kind void;
  catch `java.lang.Throwable` @[L486896..L4868a8] goto L4868aa;
}
procedure `void` `onCompleted`(`rx.Completable$13$1` v3 @kind this) @signature `Lrx/Completable$13$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4868d0.  v0:= v3.`rx.Completable$13$1.this$0` @type ^`rx.Completable$13` @kind object;
  #L4868d4.  v0:= v0.`rx.Completable$13.val$eager` @type ^`boolean` @kind boolean;
  #L4868d8.  if v0 == 0 then goto L486912;
  #L4868dc.  v0:= v3.`rx.Completable$13$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4868e0.  v1:= 0I;
  #L4868e2.  v2:= 1I;
  #L4868e4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4868ea.  v0:= temp;
  #L4868ec.  if v0 == 0 then goto L486912;
  #L4868f0.  v0:= v3.`rx.Completable$13$1.this$0` @type ^`rx.Completable$13` @kind object;
  #L4868f4.  v0:= v0.`rx.Completable$13.val$disposer` @type ^`rx.functions.Action1` @kind object;
  #L4868f8.  v1:= v3.`rx.Completable$13$1.val$resource` @type ^`java.lang.Object` @kind object;
  #L4868fc.  call `call`(v0, v1) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L486902.  goto L486912;
  #L486904.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L486906.  v1:= v3.`rx.Completable$13$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L48690a.  call `onError`(v1, v0) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L486910.  return @kind void;
  #L486912.  v0:= v3.`rx.Completable$13$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L486916.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L48691c.  v0:= v3.`rx.Completable$13$1.this$0` @type ^`rx.Completable$13` @kind object;
  #L486920.  v0:= v0.`rx.Completable$13.val$eager` @type ^`boolean` @kind boolean;
  #L486924.  if v0 != 0 then goto L48692e;
  #L486928.  call `dispose`(v3) @signature `Lrx/Completable$13$1;.dispose:()V` @kind virtual;
  #L48692e.  return @kind void;
  catch `java.lang.Throwable` @[L4868f0..L486902] goto L486904;
}
procedure `void` `onError`(`rx.Completable$13$1` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lrx/Completable$13$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48694c.  v0:= v5.`rx.Completable$13$1.this$0` @type ^`rx.Completable$13` @kind object;
  #L486950.  v0:= v0.`rx.Completable$13.val$eager` @type ^`boolean` @kind boolean;
  #L486954.  if v0 == 0 then goto L4869a4;
  #L486958.  v0:= v5.`rx.Completable$13$1.val$once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L48695c.  v1:= 1I;
  #L48695e.  v2:= 0I;
  #L486960.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L486966.  v0:= temp;
  #L486968.  if v0 == 0 then goto L4869a4;
  #L48696c.  v0:= v5.`rx.Completable$13$1.this$0` @type ^`rx.Completable$13` @kind object;
  #L486970.  v0:= v0.`rx.Completable$13.val$disposer` @type ^`rx.functions.Action1` @kind object;
  #L486974.  v3:= v5.`rx.Completable$13$1.val$resource` @type ^`java.lang.Object` @kind object;
  #L486978.  call `call`(v0, v3) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L48697e.  goto L4869a4;
  #L486980.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L486982.  v3:= new `rx.exceptions.CompositeException`;
  #L486986.  v4:= 2I;
  #L486988.  v4:= new `java.lang.Throwable`[v4];
  #L48698c.  v4[v2]:= v6 @kind object;
  #L486990.  v4[v1]:= v0 @kind object;
  #L486994.  call temp:= `asList`(v4) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48699a.  v6:= temp @kind object;
  #L48699c.  call `<init>`(v3, v6) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4869a2.  v6:= v3 @kind object;
  #L4869a4.  v0:= v5.`rx.Completable$13$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L4869a8.  call `onError`(v0, v6) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4869ae.  v6:= v5.`rx.Completable$13$1.this$0` @type ^`rx.Completable$13` @kind object;
  #L4869b2.  v6:= v6.`rx.Completable$13.val$eager` @type ^`boolean` @kind boolean;
  #L4869b6.  if v6 != 0 then goto L4869c0;
  #L4869ba.  call `dispose`(v5) @signature `Lrx/Completable$13$1;.dispose:()V` @kind virtual;
  #L4869c0.  return @kind void;
  catch `java.lang.Throwable` @[L48696c..L48697e] goto L486980;
}
procedure `void` `onSubscribe`(`rx.Completable$13$1` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/Completable$13$1;.onSubscribe:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4869e0.  v1.`rx.Completable$13$1.d` @type ^`rx.Subscription` := v2 @kind object;
  #L4869e4.  v2:= v1.`rx.Completable$13$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L4869e8.  v0:= new `rx.Completable$13$1$1`;
  #L4869ec.  call `<init>`(v0, v1) @signature `Lrx/Completable$13$1$1;.<init>:(Lrx/Completable$13$1;)V` @kind direct;
  #L4869f2.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4869f8.  v0:= temp @kind object;
  #L4869fa.  call `onSubscribe`(v2, v0) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L486a00.  return @kind void;
}
