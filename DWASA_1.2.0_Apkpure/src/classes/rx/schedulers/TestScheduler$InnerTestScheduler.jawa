record `rx.schedulers.TestScheduler$InnerTestScheduler` @kind class @AccessFlag FINAL extends `rx.Scheduler$Worker` @kind class {
  `rx.subscriptions.BooleanSubscription` `rx.schedulers.TestScheduler$InnerTestScheduler.s` @AccessFlag PRIVATE_FINAL;
  `rx.schedulers.TestScheduler` `rx.schedulers.TestScheduler$InnerTestScheduler.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.schedulers.TestScheduler$InnerTestScheduler` v0 @kind this, `rx.schedulers.TestScheduler` v1 @kind object) @signature `Lrx/schedulers/TestScheduler$InnerTestScheduler;.<init>:(Lrx/schedulers/TestScheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c2964.  v0.`rx.schedulers.TestScheduler$InnerTestScheduler.this$0` @type ^`rx.schedulers.TestScheduler` := v1 @kind object;
  #L4c2968.  call `<init>`(v0) @signature `Lrx/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4c296e.  v1:= new `rx.subscriptions.BooleanSubscription`;
  #L4c2972.  call `<init>`(v1) @signature `Lrx/subscriptions/BooleanSubscription;.<init>:()V` @kind direct;
  #L4c2978.  v0.`rx.schedulers.TestScheduler$InnerTestScheduler.s` @type ^`rx.subscriptions.BooleanSubscription` := v1 @kind object;
  #L4c297c.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.schedulers.TestScheduler$InnerTestScheduler` v1 @kind this) @signature `Lrx/schedulers/TestScheduler$InnerTestScheduler;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2894.  v0:= v1.`rx.schedulers.TestScheduler$InnerTestScheduler.s` @type ^`rx.subscriptions.BooleanSubscription` @kind object;
  #L4c2898.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4c289e.  v0:= temp;
  #L4c28a0.  return v0;
}
procedure `long` `now`(`rx.schedulers.TestScheduler$InnerTestScheduler` v2 @kind this) @signature `Lrx/schedulers/TestScheduler$InnerTestScheduler;.now:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c28b4.  v0:= v2.`rx.schedulers.TestScheduler$InnerTestScheduler.this$0` @type ^`rx.schedulers.TestScheduler` @kind object;
  #L4c28b8.  call temp:= `now`(v0) @signature `Lrx/schedulers/TestScheduler;.now:()J` @kind virtual;
  #L4c28be.  v0:= temp @kind wide;
  #L4c28c0.  return v0 @kind wide;
}
procedure `rx.Subscription` `schedule`(`rx.schedulers.TestScheduler$InnerTestScheduler` v3 @kind this, `rx.functions.Action0` v4 @kind object) @signature `Lrx/schedulers/TestScheduler$InnerTestScheduler;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c28d4.  v0:= new `rx.schedulers.TestScheduler$TimedAction`;
  #L4c28d8.  v1:= 0L;
  #L4c28dc.  call `<init>`(v0, v3, v1, v4) @signature `Lrx/schedulers/TestScheduler$TimedAction;.<init>:(Lrx/Scheduler$Worker;JLrx/functions/Action0;)V` @kind direct;
  #L4c28e2.  v4:= v3.`rx.schedulers.TestScheduler$InnerTestScheduler.this$0` @type ^`rx.schedulers.TestScheduler` @kind object;
  #L4c28e6.  v4:= v4.`rx.schedulers.TestScheduler.queue` @type ^`java.util.Queue` @kind object;
  #L4c28ea.  call temp:= `add`(v4, v0) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c28f0.  v4:= new `rx.schedulers.TestScheduler$InnerTestScheduler$2`;
  #L4c28f4.  call `<init>`(v4, v3, v0) @signature `Lrx/schedulers/TestScheduler$InnerTestScheduler$2;.<init>:(Lrx/schedulers/TestScheduler$InnerTestScheduler;Lrx/schedulers/TestScheduler$TimedAction;)V` @kind direct;
  #L4c28fa.  call temp:= `create`(v4) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4c2900.  v4:= temp @kind object;
  #L4c2902.  return v4 @kind object;
}
procedure `rx.Subscription` `schedule`(`rx.schedulers.TestScheduler$InnerTestScheduler` v3 @kind this, `rx.functions.Action0` v4 @kind object, `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object) @signature `Lrx/schedulers/TestScheduler$InnerTestScheduler;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c2914.  v0:= new `rx.schedulers.TestScheduler$TimedAction`;
  #L4c2918.  v1:= v3.`rx.schedulers.TestScheduler$InnerTestScheduler.this$0` @type ^`rx.schedulers.TestScheduler` @kind object;
  #L4c291c.  v1:= v1.`rx.schedulers.TestScheduler.time` @type ^`long` @kind wide;
  #L4c2920.  call temp:= `toNanos`(v7, v5) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4c2926.  v5:= temp @kind wide;
  #L4c2928.  v1:= v1 + v5 @kind long;
  #L4c292a.  call `<init>`(v0, v3, v1, v4) @signature `Lrx/schedulers/TestScheduler$TimedAction;.<init>:(Lrx/Scheduler$Worker;JLrx/functions/Action0;)V` @kind direct;
  #L4c2930.  v4:= v3.`rx.schedulers.TestScheduler$InnerTestScheduler.this$0` @type ^`rx.schedulers.TestScheduler` @kind object;
  #L4c2934.  v4:= v4.`rx.schedulers.TestScheduler.queue` @type ^`java.util.Queue` @kind object;
  #L4c2938.  call temp:= `add`(v4, v0) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c293e.  v4:= new `rx.schedulers.TestScheduler$InnerTestScheduler$1`;
  #L4c2942.  call `<init>`(v4, v3, v0) @signature `Lrx/schedulers/TestScheduler$InnerTestScheduler$1;.<init>:(Lrx/schedulers/TestScheduler$InnerTestScheduler;Lrx/schedulers/TestScheduler$TimedAction;)V` @kind direct;
  #L4c2948.  call temp:= `create`(v4) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4c294e.  v4:= temp @kind object;
  #L4c2950.  return v4 @kind object;
}
procedure `void` `unsubscribe`(`rx.schedulers.TestScheduler$InnerTestScheduler` v1 @kind this) @signature `Lrx/schedulers/TestScheduler$InnerTestScheduler;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2990.  v0:= v1.`rx.schedulers.TestScheduler$InnerTestScheduler.s` @type ^`rx.subscriptions.BooleanSubscription` @kind object;
  #L4c2994.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.unsubscribe:()V` @kind virtual;
  #L4c299a.  return @kind void;
}
