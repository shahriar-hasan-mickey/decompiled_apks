record `rx.schedulers.TestScheduler$TimedAction` @kind class @AccessFlag FINAL {
  `rx.functions.Action0` `rx.schedulers.TestScheduler$TimedAction.action` @AccessFlag FINAL;
  `long` `rx.schedulers.TestScheduler$TimedAction.count` @AccessFlag PRIVATE_FINAL;
  `rx.Scheduler$Worker` `rx.schedulers.TestScheduler$TimedAction.scheduler` @AccessFlag FINAL;
  `long` `rx.schedulers.TestScheduler$TimedAction.time` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.schedulers.TestScheduler$TimedAction` v4 @kind this, `rx.Scheduler$Worker` v5 @kind object, `long` v6 , `rx.functions.Action0` v8 @kind object) @signature `Lrx/schedulers/TestScheduler$TimedAction;.<init>:(Lrx/Scheduler$Worker;JLrx/functions/Action0;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c2a0c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c2a12.  v0:= `@@rx.schedulers.TestScheduler.counter` @type ^`long` @kind wide;
  #L4c2a16.  v2:= 1L;
  #L4c2a1a.  v2:= v2 + v0 @kind long;
  #L4c2a1c.  `@@rx.schedulers.TestScheduler.counter` @type ^`long` := v2 @kind wide;
  #L4c2a20.  v4.`rx.schedulers.TestScheduler$TimedAction.count` @type ^`long` := v0 @kind wide;
  #L4c2a24.  v4.`rx.schedulers.TestScheduler$TimedAction.time` @type ^`long` := v6 @kind wide;
  #L4c2a28.  v4.`rx.schedulers.TestScheduler$TimedAction.action` @type ^`rx.functions.Action0` := v8 @kind object;
  #L4c2a2c.  v4.`rx.schedulers.TestScheduler$TimedAction.scheduler` @type ^`rx.Scheduler$Worker` := v5 @kind object;
  #L4c2a30.  return @kind void;
}
procedure `long` `access$000`(`rx.schedulers.TestScheduler$TimedAction` v2 @kind object) @signature `Lrx/schedulers/TestScheduler$TimedAction;.access$000:(Lrx/schedulers/TestScheduler$TimedAction;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L4c29f4.  v0:= v2.`rx.schedulers.TestScheduler$TimedAction.count` @type ^`long` @kind wide;
  #L4c29f8.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`rx.schedulers.TestScheduler$TimedAction` v3 @kind this) @signature `Lrx/schedulers/TestScheduler$TimedAction;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c29ac.  v0:= 2I;
  #L4c29ae.  v0:= new `java.lang.Object`[v0];
  #L4c29b2.  v1:= v3.`rx.schedulers.TestScheduler$TimedAction.time` @type ^`long` @kind wide;
  #L4c29b6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4c29bc.  v1:= temp @kind object;
  #L4c29be.  v2:= 0I;
  #L4c29c0.  v0[v2]:= v1 @kind object;
  #L4c29c4.  v1:= v3.`rx.schedulers.TestScheduler$TimedAction.action` @type ^`rx.functions.Action0` @kind object;
  #L4c29c8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c29ce.  v1:= temp @kind object;
  #L4c29d0.  v2:= 1I;
  #L4c29d2.  v0[v2]:= v1 @kind object;
  #L4c29d6.  v1:= "TimedAction(time = %d, action = %s)" @kind object;
  #L4c29da.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4c29e0.  v0:= temp @kind object;
  #L4c29e2.  return v0 @kind object;
}
