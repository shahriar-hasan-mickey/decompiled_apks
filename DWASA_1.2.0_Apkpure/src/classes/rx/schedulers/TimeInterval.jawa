record `rx.schedulers.TimeInterval` @kind class @AccessFlag PUBLIC {
  `long` `rx.schedulers.TimeInterval.intervalInMilliseconds` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `rx.schedulers.TimeInterval.value` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.schedulers.TimeInterval` v0 @kind this, `long` v1 , `java.lang.Object` v3 @kind object) @signature `Lrx/schedulers/TimeInterval;.<init>:(JLjava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c2ce8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c2cee.  v0.`rx.schedulers.TimeInterval.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4c2cf2.  v0.`rx.schedulers.TimeInterval.intervalInMilliseconds` @type ^`long` := v1 @kind wide;
  #L4c2cf6.  return @kind void;
}
procedure `boolean` `equals`(`rx.schedulers.TimeInterval` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lrx/schedulers/TimeInterval;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c2ba8.  v0:= 1I;
  #L4c2baa.  if v7 != v8 then goto L4c2bb0;
  #L4c2bae.  return v0;
  #L4c2bb0.  v1:= 0I;
  #L4c2bb2.  if v8 != 0 then goto L4c2bb8;
  #L4c2bb6.  return v1;
  #L4c2bb8.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4c2bbe.  v2:= temp @kind object;
  #L4c2bc0.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4c2bc6.  v3:= temp @kind object;
  #L4c2bc8.  if v2 == v3 then goto L4c2bce;
  #L4c2bcc.  return v1;
  #L4c2bce.  v8:= (`rx.schedulers.TimeInterval`) v8 @kind object;
  #L4c2bd2.  v2:= v7.`rx.schedulers.TimeInterval.intervalInMilliseconds` @type ^`long` @kind wide;
  #L4c2bd6.  v4:= v8.`rx.schedulers.TimeInterval.intervalInMilliseconds` @type ^`long` @kind wide;
  #L4c2bda.  v6:= lcmp(v2, v4);
  #L4c2bde.  if v6 == 0 then goto L4c2be4;
  #L4c2be2.  return v1;
  #L4c2be4.  v2:= v7.`rx.schedulers.TimeInterval.value` @type ^`java.lang.Object` @kind object;
  #L4c2be8.  if v2 != 0 then goto L4c2bf6;
  #L4c2bec.  v8:= v8.`rx.schedulers.TimeInterval.value` @type ^`java.lang.Object` @kind object;
  #L4c2bf0.  if v8 == 0 then goto L4c2c08;
  #L4c2bf4.  return v1;
  #L4c2bf6.  v8:= v8.`rx.schedulers.TimeInterval.value` @type ^`java.lang.Object` @kind object;
  #L4c2bfa.  call temp:= `equals`(v2, v8) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c2c00.  v8:= temp;
  #L4c2c02.  if v8 != 0 then goto L4c2c08;
  #L4c2c06.  return v1;
  #L4c2c08.  return v0;
}
procedure `long` `getIntervalInMilliseconds`(`rx.schedulers.TimeInterval` v2 @kind this) @signature `Lrx/schedulers/TimeInterval;.getIntervalInMilliseconds:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c2cd0.  v0:= v2.`rx.schedulers.TimeInterval.intervalInMilliseconds` @type ^`long` @kind wide;
  #L4c2cd4.  return v0 @kind wide;
}
procedure `java.lang.Object` `getValue`(`rx.schedulers.TimeInterval` v1 @kind this) @signature `Lrx/schedulers/TimeInterval;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2c60.  v0:= v1.`rx.schedulers.TimeInterval.value` @type ^`java.lang.Object` @kind object;
  #L4c2c64.  return v0 @kind object;
}
procedure `int` `hashCode`(`rx.schedulers.TimeInterval` v4 @kind this) @signature `Lrx/schedulers/TimeInterval;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c2c1c.  v0:= v4.`rx.schedulers.TimeInterval.intervalInMilliseconds` @type ^`long` @kind wide;
  #L4c2c20.  v2:= 32I;
  #L4c2c24.  v2:= v0 ^>> v2 @kind long;
  #L4c2c28.  v0:= v0 ^~ v2 @kind long;
  #L4c2c2a.  v1:= (`int`) v0 @kind l2i;
  #L4c2c2c.  v0:= 31I;
  #L4c2c30.  v1:= v1 + v0 @kind int;
  #L4c2c32.  v1:= v1 * 31;
  #L4c2c36.  v0:= v4.`rx.schedulers.TimeInterval.value` @type ^`java.lang.Object` @kind object;
  #L4c2c3a.  if v0 != 0 then goto L4c2c42;
  #L4c2c3e.  v0:= 0I;
  #L4c2c40.  goto L4c2c4a;
  #L4c2c42.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4c2c48.  v0:= temp;
  #L4c2c4a.  v1:= v1 + v0 @kind int;
  #L4c2c4c.  return v1;
}
procedure `java.lang.String` `toString`(`rx.schedulers.TimeInterval` v3 @kind this) @signature `Lrx/schedulers/TimeInterval;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c2c78.  v0:= new `java.lang.StringBuilder`;
  #L4c2c7c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c2c82.  v1:= "TimeInterval [intervalInMilliseconds=" @kind object;
  #L4c2c86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c2c8c.  v1:= v3.`rx.schedulers.TimeInterval.intervalInMilliseconds` @type ^`long` @kind wide;
  #L4c2c90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c2c96.  v1:= ", value=" @kind object;
  #L4c2c9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c2ca0.  v1:= v3.`rx.schedulers.TimeInterval.value` @type ^`java.lang.Object` @kind object;
  #L4c2ca4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c2caa.  v1:= "]" @kind object;
  #L4c2cae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c2cb4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c2cba.  v0:= temp @kind object;
  #L4c2cbc.  return v0 @kind object;
}
