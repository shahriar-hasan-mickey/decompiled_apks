record `rx.schedulers.TestScheduler$CompareActionsByTime` @kind class @AccessFlag FINAL extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`rx.schedulers.TestScheduler$CompareActionsByTime` v0 @kind this) @signature `Lrx/schedulers/TestScheduler$CompareActionsByTime;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c27ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c27f2.  return @kind void;
}
procedure `int` `compare`(`rx.schedulers.TestScheduler$CompareActionsByTime` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/schedulers/TestScheduler$CompareActionsByTime;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4c273c.  v1:= (`rx.schedulers.TestScheduler$TimedAction`) v1 @kind object;
  #L4c2740.  v2:= (`rx.schedulers.TestScheduler$TimedAction`) v2 @kind object;
  #L4c2744.  call temp:= `compare`(v0, v1, v2) @signature `Lrx/schedulers/TestScheduler$CompareActionsByTime;.compare:(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I` @kind virtual;
  #L4c274a.  v1:= temp;
  #L4c274c.  return v1;
}
procedure `int` `compare`(`rx.schedulers.TestScheduler$CompareActionsByTime` v8 @kind this, `rx.schedulers.TestScheduler$TimedAction` v9 @kind object, `rx.schedulers.TestScheduler$TimedAction` v10 @kind object) @signature `Lrx/schedulers/TestScheduler$CompareActionsByTime;.compare:(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c2760.  v0:= v9.`rx.schedulers.TestScheduler$TimedAction.time` @type ^`long` @kind wide;
  #L4c2764.  v2:= v10.`rx.schedulers.TestScheduler$TimedAction.time` @type ^`long` @kind wide;
  #L4c2768.  v4:= 1I;
  #L4c276a.  v5:= 0I;
  #L4c276c.  v6:= -1I;
  #L4c276e.  v7:= lcmp(v0, v2);
  #L4c2772.  if v7 != 0 then goto L4c27b0;
  #L4c2776.  call temp:= `access$000`(v9) @signature `Lrx/schedulers/TestScheduler$TimedAction;.access$000:(Lrx/schedulers/TestScheduler$TimedAction;)J` @kind static;
  #L4c277c.  v0:= temp @kind wide;
  #L4c277e.  call temp:= `access$000`(v10) @signature `Lrx/schedulers/TestScheduler$TimedAction;.access$000:(Lrx/schedulers/TestScheduler$TimedAction;)J` @kind static;
  #L4c2784.  v2:= temp @kind wide;
  #L4c2786.  v7:= lcmp(v0, v2);
  #L4c278a.  if v7 >= 0 then goto L4c2792;
  #L4c278e.  v4:= -1I;
  #L4c2790.  goto L4c27ae;
  #L4c2792.  call temp:= `access$000`(v9) @signature `Lrx/schedulers/TestScheduler$TimedAction;.access$000:(Lrx/schedulers/TestScheduler$TimedAction;)J` @kind static;
  #L4c2798.  v0:= temp @kind wide;
  #L4c279a.  call temp:= `access$000`(v10) @signature `Lrx/schedulers/TestScheduler$TimedAction;.access$000:(Lrx/schedulers/TestScheduler$TimedAction;)J` @kind static;
  #L4c27a0.  v9:= temp @kind wide;
  #L4c27a2.  v2:= lcmp(v0, v9);
  #L4c27a6.  if v2 <= 0 then goto L4c27ac;
  #L4c27aa.  goto L4c27ae;
  #L4c27ac.  v4:= 0I;
  #L4c27ae.  return v4;
  #L4c27b0.  v0:= v9.`rx.schedulers.TestScheduler$TimedAction.time` @type ^`long` @kind wide;
  #L4c27b4.  v2:= v10.`rx.schedulers.TestScheduler$TimedAction.time` @type ^`long` @kind wide;
  #L4c27b8.  v7:= lcmp(v0, v2);
  #L4c27bc.  if v7 >= 0 then goto L4c27c4;
  #L4c27c0.  v4:= -1I;
  #L4c27c2.  goto L4c27d8;
  #L4c27c4.  v0:= v9.`rx.schedulers.TestScheduler$TimedAction.time` @type ^`long` @kind wide;
  #L4c27c8.  v9:= v10.`rx.schedulers.TestScheduler$TimedAction.time` @type ^`long` @kind wide;
  #L4c27cc.  v2:= lcmp(v0, v9);
  #L4c27d0.  if v2 <= 0 then goto L4c27d6;
  #L4c27d4.  goto L4c27d8;
  #L4c27d6.  v4:= 0I;
  #L4c27d8.  return v4;
}
