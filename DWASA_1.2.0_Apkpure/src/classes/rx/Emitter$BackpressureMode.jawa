record `rx.Emitter$BackpressureMode` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `rx.Emitter$BackpressureMode`[] `@@rx.Emitter$BackpressureMode.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `rx.Emitter$BackpressureMode` `@@rx.Emitter$BackpressureMode.BUFFER` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `rx.Emitter$BackpressureMode` `@@rx.Emitter$BackpressureMode.DROP` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `rx.Emitter$BackpressureMode` `@@rx.Emitter$BackpressureMode.ERROR` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `rx.Emitter$BackpressureMode` `@@rx.Emitter$BackpressureMode.LATEST` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `rx.Emitter$BackpressureMode` `@@rx.Emitter$BackpressureMode.NONE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lrx/Emitter$BackpressureMode;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L489b64.  v0:= new `rx.Emitter$BackpressureMode`;
  #L489b68.  v1:= 0I;
  #L489b6a.  v2:= "NONE" @kind object;
  #L489b6e.  call `<init>`(v0, v2, v1) @signature `Lrx/Emitter$BackpressureMode;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L489b74.  `@@rx.Emitter$BackpressureMode.NONE` @type ^`rx.Emitter$BackpressureMode` := v0 @kind object;
  #L489b78.  v0:= new `rx.Emitter$BackpressureMode`;
  #L489b7c.  v2:= 1I;
  #L489b7e.  v3:= "ERROR" @kind object;
  #L489b82.  call `<init>`(v0, v3, v2) @signature `Lrx/Emitter$BackpressureMode;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L489b88.  `@@rx.Emitter$BackpressureMode.ERROR` @type ^`rx.Emitter$BackpressureMode` := v0 @kind object;
  #L489b8c.  v0:= new `rx.Emitter$BackpressureMode`;
  #L489b90.  v3:= 2I;
  #L489b92.  v4:= "BUFFER" @kind object;
  #L489b96.  call `<init>`(v0, v4, v3) @signature `Lrx/Emitter$BackpressureMode;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L489b9c.  `@@rx.Emitter$BackpressureMode.BUFFER` @type ^`rx.Emitter$BackpressureMode` := v0 @kind object;
  #L489ba0.  v0:= new `rx.Emitter$BackpressureMode`;
  #L489ba4.  v4:= 3I;
  #L489ba6.  v5:= "DROP" @kind object;
  #L489baa.  call `<init>`(v0, v5, v4) @signature `Lrx/Emitter$BackpressureMode;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L489bb0.  `@@rx.Emitter$BackpressureMode.DROP` @type ^`rx.Emitter$BackpressureMode` := v0 @kind object;
  #L489bb4.  v0:= new `rx.Emitter$BackpressureMode`;
  #L489bb8.  v5:= 4I;
  #L489bba.  v6:= "LATEST" @kind object;
  #L489bbe.  call `<init>`(v0, v6, v5) @signature `Lrx/Emitter$BackpressureMode;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L489bc4.  `@@rx.Emitter$BackpressureMode.LATEST` @type ^`rx.Emitter$BackpressureMode` := v0 @kind object;
  #L489bc8.  v0:= 5I;
  #L489bca.  v0:= new `rx.Emitter$BackpressureMode`[v0];
  #L489bce.  v6:= `@@rx.Emitter$BackpressureMode.NONE` @type ^`rx.Emitter$BackpressureMode` @kind object;
  #L489bd2.  v0[v1]:= v6 @kind object;
  #L489bd6.  v1:= `@@rx.Emitter$BackpressureMode.ERROR` @type ^`rx.Emitter$BackpressureMode` @kind object;
  #L489bda.  v0[v2]:= v1 @kind object;
  #L489bde.  v1:= `@@rx.Emitter$BackpressureMode.BUFFER` @type ^`rx.Emitter$BackpressureMode` @kind object;
  #L489be2.  v0[v3]:= v1 @kind object;
  #L489be6.  v1:= `@@rx.Emitter$BackpressureMode.DROP` @type ^`rx.Emitter$BackpressureMode` @kind object;
  #L489bea.  v0[v4]:= v1 @kind object;
  #L489bee.  v1:= `@@rx.Emitter$BackpressureMode.LATEST` @type ^`rx.Emitter$BackpressureMode` @kind object;
  #L489bf2.  v0[v5]:= v1 @kind object;
  #L489bf6.  `@@rx.Emitter$BackpressureMode.$VALUES` @type ^`rx.Emitter$BackpressureMode`[] := v0 @kind object;
  #L489bfa.  return @kind void;
}
procedure `void` `<init>`(`rx.Emitter$BackpressureMode` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lrx/Emitter$BackpressureMode;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L489c0c.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L489c12.  return @kind void;
}
procedure `rx.Emitter$BackpressureMode` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lrx/Emitter$BackpressureMode;.valueOf:(Ljava/lang/String;)Lrx/Emitter$BackpressureMode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489b1c.  v0:= constclass @type ^`rx.Emitter$BackpressureMode` @kind object;
  #L489b20.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L489b26.  v1:= temp @kind object;
  #L489b28.  v1:= (`rx.Emitter$BackpressureMode`) v1 @kind object;
  #L489b2c.  return v1 @kind object;
}
procedure `rx.Emitter$BackpressureMode`[] `values`() @signature `Lrx/Emitter$BackpressureMode;.values:()[Lrx/Emitter$BackpressureMode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489b40.  v0:= `@@rx.Emitter$BackpressureMode.$VALUES` @type ^`rx.Emitter$BackpressureMode`[] @kind object;
  #L489b44.  call temp:= `clone`(v0) @signature `[Lrx/Emitter$BackpressureMode;.clone:()Ljava/lang/Object;` @kind virtual;
  #L489b4a.  v0:= temp @kind object;
  #L489b4c.  v0:= (`rx.Emitter$BackpressureMode`[]) v0 @kind object;
  #L489b50.  return v0 @kind object;
}
