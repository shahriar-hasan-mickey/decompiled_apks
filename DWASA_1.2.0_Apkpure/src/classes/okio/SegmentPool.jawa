record `okio.SegmentPool` @kind class @AccessFlag FINAL {
}
global `long` `@@okio.SegmentPool.MAX_SIZE` @AccessFlag STATIC_FINAL;
global `long` `@@okio.SegmentPool.byteCount` @AccessFlag STATIC;
global `okio.Segment` `@@okio.SegmentPool.next` @AccessFlag STATIC;
procedure `void` `<init>`(`okio.SegmentPool` v0 @kind this) @signature `Lokio/SegmentPool;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L47fd9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47fda2.  return @kind void;
}
procedure `void` `recycle`(`okio.Segment` v8 @kind object) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L47fdb4.  v0:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47fdb8.  if v0 != 0 then goto L47fe1a;
  #L47fdbc.  v0:= v8.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L47fdc0.  if v0 != 0 then goto L47fe1a;
  #L47fdc4.  v0:= v8.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L47fdc8.  if v0 == 0 then goto L47fdce;
  #L47fdcc.  return @kind void;
  #L47fdce.  v0:= constclass @type ^`okio.SegmentPool` @kind object;
  #L47fdd2.  @monitorenter v0
  #L47fdd4.  v1:= `@@okio.SegmentPool.byteCount` @type ^`long` @kind wide;
  #L47fdd8.  v3:= 8192L;
  #L47fddc.  v1:= v1 + v3 @kind long;
  #L47fdde.  v5:= 65536L;
  #L47fde4.  v7:= lcmp(v1, v5);
  #L47fde8.  if v7 <= 0 then goto L47fdf0;
  #L47fdec.  @monitorexit v0
  #L47fdee.  return @kind void;
  #L47fdf0.  v1:= `@@okio.SegmentPool.byteCount` @type ^`long` @kind wide;
  #L47fdf4.  v1:= v1 + v3 @kind long;
  #L47fdf6.  `@@okio.SegmentPool.byteCount` @type ^`long` := v1 @kind wide;
  #L47fdfa.  v1:= `@@okio.SegmentPool.next` @type ^`okio.Segment` @kind object;
  #L47fdfe.  v8.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L47fe02.  v1:= 0I;
  #L47fe04.  v8.`okio.Segment.limit` @type ^`int` := v1;
  #L47fe08.  v8.`okio.Segment.pos` @type ^`int` := v1;
  #L47fe0c.  `@@okio.SegmentPool.next` @type ^`okio.Segment` := v8 @kind object;
  #L47fe10.  @monitorexit v0
  #L47fe12.  return @kind void;
  #L47fe14.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47fe16.  @monitorexit v0
  #L47fe18.  throw v8;
  #L47fe1a.  v8:= new `java.lang.IllegalArgumentException`;
  #L47fe1e.  call `<init>`(v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L47fe24.  throw v8;
  catch `java.lang.Throwable` @[L47fdd4..L47fe18] goto L47fe14;
}
procedure `okio.Segment` `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47fd30.  v0:= constclass @type ^`okio.SegmentPool` @kind object;
  #L47fd34.  @monitorenter v0
  #L47fd36.  v1:= `@@okio.SegmentPool.next` @type ^`okio.Segment` @kind object;
  #L47fd3a.  if v1 == 0 then goto L47fd62;
  #L47fd3e.  v1:= `@@okio.SegmentPool.next` @type ^`okio.Segment` @kind object;
  #L47fd42.  v2:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47fd46.  `@@okio.SegmentPool.next` @type ^`okio.Segment` := v2 @kind object;
  #L47fd4a.  v2:= 0I;
  #L47fd4c.  v1.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L47fd50.  v2:= `@@okio.SegmentPool.byteCount` @type ^`long` @kind wide;
  #L47fd54.  v4:= 8192L;
  #L47fd58.  v2:= v2 - v4 @kind long;
  #L47fd5a.  `@@okio.SegmentPool.byteCount` @type ^`long` := v2 @kind wide;
  #L47fd5e.  @monitorexit v0
  #L47fd60.  return v1 @kind object;
  #L47fd62.  @monitorexit v0
  #L47fd64.  v0:= new `okio.Segment`;
  #L47fd68.  call `<init>`(v0) @signature `Lokio/Segment;.<init>:()V` @kind direct;
  #L47fd6e.  return v0 @kind object;
  #L47fd70.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47fd72.  @monitorexit v0
  #L47fd74.  throw v1;
  catch `java.lang.Throwable` @[L47fd36..L47fd64] goto L47fd70;
  catch `java.lang.Throwable` @[L47fd72..L47fd74] goto L47fd70;
}
