record `okio.HashingSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSink` @kind class {
  `javax.crypto.Mac` `okio.HashingSink.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSink.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSink` v0 @kind this, `okio.Sink` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L47d08c.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L47d092.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L47d098.  v1:= temp @kind object;
  #L47d09a.  v0.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L47d09e.  v1:= 0I;
  #L47d0a0.  v0.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L47d0a4.  return @kind void;
  #L47d0a6.  v1:= new `java.lang.AssertionError`;
  #L47d0aa.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L47d0b0.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L47d092..L47d0a4] goto L47d0a6;
}
procedure `void` `<init>`(`okio.HashingSink` v1 @kind this, `okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L47d0d4.  call `<init>`(v1, v2) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L47d0da.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L47d0e0.  v2:= temp @kind object;
  #L47d0e2.  v1.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` := v2 @kind object;
  #L47d0e6.  v2:= v1.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L47d0ea.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L47d0ee.  call temp:= `toByteArray`(v3) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L47d0f4.  v3:= temp @kind object;
  #L47d0f6.  call `<init>`(v0, v3, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L47d0fc.  call `init`(v2, v0) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L47d102.  v2:= 0I;
  #L47d104.  v1.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v2 @kind object;
  #L47d108.  return @kind void;
  #L47d10a.  v2:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L47d10c.  v3:= new `java.lang.IllegalArgumentException`;
  #L47d110.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L47d116.  throw v3;
  #L47d118.  v2:= new `java.lang.AssertionError`;
  #L47d11c.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L47d122.  throw v2;
  catch `java.security.NoSuchAlgorithmException` @[L47d0da..L47d108] goto L47d118;
  catch `java.security.InvalidKeyException` @[L47d0da..L47d108] goto L47d10a;
}
procedure `okio.HashingSink` `hmacSha1`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha1:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47cfac.  v0:= new `okio.HashingSink`;
  #L47cfb0.  v1:= "HmacSHA1" @kind object;
  #L47cfb4.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L47cfba.  return v0 @kind object;
}
procedure `okio.HashingSink` `hmacSha256`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha256:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47cfcc.  v0:= new `okio.HashingSink`;
  #L47cfd0.  v1:= "HmacSHA256" @kind object;
  #L47cfd4.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L47cfda.  return v0 @kind object;
}
procedure `okio.HashingSink` `hmacSha512`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha512:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47cfec.  v0:= new `okio.HashingSink`;
  #L47cff0.  v1:= "HmacSHA512" @kind object;
  #L47cff4.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L47cffa.  return v0 @kind object;
}
procedure `okio.HashingSink` `md5`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.md5:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d00c.  v0:= new `okio.HashingSink`;
  #L47d010.  v1:= "MD5" @kind object;
  #L47d014.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L47d01a.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha1`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha1:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d02c.  v0:= new `okio.HashingSink`;
  #L47d030.  v1:= "SHA-1" @kind object;
  #L47d034.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L47d03a.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha256`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha256:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d04c.  v0:= new `okio.HashingSink`;
  #L47d050.  v1:= "SHA-256" @kind object;
  #L47d054.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L47d05a.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha512`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha512:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d06c.  v0:= new `okio.HashingSink`;
  #L47d070.  v1:= "SHA-512" @kind object;
  #L47d074.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L47d07a.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSink` v1 @kind this) @signature `Lokio/HashingSink;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47cf74.  v0:= v1.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L47cf78.  if v0 == 0 then goto L47cf86;
  #L47cf7c.  call temp:= `digest`(v0) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L47cf82.  v0:= temp @kind object;
  #L47cf84.  goto L47cf92;
  #L47cf86.  v0:= v1.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L47cf8a.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L47cf90.  v0:= temp @kind object;
  #L47cf92.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L47cf98.  v0:= temp @kind object;
  #L47cf9a.  return v0 @kind object;
}
procedure `void` `write`(`okio.HashingSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/HashingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47d144.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47d148.  v2:= 0L;
  #L47d14c.  v4:= v9 @kind wide;
  #L47d14e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L47d154.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47d158.  v1:= 0L;
  #L47d15c.  v3:= lcmp(v1, v9);
  #L47d160.  if v3 >= 0 then goto L47d1b2;
  #L47d164.  v3:= v9 - v1 @kind long;
  #L47d168.  v5:= v0.`okio.Segment.limit` @type ^`int`;
  #L47d16c.  v6:= v0.`okio.Segment.pos` @type ^`int`;
  #L47d170.  v5:= v5 - v6 @kind int;
  #L47d172.  v5:= (`long`) v5 @kind i2l;
  #L47d174.  call temp:= `min`(v3, v5) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L47d17a.  v3:= temp @kind wide;
  #L47d17c.  v4:= (`int`) v3 @kind l2i;
  #L47d17e.  v3:= v7.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L47d182.  if v3 == 0 then goto L47d196;
  #L47d186.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47d18a.  v6:= v0.`okio.Segment.pos` @type ^`int`;
  #L47d18e.  call `update`(v3, v5, v6, v4) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L47d194.  goto L47d1a8;
  #L47d196.  v3:= v7.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L47d19a.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47d19e.  v6:= v0.`okio.Segment.pos` @type ^`int`;
  #L47d1a2.  call `update`(v3, v5, v6, v4) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L47d1a8.  v3:= (`long`) v4 @kind i2l;
  #L47d1aa.  v1:= v1 + v3 @kind long;
  #L47d1ac.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47d1b0.  goto L47d15c;
  #L47d1b2.  call `write`(v7, v8, v9) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L47d1b8.  return @kind void;
}
