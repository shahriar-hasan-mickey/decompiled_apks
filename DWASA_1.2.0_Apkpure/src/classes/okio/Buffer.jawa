record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface {
  `okio.Segment` `okio.Buffer.head` @AccessFlag ;
  `long` `okio.Buffer.size` @AccessFlag ;
}
global `byte`[] `@@okio.Buffer.DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okio.Buffer.REPLACEMENT_CHARACTER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Buffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L47ae60.  v0:= 16I;
  #L47ae64.  v0:= new `byte`[v0];
  #L47ae68.  goto L47ae74;
  #L47ae6e.  `@@okio.Buffer.DIGITS` @type ^`byte`[] := v0 @kind object;
  #L47ae72.  return @kind void;
  #L47ae74.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L47ae8b.  goto L47ae6e;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47ae9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47aea2.  return @kind void;
}
procedure `okio.ByteString` `digest`(`okio.Buffer` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47a9b8.  call temp:= `getInstance`(v6) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L47a9be.  v6:= temp @kind object;
  #L47a9c0.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47a9c4.  if v0 == 0 then goto L47aa1a;
  #L47a9c8.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47a9cc.  v0:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47a9d0.  v1:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47a9d4.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L47a9d8.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47a9dc.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L47a9e0.  v3:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47a9e4.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L47a9e8.  v2:= v2 - v3 @kind int;
  #L47a9ea.  call `update`(v6, v0, v1, v2) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L47a9f0.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47a9f4.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47a9f8.  v1:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47a9fc.  if v0 == v1 then goto L47aa1a;
  #L47aa00.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47aa04.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L47aa08.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L47aa0c.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L47aa10.  v3:= v3 - v4 @kind int;
  #L47aa12.  call `update`(v6, v1, v2, v3) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L47aa18.  goto L47a9f4;
  #L47aa1a.  call temp:= `digest`(v6) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L47aa20.  v6:= temp @kind object;
  #L47aa22.  call temp:= `of`(v6) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L47aa28.  v6:= temp @kind object;
  #L47aa2a.  return v6 @kind object;
  #L47aa2c.  v6:= new `java.lang.AssertionError`;
  #L47aa30.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L47aa36.  goto L47aa3a;
  #L47aa38.  throw v6;
  #L47aa3a.  goto L47aa38;
  catch `java.security.NoSuchAlgorithmException` @[L47a9b8..L47aa2a] goto L47aa2c;
}
procedure `okio.ByteString` `hmac`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object, `okio.ByteString` v6 @kind object) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47aa5c.  call temp:= `getInstance`(v5) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L47aa62.  v0:= temp @kind object;
  #L47aa64.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L47aa68.  call temp:= `toByteArray`(v6) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L47aa6e.  v6:= temp @kind object;
  #L47aa70.  call `<init>`(v1, v6, v5) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L47aa76.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L47aa7c.  v5:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47aa80.  if v5 == 0 then goto L47aad6;
  #L47aa84.  v5:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47aa88.  v5:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47aa8c.  v6:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47aa90.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L47aa94.  v1:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47aa98.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L47aa9c.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47aaa0.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L47aaa4.  v1:= v1 - v2 @kind int;
  #L47aaa6.  call `update`(v0, v5, v6, v1) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L47aaac.  v5:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47aab0.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47aab4.  v6:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47aab8.  if v5 == v6 then goto L47aad6;
  #L47aabc.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47aac0.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L47aac4.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L47aac8.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L47aacc.  v2:= v2 - v3 @kind int;
  #L47aace.  call `update`(v0, v6, v1, v2) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L47aad4.  goto L47aab0;
  #L47aad6.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L47aadc.  v5:= temp @kind object;
  #L47aade.  call temp:= `of`(v5) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L47aae4.  v5:= temp @kind object;
  #L47aae6.  return v5 @kind object;
  #L47aae8.  v5:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L47aaea.  v6:= new `java.lang.IllegalArgumentException`;
  #L47aaee.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L47aaf4.  throw v6;
  #L47aaf6.  v5:= new `java.lang.AssertionError`;
  #L47aafa.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L47ab00.  goto L47ab04;
  #L47ab02.  throw v5;
  #L47ab04.  goto L47ab02;
  catch `java.security.NoSuchAlgorithmException` @[L47aa5c..L47aae6] goto L47aaf6;
  catch `java.security.InvalidKeyException` @[L47aa5c..L47aae6] goto L47aae8;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v5 @kind this, `okio.Segment` v6 @kind object, `int` v7 , `okio.ByteString` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L478274.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L478278.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47827c.  if v9 >= v10 then goto L4782ba;
  #L478280.  if v7 != v0 then goto L47829c;
  #L478284.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L478288.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47828c.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L478290.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L478294.  v4:= v1;
  #L478296.  v1:= v7 @kind object;
  #L478298.  v7:= v0;
  #L47829a.  v0:= v4;
  #L47829c.  v2:= v1[v7] @kind byte;
  #L4782a0.  call temp:= `getByte`(v8, v9) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L4782a6.  v3:= temp;
  #L4782a8.  if v2 == v3 then goto L4782b0;
  #L4782ac.  v6:= 0I;
  #L4782ae.  return v6;
  #L4782b0.  v7:= v7 + 1;
  #L4782b4.  v9:= v9 + 1;
  #L4782b8.  goto L47827c;
  #L4782ba.  v6:= 1I;
  #L4782bc.  return v6;
}
procedure `void` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object, `long` v6 , `boolean` v8 ) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47af18.  if v5 == 0 then goto L47af90;
  #L47af1c.  v0:= 0L;
  #L47af20.  v2:= lcmp(v6, v0);
  #L47af24.  if v2 > 0 then goto L47af30;
  #L47af28.  if v8 == 0 then goto L47af2e;
  #L47af2c.  goto L47af30;
  #L47af2e.  return @kind void;
  #L47af30.  v0:= 1I;
  #L47af32.  call temp:= `writableSegment`(v4, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L47af38.  v0:= temp @kind object;
  #L47af3a.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L47af3e.  v1:= v1 - 8192;
  #L47af42.  v1:= (`long`) v1 @kind i2l;
  #L47af44.  call temp:= `min`(v6, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L47af4a.  v1:= temp @kind wide;
  #L47af4c.  v2:= (`int`) v1 @kind l2i;
  #L47af4e.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47af52.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L47af56.  call temp:= `read`(v5, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L47af5c.  v1:= temp;
  #L47af5e.  v2:= -1I;
  #L47af60.  if v1 != v2 then goto L47af76;
  #L47af64.  if v8 == 0 then goto L47af6a;
  #L47af68.  return @kind void;
  #L47af6a.  v5:= new `java.io.EOFException`;
  #L47af6e.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L47af74.  throw v5;
  #L47af76.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L47af7a.  v2:= v2 + v1 @kind int;
  #L47af7c.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L47af80.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47af84.  v0:= (`long`) v1 @kind i2l;
  #L47af86.  v2:= v2 + v0 @kind long;
  #L47af88.  v4.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L47af8c.  v6:= v6 - v0 @kind long;
  #L47af8e.  goto L47af1c;
  #L47af90.  v5:= new `java.lang.IllegalArgumentException`;
  #L47af94.  v6:= "in == null" @kind object;
  #L47af98.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47af9e.  goto L47afa2;
  #L47afa0.  throw v5;
  #L47afa2.  goto L47afa0;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L4798b0.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47aeb4.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47aeb8.  call `skip`(v2, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L47aebe.  return @kind void;
  #L47aec0.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L47aec2.  v1:= new `java.lang.AssertionError`;
  #L47aec6.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L47aecc.  throw v1;
  catch `java.io.EOFException` @[L47aeb4..L47aebe] goto L47aec0;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L478954.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L47895a.  v0:= temp @kind object;
  #L47895c.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4798c4.  v0:= new `okio.Buffer`;
  #L4798c8.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L4798ce.  v1:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4798d2.  v3:= 0L;
  #L4798d6.  v5:= lcmp(v1, v3);
  #L4798da.  if v5 != 0 then goto L4798e0;
  #L4798de.  return v0 @kind object;
  #L4798e0.  v1:= new `okio.Segment`;
  #L4798e4.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L4798e8.  call `<init>`(v1, v2) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @kind direct;
  #L4798ee.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L4798f2.  v1:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L4798f6.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L4798fa.  v1.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L4798fe.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L479902.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L479906.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47990a.  if v1 == v2 then goto L479928;
  #L47990e.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L479912.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L479916.  v3:= new `okio.Segment`;
  #L47991a.  call `<init>`(v3, v1) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @kind direct;
  #L479920.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L479926.  goto L479902;
  #L479928.  v1:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47992c.  v0.`okio.Buffer.size` @type ^`long` := v1 @kind wide;
  #L479930.  return v0 @kind object;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L47aef0.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L478dd4.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478dd8.  v2:= 0L;
  #L478ddc.  v4:= lcmp(v0, v2);
  #L478de0.  if v4 != 0 then goto L478de6;
  #L478de4.  return v2 @kind wide;
  #L478de6.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478dea.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L478dee.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L478df2.  v4:= 8192I;
  #L478df6.  if v3 >= v4 then goto L478e10;
  #L478dfa.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L478dfe.  if v3 == 0 then goto L478e10;
  #L478e02.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L478e06.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L478e0a.  v3:= v3 - v2 @kind int;
  #L478e0c.  v2:= (`long`) v3 @kind i2l;
  #L478e0e.  v0:= v0 - v2 @kind long;
  #L478e10.  return v0 @kind wide;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L479944.  v4:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479948.  v2:= 0L;
  #L47994c.  v0:= v6 @kind object;
  #L47994e.  v1:= v7 @kind object;
  #L479950.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L479956.  v7:= temp @kind object;
  #L479958.  return v7 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object, `long` v8 , `long` v10 ) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47996c.  if v7 == 0 then goto L4799f4;
  #L479970.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479974.  v2:= v8 @kind wide;
  #L479976.  v4:= v10 @kind wide;
  #L479978.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L47997e.  v0:= 0L;
  #L479982.  v2:= lcmp(v10, v0);
  #L479986.  if v2 != 0 then goto L47998c;
  #L47998a.  return v6 @kind object;
  #L47998c.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L479990.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L479994.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L479998.  v3:= v3 - v4 @kind int;
  #L47999a.  v3:= (`long`) v3 @kind i2l;
  #L47999c.  v5:= lcmp(v8, v3);
  #L4799a0.  if v5 < 0 then goto L4799b8;
  #L4799a4.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L4799a8.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L4799ac.  v3:= v3 - v4 @kind int;
  #L4799ae.  v3:= (`long`) v3 @kind i2l;
  #L4799b0.  v8:= v8 - v3 @kind long;
  #L4799b2.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L4799b6.  goto L479990;
  #L4799b8.  v3:= lcmp(v10, v0);
  #L4799bc.  if v3 <= 0 then goto L4799f2;
  #L4799c0.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L4799c4.  v3:= (`long`) v3 @kind i2l;
  #L4799c6.  v3:= v3 + v8 @kind long;
  #L4799c8.  v8:= (`int`) v3 @kind l2i;
  #L4799ca.  v9:= v2.`okio.Segment.limit` @type ^`int`;
  #L4799ce.  v9:= v9 - v8 @kind int;
  #L4799d0.  v3:= (`long`) v9 @kind i2l;
  #L4799d2.  call temp:= `min`(v3, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4799d8.  v3:= temp @kind wide;
  #L4799da.  v9:= (`int`) v3 @kind l2i;
  #L4799dc.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L4799e0.  call `write`(v7, v3, v8, v9) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L4799e6.  v8:= (`long`) v9 @kind i2l;
  #L4799e8.  v10:= v10 - v8 @kind long;
  #L4799ea.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L4799ee.  v8:= v0 @kind wide;
  #L4799f0.  goto L4799b8;
  #L4799f2.  return v6 @kind object;
  #L4799f4.  v7:= new `java.lang.IllegalArgumentException`;
  #L4799f8.  v8:= "out == null" @kind object;
  #L4799fc.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479a02.  goto L479a06;
  #L479a04.  throw v7;
  #L479a06.  goto L479a04;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 , `long` v10 ) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L479a18.  if v7 == 0 then goto L479ade;
  #L479a1c.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479a20.  v2:= v8 @kind wide;
  #L479a22.  v4:= v10 @kind wide;
  #L479a24.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L479a2a.  v0:= 0L;
  #L479a2e.  v2:= lcmp(v10, v0);
  #L479a32.  if v2 != 0 then goto L479a38;
  #L479a36.  return v6 @kind object;
  #L479a38.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479a3c.  v2:= v2 + v10 @kind long;
  #L479a3e.  v7.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L479a42.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L479a46.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L479a4a.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L479a4e.  v3:= v3 - v4 @kind int;
  #L479a50.  v3:= (`long`) v3 @kind i2l;
  #L479a52.  v5:= lcmp(v8, v3);
  #L479a56.  if v5 < 0 then goto L479a6e;
  #L479a5a.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L479a5e.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L479a62.  v3:= v3 - v4 @kind int;
  #L479a64.  v3:= (`long`) v3 @kind i2l;
  #L479a66.  v8:= v8 - v3 @kind long;
  #L479a68.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L479a6c.  goto L479a46;
  #L479a6e.  v3:= lcmp(v10, v0);
  #L479a72.  if v3 <= 0 then goto L479adc;
  #L479a76.  v3:= new `okio.Segment`;
  #L479a7a.  call `<init>`(v3, v2) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @kind direct;
  #L479a80.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L479a84.  v4:= (`long`) v4 @kind i2l;
  #L479a86.  v4:= v4 + v8 @kind long;
  #L479a88.  v8:= (`int`) v4 @kind l2i;
  #L479a8a.  v3.`okio.Segment.pos` @type ^`int` := v8;
  #L479a8e.  v8:= v3.`okio.Segment.pos` @type ^`int`;
  #L479a92.  v9:= (`int`) v10 @kind l2i;
  #L479a94.  v8:= v8 + v9 @kind int;
  #L479a96.  v9:= v3.`okio.Segment.limit` @type ^`int`;
  #L479a9a.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L479aa0.  v8:= temp;
  #L479aa2.  v3.`okio.Segment.limit` @type ^`int` := v8;
  #L479aa6.  v8:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L479aaa.  if v8 != 0 then goto L479abc;
  #L479aae.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L479ab2.  v3.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L479ab6.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L479aba.  goto L479ac6;
  #L479abc.  v8:= v8.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L479ac0.  call temp:= `push`(v8, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L479ac6.  v8:= v3.`okio.Segment.limit` @type ^`int`;
  #L479aca.  v9:= v3.`okio.Segment.pos` @type ^`int`;
  #L479ace.  v8:= v8 - v9 @kind int;
  #L479ad0.  v8:= (`long`) v8 @kind i2l;
  #L479ad2.  v10:= v10 - v8 @kind long;
  #L479ad4.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L479ad8.  v8:= v0 @kind wide;
  #L479ada.  goto L479a6e;
  #L479adc.  return v6 @kind object;
  #L479ade.  v7:= new `java.lang.IllegalArgumentException`;
  #L479ae2.  v8:= "out == null" @kind object;
  #L479ae6.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479aec.  goto L479af0;
  #L479aee.  throw v7;
  #L479af0.  goto L479aee;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;

  #L47a768.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L479b04.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L47a77c.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L47a782.  v0:= temp @kind object;
  #L47a784.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4780c8.  v0:= 1I;
  #L4780ca.  if v13 != v14 then goto L4780d0;
  #L4780ce.  return v0;
  #L4780d0.  v1:= instanceof @variable v14 @type ^`okio.Buffer` @kind boolean;
  #L4780d4.  v2:= 0I;
  #L4780d6.  if v1 != 0 then goto L4780dc;
  #L4780da.  return v2;
  #L4780dc.  v14:= (`okio.Buffer`) v14 @kind object;
  #L4780e0.  v3:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4780e4.  v5:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4780e8.  v1:= lcmp(v3, v5);
  #L4780ec.  if v1 == 0 then goto L4780f2;
  #L4780f0.  return v2;
  #L4780f2.  v5:= 0L;
  #L4780f6.  v1:= lcmp(v3, v5);
  #L4780fa.  if v1 != 0 then goto L478100;
  #L4780fe.  return v0;
  #L478100.  v1:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478104.  v14:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478108.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L47810c.  v4:= v14.`okio.Segment.pos` @type ^`int`;
  #L478110.  v7:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478114.  v9:= lcmp(v5, v7);
  #L478118.  if v9 >= 0 then goto L478196;
  #L47811c.  v7:= v1.`okio.Segment.limit` @type ^`int`;
  #L478120.  v7:= v7 - v3 @kind int;
  #L478122.  v8:= v14.`okio.Segment.limit` @type ^`int`;
  #L478126.  v8:= v8 - v4 @kind int;
  #L478128.  call temp:= `min`(v7, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L47812e.  v7:= temp;
  #L478130.  v7:= (`long`) v7 @kind i2l;
  #L478132.  v9:= v4;
  #L478134.  v4:= v3;
  #L478136.  v3:= 0I;
  #L478138.  v10:= (`long`) v3 @kind i2l;
  #L47813a.  v12:= lcmp(v10, v7);
  #L47813e.  if v12 >= 0 then goto L47816a;
  #L478142.  v10:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L478146.  v11:= v4 + 1;
  #L47814a.  v4:= v10[v4] @kind byte;
  #L47814e.  v10:= v14.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L478152.  v12:= v9 + 1;
  #L478156.  v9:= v10[v9] @kind byte;
  #L47815a.  if v4 == v9 then goto L478160;
  #L47815e.  return v2;
  #L478160.  v3:= v3 + 1;
  #L478164.  v4:= v11;
  #L478166.  v9:= v12;
  #L478168.  goto L478138;
  #L47816a.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L47816e.  if v4 != v3 then goto L47817c;
  #L478172.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L478176.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L47817a.  goto L47817e;
  #L47817c.  v3:= v4;
  #L47817e.  v4:= v14.`okio.Segment.limit` @type ^`int`;
  #L478182.  if v9 != v4 then goto L478190;
  #L478186.  v14:= v14.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47818a.  v4:= v14.`okio.Segment.pos` @type ^`int`;
  #L47818e.  goto L478192;
  #L478190.  v4:= v9;
  #L478192.  v5:= v5 + v7 @kind long;
  #L478194.  goto L478110;
  #L478196.  return v0;
}
procedure `boolean` `exhausted`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4781a8.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4781ac.  v2:= 0L;
  #L4781b0.  v4:= lcmp(v0, v2);
  #L4781b4.  if v4 != 0 then goto L4781bc;
  #L4781b8.  v0:= 1I;
  #L4781ba.  goto L4781be;
  #L4781bc.  v0:= 0I;
  #L4781be.  return v0;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L47af04.  return @kind void;
}
procedure `byte` `getByte`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4782f4.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4782f8.  v4:= 1L;
  #L4782fc.  v2:= v7 @kind wide;
  #L4782fe.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L478304.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478308.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L47830c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L478310.  v1:= v1 - v2 @kind int;
  #L478312.  v1:= (`long`) v1 @kind i2l;
  #L478314.  v3:= lcmp(v7, v1);
  #L478318.  if v3 >= 0 then goto L47832e;
  #L47831c.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L478320.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L478324.  v8:= (`int`) v7 @kind l2i;
  #L478326.  v0:= v0 + v8 @kind int;
  #L478328.  v7:= v1[v0] @kind byte;
  #L47832c.  return v7;
  #L47832e.  v7:= v7 - v1 @kind long;
  #L478330.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L478334.  goto L478308;
}
procedure `int` `hashCode`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L478464.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478468.  if v0 != 0 then goto L478470;
  #L47846c.  v0:= 0I;
  #L47846e.  return v0;
  #L478470.  v1:= 1I;
  #L478472.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L478476.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L47847a.  if v2 >= v3 then goto L478492;
  #L47847e.  v1:= v1 * 31;
  #L478482.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L478486.  v4:= v4[v2] @kind byte;
  #L47848a.  v1:= v1 + v4 @kind int;
  #L47848c.  v2:= v2 + 1;
  #L478490.  goto L47847a;
  #L478492.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L478496.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47849a.  if v0 != v2 then goto L478472;
  #L47849e.  return v1;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ab28.  v0:= "HmacSHA1" @kind object;
  #L47ab2c.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L47ab32.  v2:= temp @kind object;
  #L47ab34.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ab48.  v0:= "HmacSHA256" @kind object;
  #L47ab4c.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L47ab52.  v2:= temp @kind object;
  #L47ab54.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ab68.  v0:= "HmacSHA512" @kind object;
  #L47ab6c.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L47ab72.  v2:= temp @kind object;
  #L47ab74.  return v2 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 ) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L478e24.  v2:= 0L;
  #L478e28.  v4:= 9223372036854775807L;
  #L478e32.  v0:= v6 @kind object;
  #L478e34.  v1:= v7;
  #L478e36.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L478e3c.  v0:= temp @kind wide;
  #L478e3e.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 , `long` v8 ) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L478e50.  v4:= 9223372036854775807L;
  #L478e5a.  v0:= v6 @kind object;
  #L478e5c.  v1:= v7;
  #L478e5e.  v2:= v8 @kind wide;
  #L478e60.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L478e66.  v7:= temp @kind wide;
  #L478e68.  return v7 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v15 @kind this, `byte` v16 , `long` v17 , `long` v19 ) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L478e7c.  v0:= v15 @kind object;
  #L478e7e.  v1:= 0L;
  #L478e82.  v3:= lcmp(v17, v1);
  #L478e86.  if v3 < 0 then goto L478f7a;
  #L478e8a.  v3:= lcmp(v19, v17);
  #L478e8e.  if v3 < 0 then goto L478f7a;
  #L478e92.  v3:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478e96.  v5:= lcmp(v19, v3);
  #L478e9a.  if v5 <= 0 then goto L478ea0;
  #L478e9e.  goto L478ea4;
  #L478ea0.  v3:= v19 @kind wide;
  #L478ea4.  v5:= -1L;
  #L478ea8.  v7:= lcmp(v17, v3);
  #L478eac.  if v7 != 0 then goto L478eb2;
  #L478eb0.  return v5 @kind wide;
  #L478eb2.  v7:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478eb6.  if v7 != 0 then goto L478ebc;
  #L478eba.  return v5 @kind wide;
  #L478ebc.  v8:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478ec0.  v10:= v8 - v17 @kind long;
  #L478ec4.  v12:= lcmp(v10, v17);
  #L478ec8.  if v12 >= 0 then goto L478ee8;
  #L478ecc.  v1:= lcmp(v8, v17);
  #L478ed0.  if v1 <= 0 then goto L478f06;
  #L478ed4.  v7:= v7.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L478ed8.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L478edc.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L478ee0.  v1:= v1 - v2 @kind int;
  #L478ee2.  v1:= (`long`) v1 @kind i2l;
  #L478ee4.  v8:= v8 - v1 @kind long;
  #L478ee6.  goto L478ecc;
  #L478ee8.  v8:= v1 @kind wide;
  #L478eea.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L478eee.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L478ef2.  v1:= v1 - v2 @kind int;
  #L478ef4.  v1:= (`long`) v1 @kind i2l;
  #L478ef6.  v1:= v1 + v8 @kind long;
  #L478ef8.  v10:= lcmp(v1, v17);
  #L478efc.  if v10 >= 0 then goto L478f06;
  #L478f00.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L478f04.  goto L478ee8;
  #L478f06.  v1:= v17 @kind wide;
  #L478f0a.  v10:= lcmp(v8, v3);
  #L478f0e.  if v10 >= 0 then goto L478f78;
  #L478f12.  v10:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L478f16.  v11:= v7.`okio.Segment.limit` @type ^`int`;
  #L478f1a.  v11:= (`long`) v11 @kind i2l;
  #L478f1c.  v13:= v7.`okio.Segment.pos` @type ^`int`;
  #L478f20.  v13:= (`long`) v13 @kind i2l;
  #L478f22.  v13:= v13 + v3 @kind long;
  #L478f24.  v13:= v13 - v8 @kind long;
  #L478f26.  call temp:= `min`(v11, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L478f2c.  v11:= temp @kind wide;
  #L478f2e.  v12:= (`int`) v11 @kind l2i;
  #L478f30.  v11:= v7.`okio.Segment.pos` @type ^`int`;
  #L478f34.  v13:= (`long`) v11 @kind i2l;
  #L478f36.  v13:= v13 + v1 @kind long;
  #L478f38.  v13:= v13 - v8 @kind long;
  #L478f3a.  v1:= (`int`) v13 @kind l2i;
  #L478f3c.  if v1 >= v12 then goto L478f5e;
  #L478f40.  v2:= v10[v1] @kind byte;
  #L478f44.  v11:= v16;
  #L478f48.  if v2 != v11 then goto L478f58;
  #L478f4c.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L478f50.  v1:= v1 - v2 @kind int;
  #L478f52.  v1:= (`long`) v1 @kind i2l;
  #L478f54.  v1:= v1 + v8 @kind long;
  #L478f56.  return v1 @kind wide;
  #L478f58.  v1:= v1 + 1;
  #L478f5c.  goto L478f3c;
  #L478f5e.  v11:= v16;
  #L478f62.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L478f66.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L478f6a.  v1:= v1 - v2 @kind int;
  #L478f6c.  v1:= (`long`) v1 @kind i2l;
  #L478f6e.  v1:= v1 + v8 @kind long;
  #L478f70.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L478f74.  v8:= v1 @kind wide;
  #L478f76.  goto L478f0a;
  #L478f78.  return v5 @kind wide;
  #L478f7a.  v1:= new `java.lang.IllegalArgumentException`;
  #L478f7e.  v2:= 3I;
  #L478f80.  v2:= new `java.lang.Object`[v2];
  #L478f84.  v3:= 0I;
  #L478f86.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478f8a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L478f90.  v4:= temp @kind object;
  #L478f92.  v2[v3]:= v4 @kind object;
  #L478f96.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L478f9c.  v3:= temp @kind object;
  #L478f9e.  v4:= 1I;
  #L478fa0.  v2[v4]:= v3 @kind object;
  #L478fa4.  v3:= 2I;
  #L478fa6.  call temp:= `valueOf`(v19) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L478fac.  v4:= temp @kind object;
  #L478fae.  v2[v3]:= v4 @kind object;
  #L478fb2.  v3:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L478fb6.  call temp:= `format`(v3, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L478fbc.  v2:= temp @kind object;
  #L478fbe.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L478fc4.  goto L478fc8;
  #L478fc6.  throw v1;
  #L478fc8.  goto L478fc6;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L478fdc.  v0:= 0L;
  #L478fe0.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L478fe6.  v0:= temp @kind wide;
  #L478fe8.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v18 @kind this, `okio.ByteString` v19 @kind object, `long` v20 ) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L478ffc.  v6:= v18 @kind object;
  #L479000.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L479006.  v0:= temp;
  #L479008.  if v0 == 0 then goto L47915c;
  #L47900c.  v0:= 0L;
  #L479010.  v2:= lcmp(v20, v0);
  #L479014.  if v2 < 0 then goto L47914c;
  #L479018.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47901c.  v7:= -1L;
  #L479020.  if v2 != 0 then goto L479026;
  #L479024.  return v7 @kind wide;
  #L479026.  v3:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47902a.  v9:= v3 - v20 @kind long;
  #L47902e.  v5:= lcmp(v9, v20);
  #L479032.  if v5 >= 0 then goto L479052;
  #L479036.  v0:= lcmp(v3, v20);
  #L47903a.  if v0 <= 0 then goto L479070;
  #L47903e.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L479042.  v0:= v2.`okio.Segment.limit` @type ^`int`;
  #L479046.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L47904a.  v0:= v0 - v1 @kind int;
  #L47904c.  v0:= (`long`) v0 @kind i2l;
  #L47904e.  v3:= v3 - v0 @kind long;
  #L479050.  goto L479036;
  #L479052.  v3:= v0 @kind wide;
  #L479054.  v0:= v2.`okio.Segment.limit` @type ^`int`;
  #L479058.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L47905c.  v0:= v0 - v1 @kind int;
  #L47905e.  v0:= (`long`) v0 @kind i2l;
  #L479060.  v0:= v0 + v3 @kind long;
  #L479062.  v5:= lcmp(v0, v20);
  #L479066.  if v5 >= 0 then goto L479070;
  #L47906a.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47906e.  goto L479052;
  #L479070.  v0:= 0I;
  #L479072.  v9:= v19 @kind object;
  #L479076.  call temp:= `getByte`(v9, v0) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L47907c.  v10:= temp;
  #L47907e.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L479084.  v11:= temp;
  #L479086.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47908a.  v12:= (`long`) v11 @kind i2l;
  #L47908c.  v0:= v0 - v12 @kind long;
  #L47908e.  v12:= 1L;
  #L479092.  v12:= v12 + v0 @kind long;
  #L479094.  v0:= v20 @kind wide;
  #L479098.  v5:= v2 @kind object;
  #L47909a.  v14:= v3 @kind wide;
  #L47909c.  v2:= lcmp(v14, v12);
  #L4790a0.  if v2 >= 0 then goto L479148;
  #L4790a4.  v4:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L4790a8.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L4790ac.  v2:= (`long`) v2 @kind i2l;
  #L4790ae.  v7:= v5.`okio.Segment.pos` @type ^`int`;
  #L4790b2.  v7:= (`long`) v7 @kind i2l;
  #L4790b4.  v7:= v7 + v12 @kind long;
  #L4790b6.  v7:= v7 - v14 @kind long;
  #L4790b8.  call temp:= `min`(v2, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4790be.  v2:= temp @kind wide;
  #L4790c0.  v7:= (`int`) v2 @kind l2i;
  #L4790c2.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L4790c6.  v2:= (`long`) v2 @kind i2l;
  #L4790c8.  v2:= v2 + v0 @kind long;
  #L4790ca.  v2:= v2 - v14 @kind long;
  #L4790cc.  v0:= (`int`) v2 @kind l2i;
  #L4790ce.  v8:= v0;
  #L4790d0.  if v8 >= v7 then goto L479128;
  #L4790d4.  v0:= v4[v8] @kind byte;
  #L4790d8.  if v0 != v10 then goto L479112;
  #L4790dc.  v2:= v8 + 1;
  #L4790e0.  v16:= 1I;
  #L4790e4.  v0:= v18 @kind object;
  #L4790e8.  v1:= v5 @kind object;
  #L4790ea.  v3:= v19 @kind object;
  #L4790ee.  v17:= v4 @kind object;
  #L4790f2.  v4:= v16;
  #L4790f6.  v6:= v5 @kind object;
  #L4790f8.  v5:= v11;
  #L4790fa.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L479100.  v0:= temp;
  #L479102.  if v0 == 0 then goto L479118;
  #L479106.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L47910a.  v8:= v8 - v0 @kind int;
  #L47910c.  v0:= (`long`) v8 @kind i2l;
  #L47910e.  v0:= v0 + v14 @kind long;
  #L479110.  return v0 @kind wide;
  #L479112.  v17:= v4 @kind object;
  #L479116.  v6:= v5 @kind object;
  #L479118.  v8:= v8 + 1;
  #L47911c.  v5:= v6 @kind object;
  #L47911e.  v4:= v17 @kind object;
  #L479122.  v6:= v18 @kind object;
  #L479126.  goto L4790d0;
  #L479128.  v6:= v5 @kind object;
  #L47912a.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L47912e.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L479132.  v0:= v0 - v1 @kind int;
  #L479134.  v0:= (`long`) v0 @kind i2l;
  #L479136.  v0:= v0 + v14 @kind long;
  #L479138.  v5:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47913c.  v7:= -1L;
  #L479140.  v6:= v18 @kind object;
  #L479144.  v14:= v0 @kind wide;
  #L479146.  goto L47909c;
  #L479148.  v0:= v7 @kind wide;
  #L47914a.  return v0 @kind wide;
  #L47914c.  v0:= new `java.lang.IllegalArgumentException`;
  #L479150.  v1:= "fromIndex < 0" @kind object;
  #L479154.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47915a.  throw v0;
  #L47915c.  v0:= new `java.lang.IllegalArgumentException`;
  #L479160.  v1:= "bytes is empty" @kind object;
  #L479164.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47916a.  goto L47916e;
  #L47916c.  throw v0;
  #L47916e.  goto L47916c;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L479180.  v0:= 0L;
  #L479184.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L47918a.  v0:= temp @kind wide;
  #L47918c.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v11 @kind this, `okio.ByteString` v12 @kind object, `long` v13 ) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4791a0.  v0:= 0L;
  #L4791a4.  v2:= lcmp(v13, v0);
  #L4791a8.  if v2 < 0 then goto L4792ea;
  #L4791ac.  v2:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L4791b0.  v3:= -1L;
  #L4791b4.  if v2 != 0 then goto L4791ba;
  #L4791b8.  return v3 @kind wide;
  #L4791ba.  v5:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4791be.  v7:= v5 - v13 @kind long;
  #L4791c2.  v9:= lcmp(v7, v13);
  #L4791c6.  if v9 >= 0 then goto L4791e6;
  #L4791ca.  v0:= lcmp(v5, v13);
  #L4791ce.  if v0 <= 0 then goto L479204;
  #L4791d2.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L4791d6.  v0:= v2.`okio.Segment.limit` @type ^`int`;
  #L4791da.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L4791de.  v0:= v0 - v1 @kind int;
  #L4791e0.  v0:= (`long`) v0 @kind i2l;
  #L4791e2.  v5:= v5 - v0 @kind long;
  #L4791e4.  goto L4791ca;
  #L4791e6.  v5:= v0 @kind wide;
  #L4791e8.  v0:= v2.`okio.Segment.limit` @type ^`int`;
  #L4791ec.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L4791f0.  v0:= v0 - v1 @kind int;
  #L4791f2.  v0:= (`long`) v0 @kind i2l;
  #L4791f4.  v0:= v0 + v5 @kind long;
  #L4791f6.  v7:= lcmp(v0, v13);
  #L4791fa.  if v7 >= 0 then goto L479204;
  #L4791fe.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L479202.  goto L4791e6;
  #L479204.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L47920a.  v0:= temp;
  #L47920c.  v1:= 2I;
  #L47920e.  v7:= 0I;
  #L479210.  if v0 != v1 then goto L479280;
  #L479214.  call temp:= `getByte`(v12, v7) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L47921a.  v0:= temp;
  #L47921c.  v1:= 1I;
  #L47921e.  call temp:= `getByte`(v12, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L479224.  v12:= temp;
  #L479226.  v7:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47922a.  v1:= lcmp(v5, v7);
  #L47922e.  if v1 >= 0 then goto L4792e8;
  #L479232.  v1:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479236.  v7:= v2.`okio.Segment.pos` @type ^`int`;
  #L47923a.  v7:= (`long`) v7 @kind i2l;
  #L47923c.  v7:= v7 + v13 @kind long;
  #L47923e.  v7:= v7 - v5 @kind long;
  #L479240.  v13:= (`int`) v7 @kind l2i;
  #L479242.  v14:= v2.`okio.Segment.limit` @type ^`int`;
  #L479246.  if v13 >= v14 then goto L47926a;
  #L47924a.  v7:= v1[v13] @kind byte;
  #L47924e.  if v7 == v0 then goto L47925e;
  #L479252.  if v7 != v12 then goto L479258;
  #L479256.  goto L47925e;
  #L479258.  v13:= v13 + 1;
  #L47925c.  goto L479246;
  #L47925e.  v12:= v2.`okio.Segment.pos` @type ^`int`;
  #L479262.  v13:= v13 - v12 @kind int;
  #L479264.  v12:= (`long`) v13 @kind i2l;
  #L479266.  v12:= v12 + v5 @kind long;
  #L479268.  return v12 @kind wide;
  #L47926a.  v13:= v2.`okio.Segment.limit` @type ^`int`;
  #L47926e.  v14:= v2.`okio.Segment.pos` @type ^`int`;
  #L479272.  v13:= v13 - v14 @kind int;
  #L479274.  v13:= (`long`) v13 @kind i2l;
  #L479276.  v13:= v13 + v5 @kind long;
  #L479278.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47927c.  v5:= v13 @kind wide;
  #L47927e.  goto L479226;
  #L479280.  call temp:= `internalArray`(v12) @signature `Lokio/ByteString;.internalArray:()[B` @kind virtual;
  #L479286.  v12:= temp @kind object;
  #L479288.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47928c.  v8:= lcmp(v5, v0);
  #L479290.  if v8 >= 0 then goto L4792e8;
  #L479294.  v0:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479298.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L47929c.  v8:= (`long`) v1 @kind i2l;
  #L47929e.  v8:= v8 + v13 @kind long;
  #L4792a0.  v8:= v8 - v5 @kind long;
  #L4792a2.  v13:= (`int`) v8 @kind l2i;
  #L4792a4.  v14:= v2.`okio.Segment.limit` @type ^`int`;
  #L4792a8.  if v13 >= v14 then goto L4792d2;
  #L4792ac.  v1:= v0[v13] @kind byte;
  #L4792b0.  v8:= length @variable v12;
  #L4792b2.  v9:= 0I;
  #L4792b4.  if v9 >= v8 then goto L4792cc;
  #L4792b8.  v10:= v12[v9] @kind byte;
  #L4792bc.  if v1 != v10 then goto L4792c6;
  #L4792c0.  v12:= v2.`okio.Segment.pos` @type ^`int`;
  #L4792c4.  goto L479262;
  #L4792c6.  v9:= v9 + 1;
  #L4792ca.  goto L4792b4;
  #L4792cc.  v13:= v13 + 1;
  #L4792d0.  goto L4792a8;
  #L4792d2.  v13:= v2.`okio.Segment.limit` @type ^`int`;
  #L4792d6.  v14:= v2.`okio.Segment.pos` @type ^`int`;
  #L4792da.  v13:= v13 - v14 @kind int;
  #L4792dc.  v13:= (`long`) v13 @kind i2l;
  #L4792de.  v13:= v13 + v5 @kind long;
  #L4792e0.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L4792e4.  v5:= v13 @kind wide;
  #L4792e6.  goto L479288;
  #L4792e8.  return v3 @kind wide;
  #L4792ea.  v12:= new `java.lang.IllegalArgumentException`;
  #L4792ee.  v13:= "fromIndex < 0" @kind object;
  #L4792f2.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4792f8.  goto L4792fc;
  #L4792fa.  throw v12;
  #L4792fc.  goto L4792fa;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47891c.  v0:= new `okio.Buffer$2`;
  #L478920.  call `<init>`(v0, v1) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L478926.  return v0 @kind object;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ab88.  v0:= "MD5" @kind object;
  #L47ab8c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L47ab92.  v0:= temp @kind object;
  #L47ab94.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478938.  v0:= new `okio.Buffer$1`;
  #L47893c.  call `<init>`(v0, v1) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L478942.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v6 @kind this, `long` v7 , `okio.ByteString` v9 @kind object) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4781d0.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L4781d6.  v5:= temp;
  #L4781d8.  v4:= 0I;
  #L4781da.  v0:= v6 @kind object;
  #L4781dc.  v1:= v7 @kind wide;
  #L4781de.  v3:= v9 @kind object;
  #L4781e0.  call temp:= `rangeEquals`(v0, v1, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L4781e6.  v7:= temp;
  #L4781e8.  return v7;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v6 @kind this, `long` v7 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4781fc.  v0:= 0I;
  #L4781fe.  v1:= 0L;
  #L478202.  v3:= lcmp(v7, v1);
  #L478206.  if v3 < 0 then goto L478260;
  #L47820a.  if v10 < 0 then goto L478260;
  #L47820e.  if v11 < 0 then goto L478260;
  #L478212.  v1:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478216.  v1:= v1 - v7 @kind long;
  #L478218.  v3:= (`long`) v11 @kind i2l;
  #L47821a.  v5:= lcmp(v1, v3);
  #L47821e.  if v5 < 0 then goto L478260;
  #L478222.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L478228.  v1:= temp;
  #L47822a.  v1:= v1 - v10 @kind int;
  #L47822c.  if v1 >= v11 then goto L478232;
  #L478230.  goto L478260;
  #L478232.  v1:= 0I;
  #L478234.  if v1 >= v11 then goto L47825c;
  #L478238.  v2:= (`long`) v1 @kind i2l;
  #L47823a.  v2:= v2 + v7 @kind long;
  #L47823c.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L478242.  v2:= temp;
  #L478244.  v3:= v10 + v1 @kind int;
  #L478248.  call temp:= `getByte`(v9, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L47824e.  v3:= temp;
  #L478250.  if v2 == v3 then goto L478256;
  #L478254.  return v0;
  #L478256.  v1:= v1 + 1;
  #L47825a.  goto L478234;
  #L47825c.  v7:= 1I;
  #L47825e.  return v7;
  #L478260.  return v0;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4784b0.  v0:= length @variable v3;
  #L4784b2.  v1:= 0I;
  #L4784b4.  call temp:= `read`(v2, v3, v1, v0) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L4784ba.  v3:= temp;
  #L4784bc.  return v3;
}
procedure `int` `read`(`okio.Buffer` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4784d0.  v0:= length @variable v8;
  #L4784d2.  v1:= (`long`) v0 @kind i2l;
  #L4784d4.  v3:= (`long`) v9 @kind i2l;
  #L4784d6.  v5:= (`long`) v10 @kind i2l;
  #L4784d8.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L4784de.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L4784e2.  if v0 != 0 then goto L4784ea;
  #L4784e6.  v8:= -1I;
  #L4784e8.  return v8;
  #L4784ea.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L4784ee.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L4784f2.  v1:= v1 - v2 @kind int;
  #L4784f4.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4784fa.  v10:= temp;
  #L4784fc.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L478500.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L478504.  call `arraycopy`(v1, v2, v8, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L47850a.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L47850e.  v8:= v8 + v10 @kind int;
  #L478510.  v0.`okio.Segment.pos` @type ^`int` := v8;
  #L478514.  v8:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478518.  v1:= (`long`) v10 @kind i2l;
  #L47851a.  v8:= v8 - v1 @kind long;
  #L47851c.  v7.`okio.Buffer.size` @type ^`long` := v8 @kind wide;
  #L478520.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L478524.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L478528.  if v8 != v9 then goto L47853e;
  #L47852c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L478532.  v8:= temp @kind object;
  #L478534.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L478538.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L47853e.  return v10;
}
procedure `long` `read`(`okio.Buffer` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L479310.  if v6 == 0 then goto L479372;
  #L479314.  v0:= 0L;
  #L479318.  v2:= lcmp(v7, v0);
  #L47931c.  if v2 < 0 then goto L479344;
  #L479320.  v2:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479324.  v4:= lcmp(v2, v0);
  #L479328.  if v4 != 0 then goto L479332;
  #L47932c.  v6:= -1L;
  #L479330.  return v6 @kind wide;
  #L479332.  v0:= lcmp(v7, v2);
  #L479336.  if v0 <= 0 then goto L47933c;
  #L47933a.  v7:= v2 @kind wide;
  #L47933c.  call `write`(v6, v5, v7) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L479342.  return v7 @kind wide;
  #L479344.  v6:= new `java.lang.IllegalArgumentException`;
  #L479348.  v0:= new `java.lang.StringBuilder`;
  #L47934c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L479352.  v1:= "byteCount < 0: " @kind object;
  #L479356.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47935c.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L479362.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L479368.  v7:= temp @kind object;
  #L47936a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479370.  throw v6;
  #L479372.  v6:= new `java.lang.IllegalArgumentException`;
  #L479376.  v7:= "sink == null" @kind object;
  #L47937a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479380.  throw v6;
}
procedure `long` `readAll`(`okio.Buffer` v5 @kind this, `okio.Sink` v6 @kind object) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L479394.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479398.  v2:= 0L;
  #L47939c.  v4:= lcmp(v0, v2);
  #L4793a0.  if v4 <= 0 then goto L4793aa;
  #L4793a4.  call `write`(v6, v5, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L4793aa.  return v0 @kind wide;
}
procedure `byte` `readByte`(`okio.Buffer` v9 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L478348.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47834c.  v2:= 0L;
  #L478350.  v4:= lcmp(v0, v2);
  #L478354.  if v4 == 0 then goto L47839c;
  #L478358.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47835c.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L478360.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L478364.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L478368.  v4:= v1 + 1;
  #L47836c.  v1:= v3[v1] @kind byte;
  #L478370.  v5:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478374.  v7:= 1L;
  #L478378.  v5:= v5 - v7 @kind long;
  #L47837a.  v9.`okio.Buffer.size` @type ^`long` := v5 @kind wide;
  #L47837e.  if v4 != v2 then goto L478396;
  #L478382.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L478388.  v2:= temp @kind object;
  #L47838a.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L47838e.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L478394.  goto L47839a;
  #L478396.  v0.`okio.Segment.pos` @type ^`int` := v4;
  #L47839a.  return v1;
  #L47839c.  v0:= new `java.lang.IllegalStateException`;
  #L4783a0.  v1:= "size == 0" @kind object;
  #L4783a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4783aa.  throw v0;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4783bc.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4783c0.  call temp:= `readByteArray`(v2, v0) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L4783c6.  v0:= temp @kind object;
  #L4783c8.  return v0 @kind object;
  #L4783ca.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L4783cc.  v1:= new `java.lang.AssertionError`;
  #L4783d0.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4783d6.  throw v1;
  catch `java.io.EOFException` @[L4783bc..L4783c8] goto L4783ca;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4783f8.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4783fc.  v2:= 0L;
  #L478400.  v4:= v7 @kind wide;
  #L478402.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L478408.  v0:= 2147483647L;
  #L47840e.  v2:= lcmp(v7, v0);
  #L478412.  if v2 > 0 then goto L478424;
  #L478416.  v8:= (`int`) v7 @kind l2i;
  #L478418.  v7:= new `byte`[v8];
  #L47841c.  call `readFully`(v6, v7) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L478422.  return v7 @kind object;
  #L478424.  v0:= new `java.lang.IllegalArgumentException`;
  #L478428.  v1:= new `java.lang.StringBuilder`;
  #L47842c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L478432.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L478436.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47843c.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L478442.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L478448.  v7:= temp @kind object;
  #L47844a.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L478450.  throw v0;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47aba8.  v0:= new `okio.ByteString`;
  #L47abac.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L47abb2.  v1:= temp @kind object;
  #L47abb4.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L47abba.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47abcc.  v0:= new `okio.ByteString`;
  #L47abd0.  call temp:= `readByteArray`(v1, v2) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L47abd6.  v2:= temp @kind object;
  #L47abd8.  call `<init>`(v0, v2) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L47abde.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v17 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4793bc.  v0:= v17 @kind object;
  #L4793c0.  v1:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4793c4.  v3:= 0L;
  #L4793c8.  v5:= lcmp(v1, v3);
  #L4793cc.  if v5 == 0 then goto L47952e;
  #L4793d0.  v5:= -7L;
  #L4793d4.  v7:= 0I;
  #L4793d6.  v8:= v5 @kind wide;
  #L4793d8.  v5:= 0I;
  #L4793da.  v6:= 0I;
  #L4793dc.  v10:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L4793e0.  v11:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L4793e4.  v12:= v10.`okio.Segment.pos` @type ^`int`;
  #L4793e8.  v13:= v10.`okio.Segment.limit` @type ^`int`;
  #L4793ec.  if v12 >= v13 then goto L4794f0;
  #L4793f0.  v15:= v11[v12] @kind byte;
  #L4793f4.  v14:= 48I;
  #L4793f8.  if v15 < v14 then goto L479494;
  #L4793fc.  v1:= 57I;
  #L479400.  if v15 > v1 then goto L479494;
  #L479404.  v14:= v14 - v15 @kind int;
  #L479406.  v1:= -922337203685477580L;
  #L479410.  v16:= lcmp(v3, v1);
  #L479414.  if v16 < 0 then goto L47943a;
  #L479418.  v16:= lcmp(v3, v1);
  #L47941c.  if v16 != 0 then goto L47942c;
  #L479420.  v1:= (`long`) v14 @kind i2l;
  #L479422.  v16:= lcmp(v1, v8);
  #L479426.  if v16 >= 0 then goto L47942c;
  #L47942a.  goto L47943a;
  #L47942c.  v1:= 10L;
  #L479430.  v3:= v3 * v1 @kind long;
  #L479434.  v1:= (`long`) v14 @kind i2l;
  #L479436.  v3:= v3 + v1 @kind long;
  #L479438.  goto L4794a8;
  #L47943a.  v1:= new `okio.Buffer`;
  #L47943e.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L479444.  call temp:= `writeDecimalLong`(v1, v3) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L47944a.  v1:= temp @kind object;
  #L47944c.  call temp:= `writeByte`(v1, v15) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L479452.  v1:= temp @kind object;
  #L479454.  if v5 != 0 then goto L47945e;
  #L479458.  call temp:= `readByte`(v1) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L47945e.  v2:= new `java.lang.NumberFormatException`;
  #L479462.  v3:= new `java.lang.StringBuilder`;
  #L479466.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47946c.  v4:= "Number too large: " @kind object;
  #L479470.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479476.  call temp:= `readUtf8`(v1) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L47947c.  v1:= temp @kind object;
  #L47947e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479484.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47948a.  v1:= temp @kind object;
  #L47948c.  call `<init>`(v2, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479492.  throw v2;
  #L479494.  v1:= 45I;
  #L479498.  if v15 != v1 then goto L4794b2;
  #L47949c.  if v7 != 0 then goto L4794b2;
  #L4794a0.  v1:= 1L;
  #L4794a4.  v8:= v8 - v1 @kind long;
  #L4794a6.  v5:= 1I;
  #L4794a8.  v12:= v12 + 1;
  #L4794ac.  v7:= v7 + 1;
  #L4794b0.  goto L4793ec;
  #L4794b2.  if v7 == 0 then goto L4794ba;
  #L4794b6.  v6:= 1I;
  #L4794b8.  goto L4794f0;
  #L4794ba.  v1:= new `java.lang.NumberFormatException`;
  #L4794be.  v2:= new `java.lang.StringBuilder`;
  #L4794c2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4794c8.  v3:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L4794cc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4794d2.  call temp:= `toHexString`(v15) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L4794d8.  v3:= temp @kind object;
  #L4794da.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4794e0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4794e6.  v2:= temp @kind object;
  #L4794e8.  call `<init>`(v1, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4794ee.  throw v1;
  #L4794f0.  if v12 != v13 then goto L479508;
  #L4794f4.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L4794fa.  v1:= temp @kind object;
  #L4794fc.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L479500.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L479506.  goto L47950c;
  #L479508.  v10.`okio.Segment.pos` @type ^`int` := v12;
  #L47950c.  if v6 != 0 then goto L479518;
  #L479510.  v1:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L479514.  if v1 != 0 then goto L4793dc;
  #L479518.  v1:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47951c.  v6:= (`long`) v7 @kind i2l;
  #L47951e.  v1:= v1 - v6 @kind long;
  #L479520.  v0.`okio.Buffer.size` @type ^`long` := v1 @kind wide;
  #L479524.  if v5 == 0 then goto L47952a;
  #L479528.  goto L47952c;
  #L47952a.  v3:= -v3 @kind long;
  #L47952c.  return v3 @kind wide;
  #L47952e.  v1:= new `java.lang.IllegalStateException`;
  #L479532.  v2:= "size == 0" @kind object;
  #L479536.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47953c.  goto L479540;
  #L47953e.  throw v1;
  #L479540.  goto L47953e;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L479b18.  v0:= 9223372036854775807L;
  #L479b22.  v2:= 1I;
  #L479b24.  call `readFrom`(v3, v4, v0, v2) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L479b2a.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object, `long` v5 ) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L479b3c.  v0:= 0L;
  #L479b40.  v2:= lcmp(v5, v0);
  #L479b44.  if v2 < 0 then goto L479b52;
  #L479b48.  v0:= 0I;
  #L479b4a.  call `readFrom`(v3, v4, v5, v0) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L479b50.  return v3 @kind object;
  #L479b52.  v4:= new `java.lang.IllegalArgumentException`;
  #L479b56.  v0:= new `java.lang.StringBuilder`;
  #L479b5a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L479b60.  v1:= "byteCount < 0: " @kind object;
  #L479b64.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479b6a.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L479b70.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L479b76.  v5:= temp @kind object;
  #L479b78.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479b7e.  throw v4;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47aff0.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47aff4.  v2:= lcmp(v0, v5);
  #L47aff8.  if v2 < 0 then goto L47b004;
  #L47affc.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L47b002.  return @kind void;
  #L47b004.  call `write`(v4, v3, v0) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L47b00a.  v4:= new `java.io.EOFException`;
  #L47b00e.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L47b014.  throw v4;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47afb4.  v0:= 0I;
  #L47afb6.  v1:= length @variable v4;
  #L47afb8.  if v0 >= v1 then goto L47afde;
  #L47afbc.  v1:= length @variable v4;
  #L47afbe.  v1:= v1 - v0 @kind int;
  #L47afc0.  call temp:= `read`(v3, v4, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L47afc6.  v1:= temp;
  #L47afc8.  v2:= -1I;
  #L47afca.  if v1 == v2 then goto L47afd2;
  #L47afce.  v0:= v0 + v1 @kind int;
  #L47afd0.  goto L47afb6;
  #L47afd2.  v4:= new `java.io.EOFException`;
  #L47afd6.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L47afdc.  throw v4;
  #L47afde.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v15 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L479554.  v0:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479558.  v2:= 0L;
  #L47955c.  v4:= lcmp(v0, v2);
  #L479560.  if v4 == 0 then goto L4796ac;
  #L479564.  v0:= 0I;
  #L479566.  v4:= v2 @kind wide;
  #L479568.  v1:= 0I;
  #L47956a.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47956e.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479572.  v8:= v6.`okio.Segment.pos` @type ^`int`;
  #L479576.  v9:= v6.`okio.Segment.limit` @type ^`int`;
  #L47957a.  if v8 >= v9 then goto L479676;
  #L47957e.  v10:= v7[v8] @kind byte;
  #L479582.  v11:= 48I;
  #L479586.  if v10 < v11 then goto L479598;
  #L47958a.  v11:= 57I;
  #L47958e.  if v10 > v11 then goto L479598;
  #L479592.  v11:= v10 + -48;
  #L479596.  goto L4795c8;
  #L479598.  v11:= 97I;
  #L47959c.  if v10 < v11 then goto L4795b2;
  #L4795a0.  v11:= 102I;
  #L4795a4.  if v10 > v11 then goto L4795b2;
  #L4795a8.  v11:= v10 + -97;
  #L4795ac.  v11:= v11 + 10;
  #L4795b0.  goto L4795c8;
  #L4795b2.  v11:= 65I;
  #L4795b6.  if v10 < v11 then goto L479638;
  #L4795ba.  v11:= 70I;
  #L4795be.  if v10 > v11 then goto L479638;
  #L4795c2.  v11:= v10 + -65;
  #L4795c6.  goto L4795ac;
  #L4795c8.  v12:= -3.105036184601418E231D;
  #L4795cc.  v12:= v12 ^& v4 @kind long;
  #L4795ce.  v14:= lcmp(v12, v2);
  #L4795d2.  if v14 != 0 then goto L4795e8;
  #L4795d6.  v10:= 4I;
  #L4795d8.  v4:= v4 ^< v10 @kind long;
  #L4795da.  v10:= (`long`) v11 @kind i2l;
  #L4795dc.  v4:= v4 ^| v10 @kind long;
  #L4795de.  v8:= v8 + 1;
  #L4795e2.  v1:= v1 + 1;
  #L4795e6.  goto L47957a;
  #L4795e8.  v0:= new `okio.Buffer`;
  #L4795ec.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L4795f2.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L4795f8.  v0:= temp @kind object;
  #L4795fa.  call temp:= `writeByte`(v0, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L479600.  v0:= temp @kind object;
  #L479602.  v1:= new `java.lang.NumberFormatException`;
  #L479606.  v2:= new `java.lang.StringBuilder`;
  #L47960a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L479610.  v3:= "Number too large: " @kind object;
  #L479614.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47961a.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L479620.  v0:= temp @kind object;
  #L479622.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479628.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47962e.  v0:= temp @kind object;
  #L479630.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479636.  throw v1;
  #L479638.  if v1 == 0 then goto L479640;
  #L47963c.  v0:= 1I;
  #L47963e.  goto L479676;
  #L479640.  v0:= new `java.lang.NumberFormatException`;
  #L479644.  v1:= new `java.lang.StringBuilder`;
  #L479648.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47964e.  v2:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L479652.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479658.  call temp:= `toHexString`(v10) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L47965e.  v2:= temp @kind object;
  #L479660.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479666.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47966c.  v1:= temp @kind object;
  #L47966e.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479674.  throw v0;
  #L479676.  if v8 != v9 then goto L47968e;
  #L47967a.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L479680.  v7:= temp @kind object;
  #L479682.  v15.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L479686.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L47968c.  goto L479692;
  #L47968e.  v6.`okio.Segment.pos` @type ^`int` := v8;
  #L479692.  if v0 != 0 then goto L47969e;
  #L479696.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47969a.  if v6 != 0 then goto L47956a;
  #L47969e.  v2:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4796a2.  v0:= (`long`) v1 @kind i2l;
  #L4796a4.  v2:= v2 - v0 @kind long;
  #L4796a6.  v15.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L4796aa.  return v4 @kind wide;
  #L4796ac.  v0:= new `java.lang.IllegalStateException`;
  #L4796b0.  v1:= "size == 0" @kind object;
  #L4796b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4796ba.  goto L4796be;
  #L4796bc.  throw v0;
  #L4796be.  goto L4796bc;
}
procedure `int` `readInt`(`okio.Buffer` v8 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L478550.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478554.  v2:= 4L;
  #L478558.  v4:= lcmp(v0, v2);
  #L47855c.  if v4 < 0 then goto L478628;
  #L478560.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478564.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L478568.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L47856c.  v5:= v4 - v1 @kind int;
  #L478570.  v6:= 4I;
  #L478572.  if v5 >= v6 then goto L4785ba;
  #L478576.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L47857c.  v0:= temp;
  #L47857e.  v0:= v0 ^& 255;
  #L478582.  v0:= v0 ^< 24;
  #L478586.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L47858c.  v1:= temp;
  #L47858e.  v1:= v1 ^& 255;
  #L478592.  v1:= v1 ^< 16;
  #L478596.  v0:= v0 ^| v1 @kind int;
  #L478598.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L47859e.  v1:= temp;
  #L4785a0.  v1:= v1 ^& 255;
  #L4785a4.  v1:= v1 ^< 8;
  #L4785a8.  v0:= v0 ^| v1 @kind int;
  #L4785aa.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L4785b0.  v1:= temp;
  #L4785b2.  v1:= v1 ^& 255;
  #L4785b6.  v0:= v0 ^| v1 @kind int;
  #L4785b8.  return v0;
  #L4785ba.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L4785be.  v6:= v1 + 1;
  #L4785c2.  v1:= v5[v1] @kind byte;
  #L4785c6.  v1:= v1 ^& 255;
  #L4785ca.  v1:= v1 ^< 24;
  #L4785ce.  v7:= v6 + 1;
  #L4785d2.  v6:= v5[v6] @kind byte;
  #L4785d6.  v6:= v6 ^& 255;
  #L4785da.  v6:= v6 ^< 16;
  #L4785de.  v1:= v1 ^| v6 @kind int;
  #L4785e0.  v6:= v7 + 1;
  #L4785e4.  v7:= v5[v7] @kind byte;
  #L4785e8.  v7:= v7 ^& 255;
  #L4785ec.  v7:= v7 ^< 8;
  #L4785f0.  v1:= v1 ^| v7 @kind int;
  #L4785f2.  v7:= v6 + 1;
  #L4785f6.  v5:= v5[v6] @kind byte;
  #L4785fa.  v5:= v5 ^& 255;
  #L4785fe.  v1:= v1 ^| v5 @kind int;
  #L478600.  v5:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478604.  v5:= v5 - v2 @kind long;
  #L478606.  v8.`okio.Buffer.size` @type ^`long` := v5 @kind wide;
  #L47860a.  if v7 != v4 then goto L478622;
  #L47860e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L478614.  v2:= temp @kind object;
  #L478616.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L47861a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L478620.  goto L478626;
  #L478622.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L478626.  return v1;
  #L478628.  v0:= new `java.lang.IllegalStateException`;
  #L47862c.  v1:= new `java.lang.StringBuilder`;
  #L478630.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L478636.  v2:= "size < 4: " @kind object;
  #L47863a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L478640.  v2:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478644.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L47864a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L478650.  v1:= temp @kind object;
  #L478652.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L478658.  throw v0;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47866c.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L478672.  v0:= temp;
  #L478674.  call temp:= `reverseBytesInt`(v0) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L47867a.  v0:= temp;
  #L47867c.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v15 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4796d0.  v0:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4796d4.  v2:= 8L;
  #L4796d8.  v4:= lcmp(v0, v2);
  #L4796dc.  if v4 < 0 then goto L4797e6;
  #L4796e0.  v0:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L4796e4.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L4796e8.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L4796ec.  v5:= v4 - v1 @kind int;
  #L4796f0.  v6:= 32I;
  #L4796f4.  v7:= 8I;
  #L4796f8.  if v5 >= v7 then goto L479724;
  #L4796fc.  call temp:= `readInt`(v15) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L479702.  v0:= temp;
  #L479704.  v0:= (`long`) v0 @kind i2l;
  #L479706.  v2:= 4294967295L;
  #L479710.  v0:= v0 ^& v2 @kind long;
  #L479712.  v0:= v0 ^< v6 @kind long;
  #L479714.  call temp:= `readInt`(v15) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L47971a.  v4:= temp;
  #L47971c.  v4:= (`long`) v4 @kind i2l;
  #L47971e.  v2:= v2 ^& v4 @kind long;
  #L479720.  v0:= v0 ^| v2 @kind long;
  #L479722.  return v0 @kind wide;
  #L479724.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479728.  v8:= v1 + 1;
  #L47972c.  v1:= v5[v1] @kind byte;
  #L479730.  v9:= (`long`) v1 @kind i2l;
  #L479732.  v11:= 255L;
  #L479736.  v9:= v9 ^& v11 @kind long;
  #L479738.  v1:= 56I;
  #L47973c.  v9:= v9 ^< v1 @kind long;
  #L47973e.  v1:= v8 + 1;
  #L479742.  v8:= v5[v8] @kind byte;
  #L479746.  v13:= (`long`) v8 @kind i2l;
  #L479748.  v13:= v13 ^& v11 @kind long;
  #L47974a.  v8:= 48I;
  #L47974e.  v13:= v13 ^< v8 @kind long;
  #L479750.  v9:= v9 ^| v13 @kind long;
  #L479752.  v8:= v1 + 1;
  #L479756.  v1:= v5[v1] @kind byte;
  #L47975a.  v13:= (`long`) v1 @kind i2l;
  #L47975c.  v13:= v13 ^& v11 @kind long;
  #L47975e.  v1:= 40I;
  #L479762.  v13:= v13 ^< v1 @kind long;
  #L479764.  v9:= v9 ^| v13 @kind long;
  #L479766.  v1:= v8 + 1;
  #L47976a.  v8:= v5[v8] @kind byte;
  #L47976e.  v13:= (`long`) v8 @kind i2l;
  #L479770.  v13:= v13 ^& v11 @kind long;
  #L479772.  v13:= v13 ^< v6 @kind long;
  #L479774.  v9:= v9 ^| v13 @kind long;
  #L479776.  v6:= v1 + 1;
  #L47977a.  v1:= v5[v1] @kind byte;
  #L47977e.  v13:= (`long`) v1 @kind i2l;
  #L479780.  v13:= v13 ^& v11 @kind long;
  #L479782.  v1:= 24I;
  #L479786.  v13:= v13 ^< v1 @kind long;
  #L479788.  v9:= v9 ^| v13 @kind long;
  #L47978a.  v1:= v6 + 1;
  #L47978e.  v6:= v5[v6] @kind byte;
  #L479792.  v13:= (`long`) v6 @kind i2l;
  #L479794.  v13:= v13 ^& v11 @kind long;
  #L479796.  v6:= 16I;
  #L47979a.  v13:= v13 ^< v6 @kind long;
  #L47979c.  v9:= v9 ^| v13 @kind long;
  #L47979e.  v6:= v1 + 1;
  #L4797a2.  v1:= v5[v1] @kind byte;
  #L4797a6.  v13:= (`long`) v1 @kind i2l;
  #L4797a8.  v13:= v13 ^& v11 @kind long;
  #L4797aa.  v7:= v13 ^< v7 @kind long;
  #L4797ae.  v7:= v7 ^| v9 @kind long;
  #L4797b0.  v1:= v6 + 1;
  #L4797b4.  v5:= v5[v6] @kind byte;
  #L4797b8.  v5:= (`long`) v5 @kind i2l;
  #L4797ba.  v5:= v5 ^& v11 @kind long;
  #L4797bc.  v5:= v5 ^| v7 @kind long;
  #L4797be.  v7:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4797c2.  v7:= v7 - v2 @kind long;
  #L4797c4.  v15.`okio.Buffer.size` @type ^`long` := v7 @kind wide;
  #L4797c8.  if v1 != v4 then goto L4797e0;
  #L4797cc.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L4797d2.  v1:= temp @kind object;
  #L4797d4.  v15.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L4797d8.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L4797de.  goto L4797e4;
  #L4797e0.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L4797e4.  return v5 @kind wide;
  #L4797e6.  v0:= new `java.lang.IllegalStateException`;
  #L4797ea.  v1:= new `java.lang.StringBuilder`;
  #L4797ee.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4797f4.  v2:= "size < 8: " @kind object;
  #L4797f8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4797fe.  v2:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479802.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L479808.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47980e.  v1:= temp @kind object;
  #L479810.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479816.  throw v0;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L479828.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L47982e.  v0:= temp @kind wide;
  #L479830.  call temp:= `reverseBytesLong`(v0) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L479836.  v0:= temp @kind wide;
  #L479838.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v8 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L47ad64.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47ad68.  v2:= 2L;
  #L47ad6c.  v4:= lcmp(v0, v2);
  #L47ad70.  if v4 < 0 then goto L47adf8;
  #L47ad74.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47ad78.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L47ad7c.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L47ad80.  v5:= v4 - v1 @kind int;
  #L47ad84.  v6:= 2I;
  #L47ad86.  if v5 >= v6 then goto L47adac;
  #L47ad8a.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L47ad90.  v0:= temp;
  #L47ad92.  v0:= v0 ^& 255;
  #L47ad96.  v0:= v0 ^< 8;
  #L47ad9a.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L47ada0.  v1:= temp;
  #L47ada2.  v1:= v1 ^& 255;
  #L47ada6.  v0:= v0 ^| v1 @kind int;
  #L47ada8.  v0:= (`short`) v0 @kind i2s;
  #L47adaa.  return v0;
  #L47adac.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47adb0.  v6:= v1 + 1;
  #L47adb4.  v1:= v5[v1] @kind byte;
  #L47adb8.  v1:= v1 ^& 255;
  #L47adbc.  v1:= v1 ^< 8;
  #L47adc0.  v7:= v6 + 1;
  #L47adc4.  v5:= v5[v6] @kind byte;
  #L47adc8.  v5:= v5 ^& 255;
  #L47adcc.  v1:= v1 ^| v5 @kind int;
  #L47adce.  v5:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47add2.  v5:= v5 - v2 @kind long;
  #L47add4.  v8.`okio.Buffer.size` @type ^`long` := v5 @kind wide;
  #L47add8.  if v7 != v4 then goto L47adf0;
  #L47addc.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L47ade2.  v2:= temp @kind object;
  #L47ade4.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L47ade8.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L47adee.  goto L47adf4;
  #L47adf0.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L47adf4.  v0:= (`short`) v1 @kind i2s;
  #L47adf6.  return v0;
  #L47adf8.  v0:= new `java.lang.IllegalStateException`;
  #L47adfc.  v1:= new `java.lang.StringBuilder`;
  #L47ae00.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47ae06.  v2:= "size < 2: " @kind object;
  #L47ae0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47ae10.  v2:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47ae14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L47ae1a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47ae20.  v1:= temp @kind object;
  #L47ae22.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47ae28.  throw v0;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ae3c.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L47ae42.  v0:= temp;
  #L47ae44.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L47ae4a.  v0:= temp;
  #L47ae4c.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v6 @kind this, `long` v7 , `java.nio.charset.Charset` v9 @kind object) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4789ac.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4789b0.  v2:= 0L;
  #L4789b4.  v4:= v7 @kind wide;
  #L4789b6.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L4789bc.  if v9 == 0 then goto L478a88;
  #L4789c0.  v0:= 2147483647L;
  #L4789c6.  v2:= lcmp(v7, v0);
  #L4789ca.  if v2 > 0 then goto L478a5a;
  #L4789ce.  v0:= 0L;
  #L4789d2.  v2:= lcmp(v7, v0);
  #L4789d6.  if v2 != 0 then goto L4789e0;
  #L4789da.  v7:= "" @kind object;
  #L4789de.  return v7 @kind object;
  #L4789e0.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L4789e4.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L4789e8.  v1:= (`long`) v1 @kind i2l;
  #L4789ea.  v1:= v1 + v7 @kind long;
  #L4789ec.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L4789f0.  v3:= (`long`) v3 @kind i2l;
  #L4789f2.  v5:= lcmp(v1, v3);
  #L4789f6.  if v5 <= 0 then goto L478a0e;
  #L4789fa.  v0:= new `java.lang.String`;
  #L4789fe.  call temp:= `readByteArray`(v6, v7) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L478a04.  v7:= temp @kind object;
  #L478a06.  call `<init>`(v0, v7, v9) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L478a0c.  return v0 @kind object;
  #L478a0e.  v1:= new `java.lang.String`;
  #L478a12.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L478a16.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L478a1a.  v4:= (`int`) v7 @kind l2i;
  #L478a1c.  call `<init>`(v1, v2, v3, v4, v9) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L478a22.  v9:= v0.`okio.Segment.pos` @type ^`int`;
  #L478a26.  v2:= (`long`) v9 @kind i2l;
  #L478a28.  v2:= v2 + v7 @kind long;
  #L478a2a.  v9:= (`int`) v2 @kind l2i;
  #L478a2c.  v0.`okio.Segment.pos` @type ^`int` := v9;
  #L478a30.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478a34.  v2:= v2 - v7 @kind long;
  #L478a36.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L478a3a.  v7:= v0.`okio.Segment.pos` @type ^`int`;
  #L478a3e.  v8:= v0.`okio.Segment.limit` @type ^`int`;
  #L478a42.  if v7 != v8 then goto L478a58;
  #L478a46.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L478a4c.  v7:= temp @kind object;
  #L478a4e.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L478a52.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L478a58.  return v1 @kind object;
  #L478a5a.  v9:= new `java.lang.IllegalArgumentException`;
  #L478a5e.  v0:= new `java.lang.StringBuilder`;
  #L478a62.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L478a68.  v1:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L478a6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L478a72.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L478a78.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L478a7e.  v7:= temp @kind object;
  #L478a80.  call `<init>`(v9, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L478a86.  throw v9;
  #L478a88.  v7:= new `java.lang.IllegalArgumentException`;
  #L478a8c.  v8:= "charset == null" @kind object;
  #L478a90.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L478a96.  throw v7;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L478970.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478974.  call temp:= `readString`(v2, v0, v3) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L47897a.  v3:= temp @kind object;
  #L47897c.  return v3 @kind object;
  #L47897e.  v3:= Exception @type ^`java.io.EOFException` @kind object;
  #L478980.  v0:= new `java.lang.AssertionError`;
  #L478984.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L47898a.  throw v0;
  catch `java.io.EOFException` @[L478970..L47897c] goto L47897e;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v3 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L478aa8.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478aac.  v2:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L478ab0.  call temp:= `readString`(v3, v0, v2) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L478ab6.  v0:= temp @kind object;
  #L478ab8.  return v0 @kind object;
  #L478aba.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L478abc.  v1:= new `java.lang.AssertionError`;
  #L478ac0.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L478ac6.  throw v1;
  catch `java.io.EOFException` @[L478aa8..L478ab8] goto L478aba;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478ae8.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L478aec.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L478af2.  v2:= temp @kind object;
  #L478af4.  return v2 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L478690.  v0:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478694.  v2:= 0L;
  #L478698.  v4:= lcmp(v0, v2);
  #L47869c.  if v4 == 0 then goto L4787ea;
  #L4786a0.  call temp:= `getByte`(v12, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L4786a6.  v0:= temp;
  #L4786a8.  v1:= v0 ^& 128;
  #L4786ac.  v2:= 1I;
  #L4786ae.  v3:= 128I;
  #L4786b2.  v4:= 65533I;
  #L4786b8.  if v1 != 0 then goto L4786c8;
  #L4786bc.  v1:= v0 ^& 127;
  #L4786c0.  v5:= 0I;
  #L4786c2.  v5:= 1I;
  #L4786c4.  v6:= 0I;
  #L4786c6.  goto L47870e;
  #L4786c8.  v1:= v0 ^& 224;
  #L4786cc.  v5:= 192I;
  #L4786d0.  if v1 != v5 then goto L4786e0;
  #L4786d4.  v1:= v0 ^& 31;
  #L4786d8.  v5:= 2I;
  #L4786da.  v6:= 128I;
  #L4786de.  goto L47870e;
  #L4786e0.  v1:= v0 ^& 240;
  #L4786e4.  v5:= 224I;
  #L4786e8.  if v1 != v5 then goto L4786f8;
  #L4786ec.  v1:= v0 ^& 15;
  #L4786f0.  v5:= 3I;
  #L4786f2.  v6:= 2048I;
  #L4786f6.  goto L47870e;
  #L4786f8.  v1:= v0 ^& 248;
  #L4786fc.  v5:= 240I;
  #L478700.  if v1 != v5 then goto L4787de;
  #L478704.  v1:= v0 ^& 7;
  #L478708.  v5:= 4I;
  #L47870a.  v6:= 65536I;
  #L47870e.  v7:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478712.  v9:= (`long`) v5 @kind i2l;
  #L478714.  v11:= lcmp(v7, v9);
  #L478718.  if v11 < 0 then goto L47877a;
  #L47871c.  if v2 >= v5 then goto L47874a;
  #L478720.  v7:= (`long`) v2 @kind i2l;
  #L478722.  call temp:= `getByte`(v12, v7) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L478728.  v0:= temp;
  #L47872a.  v11:= v0 ^& 192;
  #L47872e.  if v11 != v3 then goto L478742;
  #L478732.  v1:= v1 ^< 6;
  #L478736.  v0:= v0 ^& 63;
  #L47873a.  v1:= v1 ^| v0 @kind int;
  #L47873c.  v2:= v2 + 1;
  #L478740.  goto L47871c;
  #L478742.  call `skip`(v12, v7) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L478748.  return v4;
  #L47874a.  call `skip`(v12, v9) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L478750.  v0:= 1114111I;
  #L478756.  if v1 <= v0 then goto L47875c;
  #L47875a.  return v4;
  #L47875c.  v0:= 55296I;
  #L478762.  if v1 < v0 then goto L478772;
  #L478766.  v0:= 57343I;
  #L47876c.  if v1 > v0 then goto L478772;
  #L478770.  return v4;
  #L478772.  if v1 >= v6 then goto L478778;
  #L478776.  return v4;
  #L478778.  return v1;
  #L47877a.  v1:= new `java.io.EOFException`;
  #L47877e.  v2:= new `java.lang.StringBuilder`;
  #L478782.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L478788.  v3:= "size < " @kind object;
  #L47878c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L478792.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L478798.  v3:= ": " @kind object;
  #L47879c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4787a2.  v3:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4787a6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4787ac.  v3:= " (to read code point prefixed 0x" @kind object;
  #L4787b0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4787b6.  call temp:= `toHexString`(v0) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L4787bc.  v0:= temp @kind object;
  #L4787be.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4787c4.  v0:= ")" @kind object;
  #L4787c8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4787ce.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4787d4.  v0:= temp @kind object;
  #L4787d6.  call `<init>`(v1, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4787dc.  throw v1;
  #L4787de.  v0:= 1L;
  #L4787e2.  call `skip`(v12, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L4787e8.  return v4;
  #L4787ea.  v0:= new `java.io.EOFException`;
  #L4787ee.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4787f4.  goto L4787f8;
  #L4787f6.  throw v0;
  #L4787f8.  goto L4787f6;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L478b08.  v0:= 10I;
  #L478b0c.  call temp:= `indexOf`(v5, v0) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L478b12.  v0:= temp @kind wide;
  #L478b14.  v2:= -1L;
  #L478b18.  v4:= lcmp(v0, v2);
  #L478b1c.  if v4 != 0 then goto L478b3e;
  #L478b20.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478b24.  v2:= 0L;
  #L478b28.  v4:= lcmp(v0, v2);
  #L478b2c.  if v4 == 0 then goto L478b3a;
  #L478b30.  call temp:= `readUtf8`(v5, v0) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L478b36.  v0:= temp @kind object;
  #L478b38.  goto L478b3c;
  #L478b3a.  v0:= 0I;
  #L478b3c.  return v0 @kind object;
  #L478b3e.  call temp:= `readUtf8Line`(v5, v0) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L478b44.  v0:= temp @kind object;
  #L478b46.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L478b58.  v0:= 1L;
  #L478b5c.  v2:= 0L;
  #L478b60.  v4:= lcmp(v7, v2);
  #L478b64.  if v4 <= 0 then goto L478b90;
  #L478b68.  v2:= v7 - v0 @kind long;
  #L478b6c.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L478b72.  v4:= temp;
  #L478b74.  v5:= 13I;
  #L478b78.  if v4 != v5 then goto L478b90;
  #L478b7c.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L478b82.  v7:= temp @kind object;
  #L478b84.  v0:= 2L;
  #L478b88.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L478b8e.  return v7 @kind object;
  #L478b90.  call temp:= `readUtf8`(v6, v7) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L478b96.  v7:= temp @kind object;
  #L478b98.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L478b9e.  return v7 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L478bb0.  v0:= 9223372036854775807L;
  #L478bba.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L478bc0.  v0:= temp @kind object;
  #L478bc2.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v10 @kind this, `long` v11 ) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L478bd4.  v0:= 0L;
  #L478bd8.  v2:= lcmp(v11, v0);
  #L478bdc.  if v2 < 0 then goto L478cf8;
  #L478be0.  v0:= 1L;
  #L478be4.  v2:= 9223372036854775807L;
  #L478bee.  v4:= lcmp(v11, v2);
  #L478bf2.  if v4 != 0 then goto L478bf8;
  #L478bf6.  goto L478bfc;
  #L478bf8.  v2:= v11 + v0 @kind long;
  #L478bfc.  v5:= 10I;
  #L478c00.  v6:= 0L;
  #L478c04.  v4:= v10 @kind object;
  #L478c06.  v8:= v2 @kind wide;
  #L478c08.  call temp:= `indexOf`(v4, v5, v6, v8) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L478c0e.  v4:= temp @kind wide;
  #L478c10.  v6:= -1L;
  #L478c14.  v8:= lcmp(v4, v6);
  #L478c18.  if v8 == 0 then goto L478c26;
  #L478c1c.  call temp:= `readUtf8Line`(v10, v4) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L478c22.  v11:= temp @kind object;
  #L478c24.  return v11 @kind object;
  #L478c26.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L478c2c.  v4:= temp @kind wide;
  #L478c2e.  v6:= lcmp(v2, v4);
  #L478c32.  if v6 >= 0 then goto L478c64;
  #L478c36.  v0:= v2 - v0 @kind long;
  #L478c3a.  call temp:= `getByte`(v10, v0) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L478c40.  v0:= temp;
  #L478c42.  v1:= 13I;
  #L478c46.  if v0 != v1 then goto L478c64;
  #L478c4a.  call temp:= `getByte`(v10, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L478c50.  v0:= temp;
  #L478c52.  v1:= 10I;
  #L478c56.  if v0 != v1 then goto L478c64;
  #L478c5a.  call temp:= `readUtf8Line`(v10, v2) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L478c60.  v11:= temp @kind object;
  #L478c62.  return v11 @kind object;
  #L478c64.  v6:= new `okio.Buffer`;
  #L478c68.  call `<init>`(v6) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L478c6e.  v2:= 0L;
  #L478c72.  v0:= 32L;
  #L478c76.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L478c7c.  v4:= temp @kind wide;
  #L478c7e.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L478c84.  v4:= temp @kind wide;
  #L478c86.  v0:= v10 @kind object;
  #L478c88.  v1:= v6 @kind object;
  #L478c8a.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L478c90.  v0:= new `java.io.EOFException`;
  #L478c94.  v1:= new `java.lang.StringBuilder`;
  #L478c98.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L478c9e.  v2:= "\\n not found: limit=" @kind object;
  #L478ca2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L478ca8.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L478cae.  v2:= temp @kind wide;
  #L478cb0.  call temp:= `min`(v2, v11) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L478cb6.  v11:= temp @kind wide;
  #L478cb8.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L478cbe.  v11:= " content=" @kind object;
  #L478cc2.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L478cc8.  call temp:= `readByteString`(v6) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L478cce.  v11:= temp @kind object;
  #L478cd0.  call temp:= `hex`(v11) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L478cd6.  v11:= temp @kind object;
  #L478cd8.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L478cde.  v11:= 8230I;
  #L478ce2.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L478ce8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L478cee.  v11:= temp @kind object;
  #L478cf0.  call `<init>`(v0, v11) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L478cf6.  throw v0;
  #L478cf8.  v0:= new `java.lang.IllegalArgumentException`;
  #L478cfc.  v1:= new `java.lang.StringBuilder`;
  #L478d00.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L478d06.  v2:= "limit < 0: " @kind object;
  #L478d0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L478d10.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L478d16.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L478d1c.  v11:= temp @kind object;
  #L478d1e.  call `<init>`(v0, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L478d24.  throw v0;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4782d0.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4782d4.  v2:= lcmp(v0, v4);
  #L4782d8.  if v2 < 0 then goto L4782e0;
  #L4782dc.  v4:= 1I;
  #L4782de.  goto L4782e2;
  #L4782e0.  v4:= 0I;
  #L4782e2.  return v4;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47b028.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47b02c.  v2:= lcmp(v0, v4);
  #L47b030.  if v2 < 0 then goto L47b036;
  #L47b034.  return @kind void;
  #L47b036.  v4:= new `java.io.EOFException`;
  #L47b03a.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L47b040.  throw v4;
}
procedure `java.util.List` `segmentSizes`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.segmentSizes:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L478d5c.  v0:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478d60.  if v0 != 0 then goto L478d6e;
  #L478d64.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L478d6a.  v0:= temp @kind object;
  #L478d6c.  return v0 @kind object;
  #L478d6e.  v0:= new `java.util.ArrayList`;
  #L478d72.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L478d78.  v1:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478d7c.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L478d80.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478d84.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L478d88.  v1:= v1 - v2 @kind int;
  #L478d8a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L478d90.  v1:= temp @kind object;
  #L478d92.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L478d98.  v1:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478d9c.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L478da0.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478da4.  if v1 == v2 then goto L478dc2;
  #L478da8.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L478dac.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L478db0.  v2:= v2 - v3 @kind int;
  #L478db2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L478db8.  v2:= temp @kind object;
  #L478dba.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L478dc0.  goto L478d9c;
  #L478dc2.  return v0 @kind object;
}
procedure `int` `select`(`okio.Buffer` v10 @kind this, `okio.Options` v11 @kind object) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L47880c.  v6:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L478810.  if v6 != 0 then goto L478822;
  #L478814.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L478818.  call temp:= `indexOf`(v11, v0) @signature `Lokio/Options;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L47881e.  v11:= temp;
  #L478820.  return v11;
  #L478822.  v11:= v11.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L478826.  v0:= 0I;
  #L478828.  v7:= length @variable v11;
  #L47882a.  v8:= 0I;
  #L47882c.  if v8 >= v7 then goto L478890;
  #L478830.  v9:= v11[v8] @kind object;
  #L478834.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L478838.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L47883e.  v2:= temp;
  #L478840.  v2:= (`long`) v2 @kind i2l;
  #L478842.  v4:= lcmp(v0, v2);
  #L478846.  if v4 < 0 then goto L47888a;
  #L47884a.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L47884e.  v4:= 0I;
  #L478850.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L478856.  v5:= temp;
  #L478858.  v0:= v10 @kind object;
  #L47885a.  v1:= v6 @kind object;
  #L47885c.  v3:= v9 @kind object;
  #L47885e.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L478864.  v0:= temp;
  #L478866.  if v0 == 0 then goto L47888a;
  #L47886a.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L478870.  v11:= temp;
  #L478872.  v0:= (`long`) v11 @kind i2l;
  #L478874.  call `skip`(v10, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L47887a.  return v8;
  #L47887c.  v11:= Exception @type ^`java.io.EOFException` @kind object;
  #L47887e.  v0:= new `java.lang.AssertionError`;
  #L478882.  call `<init>`(v0, v11) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L478888.  throw v0;
  #L47888a.  v8:= v8 + 1;
  #L47888e.  goto L47882c;
  #L478890.  v11:= -1I;
  #L478892.  return v11;
  catch `java.io.EOFException` @[L47886a..L47887a] goto L47887c;
}
procedure `int` `selectPrefix`(`okio.Buffer` v9 @kind this, `okio.Options` v10 @kind object) @signature `Lokio/Buffer;.selectPrefix:(Lokio/Options;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4788b4.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L4788b8.  v10:= v10.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L4788bc.  v7:= length @variable v10;
  #L4788be.  v0:= 0I;
  #L4788c0.  v8:= 0I;
  #L4788c2.  if v8 >= v7 then goto L478906;
  #L4788c6.  v3:= v10[v8] @kind object;
  #L4788ca.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L4788ce.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L4788d4.  v2:= temp;
  #L4788d6.  v4:= (`long`) v2 @kind i2l;
  #L4788d8.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4788de.  v0:= temp @kind wide;
  #L4788e0.  v5:= (`int`) v0 @kind l2i;
  #L4788e2.  if v5 == 0 then goto L478904;
  #L4788e6.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L4788ea.  v4:= 0I;
  #L4788ec.  v0:= v9 @kind object;
  #L4788ee.  v1:= v6 @kind object;
  #L4788f0.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L4788f6.  v0:= temp;
  #L4788f8.  if v0 == 0 then goto L4788fe;
  #L4788fc.  goto L478904;
  #L4788fe.  v8:= v8 + 1;
  #L478902.  goto L4788c2;
  #L478904.  return v8;
  #L478906.  v10:= -1I;
  #L478908.  return v10;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47abf0.  v0:= "SHA-1" @kind object;
  #L47abf4.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L47abfa.  v0:= temp @kind object;
  #L47abfc.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ac10.  v0:= "SHA-256" @kind object;
  #L47ac14.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L47ac1a.  v0:= temp @kind object;
  #L47ac1c.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ac30.  v0:= "SHA-512" @kind object;
  #L47ac34.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L47ac3a.  v0:= temp @kind object;
  #L47ac3c.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47984c.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479850.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47b054.  v0:= 0L;
  #L47b058.  v2:= lcmp(v7, v0);
  #L47b05c.  if v2 <= 0 then goto L47b0d6;
  #L47b060.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b064.  if v0 == 0 then goto L47b0ca;
  #L47b068.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L47b06c.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b070.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L47b074.  v0:= v0 - v1 @kind int;
  #L47b076.  v0:= (`long`) v0 @kind i2l;
  #L47b078.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L47b07e.  v0:= temp @kind wide;
  #L47b080.  v1:= (`int`) v0 @kind l2i;
  #L47b082.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47b086.  v4:= (`long`) v1 @kind i2l;
  #L47b088.  v2:= v2 - v4 @kind long;
  #L47b08a.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L47b08e.  v7:= v7 - v4 @kind long;
  #L47b090.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b094.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L47b098.  v2:= v2 + v1 @kind int;
  #L47b09a.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L47b09e.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b0a2.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L47b0a6.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b0aa.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L47b0ae.  if v0 != v1 then goto L47b054;
  #L47b0b2.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b0b6.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L47b0bc.  v1:= temp @kind object;
  #L47b0be.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L47b0c2.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L47b0c8.  goto L47b054;
  #L47b0ca.  v7:= new `java.io.EOFException`;
  #L47b0ce.  call `<init>`(v7) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L47b0d4.  throw v7;
  #L47b0d6.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47ac50.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47ac54.  v2:= 2147483647L;
  #L47ac5a.  v4:= lcmp(v0, v2);
  #L47ac5e.  if v4 > 0 then goto L47ac6e;
  #L47ac62.  v1:= (`int`) v0 @kind l2i;
  #L47ac64.  call temp:= `snapshot`(v5, v1) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L47ac6a.  v0:= temp @kind object;
  #L47ac6c.  return v0 @kind object;
  #L47ac6e.  v0:= new `java.lang.IllegalArgumentException`;
  #L47ac72.  v1:= new `java.lang.StringBuilder`;
  #L47ac76.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47ac7c.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L47ac80.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47ac86.  v2:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47ac8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L47ac90.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47ac96.  v1:= temp @kind object;
  #L47ac98.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47ac9e.  throw v0;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47acb0.  if v2 != 0 then goto L47acba;
  #L47acb4.  v2:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L47acb8.  return v2 @kind object;
  #L47acba.  v0:= new `okio.SegmentedByteString`;
  #L47acbe.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @kind direct;
  #L47acc4.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ad4c.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L47ad50.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478d38.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L478d3e.  v0:= temp @kind object;
  #L478d40.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L478d46.  v0:= temp @kind object;
  #L478d48.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment`(`okio.Buffer` v3 @kind this, `int` v4 ) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L47acd8.  v0:= 1I;
  #L47acda.  if v4 < v0 then goto L47ad30;
  #L47acde.  v0:= 8192I;
  #L47ace2.  if v4 > v0 then goto L47ad30;
  #L47ace6.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47acea.  if v1 != 0 then goto L47ad08;
  #L47acee.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L47acf4.  v4:= temp @kind object;
  #L47acf6.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L47acfa.  v4:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47acfe.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L47ad02.  v4.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L47ad06.  return v4 @kind object;
  #L47ad08.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L47ad0c.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L47ad10.  v2:= v2 + v4 @kind int;
  #L47ad12.  if v2 > v0 then goto L47ad1e;
  #L47ad16.  v4:= v1.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L47ad1a.  if v4 != 0 then goto L47ad2e;
  #L47ad1e.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L47ad24.  v4:= temp @kind object;
  #L47ad26.  call temp:= `push`(v1, v4) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L47ad2c.  v1:= temp @kind object;
  #L47ad2e.  return v1 @kind object;
  #L47ad30.  v4:= new `java.lang.IllegalArgumentException`;
  #L47ad34.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L47ad3a.  throw v4;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479c48.  if v2 == 0 then goto L479c54;
  #L479c4c.  call `write`(v2, v1) @signature `Lokio/ByteString;.write:(Lokio/Buffer;)V` @kind virtual;
  #L479c52.  return v1 @kind object;
  #L479c54.  v2:= new `java.lang.IllegalArgumentException`;
  #L479c58.  v0:= "byteString == null" @kind object;
  #L479c5c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479c62.  throw v2;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L479b90.  if v3 == 0 then goto L479ba2;
  #L479b94.  v0:= 0I;
  #L479b96.  v1:= length @variable v3;
  #L479b98.  call temp:= `write`(v2, v3, v0, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L479b9e.  v3:= temp @kind object;
  #L479ba0.  return v3 @kind object;
  #L479ba2.  v3:= new `java.lang.IllegalArgumentException`;
  #L479ba6.  v0:= "source == null" @kind object;
  #L479baa.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479bb0.  throw v3;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L479bc4.  if v10 == 0 then goto L479c24;
  #L479bc8.  v0:= length @variable v10;
  #L479bca.  v1:= (`long`) v0 @kind i2l;
  #L479bcc.  v3:= (`long`) v11 @kind i2l;
  #L479bce.  v7:= (`long`) v12 @kind i2l;
  #L479bd0.  v5:= v7 @kind wide;
  #L479bd2.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L479bd8.  v12:= v12 + v11 @kind int;
  #L479bda.  if v11 >= v12 then goto L479c18;
  #L479bde.  v0:= 1I;
  #L479be0.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L479be6.  v0:= temp @kind object;
  #L479be8.  v1:= v12 - v11 @kind int;
  #L479bec.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L479bf0.  v2:= v2 - 8192;
  #L479bf4.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L479bfa.  v1:= temp;
  #L479bfc.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479c00.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L479c04.  call `arraycopy`(v10, v11, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L479c0a.  v11:= v11 + v1 @kind int;
  #L479c0c.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L479c10.  v2:= v2 + v1 @kind int;
  #L479c12.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L479c16.  goto L479bda;
  #L479c18.  v10:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479c1c.  v10:= v10 + v7 @kind long;
  #L479c1e.  v9.`okio.Buffer.size` @type ^`long` := v10 @kind wide;
  #L479c22.  return v9 @kind object;
  #L479c24.  v10:= new `java.lang.IllegalArgumentException`;
  #L479c28.  v11:= "source == null" @kind object;
  #L479c2c.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479c32.  goto L479c36;
  #L479c34.  throw v10;
  #L479c36.  goto L479c34;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.ByteString` v1 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a7d0.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L47a7d6.  v1:= temp @kind object;
  #L47a7d8.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47a7ec.  v0:= 0L;
  #L47a7f0.  v2:= lcmp(v7, v0);
  #L47a7f4.  if v2 <= 0 then goto L47a81c;
  #L47a7f8.  call temp:= `read`(v6, v5, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L47a7fe.  v0:= temp @kind wide;
  #L47a800.  v2:= -1L;
  #L47a804.  v4:= lcmp(v0, v2);
  #L47a808.  if v4 == 0 then goto L47a810;
  #L47a80c.  v7:= v7 - v0 @kind long;
  #L47a80e.  goto L47a7ec;
  #L47a810.  v6:= new `java.io.EOFException`;
  #L47a814.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L47a81a.  throw v6;
  #L47a81c.  return v5 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a798.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L47a79e.  v1:= temp @kind object;
  #L47a7a0.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a7b4.  call temp:= `write`(v0, v1, v2, v3) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L47a7ba.  v1:= temp @kind object;
  #L47a7bc.  return v1 @kind object;
}
procedure `void` `write`(`okio.Buffer` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47b0e8.  if v7 == 0 then goto L47b212;
  #L47b0ec.  if v7 == v6 then goto L47b202;
  #L47b0f0.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47b0f4.  v2:= 0L;
  #L47b0f8.  v4:= v8 @kind wide;
  #L47b0fa.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L47b100.  v0:= 0L;
  #L47b104.  v2:= lcmp(v8, v0);
  #L47b108.  if v2 <= 0 then goto L47b200;
  #L47b10c.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b110.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L47b114.  v1:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b118.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L47b11c.  v0:= v0 - v1 @kind int;
  #L47b11e.  v0:= (`long`) v0 @kind i2l;
  #L47b120.  v2:= lcmp(v8, v0);
  #L47b124.  if v2 >= 0 then goto L47b1a0;
  #L47b128.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b12c.  if v0 == 0 then goto L47b136;
  #L47b130.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L47b134.  goto L47b138;
  #L47b136.  v0:= 0I;
  #L47b138.  if v0 == 0 then goto L47b18e;
  #L47b13c.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L47b140.  if v1 == 0 then goto L47b18e;
  #L47b144.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L47b148.  v1:= (`long`) v1 @kind i2l;
  #L47b14a.  v1:= v1 + v8 @kind long;
  #L47b14c.  v3:= v0.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L47b150.  if v3 == 0 then goto L47b158;
  #L47b154.  v3:= 0I;
  #L47b156.  goto L47b15c;
  #L47b158.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L47b15c.  v3:= (`long`) v3 @kind i2l;
  #L47b15e.  v1:= v1 - v3 @kind long;
  #L47b160.  v3:= 8192L;
  #L47b164.  v5:= lcmp(v1, v3);
  #L47b168.  if v5 > 0 then goto L47b18e;
  #L47b16c.  v1:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b170.  v2:= (`int`) v8 @kind l2i;
  #L47b172.  call `writeTo`(v1, v0, v2) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L47b178.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47b17c.  v0:= v0 - v8 @kind long;
  #L47b17e.  v7.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L47b182.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47b186.  v0:= v0 + v8 @kind long;
  #L47b188.  v6.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L47b18c.  return @kind void;
  #L47b18e.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b192.  v1:= (`int`) v8 @kind l2i;
  #L47b194.  call temp:= `split`(v0, v1) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L47b19a.  v0:= temp @kind object;
  #L47b19c.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L47b1a0.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b1a4.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L47b1a8.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L47b1ac.  v1:= v1 - v2 @kind int;
  #L47b1ae.  v1:= (`long`) v1 @kind i2l;
  #L47b1b0.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L47b1b6.  v3:= temp @kind object;
  #L47b1b8.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L47b1bc.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b1c0.  if v3 != 0 then goto L47b1d6;
  #L47b1c4.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L47b1c8.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47b1cc.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v0 @kind object;
  #L47b1d0.  v0.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L47b1d4.  goto L47b1e8;
  #L47b1d6.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L47b1da.  call temp:= `push`(v3, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L47b1e0.  v0:= temp @kind object;
  #L47b1e2.  call `compact`(v0) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L47b1e8.  v3:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47b1ec.  v3:= v3 - v1 @kind long;
  #L47b1ee.  v7.`okio.Buffer.size` @type ^`long` := v3 @kind wide;
  #L47b1f2.  v3:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47b1f6.  v3:= v3 + v1 @kind long;
  #L47b1f8.  v6.`okio.Buffer.size` @type ^`long` := v3 @kind wide;
  #L47b1fc.  v8:= v8 - v1 @kind long;
  #L47b1fe.  goto L47b100;
  #L47b200.  return @kind void;
  #L47b202.  v7:= new `java.lang.IllegalArgumentException`;
  #L47b206.  v8:= "source == this" @kind object;
  #L47b20a.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47b210.  throw v7;
  #L47b212.  v7:= new `java.lang.IllegalArgumentException`;
  #L47b216.  v8:= "source == null" @kind object;
  #L47b21a.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47b220.  goto L47b224;
  #L47b222.  throw v7;
  #L47b224.  goto L47b222;
}
procedure `long` `writeAll`(`okio.Buffer` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L479864.  if v8 == 0 then goto L47988a;
  #L479868.  v0:= 0L;
  #L47986c.  v2:= 8192L;
  #L479870.  call temp:= `read`(v8, v7, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L479876.  v2:= temp @kind wide;
  #L479878.  v4:= -1L;
  #L47987c.  v6:= lcmp(v2, v4);
  #L479880.  if v6 == 0 then goto L479888;
  #L479884.  v0:= v0 + v2 @kind long;
  #L479886.  goto L47986c;
  #L479888.  return v0 @kind wide;
  #L47988a.  v8:= new `java.lang.IllegalArgumentException`;
  #L47988e.  v0:= "source == null" @kind object;
  #L479892.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479898.  goto L47989c;
  #L47989a.  throw v8;
  #L47989c.  goto L47989a;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v4 @kind this, `int` v5 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L479c74.  v0:= 1I;
  #L479c76.  call temp:= `writableSegment`(v4, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L479c7c.  v0:= temp @kind object;
  #L479c7e.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479c82.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L479c86.  v3:= v2 + 1;
  #L479c8a.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L479c8e.  v5:= (`byte`) v5 @kind i2b;
  #L479c90.  v1[v2]:= v5 @kind byte;
  #L479c94.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479c98.  v2:= 1L;
  #L479c9c.  v0:= v0 + v2 @kind long;
  #L479c9e.  v4.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L479ca2.  return v4 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a830.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a836.  v1:= temp @kind object;
  #L47a838.  return v1 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v11 @kind this, `long` v12 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L479cb4.  v0:= 0L;
  #L479cb8.  v2:= lcmp(v12, v0);
  #L479cbc.  if v2 != 0 then goto L479cce;
  #L479cc0.  v12:= 48I;
  #L479cc4.  call temp:= `writeByte`(v11, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L479cca.  v12:= temp @kind object;
  #L479ccc.  return v12 @kind object;
  #L479cce.  v2:= 0I;
  #L479cd0.  v3:= 1I;
  #L479cd2.  v4:= lcmp(v12, v0);
  #L479cd6.  if v4 >= 0 then goto L479cf4;
  #L479cda.  v12:= -v12 @kind long;
  #L479cdc.  v2:= lcmp(v12, v0);
  #L479ce0.  if v2 >= 0 then goto L479cf2;
  #L479ce4.  v12:= "-9223372036854775808" @kind object;
  #L479ce8.  call temp:= `writeUtf8`(v11, v12) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L479cee.  v12:= temp @kind object;
  #L479cf0.  return v12 @kind object;
  #L479cf2.  v2:= 1I;
  #L479cf4.  v4:= 100000000L;
  #L479cfa.  v6:= 10L;
  #L479cfe.  v8:= lcmp(v12, v4);
  #L479d02.  if v8 >= 0 then goto L479d8c;
  #L479d06.  v4:= 10000L;
  #L479d0a.  v8:= lcmp(v12, v4);
  #L479d0e.  if v8 >= 0 then goto L479d48;
  #L479d12.  v4:= 100L;
  #L479d16.  v8:= lcmp(v12, v4);
  #L479d1a.  if v8 >= 0 then goto L479d30;
  #L479d1e.  v4:= lcmp(v12, v6);
  #L479d22.  if v4 >= 0 then goto L479d2a;
  #L479d26.  goto L479e7c;
  #L479d2a.  v3:= 2I;
  #L479d2c.  goto L479e7c;
  #L479d30.  v3:= 1000L;
  #L479d34.  v5:= lcmp(v12, v3);
  #L479d38.  if v5 >= 0 then goto L479d42;
  #L479d3c.  v3:= 3I;
  #L479d3e.  goto L479e7c;
  #L479d42.  v3:= 4I;
  #L479d44.  goto L479e7c;
  #L479d48.  v3:= 1000000L;
  #L479d4e.  v5:= lcmp(v12, v3);
  #L479d52.  if v5 >= 0 then goto L479d70;
  #L479d56.  v3:= 100000L;
  #L479d5c.  v5:= lcmp(v12, v3);
  #L479d60.  if v5 >= 0 then goto L479d6a;
  #L479d64.  v3:= 5I;
  #L479d66.  goto L479e7c;
  #L479d6a.  v3:= 6I;
  #L479d6c.  goto L479e7c;
  #L479d70.  v3:= 10000000L;
  #L479d76.  v5:= lcmp(v12, v3);
  #L479d7a.  if v5 >= 0 then goto L479d84;
  #L479d7e.  v3:= 7I;
  #L479d80.  goto L479e7c;
  #L479d84.  v3:= 8I;
  #L479d88.  goto L479e7c;
  #L479d8c.  v3:= 1000000000000L;
  #L479d96.  v5:= lcmp(v12, v3);
  #L479d9a.  if v5 >= 0 then goto L479de8;
  #L479d9e.  v3:= 10000000000L;
  #L479da8.  v5:= lcmp(v12, v3);
  #L479dac.  if v5 >= 0 then goto L479dca;
  #L479db0.  v3:= 1000000000L;
  #L479db6.  v5:= lcmp(v12, v3);
  #L479dba.  if v5 >= 0 then goto L479dc4;
  #L479dbe.  v3:= 9I;
  #L479dc2.  goto L479e7c;
  #L479dc4.  v3:= 10I;
  #L479dc8.  goto L479e7c;
  #L479dca.  v3:= 100000000000L;
  #L479dd4.  v5:= lcmp(v12, v3);
  #L479dd8.  if v5 >= 0 then goto L479de2;
  #L479ddc.  v3:= 11I;
  #L479de0.  goto L479e7c;
  #L479de2.  v3:= 12I;
  #L479de6.  goto L479e7c;
  #L479de8.  v3:= 1000000000000000L;
  #L479df2.  v5:= lcmp(v12, v3);
  #L479df6.  if v5 >= 0 then goto L479e30;
  #L479dfa.  v3:= 10000000000000L;
  #L479e04.  v5:= lcmp(v12, v3);
  #L479e08.  if v5 >= 0 then goto L479e12;
  #L479e0c.  v3:= 13I;
  #L479e10.  goto L479e7c;
  #L479e12.  v3:= 100000000000000L;
  #L479e1c.  v5:= lcmp(v12, v3);
  #L479e20.  if v5 >= 0 then goto L479e2a;
  #L479e24.  v3:= 14I;
  #L479e28.  goto L479e7c;
  #L479e2a.  v3:= 15I;
  #L479e2e.  goto L479e7c;
  #L479e30.  v3:= 100000000000000000L;
  #L479e3a.  v5:= lcmp(v12, v3);
  #L479e3e.  if v5 >= 0 then goto L479e60;
  #L479e42.  v3:= 10000000000000000L;
  #L479e4c.  v5:= lcmp(v12, v3);
  #L479e50.  if v5 >= 0 then goto L479e5a;
  #L479e54.  v3:= 16I;
  #L479e58.  goto L479e7c;
  #L479e5a.  v3:= 17I;
  #L479e5e.  goto L479e7c;
  #L479e60.  v3:= 1000000000000000000L;
  #L479e6a.  v5:= lcmp(v12, v3);
  #L479e6e.  if v5 >= 0 then goto L479e78;
  #L479e72.  v3:= 18I;
  #L479e76.  goto L479e7c;
  #L479e78.  v3:= 19I;
  #L479e7c.  if v2 == 0 then goto L479e84;
  #L479e80.  v3:= v3 + 1;
  #L479e84.  call temp:= `writableSegment`(v11, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L479e8a.  v4:= temp @kind object;
  #L479e8c.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479e90.  v8:= v4.`okio.Segment.limit` @type ^`int`;
  #L479e94.  v8:= v8 + v3 @kind int;
  #L479e96.  v9:= lcmp(v12, v0);
  #L479e9a.  if v9 == 0 then goto L479eb8;
  #L479e9e.  v9:= v12 %% v6 @kind long;
  #L479ea2.  v10:= (`int`) v9 @kind l2i;
  #L479ea4.  v8:= v8 + -1;
  #L479ea8.  v9:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L479eac.  v9:= v9[v10] @kind byte;
  #L479eb0.  v5[v8]:= v9 @kind byte;
  #L479eb4.  v12:= v12 / v6 @kind long;
  #L479eb6.  goto L479e96;
  #L479eb8.  if v2 == 0 then goto L479ec8;
  #L479ebc.  v8:= v8 + -1;
  #L479ec0.  v12:= 45I;
  #L479ec4.  v5[v8]:= v12 @kind byte;
  #L479ec8.  v12:= v4.`okio.Segment.limit` @type ^`int`;
  #L479ecc.  v12:= v12 + v3 @kind int;
  #L479ece.  v4.`okio.Segment.limit` @type ^`int` := v12;
  #L479ed2.  v12:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479ed6.  v0:= (`long`) v3 @kind i2l;
  #L479ed8.  v12:= v12 + v0 @kind long;
  #L479eda.  v11.`okio.Buffer.size` @type ^`long` := v12 @kind wide;
  #L479ede.  return v11 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a84c.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L47a852.  v1:= temp @kind object;
  #L47a854.  return v1 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v9 @kind this, `long` v10 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L479ef0.  v0:= 0L;
  #L479ef4.  v2:= lcmp(v10, v0);
  #L479ef8.  if v2 != 0 then goto L479f0a;
  #L479efc.  v10:= 48I;
  #L479f00.  call temp:= `writeByte`(v9, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L479f06.  v10:= temp @kind object;
  #L479f08.  return v10 @kind object;
  #L479f0a.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L479f10.  v0:= temp @kind wide;
  #L479f12.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L479f18.  v0:= temp;
  #L479f1a.  v1:= 4I;
  #L479f1c.  v0:= v0 / v1 @kind int;
  #L479f1e.  v0:= v0 + 1;
  #L479f22.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L479f28.  v2:= temp @kind object;
  #L479f2a.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479f2e.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L479f32.  v4:= v4 + v0 @kind int;
  #L479f34.  v4:= v4 + -1;
  #L479f38.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L479f3c.  if v4 < v5 then goto L479f5c;
  #L479f40.  v6:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L479f44.  v7:= 15L;
  #L479f48.  v7:= v7 ^& v10 @kind long;
  #L479f4a.  v8:= (`int`) v7 @kind l2i;
  #L479f4c.  v6:= v6[v8] @kind byte;
  #L479f50.  v3[v4]:= v6 @kind byte;
  #L479f54.  v10:= v10 ^>> v1 @kind long;
  #L479f56.  v4:= v4 + -1;
  #L479f5a.  goto L479f3c;
  #L479f5c.  v10:= v2.`okio.Segment.limit` @type ^`int`;
  #L479f60.  v10:= v10 + v0 @kind int;
  #L479f62.  v2.`okio.Segment.limit` @type ^`int` := v10;
  #L479f66.  v10:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479f6a.  v0:= (`long`) v0 @kind i2l;
  #L479f6c.  v10:= v10 + v0 @kind long;
  #L479f6e.  v9.`okio.Buffer.size` @type ^`long` := v10 @kind wide;
  #L479f72.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a868.  call temp:= `writeHexadecimalUnsignedLong`(v0, v1) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L47a86e.  v1:= temp @kind object;
  #L47a870.  return v1 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L479f84.  v0:= 4I;
  #L479f86.  call temp:= `writableSegment`(v5, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L479f8c.  v0:= temp @kind object;
  #L479f8e.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L479f92.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L479f96.  v3:= v2 + 1;
  #L479f9a.  v4:= v6 ^>> 24;
  #L479f9e.  v4:= v4 ^& 255;
  #L479fa2.  v4:= (`byte`) v4 @kind i2b;
  #L479fa4.  v1[v2]:= v4 @kind byte;
  #L479fa8.  v2:= v3 + 1;
  #L479fac.  v4:= v6 ^>> 16;
  #L479fb0.  v4:= v4 ^& 255;
  #L479fb4.  v4:= (`byte`) v4 @kind i2b;
  #L479fb6.  v1[v3]:= v4 @kind byte;
  #L479fba.  v3:= v2 + 1;
  #L479fbe.  v4:= v6 ^>> 8;
  #L479fc2.  v4:= v4 ^& 255;
  #L479fc6.  v4:= (`byte`) v4 @kind i2b;
  #L479fc8.  v1[v2]:= v4 @kind byte;
  #L479fcc.  v2:= v3 + 1;
  #L479fd0.  v6:= v6 ^& 255;
  #L479fd4.  v6:= (`byte`) v6 @kind i2b;
  #L479fd6.  v1[v3]:= v6 @kind byte;
  #L479fda.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L479fde.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L479fe2.  v2:= 4L;
  #L479fe6.  v0:= v0 + v2 @kind long;
  #L479fe8.  v5.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L479fec.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a884.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L47a88a.  v1:= temp @kind object;
  #L47a88c.  return v1 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L47a000.  call temp:= `reverseBytesInt`(v1) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L47a006.  v1:= temp;
  #L47a008.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L47a00e.  v1:= temp @kind object;
  #L47a010.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a8a0.  call temp:= `writeIntLe`(v0, v1) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L47a8a6.  v1:= temp @kind object;
  #L47a8a8.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47a024.  v0:= 8I;
  #L47a028.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L47a02e.  v1:= temp @kind object;
  #L47a030.  v2:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47a034.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L47a038.  v4:= v3 + 1;
  #L47a03c.  v5:= 56I;
  #L47a040.  v5:= v10 ^>> v5 @kind long;
  #L47a044.  v7:= 255L;
  #L47a048.  v5:= v5 ^& v7 @kind long;
  #L47a04a.  v6:= (`int`) v5 @kind l2i;
  #L47a04c.  v5:= (`byte`) v6 @kind i2b;
  #L47a04e.  v2[v3]:= v5 @kind byte;
  #L47a052.  v3:= v4 + 1;
  #L47a056.  v5:= 48I;
  #L47a05a.  v5:= v10 ^>> v5 @kind long;
  #L47a05e.  v5:= v5 ^& v7 @kind long;
  #L47a060.  v6:= (`int`) v5 @kind l2i;
  #L47a062.  v5:= (`byte`) v6 @kind i2b;
  #L47a064.  v2[v4]:= v5 @kind byte;
  #L47a068.  v4:= v3 + 1;
  #L47a06c.  v5:= 40I;
  #L47a070.  v5:= v10 ^>> v5 @kind long;
  #L47a074.  v5:= v5 ^& v7 @kind long;
  #L47a076.  v6:= (`int`) v5 @kind l2i;
  #L47a078.  v5:= (`byte`) v6 @kind i2b;
  #L47a07a.  v2[v3]:= v5 @kind byte;
  #L47a07e.  v3:= v4 + 1;
  #L47a082.  v5:= 32I;
  #L47a086.  v5:= v10 ^>> v5 @kind long;
  #L47a08a.  v5:= v5 ^& v7 @kind long;
  #L47a08c.  v6:= (`int`) v5 @kind l2i;
  #L47a08e.  v5:= (`byte`) v6 @kind i2b;
  #L47a090.  v2[v4]:= v5 @kind byte;
  #L47a094.  v4:= v3 + 1;
  #L47a098.  v5:= 24I;
  #L47a09c.  v5:= v10 ^>> v5 @kind long;
  #L47a0a0.  v5:= v5 ^& v7 @kind long;
  #L47a0a2.  v6:= (`int`) v5 @kind l2i;
  #L47a0a4.  v5:= (`byte`) v6 @kind i2b;
  #L47a0a6.  v2[v3]:= v5 @kind byte;
  #L47a0aa.  v3:= v4 + 1;
  #L47a0ae.  v5:= 16I;
  #L47a0b2.  v5:= v10 ^>> v5 @kind long;
  #L47a0b6.  v5:= v5 ^& v7 @kind long;
  #L47a0b8.  v6:= (`int`) v5 @kind l2i;
  #L47a0ba.  v5:= (`byte`) v6 @kind i2b;
  #L47a0bc.  v2[v4]:= v5 @kind byte;
  #L47a0c0.  v4:= v3 + 1;
  #L47a0c4.  v5:= v10 ^>> v0 @kind long;
  #L47a0c8.  v5:= v5 ^& v7 @kind long;
  #L47a0ca.  v0:= (`int`) v5 @kind l2i;
  #L47a0cc.  v0:= (`byte`) v0 @kind i2b;
  #L47a0ce.  v2[v3]:= v0 @kind byte;
  #L47a0d2.  v0:= v4 + 1;
  #L47a0d6.  v10:= v10 ^& v7 @kind long;
  #L47a0d8.  v11:= (`int`) v10 @kind l2i;
  #L47a0da.  v10:= (`byte`) v11 @kind i2b;
  #L47a0dc.  v2[v4]:= v10 @kind byte;
  #L47a0e0.  v1.`okio.Segment.limit` @type ^`int` := v0;
  #L47a0e4.  v10:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47a0e8.  v0:= 8L;
  #L47a0ec.  v10:= v10 + v0 @kind long;
  #L47a0ee.  v9.`okio.Buffer.size` @type ^`long` := v10 @kind wide;
  #L47a0f2.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a8bc.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L47a8c2.  v1:= temp @kind object;
  #L47a8c4.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L47a104.  call temp:= `reverseBytesLong`(v1) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L47a10a.  v1:= temp @kind wide;
  #L47a10c.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L47a112.  v1:= temp @kind object;
  #L47a114.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a8d8.  call temp:= `writeLongLe`(v0, v1) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L47a8de.  v1:= temp @kind object;
  #L47a8e0.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47a128.  v0:= 2I;
  #L47a12a.  call temp:= `writableSegment`(v5, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L47a130.  v0:= temp @kind object;
  #L47a132.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47a136.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L47a13a.  v3:= v2 + 1;
  #L47a13e.  v4:= v6 ^>> 8;
  #L47a142.  v4:= v4 ^& 255;
  #L47a146.  v4:= (`byte`) v4 @kind i2b;
  #L47a148.  v1[v2]:= v4 @kind byte;
  #L47a14c.  v2:= v3 + 1;
  #L47a150.  v6:= v6 ^& 255;
  #L47a154.  v6:= (`byte`) v6 @kind i2b;
  #L47a156.  v1[v3]:= v6 @kind byte;
  #L47a15a.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L47a15e.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47a162.  v2:= 2L;
  #L47a166.  v0:= v0 + v2 @kind long;
  #L47a168.  v5.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L47a16c.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a8f4.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L47a8fa.  v1:= temp @kind object;
  #L47a8fc.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L47a180.  v1:= (`short`) v1 @kind i2s;
  #L47a182.  call temp:= `reverseBytesShort`(v1) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L47a188.  v1:= temp;
  #L47a18a.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L47a190.  v1:= temp @kind object;
  #L47a192.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a910.  call temp:= `writeShortLe`(v0, v1) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L47a916.  v1:= temp @kind object;
  #L47a918.  return v1 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a1a4.  if v2 == 0 then goto L47a2ba;
  #L47a1a8.  if v3 < 0 then goto L47a28c;
  #L47a1ac.  if v4 < v3 then goto L47a24e;
  #L47a1b0.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L47a1b6.  v0:= temp;
  #L47a1b8.  if v4 > v0 then goto L47a208;
  #L47a1bc.  if v5 == 0 then goto L47a1f8;
  #L47a1c0.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L47a1c4.  call temp:= `equals`(v5, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47a1ca.  v0:= temp;
  #L47a1cc.  if v0 == 0 then goto L47a1da;
  #L47a1d0.  call temp:= `writeUtf8`(v1, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L47a1d6.  v2:= temp @kind object;
  #L47a1d8.  return v2 @kind object;
  #L47a1da.  call temp:= `substring`(v2, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L47a1e0.  v2:= temp @kind object;
  #L47a1e2.  call temp:= `getBytes`(v2, v5) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L47a1e8.  v2:= temp @kind object;
  #L47a1ea.  v3:= 0I;
  #L47a1ec.  v4:= length @variable v2;
  #L47a1ee.  call temp:= `write`(v1, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L47a1f4.  v2:= temp @kind object;
  #L47a1f6.  return v2 @kind object;
  #L47a1f8.  v2:= new `java.lang.IllegalArgumentException`;
  #L47a1fc.  v3:= "charset == null" @kind object;
  #L47a200.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a206.  throw v2;
  #L47a208.  v3:= new `java.lang.IllegalArgumentException`;
  #L47a20c.  v5:= new `java.lang.StringBuilder`;
  #L47a210.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47a216.  v0:= "endIndex > string.length: " @kind object;
  #L47a21a.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a220.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a226.  v4:= " > " @kind object;
  #L47a22a.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a230.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L47a236.  v2:= temp;
  #L47a238.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a23e.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47a244.  v2:= temp @kind object;
  #L47a246.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a24c.  throw v3;
  #L47a24e.  v2:= new `java.lang.IllegalArgumentException`;
  #L47a252.  v5:= new `java.lang.StringBuilder`;
  #L47a256.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47a25c.  v0:= "endIndex < beginIndex: " @kind object;
  #L47a260.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a266.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a26c.  v4:= " < " @kind object;
  #L47a270.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a276.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a27c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47a282.  v3:= temp @kind object;
  #L47a284.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a28a.  throw v2;
  #L47a28c.  v2:= new `java.lang.IllegalAccessError`;
  #L47a290.  v4:= new `java.lang.StringBuilder`;
  #L47a294.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47a29a.  v5:= "beginIndex < 0: " @kind object;
  #L47a29e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a2a4.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a2aa.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47a2b0.  v3:= temp @kind object;
  #L47a2b2.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a2b8.  throw v2;
  #L47a2ba.  v2:= new `java.lang.IllegalArgumentException`;
  #L47a2be.  v3:= "string == null" @kind object;
  #L47a2c2.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a2c8.  throw v2;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object, `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47a2dc.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L47a2e2.  v0:= temp;
  #L47a2e4.  v1:= 0I;
  #L47a2e6.  call temp:= `writeString`(v2, v3, v1, v0, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L47a2ec.  v3:= temp @kind object;
  #L47a2ee.  return v3 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a92c.  call temp:= `writeString`(v0, v1, v2, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L47a932.  v1:= temp @kind object;
  #L47a934.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a948.  call temp:= `writeString`(v0, v1, v2) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L47a94e.  v1:= temp @kind object;
  #L47a950.  return v1 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v2 @kind this, `java.io.OutputStream` v3 @kind object) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47a300.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47a304.  call temp:= `writeTo`(v2, v3, v0) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L47a30a.  v3:= temp @kind object;
  #L47a30c.  return v3 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object, `long` v8 ) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47a320.  if v7 == 0 then goto L47a3a4;
  #L47a324.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47a328.  v2:= 0L;
  #L47a32c.  v4:= v8 @kind wide;
  #L47a32e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L47a334.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47a338.  v1:= 0L;
  #L47a33c.  v3:= lcmp(v8, v1);
  #L47a340.  if v3 <= 0 then goto L47a3a2;
  #L47a344.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L47a348.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L47a34c.  v1:= v1 - v2 @kind int;
  #L47a34e.  v1:= (`long`) v1 @kind i2l;
  #L47a350.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L47a356.  v1:= temp @kind wide;
  #L47a358.  v2:= (`int`) v1 @kind l2i;
  #L47a35a.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47a35e.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L47a362.  call `write`(v7, v1, v3, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L47a368.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L47a36c.  v1:= v1 + v2 @kind int;
  #L47a36e.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L47a372.  v3:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47a376.  v1:= (`long`) v2 @kind i2l;
  #L47a378.  v3:= v3 - v1 @kind long;
  #L47a37a.  v6.`okio.Buffer.size` @type ^`long` := v3 @kind wide;
  #L47a37e.  v8:= v8 - v1 @kind long;
  #L47a380.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L47a384.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L47a388.  if v1 != v2 then goto L47a338;
  #L47a38c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L47a392.  v1:= temp @kind object;
  #L47a394.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L47a398.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L47a39e.  v0:= v1 @kind object;
  #L47a3a0.  goto L47a338;
  #L47a3a2.  return v6 @kind object;
  #L47a3a4.  v7:= new `java.lang.IllegalArgumentException`;
  #L47a3a8.  v8:= "out == null" @kind object;
  #L47a3ac.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a3b2.  goto L47a3b6;
  #L47a3b4.  throw v7;
  #L47a3b6.  goto L47a3b4;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47a3c8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L47a3ce.  v0:= temp;
  #L47a3d0.  v1:= 0I;
  #L47a3d2.  call temp:= `writeUtf8`(v2, v3, v1, v0) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L47a3d8.  v3:= temp @kind object;
  #L47a3da.  return v3 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47a3ec.  if v8 == 0 then goto L47a63a;
  #L47a3f0.  if v9 < 0 then goto L47a60c;
  #L47a3f4.  if v10 < v9 then goto L47a5ce;
  #L47a3f8.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L47a3fe.  v0:= temp;
  #L47a400.  if v10 > v0 then goto L47a588;
  #L47a404.  if v9 >= v10 then goto L47a586;
  #L47a408.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L47a40e.  v0:= temp;
  #L47a410.  v1:= 128I;
  #L47a414.  if v0 >= v1 then goto L47a488;
  #L47a418.  v2:= 1I;
  #L47a41a.  call temp:= `writableSegment`(v7, v2) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L47a420.  v2:= temp @kind object;
  #L47a422.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47a426.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L47a42a.  v4:= v4 - v9 @kind int;
  #L47a42c.  v5:= v4 - 8192;
  #L47a430.  call temp:= `min`(v10, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L47a436.  v5:= temp;
  #L47a438.  v6:= v9 + 1;
  #L47a43c.  v9:= v9 + v4 @kind int;
  #L47a43e.  v0:= (`byte`) v0 @kind i2b;
  #L47a440.  v3[v9]:= v0 @kind byte;
  #L47a444.  if v6 >= v5 then goto L47a466;
  #L47a448.  call temp:= `charAt`(v8, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L47a44e.  v9:= temp;
  #L47a450.  if v9 < v1 then goto L47a456;
  #L47a454.  goto L47a466;
  #L47a456.  v0:= v6 + 1;
  #L47a45a.  v6:= v6 + v4 @kind int;
  #L47a45c.  v9:= (`byte`) v9 @kind i2b;
  #L47a45e.  v3[v6]:= v9 @kind byte;
  #L47a462.  v6:= v0;
  #L47a464.  goto L47a444;
  #L47a466.  v4:= v4 + v6 @kind int;
  #L47a468.  v9:= v2.`okio.Segment.limit` @type ^`int`;
  #L47a46c.  v4:= v4 - v9 @kind int;
  #L47a46e.  v9:= v2.`okio.Segment.limit` @type ^`int`;
  #L47a472.  v9:= v9 + v4 @kind int;
  #L47a474.  v2.`okio.Segment.limit` @type ^`int` := v9;
  #L47a478.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47a47c.  v2:= (`long`) v4 @kind i2l;
  #L47a47e.  v0:= v0 + v2 @kind long;
  #L47a480.  v7.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L47a484.  v9:= v6;
  #L47a486.  goto L47a404;
  #L47a488.  v2:= 2048I;
  #L47a48c.  if v0 >= v2 then goto L47a4b0;
  #L47a490.  v2:= v0 ^> 6;
  #L47a494.  v2:= v2 ^| 192;
  #L47a498.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a49e.  v0:= v0 ^& 63;
  #L47a4a2.  v0:= v0 ^| v1 @kind int;
  #L47a4a4.  call temp:= `writeByte`(v7, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a4aa.  v9:= v9 + 1;
  #L47a4ae.  goto L47a404;
  #L47a4b0.  v2:= 55296I;
  #L47a4b6.  v3:= 63I;
  #L47a4ba.  if v0 < v2 then goto L47a55c;
  #L47a4be.  v2:= 57343I;
  #L47a4c4.  if v0 <= v2 then goto L47a4ca;
  #L47a4c8.  goto L47a55c;
  #L47a4ca.  v4:= v9 + 1;
  #L47a4ce.  if v4 >= v10 then goto L47a4dc;
  #L47a4d2.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L47a4d8.  v5:= temp;
  #L47a4da.  goto L47a4de;
  #L47a4dc.  v5:= 0I;
  #L47a4de.  v6:= 56319I;
  #L47a4e4.  if v0 > v6 then goto L47a550;
  #L47a4e8.  v6:= 56320I;
  #L47a4ee.  if v5 < v6 then goto L47a550;
  #L47a4f2.  if v5 <= v2 then goto L47a4f8;
  #L47a4f6.  goto L47a550;
  #L47a4f8.  v2:= 65536I;
  #L47a4fc.  v4:= -55297I;
  #L47a502.  v0:= v0 ^& v4 @kind int;
  #L47a504.  v0:= v0 ^< 10;
  #L47a508.  v4:= -56321I;
  #L47a50e.  v4:= v4 ^& v5 @kind int;
  #L47a510.  v0:= v0 ^| v4 @kind int;
  #L47a512.  v0:= v0 + v2 @kind int;
  #L47a514.  v2:= v0 ^> 18;
  #L47a518.  v2:= v2 ^| 240;
  #L47a51c.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a522.  v2:= v0 ^> 12;
  #L47a526.  v2:= v2 ^& v3 @kind int;
  #L47a528.  v2:= v2 ^| v1 @kind int;
  #L47a52a.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a530.  v2:= v0 ^> 6;
  #L47a534.  v2:= v2 ^& v3 @kind int;
  #L47a536.  v2:= v2 ^| v1 @kind int;
  #L47a538.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a53e.  v0:= v0 ^& v3 @kind int;
  #L47a540.  v0:= v0 ^| v1 @kind int;
  #L47a542.  call temp:= `writeByte`(v7, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a548.  v9:= v9 + 2;
  #L47a54c.  goto L47a404;
  #L47a550.  call temp:= `writeByte`(v7, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a556.  v9:= v4;
  #L47a558.  goto L47a404;
  #L47a55c.  v2:= v0 ^> 12;
  #L47a560.  v2:= v2 ^| 224;
  #L47a564.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a56a.  v2:= v0 ^> 6;
  #L47a56e.  v2:= v2 ^& v3 @kind int;
  #L47a570.  v2:= v2 ^| v1 @kind int;
  #L47a572.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a578.  v0:= v0 ^& 63;
  #L47a57c.  v0:= v0 ^| v1 @kind int;
  #L47a57e.  call temp:= `writeByte`(v7, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a584.  goto L47a4aa;
  #L47a586.  return v7 @kind object;
  #L47a588.  v9:= new `java.lang.IllegalArgumentException`;
  #L47a58c.  v0:= new `java.lang.StringBuilder`;
  #L47a590.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47a596.  v1:= "endIndex > string.length: " @kind object;
  #L47a59a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a5a0.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a5a6.  v10:= " > " @kind object;
  #L47a5aa.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a5b0.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L47a5b6.  v8:= temp;
  #L47a5b8.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a5be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47a5c4.  v8:= temp @kind object;
  #L47a5c6.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a5cc.  throw v9;
  #L47a5ce.  v8:= new `java.lang.IllegalArgumentException`;
  #L47a5d2.  v0:= new `java.lang.StringBuilder`;
  #L47a5d6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47a5dc.  v1:= "endIndex < beginIndex: " @kind object;
  #L47a5e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a5e6.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a5ec.  v10:= " < " @kind object;
  #L47a5f0.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a5f6.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a5fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47a602.  v9:= temp @kind object;
  #L47a604.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a60a.  throw v8;
  #L47a60c.  v8:= new `java.lang.IllegalArgumentException`;
  #L47a610.  v10:= new `java.lang.StringBuilder`;
  #L47a614.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47a61a.  v0:= "beginIndex < 0: " @kind object;
  #L47a61e.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a624.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a62a.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47a630.  v9:= temp @kind object;
  #L47a632.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a638.  throw v8;
  #L47a63a.  v8:= new `java.lang.IllegalArgumentException`;
  #L47a63e.  v9:= "string == null" @kind object;
  #L47a642.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a648.  goto L47a64c;
  #L47a64a.  throw v8;
  #L47a64c.  goto L47a64a;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a964.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L47a96a.  v1:= temp @kind object;
  #L47a96c.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a980.  call temp:= `writeUtf8`(v0, v1, v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L47a986.  v1:= temp @kind object;
  #L47a988.  return v1 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v3 @kind this, `int` v4 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47a660.  v0:= 128I;
  #L47a664.  if v4 >= v0 then goto L47a670;
  #L47a668.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a66e.  goto L47a720;
  #L47a670.  v1:= 2048I;
  #L47a674.  v2:= 63I;
  #L47a678.  if v4 >= v1 then goto L47a696;
  #L47a67c.  v1:= v4 ^> 6;
  #L47a680.  v1:= v1 ^| 192;
  #L47a684.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a68a.  v4:= v4 ^& v2 @kind int;
  #L47a68c.  v4:= v4 ^| v0 @kind int;
  #L47a68e.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a694.  goto L47a720;
  #L47a696.  v1:= 65536I;
  #L47a69a.  if v4 >= v1 then goto L47a6e2;
  #L47a69e.  v1:= 55296I;
  #L47a6a4.  if v4 < v1 then goto L47a6ba;
  #L47a6a8.  v1:= 57343I;
  #L47a6ae.  if v4 > v1 then goto L47a6ba;
  #L47a6b2.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a6b8.  goto L47a720;
  #L47a6ba.  v1:= v4 ^> 12;
  #L47a6be.  v1:= v1 ^| 224;
  #L47a6c2.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a6c8.  v1:= v4 ^> 6;
  #L47a6cc.  v1:= v1 ^& v2 @kind int;
  #L47a6ce.  v1:= v1 ^| v0 @kind int;
  #L47a6d0.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a6d6.  v4:= v4 ^& v2 @kind int;
  #L47a6d8.  v4:= v4 ^| v0 @kind int;
  #L47a6da.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a6e0.  goto L47a720;
  #L47a6e2.  v1:= 1114111I;
  #L47a6e8.  if v4 > v1 then goto L47a722;
  #L47a6ec.  v1:= v4 ^> 18;
  #L47a6f0.  v1:= v1 ^| 240;
  #L47a6f4.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a6fa.  v1:= v4 ^> 12;
  #L47a6fe.  v1:= v1 ^& v2 @kind int;
  #L47a700.  v1:= v1 ^| v0 @kind int;
  #L47a702.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a708.  v1:= v4 ^> 6;
  #L47a70c.  v1:= v1 ^& v2 @kind int;
  #L47a70e.  v1:= v1 ^| v0 @kind int;
  #L47a710.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a716.  v4:= v4 ^& v2 @kind int;
  #L47a718.  v4:= v4 ^| v0 @kind int;
  #L47a71a.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47a720.  return v3 @kind object;
  #L47a722.  v0:= new `java.lang.IllegalArgumentException`;
  #L47a726.  v1:= new `java.lang.StringBuilder`;
  #L47a72a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47a730.  v2:= "Unexpected code point: " @kind object;
  #L47a734.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a73a.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L47a740.  v4:= temp @kind object;
  #L47a742.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47a748.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47a74e.  v4:= temp @kind object;
  #L47a750.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47a756.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L47a99c.  call temp:= `writeUtf8CodePoint`(v0, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L47a9a2.  v1:= temp @kind object;
  #L47a9a4.  return v1 @kind object;
}
