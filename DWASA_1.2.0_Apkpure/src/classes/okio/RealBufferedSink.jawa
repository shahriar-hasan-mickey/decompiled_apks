record `okio.RealBufferedSink` @kind class @AccessFlag FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.buffer` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag ;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v1 @kind this, `okio.Sink` v2 @kind object) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L47ea30.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47ea36.  v0:= new `okio.Buffer`;
  #L47ea3a.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L47ea40.  v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L47ea44.  if v2 == 0 then goto L47ea4e;
  #L47ea48.  v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v2 @kind object;
  #L47ea4c.  return @kind void;
  #L47ea4e.  v2:= new `java.lang.NullPointerException`;
  #L47ea52.  v0:= "sink == null" @kind object;
  #L47ea56.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47ea5c.  throw v2;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e510.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e514.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47ea70.  v0:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47ea74.  if v0 == 0 then goto L47ea7a;
  #L47ea78.  return @kind void;
  #L47ea7a.  v0:= 0I;
  #L47ea7c.  v1:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47ea80.  v1:= v1.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47ea84.  v3:= 0L;
  #L47ea88.  v5:= lcmp(v1, v3);
  #L47ea8c.  if v5 <= 0 then goto L47eaaa;
  #L47ea90.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L47ea94.  v2:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47ea98.  v3:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47ea9c.  v3:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47eaa0.  call `write`(v1, v2, v3) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L47eaa6.  goto L47eaaa;
  #L47eaa8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47eaaa.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L47eaae.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L47eab4.  goto L47eabe;
  #L47eab6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47eab8.  if v0 != 0 then goto L47eabe;
  #L47eabc.  v0:= v1 @kind object;
  #L47eabe.  v1:= 1I;
  #L47eac0.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v1 @kind boolean;
  #L47eac4.  if v0 == 0 then goto L47eace;
  #L47eac8.  call `sneakyRethrow`(v0) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L47eace.  return @kind void;
  catch `java.lang.Throwable` @[L47ea7c..L47eaa6] goto L47eaa8;
  catch `java.lang.Throwable` @[L47eaaa..L47eab4] goto L47eab6;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47e528.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e52c.  if v0 != 0 then goto L47e558;
  #L47e530.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e534.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L47e53a.  v0:= temp @kind wide;
  #L47e53c.  v2:= 0L;
  #L47e540.  v4:= lcmp(v0, v2);
  #L47e544.  if v4 <= 0 then goto L47e556;
  #L47e548.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L47e54c.  v3:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e550.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L47e556.  return v5 @kind object;
  #L47e558.  v0:= new `java.lang.IllegalStateException`;
  #L47e55c.  v1:= "closed" @kind object;
  #L47e560.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e566.  throw v0;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47e578.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e57c.  if v0 != 0 then goto L47e5a8;
  #L47e580.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e584.  call temp:= `completeSegmentByteCount`(v0) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L47e58a.  v0:= temp @kind wide;
  #L47e58c.  v2:= 0L;
  #L47e590.  v4:= lcmp(v0, v2);
  #L47e594.  if v4 <= 0 then goto L47e5a6;
  #L47e598.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L47e59c.  v3:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e5a0.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L47e5a6.  return v5 @kind object;
  #L47e5a8.  v0:= new `java.lang.IllegalStateException`;
  #L47e5ac.  v1:= "closed" @kind object;
  #L47e5b0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e5b6.  throw v0;
}
procedure `void` `flush`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47eaf8.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47eafc.  if v0 != 0 then goto L47eb32;
  #L47eb00.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47eb04.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47eb08.  v2:= 0L;
  #L47eb0c.  v4:= lcmp(v0, v2);
  #L47eb10.  if v4 <= 0 then goto L47eb26;
  #L47eb14.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L47eb18.  v1:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47eb1c.  v2:= v1.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47eb20.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L47eb26.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L47eb2a.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L47eb30.  return @kind void;
  #L47eb32.  v0:= new `java.lang.IllegalStateException`;
  #L47eb36.  v1:= "closed" @kind object;
  #L47eb3a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47eb40.  throw v0;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e45c.  v0:= new `okio.RealBufferedSink$1`;
  #L47e460.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L47e466.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ea10.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L47ea14.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L47ea1a.  v0:= temp @kind object;
  #L47ea1c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47e478.  v0:= new `java.lang.StringBuilder`;
  #L47e47c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47e482.  v1:= "buffer(" @kind object;
  #L47e486.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47e48c.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L47e490.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47e496.  v1:= ")" @kind object;
  #L47e49a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47e4a0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47e4a6.  v0:= temp @kind object;
  #L47e4a8.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e640.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e644.  if v0 != 0 then goto L47e65c;
  #L47e648.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e64c.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L47e652.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e658.  v2:= temp @kind object;
  #L47e65a.  return v2 @kind object;
  #L47e65c.  v2:= new `java.lang.IllegalStateException`;
  #L47e660.  v0:= "closed" @kind object;
  #L47e664.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e66a.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47e67c.  v0:= 0L;
  #L47e680.  v2:= lcmp(v7, v0);
  #L47e684.  if v2 <= 0 then goto L47e6b6;
  #L47e688.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e68c.  call temp:= `read`(v6, v0, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L47e692.  v0:= temp @kind wide;
  #L47e694.  v2:= -1L;
  #L47e698.  v4:= lcmp(v0, v2);
  #L47e69c.  if v4 == 0 then goto L47e6aa;
  #L47e6a0.  v7:= v7 - v0 @kind long;
  #L47e6a2.  call temp:= `emitCompleteSegments`(v5) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e6a8.  goto L47e67c;
  #L47e6aa.  v6:= new `java.io.EOFException`;
  #L47e6ae.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L47e6b4.  throw v6;
  #L47e6b6.  return v5 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e5c8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e5cc.  if v0 != 0 then goto L47e5e4;
  #L47e5d0.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e5d4.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L47e5da.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e5e0.  v2:= temp @kind object;
  #L47e5e2.  return v2 @kind object;
  #L47e5e4.  v2:= new `java.lang.IllegalStateException`;
  #L47e5e8.  v0:= "closed" @kind object;
  #L47e5ec.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e5f2.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e604.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e608.  if v0 != 0 then goto L47e620;
  #L47e60c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e610.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L47e616.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e61c.  v2:= temp @kind object;
  #L47e61e.  return v2 @kind object;
  #L47e620.  v2:= new `java.lang.IllegalStateException`;
  #L47e624.  v3:= "closed" @kind object;
  #L47e628.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e62e.  throw v2;
}
procedure `void` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47eb54.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47eb58.  if v0 != 0 then goto L47eb6e;
  #L47eb5c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47eb60.  call `write`(v0, v2, v3) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L47eb66.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47eb6c.  return @kind void;
  #L47eb6e.  v2:= new `java.lang.IllegalStateException`;
  #L47eb72.  v3:= "closed" @kind object;
  #L47eb76.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47eb7c.  throw v2;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47e4bc.  if v8 == 0 then goto L47e4ec;
  #L47e4c0.  v0:= 0L;
  #L47e4c4.  v2:= v7.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e4c8.  v3:= 8192L;
  #L47e4cc.  call temp:= `read`(v8, v2, v3) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L47e4d2.  v2:= temp @kind wide;
  #L47e4d4.  v4:= -1L;
  #L47e4d8.  v6:= lcmp(v2, v4);
  #L47e4dc.  if v6 == 0 then goto L47e4ea;
  #L47e4e0.  v0:= v0 + v2 @kind long;
  #L47e4e2.  call temp:= `emitCompleteSegments`(v7) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e4e8.  goto L47e4c4;
  #L47e4ea.  return v0 @kind wide;
  #L47e4ec.  v8:= new `java.lang.IllegalArgumentException`;
  #L47e4f0.  v0:= "source == null" @kind object;
  #L47e4f4.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e4fa.  goto L47e4fe;
  #L47e4fc.  throw v8;
  #L47e4fe.  goto L47e4fc;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e6c8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e6cc.  if v0 != 0 then goto L47e6e4;
  #L47e6d0.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e6d4.  call temp:= `writeByte`(v0, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47e6da.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e6e0.  v2:= temp @kind object;
  #L47e6e2.  return v2 @kind object;
  #L47e6e4.  v2:= new `java.lang.IllegalStateException`;
  #L47e6e8.  v0:= "closed" @kind object;
  #L47e6ec.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e6f2.  throw v2;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e704.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e708.  if v0 != 0 then goto L47e720;
  #L47e70c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e710.  call temp:= `writeDecimalLong`(v0, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L47e716.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e71c.  v2:= temp @kind object;
  #L47e71e.  return v2 @kind object;
  #L47e720.  v2:= new `java.lang.IllegalStateException`;
  #L47e724.  v3:= "closed" @kind object;
  #L47e728.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e72e.  throw v2;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e740.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e744.  if v0 != 0 then goto L47e75c;
  #L47e748.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e74c.  call temp:= `writeHexadecimalUnsignedLong`(v0, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L47e752.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e758.  v2:= temp @kind object;
  #L47e75a.  return v2 @kind object;
  #L47e75c.  v2:= new `java.lang.IllegalStateException`;
  #L47e760.  v3:= "closed" @kind object;
  #L47e764.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e76a.  throw v2;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e77c.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e780.  if v0 != 0 then goto L47e798;
  #L47e784.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e788.  call temp:= `writeInt`(v0, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L47e78e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e794.  v2:= temp @kind object;
  #L47e796.  return v2 @kind object;
  #L47e798.  v2:= new `java.lang.IllegalStateException`;
  #L47e79c.  v0:= "closed" @kind object;
  #L47e7a0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e7a6.  throw v2;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e7b8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e7bc.  if v0 != 0 then goto L47e7d4;
  #L47e7c0.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e7c4.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L47e7ca.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e7d0.  v2:= temp @kind object;
  #L47e7d2.  return v2 @kind object;
  #L47e7d4.  v2:= new `java.lang.IllegalStateException`;
  #L47e7d8.  v0:= "closed" @kind object;
  #L47e7dc.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e7e2.  throw v2;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e7f4.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e7f8.  if v0 != 0 then goto L47e810;
  #L47e7fc.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e800.  call temp:= `writeLong`(v0, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L47e806.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e80c.  v2:= temp @kind object;
  #L47e80e.  return v2 @kind object;
  #L47e810.  v2:= new `java.lang.IllegalStateException`;
  #L47e814.  v3:= "closed" @kind object;
  #L47e818.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e81e.  throw v2;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e830.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e834.  if v0 != 0 then goto L47e84c;
  #L47e838.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e83c.  call temp:= `writeLongLe`(v0, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L47e842.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e848.  v2:= temp @kind object;
  #L47e84a.  return v2 @kind object;
  #L47e84c.  v2:= new `java.lang.IllegalStateException`;
  #L47e850.  v3:= "closed" @kind object;
  #L47e854.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e85a.  throw v2;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e86c.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e870.  if v0 != 0 then goto L47e888;
  #L47e874.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e878.  call temp:= `writeShort`(v0, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L47e87e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e884.  v2:= temp @kind object;
  #L47e886.  return v2 @kind object;
  #L47e888.  v2:= new `java.lang.IllegalStateException`;
  #L47e88c.  v0:= "closed" @kind object;
  #L47e890.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e896.  throw v2;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e8a8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e8ac.  if v0 != 0 then goto L47e8c4;
  #L47e8b0.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e8b4.  call temp:= `writeShortLe`(v0, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L47e8ba.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e8c0.  v2:= temp @kind object;
  #L47e8c2.  return v2 @kind object;
  #L47e8c4.  v2:= new `java.lang.IllegalStateException`;
  #L47e8c8.  v0:= "closed" @kind object;
  #L47e8cc.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e8d2.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e8e4.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e8e8.  if v0 != 0 then goto L47e900;
  #L47e8ec.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e8f0.  call temp:= `writeString`(v0, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L47e8f6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e8fc.  v2:= temp @kind object;
  #L47e8fe.  return v2 @kind object;
  #L47e900.  v2:= new `java.lang.IllegalStateException`;
  #L47e904.  v3:= "closed" @kind object;
  #L47e908.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e90e.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e920.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e924.  if v0 != 0 then goto L47e93c;
  #L47e928.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e92c.  call temp:= `writeString`(v0, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L47e932.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e938.  v2:= temp @kind object;
  #L47e93a.  return v2 @kind object;
  #L47e93c.  v2:= new `java.lang.IllegalStateException`;
  #L47e940.  v3:= "closed" @kind object;
  #L47e944.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e94a.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e95c.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e960.  if v0 != 0 then goto L47e978;
  #L47e964.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e968.  call temp:= `writeUtf8`(v0, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L47e96e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e974.  v2:= temp @kind object;
  #L47e976.  return v2 @kind object;
  #L47e978.  v2:= new `java.lang.IllegalStateException`;
  #L47e97c.  v0:= "closed" @kind object;
  #L47e980.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e986.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e998.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e99c.  if v0 != 0 then goto L47e9b4;
  #L47e9a0.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e9a4.  call temp:= `writeUtf8`(v0, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L47e9aa.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e9b0.  v2:= temp @kind object;
  #L47e9b2.  return v2 @kind object;
  #L47e9b4.  v2:= new `java.lang.IllegalStateException`;
  #L47e9b8.  v3:= "closed" @kind object;
  #L47e9bc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e9c2.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e9d4.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L47e9d8.  if v0 != 0 then goto L47e9f0;
  #L47e9dc.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L47e9e0.  call temp:= `writeUtf8CodePoint`(v0, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L47e9e6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L47e9ec.  v2:= temp @kind object;
  #L47e9ee.  return v2 @kind object;
  #L47e9f0.  v2:= new `java.lang.IllegalStateException`;
  #L47e9f4.  v0:= "closed" @kind object;
  #L47e9f8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e9fe.  throw v2;
}
