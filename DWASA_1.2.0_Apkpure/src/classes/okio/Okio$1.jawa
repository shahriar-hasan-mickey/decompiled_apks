record `okio.Okio$1` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `java.io.OutputStream` `okio.Okio$1.val$out` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Okio$1.val$timeout` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Okio$1` v0 @kind this, `okio.Timeout` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47d734.  v0.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L47d738.  v0.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` := v2 @kind object;
  #L47d73c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47d742.  return @kind void;
}
procedure `void` `close`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47d754.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L47d758.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L47d75e.  return @kind void;
}
procedure `void` `flush`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47d770.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L47d774.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L47d77a.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47d71c.  v0:= v1.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L47d720.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Okio$1` v2 @kind this) @signature `Lokio/Okio$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47d6d8.  v0:= new `java.lang.StringBuilder`;
  #L47d6dc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47d6e2.  v1:= "sink(" @kind object;
  #L47d6e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47d6ec.  v1:= v2.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L47d6f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47d6f6.  v1:= ")" @kind object;
  #L47d6fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47d700.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47d706.  v0:= temp @kind object;
  #L47d708.  return v0 @kind object;
}
procedure `void` `write`(`okio.Okio$1` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/Okio$1;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47d78c.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47d790.  v2:= 0L;
  #L47d794.  v4:= v8 @kind wide;
  #L47d796.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L47d79c.  v0:= 0L;
  #L47d7a0.  v2:= lcmp(v8, v0);
  #L47d7a4.  if v2 <= 0 then goto L47d816;
  #L47d7a8.  v0:= v6.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L47d7ac.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L47d7b2.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47d7b6.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L47d7ba.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L47d7be.  v1:= v1 - v2 @kind int;
  #L47d7c0.  v1:= (`long`) v1 @kind i2l;
  #L47d7c2.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L47d7c8.  v1:= temp @kind wide;
  #L47d7ca.  v2:= (`int`) v1 @kind l2i;
  #L47d7cc.  v1:= v6.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L47d7d0.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47d7d4.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L47d7d8.  call `write`(v1, v3, v4, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L47d7de.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L47d7e2.  v1:= v1 + v2 @kind int;
  #L47d7e4.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L47d7e8.  v1:= (`long`) v2 @kind i2l;
  #L47d7ea.  v8:= v8 - v1 @kind long;
  #L47d7ec.  v3:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47d7f0.  v3:= v3 - v1 @kind long;
  #L47d7f2.  v7.`okio.Buffer.size` @type ^`long` := v3 @kind wide;
  #L47d7f6.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L47d7fa.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L47d7fe.  if v1 != v2 then goto L47d79c;
  #L47d802.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L47d808.  v1:= temp @kind object;
  #L47d80a.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L47d80e.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L47d814.  goto L47d79c;
  #L47d816.  return @kind void;
}
