record `okio.ForwardingSink` @kind class @AccessFlag PUBLIC_ABSTRACT extends `okio.Sink` @kind interface {
  `okio.Sink` `okio.ForwardingSink.delegate` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.ForwardingSink` v1 @kind this, `okio.Sink` v2 @kind object) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L47c510.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47c516.  if v2 == 0 then goto L47c520;
  #L47c51a.  v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` := v2 @kind object;
  #L47c51e.  return @kind void;
  #L47c520.  v2:= new `java.lang.IllegalArgumentException`;
  #L47c524.  v0:= "delegate == null" @kind object;
  #L47c528.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47c52e.  throw v2;
}
procedure `void` `close`(`okio.ForwardingSink` v1 @kind this) @signature `Lokio/ForwardingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c540.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L47c544.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L47c54a.  return @kind void;
}
procedure `okio.Sink` `delegate`(`okio.ForwardingSink` v1 @kind this) @signature `Lokio/ForwardingSink;.delegate:()Lokio/Sink;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L47c4d8.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L47c4dc.  return v0 @kind object;
}
procedure `void` `flush`(`okio.ForwardingSink` v1 @kind this) @signature `Lokio/ForwardingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c55c.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L47c560.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L47c566.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.ForwardingSink` v1 @kind this) @signature `Lokio/ForwardingSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c4f0.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L47c4f4.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L47c4fa.  v0:= temp @kind object;
  #L47c4fc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.ForwardingSink` v2 @kind this) @signature `Lokio/ForwardingSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47c478.  v0:= new `java.lang.StringBuilder`;
  #L47c47c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47c482.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L47c488.  v1:= temp @kind object;
  #L47c48a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L47c490.  v1:= temp @kind object;
  #L47c492.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47c498.  v1:= "(" @kind object;
  #L47c49c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47c4a2.  v1:= v2.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L47c4a6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L47c4ac.  v1:= temp @kind object;
  #L47c4ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47c4b4.  v1:= ")" @kind object;
  #L47c4b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47c4be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47c4c4.  v0:= temp @kind object;
  #L47c4c6.  return v0 @kind object;
}
procedure `void` `write`(`okio.ForwardingSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c578.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L47c57c.  call `write`(v0, v2, v3) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L47c582.  return @kind void;
}
