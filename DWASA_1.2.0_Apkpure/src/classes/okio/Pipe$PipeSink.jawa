record `okio.Pipe$PipeSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `okio.Pipe` `okio.Pipe$PipeSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Pipe$PipeSink.timeout` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okio.Pipe$PipeSink` v0 @kind this, `okio.Pipe` v1 @kind object) @signature `Lokio/Pipe$PipeSink;.<init>:(Lokio/Pipe;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47df24.  v0.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` := v1 @kind object;
  #L47df28.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47df2e.  v1:= new `okio.Timeout`;
  #L47df32.  call `<init>`(v1) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L47df38.  v0.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L47df3c.  return @kind void;
}
procedure `void` `close`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47df50.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47df54.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47df58.  @monitorenter v0
  #L47df5a.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47df5e.  v1:= v1.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L47df62.  if v1 == 0 then goto L47df6a;
  #L47df66.  @monitorexit v0
  #L47df68.  return @kind void;
  #L47df6a.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47df6e.  v1:= v1.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L47df72.  if v1 == 0 then goto L47dfa4;
  #L47df76.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47df7a.  v1:= v1.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47df7e.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L47df84.  v1:= temp @kind wide;
  #L47df86.  v3:= 0L;
  #L47df8a.  v5:= lcmp(v1, v3);
  #L47df8e.  if v5 > 0 then goto L47df94;
  #L47df92.  goto L47dfa4;
  #L47df94.  v1:= new `java.io.IOException`;
  #L47df98.  v2:= "source is closed" @kind object;
  #L47df9c.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dfa2.  throw v1;
  #L47dfa4.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47dfa8.  v2:= 1I;
  #L47dfaa.  v1.`okio.Pipe.sinkClosed` @type ^`boolean` := v2 @kind boolean;
  #L47dfae.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47dfb2.  v1:= v1.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47dfb6.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L47dfbc.  @monitorexit v0
  #L47dfbe.  return @kind void;
  #L47dfc0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47dfc2.  @monitorexit v0
  #L47dfc4.  throw v1;
  catch `java.lang.Throwable` @[L47df5a..L47dfc4] goto L47dfc0;
}
procedure `void` `flush`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47dfe4.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47dfe8.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47dfec.  @monitorenter v0
  #L47dfee.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47dff2.  v1:= v1.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L47dff6.  if v1 != 0 then goto L47e038;
  #L47dffa.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47dffe.  v1:= v1.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L47e002.  if v1 == 0 then goto L47e034;
  #L47e006.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e00a.  v1:= v1.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47e00e.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L47e014.  v1:= temp @kind wide;
  #L47e016.  v3:= 0L;
  #L47e01a.  v5:= lcmp(v1, v3);
  #L47e01e.  if v5 > 0 then goto L47e024;
  #L47e022.  goto L47e034;
  #L47e024.  v1:= new `java.io.IOException`;
  #L47e028.  v2:= "source is closed" @kind object;
  #L47e02c.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e032.  throw v1;
  #L47e034.  @monitorexit v0
  #L47e036.  return @kind void;
  #L47e038.  v1:= new `java.lang.IllegalStateException`;
  #L47e03c.  v2:= "closed" @kind object;
  #L47e040.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e046.  throw v1;
  #L47e048.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47e04a.  @monitorexit v0
  #L47e04c.  throw v1;
  catch `java.lang.Throwable` @[L47dfee..L47e04c] goto L47e048;
}
procedure `okio.Timeout` `timeout`(`okio.Pipe$PipeSink` v1 @kind this) @signature `Lokio/Pipe$PipeSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47df0c.  v0:= v1.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` @kind object;
  #L47df10.  return v0 @kind object;
}
procedure `void` `write`(`okio.Pipe$PipeSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/Pipe$PipeSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47e06c.  v0:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e070.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47e074.  @monitorenter v0
  #L47e076.  v1:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e07a.  v1:= v1.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L47e07e.  if v1 != 0 then goto L47e10c;
  #L47e082.  v1:= 0L;
  #L47e086.  v3:= lcmp(v9, v1);
  #L47e08a.  if v3 <= 0 then goto L47e108;
  #L47e08e.  v3:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e092.  v3:= v3.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L47e096.  if v3 != 0 then goto L47e0f8;
  #L47e09a.  v3:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e09e.  v3:= v3.`okio.Pipe.maxBufferSize` @type ^`long` @kind wide;
  #L47e0a2.  v5:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e0a6.  v5:= v5.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47e0aa.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L47e0b0.  v5:= temp @kind wide;
  #L47e0b2.  v3:= v3 - v5 @kind long;
  #L47e0b4.  v5:= lcmp(v3, v1);
  #L47e0b8.  if v5 != 0 then goto L47e0d0;
  #L47e0bc.  v1:= v7.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` @kind object;
  #L47e0c0.  v2:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e0c4.  v2:= v2.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47e0c8.  call `waitUntilNotified`(v1, v2) @signature `Lokio/Timeout;.waitUntilNotified:(Ljava/lang/Object;)V` @kind virtual;
  #L47e0ce.  goto L47e082;
  #L47e0d0.  call temp:= `min`(v3, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L47e0d6.  v1:= temp @kind wide;
  #L47e0d8.  v3:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e0dc.  v3:= v3.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47e0e0.  call `write`(v3, v8, v1) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L47e0e6.  v9:= v9 - v1 @kind long;
  #L47e0e8.  v1:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L47e0ec.  v1:= v1.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L47e0f0.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L47e0f6.  goto L47e082;
  #L47e0f8.  v8:= new `java.io.IOException`;
  #L47e0fc.  v9:= "source is closed" @kind object;
  #L47e100.  call `<init>`(v8, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e106.  throw v8;
  #L47e108.  @monitorexit v0
  #L47e10a.  return @kind void;
  #L47e10c.  v8:= new `java.lang.IllegalStateException`;
  #L47e110.  v9:= "closed" @kind object;
  #L47e114.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47e11a.  throw v8;
  #L47e11c.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47e11e.  @monitorexit v0
  #L47e120.  goto L47e124;
  #L47e122.  throw v8;
  #L47e124.  goto L47e122;
  catch `java.lang.Throwable` @[L47e076..L47e120] goto L47e11c;
}
