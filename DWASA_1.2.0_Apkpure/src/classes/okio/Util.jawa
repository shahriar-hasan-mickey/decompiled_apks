record `okio.Util` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@okio.Util.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L480ef4.  v0:= "UTF-8" @kind object;
  #L480ef8.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L480efe.  v0:= temp @kind object;
  #L480f00.  `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L480f04.  return @kind void;
}
procedure `void` `<init>`(`okio.Util` v0 @kind this) @signature `Lokio/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L480f18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L480f1e.  return @kind void;
}
procedure `boolean` `arrayRangeEquals`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L480dc0.  v0:= 0I;
  #L480dc2.  v1:= 0I;
  #L480dc4.  if v1 >= v8 then goto L480de4;
  #L480dc8.  v2:= v1 + v5 @kind int;
  #L480dcc.  v2:= v4[v2] @kind byte;
  #L480dd0.  v3:= v1 + v7 @kind int;
  #L480dd4.  v3:= v6[v3] @kind byte;
  #L480dd8.  if v2 == v3 then goto L480dde;
  #L480ddc.  return v0;
  #L480dde.  v1:= v1 + 1;
  #L480de2.  goto L480dc4;
  #L480de4.  v4:= 1I;
  #L480de6.  return v4;
}
procedure `void` `checkOffsetAndCount`(`long` v5 , `long` v7 , `long` v9 ) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L480f30.  v0:= v7 ^| v9 @kind long;
  #L480f34.  v2:= 0L;
  #L480f38.  v4:= lcmp(v0, v2);
  #L480f3c.  if v4 < 0 then goto L480f56;
  #L480f40.  v0:= lcmp(v7, v5);
  #L480f44.  if v0 > 0 then goto L480f56;
  #L480f48.  v0:= v5 - v7 @kind long;
  #L480f4c.  v2:= lcmp(v0, v9);
  #L480f50.  if v2 < 0 then goto L480f56;
  #L480f54.  return @kind void;
  #L480f56.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L480f5a.  v1:= 3I;
  #L480f5c.  v1:= new `java.lang.Object`[v1];
  #L480f60.  v2:= 0I;
  #L480f62.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L480f68.  v5:= temp @kind object;
  #L480f6a.  v1[v2]:= v5 @kind object;
  #L480f6e.  v5:= 1I;
  #L480f70.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L480f76.  v6:= temp @kind object;
  #L480f78.  v1[v5]:= v6 @kind object;
  #L480f7c.  v5:= 2I;
  #L480f7e.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L480f84.  v6:= temp @kind object;
  #L480f86.  v1[v5]:= v6 @kind object;
  #L480f8a.  v5:= "size=%s offset=%s byteCount=%s" @kind object;
  #L480f8e.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L480f94.  v5:= temp @kind object;
  #L480f96.  call `<init>`(v0, v5) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L480f9c.  throw v0;
}
procedure `int` `reverseBytesInt`(`int` v2 ) @signature `Lokio/Util;.reverseBytesInt:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L480df8.  v0:= -16777216I;
  #L480dfc.  v0:= v0 ^& v2 @kind int;
  #L480dfe.  v0:= v0 ^>> 24;
  #L480e02.  v1:= 16711680I;
  #L480e06.  v1:= v1 ^& v2 @kind int;
  #L480e08.  v1:= v1 ^>> 8;
  #L480e0c.  v0:= v0 ^| v1 @kind int;
  #L480e0e.  v1:= 65280I;
  #L480e14.  v1:= v1 ^& v2 @kind int;
  #L480e16.  v1:= v1 ^< 8;
  #L480e1a.  v0:= v0 ^| v1 @kind int;
  #L480e1c.  v2:= v2 ^& 255;
  #L480e20.  v2:= v2 ^< 24;
  #L480e24.  v2:= v2 ^| v0 @kind int;
  #L480e26.  return v2;
}
procedure `long` `reverseBytesLong`(`long` v8 ) @signature `Lokio/Util;.reverseBytesLong:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L480e38.  v0:= -72057594037927936L;
  #L480e3c.  v0:= v0 ^& v8 @kind long;
  #L480e3e.  v2:= 56I;
  #L480e42.  v0:= v0 ^>> v2 @kind long;
  #L480e44.  v3:= 71776119061217280L;
  #L480e48.  v3:= v3 ^& v8 @kind long;
  #L480e4a.  v5:= 40I;
  #L480e4e.  v3:= v3 ^>> v5 @kind long;
  #L480e50.  v0:= v0 ^| v3 @kind long;
  #L480e52.  v3:= 280375465082880L;
  #L480e5c.  v3:= v3 ^& v8 @kind long;
  #L480e5e.  v6:= 24I;
  #L480e62.  v3:= v3 ^>> v6 @kind long;
  #L480e64.  v0:= v0 ^| v3 @kind long;
  #L480e66.  v3:= 1095216660480L;
  #L480e70.  v3:= v3 ^& v8 @kind long;
  #L480e72.  v7:= 8I;
  #L480e76.  v3:= v3 ^>> v7 @kind long;
  #L480e78.  v0:= v0 ^| v3 @kind long;
  #L480e7a.  v3:= 4278190080L;
  #L480e84.  v3:= v3 ^& v8 @kind long;
  #L480e86.  v3:= v3 ^< v7 @kind long;
  #L480e88.  v0:= v0 ^| v3 @kind long;
  #L480e8a.  v3:= 16711680L;
  #L480e90.  v3:= v3 ^& v8 @kind long;
  #L480e92.  v3:= v3 ^< v6 @kind long;
  #L480e94.  v0:= v0 ^| v3 @kind long;
  #L480e96.  v3:= 65280L;
  #L480e9c.  v3:= v3 ^& v8 @kind long;
  #L480e9e.  v3:= v3 ^< v5 @kind long;
  #L480ea0.  v0:= v0 ^| v3 @kind long;
  #L480ea2.  v3:= 255L;
  #L480ea6.  v8:= v8 ^& v3 @kind long;
  #L480ea8.  v8:= v8 ^< v2 @kind long;
  #L480eaa.  v8:= v8 ^| v0 @kind long;
  #L480eac.  return v8 @kind wide;
}
procedure `short` `reverseBytesShort`(`short` v1 ) @signature `Lokio/Util;.reverseBytesShort:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L480ec0.  v0:= 65535I;
  #L480ec6.  v1:= v1 ^& v0 @kind int;
  #L480ec8.  v0:= 65280I;
  #L480ece.  v0:= v0 ^& v1 @kind int;
  #L480ed0.  v0:= v0 ^>> 8;
  #L480ed4.  v1:= v1 ^& 255;
  #L480ed8.  v1:= v1 ^< 8;
  #L480edc.  v1:= v1 ^| v0 @kind int;
  #L480ede.  v1:= (`short`) v1 @kind i2s;
  #L480ee0.  return v1;
}
procedure `void` `sneakyRethrow`(`java.lang.Throwable` v0 @kind object) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L480fb0.  call `sneakyThrow2`(v0) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @kind static;
  #L480fb6.  return @kind void;
}
procedure `void` `sneakyThrow2`(`java.lang.Throwable` v0 @kind object) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L480fc8.  throw v0;
}
