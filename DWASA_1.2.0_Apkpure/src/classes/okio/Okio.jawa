record `okio.Okio` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@okio.Okio.logger` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Okio;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L47de34.  v0:= constclass @type ^`okio.Okio` @kind object;
  #L47de38.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L47de3e.  v0:= temp @kind object;
  #L47de40.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L47de46.  v0:= temp @kind object;
  #L47de48.  `@@okio.Okio.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L47de4c.  return @kind void;
}
procedure `void` `<init>`(`okio.Okio` v0 @kind this) @signature `Lokio/Okio;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L47de60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47de66.  return @kind void;
}
procedure `okio.Sink` `appendingSink`(`java.io.File` v2 @kind object) @signature `Lokio/Okio;.appendingSink:(Ljava/io/File;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47db9c.  if v2 == 0 then goto L47dbb6;
  #L47dba0.  v0:= new `java.io.FileOutputStream`;
  #L47dba4.  v1:= 1I;
  #L47dba6.  call `<init>`(v0, v2, v1) @signature `Ljava/io/FileOutputStream;.<init>:(Ljava/io/File;Z)V` @kind direct;
  #L47dbac.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L47dbb2.  v2:= temp @kind object;
  #L47dbb4.  return v2 @kind object;
  #L47dbb6.  v2:= new `java.lang.IllegalArgumentException`;
  #L47dbba.  v0:= "file == null" @kind object;
  #L47dbbe.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dbc4.  throw v2;
}
procedure `okio.Sink` `blackhole`() @signature `Lokio/Okio;.blackhole:()Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47dbd8.  v0:= new `okio.Okio$3`;
  #L47dbdc.  call `<init>`(v0) @signature `Lokio/Okio$3;.<init>:()V` @kind direct;
  #L47dbe2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `buffer`(`okio.Sink` v1 @kind object) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47db64.  v0:= new `okio.RealBufferedSink`;
  #L47db68.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L47db6e.  return v0 @kind object;
}
procedure `okio.BufferedSource` `buffer`(`okio.Source` v1 @kind object) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47db80.  v0:= new `okio.RealBufferedSource`;
  #L47db84.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L47db8a.  return v0 @kind object;
}
procedure `boolean` `isAndroidGetsocknameError`(`java.lang.AssertionError` v1 @kind object) @signature `Lokio/Okio;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;

  #L47db00.  call temp:= `getCause`(v1) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L47db06.  v0:= temp @kind object;
  #L47db08.  if v0 == 0 then goto L47db34;
  #L47db0c.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L47db12.  v0:= temp @kind object;
  #L47db14.  if v0 == 0 then goto L47db34;
  #L47db18.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L47db1e.  v1:= temp @kind object;
  #L47db20.  v0:= "getsockname failed" @kind object;
  #L47db24.  call temp:= `contains`(v1, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L47db2a.  v1:= temp;
  #L47db2c.  if v1 == 0 then goto L47db34;
  #L47db30.  v1:= 1I;
  #L47db32.  goto L47db36;
  #L47db34.  v1:= 0I;
  #L47db36.  return v1;
}
procedure `okio.Sink` `sink`(`java.io.File` v1 @kind object) @signature `Lokio/Okio;.sink:(Ljava/io/File;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47dbf4.  if v1 == 0 then goto L47dc0c;
  #L47dbf8.  v0:= new `java.io.FileOutputStream`;
  #L47dbfc.  call `<init>`(v0, v1) @signature `Ljava/io/FileOutputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L47dc02.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L47dc08.  v1:= temp @kind object;
  #L47dc0a.  return v1 @kind object;
  #L47dc0c.  v1:= new `java.lang.IllegalArgumentException`;
  #L47dc10.  v0:= "file == null" @kind object;
  #L47dc14.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dc1a.  throw v1;
}
procedure `okio.Sink` `sink`(`java.io.OutputStream` v1 @kind object) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47dc2c.  v0:= new `okio.Timeout`;
  #L47dc30.  call `<init>`(v0) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L47dc36.  call temp:= `sink`(v1, v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @kind static;
  #L47dc3c.  v1:= temp @kind object;
  #L47dc3e.  return v1 @kind object;
}
procedure `okio.Sink` `sink`(`java.io.OutputStream` v1 @kind object, `okio.Timeout` v2 @kind object) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L47dc50.  if v1 == 0 then goto L47dc74;
  #L47dc54.  if v2 == 0 then goto L47dc64;
  #L47dc58.  v0:= new `okio.Okio$1`;
  #L47dc5c.  call `<init>`(v0, v2, v1) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @kind direct;
  #L47dc62.  return v0 @kind object;
  #L47dc64.  v1:= new `java.lang.IllegalArgumentException`;
  #L47dc68.  v2:= "timeout == null" @kind object;
  #L47dc6c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dc72.  throw v1;
  #L47dc74.  v1:= new `java.lang.IllegalArgumentException`;
  #L47dc78.  v2:= "out == null" @kind object;
  #L47dc7c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dc82.  throw v1;
}
procedure `okio.Sink` `sink`(`java.net.Socket` v1 @kind object) @signature `Lokio/Okio;.sink:(Ljava/net/Socket;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47dc94.  if v1 == 0 then goto L47dcba;
  #L47dc98.  call temp:= `timeout`(v1) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @kind static;
  #L47dc9e.  v0:= temp @kind object;
  #L47dca0.  call temp:= `getOutputStream`(v1) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L47dca6.  v1:= temp @kind object;
  #L47dca8.  call temp:= `sink`(v1, v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @kind static;
  #L47dcae.  v1:= temp @kind object;
  #L47dcb0.  call temp:= `sink`(v0, v1) @signature `Lokio/AsyncTimeout;.sink:(Lokio/Sink;)Lokio/Sink;` @kind virtual;
  #L47dcb6.  v1:= temp @kind object;
  #L47dcb8.  return v1 @kind object;
  #L47dcba.  v1:= new `java.lang.IllegalArgumentException`;
  #L47dcbe.  v0:= "socket == null" @kind object;
  #L47dcc2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dcc8.  throw v1;
}
procedure `okio.Sink` `sink`(`java.nio.file.Path` v0 @kind object, `java.nio.file.OpenOption`[] v1 @kind object) @signature `Lokio/Okio;.sink:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L47dcdc.  if v0 == 0 then goto L47dcf2;
  #L47dce0.  call temp:= `newOutputStream`(v0, v1) @signature `Ljava/nio/file/Files;.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;` @kind static;
  #L47dce6.  v0:= temp @kind object;
  #L47dce8.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L47dcee.  v0:= temp @kind object;
  #L47dcf0.  return v0 @kind object;
  #L47dcf2.  v0:= new `java.lang.IllegalArgumentException`;
  #L47dcf6.  v1:= "path == null" @kind object;
  #L47dcfa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dd00.  throw v0;
}
procedure `okio.Source` `source`(`java.io.File` v1 @kind object) @signature `Lokio/Okio;.source:(Ljava/io/File;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47dd14.  if v1 == 0 then goto L47dd2c;
  #L47dd18.  v0:= new `java.io.FileInputStream`;
  #L47dd1c.  call `<init>`(v0, v1) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L47dd22.  call temp:= `source`(v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @kind static;
  #L47dd28.  v1:= temp @kind object;
  #L47dd2a.  return v1 @kind object;
  #L47dd2c.  v1:= new `java.lang.IllegalArgumentException`;
  #L47dd30.  v0:= "file == null" @kind object;
  #L47dd34.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dd3a.  throw v1;
}
procedure `okio.Source` `source`(`java.io.InputStream` v1 @kind object) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47dd4c.  v0:= new `okio.Timeout`;
  #L47dd50.  call `<init>`(v0) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L47dd56.  call temp:= `source`(v1, v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @kind static;
  #L47dd5c.  v1:= temp @kind object;
  #L47dd5e.  return v1 @kind object;
}
procedure `okio.Source` `source`(`java.io.InputStream` v1 @kind object, `okio.Timeout` v2 @kind object) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L47dd70.  if v1 == 0 then goto L47dd94;
  #L47dd74.  if v2 == 0 then goto L47dd84;
  #L47dd78.  v0:= new `okio.Okio$2`;
  #L47dd7c.  call `<init>`(v0, v2, v1) @signature `Lokio/Okio$2;.<init>:(Lokio/Timeout;Ljava/io/InputStream;)V` @kind direct;
  #L47dd82.  return v0 @kind object;
  #L47dd84.  v1:= new `java.lang.IllegalArgumentException`;
  #L47dd88.  v2:= "timeout == null" @kind object;
  #L47dd8c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dd92.  throw v1;
  #L47dd94.  v1:= new `java.lang.IllegalArgumentException`;
  #L47dd98.  v2:= "in == null" @kind object;
  #L47dd9c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dda2.  throw v1;
}
procedure `okio.Source` `source`(`java.net.Socket` v1 @kind object) @signature `Lokio/Okio;.source:(Ljava/net/Socket;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47ddb4.  if v1 == 0 then goto L47ddda;
  #L47ddb8.  call temp:= `timeout`(v1) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @kind static;
  #L47ddbe.  v0:= temp @kind object;
  #L47ddc0.  call temp:= `getInputStream`(v1) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L47ddc6.  v1:= temp @kind object;
  #L47ddc8.  call temp:= `source`(v1, v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @kind static;
  #L47ddce.  v1:= temp @kind object;
  #L47ddd0.  call temp:= `source`(v0, v1) @signature `Lokio/AsyncTimeout;.source:(Lokio/Source;)Lokio/Source;` @kind virtual;
  #L47ddd6.  v1:= temp @kind object;
  #L47ddd8.  return v1 @kind object;
  #L47ddda.  v1:= new `java.lang.IllegalArgumentException`;
  #L47ddde.  v0:= "socket == null" @kind object;
  #L47dde2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47dde8.  throw v1;
}
procedure `okio.Source` `source`(`java.nio.file.Path` v0 @kind object, `java.nio.file.OpenOption`[] v1 @kind object) @signature `Lokio/Okio;.source:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L47ddfc.  if v0 == 0 then goto L47de12;
  #L47de00.  call temp:= `newInputStream`(v0, v1) @signature `Ljava/nio/file/Files;.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;` @kind static;
  #L47de06.  v0:= temp @kind object;
  #L47de08.  call temp:= `source`(v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @kind static;
  #L47de0e.  v0:= temp @kind object;
  #L47de10.  return v0 @kind object;
  #L47de12.  v0:= new `java.lang.IllegalArgumentException`;
  #L47de16.  v1:= "path == null" @kind object;
  #L47de1a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47de20.  throw v0;
}
procedure `okio.AsyncTimeout` `timeout`(`java.net.Socket` v1 @kind object) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L47db48.  v0:= new `okio.Okio$4`;
  #L47db4c.  call `<init>`(v0, v1) @signature `Lokio/Okio$4;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L47db52.  return v0 @kind object;
}
