record `okio.HashingSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSource` @kind class {
  `javax.crypto.Mac` `okio.HashingSource.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSource.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSource` v0 @kind this, `okio.Source` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L47d350.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L47d356.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L47d35c.  v1:= temp @kind object;
  #L47d35e.  v0.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L47d362.  v1:= 0I;
  #L47d364.  v0.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L47d368.  return @kind void;
  #L47d36a.  v1:= new `java.lang.AssertionError`;
  #L47d36e.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L47d374.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L47d356..L47d368] goto L47d36a;
}
procedure `void` `<init>`(`okio.HashingSource` v1 @kind this, `okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L47d398.  call `<init>`(v1, v2) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L47d39e.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L47d3a4.  v2:= temp @kind object;
  #L47d3a6.  v1.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v2 @kind object;
  #L47d3aa.  v2:= v1.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L47d3ae.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L47d3b2.  call temp:= `toByteArray`(v3) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L47d3b8.  v3:= temp @kind object;
  #L47d3ba.  call `<init>`(v0, v3, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L47d3c0.  call `init`(v2, v0) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L47d3c6.  v2:= 0I;
  #L47d3c8.  v1.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v2 @kind object;
  #L47d3cc.  return @kind void;
  #L47d3ce.  v2:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L47d3d0.  v3:= new `java.lang.IllegalArgumentException`;
  #L47d3d4.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L47d3da.  throw v3;
  #L47d3dc.  v2:= new `java.lang.AssertionError`;
  #L47d3e0.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L47d3e6.  throw v2;
  catch `java.security.NoSuchAlgorithmException` @[L47d39e..L47d3cc] goto L47d3dc;
  catch `java.security.InvalidKeyException` @[L47d39e..L47d3cc] goto L47d3ce;
}
procedure `okio.HashingSource` `hmacSha1`(`okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSource;.hmacSha1:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d2b0.  v0:= new `okio.HashingSource`;
  #L47d2b4.  v1:= "HmacSHA1" @kind object;
  #L47d2b8.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L47d2be.  return v0 @kind object;
}
procedure `okio.HashingSource` `hmacSha256`(`okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSource;.hmacSha256:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d2d0.  v0:= new `okio.HashingSource`;
  #L47d2d4.  v1:= "HmacSHA256" @kind object;
  #L47d2d8.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L47d2de.  return v0 @kind object;
}
procedure `okio.HashingSource` `md5`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.md5:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d2f0.  v0:= new `okio.HashingSource`;
  #L47d2f4.  v1:= "MD5" @kind object;
  #L47d2f8.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L47d2fe.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha1`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.sha1:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d310.  v0:= new `okio.HashingSource`;
  #L47d314.  v1:= "SHA-1" @kind object;
  #L47d318.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L47d31e.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha256`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.sha256:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47d330.  v0:= new `okio.HashingSource`;
  #L47d334.  v1:= "SHA-256" @kind object;
  #L47d338.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L47d33e.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSource` v1 @kind this) @signature `Lokio/HashingSource;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47d278.  v0:= v1.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L47d27c.  if v0 == 0 then goto L47d28a;
  #L47d280.  call temp:= `digest`(v0) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L47d286.  v0:= temp @kind object;
  #L47d288.  goto L47d296;
  #L47d28a.  v0:= v1.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L47d28e.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L47d294.  v0:= temp @kind object;
  #L47d296.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L47d29c.  v0:= temp @kind object;
  #L47d29e.  return v0 @kind object;
}
procedure `long` `read`(`okio.HashingSource` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/HashingSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L47d1cc.  call temp:= `read`(v8, v9, v10) @signature `Lokio/ForwardingSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L47d1d2.  v10:= temp @kind wide;
  #L47d1d4.  v0:= -1L;
  #L47d1d8.  v2:= lcmp(v10, v0);
  #L47d1dc.  if v2 == 0 then goto L47d266;
  #L47d1e0.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47d1e4.  v0:= v0 - v10 @kind long;
  #L47d1e6.  v2:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47d1ea.  v4:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47d1ee.  v5:= lcmp(v2, v0);
  #L47d1f2.  if v5 <= 0 then goto L47d20a;
  #L47d1f6.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L47d1fa.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L47d1fe.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L47d202.  v5:= v5 - v6 @kind int;
  #L47d204.  v5:= (`long`) v5 @kind i2l;
  #L47d206.  v2:= v2 - v5 @kind long;
  #L47d208.  goto L47d1ee;
  #L47d20a.  v5:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47d20e.  v7:= lcmp(v2, v5);
  #L47d212.  if v7 >= 0 then goto L47d266;
  #L47d216.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L47d21a.  v5:= (`long`) v5 @kind i2l;
  #L47d21c.  v5:= v5 + v0 @kind long;
  #L47d21e.  v5:= v5 - v2 @kind long;
  #L47d220.  v0:= (`int`) v5 @kind l2i;
  #L47d222.  v1:= v8.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L47d226.  if v1 == 0 then goto L47d23c;
  #L47d22a.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47d22e.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L47d232.  v6:= v6 - v0 @kind int;
  #L47d234.  call `update`(v1, v5, v0, v6) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L47d23a.  goto L47d250;
  #L47d23c.  v1:= v8.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L47d240.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47d244.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L47d248.  v6:= v6 - v0 @kind int;
  #L47d24a.  call `update`(v1, v5, v0, v6) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L47d250.  v0:= v4.`okio.Segment.limit` @type ^`int`;
  #L47d254.  v1:= v4.`okio.Segment.pos` @type ^`int`;
  #L47d258.  v0:= v0 - v1 @kind int;
  #L47d25a.  v0:= (`long`) v0 @kind i2l;
  #L47d25c.  v0:= v0 + v2 @kind long;
  #L47d25e.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47d262.  v2:= v0 @kind wide;
  #L47d264.  goto L47d20a;
  #L47d266.  return v10 @kind wide;
}
