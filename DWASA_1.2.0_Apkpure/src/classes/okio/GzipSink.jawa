record `okio.GzipSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `okio.GzipSink.closed` @AccessFlag PRIVATE;
  `java.util.zip.CRC32` `okio.GzipSink.crc` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Deflater` `okio.GzipSink.deflater` @AccessFlag PRIVATE_FINAL;
  `okio.DeflaterSink` `okio.GzipSink.deflaterSink` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSink` `okio.GzipSink.sink` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.GzipSink` v3 @kind this, `okio.Sink` v4 @kind object) @signature `Lokio/GzipSink;.<init>:(Lokio/Sink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L47c840.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47c846.  v0:= new `java.util.zip.CRC32`;
  #L47c84a.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L47c850.  v3.`okio.GzipSink.crc` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L47c854.  if v4 == 0 then goto L47c894;
  #L47c858.  v0:= new `java.util.zip.Deflater`;
  #L47c85c.  v1:= -1I;
  #L47c85e.  v2:= 1I;
  #L47c860.  call `<init>`(v0, v1, v2) @signature `Ljava/util/zip/Deflater;.<init>:(IZ)V` @kind direct;
  #L47c866.  v3.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` := v0 @kind object;
  #L47c86a.  call temp:= `buffer`(v4) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L47c870.  v4:= temp @kind object;
  #L47c872.  v3.`okio.GzipSink.sink` @type ^`okio.BufferedSink` := v4 @kind object;
  #L47c876.  v4:= new `okio.DeflaterSink`;
  #L47c87a.  v0:= v3.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L47c87e.  v1:= v3.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L47c882.  call `<init>`(v4, v0, v1) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @kind direct;
  #L47c888.  v3.`okio.GzipSink.deflaterSink` @type ^`okio.DeflaterSink` := v4 @kind object;
  #L47c88c.  call `writeHeader`(v3) @signature `Lokio/GzipSink;.writeHeader:()V` @kind direct;
  #L47c892.  return @kind void;
  #L47c894.  v4:= new `java.lang.IllegalArgumentException`;
  #L47c898.  v0:= "sink == null" @kind object;
  #L47c89c.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47c8a2.  throw v4;
}
procedure `void` `updateCrc`(`okio.GzipSink` v4 @kind this, `okio.Buffer` v5 @kind object, `long` v6 ) @signature `Lokio/GzipSink;.updateCrc:(Lokio/Buffer;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47c95c.  v5:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L47c960.  v0:= 0L;
  #L47c964.  v2:= lcmp(v6, v0);
  #L47c968.  if v2 <= 0 then goto L47c99e;
  #L47c96c.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L47c970.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L47c974.  v0:= v0 - v1 @kind int;
  #L47c976.  v0:= (`long`) v0 @kind i2l;
  #L47c978.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L47c97e.  v0:= temp @kind wide;
  #L47c980.  v1:= (`int`) v0 @kind l2i;
  #L47c982.  v0:= v4.`okio.GzipSink.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L47c986.  v2:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47c98a.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L47c98e.  call `update`(v0, v2, v3, v1) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L47c994.  v0:= (`long`) v1 @kind i2l;
  #L47c996.  v6:= v6 - v0 @kind long;
  #L47c998.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L47c99c.  goto L47c960;
  #L47c99e.  return @kind void;
}
procedure `void` `writeFooter`(`okio.GzipSink` v3 @kind this) @signature `Lokio/GzipSink;.writeFooter:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L47ca18.  v0:= v3.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L47ca1c.  v1:= v3.`okio.GzipSink.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L47ca20.  call temp:= `getValue`(v1) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L47ca26.  v1:= temp @kind wide;
  #L47ca28.  v2:= (`int`) v1 @kind l2i;
  #L47ca2a.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/BufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @kind interface;
  #L47ca30.  v0:= v3.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L47ca34.  v1:= v3.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L47ca38.  call temp:= `getBytesRead`(v1) @signature `Ljava/util/zip/Deflater;.getBytesRead:()J` @kind virtual;
  #L47ca3e.  v1:= temp @kind wide;
  #L47ca40.  v2:= (`int`) v1 @kind l2i;
  #L47ca42.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/BufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @kind interface;
  #L47ca48.  return @kind void;
}
procedure `void` `writeHeader`(`okio.GzipSink` v2 @kind this) @signature `Lokio/GzipSink;.writeHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L47ca5c.  v0:= v2.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L47ca60.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSink;.buffer:()Lokio/Buffer;` @kind interface;
  #L47ca66.  v0:= temp @kind object;
  #L47ca68.  v1:= 8075I;
  #L47ca6c.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L47ca72.  v1:= 8I;
  #L47ca76.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47ca7c.  v1:= 0I;
  #L47ca7e.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47ca84.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L47ca8a.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47ca90.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L47ca96.  return @kind void;
}
procedure `void` `close`(`okio.GzipSink` v2 @kind this) @signature `Lokio/GzipSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47c8b4.  v0:= v2.`okio.GzipSink.closed` @type ^`boolean` @kind boolean;
  #L47c8b8.  if v0 == 0 then goto L47c8be;
  #L47c8bc.  return @kind void;
  #L47c8be.  v0:= 0I;
  #L47c8c0.  v1:= v2.`okio.GzipSink.deflaterSink` @type ^`okio.DeflaterSink` @kind object;
  #L47c8c4.  call `finishDeflate`(v1) @signature `Lokio/DeflaterSink;.finishDeflate:()V` @kind virtual;
  #L47c8ca.  call `writeFooter`(v2) @signature `Lokio/GzipSink;.writeFooter:()V` @kind direct;
  #L47c8d0.  goto L47c8d4;
  #L47c8d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c8d4.  v1:= v2.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L47c8d8.  call `end`(v1) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #L47c8de.  goto L47c8e8;
  #L47c8e0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c8e2.  if v0 != 0 then goto L47c8e8;
  #L47c8e6.  v0:= v1 @kind object;
  #L47c8e8.  v1:= v2.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L47c8ec.  call `close`(v1) @signature `Lokio/BufferedSink;.close:()V` @kind interface;
  #L47c8f2.  goto L47c8fc;
  #L47c8f4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c8f6.  if v0 != 0 then goto L47c8fc;
  #L47c8fa.  v0:= v1 @kind object;
  #L47c8fc.  v1:= 1I;
  #L47c8fe.  v2.`okio.GzipSink.closed` @type ^`boolean` := v1 @kind boolean;
  #L47c902.  if v0 == 0 then goto L47c90c;
  #L47c906.  call `sneakyRethrow`(v0) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L47c90c.  return @kind void;
  catch `java.lang.Throwable` @[L47c8c0..L47c8d0] goto L47c8d2;
  catch `java.lang.Throwable` @[L47c8d4..L47c8de] goto L47c8e0;
  catch `java.lang.Throwable` @[L47c8e8..L47c8f2] goto L47c8f4;
}
procedure `java.util.zip.Deflater` `deflater`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.deflater:()Ljava/util/zip/Deflater;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c808.  v0:= v1.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L47c80c.  return v0 @kind object;
}
procedure `void` `flush`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c940.  v0:= v1.`okio.GzipSink.deflaterSink` @type ^`okio.DeflaterSink` @kind object;
  #L47c944.  call `flush`(v0) @signature `Lokio/DeflaterSink;.flush:()V` @kind virtual;
  #L47c94a.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c820.  v0:= v1.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L47c824.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L47c82a.  v0:= temp @kind object;
  #L47c82c.  return v0 @kind object;
}
procedure `void` `write`(`okio.GzipSink` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/GzipSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47c9b0.  v0:= 0L;
  #L47c9b4.  v2:= lcmp(v5, v0);
  #L47c9b8.  if v2 < 0 then goto L47c9d8;
  #L47c9bc.  v2:= lcmp(v5, v0);
  #L47c9c0.  if v2 != 0 then goto L47c9c6;
  #L47c9c4.  return @kind void;
  #L47c9c6.  call `updateCrc`(v3, v4, v5) @signature `Lokio/GzipSink;.updateCrc:(Lokio/Buffer;J)V` @kind direct;
  #L47c9cc.  v0:= v3.`okio.GzipSink.deflaterSink` @type ^`okio.DeflaterSink` @kind object;
  #L47c9d0.  call `write`(v0, v4, v5) @signature `Lokio/DeflaterSink;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L47c9d6.  return @kind void;
  #L47c9d8.  v4:= new `java.lang.IllegalArgumentException`;
  #L47c9dc.  v0:= new `java.lang.StringBuilder`;
  #L47c9e0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47c9e6.  v1:= "byteCount < 0: " @kind object;
  #L47c9ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47c9f0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L47c9f6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47c9fc.  v5:= temp @kind object;
  #L47c9fe.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47ca04.  throw v4;
}
