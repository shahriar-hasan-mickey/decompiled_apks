record `okio.Segment` @kind class @AccessFlag FINAL {
  `byte`[] `okio.Segment.data` @AccessFlag FINAL;
  `int` `okio.Segment.limit` @AccessFlag ;
  `okio.Segment` `okio.Segment.next` @AccessFlag ;
  `boolean` `okio.Segment.owner` @AccessFlag ;
  `int` `okio.Segment.pos` @AccessFlag ;
  `okio.Segment` `okio.Segment.prev` @AccessFlag ;
  `boolean` `okio.Segment.shared` @AccessFlag ;
}
global `int` `@@okio.Segment.SHARE_MINIMUM` @AccessFlag STATIC_FINAL;
global `int` `@@okio.Segment.SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okio.Segment` v1 @kind this) @signature `Lokio/Segment;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4806ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4806f2.  v0:= 8192I;
  #L4806f6.  v0:= new `byte`[v0];
  #L4806fa.  v1.`okio.Segment.data` @type ^`byte`[] := v0 @kind object;
  #L4806fe.  v0:= 1I;
  #L480700.  v1.`okio.Segment.owner` @type ^`boolean` := v0 @kind boolean;
  #L480704.  v0:= 0I;
  #L480706.  v1.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L48070a.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v3 @kind this, `okio.Segment` v4 @kind object) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L48074c.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L480750.  v1:= v4.`okio.Segment.pos` @type ^`int`;
  #L480754.  v2:= v4.`okio.Segment.limit` @type ^`int`;
  #L480758.  call `<init>`(v3, v0, v1, v2) @signature `Lokio/Segment;.<init>:([BII)V` @kind direct;
  #L48075e.  v0:= 1I;
  #L480760.  v4.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L480764.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Segment;.<init>:([BII)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48071c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L480722.  v0.`okio.Segment.data` @type ^`byte`[] := v1 @kind object;
  #L480726.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L48072a.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L48072e.  v1:= 0I;
  #L480730.  v0.`okio.Segment.owner` @type ^`boolean` := v1 @kind boolean;
  #L480734.  v1:= 1I;
  #L480736.  v0.`okio.Segment.shared` @type ^`boolean` := v1 @kind boolean;
  #L48073a.  return @kind void;
}
procedure `void` `compact`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.compact:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L480778.  v0:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L48077c.  if v0 == v4 then goto L4807cc;
  #L480780.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L480784.  if v1 != 0 then goto L48078a;
  #L480788.  return @kind void;
  #L48078a.  v1:= v4.`okio.Segment.limit` @type ^`int`;
  #L48078e.  v2:= v4.`okio.Segment.pos` @type ^`int`;
  #L480792.  v1:= v1 - v2 @kind int;
  #L480794.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L480798.  v2:= v2 - 8192;
  #L48079c.  v3:= v0.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L4807a0.  if v3 == 0 then goto L4807a8;
  #L4807a4.  v0:= 0I;
  #L4807a6.  goto L4807ac;
  #L4807a8.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L4807ac.  v2:= v2 + v0 @kind int;
  #L4807ae.  if v1 <= v2 then goto L4807b4;
  #L4807b2.  return @kind void;
  #L4807b4.  v0:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L4807b8.  call `writeTo`(v4, v0, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L4807be.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L4807c4.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L4807ca.  return @kind void;
  #L4807cc.  v0:= new `java.lang.IllegalStateException`;
  #L4807d0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L4807d6.  throw v0;
}
procedure `okio.Segment` `pop`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L480604.  v0:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L480608.  v1:= 0I;
  #L48060a.  if v0 == v4 then goto L480610;
  #L48060e.  goto L480612;
  #L480610.  v0:= v1 @kind object;
  #L480612.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L480616.  v3:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L48061a.  v2.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L48061e.  v3:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L480622.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L480626.  v4.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L48062a.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L48062e.  return v0 @kind object;
}
procedure `okio.Segment` `push`(`okio.Segment` v1 @kind this, `okio.Segment` v2 @kind object) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480640.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L480644.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L480648.  v2.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L48064c.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L480650.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L480654.  v1.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L480658.  return v2 @kind object;
}
procedure `okio.Segment` `split`(`okio.Segment` v5 @kind this, `int` v6 ) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48066c.  if v6 <= 0 then goto L4806ce;
  #L480670.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L480674.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L480678.  v0:= v0 - v1 @kind int;
  #L48067a.  if v6 > v0 then goto L4806ce;
  #L48067e.  v0:= 1024I;
  #L480682.  if v6 < v0 then goto L480692;
  #L480686.  v0:= new `okio.Segment`;
  #L48068a.  call `<init>`(v0, v5) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @kind direct;
  #L480690.  goto L4806ae;
  #L480692.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L480698.  v0:= temp @kind object;
  #L48069a.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L48069e.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L4806a2.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L4806a6.  v4:= 0I;
  #L4806a8.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4806ae.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L4806b2.  v1:= v1 + v6 @kind int;
  #L4806b4.  v0.`okio.Segment.limit` @type ^`int` := v1;
  #L4806b8.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L4806bc.  v1:= v1 + v6 @kind int;
  #L4806be.  v5.`okio.Segment.pos` @type ^`int` := v1;
  #L4806c2.  v6:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L4806c6.  call temp:= `push`(v6, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L4806cc.  return v0 @kind object;
  #L4806ce.  v6:= new `java.lang.IllegalArgumentException`;
  #L4806d2.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4806d8.  throw v6;
}
procedure `void` `writeTo`(`okio.Segment` v4 @kind this, `okio.Segment` v5 @kind object, `int` v6 ) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4807e8.  v0:= v5.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L4807ec.  if v0 == 0 then goto L48087c;
  #L4807f0.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L4807f4.  v1:= v0 + v6 @kind int;
  #L4807f8.  v2:= 8192I;
  #L4807fc.  if v1 <= v2 then goto L480850;
  #L480800.  v1:= v5.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L480804.  if v1 != 0 then goto L480844;
  #L480808.  v1:= v0 + v6 @kind int;
  #L48080c.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L480810.  v1:= v1 - v3 @kind int;
  #L480812.  if v1 > v2 then goto L480838;
  #L480816.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L48081a.  v0:= v0 - v3 @kind int;
  #L48081c.  v2:= 0I;
  #L48081e.  call `arraycopy`(v1, v3, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L480824.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L480828.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L48082c.  v0:= v0 - v1 @kind int;
  #L48082e.  v5.`okio.Segment.limit` @type ^`int` := v0;
  #L480832.  v5.`okio.Segment.pos` @type ^`int` := v2;
  #L480836.  goto L480850;
  #L480838.  v5:= new `java.lang.IllegalArgumentException`;
  #L48083c.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L480842.  throw v5;
  #L480844.  v5:= new `java.lang.IllegalArgumentException`;
  #L480848.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L48084e.  throw v5;
  #L480850.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L480854.  v1:= v4.`okio.Segment.pos` @type ^`int`;
  #L480858.  v2:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L48085c.  v3:= v5.`okio.Segment.limit` @type ^`int`;
  #L480860.  call `arraycopy`(v0, v1, v2, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L480866.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L48086a.  v0:= v0 + v6 @kind int;
  #L48086c.  v5.`okio.Segment.limit` @type ^`int` := v0;
  #L480870.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L480874.  v5:= v5 + v6 @kind int;
  #L480876.  v4.`okio.Segment.pos` @type ^`int` := v5;
  #L48087a.  return @kind void;
  #L48087c.  v5:= new `java.lang.IllegalArgumentException`;
  #L480880.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L480886.  throw v5;
}
