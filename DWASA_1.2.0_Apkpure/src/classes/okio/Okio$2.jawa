record `okio.Okio$2` @kind class @AccessFlag FINAL extends `okio.Source` @kind interface {
  `java.io.InputStream` `okio.Okio$2.val$in` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Okio$2.val$timeout` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Okio$2` v0 @kind this, `okio.Timeout` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lokio/Okio$2;.<init>:(Lokio/Timeout;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47d964.  v0.`okio.Okio$2.val$timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L47d968.  v0.`okio.Okio$2.val$in` @type ^`java.io.InputStream` := v2 @kind object;
  #L47d96c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47d972.  return @kind void;
}
procedure `void` `close`(`okio.Okio$2` v1 @kind this) @signature `Lokio/Okio$2;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47d984.  v0:= v1.`okio.Okio$2.val$in` @type ^`java.io.InputStream` @kind object;
  #L47d988.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L47d98e.  return @kind void;
}
procedure `long` `read`(`okio.Okio$2` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/Okio$2;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47d86c.  v0:= 0L;
  #L47d870.  v2:= lcmp(v5, v0);
  #L47d874.  if v2 < 0 then goto L47d8fe;
  #L47d878.  v2:= lcmp(v5, v0);
  #L47d87c.  if v2 != 0 then goto L47d882;
  #L47d880.  return v0 @kind wide;
  #L47d882.  v0:= v3.`okio.Okio$2.val$timeout` @type ^`okio.Timeout` @kind object;
  #L47d886.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L47d88c.  v0:= 1I;
  #L47d88e.  call temp:= `writableSegment`(v4, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L47d894.  v0:= temp @kind object;
  #L47d896.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L47d89a.  v1:= v1 - 8192;
  #L47d89e.  v1:= (`long`) v1 @kind i2l;
  #L47d8a0.  call temp:= `min`(v5, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L47d8a6.  v5:= temp @kind wide;
  #L47d8a8.  v6:= (`int`) v5 @kind l2i;
  #L47d8aa.  v5:= v3.`okio.Okio$2.val$in` @type ^`java.io.InputStream` @kind object;
  #L47d8ae.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L47d8b2.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L47d8b6.  call temp:= `read`(v5, v1, v2, v6) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L47d8bc.  v5:= temp;
  #L47d8be.  v6:= -1I;
  #L47d8c0.  if v5 != v6 then goto L47d8ca;
  #L47d8c4.  v4:= -1L;
  #L47d8c8.  return v4 @kind wide;
  #L47d8ca.  v6:= v0.`okio.Segment.limit` @type ^`int`;
  #L47d8ce.  v6:= v6 + v5 @kind int;
  #L47d8d0.  v0.`okio.Segment.limit` @type ^`int` := v6;
  #L47d8d4.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L47d8d8.  v5:= (`long`) v5 @kind i2l;
  #L47d8da.  v0:= v0 + v5 @kind long;
  #L47d8dc.  v4.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L47d8e0.  return v5 @kind wide;
  #L47d8e2.  v4:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L47d8e4.  call temp:= `isAndroidGetsocknameError`(v4) @signature `Lokio/Okio;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @kind static;
  #L47d8ea.  v5:= temp;
  #L47d8ec.  if v5 == 0 then goto L47d8fc;
  #L47d8f0.  v5:= new `java.io.IOException`;
  #L47d8f4.  call `<init>`(v5, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L47d8fa.  throw v5;
  #L47d8fc.  throw v4;
  #L47d8fe.  v4:= new `java.lang.IllegalArgumentException`;
  #L47d902.  v0:= new `java.lang.StringBuilder`;
  #L47d906.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47d90c.  v1:= "byteCount < 0: " @kind object;
  #L47d910.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47d916.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L47d91c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47d922.  v5:= temp @kind object;
  #L47d924.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47d92a.  throw v4;
  catch `java.lang.AssertionError` @[L47d882..L47d8e0] goto L47d8e2;
}
procedure `okio.Timeout` `timeout`(`okio.Okio$2` v1 @kind this) @signature `Lokio/Okio$2;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47d94c.  v0:= v1.`okio.Okio$2.val$timeout` @type ^`okio.Timeout` @kind object;
  #L47d950.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Okio$2` v2 @kind this) @signature `Lokio/Okio$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47d828.  v0:= new `java.lang.StringBuilder`;
  #L47d82c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47d832.  v1:= "source(" @kind object;
  #L47d836.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47d83c.  v1:= v2.`okio.Okio$2.val$in` @type ^`java.io.InputStream` @kind object;
  #L47d840.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47d846.  v1:= ")" @kind object;
  #L47d84a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47d850.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47d856.  v0:= temp @kind object;
  #L47d858.  return v0 @kind object;
}
