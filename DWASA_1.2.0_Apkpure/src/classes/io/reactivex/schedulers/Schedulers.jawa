record `io.reactivex.schedulers.Schedulers` @kind class @AccessFlag PUBLIC_FINAL {
}
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.COMPUTATION` @AccessFlag STATIC_FINAL;
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.IO` @AccessFlag STATIC_FINAL;
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.NEW_THREAD` @AccessFlag STATIC_FINAL;
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.SINGLE` @AccessFlag STATIC_FINAL;
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.TRAMPOLINE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/schedulers/Schedulers;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L44ff9c.  v0:= new `io.reactivex.schedulers.Schedulers$SingleTask`;
  #L44ffa0.  call `<init>`(v0) @signature `Lio/reactivex/schedulers/Schedulers$SingleTask;.<init>:()V` @kind direct;
  #L44ffa6.  call temp:= `initSingleScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initSingleScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44ffac.  v0:= temp @kind object;
  #L44ffae.  `@@io.reactivex.schedulers.Schedulers.SINGLE` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L44ffb2.  v0:= new `io.reactivex.schedulers.Schedulers$ComputationTask`;
  #L44ffb6.  call `<init>`(v0) @signature `Lio/reactivex/schedulers/Schedulers$ComputationTask;.<init>:()V` @kind direct;
  #L44ffbc.  call temp:= `initComputationScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initComputationScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44ffc2.  v0:= temp @kind object;
  #L44ffc4.  `@@io.reactivex.schedulers.Schedulers.COMPUTATION` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L44ffc8.  v0:= new `io.reactivex.schedulers.Schedulers$IOTask`;
  #L44ffcc.  call `<init>`(v0) @signature `Lio/reactivex/schedulers/Schedulers$IOTask;.<init>:()V` @kind direct;
  #L44ffd2.  call temp:= `initIoScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initIoScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44ffd8.  v0:= temp @kind object;
  #L44ffda.  `@@io.reactivex.schedulers.Schedulers.IO` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L44ffde.  call temp:= `instance`() @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler;.instance:()Lio/reactivex/internal/schedulers/TrampolineScheduler;` @kind static;
  #L44ffe4.  v0:= temp @kind object;
  #L44ffe6.  `@@io.reactivex.schedulers.Schedulers.TRAMPOLINE` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L44ffea.  v0:= new `io.reactivex.schedulers.Schedulers$NewThreadTask`;
  #L44ffee.  call `<init>`(v0) @signature `Lio/reactivex/schedulers/Schedulers$NewThreadTask;.<init>:()V` @kind direct;
  #L44fff4.  call temp:= `initNewThreadScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initNewThreadScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44fffa.  v0:= temp @kind object;
  #L44fffc.  `@@io.reactivex.schedulers.Schedulers.NEW_THREAD` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L450000.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.schedulers.Schedulers` v2 @kind this) @signature `Lio/reactivex/schedulers/Schedulers;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L450014.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45001a.  v0:= new `java.lang.IllegalStateException`;
  #L45001e.  v1:= "No instances!" @kind object;
  #L450022.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L450028.  throw v0;
}
procedure `io.reactivex.Scheduler` `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44fee8.  v0:= `@@io.reactivex.schedulers.Schedulers.COMPUTATION` @type ^`io.reactivex.Scheduler` @kind object;
  #L44feec.  call temp:= `onComputationScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onComputationScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L44fef2.  v0:= temp @kind object;
  #L44fef4.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `from`(`java.util.concurrent.Executor` v1 @kind object) @signature `Lio/reactivex/schedulers/Schedulers;.from:(Ljava/util/concurrent/Executor;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44ff08.  v0:= new `io.reactivex.internal.schedulers.ExecutorScheduler`;
  #L44ff0c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L44ff12.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `io`() @signature `Lio/reactivex/schedulers/Schedulers;.io:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44ff24.  v0:= `@@io.reactivex.schedulers.Schedulers.IO` @type ^`io.reactivex.Scheduler` @kind object;
  #L44ff28.  call temp:= `onIoScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onIoScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L44ff2e.  v0:= temp @kind object;
  #L44ff30.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `newThread`() @signature `Lio/reactivex/schedulers/Schedulers;.newThread:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44ff44.  v0:= `@@io.reactivex.schedulers.Schedulers.NEW_THREAD` @type ^`io.reactivex.Scheduler` @kind object;
  #L44ff48.  call temp:= `onNewThreadScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onNewThreadScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L44ff4e.  v0:= temp @kind object;
  #L44ff50.  return v0 @kind object;
}
procedure `void` `shutdown`() @signature `Lio/reactivex/schedulers/Schedulers;.shutdown:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45003c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L450042.  v0:= temp @kind object;
  #L450044.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L45004a.  call temp:= `io`() @signature `Lio/reactivex/schedulers/Schedulers;.io:()Lio/reactivex/Scheduler;` @kind static;
  #L450050.  v0:= temp @kind object;
  #L450052.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L450058.  call temp:= `newThread`() @signature `Lio/reactivex/schedulers/Schedulers;.newThread:()Lio/reactivex/Scheduler;` @kind static;
  #L45005e.  v0:= temp @kind object;
  #L450060.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L450066.  call temp:= `single`() @signature `Lio/reactivex/schedulers/Schedulers;.single:()Lio/reactivex/Scheduler;` @kind static;
  #L45006c.  v0:= temp @kind object;
  #L45006e.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L450074.  call temp:= `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @kind static;
  #L45007a.  v0:= temp @kind object;
  #L45007c.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L450082.  call `shutdown`() @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.shutdown:()V` @kind static;
  #L450088.  return @kind void;
}
procedure `io.reactivex.Scheduler` `single`() @signature `Lio/reactivex/schedulers/Schedulers;.single:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44ff64.  v0:= `@@io.reactivex.schedulers.Schedulers.SINGLE` @type ^`io.reactivex.Scheduler` @kind object;
  #L44ff68.  call temp:= `onSingleScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSingleScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L44ff6e.  v0:= temp @kind object;
  #L44ff70.  return v0 @kind object;
}
procedure `void` `start`() @signature `Lio/reactivex/schedulers/Schedulers;.start:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45009c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4500a2.  v0:= temp @kind object;
  #L4500a4.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4500aa.  call temp:= `io`() @signature `Lio/reactivex/schedulers/Schedulers;.io:()Lio/reactivex/Scheduler;` @kind static;
  #L4500b0.  v0:= temp @kind object;
  #L4500b2.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4500b8.  call temp:= `newThread`() @signature `Lio/reactivex/schedulers/Schedulers;.newThread:()Lio/reactivex/Scheduler;` @kind static;
  #L4500be.  v0:= temp @kind object;
  #L4500c0.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4500c6.  call temp:= `single`() @signature `Lio/reactivex/schedulers/Schedulers;.single:()Lio/reactivex/Scheduler;` @kind static;
  #L4500cc.  v0:= temp @kind object;
  #L4500ce.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4500d4.  call temp:= `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @kind static;
  #L4500da.  v0:= temp @kind object;
  #L4500dc.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4500e2.  call `start`() @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.start:()V` @kind static;
  #L4500e8.  return @kind void;
}
procedure `io.reactivex.Scheduler` `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44ff84.  v0:= `@@io.reactivex.schedulers.Schedulers.TRAMPOLINE` @type ^`io.reactivex.Scheduler` @kind object;
  #L44ff88.  return v0 @kind object;
}
