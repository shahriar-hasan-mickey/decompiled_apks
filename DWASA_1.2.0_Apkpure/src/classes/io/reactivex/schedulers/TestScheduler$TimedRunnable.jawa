record `io.reactivex.schedulers.TestScheduler$TimedRunnable` @kind class @AccessFlag FINAL extends `java.lang.Comparable` @kind interface {
  `long` `io.reactivex.schedulers.TestScheduler$TimedRunnable.count` @AccessFlag FINAL;
  `java.lang.Runnable` `io.reactivex.schedulers.TestScheduler$TimedRunnable.run` @AccessFlag FINAL;
  `io.reactivex.schedulers.TestScheduler$TestWorker` `io.reactivex.schedulers.TestScheduler$TimedRunnable.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.schedulers.TestScheduler$TimedRunnable.time` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.schedulers.TestScheduler$TimedRunnable` v0 @kind this, `io.reactivex.schedulers.TestScheduler$TestWorker` v1 @kind object, `long` v2 , `java.lang.Runnable` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/schedulers/TestScheduler$TimedRunnable;.<init>:(Lio/reactivex/schedulers/TestScheduler$TestWorker;JLjava/lang/Runnable;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L450334.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45033a.  v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.time` @type ^`long` := v2 @kind wide;
  #L45033e.  v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.run` @type ^`java.lang.Runnable` := v4 @kind object;
  #L450342.  v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.scheduler` @type ^`io.reactivex.schedulers.TestScheduler$TestWorker` := v1 @kind object;
  #L450346.  v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.count` @type ^`long` := v5 @kind wide;
  #L45034a.  return @kind void;
}
procedure `int` `compareTo`(`io.reactivex.schedulers.TestScheduler$TimedRunnable` v5 @kind this, `io.reactivex.schedulers.TestScheduler$TimedRunnable` v6 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$TimedRunnable;.compareTo:(Lio/reactivex/schedulers/TestScheduler$TimedRunnable;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L450290.  v0:= v5.`io.reactivex.schedulers.TestScheduler$TimedRunnable.time` @type ^`long` @kind wide;
  #L450294.  v2:= v6.`io.reactivex.schedulers.TestScheduler$TimedRunnable.time` @type ^`long` @kind wide;
  #L450298.  v4:= lcmp(v0, v2);
  #L45029c.  if v4 != 0 then goto L4502b2;
  #L4502a0.  v0:= v5.`io.reactivex.schedulers.TestScheduler$TimedRunnable.count` @type ^`long` @kind wide;
  #L4502a4.  v2:= v6.`io.reactivex.schedulers.TestScheduler$TimedRunnable.count` @type ^`long` @kind wide;
  #L4502a8.  call temp:= `compare`(v0, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.compare:(JJ)I` @kind static;
  #L4502ae.  v6:= temp;
  #L4502b0.  return v6;
  #L4502b2.  call temp:= `compare`(v0, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.compare:(JJ)I` @kind static;
  #L4502b8.  v6:= temp;
  #L4502ba.  return v6;
}
procedure `int` `compareTo`(`io.reactivex.schedulers.TestScheduler$TimedRunnable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$TimedRunnable;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4502cc.  v1:= (`io.reactivex.schedulers.TestScheduler$TimedRunnable`) v1 @kind object;
  #L4502d0.  call temp:= `compareTo`(v0, v1) @signature `Lio/reactivex/schedulers/TestScheduler$TimedRunnable;.compareTo:(Lio/reactivex/schedulers/TestScheduler$TimedRunnable;)I` @kind virtual;
  #L4502d6.  v1:= temp;
  #L4502d8.  return v1;
}
procedure `java.lang.String` `toString`(`io.reactivex.schedulers.TestScheduler$TimedRunnable` v3 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler$TimedRunnable;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4502ec.  v0:= 2I;
  #L4502ee.  v0:= new `java.lang.Object`[v0];
  #L4502f2.  v1:= v3.`io.reactivex.schedulers.TestScheduler$TimedRunnable.time` @type ^`long` @kind wide;
  #L4502f6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4502fc.  v1:= temp @kind object;
  #L4502fe.  v2:= 0I;
  #L450300.  v0[v2]:= v1 @kind object;
  #L450304.  v1:= v3.`io.reactivex.schedulers.TestScheduler$TimedRunnable.run` @type ^`java.lang.Runnable` @kind object;
  #L450308.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L45030e.  v1:= temp @kind object;
  #L450310.  v2:= 1I;
  #L450312.  v0[v2]:= v1 @kind object;
  #L450316.  v1:= "TimedRunnable(time = %d, run = %s)" @kind object;
  #L45031a.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L450320.  v0:= temp @kind object;
  #L450322.  return v0 @kind object;
}
