record `io.reactivex.schedulers.Schedulers$ComputationTask` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.schedulers.Schedulers$ComputationTask` v0 @kind this) @signature `Lio/reactivex/schedulers/Schedulers$ComputationTask;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44fd44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44fd4a.  return @kind void;
}
procedure `io.reactivex.Scheduler` `call`(`io.reactivex.schedulers.Schedulers$ComputationTask` v1 @kind this) @signature `Lio/reactivex/schedulers/Schedulers$ComputationTask;.call:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fd10.  v0:= `@@io.reactivex.schedulers.Schedulers$ComputationHolder.DEFAULT` @type ^`io.reactivex.Scheduler` @kind object;
  #L44fd14.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`io.reactivex.schedulers.Schedulers$ComputationTask` v1 @kind this) @signature `Lio/reactivex/schedulers/Schedulers$ComputationTask;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L44fd28.  call temp:= `call`(v1) @signature `Lio/reactivex/schedulers/Schedulers$ComputationTask;.call:()Lio/reactivex/Scheduler;` @kind virtual;
  #L44fd2e.  v0:= temp @kind object;
  #L44fd30.  return v0 @kind object;
}
