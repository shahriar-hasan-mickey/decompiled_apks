record `io.reactivex.schedulers.TestScheduler$TestWorker` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class {
  `boolean` `io.reactivex.schedulers.TestScheduler$TestWorker.disposed` @AccessFlag VOLATILE;
  `io.reactivex.schedulers.TestScheduler` `io.reactivex.schedulers.TestScheduler$TestWorker.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.schedulers.TestScheduler$TestWorker` v0 @kind this, `io.reactivex.schedulers.TestScheduler` v1 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker;.<init>:(Lio/reactivex/schedulers/TestScheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45025c.  v0.`io.reactivex.schedulers.TestScheduler$TestWorker.this$0` @type ^`io.reactivex.schedulers.TestScheduler` := v1 @kind object;
  #L450260.  call `<init>`(v0) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L450266.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.schedulers.TestScheduler$TestWorker` v1 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450278.  v0:= 1I;
  #L45027a.  v1.`io.reactivex.schedulers.TestScheduler$TestWorker.disposed` @type ^`boolean` := v0 @kind boolean;
  #L45027e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.schedulers.TestScheduler$TestWorker` v1 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450144.  v0:= v1.`io.reactivex.schedulers.TestScheduler$TestWorker.disposed` @type ^`boolean` @kind boolean;
  #L450148.  return v0;
}
procedure `long` `now`(`io.reactivex.schedulers.TestScheduler$TestWorker` v2 @kind this, `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45023c.  v0:= v2.`io.reactivex.schedulers.TestScheduler$TestWorker.this$0` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L450240.  call temp:= `now`(v0, v3) @signature `Lio/reactivex/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L450246.  v0:= temp @kind wide;
  #L450248.  return v0 @kind wide;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.schedulers.TestScheduler$TestWorker` v10 @kind this, `java.lang.Runnable` v11 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L45015c.  v0:= v10.`io.reactivex.schedulers.TestScheduler$TestWorker.disposed` @type ^`boolean` @kind boolean;
  #L450160.  if v0 == 0 then goto L45016a;
  #L450164.  v11:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L450168.  return v11 @kind object;
  #L45016a.  v7:= new `io.reactivex.schedulers.TestScheduler$TimedRunnable`;
  #L45016e.  v2:= 0L;
  #L450172.  v0:= v10.`io.reactivex.schedulers.TestScheduler$TestWorker.this$0` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L450176.  v5:= v0.`io.reactivex.schedulers.TestScheduler.counter` @type ^`long` @kind wide;
  #L45017a.  v8:= 1L;
  #L45017e.  v8:= v8 + v5 @kind long;
  #L450180.  v0.`io.reactivex.schedulers.TestScheduler.counter` @type ^`long` := v8 @kind wide;
  #L450184.  v0:= v7 @kind object;
  #L450186.  v1:= v10 @kind object;
  #L450188.  v4:= v11 @kind object;
  #L45018a.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/schedulers/TestScheduler$TimedRunnable;.<init>:(Lio/reactivex/schedulers/TestScheduler$TestWorker;JLjava/lang/Runnable;J)V` @kind direct;
  #L450190.  v11:= v10.`io.reactivex.schedulers.TestScheduler$TestWorker.this$0` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L450194.  v11:= v11.`io.reactivex.schedulers.TestScheduler.queue` @type ^`java.util.Queue` @kind object;
  #L450198.  call temp:= `add`(v11, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45019e.  v11:= new `io.reactivex.schedulers.TestScheduler$TestWorker$QueueRemove`;
  #L4501a2.  call `<init>`(v11, v10, v7) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker$QueueRemove;.<init>:(Lio/reactivex/schedulers/TestScheduler$TestWorker;Lio/reactivex/schedulers/TestScheduler$TimedRunnable;)V` @kind direct;
  #L4501a8.  call temp:= `fromRunnable`(v11) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L4501ae.  v11:= temp @kind object;
  #L4501b0.  return v11 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.schedulers.TestScheduler$TestWorker` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4501c4.  v0:= v8.`io.reactivex.schedulers.TestScheduler$TestWorker.disposed` @type ^`boolean` @kind boolean;
  #L4501c8.  if v0 == 0 then goto L4501d2;
  #L4501cc.  v9:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4501d0.  return v9 @kind object;
  #L4501d2.  v7:= new `io.reactivex.schedulers.TestScheduler$TimedRunnable`;
  #L4501d6.  v0:= v8.`io.reactivex.schedulers.TestScheduler$TestWorker.this$0` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L4501da.  v0:= v0.`io.reactivex.schedulers.TestScheduler.time` @type ^`long` @kind wide;
  #L4501de.  call temp:= `toNanos`(v12, v10) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4501e4.  v10:= temp @kind wide;
  #L4501e6.  v2:= v0 + v10 @kind long;
  #L4501ea.  v10:= v8.`io.reactivex.schedulers.TestScheduler$TestWorker.this$0` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L4501ee.  v5:= v10.`io.reactivex.schedulers.TestScheduler.counter` @type ^`long` @kind wide;
  #L4501f2.  v11:= 1L;
  #L4501f6.  v11:= v11 + v5 @kind long;
  #L4501f8.  v10.`io.reactivex.schedulers.TestScheduler.counter` @type ^`long` := v11 @kind wide;
  #L4501fc.  v0:= v7 @kind object;
  #L4501fe.  v1:= v8 @kind object;
  #L450200.  v4:= v9 @kind object;
  #L450202.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/schedulers/TestScheduler$TimedRunnable;.<init>:(Lio/reactivex/schedulers/TestScheduler$TestWorker;JLjava/lang/Runnable;J)V` @kind direct;
  #L450208.  v9:= v8.`io.reactivex.schedulers.TestScheduler$TestWorker.this$0` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L45020c.  v9:= v9.`io.reactivex.schedulers.TestScheduler.queue` @type ^`java.util.Queue` @kind object;
  #L450210.  call temp:= `add`(v9, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L450216.  v9:= new `io.reactivex.schedulers.TestScheduler$TestWorker$QueueRemove`;
  #L45021a.  call `<init>`(v9, v8, v7) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker$QueueRemove;.<init>:(Lio/reactivex/schedulers/TestScheduler$TestWorker;Lio/reactivex/schedulers/TestScheduler$TimedRunnable;)V` @kind direct;
  #L450220.  call temp:= `fromRunnable`(v9) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L450226.  v9:= temp @kind object;
  #L450228.  return v9 @kind object;
}
