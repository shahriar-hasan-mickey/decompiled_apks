record `io.reactivex.schedulers.TestScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `long` `io.reactivex.schedulers.TestScheduler.counter` @AccessFlag ;
  `java.util.Queue` `io.reactivex.schedulers.TestScheduler.queue` @AccessFlag FINAL;
  `long` `io.reactivex.schedulers.TestScheduler.time` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.schedulers.TestScheduler` v2 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45039c.  call `<init>`(v2) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L4503a2.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L4503a6.  v1:= 11I;
  #L4503aa.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:(I)V` @kind direct;
  #L4503b0.  v2.`io.reactivex.schedulers.TestScheduler.queue` @type ^`java.util.Queue` := v0 @kind object;
  #L4503b4.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.schedulers.TestScheduler` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler;.<init>:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4503c8.  call `<init>`(v2) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L4503ce.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L4503d2.  v1:= 11I;
  #L4503d6.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:(I)V` @kind direct;
  #L4503dc.  v2.`io.reactivex.schedulers.TestScheduler.queue` @type ^`java.util.Queue` := v0 @kind object;
  #L4503e0.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4503e6.  v3:= temp @kind wide;
  #L4503e8.  v2.`io.reactivex.schedulers.TestScheduler.time` @type ^`long` := v3 @kind wide;
  #L4503ec.  return @kind void;
}
procedure `void` `triggerActions`(`io.reactivex.schedulers.TestScheduler` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/schedulers/TestScheduler;.triggerActions:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L450468.  v0:= v6.`io.reactivex.schedulers.TestScheduler.queue` @type ^`java.util.Queue` @kind object;
  #L45046c.  call temp:= `peek`(v0) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L450472.  v0:= temp @kind object;
  #L450474.  v0:= (`io.reactivex.schedulers.TestScheduler$TimedRunnable`) v0 @kind object;
  #L450478.  if v0 == 0 then goto L4504ca;
  #L45047c.  v1:= v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.time` @type ^`long` @kind wide;
  #L450480.  v3:= lcmp(v1, v7);
  #L450484.  if v3 <= 0 then goto L45048a;
  #L450488.  goto L4504ca;
  #L45048a.  v1:= v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.time` @type ^`long` @kind wide;
  #L45048e.  v3:= 0L;
  #L450492.  v5:= lcmp(v1, v3);
  #L450496.  if v5 != 0 then goto L4504a0;
  #L45049a.  v1:= v6.`io.reactivex.schedulers.TestScheduler.time` @type ^`long` @kind wide;
  #L45049e.  goto L4504a4;
  #L4504a0.  v1:= v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.time` @type ^`long` @kind wide;
  #L4504a4.  v6.`io.reactivex.schedulers.TestScheduler.time` @type ^`long` := v1 @kind wide;
  #L4504a8.  v1:= v6.`io.reactivex.schedulers.TestScheduler.queue` @type ^`java.util.Queue` @kind object;
  #L4504ac.  call temp:= `remove`(v1, v0) @signature `Ljava/util/Queue;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4504b2.  v1:= v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.scheduler` @type ^`io.reactivex.schedulers.TestScheduler$TestWorker` @kind object;
  #L4504b6.  v1:= v1.`io.reactivex.schedulers.TestScheduler$TestWorker.disposed` @type ^`boolean` @kind boolean;
  #L4504ba.  if v1 != 0 then goto L450468;
  #L4504be.  v0:= v0.`io.reactivex.schedulers.TestScheduler$TimedRunnable.run` @type ^`java.lang.Runnable` @kind object;
  #L4504c2.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4504c8.  goto L450468;
  #L4504ca.  v6.`io.reactivex.schedulers.TestScheduler.time` @type ^`long` := v7 @kind wide;
  #L4504ce.  return @kind void;
}
procedure `void` `advanceTimeBy`(`io.reactivex.schedulers.TestScheduler` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler;.advanceTimeBy:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450400.  v0:= v2.`io.reactivex.schedulers.TestScheduler.time` @type ^`long` @kind wide;
  #L450404.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L45040a.  v3:= temp @kind wide;
  #L45040c.  v0:= v0 + v3 @kind long;
  #L45040e.  v3:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L450412.  call `advanceTimeTo`(v2, v0, v3) @signature `Lio/reactivex/schedulers/TestScheduler;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L450418.  return @kind void;
}
procedure `void` `advanceTimeTo`(`io.reactivex.schedulers.TestScheduler` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {
    temp;

  #L45042c.  call temp:= `toNanos`(v3, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L450432.  v1:= temp @kind wide;
  #L450434.  call `triggerActions`(v0, v1) @signature `Lio/reactivex/schedulers/TestScheduler;.triggerActions:(J)V` @kind direct;
  #L45043a.  return @kind void;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.schedulers.TestScheduler` v1 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45035c.  v0:= new `io.reactivex.schedulers.TestScheduler$TestWorker`;
  #L450360.  call `<init>`(v0, v1) @signature `Lio/reactivex/schedulers/TestScheduler$TestWorker;.<init>:(Lio/reactivex/schedulers/TestScheduler;)V` @kind direct;
  #L450366.  return v0 @kind object;
}
procedure `long` `now`(`io.reactivex.schedulers.TestScheduler` v3 @kind this, `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L450378.  v0:= v3.`io.reactivex.schedulers.TestScheduler.time` @type ^`long` @kind wide;
  #L45037c.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L450380.  call temp:= `convert`(v4, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L450386.  v0:= temp @kind wide;
  #L450388.  return v0 @kind wide;
}
procedure `void` `triggerActions`(`io.reactivex.schedulers.TestScheduler` v2 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler;.triggerActions:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45044c.  v0:= v2.`io.reactivex.schedulers.TestScheduler.time` @type ^`long` @kind wide;
  #L450450.  call `triggerActions`(v2, v0) @signature `Lio/reactivex/schedulers/TestScheduler;.triggerActions:(J)V` @kind direct;
  #L450456.  return @kind void;
}
