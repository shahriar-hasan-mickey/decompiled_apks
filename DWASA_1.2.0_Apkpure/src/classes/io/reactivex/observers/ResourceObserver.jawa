record `io.reactivex.observers.ResourceObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.disposables.ListCompositeDisposable` `io.reactivex.observers.ResourceObserver.resources` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.ResourceObserver.upstream` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.ResourceObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44954c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L449552.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L449556.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44955c.  v1.`io.reactivex.observers.ResourceObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L449560.  v0:= new `io.reactivex.internal.disposables.ListCompositeDisposable`;
  #L449564.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.<init>:()V` @kind direct;
  #L44956a.  v1.`io.reactivex.observers.ResourceObserver.resources` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` := v0 @kind object;
  #L44956e.  return @kind void;
}
procedure `void` `add`(`io.reactivex.observers.ResourceObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/observers/ResourceObserver;.add:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L449580.  v0:= "resource is null" @kind object;
  #L449584.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44958a.  v0:= v1.`io.reactivex.observers.ResourceObserver.resources` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L44958e.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L449594.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.ResourceObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4495a8.  v0:= v1.`io.reactivex.observers.ResourceObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4495ac.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4495b2.  v0:= temp;
  #L4495b4.  if v0 == 0 then goto L4495c2;
  #L4495b8.  v0:= v1.`io.reactivex.observers.ResourceObserver.resources` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L4495bc.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.dispose:()V` @kind virtual;
  #L4495c2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.ResourceObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L449520.  v0:= v1.`io.reactivex.observers.ResourceObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449524.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44952a.  v0:= temp @kind object;
  #L44952c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L449530.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L449536.  v0:= temp;
  #L449538.  return v0;
}
procedure `void` `onStart`(`io.reactivex.observers.ResourceObserver` v0 @kind this) @signature `Lio/reactivex/observers/ResourceObserver;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L4495d4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.ResourceObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/observers/ResourceObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4495e8.  v0:= v2.`io.reactivex.observers.ResourceObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4495ec.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4495f2.  v1:= temp @kind object;
  #L4495f4.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;Ljava/lang/Class;)Z` @kind static;
  #L4495fa.  v3:= temp;
  #L4495fc.  if v3 == 0 then goto L449606;
  #L449600.  call `onStart`(v2) @signature `Lio/reactivex/observers/ResourceObserver;.onStart:()V` @kind virtual;
  #L449606.  return @kind void;
}
