record `io.reactivex.observers.BaseTestConsumer` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @AccessFlag PROTECTED;
  `long` `io.reactivex.observers.BaseTestConsumer.completions` @AccessFlag PROTECTED;
  `java.util.concurrent.CountDownLatch` `io.reactivex.observers.BaseTestConsumer.done` @AccessFlag PROTECTED_FINAL;
  `java.util.List` `io.reactivex.observers.BaseTestConsumer.errors` @AccessFlag PROTECTED_FINAL;
  `int` `io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @AccessFlag PROTECTED;
  `int` `io.reactivex.observers.BaseTestConsumer.initialFusionMode` @AccessFlag PROTECTED;
  `java.lang.Thread` `io.reactivex.observers.BaseTestConsumer.lastThread` @AccessFlag PROTECTED;
  `java.lang.CharSequence` `io.reactivex.observers.BaseTestConsumer.tag` @AccessFlag PROTECTED;
  `boolean` `io.reactivex.observers.BaseTestConsumer.timeout` @AccessFlag PROTECTED;
  `java.util.List` `io.reactivex.observers.BaseTestConsumer.values` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L448f98.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L448f9e.  v0:= new `io.reactivex.internal.util.VolatileSizeArrayList`;
  #L448fa2.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/VolatileSizeArrayList;.<init>:()V` @kind direct;
  #L448fa8.  v2.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` := v0 @kind object;
  #L448fac.  v0:= new `io.reactivex.internal.util.VolatileSizeArrayList`;
  #L448fb0.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/VolatileSizeArrayList;.<init>:()V` @kind direct;
  #L448fb6.  v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` := v0 @kind object;
  #L448fba.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L448fbe.  v1:= 1I;
  #L448fc0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L448fc6.  v2.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` := v0 @kind object;
  #L448fca.  return @kind void;
}
procedure `java.lang.String` `valueAndClass`(`java.lang.Object` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L448e68.  if v2 == 0 then goto L448eb0;
  #L448e6c.  v0:= new `java.lang.StringBuilder`;
  #L448e70.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448e76.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448e7c.  v1:= " (class: " @kind object;
  #L448e80.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448e86.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L448e8c.  v2:= temp @kind object;
  #L448e8e.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L448e94.  v2:= temp @kind object;
  #L448e96.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448e9c.  v2:= ")" @kind object;
  #L448ea0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448ea6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448eac.  v2:= temp @kind object;
  #L448eae.  return v2 @kind object;
  #L448eb0.  v2:= "null" @kind object;
  #L448eb4.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertComplete`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertComplete:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447ec0.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L447ec4.  v2:= 0L;
  #L447ec8.  v4:= lcmp(v0, v2);
  #L447ecc.  if v4 == 0 then goto L447f0a;
  #L447ed0.  v2:= 1L;
  #L447ed4.  v4:= lcmp(v0, v2);
  #L447ed8.  if v4 > 0 then goto L447ede;
  #L447edc.  return v5 @kind object;
  #L447ede.  v2:= new `java.lang.StringBuilder`;
  #L447ee2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L447ee8.  v3:= "Multiple completions: " @kind object;
  #L447eec.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L447ef2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L447ef8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L447efe.  v0:= temp @kind object;
  #L447f00.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L447f06.  v0:= temp @kind object;
  #L447f08.  throw v0;
  #L447f0a.  v0:= "Not completed" @kind object;
  #L447f0e.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L447f14.  v0:= temp @kind object;
  #L447f16.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertEmpty`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertEmpty:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L447f28.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L447f2e.  v0:= temp @kind object;
  #L447f30.  call temp:= `assertNoValues`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L447f36.  v0:= temp @kind object;
  #L447f38.  call temp:= `assertNoErrors`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L447f3e.  v0:= temp @kind object;
  #L447f40.  call temp:= `assertNotComplete`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L447f46.  v0:= temp @kind object;
  #L447f48.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `io.reactivex.functions.Predicate` v6 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447f5c.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L447f60.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L447f66.  v0:= temp;
  #L447f68.  if v0 == 0 then goto L447fd6;
  #L447f6c.  v1:= 0I;
  #L447f6e.  v2:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L447f72.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L447f78.  v2:= temp @kind object;
  #L447f7a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447f80.  v3:= temp;
  #L447f82.  v4:= 1I;
  #L447f84.  if v3 == 0 then goto L447fb0;
  #L447f88.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447f8e.  v3:= temp @kind object;
  #L447f90.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L447f94.  call temp:= `test`(v6, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L447f9a.  v3:= temp;
  #L447f9c.  if v3 == 0 then goto L447f7a;
  #L447fa0.  v1:= 1I;
  #L447fa2.  goto L447fb0;
  #L447fa4.  v6:= Exception @type ^`java.lang.Exception` @kind object;
  #L447fa6.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L447fac.  v6:= temp @kind object;
  #L447fae.  throw v6;
  #L447fb0.  if v1 == 0 then goto L447fc8;
  #L447fb4.  if v0 != v4 then goto L447fba;
  #L447fb8.  return v5 @kind object;
  #L447fba.  v6:= "Error present but other errors as well" @kind object;
  #L447fbe.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L447fc4.  v6:= temp @kind object;
  #L447fc6.  throw v6;
  #L447fc8.  v6:= "Error not present" @kind object;
  #L447fcc.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L447fd2.  v6:= temp @kind object;
  #L447fd4.  throw v6;
  #L447fd6.  v6:= "No errors" @kind object;
  #L447fda.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L447fe0.  v6:= temp @kind object;
  #L447fe2.  goto L447fe6;
  #L447fe4.  throw v6;
  #L447fe6.  goto L447fe4;
  catch `java.lang.Exception` @[L447f94..L447f9c] goto L447fa4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L448008.  call temp:= `isInstanceOf`(v1) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L44800e.  v1:= temp @kind object;
  #L448010.  call temp:= `assertError`(v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448016.  v1:= temp @kind object;
  #L448018.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Throwable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L44802c.  call temp:= `equalsWith`(v1) @signature `Lio/reactivex/internal/functions/Functions;.equalsWith:(Ljava/lang/Object;)Lio/reactivex/functions/Predicate;` @kind static;
  #L448032.  v1:= temp @kind object;
  #L448034.  call temp:= `assertError`(v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44803a.  v1:= temp @kind object;
  #L44803c.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertErrorMessage`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertErrorMessage:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L448050.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L448054.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44805a.  v0:= temp;
  #L44805c.  if v0 == 0 then goto L4480d8;
  #L448060.  v1:= 1I;
  #L448062.  if v0 != v1 then goto L4480ca;
  #L448066.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L44806a.  v1:= 0I;
  #L44806c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L448072.  v0:= temp @kind object;
  #L448074.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L448078.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L44807e.  v0:= temp @kind object;
  #L448080.  call temp:= `equals`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L448086.  v1:= temp;
  #L448088.  if v1 == 0 then goto L44808e;
  #L44808c.  return v3 @kind object;
  #L44808e.  v1:= new `java.lang.StringBuilder`;
  #L448092.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448098.  v2:= "Error message differs; Expected: " @kind object;
  #L44809c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4480a2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4480a8.  v4:= ", Actual: " @kind object;
  #L4480ac.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4480b2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4480b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4480be.  v4:= temp @kind object;
  #L4480c0.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4480c6.  v4:= temp @kind object;
  #L4480c8.  throw v4;
  #L4480ca.  v4:= "Multiple errors" @kind object;
  #L4480ce.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4480d4.  v4:= temp @kind object;
  #L4480d6.  throw v4;
  #L4480d8.  v4:= "No errors" @kind object;
  #L4480dc.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4480e2.  v4:= temp @kind object;
  #L4480e4.  throw v4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailure`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailure:(Lio/reactivex/functions/Predicate;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4480f8.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L4480fe.  v0:= temp @kind object;
  #L448100.  call temp:= `assertValues`(v0, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448106.  v3:= temp @kind object;
  #L448108.  call temp:= `assertError`(v3, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44810e.  v2:= temp @kind object;
  #L448110.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448116.  v2:= temp @kind object;
  #L448118.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailure`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailure:(Ljava/lang/Class;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44812c.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448132.  v0:= temp @kind object;
  #L448134.  call temp:= `assertValues`(v0, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44813a.  v3:= temp @kind object;
  #L44813c.  call temp:= `assertError`(v3, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448142.  v2:= temp @kind object;
  #L448144.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44814a.  v2:= temp @kind object;
  #L44814c.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailureAndMessage`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailureAndMessage:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448160.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448166.  v0:= temp @kind object;
  #L448168.  call temp:= `assertValues`(v0, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44816e.  v4:= temp @kind object;
  #L448170.  call temp:= `assertError`(v4, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448176.  v2:= temp @kind object;
  #L448178.  call temp:= `assertErrorMessage`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertErrorMessage:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44817e.  v2:= temp @kind object;
  #L448180.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448186.  v2:= temp @kind object;
  #L448188.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNever`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `io.reactivex.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNever:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L44819c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4481a0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4481a6.  v0:= temp;
  #L4481a8.  v1:= 0I;
  #L4481aa.  if v1 >= v0 then goto L448226;
  #L4481ae.  v2:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4481b2.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4481b8.  v2:= temp @kind object;
  #L4481ba.  call temp:= `test`(v4, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4481c0.  v2:= temp;
  #L4481c2.  if v2 != 0 then goto L4481cc;
  #L4481c6.  v1:= v1 + 1;
  #L4481ca.  goto L4481aa;
  #L4481cc.  v0:= new `java.lang.StringBuilder`;
  #L4481d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4481d6.  v2:= "Value at position " @kind object;
  #L4481da.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4481e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4481e6.  v1:= " matches predicate " @kind object;
  #L4481ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4481f0.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4481f6.  v4:= temp @kind object;
  #L4481f8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4481fe.  v4:= ", which was not expected." @kind object;
  #L448202.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448208.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44820e.  v4:= temp @kind object;
  #L448210.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448216.  v4:= temp @kind object;
  #L448218.  throw v4;
  #L44821a.  v4:= Exception @type ^`java.lang.Exception` @kind object;
  #L44821c.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L448222.  v4:= temp @kind object;
  #L448224.  throw v4;
  #L448226.  return v3 @kind object;
  catch `java.lang.Exception` @[L4481ba..L44821a] goto L44821a;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNever`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNever:(Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L448248.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L44824c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448252.  v0:= temp;
  #L448254.  v1:= 0I;
  #L448256.  if v1 >= v0 then goto L4482c6;
  #L44825a.  v2:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L44825e.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L448264.  v2:= temp @kind object;
  #L448266.  call temp:= `equals`(v2, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L44826c.  v2:= temp;
  #L44826e.  if v2 != 0 then goto L448278;
  #L448272.  v1:= v1 + 1;
  #L448276.  goto L448256;
  #L448278.  v0:= new `java.lang.StringBuilder`;
  #L44827c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448282.  v2:= "Value at position " @kind object;
  #L448286.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44828c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L448292.  v1:= " is equal to " @kind object;
  #L448296.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44829c.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4482a2.  v4:= temp @kind object;
  #L4482a4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4482aa.  v4:= "; Expected them to be different" @kind object;
  #L4482ae.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4482b4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4482ba.  v4:= temp @kind object;
  #L4482bc.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4482c2.  v4:= temp @kind object;
  #L4482c4.  throw v4;
  #L4482c6.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoErrors`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4482d8.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4482dc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4482e2.  v0:= temp;
  #L4482e4.  if v0 != 0 then goto L4482ea;
  #L4482e8.  return v2 @kind object;
  #L4482ea.  v0:= new `java.lang.StringBuilder`;
  #L4482ee.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4482f4.  v1:= "Error(s) present: " @kind object;
  #L4482f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4482fe.  v1:= v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L448302.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448308.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44830e.  v0:= temp @kind object;
  #L448310.  call temp:= `fail`(v2, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448316.  v0:= temp @kind object;
  #L448318.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44832c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L448330.  if v0 != 0 then goto L448336;
  #L448334.  return v1 @kind object;
  #L448336.  v0:= "Timeout?!" @kind object;
  #L44833a.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448340.  v0:= temp @kind object;
  #L448342.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoValues`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448354.  v0:= 0I;
  #L448356.  call temp:= `assertValueCount`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44835c.  v0:= temp @kind object;
  #L44835e.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotComplete`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L448370.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L448374.  v2:= 1L;
  #L448378.  v4:= lcmp(v0, v2);
  #L44837c.  if v4 == 0 then goto L4483b6;
  #L448380.  v4:= lcmp(v0, v2);
  #L448384.  if v4 > 0 then goto L44838a;
  #L448388.  return v5 @kind object;
  #L44838a.  v2:= new `java.lang.StringBuilder`;
  #L44838e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448394.  v3:= "Multiple completions: " @kind object;
  #L448398.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44839e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4483a4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4483aa.  v0:= temp @kind object;
  #L4483ac.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4483b2.  v0:= temp @kind object;
  #L4483b4.  throw v0;
  #L4483b6.  v0:= "Completed!" @kind object;
  #L4483ba.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4483c0.  v0:= temp @kind object;
  #L4483c2.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`() @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotTerminated`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotTerminated:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4483d4.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4483d8.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4483de.  v0:= temp @kind wide;
  #L4483e0.  v2:= 0L;
  #L4483e4.  v4:= lcmp(v0, v2);
  #L4483e8.  if v4 == 0 then goto L4483ee;
  #L4483ec.  return v5 @kind object;
  #L4483ee.  v0:= "Subscriber terminated!" @kind object;
  #L4483f2.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4483f8.  v0:= temp @kind object;
  #L4483fa.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertResult`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertResult:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44840c.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448412.  v0:= temp @kind object;
  #L448414.  call temp:= `assertValues`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44841a.  v2:= temp @kind object;
  #L44841c.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448422.  v2:= temp @kind object;
  #L448424.  call temp:= `assertComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44842a.  v2:= temp @kind object;
  #L44842c.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`() @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertTerminated`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertTerminated:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L448440.  v0:= v7.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L448444.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L44844a.  v0:= temp @kind wide;
  #L44844c.  v2:= 0L;
  #L448450.  v4:= lcmp(v0, v2);
  #L448454.  if v4 != 0 then goto L44850e;
  #L448458.  v0:= v7.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L44845c.  v4:= 1L;
  #L448460.  v6:= lcmp(v0, v4);
  #L448464.  if v6 > 0 then goto L4484e2;
  #L448468.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L44846c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448472.  v4:= temp;
  #L448474.  v5:= 1I;
  #L448476.  if v4 > v5 then goto L4484b6;
  #L44847a.  v5:= lcmp(v0, v2);
  #L44847e.  if v5 == 0 then goto L4484b4;
  #L448482.  if v4 != 0 then goto L448488;
  #L448486.  goto L4484b4;
  #L448488.  v2:= new `java.lang.StringBuilder`;
  #L44848c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448492.  v3:= "Terminated with multiple completions and errors: " @kind object;
  #L448496.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44849c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4484a2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4484a8.  v0:= temp @kind object;
  #L4484aa.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4484b0.  v0:= temp @kind object;
  #L4484b2.  throw v0;
  #L4484b4.  return v7 @kind object;
  #L4484b6.  v0:= new `java.lang.StringBuilder`;
  #L4484ba.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4484c0.  v1:= "Terminated with multiple errors: " @kind object;
  #L4484c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4484ca.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4484d0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4484d6.  v0:= temp @kind object;
  #L4484d8.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4484de.  v0:= temp @kind object;
  #L4484e0.  throw v0;
  #L4484e2.  v2:= new `java.lang.StringBuilder`;
  #L4484e6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4484ec.  v3:= "Terminated with multiple completions: " @kind object;
  #L4484f0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4484f6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4484fc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448502.  v0:= temp @kind object;
  #L448504.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44850a.  v0:= temp @kind object;
  #L44850c.  throw v0;
  #L44850e.  v0:= "Subscriber still running!" @kind object;
  #L448512.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448518.  v0:= temp @kind object;
  #L44851a.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44852c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L448530.  if v0 == 0 then goto L448536;
  #L448534.  return v1 @kind object;
  #L448536.  v0:= "No timeout?!" @kind object;
  #L44853a.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448540.  v0:= temp @kind object;
  #L448542.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValue`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValue:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448554.  v0:= 0I;
  #L448556.  call temp:= `assertValueAt`(v1, v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueAt:(ILio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44855c.  v2:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448560.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448566.  v2:= temp;
  #L448568.  v0:= 1I;
  #L44856a.  if v2 > v0 then goto L448570;
  #L44856e.  return v1 @kind object;
  #L448570.  v2:= "Value present but other values as well" @kind object;
  #L448574.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44857a.  v2:= temp @kind object;
  #L44857c.  throw v2;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValue`(`io.reactivex.observers.BaseTestConsumer` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValue:(Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L448590.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448594.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44859a.  v0:= temp;
  #L44859c.  v1:= ", Actual: " @kind object;
  #L4485a0.  v2:= "Expected: " @kind object;
  #L4485a4.  v3:= 1I;
  #L4485a6.  if v0 != v3 then goto L44860a;
  #L4485aa.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4485ae.  v3:= 0I;
  #L4485b0.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4485b6.  v0:= temp @kind object;
  #L4485b8.  call temp:= `equals`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4485be.  v3:= temp;
  #L4485c0.  if v3 == 0 then goto L4485c6;
  #L4485c4.  return v4 @kind object;
  #L4485c6.  v3:= new `java.lang.StringBuilder`;
  #L4485ca.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4485d0.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4485d6.  call temp:= `valueAndClass`(v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4485dc.  v5:= temp @kind object;
  #L4485de.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4485e4.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4485ea.  call temp:= `valueAndClass`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4485f0.  v5:= temp @kind object;
  #L4485f2.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4485f8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4485fe.  v5:= temp @kind object;
  #L448600.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448606.  v5:= temp @kind object;
  #L448608.  throw v5;
  #L44860a.  v0:= new `java.lang.StringBuilder`;
  #L44860e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448614.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44861a.  call temp:= `valueAndClass`(v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L448620.  v5:= temp @kind object;
  #L448622.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448628.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44862e.  v5:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448632.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448638.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44863e.  v5:= temp @kind object;
  #L448640.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448646.  v5:= temp @kind object;
  #L448648.  throw v5;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueAt`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `int` v2 , `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueAt:(ILio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44865c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448660.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448666.  v0:= temp;
  #L448668.  if v0 == 0 then goto L4486dc;
  #L44866c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448670.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448676.  v0:= temp;
  #L448678.  if v2 >= v0 then goto L4486b0;
  #L44867c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448680.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L448686.  v2:= temp @kind object;
  #L448688.  call temp:= `test`(v3, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L44868e.  v2:= temp;
  #L448690.  if v2 == 0 then goto L448696;
  #L448694.  return v1 @kind object;
  #L448696.  v2:= "Value not present" @kind object;
  #L44869a.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4486a0.  v2:= temp @kind object;
  #L4486a2.  throw v2;
  #L4486a4.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L4486a6.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4486ac.  v2:= temp @kind object;
  #L4486ae.  throw v2;
  #L4486b0.  v3:= new `java.lang.StringBuilder`;
  #L4486b4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4486ba.  v0:= "Invalid index: " @kind object;
  #L4486be.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4486c4.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4486ca.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4486d0.  v2:= temp @kind object;
  #L4486d2.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4486d8.  v2:= temp @kind object;
  #L4486da.  throw v2;
  #L4486dc.  v2:= "No values" @kind object;
  #L4486e0.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4486e6.  v2:= temp @kind object;
  #L4486e8.  throw v2;
  catch `java.lang.Exception` @[L44867c..L448690] goto L4486a4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueAt`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueAt:(ILjava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44870c.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448710.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448716.  v0:= temp;
  #L448718.  if v0 == 0 then goto L4487b2;
  #L44871c.  if v3 >= v0 then goto L448786;
  #L448720.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448724.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44872a.  v3:= temp @kind object;
  #L44872c.  call temp:= `equals`(v4, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L448732.  v0:= temp;
  #L448734.  if v0 == 0 then goto L44873a;
  #L448738.  return v2 @kind object;
  #L44873a.  v0:= new `java.lang.StringBuilder`;
  #L44873e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448744.  v1:= "Expected: " @kind object;
  #L448748.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44874e.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L448754.  v4:= temp @kind object;
  #L448756.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44875c.  v4:= ", Actual: " @kind object;
  #L448760.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448766.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L44876c.  v3:= temp @kind object;
  #L44876e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448774.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44877a.  v3:= temp @kind object;
  #L44877c.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448782.  v3:= temp @kind object;
  #L448784.  throw v3;
  #L448786.  v4:= new `java.lang.StringBuilder`;
  #L44878a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448790.  v0:= "Invalid index: " @kind object;
  #L448794.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44879a.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4487a0.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4487a6.  v3:= temp @kind object;
  #L4487a8.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4487ae.  v3:= temp @kind object;
  #L4487b0.  throw v3;
  #L4487b2.  v3:= "No values" @kind object;
  #L4487b6.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4487bc.  v3:= temp @kind object;
  #L4487be.  throw v3;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueCount`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4487d0.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4487d4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4487da.  v0:= temp;
  #L4487dc.  if v0 != v4 then goto L4487e2;
  #L4487e0.  return v3 @kind object;
  #L4487e2.  v1:= new `java.lang.StringBuilder`;
  #L4487e6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4487ec.  v2:= "Value counts differ; Expected: " @kind object;
  #L4487f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4487f6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4487fc.  v4:= ", Actual: " @kind object;
  #L448800.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448806.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L44880c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448812.  v4:= temp @kind object;
  #L448814.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44881a.  v4:= temp @kind object;
  #L44881c.  throw v4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSequence`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `java.lang.Iterable` v6 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSequence:(Ljava/lang/Iterable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L448830.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448834.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44883a.  v0:= temp @kind object;
  #L44883c.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L448842.  v6:= temp @kind object;
  #L448844.  v1:= 0I;
  #L448846.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44884c.  v2:= temp;
  #L44884e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L448854.  v3:= temp;
  #L448856.  if v3 == 0 then goto L4488de;
  #L44885a.  if v2 != 0 then goto L448860;
  #L44885e.  goto L4488de;
  #L448860.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L448866.  v2:= temp @kind object;
  #L448868.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44886e.  v3:= temp @kind object;
  #L448870.  call temp:= `equals`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L448876.  v4:= temp;
  #L448878.  if v4 == 0 then goto L448882;
  #L44887c.  v1:= v1 + 1;
  #L448880.  goto L448846;
  #L448882.  v6:= new `java.lang.StringBuilder`;
  #L448886.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44888c.  v0:= "Values at position " @kind object;
  #L448890.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448896.  call temp:= `append`(v6, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L44889c.  v0:= " differ; Expected: " @kind object;
  #L4488a0.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4488a6.  call temp:= `valueAndClass`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4488ac.  v0:= temp @kind object;
  #L4488ae.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4488b4.  v0:= ", Actual: " @kind object;
  #L4488b8.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4488be.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4488c4.  v0:= temp @kind object;
  #L4488c6.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4488cc.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4488d2.  v6:= temp @kind object;
  #L4488d4.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4488da.  v6:= temp @kind object;
  #L4488dc.  throw v6;
  #L4488de.  v6:= ")" @kind object;
  #L4488e2.  if v3 != 0 then goto L44891e;
  #L4488e6.  if v2 != 0 then goto L4488ec;
  #L4488ea.  return v5 @kind object;
  #L4488ec.  v0:= new `java.lang.StringBuilder`;
  #L4488f0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4488f6.  v2:= "Fewer values received than expected (" @kind object;
  #L4488fa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448900.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L448906.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44890c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448912.  v6:= temp @kind object;
  #L448914.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44891a.  v6:= temp @kind object;
  #L44891c.  throw v6;
  #L44891e.  v0:= new `java.lang.StringBuilder`;
  #L448922.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448928.  v2:= "More values received than expected (" @kind object;
  #L44892c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448932.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L448938.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44893e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448944.  v6:= temp @kind object;
  #L448946.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44894c.  v6:= temp @kind object;
  #L44894e.  goto L448952;
  #L448950.  throw v6;
  #L448952.  goto L448950;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSequenceOnly`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSequenceOnly:(Ljava/lang/Iterable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448964.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44896a.  v0:= temp @kind object;
  #L44896c.  call temp:= `assertValueSequence`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSequence:(Ljava/lang/Iterable;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448972.  v2:= temp @kind object;
  #L448974.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L44897a.  v2:= temp @kind object;
  #L44897c.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448982.  v2:= temp @kind object;
  #L448984.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSet`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSet:(Ljava/util/Collection;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L448998.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L44899e.  v0:= temp;
  #L4489a0.  if v0 == 0 then goto L4489ac;
  #L4489a4.  call temp:= `assertNoValues`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L4489aa.  return v3 @kind object;
  #L4489ac.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4489b0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4489b6.  v0:= temp @kind object;
  #L4489b8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4489be.  v1:= temp;
  #L4489c0.  if v1 == 0 then goto L448a0e;
  #L4489c4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4489ca.  v1:= temp @kind object;
  #L4489cc.  call temp:= `contains`(v4, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4489d2.  v2:= temp;
  #L4489d4.  if v2 == 0 then goto L4489da;
  #L4489d8.  goto L4489b8;
  #L4489da.  v4:= new `java.lang.StringBuilder`;
  #L4489de.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4489e4.  v0:= "Value not in the expected collection: " @kind object;
  #L4489e8.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4489ee.  call temp:= `valueAndClass`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4489f4.  v0:= temp @kind object;
  #L4489f6.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4489fc.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448a02.  v4:= temp @kind object;
  #L448a04.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448a0a.  v4:= temp @kind object;
  #L448a0c.  throw v4;
  #L448a0e.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSetOnly`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSetOnly:(Ljava/util/Collection;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448a20.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448a26.  v0:= temp @kind object;
  #L448a28.  call temp:= `assertValueSet`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSet:(Ljava/util/Collection;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448a2e.  v2:= temp @kind object;
  #L448a30.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448a36.  v2:= temp @kind object;
  #L448a38.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448a3e.  v2:= temp @kind object;
  #L448a40.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValues`(`io.reactivex.observers.BaseTestConsumer` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L448a54.  v0:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448a58.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448a5e.  v0:= temp;
  #L448a60.  v1:= length @variable v7;
  #L448a62.  v2:= ", Actual: " @kind object;
  #L448a66.  if v0 != v1 then goto L448aec;
  #L448a6a.  v1:= 0I;
  #L448a6c.  if v1 >= v0 then goto L448aea;
  #L448a70.  v3:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448a74.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L448a7a.  v3:= temp @kind object;
  #L448a7c.  v4:= v7[v1] @kind object;
  #L448a80.  call temp:= `equals`(v4, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L448a86.  v5:= temp;
  #L448a88.  if v5 == 0 then goto L448a92;
  #L448a8c.  v1:= v1 + 1;
  #L448a90.  goto L448a6c;
  #L448a92.  v7:= new `java.lang.StringBuilder`;
  #L448a96.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448a9c.  v0:= "Values at position " @kind object;
  #L448aa0.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448aa6.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L448aac.  v0:= " differ; Expected: " @kind object;
  #L448ab0.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448ab6.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L448abc.  v0:= temp @kind object;
  #L448abe.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448ac4.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448aca.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L448ad0.  v0:= temp @kind object;
  #L448ad2.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448ad8.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448ade.  v7:= temp @kind object;
  #L448ae0.  call temp:= `fail`(v6, v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448ae6.  v7:= temp @kind object;
  #L448ae8.  throw v7;
  #L448aea.  return v6 @kind object;
  #L448aec.  v1:= new `java.lang.StringBuilder`;
  #L448af0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L448af6.  v3:= "Value count differs; Expected: " @kind object;
  #L448afa.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448b00.  v3:= length @variable v7;
  #L448b02.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L448b08.  v3:= " " @kind object;
  #L448b0c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448b12.  call temp:= `toString`(v7) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L448b18.  v7:= temp @kind object;
  #L448b1a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448b20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448b26.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L448b2c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448b32.  v7:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448b36.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448b3c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448b42.  v7:= temp @kind object;
  #L448b44.  call temp:= `fail`(v6, v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L448b4a.  v7:= temp @kind object;
  #L448b4c.  goto L448b50;
  #L448b4e.  throw v7;
  #L448b50.  goto L448b4e;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValuesOnly`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValuesOnly:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448b64.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448b6a.  v0:= temp @kind object;
  #L448b6c.  call temp:= `assertValues`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448b72.  v2:= temp @kind object;
  #L448b74.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448b7a.  v2:= temp @kind object;
  #L448b7c.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448b82.  v2:= temp @kind object;
  #L448b84.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `await`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L448b98.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L448b9c.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L448ba2.  v0:= temp @kind wide;
  #L448ba4.  v2:= 0L;
  #L448ba8.  v4:= lcmp(v0, v2);
  #L448bac.  if v4 != 0 then goto L448bb2;
  #L448bb0.  return v5 @kind object;
  #L448bb2.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L448bb6.  call `await`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L448bbc.  return v5 @kind object;
}
procedure `boolean` `await`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447d74.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L447d78.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L447d7e.  v0:= temp @kind wide;
  #L447d80.  v2:= 0L;
  #L447d84.  v4:= lcmp(v0, v2);
  #L447d88.  if v4 == 0 then goto L447da2;
  #L447d8c.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L447d90.  call temp:= `await`(v0, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L447d96.  v6:= temp;
  #L447d98.  if v6 == 0 then goto L447d9e;
  #L447d9c.  goto L447da2;
  #L447d9e.  v6:= 0I;
  #L447da0.  goto L447da4;
  #L447da2.  v6:= 1I;
  #L447da4.  v7:= v6 ^~ 1;
  #L447da8.  v5.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v7 @kind boolean;
  #L447dac.  return v6;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L448bd0.  v0:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L448bd4.  v1:= 5000L;
  #L448bd8.  call temp:= `awaitCount`(v3, v4, v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448bde.  v4:= temp @kind object;
  #L448be0.  return v4 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L448bf4.  v0:= 5000L;
  #L448bf8.  call temp:= `awaitCount`(v2, v3, v4, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L448bfe.  v3:= temp @kind object;
  #L448c00.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this, `int` v8 , `java.lang.Runnable` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L448c14.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L448c1a.  v0:= temp @kind wide;
  #L448c1c.  v2:= 0L;
  #L448c20.  v4:= lcmp(v10, v2);
  #L448c24.  if v4 <= 0 then goto L448c42;
  #L448c28.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L448c2e.  v4:= temp @kind wide;
  #L448c30.  v4:= v4 - v0 @kind long;
  #L448c32.  v6:= lcmp(v4, v10);
  #L448c36.  if v6 < 0 then goto L448c42;
  #L448c3a.  v8:= 1I;
  #L448c3c.  v7.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v8 @kind boolean;
  #L448c40.  goto L448c68;
  #L448c42.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L448c46.  call temp:= `getCount`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L448c4c.  v4:= temp @kind wide;
  #L448c4e.  v6:= lcmp(v4, v2);
  #L448c52.  if v6 != 0 then goto L448c58;
  #L448c56.  goto L448c68;
  #L448c58.  v2:= v7.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448c5c.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448c62.  v2:= temp;
  #L448c64.  if v2 < v8 then goto L448c6a;
  #L448c68.  return v7 @kind object;
  #L448c6a.  call `run`(v9) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L448c70.  goto L448c1c;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitDone`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitDone:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448c84.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L448c88.  call temp:= `await`(v0, v2, v4) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L448c8e.  v2:= temp;
  #L448c90.  if v2 != 0 then goto L448ca0;
  #L448c94.  v2:= 1I;
  #L448c96.  v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v2 @kind boolean;
  #L448c9a.  call `dispose`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.dispose:()V` @kind virtual;
  #L448ca0.  return v1 @kind object;
  #L448ca2.  v2:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L448ca4.  call `dispose`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.dispose:()V` @kind virtual;
  #L448caa.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L448cb0.  v2:= temp @kind object;
  #L448cb2.  throw v2;
  catch `java.lang.InterruptedException` @[L448c84..L448ca0] goto L448ca2;
}
procedure `boolean` `awaitTerminalEvent`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitTerminalEvent:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L447dc0.  call temp:= `await`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L447dc6.  v0:= 1I;
  #L447dc8.  return v0;
  #L447dca.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L447dd0.  v0:= temp @kind object;
  #L447dd2.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L447dd8.  v0:= 0I;
  #L447dda.  return v0;
  catch `java.lang.InterruptedException` @[L447dc0..L447dc6] goto L447dca;
}
procedure `boolean` `awaitTerminalEvent`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitTerminalEvent:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L447dfc.  call temp:= `await`(v0, v1, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L447e02.  v1:= temp;
  #L447e04.  return v1;
  #L447e06.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L447e0c.  v1:= temp @kind object;
  #L447e0e.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L447e14.  v1:= 0I;
  #L447e16.  return v1;
  catch `java.lang.InterruptedException` @[L447dfc..L447e04] goto L447e06;
}
procedure `io.reactivex.observers.BaseTestConsumer` `clearTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.clearTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448cd4.  v0:= 0I;
  #L448cd6.  v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v0 @kind boolean;
  #L448cda.  return v1 @kind object;
}
procedure `long` `completions`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.completions:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L448f80.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L448f84.  return v0 @kind wide;
}
procedure `int` `errorCount`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.errorCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L447e80.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L447e84.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L447e8a.  v0:= temp;
  #L447e8c.  return v0;
}
procedure `java.util.List` `errors`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.errors:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448ee0.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L448ee4.  return v0 @kind object;
}
procedure `java.lang.AssertionError` `fail`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L448d04.  v0:= new `java.lang.StringBuilder`;
  #L448d08.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L448d0e.  v1:= temp;
  #L448d10.  v1:= v1 + 64;
  #L448d14.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L448d1a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d20.  v4:= " (" @kind object;
  #L448d24.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d2a.  v4:= "latch = " @kind object;
  #L448d2e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d34.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L448d38.  call temp:= `getCount`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L448d3e.  v1:= temp @kind wide;
  #L448d40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d46.  v4:= ", " @kind object;
  #L448d4a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d50.  v1:= "values = " @kind object;
  #L448d54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d5a.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448d5e.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448d64.  v1:= temp;
  #L448d66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d6c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d72.  v1:= "errors = " @kind object;
  #L448d76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d7c.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L448d80.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448d86.  v1:= temp;
  #L448d88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d8e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d94.  v4:= "completions = " @kind object;
  #L448d98.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448d9e.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L448da2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L448da8.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L448dac.  if v4 == 0 then goto L448dba;
  #L448db0.  v4:= ", timeout!" @kind object;
  #L448db4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448dba.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.isDisposed:()Z` @kind virtual;
  #L448dc0.  v4:= temp;
  #L448dc2.  if v4 == 0 then goto L448dd0;
  #L448dc6.  v4:= ", disposed!" @kind object;
  #L448dca.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448dd0.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.tag` @type ^`java.lang.CharSequence` @kind object;
  #L448dd4.  if v4 == 0 then goto L448de8;
  #L448dd8.  v1:= ", tag = " @kind object;
  #L448ddc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448de2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;` @kind virtual;
  #L448de8.  v4:= 41I;
  #L448dec.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L448df2.  v4:= new `java.lang.AssertionError`;
  #L448df6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L448dfc.  v0:= temp @kind object;
  #L448dfe.  call `<init>`(v4, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L448e04.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L448e08.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L448e0e.  v0:= temp;
  #L448e10.  if v0 != 0 then goto L448e54;
  #L448e14.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L448e18.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L448e1e.  v0:= temp;
  #L448e20.  v1:= 1I;
  #L448e22.  if v0 != v1 then goto L448e40;
  #L448e26.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L448e2a.  v1:= 0I;
  #L448e2c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L448e32.  v0:= temp @kind object;
  #L448e34.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L448e38.  call temp:= `initCause`(v4, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L448e3e.  goto L448e54;
  #L448e40.  v0:= new `io.reactivex.exceptions.CompositeException`;
  #L448e44.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L448e48.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L448e4e.  call temp:= `initCause`(v4, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L448e54.  return v4 @kind object;
}
procedure `java.util.List` `getEvents`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.getEvents:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L448ef8.  v0:= new `java.util.ArrayList`;
  #L448efc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L448f02.  call temp:= `values`(v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.values:()Ljava/util/List;` @kind virtual;
  #L448f08.  v1:= temp @kind object;
  #L448f0a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L448f10.  call temp:= `errors`(v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.errors:()Ljava/util/List;` @kind virtual;
  #L448f16.  v1:= temp @kind object;
  #L448f18.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L448f1e.  v1:= new `java.util.ArrayList`;
  #L448f22.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L448f28.  v2:= 0L;
  #L448f2c.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L448f30.  v6:= lcmp(v2, v4);
  #L448f34.  if v6 >= 0 then goto L448f4e;
  #L448f38.  call temp:= `createOnComplete`() @signature `Lio/reactivex/Notification;.createOnComplete:()Lio/reactivex/Notification;` @kind static;
  #L448f3e.  v4:= temp @kind object;
  #L448f40.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L448f46.  v4:= 1L;
  #L448f4a.  v2:= v2 + v4 @kind long;
  #L448f4c.  goto L448f2c;
  #L448f4e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L448f54.  return v0 @kind object;
}
procedure `boolean` `isTerminated`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.isTerminated:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447e38.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L447e3c.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L447e42.  v0:= temp @kind wide;
  #L447e44.  v2:= 0L;
  #L447e48.  v4:= lcmp(v0, v2);
  #L447e4c.  if v4 != 0 then goto L447e54;
  #L447e50.  v0:= 1I;
  #L447e52.  goto L447e56;
  #L447e54.  v0:= 0I;
  #L447e56.  return v0;
}
procedure `boolean` `isTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.isTimeout:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L447e68.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L447e6c.  return v0;
}
procedure `java.lang.Thread` `lastThread`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.lastThread:()Ljava/lang/Thread;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448ec8.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` @kind object;
  #L448ecc.  return v0 @kind object;
}
procedure `int` `valueCount`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L447ea0.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L447ea4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L447eaa.  v0:= temp;
  #L447eac.  return v0;
}
procedure `java.util.List` `values`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.values:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L448f68.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L448f6c.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `withTag`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.withTag:(Ljava/lang/CharSequence;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L448cec.  v0.`io.reactivex.observers.BaseTestConsumer.tag` @type ^`java.lang.CharSequence` := v1 @kind object;
  #L448cf0.  return v0 @kind object;
}
