record `io.reactivex.observers.TestObserver` @kind class @AccessFlag PUBLIC extends `io.reactivex.observers.BaseTestConsumer` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.Observer` `io.reactivex.observers.TestObserver.downstream` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.fuseable.QueueDisposable` `io.reactivex.observers.TestObserver.qd` @AccessFlag PRIVATE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.TestObserver.upstream` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44a270.  v0:= `@@io.reactivex.observers.TestObserver$EmptyObserver.INSTANCE` @type ^`io.reactivex.observers.TestObserver$EmptyObserver` @kind object;
  #L44a274.  call `<init>`(v1, v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L44a27a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44a28c.  call `<init>`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L44a292.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44a296.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44a29c.  v1.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44a2a0.  v1.`io.reactivex.observers.TestObserver.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L44a2a4.  return @kind void;
}
procedure `io.reactivex.observers.TestObserver` `create`() @signature `Lio/reactivex/observers/TestObserver;.create:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44a1c0.  v0:= new `io.reactivex.observers.TestObserver`;
  #L44a1c4.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L44a1ca.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `create`(`io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.create:(Lio/reactivex/Observer;)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44a1dc.  v0:= new `io.reactivex.observers.TestObserver`;
  #L44a1e0.  call `<init>`(v0, v1) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L44a1e6.  return v0 @kind object;
}
procedure `java.lang.String` `fusionModeToString`(`int` v2 ) @signature `Lio/reactivex/observers/TestObserver;.fusionModeToString:(I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L44a210.  if v2 == 0 then goto L44a25a;
  #L44a214.  v0:= 1I;
  #L44a216.  if v2 == v0 then goto L44a254;
  #L44a21a.  v0:= 2I;
  #L44a21c.  if v2 == v0 then goto L44a24e;
  #L44a220.  v0:= new `java.lang.StringBuilder`;
  #L44a224.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44a22a.  v1:= "Unknown(" @kind object;
  #L44a22e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a234.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a23a.  v2:= ")" @kind object;
  #L44a23e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a244.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44a24a.  v2:= temp @kind object;
  #L44a24c.  return v2 @kind object;
  #L44a24e.  v2:= "ASYNC" @kind object;
  #L44a252.  return v2 @kind object;
  #L44a254.  v2:= "SYNC" @kind object;
  #L44a258.  return v2 @kind object;
  #L44a25a.  v2:= "NONE" @kind object;
  #L44a25e.  return v2 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `assertFuseable`(`io.reactivex.observers.TestObserver` v2 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertFuseable:()Lio/reactivex/observers/TestObserver;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L44a038.  v0:= v2.`io.reactivex.observers.TestObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L44a03c.  if v0 == 0 then goto L44a042;
  #L44a040.  return v2 @kind object;
  #L44a042.  v0:= new `java.lang.AssertionError`;
  #L44a046.  v1:= "Upstream is not fuseable." @kind object;
  #L44a04a.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44a050.  throw v0;
}
procedure `io.reactivex.observers.TestObserver` `assertFusionMode`(`io.reactivex.observers.TestObserver` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/observers/TestObserver;.assertFusionMode:(I)Lio/reactivex/observers/TestObserver;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44a064.  v0:= v4.`io.reactivex.observers.TestObserver.establishedFusionMode` @type ^`int`;
  #L44a068.  if v0 == v5 then goto L44a0d0;
  #L44a06c.  v1:= v4.`io.reactivex.observers.TestObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L44a070.  if v1 == 0 then goto L44a0c2;
  #L44a074.  v1:= new `java.lang.AssertionError`;
  #L44a078.  v2:= new `java.lang.StringBuilder`;
  #L44a07c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44a082.  v3:= "Fusion mode different. Expected: " @kind object;
  #L44a086.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a08c.  call temp:= `fusionModeToString`(v5) @signature `Lio/reactivex/observers/TestObserver;.fusionModeToString:(I)Ljava/lang/String;` @kind static;
  #L44a092.  v5:= temp @kind object;
  #L44a094.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a09a.  v5:= ", actual: " @kind object;
  #L44a09e.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a0a4.  call temp:= `fusionModeToString`(v0) @signature `Lio/reactivex/observers/TestObserver;.fusionModeToString:(I)Ljava/lang/String;` @kind static;
  #L44a0aa.  v5:= temp @kind object;
  #L44a0ac.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a0b2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44a0b8.  v5:= temp @kind object;
  #L44a0ba.  call `<init>`(v1, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44a0c0.  throw v1;
  #L44a0c2.  v5:= "Upstream is not fuseable" @kind object;
  #L44a0c6.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/observers/TestObserver;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44a0cc.  v5:= temp @kind object;
  #L44a0ce.  throw v5;
  #L44a0d0.  return v4 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `assertNotFuseable`(`io.reactivex.observers.TestObserver` v2 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertNotFuseable:()Lio/reactivex/observers/TestObserver;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L44a0e4.  v0:= v2.`io.reactivex.observers.TestObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L44a0e8.  if v0 != 0 then goto L44a0ee;
  #L44a0ec.  return v2 @kind object;
  #L44a0ee.  v0:= new `java.lang.AssertionError`;
  #L44a0f2.  v1:= "Upstream is fuseable." @kind object;
  #L44a0f6.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44a0fc.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L44a000.  call temp:= `assertNotSubscribed`(v1) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/TestObserver;` @kind virtual;
  #L44a006.  v0:= temp @kind object;
  #L44a008.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `assertNotSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a110.  v0:= v1.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a114.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44a11a.  v0:= temp @kind object;
  #L44a11c.  if v0 != 0 then goto L44a140;
  #L44a120.  v0:= v1.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a124.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L44a12a.  v0:= temp;
  #L44a12c.  if v0 == 0 then goto L44a132;
  #L44a130.  return v1 @kind object;
  #L44a132.  v0:= "Not subscribed but errors found" @kind object;
  #L44a136.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/TestObserver;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44a13c.  v0:= temp @kind object;
  #L44a13e.  throw v0;
  #L44a140.  v0:= "Subscribed!" @kind object;
  #L44a144.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/TestObserver;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44a14a.  v0:= temp @kind object;
  #L44a14c.  throw v0;
}
procedure `io.reactivex.observers.TestObserver` `assertOf`(`io.reactivex.observers.TestObserver` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.assertOf:(Lio/reactivex/functions/Consumer;)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L44a160.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44a166.  return v0 @kind object;
  #L44a168.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44a16a.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L44a170.  v1:= temp @kind object;
  #L44a172.  throw v1;
  catch `java.lang.Throwable` @[L44a160..L44a166] goto L44a168;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L44a01c.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/TestObserver;` @kind virtual;
  #L44a022.  v0:= temp @kind object;
  #L44a024.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `assertSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a190.  v0:= v1.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a194.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44a19a.  v0:= temp @kind object;
  #L44a19c.  if v0 == 0 then goto L44a1a2;
  #L44a1a0.  return v1 @kind object;
  #L44a1a2.  v0:= "Not subscribed!" @kind object;
  #L44a1a6.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/TestObserver;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L44a1ac.  v0:= temp @kind object;
  #L44a1ae.  throw v0;
}
procedure `void` `cancel`(`io.reactivex.observers.TestObserver` v0 @kind this) @signature `Lio/reactivex/observers/TestObserver;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L44a2b8.  call `dispose`(v0) @signature `Lio/reactivex/observers/TestObserver;.dispose:()V` @kind virtual;
  #L44a2be.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a2d0.  v0:= v1.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a2d4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44a2da.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L449f90.  v0:= v1.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449f94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L449f9a.  v0:= temp @kind object;
  #L449f9c.  if v0 == 0 then goto L449fa4;
  #L449fa0.  v0:= 1I;
  #L449fa2.  goto L449fa6;
  #L449fa4.  v0:= 0I;
  #L449fa6.  return v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L449fb8.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/observers/TestObserver;.isDisposed:()Z` @kind virtual;
  #L449fbe.  v0:= temp;
  #L449fc0.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L449fd4.  v0:= v1.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449fd8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L449fde.  v0:= temp @kind object;
  #L449fe0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L449fe4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L449fea.  v0:= temp;
  #L449fec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.observers.TestObserver` v4 @kind this) @signature `Lio/reactivex/observers/TestObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44a2ec.  v0:= v4.`io.reactivex.observers.TestObserver.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L44a2f0.  if v0 != 0 then goto L44a322;
  #L44a2f4.  v0:= 1I;
  #L44a2f6.  v4.`io.reactivex.observers.TestObserver.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L44a2fa.  v0:= v4.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a2fe.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44a304.  v0:= temp @kind object;
  #L44a306.  if v0 != 0 then goto L44a322;
  #L44a30a.  v0:= v4.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a30e.  v1:= new `java.lang.IllegalStateException`;
  #L44a312.  v2:= "onSubscribe not called in proper order" @kind object;
  #L44a316.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44a31c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a322.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44a328.  v0:= temp @kind object;
  #L44a32a.  v4.`io.reactivex.observers.TestObserver.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L44a32e.  v0:= v4.`io.reactivex.observers.TestObserver.completions` @type ^`long` @kind wide;
  #L44a332.  v2:= 1L;
  #L44a336.  v0:= v0 + v2 @kind long;
  #L44a338.  v4.`io.reactivex.observers.TestObserver.completions` @type ^`long` := v0 @kind wide;
  #L44a33c.  v0:= v4.`io.reactivex.observers.TestObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L44a340.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L44a346.  v0:= v4.`io.reactivex.observers.TestObserver.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L44a34a.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L44a350.  return @kind void;
  #L44a352.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44a354.  v1:= v4.`io.reactivex.observers.TestObserver.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L44a358.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L44a35e.  throw v0;
  catch `java.lang.Throwable` @[L44a322..L44a346] goto L44a352;
}
procedure `void` `onError`(`io.reactivex.observers.TestObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44a37c.  v0:= v3.`io.reactivex.observers.TestObserver.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L44a380.  if v0 != 0 then goto L44a3b2;
  #L44a384.  v0:= 1I;
  #L44a386.  v3.`io.reactivex.observers.TestObserver.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L44a38a.  v0:= v3.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a38e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44a394.  v0:= temp @kind object;
  #L44a396.  if v0 != 0 then goto L44a3b2;
  #L44a39a.  v0:= v3.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a39e.  v1:= new `java.lang.IllegalStateException`;
  #L44a3a2.  v2:= "onSubscribe not called in proper order" @kind object;
  #L44a3a6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44a3ac.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a3b2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44a3b8.  v0:= temp @kind object;
  #L44a3ba.  v3.`io.reactivex.observers.TestObserver.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L44a3be.  if v4 != 0 then goto L44a3dc;
  #L44a3c2.  v0:= v3.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a3c6.  v1:= new `java.lang.NullPointerException`;
  #L44a3ca.  v2:= "onError received a null Throwable" @kind object;
  #L44a3ce.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44a3d4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a3da.  goto L44a3e6;
  #L44a3dc.  v0:= v3.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a3e0.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a3e6.  v0:= v3.`io.reactivex.observers.TestObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L44a3ea.  call `onError`(v0, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44a3f0.  v4:= v3.`io.reactivex.observers.TestObserver.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L44a3f4.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L44a3fa.  return @kind void;
  #L44a3fc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44a3fe.  v0:= v3.`io.reactivex.observers.TestObserver.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L44a402.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L44a408.  throw v4;
  catch `java.lang.Throwable` @[L44a3b2..L44a3f0] goto L44a3fc;
}
procedure `void` `onNext`(`io.reactivex.observers.TestObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44a428.  v0:= v3.`io.reactivex.observers.TestObserver.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L44a42c.  if v0 != 0 then goto L44a45e;
  #L44a430.  v0:= 1I;
  #L44a432.  v3.`io.reactivex.observers.TestObserver.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L44a436.  v0:= v3.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a43a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44a440.  v0:= temp @kind object;
  #L44a442.  if v0 != 0 then goto L44a45e;
  #L44a446.  v0:= v3.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a44a.  v1:= new `java.lang.IllegalStateException`;
  #L44a44e.  v2:= "onSubscribe not called in proper order" @kind object;
  #L44a452.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44a458.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a45e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44a464.  v0:= temp @kind object;
  #L44a466.  v3.`io.reactivex.observers.TestObserver.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L44a46a.  v0:= v3.`io.reactivex.observers.TestObserver.establishedFusionMode` @type ^`int`;
  #L44a46e.  v1:= 2I;
  #L44a470.  if v0 != v1 then goto L44a4a8;
  #L44a474.  v4:= v3.`io.reactivex.observers.TestObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L44a478.  call temp:= `poll`(v4) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.poll:()Ljava/lang/Object;` @kind interface;
  #L44a47e.  v4:= temp @kind object;
  #L44a480.  if v4 == 0 then goto L44a4a6;
  #L44a484.  v0:= v3.`io.reactivex.observers.TestObserver.values` @type ^`java.util.List` @kind object;
  #L44a488.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a48e.  goto L44a474;
  #L44a490.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44a492.  v0:= v3.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a496.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a49c.  v4:= v3.`io.reactivex.observers.TestObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L44a4a0.  call `dispose`(v4) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.dispose:()V` @kind interface;
  #L44a4a6.  return @kind void;
  #L44a4a8.  v0:= v3.`io.reactivex.observers.TestObserver.values` @type ^`java.util.List` @kind object;
  #L44a4ac.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a4b2.  if v4 != 0 then goto L44a4ce;
  #L44a4b6.  v0:= v3.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a4ba.  v1:= new `java.lang.NullPointerException`;
  #L44a4be.  v2:= "onNext received a null value" @kind object;
  #L44a4c2.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44a4c8.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a4ce.  v0:= v3.`io.reactivex.observers.TestObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L44a4d2.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44a4d8.  return @kind void;
  catch `java.lang.Throwable` @[L44a474..L44a48e] goto L44a490;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.TestObserver` v4 @kind this, `io.reactivex.disposables.Disposable` v5 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44a4f8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44a4fe.  v0:= temp @kind object;
  #L44a500.  v4.`io.reactivex.observers.TestObserver.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L44a504.  if v5 != 0 then goto L44a522;
  #L44a508.  v5:= v4.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a50c.  v0:= new `java.lang.NullPointerException`;
  #L44a510.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L44a514.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44a51a.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a520.  return @kind void;
  #L44a522.  v0:= v4.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a526.  v1:= 0I;
  #L44a528.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44a52e.  v0:= temp;
  #L44a530.  if v0 != 0 then goto L44a586;
  #L44a534.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44a53a.  v0:= v4.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a53e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44a544.  v0:= temp @kind object;
  #L44a546.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L44a54a.  if v0 == v1 then goto L44a584;
  #L44a54e.  v0:= v4.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a552.  v1:= new `java.lang.IllegalStateException`;
  #L44a556.  v2:= new `java.lang.StringBuilder`;
  #L44a55a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44a560.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L44a564.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a56a.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a570.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44a576.  v5:= temp @kind object;
  #L44a578.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44a57e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a584.  return @kind void;
  #L44a586.  v0:= v4.`io.reactivex.observers.TestObserver.initialFusionMode` @type ^`int`;
  #L44a58a.  if v0 == 0 then goto L44a612;
  #L44a58e.  v0:= instanceof @variable v5 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L44a592.  if v0 == 0 then goto L44a612;
  #L44a596.  v0:= v5 @kind object;
  #L44a598.  v0:= (`io.reactivex.internal.fuseable.QueueDisposable`) v0 @kind object;
  #L44a59c.  v4.`io.reactivex.observers.TestObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` := v0 @kind object;
  #L44a5a0.  v0:= v4.`io.reactivex.observers.TestObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L44a5a4.  v1:= v4.`io.reactivex.observers.TestObserver.initialFusionMode` @type ^`int`;
  #L44a5a8.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.requestFusion:(I)I` @kind interface;
  #L44a5ae.  v0:= temp;
  #L44a5b0.  v4.`io.reactivex.observers.TestObserver.establishedFusionMode` @type ^`int` := v0;
  #L44a5b4.  v1:= 1I;
  #L44a5b6.  if v0 != v1 then goto L44a612;
  #L44a5ba.  v4.`io.reactivex.observers.TestObserver.checkSubscriptionOnce` @type ^`boolean` := v1 @kind boolean;
  #L44a5be.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44a5c4.  v5:= temp @kind object;
  #L44a5c6.  v4.`io.reactivex.observers.TestObserver.lastThread` @type ^`java.lang.Thread` := v5 @kind object;
  #L44a5ca.  v5:= v4.`io.reactivex.observers.TestObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L44a5ce.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.poll:()Ljava/lang/Object;` @kind interface;
  #L44a5d4.  v5:= temp @kind object;
  #L44a5d6.  if v5 == 0 then goto L44a5e6;
  #L44a5da.  v0:= v4.`io.reactivex.observers.TestObserver.values` @type ^`java.util.List` @kind object;
  #L44a5de.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a5e4.  goto L44a5ca;
  #L44a5e6.  v0:= v4.`io.reactivex.observers.TestObserver.completions` @type ^`long` @kind wide;
  #L44a5ea.  v2:= 1L;
  #L44a5ee.  v0:= v0 + v2 @kind long;
  #L44a5f0.  v4.`io.reactivex.observers.TestObserver.completions` @type ^`long` := v0 @kind wide;
  #L44a5f4.  v5:= v4.`io.reactivex.observers.TestObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44a5f8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L44a5fc.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44a602.  goto L44a610;
  #L44a604.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44a606.  v0:= v4.`io.reactivex.observers.TestObserver.errors` @type ^`java.util.List` @kind object;
  #L44a60a.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a610.  return @kind void;
  #L44a612.  v0:= v4.`io.reactivex.observers.TestObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L44a616.  call `onSubscribe`(v0, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44a61c.  return @kind void;
  catch `java.lang.Throwable` @[L44a5ca..L44a602] goto L44a604;
}
procedure `void` `onSuccess`(`io.reactivex.observers.TestObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L44a63c.  call `onNext`(v0, v1) @signature `Lio/reactivex/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44a642.  call `onComplete`(v0) @signature `Lio/reactivex/observers/TestObserver;.onComplete:()V` @kind virtual;
  #L44a648.  return @kind void;
}
procedure `io.reactivex.observers.TestObserver` `setInitialFusionMode`(`io.reactivex.observers.TestObserver` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/observers/TestObserver;.setInitialFusionMode:(I)Lio/reactivex/observers/TestObserver;` @AccessFlag FINAL {
    temp;

  #L44a1f8.  v0.`io.reactivex.observers.TestObserver.initialFusionMode` @type ^`int` := v1;
  #L44a1fc.  return v0 @kind object;
}
