record `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class, `java.lang.Runnable` @kind interface {
}
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L447c48.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$1`;
  #L447c4c.  v1:= 0I;
  #L447c4e.  v2:= "SPIN" @kind object;
  #L447c52.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$1;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L447c58.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L447c5c.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$2`;
  #L447c60.  v2:= 1I;
  #L447c62.  v3:= "YIELD" @kind object;
  #L447c66.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$2;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L447c6c.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L447c70.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$3`;
  #L447c74.  v3:= 2I;
  #L447c76.  v4:= "SLEEP_1MS" @kind object;
  #L447c7a.  call `<init>`(v0, v4, v3) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$3;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L447c80.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L447c84.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$4`;
  #L447c88.  v4:= 3I;
  #L447c8a.  v5:= "SLEEP_10MS" @kind object;
  #L447c8e.  call `<init>`(v0, v5, v4) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$4;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L447c94.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L447c98.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$5`;
  #L447c9c.  v5:= 4I;
  #L447c9e.  v6:= "SLEEP_100MS" @kind object;
  #L447ca2.  call `<init>`(v0, v6, v5) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$5;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L447ca8.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L447cac.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$6`;
  #L447cb0.  v6:= 5I;
  #L447cb2.  v7:= "SLEEP_1000MS" @kind object;
  #L447cb6.  call `<init>`(v0, v7, v6) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$6;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L447cbc.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L447cc0.  v0:= 6I;
  #L447cc2.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[v0];
  #L447cc6.  v7:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L447cca.  v0[v1]:= v7 @kind object;
  #L447cce.  v1:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L447cd2.  v0[v2]:= v1 @kind object;
  #L447cd6.  v1:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L447cda.  v0[v3]:= v1 @kind object;
  #L447cde.  v1:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L447ce2.  v0[v4]:= v1 @kind object;
  #L447ce6.  v1:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L447cea.  v0[v5]:= v1 @kind object;
  #L447cee.  v1:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L447cf2.  v0[v6]:= v1 @kind object;
  #L447cf6.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] := v0 @kind object;
  #L447cfa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L447d0c.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L447d12.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `io.reactivex.observers.BaseTestConsumer$1` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;ILio/reactivex/observers/BaseTestConsumer$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L447d24.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L447d2a.  return @kind void;
}
procedure `void` `sleep`(`int` v2 ) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.sleep:(I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L447d3c.  v0:= (`long`) v2 @kind i2l;
  #L447d3e.  call `sleep`(v0) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L447d44.  return @kind void;
  #L447d46.  v2:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L447d48.  v0:= new `java.lang.RuntimeException`;
  #L447d4c.  call `<init>`(v0, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L447d52.  throw v0;
  catch `java.lang.InterruptedException` @[L447d3e..L447d44] goto L447d46;
}
procedure `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.valueOf:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L447c00.  v0:= constclass @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L447c04.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L447c0a.  v1:= temp @kind object;
  #L447c0c.  v1:= (`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`) v1 @kind object;
  #L447c10.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] `values`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.values:()[Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L447c24.  v0:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] @kind object;
  #L447c28.  call temp:= `clone`(v0) @signature `[Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.clone:()Ljava/lang/Object;` @kind virtual;
  #L447c2e.  v0:= temp @kind object;
  #L447c30.  v0:= (`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[]) v0 @kind object;
  #L447c34.  return v0 @kind object;
}
procedure `void` `run`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.run:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
