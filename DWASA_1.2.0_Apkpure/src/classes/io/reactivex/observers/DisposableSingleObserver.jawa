record `io.reactivex.observers.DisposableSingleObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.DisposableSingleObserver.upstream` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.DisposableSingleObserver` v1 @kind this) @signature `Lio/reactivex/observers/DisposableSingleObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4492a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4492ae.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4492b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4492b8.  v1.`io.reactivex.observers.DisposableSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4492bc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.DisposableSingleObserver` v1 @kind this) @signature `Lio/reactivex/observers/DisposableSingleObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4492d0.  v0:= v1.`io.reactivex.observers.DisposableSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4492d4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4492da.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.DisposableSingleObserver` v2 @kind this) @signature `Lio/reactivex/observers/DisposableSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44927c.  v0:= v2.`io.reactivex.observers.DisposableSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449280.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L449286.  v0:= temp @kind object;
  #L449288.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L44928c.  if v0 != v1 then goto L449294;
  #L449290.  v0:= 1I;
  #L449292.  goto L449296;
  #L449294.  v0:= 0I;
  #L449296.  return v0;
}
procedure `void` `onStart`(`io.reactivex.observers.DisposableSingleObserver` v0 @kind this) @signature `Lio/reactivex/observers/DisposableSingleObserver;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L4492ec.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.DisposableSingleObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/observers/DisposableSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L449300.  v0:= v2.`io.reactivex.observers.DisposableSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449304.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L44930a.  v1:= temp @kind object;
  #L44930c.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;Ljava/lang/Class;)Z` @kind static;
  #L449312.  v3:= temp;
  #L449314.  if v3 == 0 then goto L44931e;
  #L449318.  call `onStart`(v2) @signature `Lio/reactivex/observers/DisposableSingleObserver;.onStart:()V` @kind virtual;
  #L44931e.  return @kind void;
}
