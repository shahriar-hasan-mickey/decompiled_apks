record `io.reactivex.android.schedulers.AndroidSchedulers$MainHolder` @kind class @AccessFlag FINAL {
}
global `io.reactivex.Scheduler` `@@io.reactivex.android.schedulers.AndroidSchedulers$MainHolder.DEFAULT` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/android/schedulers/AndroidSchedulers$MainHolder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3e3c04.  v0:= new `io.reactivex.android.schedulers.HandlerScheduler`;
  #L3e3c08.  v1:= new `android.os.Handler`;
  #L3e3c0c.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L3e3c12.  v2:= temp @kind object;
  #L3e3c14.  call `<init>`(v1, v2) @signature `Landroid/os/Handler;.<init>:(Landroid/os/Looper;)V` @kind direct;
  #L3e3c1a.  v2:= 0I;
  #L3e3c1c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/android/schedulers/HandlerScheduler;.<init>:(Landroid/os/Handler;Z)V` @kind direct;
  #L3e3c22.  `@@io.reactivex.android.schedulers.AndroidSchedulers$MainHolder.DEFAULT` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L3e3c26.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.android.schedulers.AndroidSchedulers$MainHolder` v0 @kind this) @signature `Lio/reactivex/android/schedulers/AndroidSchedulers$MainHolder;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3e3c38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e3c3e.  return @kind void;
}
