record `io.reactivex.android.schedulers.AndroidSchedulers` @kind class @AccessFlag PUBLIC_FINAL {
}
global `io.reactivex.Scheduler` `@@io.reactivex.android.schedulers.AndroidSchedulers.MAIN_THREAD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/android/schedulers/AndroidSchedulers;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e3d14.  v0:= new `io.reactivex.android.schedulers.AndroidSchedulers$1`;
  #L3e3d18.  call `<init>`(v0) @signature `Lio/reactivex/android/schedulers/AndroidSchedulers$1;.<init>:()V` @kind direct;
  #L3e3d1e.  call temp:= `initMainThreadScheduler`(v0) @signature `Lio/reactivex/android/plugins/RxAndroidPlugins;.initMainThreadScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L3e3d24.  v0:= temp @kind object;
  #L3e3d26.  `@@io.reactivex.android.schedulers.AndroidSchedulers.MAIN_THREAD` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L3e3d2a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.android.schedulers.AndroidSchedulers` v2 @kind this) @signature `Lio/reactivex/android/schedulers/AndroidSchedulers;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e3d3c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e3d42.  v0:= new `java.lang.AssertionError`;
  #L3e3d46.  v1:= "No instances." @kind object;
  #L3e3d4a.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3e3d50.  throw v0;
}
procedure `io.reactivex.Scheduler` `from`(`android.os.Looper` v1 @kind object) @signature `Lio/reactivex/android/schedulers/AndroidSchedulers;.from:(Landroid/os/Looper;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e3c50.  v0:= 0I;
  #L3e3c52.  call temp:= `from`(v1, v0) @signature `Lio/reactivex/android/schedulers/AndroidSchedulers;.from:(Landroid/os/Looper;Z)Lio/reactivex/Scheduler;` @kind static;
  #L3e3c58.  v1:= temp @kind object;
  #L3e3c5a.  return v1 @kind object;
}
procedure `io.reactivex.Scheduler` `from`(`android.os.Looper` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/android/schedulers/AndroidSchedulers;.from:(Landroid/os/Looper;Z)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3e3c6c.  if v3 == 0 then goto L3e3cc2;
  #L3e3c70.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3e3c74.  v1:= 16I;
  #L3e3c78.  v2:= 0I;
  #L3e3c7a.  if v0 >= v1 then goto L3e3c82;
  #L3e3c7e.  v4:= 0I;
  #L3e3c80.  goto L3e3cac;
  #L3e3c82.  if v4 == 0 then goto L3e3cac;
  #L3e3c86.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3e3c8a.  v1:= 22I;
  #L3e3c8e.  if v0 >= v1 then goto L3e3cac;
  #L3e3c92.  call temp:= `obtain`() @signature `Landroid/os/Message;.obtain:()Landroid/os/Message;` @kind static;
  #L3e3c98.  v0:= temp @kind object;
  #L3e3c9a.  v1:= 1I;
  #L3e3c9c.  call `setAsynchronous`(v0, v1) @signature `Landroid/os/Message;.setAsynchronous:(Z)V` @kind virtual;
  #L3e3ca2.  goto L3e3ca6;
  #L3e3ca4.  v4:= 0I;
  #L3e3ca6.  call `recycle`(v0) @signature `Landroid/os/Message;.recycle:()V` @kind virtual;
  #L3e3cac.  v0:= new `io.reactivex.android.schedulers.HandlerScheduler`;
  #L3e3cb0.  v1:= new `android.os.Handler`;
  #L3e3cb4.  call `<init>`(v1, v3) @signature `Landroid/os/Handler;.<init>:(Landroid/os/Looper;)V` @kind direct;
  #L3e3cba.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/android/schedulers/HandlerScheduler;.<init>:(Landroid/os/Handler;Z)V` @kind direct;
  #L3e3cc0.  return v0 @kind object;
  #L3e3cc2.  v3:= new `java.lang.NullPointerException`;
  #L3e3cc6.  v4:= "looper == null" @kind object;
  #L3e3cca.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e3cd0.  throw v3;
  catch `java.lang.NoSuchMethodError` @[L3e3c9c..L3e3ca2] goto L3e3ca4;
}
procedure `io.reactivex.Scheduler` `mainThread`() @signature `Lio/reactivex/android/schedulers/AndroidSchedulers;.mainThread:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e3cf4.  v0:= `@@io.reactivex.android.schedulers.AndroidSchedulers.MAIN_THREAD` @type ^`io.reactivex.Scheduler` @kind object;
  #L3e3cf8.  call temp:= `onMainThreadScheduler`(v0) @signature `Lio/reactivex/android/plugins/RxAndroidPlugins;.onMainThreadScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L3e3cfe.  v0:= temp @kind object;
  #L3e3d00.  return v0 @kind object;
}
