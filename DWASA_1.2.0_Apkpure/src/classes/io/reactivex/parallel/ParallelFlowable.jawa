record `io.reactivex.parallel.ParallelFlowable` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`io.reactivex.parallel.ParallelFlowable` v0 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44b26c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44b272.  return @kind void;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44afec.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L44aff2.  v0:= temp @kind object;
  #L44aff4.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L44affa.  v0:= temp;
  #L44affc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L44b002.  v1:= temp;
  #L44b004.  call temp:= `from`(v2, v0, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b00a.  v2:= temp @kind object;
  #L44b00c.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b020.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L44b026.  v0:= temp;
  #L44b028.  call temp:= `from`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b02e.  v1:= temp @kind object;
  #L44b030.  return v1 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b044.  v0:= "source" @kind object;
  #L44b048.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b04e.  v0:= "parallelism" @kind object;
  #L44b052.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44b058.  v0:= "prefetch" @kind object;
  #L44b05c.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44b062.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFromPublisher`;
  #L44b066.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;II)V` @kind direct;
  #L44b06c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b072.  v1:= temp @kind object;
  #L44b074.  return v1 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `fromArray`(`org.reactivestreams.Publisher`[] v1 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.fromArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b088.  v0:= length @variable v1;
  #L44b08a.  if v0 == 0 then goto L44b0a2;
  #L44b08e.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFromArray`;
  #L44b092.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromArray;.<init>:([Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L44b098.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b09e.  v1:= temp @kind object;
  #L44b0a0.  return v1 @kind object;
  #L44b0a2.  v1:= new `java.lang.IllegalArgumentException`;
  #L44b0a6.  v0:= "Zero publishers not supported" @kind object;
  #L44b0aa.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44b0b0.  throw v1;
}
procedure `java.lang.Object` `as`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.parallel.ParallelFlowableConverter` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.as:(Lio/reactivex/parallel/ParallelFlowableConverter;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b1f8.  v0:= "converter is null" @kind object;
  #L44b1fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b202.  v2:= temp @kind object;
  #L44b204.  v2:= (`io.reactivex.parallel.ParallelFlowableConverter`) v2 @kind object;
  #L44b208.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/parallel/ParallelFlowableConverter;.apply:(Lio/reactivex/parallel/ParallelFlowable;)Ljava/lang/Object;` @kind interface;
  #L44b20e.  v2:= temp @kind object;
  #L44b210.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `collect`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a9fc.  v0:= "collectionSupplier is null" @kind object;
  #L44aa00.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44aa06.  v0:= "collector is null" @kind object;
  #L44aa0a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44aa10.  v0:= new `io.reactivex.internal.operators.parallel.ParallelCollect`;
  #L44aa14.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L44aa1a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44aa20.  v2:= temp @kind object;
  #L44aa22.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `compose`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.parallel.ParallelTransformer` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.compose:(Lio/reactivex/parallel/ParallelTransformer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44aa34.  v0:= "composer is null" @kind object;
  #L44aa38.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44aa3e.  v2:= temp @kind object;
  #L44aa40.  v2:= (`io.reactivex.parallel.ParallelTransformer`) v2 @kind object;
  #L44aa44.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/parallel/ParallelTransformer;.apply:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind interface;
  #L44aa4a.  v2:= temp @kind object;
  #L44aa4c.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44aa52.  v2:= temp @kind object;
  #L44aa54.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMap`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44aa68.  v0:= 2I;
  #L44aa6a.  call temp:= `concatMap`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44aa70.  v2:= temp @kind object;
  #L44aa72.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMap`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44aa84.  v0:= "mapper is null" @kind object;
  #L44aa88.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44aa8e.  v0:= "prefetch" @kind object;
  #L44aa92.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44aa98.  v0:= new `io.reactivex.internal.operators.parallel.ParallelConcatMap`;
  #L44aa9c.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L44aaa0.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L44aaa6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44aaac.  v3:= temp @kind object;
  #L44aaae.  return v3 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMapDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44aadc.  v0:= "mapper is null" @kind object;
  #L44aae0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44aae6.  v0:= "prefetch" @kind object;
  #L44aaea.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44aaf0.  v0:= new `io.reactivex.internal.operators.parallel.ParallelConcatMap`;
  #L44aaf4.  if v4 == 0 then goto L44aafe;
  #L44aaf8.  v4:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L44aafc.  goto L44ab02;
  #L44aafe.  v4:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L44ab02.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L44ab08.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ab0e.  v2:= temp @kind object;
  #L44ab10.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMapDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44aac0.  v0:= 2I;
  #L44aac2.  call temp:= `concatMapDelayError`(v1, v2, v0, v3) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44aac8.  v2:= temp @kind object;
  #L44aaca.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doAfterNext`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doAfterNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44ab24.  v0:= "onAfterNext is null" @kind object;
  #L44ab28.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ab2e.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L44ab32.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ab38.  v3:= temp @kind object;
  #L44ab3a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ab40.  v5:= temp @kind object;
  #L44ab42.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ab46.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ab4a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ab50.  v8:= temp @kind object;
  #L44ab52.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L44ab56.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ab5a.  v1:= v0 @kind object;
  #L44ab5c.  v2:= v11 @kind object;
  #L44ab5e.  v4:= v12 @kind object;
  #L44ab60.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L44ab66.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ab6c.  v12:= temp @kind object;
  #L44ab6e.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doAfterTerminated`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doAfterTerminated:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44ab80.  v0:= "onAfterTerminate is null" @kind object;
  #L44ab84.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ab8a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L44ab8e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ab94.  v3:= temp @kind object;
  #L44ab96.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ab9c.  v4:= temp @kind object;
  #L44ab9e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44aba4.  v5:= temp @kind object;
  #L44aba6.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44abaa.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44abb0.  v8:= temp @kind object;
  #L44abb2.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L44abb6.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44abba.  v1:= v0 @kind object;
  #L44abbc.  v2:= v11 @kind object;
  #L44abbe.  v7:= v12 @kind object;
  #L44abc0.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L44abc6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44abcc.  v12:= temp @kind object;
  #L44abce.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnCancel`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnCancel:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44abe0.  v0:= "onCancel is null" @kind object;
  #L44abe4.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44abea.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L44abee.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44abf4.  v3:= temp @kind object;
  #L44abf6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44abfc.  v4:= temp @kind object;
  #L44abfe.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ac04.  v5:= temp @kind object;
  #L44ac06.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ac0a.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ac0e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ac14.  v8:= temp @kind object;
  #L44ac16.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L44ac1a.  v1:= v0 @kind object;
  #L44ac1c.  v2:= v11 @kind object;
  #L44ac1e.  v10:= v12 @kind object;
  #L44ac20.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L44ac26.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ac2c.  v12:= temp @kind object;
  #L44ac2e.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnComplete`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44ac40.  v0:= "onComplete is null" @kind object;
  #L44ac44.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ac4a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L44ac4e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ac54.  v3:= temp @kind object;
  #L44ac56.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ac5c.  v4:= temp @kind object;
  #L44ac5e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ac64.  v5:= temp @kind object;
  #L44ac66.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ac6a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ac70.  v8:= temp @kind object;
  #L44ac72.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L44ac76.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ac7a.  v1:= v0 @kind object;
  #L44ac7c.  v2:= v11 @kind object;
  #L44ac7e.  v6:= v12 @kind object;
  #L44ac80.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L44ac86.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ac8c.  v12:= temp @kind object;
  #L44ac8e.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnError`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44aca0.  v0:= "onError is null" @kind object;
  #L44aca4.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44acaa.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L44acae.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44acb4.  v3:= temp @kind object;
  #L44acb6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44acbc.  v4:= temp @kind object;
  #L44acbe.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44acc2.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44acc6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44accc.  v8:= temp @kind object;
  #L44acce.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L44acd2.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44acd6.  v1:= v0 @kind object;
  #L44acd8.  v2:= v11 @kind object;
  #L44acda.  v5:= v12 @kind object;
  #L44acdc.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L44ace2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ace8.  v12:= temp @kind object;
  #L44acea.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44acfc.  v0:= "onNext is null" @kind object;
  #L44ad00.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ad06.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L44ad0a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ad10.  v4:= temp @kind object;
  #L44ad12.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ad18.  v5:= temp @kind object;
  #L44ad1a.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ad1e.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ad22.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ad28.  v8:= temp @kind object;
  #L44ad2a.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L44ad2e.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ad32.  v1:= v0 @kind object;
  #L44ad34.  v2:= v11 @kind object;
  #L44ad36.  v3:= v12 @kind object;
  #L44ad38.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L44ad3e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ad44.  v12:= temp @kind object;
  #L44ad46.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44ad58.  v0:= "onNext is null" @kind object;
  #L44ad5c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ad62.  v0:= "errorHandler is null" @kind object;
  #L44ad66.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ad6c.  v0:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry`;
  #L44ad70.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44ad76.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ad7c.  v2:= temp @kind object;
  #L44ad7e.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44ad90.  v0:= "onNext is null" @kind object;
  #L44ad94.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ad9a.  v0:= "errorHandler is null" @kind object;
  #L44ad9e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ada4.  v0:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry`;
  #L44ada8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44adae.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44adb4.  v2:= temp @kind object;
  #L44adb6.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnRequest`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.LongConsumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnRequest:(Lio/reactivex/functions/LongConsumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44adc8.  v0:= "onRequest is null" @kind object;
  #L44adcc.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44add2.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L44add6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44addc.  v3:= temp @kind object;
  #L44adde.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ade4.  v4:= temp @kind object;
  #L44ade6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44adec.  v5:= temp @kind object;
  #L44adee.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44adf2.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44adf6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44adfc.  v8:= temp @kind object;
  #L44adfe.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ae02.  v1:= v0 @kind object;
  #L44ae04.  v2:= v11 @kind object;
  #L44ae06.  v9:= v12 @kind object;
  #L44ae08.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L44ae0e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ae14.  v12:= temp @kind object;
  #L44ae16.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnSubscribe`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44ae28.  v0:= "onSubscribe is null" @kind object;
  #L44ae2c.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ae32.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L44ae36.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ae3c.  v3:= temp @kind object;
  #L44ae3e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ae44.  v4:= temp @kind object;
  #L44ae46.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L44ae4c.  v5:= temp @kind object;
  #L44ae4e.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ae52.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ae56.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L44ae5a.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L44ae5e.  v1:= v0 @kind object;
  #L44ae60.  v2:= v11 @kind object;
  #L44ae62.  v8:= v12 @kind object;
  #L44ae64.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L44ae6a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ae70.  v12:= temp @kind object;
  #L44ae72.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44ae84.  v0:= "predicate" @kind object;
  #L44ae88.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ae8e.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilter`;
  #L44ae92.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L44ae98.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44ae9e.  v2:= temp @kind object;
  #L44aea0.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44aeb4.  v0:= "predicate" @kind object;
  #L44aeb8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44aebe.  v0:= "errorHandler is null" @kind object;
  #L44aec2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44aec8.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilterTry`;
  #L44aecc.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44aed2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44aed8.  v2:= temp @kind object;
  #L44aeda.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44aeec.  v0:= "predicate" @kind object;
  #L44aef0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44aef6.  v0:= "errorHandler is null" @kind object;
  #L44aefa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44af00.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilterTry`;
  #L44af04.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44af0a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44af10.  v2:= temp @kind object;
  #L44af12.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L44af24.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L44af2a.  v0:= temp;
  #L44af2c.  v1:= 0I;
  #L44af2e.  v2:= 2147483647I;
  #L44af34.  call temp:= `flatMap`(v3, v4, v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44af3a.  v4:= temp @kind object;
  #L44af3c.  return v4 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44af50.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L44af56.  v0:= temp;
  #L44af58.  v1:= 2147483647I;
  #L44af5e.  call temp:= `flatMap`(v2, v3, v4, v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44af64.  v3:= temp @kind object;
  #L44af66.  return v3 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44af78.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L44af7e.  v0:= temp;
  #L44af80.  call temp:= `flatMap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44af86.  v2:= temp @kind object;
  #L44af88.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44af9c.  v0:= "mapper is null" @kind object;
  #L44afa0.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44afa6.  v0:= "maxConcurrency" @kind object;
  #L44afaa.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44afb0.  v0:= "prefetch" @kind object;
  #L44afb4.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44afba.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFlatMap`;
  #L44afbe.  v1:= v0 @kind object;
  #L44afc0.  v2:= v7 @kind object;
  #L44afc2.  v3:= v8 @kind object;
  #L44afc4.  v4:= v9;
  #L44afc6.  v5:= v10;
  #L44afc8.  v6:= v11;
  #L44afca.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelFlatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L44afd0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44afd6.  v8:= temp @kind object;
  #L44afd8.  return v8 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b0c4.  v0:= "mapper" @kind object;
  #L44b0c8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b0ce.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMap`;
  #L44b0d2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L44b0d8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b0de.  v2:= temp @kind object;
  #L44b0e0.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b0f4.  v0:= "mapper" @kind object;
  #L44b0f8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b0fe.  v0:= "errorHandler is null" @kind object;
  #L44b102.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b108.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMapTry`;
  #L44b10c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44b112.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b118.  v2:= temp @kind object;
  #L44b11a.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b12c.  v0:= "mapper" @kind object;
  #L44b130.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b136.  v0:= "errorHandler is null" @kind object;
  #L44b13a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b140.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMapTry`;
  #L44b144.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44b14a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b150.  v2:= temp @kind object;
  #L44b152.  return v2 @kind object;
}
procedure `int` `parallelism`() @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.Flowable` `reduce`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a7fc.  v0:= "reducer" @kind object;
  #L44a800.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44a806.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull`;
  #L44a80a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44a810.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L44a816.  v2:= temp @kind object;
  #L44a818.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `reduce`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b164.  v0:= "initialSupplier" @kind object;
  #L44b168.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b16e.  v0:= "reducer" @kind object;
  #L44b172.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b178.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduce`;
  #L44b17c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44b182.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b188.  v2:= temp @kind object;
  #L44b18a.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `runOn`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b19c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L44b1a2.  v0:= temp;
  #L44b1a4.  call temp:= `runOn`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;I)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44b1aa.  v2:= temp @kind object;
  #L44b1ac.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `runOn`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b1c0.  v0:= "scheduler" @kind object;
  #L44b1c4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b1ca.  v0:= "prefetch" @kind object;
  #L44b1ce.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44b1d4.  v0:= new `io.reactivex.internal.operators.parallel.ParallelRunOn`;
  #L44b1d8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/Scheduler;I)V` @kind direct;
  #L44b1de.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L44b1e4.  v2:= temp @kind object;
  #L44b1e6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sequential`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a82c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L44a832.  v0:= temp;
  #L44a834.  call temp:= `sequential`(v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L44a83a.  v0:= temp @kind object;
  #L44a83c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sequential`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44a850.  v0:= "prefetch" @kind object;
  #L44a854.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44a85a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin`;
  #L44a85e.  v1:= 0I;
  #L44a860.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @kind direct;
  #L44a866.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L44a86c.  v3:= temp @kind object;
  #L44a86e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sequentialDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a880.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L44a886.  v0:= temp;
  #L44a888.  call temp:= `sequentialDelayError`(v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L44a88e.  v0:= temp @kind object;
  #L44a890.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sequentialDelayError`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44a8a4.  v0:= "prefetch" @kind object;
  #L44a8a8.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44a8ae.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin`;
  #L44a8b2.  v1:= 1I;
  #L44a8b4.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @kind direct;
  #L44a8ba.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L44a8c0.  v3:= temp @kind object;
  #L44a8c2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a8d4.  v0:= 16I;
  #L44a8d8.  call temp:= `sorted`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @kind virtual;
  #L44a8de.  v2:= temp @kind object;
  #L44a8e0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a8f4.  v0:= "comparator is null" @kind object;
  #L44a8f8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44a8fe.  v0:= "capacityHint" @kind object;
  #L44a902.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44a908.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44a90e.  v0:= temp;
  #L44a910.  v3:= v3 / v0 @kind int;
  #L44a912.  v3:= v3 + 1;
  #L44a916.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L44a91c.  v3:= temp @kind object;
  #L44a91e.  call temp:= `instance`() @signature `Lio/reactivex/internal/util/ListAddBiConsumer;.instance:()Lio/reactivex/functions/BiFunction;` @kind static;
  #L44a924.  v0:= temp @kind object;
  #L44a926.  call temp:= `reduce`(v1, v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44a92c.  v3:= temp @kind object;
  #L44a92e.  v0:= new `io.reactivex.internal.util.SorterFunction`;
  #L44a932.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/SorterFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L44a938.  call temp:= `map`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44a93e.  v3:= temp @kind object;
  #L44a940.  v0:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin`;
  #L44a944.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/Comparator;)V` @kind direct;
  #L44a94a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L44a950.  v2:= temp @kind object;
  #L44a952.  return v2 @kind object;
}
procedure `void` `subscribe`(`org.reactivestreams.Subscriber`[] v0 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `to`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b224.  v0:= "converter is null" @kind object;
  #L44b228.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b22e.  v2:= temp @kind object;
  #L44b230.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L44b234.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44b23a.  v2:= temp @kind object;
  #L44b23c.  return v2 @kind object;
  #L44b23e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44b240.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44b246.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L44b24c.  v2:= temp @kind object;
  #L44b24e.  throw v2;
  catch `java.lang.Throwable` @[L44b224..L44b23c] goto L44b23e;
}
procedure `io.reactivex.Flowable` `toSortedList`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a964.  v0:= 16I;
  #L44a968.  call temp:= `toSortedList`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @kind virtual;
  #L44a96e.  v2:= temp @kind object;
  #L44a970.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `toSortedList`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44a984.  v0:= "comparator is null" @kind object;
  #L44a988.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44a98e.  v0:= "capacityHint" @kind object;
  #L44a992.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44a998.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44a99e.  v0:= temp;
  #L44a9a0.  v3:= v3 / v0 @kind int;
  #L44a9a2.  v3:= v3 + 1;
  #L44a9a6.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L44a9ac.  v3:= temp @kind object;
  #L44a9ae.  call temp:= `instance`() @signature `Lio/reactivex/internal/util/ListAddBiConsumer;.instance:()Lio/reactivex/functions/BiFunction;` @kind static;
  #L44a9b4.  v0:= temp @kind object;
  #L44a9b6.  call temp:= `reduce`(v1, v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44a9bc.  v3:= temp @kind object;
  #L44a9be.  v0:= new `io.reactivex.internal.util.SorterFunction`;
  #L44a9c2.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/SorterFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L44a9c8.  call temp:= `map`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L44a9ce.  v3:= temp @kind object;
  #L44a9d0.  v0:= new `io.reactivex.internal.util.MergerBiFunction`;
  #L44a9d4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/MergerBiFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L44a9da.  call temp:= `reduce`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind virtual;
  #L44a9e0.  v2:= temp @kind object;
  #L44a9e2.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L44a9e8.  v2:= temp @kind object;
  #L44a9ea.  return v2 @kind object;
}
procedure `boolean` `validate`(`io.reactivex.parallel.ParallelFlowable` v5 @kind this, `org.reactivestreams.Subscriber`[] v6 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44a780.  call temp:= `parallelism`(v5) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44a786.  v0:= temp;
  #L44a788.  v1:= length @variable v6;
  #L44a78a.  if v1 == v0 then goto L44a7e8;
  #L44a78e.  v1:= new `java.lang.IllegalArgumentException`;
  #L44a792.  v2:= new `java.lang.StringBuilder`;
  #L44a796.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44a79c.  v3:= "parallelism = " @kind object;
  #L44a7a0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a7a6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a7ac.  v0:= ", subscribers = " @kind object;
  #L44a7b0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a7b6.  v0:= length @variable v6;
  #L44a7b8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a7be.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44a7c4.  v0:= temp @kind object;
  #L44a7c6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44a7cc.  v0:= length @variable v6;
  #L44a7ce.  v2:= 0I;
  #L44a7d0.  v3:= 0I;
  #L44a7d2.  if v3 >= v0 then goto L44a7e6;
  #L44a7d6.  v4:= v6[v3] @kind object;
  #L44a7da.  call `error`(v1, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L44a7e0.  v3:= v3 + 1;
  #L44a7e4.  goto L44a7d2;
  #L44a7e6.  return v2;
  #L44a7e8.  v6:= 1I;
  #L44a7ea.  return v6;
}
