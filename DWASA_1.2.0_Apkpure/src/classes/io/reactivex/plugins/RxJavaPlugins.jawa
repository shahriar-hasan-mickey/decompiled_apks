record `io.reactivex.plugins.RxJavaPlugins` @kind class @AccessFlag PUBLIC_FINAL {
}
global `io.reactivex.functions.Consumer` `@@io.reactivex.plugins.RxJavaPlugins.errorHandler` @AccessFlag STATIC_VOLATILE;
global `boolean` `@@io.reactivex.plugins.RxJavaPlugins.failNonBlockingScheduler` @AccessFlag STATIC_VOLATILE;
global `boolean` `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.BooleanSupplier` `@@io.reactivex.plugins.RxJavaPlugins.onBeforeBlocking` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onCompletableAssembly` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.BiFunction` `@@io.reactivex.plugins.RxJavaPlugins.onCompletableSubscribe` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onComputationHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onConnectableFlowableAssembly` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onConnectableObservableAssembly` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onFlowableAssembly` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.BiFunction` `@@io.reactivex.plugins.RxJavaPlugins.onFlowableSubscribe` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onInitComputationHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onInitIoHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onInitNewThreadHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onInitSingleHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onIoHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onMaybeAssembly` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.BiFunction` `@@io.reactivex.plugins.RxJavaPlugins.onMaybeSubscribe` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onNewThreadHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onObservableAssembly` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.BiFunction` `@@io.reactivex.plugins.RxJavaPlugins.onObservableSubscribe` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onParallelAssembly` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onScheduleHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onSingleAssembly` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.Function` `@@io.reactivex.plugins.RxJavaPlugins.onSingleHandler` @AccessFlag STATIC_VOLATILE;
global `io.reactivex.functions.BiFunction` `@@io.reactivex.plugins.RxJavaPlugins.onSingleSubscribe` @AccessFlag STATIC_VOLATILE;
procedure `void` `<init>`(`io.reactivex.plugins.RxJavaPlugins` v2 @kind this) @signature `Lio/reactivex/plugins/RxJavaPlugins;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44bacc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44bad2.  v0:= new `java.lang.IllegalStateException`;
  #L44bad6.  v1:= "No instances!" @kind object;
  #L44bada.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bae0.  throw v0;
}
procedure `java.lang.Object` `apply`(`io.reactivex.functions.BiFunction` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;

  #L44ba08.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44ba0e.  v0:= temp @kind object;
  #L44ba10.  return v0 @kind object;
  #L44ba12.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44ba14.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L44ba1a.  v0:= temp @kind object;
  #L44ba1c.  throw v0;
  catch `java.lang.Throwable` @[L44ba08..L44ba10] goto L44ba12;
}
procedure `java.lang.Object` `apply`(`io.reactivex.functions.Function` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;

  #L44ba3c.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44ba42.  v0:= temp @kind object;
  #L44ba44.  return v0 @kind object;
  #L44ba46.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44ba48.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L44ba4e.  v0:= temp @kind object;
  #L44ba50.  throw v0;
  catch `java.lang.Throwable` @[L44ba3c..L44ba44] goto L44ba46;
}
procedure `io.reactivex.Scheduler` `applyRequireNonNull`(`io.reactivex.functions.Function` v0 @kind object, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.applyRequireNonNull:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @AccessFlag STATIC {
    temp;

  #L44b460.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b466.  v0:= temp @kind object;
  #L44b468.  v1:= "Scheduler Callable result can't be null" @kind object;
  #L44b46c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b472.  v0:= temp @kind object;
  #L44b474.  v0:= (`io.reactivex.Scheduler`) v0 @kind object;
  #L44b478.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `callRequireNonNull`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.callRequireNonNull:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @AccessFlag STATIC {
    temp;
    v0;

  #L44b48c.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L44b492.  v1:= temp @kind object;
  #L44b494.  v0:= "Scheduler Callable result can't be null" @kind object;
  #L44b498.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b49e.  v1:= temp @kind object;
  #L44b4a0.  v1:= (`io.reactivex.Scheduler`) v1 @kind object;
  #L44b4a4.  return v1 @kind object;
  #L44b4a6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44b4a8.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L44b4ae.  v1:= temp @kind object;
  #L44b4b0.  throw v1;
  catch `java.lang.Throwable` @[L44b48c..L44b4a4] goto L44b4a6;
}
procedure `io.reactivex.Scheduler` `createComputationScheduler`(`java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.createComputationScheduler:(Ljava/util/concurrent/ThreadFactory;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44b4d0.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler`;
  #L44b4d4.  v1:= "threadFactory is null" @kind object;
  #L44b4d8.  call temp:= `requireNonNull`(v2, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b4de.  v2:= temp @kind object;
  #L44b4e0.  v2:= (`java.util.concurrent.ThreadFactory`) v2 @kind object;
  #L44b4e4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L44b4ea.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `createIoScheduler`(`java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.createIoScheduler:(Ljava/util/concurrent/ThreadFactory;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44b4fc.  v0:= new `io.reactivex.internal.schedulers.IoScheduler`;
  #L44b500.  v1:= "threadFactory is null" @kind object;
  #L44b504.  call temp:= `requireNonNull`(v2, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b50a.  v2:= temp @kind object;
  #L44b50c.  v2:= (`java.util.concurrent.ThreadFactory`) v2 @kind object;
  #L44b510.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L44b516.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `createNewThreadScheduler`(`java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.createNewThreadScheduler:(Ljava/util/concurrent/ThreadFactory;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44b528.  v0:= new `io.reactivex.internal.schedulers.NewThreadScheduler`;
  #L44b52c.  v1:= "threadFactory is null" @kind object;
  #L44b530.  call temp:= `requireNonNull`(v2, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b536.  v2:= temp @kind object;
  #L44b538.  v2:= (`java.util.concurrent.ThreadFactory`) v2 @kind object;
  #L44b53c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/schedulers/NewThreadScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L44b542.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `createSingleScheduler`(`java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.createSingleScheduler:(Ljava/util/concurrent/ThreadFactory;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44b554.  v0:= new `io.reactivex.internal.schedulers.SingleScheduler`;
  #L44b558.  v1:= "threadFactory is null" @kind object;
  #L44b55c.  call temp:= `requireNonNull`(v2, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b562.  v2:= temp @kind object;
  #L44b564.  v2:= (`java.util.concurrent.ThreadFactory`) v2 @kind object;
  #L44b568.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L44b56e.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getComputationSchedulerHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getComputationSchedulerHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b820.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onComputationHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b824.  return v0 @kind object;
}
procedure `io.reactivex.functions.Consumer` `getErrorHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getErrorHandler:()Lio/reactivex/functions/Consumer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b808.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.errorHandler` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44b80c.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getInitComputationSchedulerHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getInitComputationSchedulerHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b838.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onInitComputationHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b83c.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getInitIoSchedulerHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getInitIoSchedulerHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b850.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onInitIoHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b854.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getInitNewThreadSchedulerHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getInitNewThreadSchedulerHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b868.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onInitNewThreadHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b86c.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getInitSingleSchedulerHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getInitSingleSchedulerHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b880.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onInitSingleHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b884.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getIoSchedulerHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getIoSchedulerHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b898.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onIoHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b89c.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getNewThreadSchedulerHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getNewThreadSchedulerHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b8b0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onNewThreadHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b8b4.  return v0 @kind object;
}
procedure `io.reactivex.functions.BooleanSupplier` `getOnBeforeBlocking`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnBeforeBlocking:()Lio/reactivex/functions/BooleanSupplier;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b7f0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onBeforeBlocking` @type ^`io.reactivex.functions.BooleanSupplier` @kind object;
  #L44b7f4.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getOnCompletableAssembly`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnCompletableAssembly:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b8c8.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onCompletableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b8cc.  return v0 @kind object;
}
procedure `io.reactivex.functions.BiFunction` `getOnCompletableSubscribe`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnCompletableSubscribe:()Lio/reactivex/functions/BiFunction;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b778.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onCompletableSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b77c.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getOnConnectableFlowableAssembly`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnConnectableFlowableAssembly:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b8e0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onConnectableFlowableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b8e4.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getOnConnectableObservableAssembly`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnConnectableObservableAssembly:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b8f8.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onConnectableObservableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b8fc.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getOnFlowableAssembly`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnFlowableAssembly:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b910.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onFlowableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b914.  return v0 @kind object;
}
procedure `io.reactivex.functions.BiFunction` `getOnFlowableSubscribe`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnFlowableSubscribe:()Lio/reactivex/functions/BiFunction;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b790.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onFlowableSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b794.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getOnMaybeAssembly`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnMaybeAssembly:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b928.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onMaybeAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b92c.  return v0 @kind object;
}
procedure `io.reactivex.functions.BiFunction` `getOnMaybeSubscribe`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnMaybeSubscribe:()Lio/reactivex/functions/BiFunction;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b7a8.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onMaybeSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b7ac.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getOnObservableAssembly`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnObservableAssembly:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b940.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onObservableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b944.  return v0 @kind object;
}
procedure `io.reactivex.functions.BiFunction` `getOnObservableSubscribe`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnObservableSubscribe:()Lio/reactivex/functions/BiFunction;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b7c0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onObservableSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b7c4.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getOnParallelAssembly`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnParallelAssembly:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b958.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onParallelAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b95c.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getOnSingleAssembly`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnSingleAssembly:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b970.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onSingleAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b974.  return v0 @kind object;
}
procedure `io.reactivex.functions.BiFunction` `getOnSingleSubscribe`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getOnSingleSubscribe:()Lio/reactivex/functions/BiFunction;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b7d8.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onSingleSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b7dc.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getScheduleHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getScheduleHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b988.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onScheduleHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b98c.  return v0 @kind object;
}
procedure `io.reactivex.functions.Function` `getSingleSchedulerHandler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.getSingleSchedulerHandler:()Lio/reactivex/functions/Function;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b9a0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onSingleHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b9a4.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `initComputationScheduler`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initComputationScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b580.  v0:= "Scheduler Callable can't be null" @kind object;
  #L44b584.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b58a.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onInitComputationHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b58e.  if v0 != 0 then goto L44b59c;
  #L44b592.  call temp:= `callRequireNonNull`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.callRequireNonNull:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44b598.  v1:= temp @kind object;
  #L44b59a.  return v1 @kind object;
  #L44b59c.  call temp:= `applyRequireNonNull`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.applyRequireNonNull:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44b5a2.  v1:= temp @kind object;
  #L44b5a4.  return v1 @kind object;
}
procedure `io.reactivex.Scheduler` `initIoScheduler`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initIoScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b5b8.  v0:= "Scheduler Callable can't be null" @kind object;
  #L44b5bc.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b5c2.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onInitIoHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b5c6.  if v0 != 0 then goto L44b5d4;
  #L44b5ca.  call temp:= `callRequireNonNull`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.callRequireNonNull:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44b5d0.  v1:= temp @kind object;
  #L44b5d2.  return v1 @kind object;
  #L44b5d4.  call temp:= `applyRequireNonNull`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.applyRequireNonNull:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44b5da.  v1:= temp @kind object;
  #L44b5dc.  return v1 @kind object;
}
procedure `io.reactivex.Scheduler` `initNewThreadScheduler`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initNewThreadScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b5f0.  v0:= "Scheduler Callable can't be null" @kind object;
  #L44b5f4.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b5fa.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onInitNewThreadHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b5fe.  if v0 != 0 then goto L44b60c;
  #L44b602.  call temp:= `callRequireNonNull`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.callRequireNonNull:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44b608.  v1:= temp @kind object;
  #L44b60a.  return v1 @kind object;
  #L44b60c.  call temp:= `applyRequireNonNull`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.applyRequireNonNull:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44b612.  v1:= temp @kind object;
  #L44b614.  return v1 @kind object;
}
procedure `io.reactivex.Scheduler` `initSingleScheduler`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initSingleScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b628.  v0:= "Scheduler Callable can't be null" @kind object;
  #L44b62c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b632.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onInitSingleHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b636.  if v0 != 0 then goto L44b644;
  #L44b63a.  call temp:= `callRequireNonNull`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.callRequireNonNull:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44b640.  v1:= temp @kind object;
  #L44b642.  return v1 @kind object;
  #L44b644.  call temp:= `applyRequireNonNull`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.applyRequireNonNull:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L44b64a.  v1:= temp @kind object;
  #L44b64c.  return v1 @kind object;
}
procedure `boolean` `isBug`(`java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.isBug:(Ljava/lang/Throwable;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L44b284.  v0:= instanceof @variable v2 @type ^`io.reactivex.exceptions.OnErrorNotImplementedException` @kind boolean;
  #L44b288.  v1:= 1I;
  #L44b28a.  if v0 == 0 then goto L44b290;
  #L44b28e.  return v1;
  #L44b290.  v0:= instanceof @variable v2 @type ^`io.reactivex.exceptions.MissingBackpressureException` @kind boolean;
  #L44b294.  if v0 == 0 then goto L44b29a;
  #L44b298.  return v1;
  #L44b29a.  v0:= instanceof @variable v2 @type ^`java.lang.IllegalStateException` @kind boolean;
  #L44b29e.  if v0 == 0 then goto L44b2a4;
  #L44b2a2.  return v1;
  #L44b2a4.  v0:= instanceof @variable v2 @type ^`java.lang.NullPointerException` @kind boolean;
  #L44b2a8.  if v0 == 0 then goto L44b2ae;
  #L44b2ac.  return v1;
  #L44b2ae.  v0:= instanceof @variable v2 @type ^`java.lang.IllegalArgumentException` @kind boolean;
  #L44b2b2.  if v0 == 0 then goto L44b2b8;
  #L44b2b6.  return v1;
  #L44b2b8.  v2:= instanceof @variable v2 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L44b2bc.  if v2 == 0 then goto L44b2c2;
  #L44b2c0.  return v1;
  #L44b2c2.  v2:= 0I;
  #L44b2c4.  return v2;
}
procedure `boolean` `isFailOnNonBlockingScheduler`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.isFailOnNonBlockingScheduler:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b2d8.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.failNonBlockingScheduler` @type ^`boolean` @kind boolean;
  #L44b2dc.  return v0;
}
procedure `boolean` `isLockdown`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.isLockdown:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b2f0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44b2f4.  return v0;
}
procedure `void` `lockdown`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.lockdown:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44baf4.  v0:= 1I;
  #L44baf6.  `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` := v0 @kind boolean;
  #L44bafa.  return @kind void;
}
procedure `io.reactivex.Completable` `onAssembly`(`io.reactivex.Completable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b348.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onCompletableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b34c.  if v0 == 0 then goto L44b35c;
  #L44b350.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b356.  v1:= temp @kind object;
  #L44b358.  v1:= (`io.reactivex.Completable`) v1 @kind object;
  #L44b35c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `onAssembly`(`io.reactivex.Flowable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b398.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onFlowableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b39c.  if v0 == 0 then goto L44b3ac;
  #L44b3a0.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b3a6.  v1:= temp @kind object;
  #L44b3a8.  v1:= (`io.reactivex.Flowable`) v1 @kind object;
  #L44b3ac.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `onAssembly`(`io.reactivex.Maybe` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b3c0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onMaybeAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b3c4.  if v0 == 0 then goto L44b3d4;
  #L44b3c8.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b3ce.  v1:= temp @kind object;
  #L44b3d0.  v1:= (`io.reactivex.Maybe`) v1 @kind object;
  #L44b3d4.  return v1 @kind object;
}
procedure `io.reactivex.Observable` `onAssembly`(`io.reactivex.Observable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b410.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onObservableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b414.  if v0 == 0 then goto L44b424;
  #L44b418.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b41e.  v1:= temp @kind object;
  #L44b420.  v1:= (`io.reactivex.Observable`) v1 @kind object;
  #L44b424.  return v1 @kind object;
}
procedure `io.reactivex.Single` `onAssembly`(`io.reactivex.Single` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b700.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onSingleAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b704.  if v0 == 0 then goto L44b714;
  #L44b708.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b70e.  v1:= temp @kind object;
  #L44b710.  v1:= (`io.reactivex.Single`) v1 @kind object;
  #L44b714.  return v1 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `onAssembly`(`io.reactivex.flowables.ConnectableFlowable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b750.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onConnectableFlowableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b754.  if v0 == 0 then goto L44b764;
  #L44b758.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b75e.  v1:= temp @kind object;
  #L44b760.  v1:= (`io.reactivex.flowables.ConnectableFlowable`) v1 @kind object;
  #L44b764.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `onAssembly`(`io.reactivex.observables.ConnectableObservable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b9b8.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onConnectableObservableAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b9bc.  if v0 == 0 then goto L44b9cc;
  #L44b9c0.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b9c6.  v1:= temp @kind object;
  #L44b9c8.  v1:= (`io.reactivex.observables.ConnectableObservable`) v1 @kind object;
  #L44b9cc.  return v1 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `onAssembly`(`io.reactivex.parallel.ParallelFlowable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b9e0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onParallelAssembly` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b9e4.  if v0 == 0 then goto L44b9f4;
  #L44b9e8.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b9ee.  v1:= temp @kind object;
  #L44b9f0.  v1:= (`io.reactivex.parallel.ParallelFlowable`) v1 @kind object;
  #L44b9f4.  return v1 @kind object;
}
procedure `boolean` `onBeforeBlocking`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.onBeforeBlocking:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b308.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onBeforeBlocking` @type ^`io.reactivex.functions.BooleanSupplier` @kind object;
  #L44b30c.  if v0 == 0 then goto L44b326;
  #L44b310.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L44b316.  v0:= temp;
  #L44b318.  return v0;
  #L44b31a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44b31c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L44b322.  v0:= temp @kind object;
  #L44b324.  throw v0;
  #L44b326.  v0:= 0I;
  #L44b328.  return v0;
  catch `java.lang.Throwable` @[L44b310..L44b318] goto L44b31a;
}
procedure `io.reactivex.Scheduler` `onComputationScheduler`(`io.reactivex.Scheduler` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onComputationScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b660.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onComputationHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b664.  if v0 != 0 then goto L44b66a;
  #L44b668.  return v1 @kind object;
  #L44b66a.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b670.  v1:= temp @kind object;
  #L44b672.  v1:= (`io.reactivex.Scheduler`) v1 @kind object;
  #L44b676.  return v1 @kind object;
}
procedure `void` `onError`(`java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44bb0c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.errorHandler` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44bb10.  if v2 != 0 then goto L44bb24;
  #L44bb14.  v2:= new `java.lang.NullPointerException`;
  #L44bb18.  v1:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44bb1c.  call `<init>`(v2, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bb22.  goto L44bb3c;
  #L44bb24.  call temp:= `isBug`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.isBug:(Ljava/lang/Throwable;)Z` @kind static;
  #L44bb2a.  v1:= temp;
  #L44bb2c.  if v1 != 0 then goto L44bb3c;
  #L44bb30.  v1:= new `io.reactivex.exceptions.UndeliverableException`;
  #L44bb34.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/UndeliverableException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L44bb3a.  v2:= v1 @kind object;
  #L44bb3c.  if v0 == 0 then goto L44bb56;
  #L44bb40.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44bb46.  return @kind void;
  #L44bb48.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44bb4a.  call `printStackTrace`(v0) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L44bb50.  call `uncaught`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.uncaught:(Ljava/lang/Throwable;)V` @kind static;
  #L44bb56.  call `printStackTrace`(v2) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L44bb5c.  call `uncaught`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.uncaught:(Ljava/lang/Throwable;)V` @kind static;
  #L44bb62.  return @kind void;
  catch `java.lang.Throwable` @[L44bb40..L44bb46] goto L44bb48;
}
procedure `io.reactivex.Scheduler` `onIoScheduler`(`io.reactivex.Scheduler` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onIoScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b688.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onIoHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b68c.  if v0 != 0 then goto L44b692;
  #L44b690.  return v1 @kind object;
  #L44b692.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b698.  v1:= temp @kind object;
  #L44b69a.  v1:= (`io.reactivex.Scheduler`) v1 @kind object;
  #L44b69e.  return v1 @kind object;
}
procedure `io.reactivex.Scheduler` `onNewThreadScheduler`(`io.reactivex.Scheduler` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onNewThreadScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b6b0.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onNewThreadHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b6b4.  if v0 != 0 then goto L44b6ba;
  #L44b6b8.  return v1 @kind object;
  #L44b6ba.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b6c0.  v1:= temp @kind object;
  #L44b6c2.  v1:= (`io.reactivex.Scheduler`) v1 @kind object;
  #L44b6c6.  return v1 @kind object;
}
procedure `java.lang.Runnable` `onSchedule`(`java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44ba70.  v0:= "run is null" @kind object;
  #L44ba74.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ba7a.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onScheduleHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44ba7e.  if v0 != 0 then goto L44ba84;
  #L44ba82.  return v1 @kind object;
  #L44ba84.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44ba8a.  v1:= temp @kind object;
  #L44ba8c.  v1:= (`java.lang.Runnable`) v1 @kind object;
  #L44ba90.  return v1 @kind object;
}
procedure `io.reactivex.Scheduler` `onSingleScheduler`(`io.reactivex.Scheduler` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSingleScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b6d8.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onSingleHandler` @type ^`io.reactivex.functions.Function` @kind object;
  #L44b6dc.  if v0 != 0 then goto L44b6e2;
  #L44b6e0.  return v1 @kind object;
  #L44b6e2.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/Function;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b6e8.  v1:= temp @kind object;
  #L44b6ea.  v1:= (`io.reactivex.Scheduler`) v1 @kind object;
  #L44b6ee.  return v1 @kind object;
}
procedure `io.reactivex.CompletableObserver` `onSubscribe`(`io.reactivex.Completable` v1 @kind object, `io.reactivex.CompletableObserver` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Completable;Lio/reactivex/CompletableObserver;)Lio/reactivex/CompletableObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b370.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onCompletableSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b374.  if v0 == 0 then goto L44b386;
  #L44b378.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b37e.  v1:= temp @kind object;
  #L44b380.  v1:= (`io.reactivex.CompletableObserver`) v1 @kind object;
  #L44b384.  return v1 @kind object;
  #L44b386.  return v2 @kind object;
}
procedure `io.reactivex.MaybeObserver` `onSubscribe`(`io.reactivex.Maybe` v1 @kind object, `io.reactivex.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Maybe;Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b3e8.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onMaybeSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b3ec.  if v0 == 0 then goto L44b3fe;
  #L44b3f0.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b3f6.  v1:= temp @kind object;
  #L44b3f8.  v1:= (`io.reactivex.MaybeObserver`) v1 @kind object;
  #L44b3fc.  return v1 @kind object;
  #L44b3fe.  return v2 @kind object;
}
procedure `io.reactivex.Observer` `onSubscribe`(`io.reactivex.Observable` v1 @kind object, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Observable;Lio/reactivex/Observer;)Lio/reactivex/Observer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b438.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onObservableSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b43c.  if v0 == 0 then goto L44b44e;
  #L44b440.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b446.  v1:= temp @kind object;
  #L44b448.  v1:= (`io.reactivex.Observer`) v1 @kind object;
  #L44b44c.  return v1 @kind object;
  #L44b44e.  return v2 @kind object;
}
procedure `io.reactivex.SingleObserver` `onSubscribe`(`io.reactivex.Single` v1 @kind object, `io.reactivex.SingleObserver` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Single;Lio/reactivex/SingleObserver;)Lio/reactivex/SingleObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44b728.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onSingleSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b72c.  if v0 == 0 then goto L44b73e;
  #L44b730.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44b736.  v1:= temp @kind object;
  #L44b738.  v1:= (`io.reactivex.SingleObserver`) v1 @kind object;
  #L44b73c.  return v1 @kind object;
  #L44b73e.  return v2 @kind object;
}
procedure `org.reactivestreams.Subscriber` `onSubscribe`(`io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Flowable;Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44baa4.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.onFlowableSubscribe` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44baa8.  if v0 == 0 then goto L44baba;
  #L44baac.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.apply:(Lio/reactivex/functions/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44bab2.  v1:= temp @kind object;
  #L44bab4.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L44bab8.  return v1 @kind object;
  #L44baba.  return v2 @kind object;
}
procedure `void` `reset`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.reset:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44bb80.  v0:= 0I;
  #L44bb82.  call `setErrorHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setErrorHandler:(Lio/reactivex/functions/Consumer;)V` @kind static;
  #L44bb88.  call `setScheduleHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setScheduleHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bb8e.  call `setComputationSchedulerHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setComputationSchedulerHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bb94.  call `setInitComputationSchedulerHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setInitComputationSchedulerHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bb9a.  call `setIoSchedulerHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setIoSchedulerHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bba0.  call `setInitIoSchedulerHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setInitIoSchedulerHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bba6.  call `setSingleSchedulerHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setSingleSchedulerHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbac.  call `setInitSingleSchedulerHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setInitSingleSchedulerHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbb2.  call `setNewThreadSchedulerHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setNewThreadSchedulerHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbb8.  call `setInitNewThreadSchedulerHandler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setInitNewThreadSchedulerHandler:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbbe.  call `setOnFlowableAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnFlowableAssembly:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbc4.  call `setOnFlowableSubscribe`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnFlowableSubscribe:(Lio/reactivex/functions/BiFunction;)V` @kind static;
  #L44bbca.  call `setOnObservableAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnObservableAssembly:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbd0.  call `setOnObservableSubscribe`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnObservableSubscribe:(Lio/reactivex/functions/BiFunction;)V` @kind static;
  #L44bbd6.  call `setOnSingleAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnSingleAssembly:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbdc.  call `setOnSingleSubscribe`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnSingleSubscribe:(Lio/reactivex/functions/BiFunction;)V` @kind static;
  #L44bbe2.  call `setOnCompletableAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnCompletableAssembly:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbe8.  call `setOnCompletableSubscribe`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnCompletableSubscribe:(Lio/reactivex/functions/BiFunction;)V` @kind static;
  #L44bbee.  call `setOnConnectableFlowableAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnConnectableFlowableAssembly:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbf4.  call `setOnConnectableObservableAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnConnectableObservableAssembly:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bbfa.  call `setOnMaybeAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnMaybeAssembly:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bc00.  call `setOnMaybeSubscribe`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnMaybeSubscribe:(Lio/reactivex/functions/BiFunction;)V` @kind static;
  #L44bc06.  call `setOnParallelAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnParallelAssembly:(Lio/reactivex/functions/Function;)V` @kind static;
  #L44bc0c.  v1:= 0I;
  #L44bc0e.  call `setFailOnNonBlockingScheduler`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setFailOnNonBlockingScheduler:(Z)V` @kind static;
  #L44bc14.  call `setOnBeforeBlocking`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnBeforeBlocking:(Lio/reactivex/functions/BooleanSupplier;)V` @kind static;
  #L44bc1a.  return @kind void;
}
procedure `void` `setComputationSchedulerHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setComputationSchedulerHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bc2c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bc30.  if v0 != 0 then goto L44bc3a;
  #L44bc34.  `@@io.reactivex.plugins.RxJavaPlugins.onComputationHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bc38.  return @kind void;
  #L44bc3a.  v1:= new `java.lang.IllegalStateException`;
  #L44bc3e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bc42.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bc48.  throw v1;
}
procedure `void` `setErrorHandler`(`io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setErrorHandler:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bc5c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bc60.  if v0 != 0 then goto L44bc6a;
  #L44bc64.  `@@io.reactivex.plugins.RxJavaPlugins.errorHandler` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L44bc68.  return @kind void;
  #L44bc6a.  v1:= new `java.lang.IllegalStateException`;
  #L44bc6e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bc72.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bc78.  throw v1;
}
procedure `void` `setFailOnNonBlockingScheduler`(`boolean` v1 ) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setFailOnNonBlockingScheduler:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bc8c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bc90.  if v0 != 0 then goto L44bc9a;
  #L44bc94.  `@@io.reactivex.plugins.RxJavaPlugins.failNonBlockingScheduler` @type ^`boolean` := v1 @kind boolean;
  #L44bc98.  return @kind void;
  #L44bc9a.  v1:= new `java.lang.IllegalStateException`;
  #L44bc9e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bca2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bca8.  throw v1;
}
procedure `void` `setInitComputationSchedulerHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setInitComputationSchedulerHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bcbc.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bcc0.  if v0 != 0 then goto L44bcca;
  #L44bcc4.  `@@io.reactivex.plugins.RxJavaPlugins.onInitComputationHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bcc8.  return @kind void;
  #L44bcca.  v1:= new `java.lang.IllegalStateException`;
  #L44bcce.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bcd2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bcd8.  throw v1;
}
procedure `void` `setInitIoSchedulerHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setInitIoSchedulerHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bcec.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bcf0.  if v0 != 0 then goto L44bcfa;
  #L44bcf4.  `@@io.reactivex.plugins.RxJavaPlugins.onInitIoHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bcf8.  return @kind void;
  #L44bcfa.  v1:= new `java.lang.IllegalStateException`;
  #L44bcfe.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bd02.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bd08.  throw v1;
}
procedure `void` `setInitNewThreadSchedulerHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setInitNewThreadSchedulerHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bd1c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bd20.  if v0 != 0 then goto L44bd2a;
  #L44bd24.  `@@io.reactivex.plugins.RxJavaPlugins.onInitNewThreadHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bd28.  return @kind void;
  #L44bd2a.  v1:= new `java.lang.IllegalStateException`;
  #L44bd2e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bd32.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bd38.  throw v1;
}
procedure `void` `setInitSingleSchedulerHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setInitSingleSchedulerHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bd4c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bd50.  if v0 != 0 then goto L44bd5a;
  #L44bd54.  `@@io.reactivex.plugins.RxJavaPlugins.onInitSingleHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bd58.  return @kind void;
  #L44bd5a.  v1:= new `java.lang.IllegalStateException`;
  #L44bd5e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bd62.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bd68.  throw v1;
}
procedure `void` `setIoSchedulerHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setIoSchedulerHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bd7c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bd80.  if v0 != 0 then goto L44bd8a;
  #L44bd84.  `@@io.reactivex.plugins.RxJavaPlugins.onIoHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bd88.  return @kind void;
  #L44bd8a.  v1:= new `java.lang.IllegalStateException`;
  #L44bd8e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bd92.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bd98.  throw v1;
}
procedure `void` `setNewThreadSchedulerHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setNewThreadSchedulerHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bdac.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bdb0.  if v0 != 0 then goto L44bdba;
  #L44bdb4.  `@@io.reactivex.plugins.RxJavaPlugins.onNewThreadHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bdb8.  return @kind void;
  #L44bdba.  v1:= new `java.lang.IllegalStateException`;
  #L44bdbe.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bdc2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bdc8.  throw v1;
}
procedure `void` `setOnBeforeBlocking`(`io.reactivex.functions.BooleanSupplier` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnBeforeBlocking:(Lio/reactivex/functions/BooleanSupplier;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bddc.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bde0.  if v0 != 0 then goto L44bdea;
  #L44bde4.  `@@io.reactivex.plugins.RxJavaPlugins.onBeforeBlocking` @type ^`io.reactivex.functions.BooleanSupplier` := v1 @kind object;
  #L44bde8.  return @kind void;
  #L44bdea.  v1:= new `java.lang.IllegalStateException`;
  #L44bdee.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bdf2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bdf8.  throw v1;
}
procedure `void` `setOnCompletableAssembly`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnCompletableAssembly:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44be0c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44be10.  if v0 != 0 then goto L44be1a;
  #L44be14.  `@@io.reactivex.plugins.RxJavaPlugins.onCompletableAssembly` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44be18.  return @kind void;
  #L44be1a.  v1:= new `java.lang.IllegalStateException`;
  #L44be1e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44be22.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44be28.  throw v1;
}
procedure `void` `setOnCompletableSubscribe`(`io.reactivex.functions.BiFunction` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnCompletableSubscribe:(Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44be3c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44be40.  if v0 != 0 then goto L44be4a;
  #L44be44.  `@@io.reactivex.plugins.RxJavaPlugins.onCompletableSubscribe` @type ^`io.reactivex.functions.BiFunction` := v1 @kind object;
  #L44be48.  return @kind void;
  #L44be4a.  v1:= new `java.lang.IllegalStateException`;
  #L44be4e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44be52.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44be58.  throw v1;
}
procedure `void` `setOnConnectableFlowableAssembly`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnConnectableFlowableAssembly:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44be6c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44be70.  if v0 != 0 then goto L44be7a;
  #L44be74.  `@@io.reactivex.plugins.RxJavaPlugins.onConnectableFlowableAssembly` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44be78.  return @kind void;
  #L44be7a.  v1:= new `java.lang.IllegalStateException`;
  #L44be7e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44be82.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44be88.  throw v1;
}
procedure `void` `setOnConnectableObservableAssembly`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnConnectableObservableAssembly:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44be9c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bea0.  if v0 != 0 then goto L44beaa;
  #L44bea4.  `@@io.reactivex.plugins.RxJavaPlugins.onConnectableObservableAssembly` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bea8.  return @kind void;
  #L44beaa.  v1:= new `java.lang.IllegalStateException`;
  #L44beae.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44beb2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44beb8.  throw v1;
}
procedure `void` `setOnFlowableAssembly`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnFlowableAssembly:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44becc.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bed0.  if v0 != 0 then goto L44beda;
  #L44bed4.  `@@io.reactivex.plugins.RxJavaPlugins.onFlowableAssembly` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bed8.  return @kind void;
  #L44beda.  v1:= new `java.lang.IllegalStateException`;
  #L44bede.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bee2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bee8.  throw v1;
}
procedure `void` `setOnFlowableSubscribe`(`io.reactivex.functions.BiFunction` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnFlowableSubscribe:(Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44befc.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bf00.  if v0 != 0 then goto L44bf0a;
  #L44bf04.  `@@io.reactivex.plugins.RxJavaPlugins.onFlowableSubscribe` @type ^`io.reactivex.functions.BiFunction` := v1 @kind object;
  #L44bf08.  return @kind void;
  #L44bf0a.  v1:= new `java.lang.IllegalStateException`;
  #L44bf0e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bf12.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bf18.  throw v1;
}
procedure `void` `setOnMaybeAssembly`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnMaybeAssembly:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bf2c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bf30.  if v0 != 0 then goto L44bf3a;
  #L44bf34.  `@@io.reactivex.plugins.RxJavaPlugins.onMaybeAssembly` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bf38.  return @kind void;
  #L44bf3a.  v1:= new `java.lang.IllegalStateException`;
  #L44bf3e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bf42.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bf48.  throw v1;
}
procedure `void` `setOnMaybeSubscribe`(`io.reactivex.functions.BiFunction` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnMaybeSubscribe:(Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bf5c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bf60.  if v0 != 0 then goto L44bf6a;
  #L44bf64.  `@@io.reactivex.plugins.RxJavaPlugins.onMaybeSubscribe` @type ^`io.reactivex.functions.BiFunction` := v1 @kind object;
  #L44bf68.  return @kind void;
  #L44bf6a.  v1:= new `java.lang.IllegalStateException`;
  #L44bf6e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bf72.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bf78.  throw v1;
}
procedure `void` `setOnObservableAssembly`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnObservableAssembly:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bf8c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bf90.  if v0 != 0 then goto L44bf9a;
  #L44bf94.  `@@io.reactivex.plugins.RxJavaPlugins.onObservableAssembly` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bf98.  return @kind void;
  #L44bf9a.  v1:= new `java.lang.IllegalStateException`;
  #L44bf9e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bfa2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bfa8.  throw v1;
}
procedure `void` `setOnObservableSubscribe`(`io.reactivex.functions.BiFunction` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnObservableSubscribe:(Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bfbc.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bfc0.  if v0 != 0 then goto L44bfca;
  #L44bfc4.  `@@io.reactivex.plugins.RxJavaPlugins.onObservableSubscribe` @type ^`io.reactivex.functions.BiFunction` := v1 @kind object;
  #L44bfc8.  return @kind void;
  #L44bfca.  v1:= new `java.lang.IllegalStateException`;
  #L44bfce.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44bfd2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bfd8.  throw v1;
}
procedure `void` `setOnParallelAssembly`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnParallelAssembly:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44bfec.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44bff0.  if v0 != 0 then goto L44bffa;
  #L44bff4.  `@@io.reactivex.plugins.RxJavaPlugins.onParallelAssembly` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44bff8.  return @kind void;
  #L44bffa.  v1:= new `java.lang.IllegalStateException`;
  #L44bffe.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44c002.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c008.  throw v1;
}
procedure `void` `setOnSingleAssembly`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnSingleAssembly:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44c01c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44c020.  if v0 != 0 then goto L44c02a;
  #L44c024.  `@@io.reactivex.plugins.RxJavaPlugins.onSingleAssembly` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44c028.  return @kind void;
  #L44c02a.  v1:= new `java.lang.IllegalStateException`;
  #L44c02e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44c032.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c038.  throw v1;
}
procedure `void` `setOnSingleSubscribe`(`io.reactivex.functions.BiFunction` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setOnSingleSubscribe:(Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44c04c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44c050.  if v0 != 0 then goto L44c05a;
  #L44c054.  `@@io.reactivex.plugins.RxJavaPlugins.onSingleSubscribe` @type ^`io.reactivex.functions.BiFunction` := v1 @kind object;
  #L44c058.  return @kind void;
  #L44c05a.  v1:= new `java.lang.IllegalStateException`;
  #L44c05e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44c062.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c068.  throw v1;
}
procedure `void` `setScheduleHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setScheduleHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44c07c.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44c080.  if v0 != 0 then goto L44c08a;
  #L44c084.  `@@io.reactivex.plugins.RxJavaPlugins.onScheduleHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44c088.  return @kind void;
  #L44c08a.  v1:= new `java.lang.IllegalStateException`;
  #L44c08e.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44c092.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c098.  throw v1;
}
procedure `void` `setSingleSchedulerHandler`(`io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.setSingleSchedulerHandler:(Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44c0ac.  v0:= `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` @kind boolean;
  #L44c0b0.  if v0 != 0 then goto L44c0ba;
  #L44c0b4.  `@@io.reactivex.plugins.RxJavaPlugins.onSingleHandler` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44c0b8.  return @kind void;
  #L44c0ba.  v1:= new `java.lang.IllegalStateException`;
  #L44c0be.  v0:= "Plugins can't be changed anymore" @kind object;
  #L44c0c2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c0c8.  throw v1;
}
procedure `void` `uncaught`(`java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/plugins/RxJavaPlugins;.uncaught:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L44c0dc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44c0e2.  v0:= temp @kind object;
  #L44c0e4.  call temp:= `getUncaughtExceptionHandler`(v0) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L44c0ea.  v1:= temp @kind object;
  #L44c0ec.  call `uncaughtException`(v1, v0, v2) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L44c0f2.  return @kind void;
}
procedure `void` `unlock`() @signature `Lio/reactivex/plugins/RxJavaPlugins;.unlock:()V` @AccessFlag STATIC {
    temp;
    v0;

  #L44c104.  v0:= 0I;
  #L44c106.  `@@io.reactivex.plugins.RxJavaPlugins.lockdown` @type ^`boolean` := v0 @kind boolean;
  #L44c10a.  return @kind void;
}
