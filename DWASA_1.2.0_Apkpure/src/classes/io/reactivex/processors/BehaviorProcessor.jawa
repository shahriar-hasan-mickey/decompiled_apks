record `io.reactivex.processors.BehaviorProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `long` `io.reactivex.processors.BehaviorProcessor.index` @AccessFlag ;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.processors.BehaviorProcessor.lock` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.processors.BehaviorProcessor.readLock` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.subscribers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.terminalEvent` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.value` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.processors.BehaviorProcessor.writeLock` @AccessFlag FINAL;
}
global `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] `@@io.reactivex.processors.BehaviorProcessor.EMPTY` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@io.reactivex.processors.BehaviorProcessor.EMPTY_ARRAY` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] `@@io.reactivex.processors.BehaviorProcessor.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/BehaviorProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44cce0.  v0:= 0I;
  #L44cce2.  v1:= new `java.lang.Object`[v0];
  #L44cce6.  `@@io.reactivex.processors.BehaviorProcessor.EMPTY_ARRAY` @type ^`java.lang.Object`[] := v1 @kind object;
  #L44ccea.  v1:= new `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[v0];
  #L44ccee.  `@@io.reactivex.processors.BehaviorProcessor.EMPTY` @type ^`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] := v1 @kind object;
  #L44ccf2.  v0:= new `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[v0];
  #L44ccf6.  `@@io.reactivex.processors.BehaviorProcessor.TERMINATED` @type ^`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] := v0 @kind object;
  #L44ccfa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44cd0c.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L44cd12.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44cd16.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44cd1c.  v2.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44cd20.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L44cd24.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L44cd2a.  v2.`io.reactivex.processors.BehaviorProcessor.lock` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L44cd2e.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.lock` @type ^`java.util.concurrent.locks.ReadWriteLock` @kind object;
  #L44cd32.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L44cd38.  v0:= temp @kind object;
  #L44cd3a.  v2.`io.reactivex.processors.BehaviorProcessor.readLock` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L44cd3e.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.lock` @type ^`java.util.concurrent.locks.ReadWriteLock` @kind object;
  #L44cd42.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L44cd48.  v0:= temp @kind object;
  #L44cd4a.  v2.`io.reactivex.processors.BehaviorProcessor.writeLock` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L44cd4e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44cd52.  v1:= `@@io.reactivex.processors.BehaviorProcessor.EMPTY` @type ^`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] @kind object;
  #L44cd56.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44cd5c.  v2.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44cd60.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44cd64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44cd6a.  v2.`io.reactivex.processors.BehaviorProcessor.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44cd6e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44cd80.  call `<init>`(v2) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L44cd86.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cd8a.  v1:= "defaultValue is null" @kind object;
  #L44cd8e.  call temp:= `requireNonNull`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44cd94.  v3:= temp @kind object;
  #L44cd96.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44cd9c.  return @kind void;
}
procedure `io.reactivex.processors.BehaviorProcessor` `create`() @signature `Lio/reactivex/processors/BehaviorProcessor;.create:()Lio/reactivex/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44cb18.  v0:= new `io.reactivex.processors.BehaviorProcessor`;
  #L44cb1c.  call `<init>`(v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L44cb22.  return v0 @kind object;
}
procedure `io.reactivex.processors.BehaviorProcessor` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.createDefault:(Ljava/lang/Object;)Lio/reactivex/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44cb34.  v0:= "defaultValue is null" @kind object;
  #L44cb38.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44cb3e.  v0:= new `io.reactivex.processors.BehaviorProcessor`;
  #L44cb42.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44cb48.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.processors.BehaviorProcessor` v4 @kind this, `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v5 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.add:(Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44c958.  v0:= v4.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c95c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c962.  v0:= temp @kind object;
  #L44c964.  v0:= (`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[]) v0 @kind object;
  #L44c968.  v1:= `@@io.reactivex.processors.BehaviorProcessor.TERMINATED` @type ^`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] @kind object;
  #L44c96c.  v2:= 0I;
  #L44c96e.  if v0 != v1 then goto L44c974;
  #L44c972.  return v2;
  #L44c974.  v1:= length @variable v0;
  #L44c976.  v3:= v1 + 1;
  #L44c97a.  v3:= new `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[v3];
  #L44c97e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44c984.  v3[v1]:= v5 @kind object;
  #L44c988.  v1:= v4.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c98c.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c992.  v0:= temp;
  #L44c994.  if v0 == 0 then goto L44c958;
  #L44c998.  v5:= 1I;
  #L44c99a.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44cca8.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ccac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ccb2.  v0:= temp @kind object;
  #L44ccb4.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L44ccba.  v1:= temp;
  #L44ccbc.  if v1 == 0 then goto L44ccca;
  #L44ccc0.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L44ccc6.  v0:= temp @kind object;
  #L44ccc8.  return v0 @kind object;
  #L44ccca.  v0:= 0I;
  #L44cccc.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44cba4.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cba8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44cbae.  v0:= temp @kind object;
  #L44cbb0.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L44cbb6.  v1:= temp;
  #L44cbb8.  if v1 != 0 then goto L44cbd4;
  #L44cbbc.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L44cbc2.  v1:= temp;
  #L44cbc4.  if v1 == 0 then goto L44cbca;
  #L44cbc8.  goto L44cbd4;
  #L44cbca.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44cbd0.  v0:= temp @kind object;
  #L44cbd2.  return v0 @kind object;
  #L44cbd4.  v0:= 0I;
  #L44cbd6.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44cbe8.  v0:= `@@io.reactivex.processors.BehaviorProcessor.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L44cbec.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L44cbf0.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L44cbf6.  v0:= temp @kind object;
  #L44cbf8.  v1:= `@@io.reactivex.processors.BehaviorProcessor.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L44cbfc.  if v0 != v1 then goto L44cc06;
  #L44cc00.  v0:= 0I;
  #L44cc02.  v0:= new `java.lang.Object`[v0];
  #L44cc06.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.BehaviorProcessor` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44cc18.  v0:= v5.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cc1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44cc22.  v0:= temp @kind object;
  #L44cc24.  v1:= 0I;
  #L44cc26.  v2:= 0I;
  #L44cc28.  if v0 == 0 then goto L44cc8c;
  #L44cc2c.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L44cc32.  v3:= temp;
  #L44cc34.  if v3 != 0 then goto L44cc8c;
  #L44cc38.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L44cc3e.  v3:= temp;
  #L44cc40.  if v3 == 0 then goto L44cc46;
  #L44cc44.  goto L44cc8c;
  #L44cc46.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44cc4c.  v0:= temp @kind object;
  #L44cc4e.  v3:= length @variable v6;
  #L44cc50.  v4:= 1I;
  #L44cc52.  if v3 == 0 then goto L44cc66;
  #L44cc56.  v6[v2]:= v0 @kind object;
  #L44cc5a.  v0:= length @variable v6;
  #L44cc5c.  if v0 == v4 then goto L44cc8a;
  #L44cc60.  v6[v4]:= v1 @kind object;
  #L44cc64.  goto L44cc8a;
  #L44cc66.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L44cc6c.  v6:= temp @kind object;
  #L44cc6e.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L44cc74.  v6:= temp @kind object;
  #L44cc76.  call temp:= `newInstance`(v6, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L44cc7c.  v6:= temp @kind object;
  #L44cc7e.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L44cc82.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L44cc86.  v6[v2]:= v0 @kind object;
  #L44cc8a.  return v6 @kind object;
  #L44cc8c.  v0:= length @variable v6;
  #L44cc8e.  if v0 == 0 then goto L44cc96;
  #L44cc92.  v6[v2]:= v1 @kind object;
  #L44cc96.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c9ac.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c9b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c9b6.  v0:= temp @kind object;
  #L44c9b8.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L44c9be.  v0:= temp;
  #L44c9c0.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c9d4.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c9d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c9de.  v0:= temp @kind object;
  #L44c9e0.  v0:= (`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[]) v0 @kind object;
  #L44c9e4.  v0:= length @variable v0;
  #L44c9e6.  if v0 == 0 then goto L44c9ee;
  #L44c9ea.  v0:= 1I;
  #L44c9ec.  goto L44c9f0;
  #L44c9ee.  v0:= 0I;
  #L44c9f0.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ca04.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ca08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ca0e.  v0:= temp @kind object;
  #L44ca10.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L44ca16.  v0:= temp;
  #L44ca18.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ca2c.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ca30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ca36.  v0:= temp @kind object;
  #L44ca38.  if v0 == 0 then goto L44ca58;
  #L44ca3c.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L44ca42.  v1:= temp;
  #L44ca44.  if v1 != 0 then goto L44ca58;
  #L44ca48.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L44ca4e.  v0:= temp;
  #L44ca50.  if v0 != 0 then goto L44ca58;
  #L44ca54.  v0:= 1I;
  #L44ca56.  goto L44ca5a;
  #L44ca58.  v0:= 0I;
  #L44ca5a.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.processors.BehaviorProcessor` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44ca6c.  v0:= 1I;
  #L44ca6e.  if v8 != 0 then goto L44ca88;
  #L44ca72.  v8:= new `java.lang.NullPointerException`;
  #L44ca76.  v1:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44ca7a.  call `<init>`(v8, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44ca80.  call `onError`(v7, v8) @signature `Lio/reactivex/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44ca86.  return v0;
  #L44ca88.  v1:= v7.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ca8c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ca92.  v1:= temp @kind object;
  #L44ca94.  v1:= (`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[]) v1 @kind object;
  #L44ca98.  v2:= length @variable v1;
  #L44ca9a.  v3:= 0I;
  #L44ca9c.  v4:= 0I;
  #L44ca9e.  if v4 >= v2 then goto L44caba;
  #L44caa2.  v5:= v1[v4] @kind object;
  #L44caa6.  call temp:= `isFull`(v5) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.isFull:()Z` @kind virtual;
  #L44caac.  v5:= temp;
  #L44caae.  if v5 == 0 then goto L44cab4;
  #L44cab2.  return v3;
  #L44cab4.  v4:= v4 + 1;
  #L44cab8.  goto L44ca9e;
  #L44caba.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44cac0.  v8:= temp @kind object;
  #L44cac2.  call `setCurrent`(v7, v8) @signature `Lio/reactivex/processors/BehaviorProcessor;.setCurrent:(Ljava/lang/Object;)V` @kind virtual;
  #L44cac8.  v2:= length @variable v1;
  #L44caca.  if v3 >= v2 then goto L44cae2;
  #L44cace.  v4:= v1[v3] @kind object;
  #L44cad2.  v5:= v7.`io.reactivex.processors.BehaviorProcessor.index` @type ^`long` @kind wide;
  #L44cad6.  call `emitNext`(v4, v8, v5) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L44cadc.  v3:= v3 + 1;
  #L44cae0.  goto L44caca;
  #L44cae2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.BehaviorProcessor` v7 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44cdb0.  v0:= v7.`io.reactivex.processors.BehaviorProcessor.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cdb4.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L44cdb8.  v2:= 0I;
  #L44cdba.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44cdc0.  v0:= temp;
  #L44cdc2.  if v0 != 0 then goto L44cdc8;
  #L44cdc6.  return @kind void;
  #L44cdc8.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L44cdce.  v0:= temp @kind object;
  #L44cdd0.  call temp:= `terminate`(v7, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.terminate:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;` @kind virtual;
  #L44cdd6.  v1:= temp @kind object;
  #L44cdd8.  v2:= length @variable v1;
  #L44cdda.  v3:= 0I;
  #L44cddc.  if v3 >= v2 then goto L44cdf4;
  #L44cde0.  v4:= v1[v3] @kind object;
  #L44cde4.  v5:= v7.`io.reactivex.processors.BehaviorProcessor.index` @type ^`long` @kind wide;
  #L44cde8.  call `emitNext`(v4, v0, v5) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L44cdee.  v3:= v3 + 1;
  #L44cdf2.  goto L44cddc;
  #L44cdf4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44ce08.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44ce0c.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ce12.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ce16.  v1:= 0I;
  #L44ce18.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44ce1e.  v0:= temp;
  #L44ce20.  if v0 != 0 then goto L44ce2c;
  #L44ce24.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44ce2a.  return @kind void;
  #L44ce2c.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L44ce32.  v7:= temp @kind object;
  #L44ce34.  call temp:= `terminate`(v6, v7) @signature `Lio/reactivex/processors/BehaviorProcessor;.terminate:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;` @kind virtual;
  #L44ce3a.  v0:= temp @kind object;
  #L44ce3c.  v1:= length @variable v0;
  #L44ce3e.  v2:= 0I;
  #L44ce40.  if v2 >= v1 then goto L44ce58;
  #L44ce44.  v3:= v0[v2] @kind object;
  #L44ce48.  v4:= v6.`io.reactivex.processors.BehaviorProcessor.index` @type ^`long` @kind wide;
  #L44ce4c.  call `emitNext`(v3, v7, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L44ce52.  v2:= v2 + 1;
  #L44ce56.  goto L44ce40;
  #L44ce58.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44ce6c.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44ce70.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ce76.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ce7a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ce80.  v0:= temp @kind object;
  #L44ce82.  if v0 == 0 then goto L44ce88;
  #L44ce86.  return @kind void;
  #L44ce88.  call temp:= `next`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44ce8e.  v7:= temp @kind object;
  #L44ce90.  call `setCurrent`(v6, v7) @signature `Lio/reactivex/processors/BehaviorProcessor;.setCurrent:(Ljava/lang/Object;)V` @kind virtual;
  #L44ce96.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ce9a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44cea0.  v0:= temp @kind object;
  #L44cea2.  v0:= (`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[]) v0 @kind object;
  #L44cea6.  v1:= length @variable v0;
  #L44cea8.  v2:= 0I;
  #L44ceaa.  if v2 >= v1 then goto L44cec2;
  #L44ceae.  v3:= v0[v2] @kind object;
  #L44ceb2.  v4:= v6.`io.reactivex.processors.BehaviorProcessor.index` @type ^`long` @kind wide;
  #L44ceb6.  call `emitNext`(v3, v7, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L44cebc.  v2:= v2 + 1;
  #L44cec0.  goto L44ceaa;
  #L44cec2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ced4.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ced8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44cede.  v0:= temp @kind object;
  #L44cee0.  if v0 == 0 then goto L44ceec;
  #L44cee4.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ceea.  return @kind void;
  #L44ceec.  v0:= 9223372036854775807L;
  #L44cef6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44cefc.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.remove:(Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44cf10.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cf14.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44cf1a.  v0:= temp @kind object;
  #L44cf1c.  v0:= (`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[]) v0 @kind object;
  #L44cf20.  v1:= length @variable v0;
  #L44cf22.  if v1 != 0 then goto L44cf28;
  #L44cf26.  return @kind void;
  #L44cf28.  v2:= -1I;
  #L44cf2a.  v3:= 0I;
  #L44cf2c.  v4:= 0I;
  #L44cf2e.  if v4 >= v1 then goto L44cf44;
  #L44cf32.  v5:= v0[v4] @kind object;
  #L44cf36.  if v5 != v7 then goto L44cf3e;
  #L44cf3a.  v2:= v4;
  #L44cf3c.  goto L44cf44;
  #L44cf3e.  v4:= v4 + 1;
  #L44cf42.  goto L44cf2e;
  #L44cf44.  if v2 >= 0 then goto L44cf4a;
  #L44cf48.  return @kind void;
  #L44cf4a.  v4:= 1I;
  #L44cf4c.  if v1 != v4 then goto L44cf56;
  #L44cf50.  v1:= `@@io.reactivex.processors.BehaviorProcessor.EMPTY` @type ^`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] @kind object;
  #L44cf54.  goto L44cf74;
  #L44cf56.  v5:= v1 + -1;
  #L44cf5a.  v5:= new `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[v5];
  #L44cf5e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44cf64.  v3:= v2 + 1;
  #L44cf68.  v1:= v1 - v2 @kind int;
  #L44cf6a.  v1:= v1 - v4 @kind int;
  #L44cf6c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44cf72.  v1:= v5 @kind object;
  #L44cf74.  v2:= v6.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cf78.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44cf7e.  v0:= temp;
  #L44cf80.  if v0 == 0 then goto L44cf10;
  #L44cf84.  return @kind void;
}
procedure `void` `setCurrent`(`io.reactivex.processors.BehaviorProcessor` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.setCurrent:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44cf98.  v0:= v5.`io.reactivex.processors.BehaviorProcessor.writeLock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L44cf9c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L44cfa2.  v1:= v5.`io.reactivex.processors.BehaviorProcessor.index` @type ^`long` @kind wide;
  #L44cfa6.  v3:= 1L;
  #L44cfaa.  v1:= v1 + v3 @kind long;
  #L44cfac.  v5.`io.reactivex.processors.BehaviorProcessor.index` @type ^`long` := v1 @kind wide;
  #L44cfb0.  v1:= v5.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cfb4.  call `lazySet`(v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44cfba.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L44cfc0.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L44cfd4.  v0:= new `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`;
  #L44cfd8.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/BehaviorProcessor;)V` @kind direct;
  #L44cfde.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44cfe4.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.add:(Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;)Z` @kind virtual;
  #L44cfea.  v1:= temp;
  #L44cfec.  if v1 == 0 then goto L44d008;
  #L44cff0.  v3:= v0.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44cff4.  if v3 == 0 then goto L44d000;
  #L44cff8.  call `remove`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.remove:(Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;)V` @kind virtual;
  #L44cffe.  goto L44d02e;
  #L44d000.  call `emitFirst`(v0) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitFirst:()V` @kind virtual;
  #L44d006.  goto L44d02e;
  #L44d008.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d00c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44d012.  v0:= temp @kind object;
  #L44d014.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L44d018.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L44d01c.  if v0 != v1 then goto L44d028;
  #L44d020.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44d026.  goto L44d02e;
  #L44d028.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44d02e.  return @kind void;
}
procedure `int` `subscriberCount`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.subscriberCount:()I` @AccessFlag  {
    temp;
    v0;

  #L44caf4.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44caf8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44cafe.  v0:= temp @kind object;
  #L44cb00.  v0:= (`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[]) v0 @kind object;
  #L44cb04.  v0:= length @variable v0;
  #L44cb06.  return v0;
}
procedure `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] `terminate`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.terminate:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44cb5c.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cb60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44cb66.  v0:= temp @kind object;
  #L44cb68.  v0:= (`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[]) v0 @kind object;
  #L44cb6c.  v1:= `@@io.reactivex.processors.BehaviorProcessor.TERMINATED` @type ^`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] @kind object;
  #L44cb70.  if v0 == v1 then goto L44cb92;
  #L44cb74.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44cb78.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44cb7e.  v0:= temp @kind object;
  #L44cb80.  v0:= (`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[]) v0 @kind object;
  #L44cb84.  v1:= `@@io.reactivex.processors.BehaviorProcessor.TERMINATED` @type ^`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription`[] @kind object;
  #L44cb88.  if v0 == v1 then goto L44cb92;
  #L44cb8c.  call `setCurrent`(v2, v3) @signature `Lio/reactivex/processors/BehaviorProcessor;.setCurrent:(Ljava/lang/Object;)V` @kind virtual;
  #L44cb92.  return v0 @kind object;
}
