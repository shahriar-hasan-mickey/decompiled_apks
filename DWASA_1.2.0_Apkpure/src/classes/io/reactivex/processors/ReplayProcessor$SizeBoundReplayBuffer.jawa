record `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind interface {
  `boolean` `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.error` @AccessFlag ;
  `io.reactivex.processors.ReplayProcessor$Node` `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @AccessFlag VOLATILE;
  `int` `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.maxSize` @AccessFlag FINAL;
  `int` `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.size` @AccessFlag ;
  `io.reactivex.processors.ReplayProcessor$Node` `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.tail` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44e6f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44e6fa.  v0:= "maxSize" @kind object;
  #L44e6fe.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44e704.  v2:= temp;
  #L44e706.  v1.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.maxSize` @type ^`int` := v2;
  #L44e70a.  v2:= new `io.reactivex.processors.ReplayProcessor$Node`;
  #L44e70e.  v0:= 0I;
  #L44e710.  call `<init>`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44e716.  v1.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.processors.ReplayProcessor$Node` := v2 @kind object;
  #L44e71a.  v1.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` := v2 @kind object;
  #L44e71e.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e730.  call `trimHead`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.trimHead:()V` @kind virtual;
  #L44e736.  v0:= 1I;
  #L44e738.  v1.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.done` @type ^`boolean` := v0 @kind boolean;
  #L44e73c.  return @kind void;
}
procedure `void` `error`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L44e750.  v0.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L44e754.  call `trimHead`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.trimHead:()V` @kind virtual;
  #L44e75a.  v1:= 1I;
  #L44e75c.  v0.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.done` @type ^`boolean` := v1 @kind boolean;
  #L44e760.  return @kind void;
}
procedure `java.lang.Throwable` `getError`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.getError:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e6dc.  v0:= v1.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44e6e0.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e628.  v0:= v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` @kind object;
  #L44e62c.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e632.  v1:= temp @kind object;
  #L44e634.  v1:= (`io.reactivex.processors.ReplayProcessor$Node`) v1 @kind object;
  #L44e638.  if v1 != 0 then goto L44e642;
  #L44e63c.  v0:= v0.`io.reactivex.processors.ReplayProcessor$Node.value` @type ^`java.lang.Object` @kind object;
  #L44e640.  return v0 @kind object;
  #L44e642.  v0:= v1 @kind object;
  #L44e644.  goto L44e62c;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v4 @kind this, `java.lang.Object`[] v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44e658.  v0:= v4.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` @kind object;
  #L44e65c.  v1:= 0I;
  #L44e65e.  v2:= v0 @kind object;
  #L44e660.  v3:= 0I;
  #L44e662.  call temp:= `get`(v2) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e668.  v2:= temp @kind object;
  #L44e66a.  v2:= (`io.reactivex.processors.ReplayProcessor$Node`) v2 @kind object;
  #L44e66e.  if v2 != 0 then goto L44e6c4;
  #L44e672.  v2:= length @variable v5;
  #L44e674.  if v2 >= v3 then goto L44e698;
  #L44e678.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L44e67e.  v5:= temp @kind object;
  #L44e680.  call temp:= `getComponentType`(v5) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L44e686.  v5:= temp @kind object;
  #L44e688.  call temp:= `newInstance`(v5, v3) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L44e68e.  v5:= temp @kind object;
  #L44e690.  v5:= (`java.lang.Object`[]) v5 @kind object;
  #L44e694.  v5:= (`java.lang.Object`[]) v5 @kind object;
  #L44e698.  if v1 >= v3 then goto L44e6b6;
  #L44e69c.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e6a2.  v0:= temp @kind object;
  #L44e6a4.  v0:= (`io.reactivex.processors.ReplayProcessor$Node`) v0 @kind object;
  #L44e6a8.  v2:= v0.`io.reactivex.processors.ReplayProcessor$Node.value` @type ^`java.lang.Object` @kind object;
  #L44e6ac.  v5[v1]:= v2 @kind object;
  #L44e6b0.  v1:= v1 + 1;
  #L44e6b4.  goto L44e698;
  #L44e6b6.  v0:= length @variable v5;
  #L44e6b8.  if v0 <= v3 then goto L44e6c2;
  #L44e6bc.  v0:= 0I;
  #L44e6be.  v5[v3]:= v0 @kind object;
  #L44e6c2.  return v5 @kind object;
  #L44e6c4.  v3:= v3 + 1;
  #L44e6c8.  goto L44e662;
}
procedure `boolean` `isDone`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e5d4.  v0:= v1.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44e5d8.  return v0;
}
procedure `void` `next`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e774.  v0:= new `io.reactivex.processors.ReplayProcessor$Node`;
  #L44e778.  call `<init>`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44e77e.  v3:= v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.processors.ReplayProcessor$Node` @kind object;
  #L44e782.  v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.processors.ReplayProcessor$Node` := v0 @kind object;
  #L44e786.  v1:= v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.size` @type ^`int`;
  #L44e78a.  v1:= v1 + 1;
  #L44e78e.  v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.size` @type ^`int` := v1;
  #L44e792.  call `set`(v3, v0) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L44e798.  call `trim`(v2) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.trim:()V` @kind virtual;
  #L44e79e.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v12 @kind this, `io.reactivex.processors.ReplayProcessor$ReplaySubscription` v13 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L44e7b0.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.getAndIncrement:()I` @kind virtual;
  #L44e7b6.  v0:= temp;
  #L44e7b8.  if v0 == 0 then goto L44e7be;
  #L44e7bc.  return @kind void;
  #L44e7be.  v0:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e7c2.  v1:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` @kind object;
  #L44e7c6.  v1:= (`io.reactivex.processors.ReplayProcessor$Node`) v1 @kind object;
  #L44e7ca.  if v1 != 0 then goto L44e7d2;
  #L44e7ce.  v1:= v12.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` @kind object;
  #L44e7d2.  v2:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.emitted` @type ^`long` @kind wide;
  #L44e7d6.  v4:= 1I;
  #L44e7d8.  v5:= 1I;
  #L44e7da.  v6:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e7de.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44e7e4.  v6:= temp @kind wide;
  #L44e7e6.  v8:= 0I;
  #L44e7e8.  v9:= lcmp(v2, v6);
  #L44e7ec.  if v9 == 0 then goto L44e85a;
  #L44e7f0.  v9:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44e7f4.  if v9 == 0 then goto L44e7fe;
  #L44e7f8.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v8 @kind object;
  #L44e7fc.  return @kind void;
  #L44e7fe.  v9:= v12.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44e802.  call temp:= `get`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e808.  v10:= temp @kind object;
  #L44e80a.  v10:= (`io.reactivex.processors.ReplayProcessor$Node`) v10 @kind object;
  #L44e80e.  if v10 != 0 then goto L44e816;
  #L44e812.  v11:= 1I;
  #L44e814.  goto L44e818;
  #L44e816.  v11:= 0I;
  #L44e818.  if v9 == 0 then goto L44e840;
  #L44e81c.  if v11 == 0 then goto L44e840;
  #L44e820.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v8 @kind object;
  #L44e824.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L44e828.  v13:= v12.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44e82c.  if v13 != 0 then goto L44e838;
  #L44e830.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e836.  goto L44e83e;
  #L44e838.  call `onError`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e83e.  return @kind void;
  #L44e840.  if v11 == 0 then goto L44e846;
  #L44e844.  goto L44e85a;
  #L44e846.  v1:= v10.`io.reactivex.processors.ReplayProcessor$Node.value` @type ^`java.lang.Object` @kind object;
  #L44e84a.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44e850.  v8:= 1L;
  #L44e854.  v2:= v2 + v8 @kind long;
  #L44e856.  v1:= v10 @kind object;
  #L44e858.  goto L44e7e6;
  #L44e85a.  v9:= lcmp(v2, v6);
  #L44e85e.  if v9 != 0 then goto L44e8a4;
  #L44e862.  v6:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44e866.  if v6 == 0 then goto L44e870;
  #L44e86a.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v8 @kind object;
  #L44e86e.  return @kind void;
  #L44e870.  v6:= v12.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44e874.  if v6 == 0 then goto L44e8a4;
  #L44e878.  call temp:= `get`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e87e.  v6:= temp @kind object;
  #L44e880.  if v6 != 0 then goto L44e8a4;
  #L44e884.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v8 @kind object;
  #L44e888.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L44e88c.  v13:= v12.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44e890.  if v13 != 0 then goto L44e89c;
  #L44e894.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e89a.  goto L44e8a2;
  #L44e89c.  call `onError`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e8a2.  return @kind void;
  #L44e8a4.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v1 @kind object;
  #L44e8a8.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.emitted` @type ^`long` := v2 @kind wide;
  #L44e8ac.  v5:= -v5 @kind int;
  #L44e8ae.  call temp:= `addAndGet`(v13, v5) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.addAndGet:(I)I` @kind virtual;
  #L44e8b4.  v5:= temp;
  #L44e8b6.  if v5 != 0 then goto L44e7da;
  #L44e8ba.  return @kind void;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v3 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44e5ec.  v0:= v3.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` @kind object;
  #L44e5f0.  v1:= 0I;
  #L44e5f2.  v2:= 2147483647I;
  #L44e5f8.  if v1 == v2 then goto L44e614;
  #L44e5fc.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e602.  v0:= temp @kind object;
  #L44e604.  v0:= (`io.reactivex.processors.ReplayProcessor$Node`) v0 @kind object;
  #L44e608.  if v0 != 0 then goto L44e60e;
  #L44e60c.  goto L44e614;
  #L44e60e.  v1:= v1 + 1;
  #L44e612.  goto L44e5f2;
  #L44e614.  return v1;
}
procedure `void` `trim`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.trim:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44e8cc.  v0:= v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.size` @type ^`int`;
  #L44e8d0.  v1:= v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.maxSize` @type ^`int`;
  #L44e8d4.  if v0 <= v1 then goto L44e8f4;
  #L44e8d8.  v0:= v0 + -1;
  #L44e8dc.  v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.size` @type ^`int` := v0;
  #L44e8e0.  v0:= v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` @kind object;
  #L44e8e4.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e8ea.  v0:= temp @kind object;
  #L44e8ec.  v0:= (`io.reactivex.processors.ReplayProcessor$Node`) v0 @kind object;
  #L44e8f0.  v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` := v0 @kind object;
  #L44e8f4.  return @kind void;
}
procedure `void` `trimHead`(`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e908.  v0:= v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` @kind object;
  #L44e90c.  v0:= v0.`io.reactivex.processors.ReplayProcessor$Node.value` @type ^`java.lang.Object` @kind object;
  #L44e910.  if v0 == 0 then goto L44e936;
  #L44e914.  v0:= new `io.reactivex.processors.ReplayProcessor$Node`;
  #L44e918.  v1:= 0I;
  #L44e91a.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44e920.  v1:= v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` @kind object;
  #L44e924.  call temp:= `get`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e92a.  v1:= temp @kind object;
  #L44e92c.  call `lazySet`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor$Node;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44e932.  v2.`io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$Node` := v0 @kind object;
  #L44e936.  return @kind void;
}
