record `io.reactivex.processors.PublishProcessor$PublishSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @AccessFlag FINAL;
  `io.reactivex.processors.PublishProcessor` `io.reactivex.processors.PublishProcessor$PublishSubscription.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.PublishProcessor$PublishSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.PublishProcessor` v2 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/PublishProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44da70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44da76.  v0.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44da7a.  v0.`io.reactivex.processors.PublishProcessor$PublishSubscription.parent` @type ^`io.reactivex.processors.PublishProcessor` := v2 @kind object;
  #L44da7e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44da90.  v0:= -9223372036854775808L;
  #L44da94.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.getAndSet:(J)J` @kind virtual;
  #L44da9a.  v2:= temp @kind wide;
  #L44da9c.  v4:= lcmp(v2, v0);
  #L44daa0.  if v4 == 0 then goto L44daae;
  #L44daa4.  v0:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.parent` @type ^`io.reactivex.processors.PublishProcessor` @kind object;
  #L44daa8.  call `remove`(v0, v5) @signature `Lio/reactivex/processors/PublishProcessor;.remove:(Lio/reactivex/processors/PublishProcessor$PublishSubscription;)V` @kind virtual;
  #L44daae.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44da18.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.get:()J` @kind virtual;
  #L44da1e.  v0:= temp @kind wide;
  #L44da20.  v2:= -9223372036854775808L;
  #L44da24.  v4:= lcmp(v0, v2);
  #L44da28.  if v4 != 0 then goto L44da30;
  #L44da2c.  v0:= 1I;
  #L44da2e.  goto L44da32;
  #L44da30.  v0:= 0I;
  #L44da32.  return v0;
}
procedure `boolean` `isFull`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.isFull:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44da44.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.get:()J` @kind virtual;
  #L44da4a.  v0:= temp @kind wide;
  #L44da4c.  v2:= 0L;
  #L44da50.  v4:= lcmp(v0, v2);
  #L44da54.  if v4 != 0 then goto L44da5c;
  #L44da58.  v0:= 1I;
  #L44da5a.  goto L44da5e;
  #L44da5c.  v0:= 0I;
  #L44da5e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44dac0.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.get:()J` @kind virtual;
  #L44dac6.  v0:= temp @kind wide;
  #L44dac8.  v2:= -9223372036854775808L;
  #L44dacc.  v4:= lcmp(v0, v2);
  #L44dad0.  if v4 == 0 then goto L44dade;
  #L44dad4.  v0:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44dad8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44dade.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44daf0.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.get:()J` @kind virtual;
  #L44daf6.  v0:= temp @kind wide;
  #L44daf8.  v2:= -9223372036854775808L;
  #L44dafc.  v4:= lcmp(v0, v2);
  #L44db00.  if v4 == 0 then goto L44db10;
  #L44db04.  v0:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44db08.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44db0e.  goto L44db16;
  #L44db10.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44db16.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44db28.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.get:()J` @kind virtual;
  #L44db2e.  v0:= temp @kind wide;
  #L44db30.  v2:= -9223372036854775808L;
  #L44db34.  v4:= lcmp(v0, v2);
  #L44db38.  if v4 != 0 then goto L44db3e;
  #L44db3c.  return @kind void;
  #L44db3e.  v2:= 0L;
  #L44db42.  v4:= lcmp(v0, v2);
  #L44db46.  if v4 == 0 then goto L44db60;
  #L44db4a.  v0:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44db4e.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44db54.  v0:= 1L;
  #L44db58.  call temp:= `producedCancel`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44db5e.  goto L44db7e;
  #L44db60.  call `cancel`(v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.cancel:()V` @kind virtual;
  #L44db66.  v6:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44db6a.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44db6e.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L44db72.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44db78.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44db7e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44db90.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44db96.  v0:= temp;
  #L44db98.  if v0 == 0 then goto L44dba2;
  #L44db9c.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44dba2.  return @kind void;
}
