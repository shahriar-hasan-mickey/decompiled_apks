record `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `boolean` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.emitting` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.fastPath` @AccessFlag ;
  `long` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.index` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.next` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @AccessFlag ;
  `io.reactivex.processors.BehaviorProcessor` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.state` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.BehaviorProcessor` v2 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/BehaviorProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44c748.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44c74e.  v0.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44c752.  v0.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.state` @type ^`io.reactivex.processors.BehaviorProcessor` := v2 @kind object;
  #L44c756.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c768.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44c76c.  if v0 != 0 then goto L44c780;
  #L44c770.  v0:= 1I;
  #L44c772.  v1.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L44c776.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.state` @type ^`io.reactivex.processors.BehaviorProcessor` @kind object;
  #L44c77a.  call `remove`(v0, v1) @signature `Lio/reactivex/processors/BehaviorProcessor;.remove:(Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;)V` @kind virtual;
  #L44c780.  return @kind void;
}
procedure `void` `emitFirst`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v4 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitFirst:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44c794.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44c798.  if v0 == 0 then goto L44c79e;
  #L44c79c.  return @kind void;
  #L44c79e.  @monitorenter v4
  #L44c7a0.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44c7a4.  if v0 == 0 then goto L44c7ac;
  #L44c7a8.  @monitorexit v4
  #L44c7aa.  return @kind void;
  #L44c7ac.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.next` @type ^`boolean` @kind boolean;
  #L44c7b0.  if v0 == 0 then goto L44c7b8;
  #L44c7b4.  @monitorexit v4
  #L44c7b6.  return @kind void;
  #L44c7b8.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.state` @type ^`io.reactivex.processors.BehaviorProcessor` @kind object;
  #L44c7bc.  v1:= v0.`io.reactivex.processors.BehaviorProcessor.readLock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L44c7c0.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L44c7c6.  v2:= v0.`io.reactivex.processors.BehaviorProcessor.index` @type ^`long` @kind wide;
  #L44c7ca.  v4.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.index` @type ^`long` := v2 @kind wide;
  #L44c7ce.  v0:= v0.`io.reactivex.processors.BehaviorProcessor.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c7d2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c7d8.  v0:= temp @kind object;
  #L44c7da.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L44c7e0.  v1:= 1I;
  #L44c7e2.  if v0 == 0 then goto L44c7ea;
  #L44c7e6.  v2:= 1I;
  #L44c7e8.  goto L44c7ec;
  #L44c7ea.  v2:= 0I;
  #L44c7ec.  v4.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.emitting` @type ^`boolean` := v2 @kind boolean;
  #L44c7f0.  v4.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.next` @type ^`boolean` := v1 @kind boolean;
  #L44c7f4.  @monitorexit v4
  #L44c7f6.  if v0 == 0 then goto L44c80e;
  #L44c7fa.  call temp:= `test`(v4, v0) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L44c800.  v0:= temp;
  #L44c802.  if v0 == 0 then goto L44c808;
  #L44c806.  return @kind void;
  #L44c808.  call `emitLoop`(v4) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitLoop:()V` @kind virtual;
  #L44c80e.  return @kind void;
  #L44c810.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44c812.  @monitorexit v4
  #L44c814.  throw v0;
  catch `java.lang.Throwable` @[L44c7a0..L44c7f6] goto L44c810;
  catch `java.lang.Throwable` @[L44c812..L44c814] goto L44c810;
}
procedure `void` `emitLoop`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44c83c.  v0:= v2.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44c840.  if v0 == 0 then goto L44c846;
  #L44c844.  return @kind void;
  #L44c846.  @monitorenter v2
  #L44c848.  v0:= v2.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L44c84c.  if v0 != 0 then goto L44c85a;
  #L44c850.  v0:= 0I;
  #L44c852.  v2.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.emitting` @type ^`boolean` := v0 @kind boolean;
  #L44c856.  @monitorexit v2
  #L44c858.  return @kind void;
  #L44c85a.  v1:= 0I;
  #L44c85c.  v2.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L44c860.  @monitorexit v2
  #L44c862.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L44c868.  goto L44c83c;
  #L44c86a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44c86c.  @monitorexit v2
  #L44c86e.  goto L44c872;
  #L44c870.  throw v0;
  #L44c872.  goto L44c870;
  catch `java.lang.Throwable` @[L44c848..L44c862] goto L44c86a;
  catch `java.lang.Throwable` @[L44c86c..L44c86e] goto L44c86a;
}
procedure `void` `emitNext`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitNext:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L44c898.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44c89c.  if v0 == 0 then goto L44c8a2;
  #L44c8a0.  return @kind void;
  #L44c8a2.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.fastPath` @type ^`boolean` @kind boolean;
  #L44c8a6.  if v0 != 0 then goto L44c906;
  #L44c8aa.  @monitorenter v3
  #L44c8ac.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44c8b0.  if v0 == 0 then goto L44c8b8;
  #L44c8b4.  @monitorexit v3
  #L44c8b6.  return @kind void;
  #L44c8b8.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.index` @type ^`long` @kind wide;
  #L44c8bc.  v2:= lcmp(v0, v5);
  #L44c8c0.  if v2 != 0 then goto L44c8c8;
  #L44c8c4.  @monitorexit v3
  #L44c8c6.  return @kind void;
  #L44c8c8.  v5:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.emitting` @type ^`boolean` @kind boolean;
  #L44c8cc.  if v5 == 0 then goto L44c8f2;
  #L44c8d0.  v5:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L44c8d4.  if v5 != 0 then goto L44c8e8;
  #L44c8d8.  v5:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L44c8dc.  v6:= 4I;
  #L44c8de.  call `<init>`(v5, v6) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L44c8e4.  v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v5 @kind object;
  #L44c8e8.  call `add`(v5, v4) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L44c8ee.  @monitorexit v3
  #L44c8f0.  return @kind void;
  #L44c8f2.  v5:= 1I;
  #L44c8f4.  v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.next` @type ^`boolean` := v5 @kind boolean;
  #L44c8f8.  @monitorexit v3
  #L44c8fa.  v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.fastPath` @type ^`boolean` := v5 @kind boolean;
  #L44c8fe.  goto L44c906;
  #L44c900.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44c902.  @monitorexit v3
  #L44c904.  throw v4;
  #L44c906.  call temp:= `test`(v3, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L44c90c.  return @kind void;
  catch `java.lang.Throwable` @[L44c8ac..L44c8fa] goto L44c900;
  catch `java.lang.Throwable` @[L44c902..L44c904] goto L44c900;
}
procedure `boolean` `isFull`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v5 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.isFull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44c664.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.get:()J` @kind virtual;
  #L44c66a.  v0:= temp @kind wide;
  #L44c66c.  v2:= 0L;
  #L44c670.  v4:= lcmp(v0, v2);
  #L44c674.  if v4 != 0 then goto L44c67c;
  #L44c678.  v0:= 1I;
  #L44c67a.  goto L44c67e;
  #L44c67c.  v0:= 0I;
  #L44c67e.  return v0;
}
procedure `void` `request`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c934.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44c93a.  v0:= temp;
  #L44c93c.  if v0 == 0 then goto L44c946;
  #L44c940.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44c946.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44c690.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44c694.  v1:= 1I;
  #L44c696.  if v0 == 0 then goto L44c69c;
  #L44c69a.  return v1;
  #L44c69c.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L44c6a2.  v0:= temp;
  #L44c6a4.  if v0 == 0 then goto L44c6b4;
  #L44c6a8.  v7:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c6ac.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c6b2.  return v1;
  #L44c6b4.  call temp:= `isError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L44c6ba.  v0:= temp;
  #L44c6bc.  if v0 == 0 then goto L44c6d4;
  #L44c6c0.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c6c4.  call temp:= `getError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L44c6ca.  v7:= temp @kind object;
  #L44c6cc.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c6d2.  return v1;
  #L44c6d4.  call temp:= `get`(v6) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.get:()J` @kind virtual;
  #L44c6da.  v2:= temp @kind wide;
  #L44c6dc.  v4:= 0L;
  #L44c6e0.  v0:= lcmp(v2, v4);
  #L44c6e4.  if v0 == 0 then goto L44c716;
  #L44c6e8.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c6ec.  call temp:= `getValue`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44c6f2.  v7:= temp @kind object;
  #L44c6f4.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44c6fa.  v0:= 9223372036854775807L;
  #L44c704.  v7:= lcmp(v2, v0);
  #L44c708.  if v7 == 0 then goto L44c712;
  #L44c70c.  call temp:= `decrementAndGet`(v6) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.decrementAndGet:()J` @kind virtual;
  #L44c712.  v7:= 0I;
  #L44c714.  return v7;
  #L44c716.  call `cancel`(v6) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.cancel:()V` @kind virtual;
  #L44c71c.  v7:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c720.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44c724.  v2:= "Could not deliver value due to lack of requests" @kind object;
  #L44c728.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c72e.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c734.  return v1;
}
