record `io.reactivex.processors.ReplayProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `io.reactivex.processors.ReplayProcessor$ReplayBuffer` `io.reactivex.processors.ReplayProcessor.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.ReplayProcessor.done` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.ReplayProcessor.subscribers` @AccessFlag FINAL;
}
global `io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] `@@io.reactivex.processors.ReplayProcessor.EMPTY` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@io.reactivex.processors.ReplayProcessor.EMPTY_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] `@@io.reactivex.processors.ReplayProcessor.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/ReplayProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44ef28.  v0:= 0I;
  #L44ef2a.  v1:= new `java.lang.Object`[v0];
  #L44ef2e.  `@@io.reactivex.processors.ReplayProcessor.EMPTY_ARRAY` @type ^`java.lang.Object`[] := v1 @kind object;
  #L44ef32.  v1:= new `io.reactivex.processors.ReplayProcessor$ReplaySubscription`[v0];
  #L44ef36.  `@@io.reactivex.processors.ReplayProcessor.EMPTY` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] := v1 @kind object;
  #L44ef3a.  v0:= new `io.reactivex.processors.ReplayProcessor$ReplaySubscription`[v0];
  #L44ef3e.  `@@io.reactivex.processors.ReplayProcessor.TERMINATED` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] := v0 @kind object;
  #L44ef42.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `io.reactivex.processors.ReplayProcessor$ReplayBuffer` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44ef54.  call `<init>`(v1) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L44ef5a.  v1.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` := v2 @kind object;
  #L44ef5e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44ef62.  v0:= `@@io.reactivex.processors.ReplayProcessor.EMPTY` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] @kind object;
  #L44ef66.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44ef6c.  v1.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L44ef70.  return @kind void;
}
procedure `io.reactivex.processors.ReplayProcessor` `create`() @signature `Lio/reactivex/processors/ReplayProcessor;.create:()Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L44ed7c.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L44ed80.  v1:= new `io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer`;
  #L44ed84.  v2:= 16I;
  #L44ed88.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.<init>:(I)V` @kind direct;
  #L44ed8e.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;)V` @kind direct;
  #L44ed94.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `create`(`int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor;.create:(I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44eda8.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L44edac.  v1:= new `io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer`;
  #L44edb0.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.<init>:(I)V` @kind direct;
  #L44edb6.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;)V` @kind direct;
  #L44edbc.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createUnbounded`() @signature `Lio/reactivex/processors/ReplayProcessor;.createUnbounded:()Lio/reactivex/processors/ReplayProcessor;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L44edd0.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L44edd4.  v1:= new `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer`;
  #L44edd8.  v2:= 2147483647I;
  #L44edde.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L44ede4.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;)V` @kind direct;
  #L44edea.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithSize:(I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44edfc.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L44ee00.  v1:= new `io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer`;
  #L44ee04.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L44ee0a.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;)V` @kind direct;
  #L44ee10.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L44ee24.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L44ee28.  v7:= new `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer`;
  #L44ee2c.  v2:= 2147483647I;
  #L44ee32.  v1:= v7 @kind object;
  #L44ee34.  v3:= v8 @kind wide;
  #L44ee36.  v5:= v10 @kind object;
  #L44ee38.  v6:= v11 @kind object;
  #L44ee3a.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L44ee40.  call `<init>`(v0, v7) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;)V` @kind direct;
  #L44ee46.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L44ee58.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L44ee5c.  v7:= new `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer`;
  #L44ee60.  v1:= v7 @kind object;
  #L44ee62.  v2:= v12;
  #L44ee64.  v3:= v8 @kind wide;
  #L44ee66.  v5:= v10 @kind object;
  #L44ee68.  v6:= v11 @kind object;
  #L44ee6a.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L44ee70.  call `<init>`(v0, v7) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;)V` @kind direct;
  #L44ee76.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `io.reactivex.processors.ReplayProcessor$ReplaySubscription` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.add:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44ec24.  v0:= v4.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ec28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ec2e.  v0:= temp @kind object;
  #L44ec30.  v0:= (`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[]) v0 @kind object;
  #L44ec34.  v1:= `@@io.reactivex.processors.ReplayProcessor.TERMINATED` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] @kind object;
  #L44ec38.  v2:= 0I;
  #L44ec3a.  if v0 != v1 then goto L44ec40;
  #L44ec3e.  return v2;
  #L44ec40.  v1:= length @variable v0;
  #L44ec42.  v3:= v1 + 1;
  #L44ec46.  v3:= new `io.reactivex.processors.ReplayProcessor$ReplaySubscription`[v3];
  #L44ec4a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44ec50.  v3[v1]:= v5 @kind object;
  #L44ec54.  v1:= v4.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ec58.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44ec5e.  v0:= temp;
  #L44ec60.  if v0 == 0 then goto L44ec24;
  #L44ec64.  v5:= 1I;
  #L44ec66.  return v5;
}
procedure `void` `cleanupBuffer`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.cleanupBuffer:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ef84.  v0:= v1.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44ef88.  call `trimHead`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.trimHead:()V` @kind interface;
  #L44ef8e.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44eef8.  v0:= v2.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44eefc.  call temp:= `isDone`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.isDone:()Z` @kind interface;
  #L44ef02.  v1:= temp;
  #L44ef04.  if v1 == 0 then goto L44ef12;
  #L44ef08.  call temp:= `getError`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.getError:()Ljava/lang/Throwable;` @kind interface;
  #L44ef0e.  v0:= temp @kind object;
  #L44ef10.  return v0 @kind object;
  #L44ef12.  v0:= 0I;
  #L44ef14.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ee88.  v0:= v1.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44ee8c.  call temp:= `getValue`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.getValue:()Ljava/lang/Object;` @kind interface;
  #L44ee92.  v0:= temp @kind object;
  #L44ee94.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44eea8.  v0:= `@@io.reactivex.processors.ReplayProcessor.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L44eeac.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L44eeb0.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L44eeb6.  v0:= temp @kind object;
  #L44eeb8.  v1:= `@@io.reactivex.processors.ReplayProcessor.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L44eebc.  if v0 != v1 then goto L44eec6;
  #L44eec0.  v0:= 0I;
  #L44eec2.  v0:= new `java.lang.Object`[v0];
  #L44eec6.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44eed8.  v0:= v1.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44eedc.  call temp:= `getValues`(v0, v2) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L44eee2.  v2:= temp @kind object;
  #L44eee4.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ec78.  v0:= v2.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44ec7c.  call temp:= `isDone`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.isDone:()Z` @kind interface;
  #L44ec82.  v1:= temp;
  #L44ec84.  if v1 == 0 then goto L44ec98;
  #L44ec88.  call temp:= `getError`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.getError:()Ljava/lang/Throwable;` @kind interface;
  #L44ec8e.  v0:= temp @kind object;
  #L44ec90.  if v0 != 0 then goto L44ec98;
  #L44ec94.  v0:= 1I;
  #L44ec96.  goto L44ec9a;
  #L44ec98.  v0:= 0I;
  #L44ec9a.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ecac.  v0:= v1.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ecb0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ecb6.  v0:= temp @kind object;
  #L44ecb8.  v0:= (`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[]) v0 @kind object;
  #L44ecbc.  v0:= length @variable v0;
  #L44ecbe.  if v0 == 0 then goto L44ecc6;
  #L44ecc2.  v0:= 1I;
  #L44ecc4.  goto L44ecc8;
  #L44ecc6.  v0:= 0I;
  #L44ecc8.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ecdc.  v0:= v2.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44ece0.  call temp:= `isDone`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.isDone:()Z` @kind interface;
  #L44ece6.  v1:= temp;
  #L44ece8.  if v1 == 0 then goto L44ecfc;
  #L44ecec.  call temp:= `getError`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.getError:()Ljava/lang/Throwable;` @kind interface;
  #L44ecf2.  v0:= temp @kind object;
  #L44ecf4.  if v0 == 0 then goto L44ecfc;
  #L44ecf8.  v0:= 1I;
  #L44ecfa.  goto L44ecfe;
  #L44ecfc.  v0:= 0I;
  #L44ecfe.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ed10.  v0:= v1.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44ed14.  call temp:= `size`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.size:()I` @kind interface;
  #L44ed1a.  v0:= temp;
  #L44ed1c.  if v0 == 0 then goto L44ed24;
  #L44ed20.  v0:= 1I;
  #L44ed22.  goto L44ed26;
  #L44ed24.  v0:= 0I;
  #L44ed26.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.ReplayProcessor` v5 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44efa0.  v0:= v5.`io.reactivex.processors.ReplayProcessor.done` @type ^`boolean` @kind boolean;
  #L44efa4.  if v0 == 0 then goto L44efaa;
  #L44efa8.  return @kind void;
  #L44efaa.  v0:= 1I;
  #L44efac.  v5.`io.reactivex.processors.ReplayProcessor.done` @type ^`boolean` := v0 @kind boolean;
  #L44efb0.  v0:= v5.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44efb4.  call `complete`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.complete:()V` @kind interface;
  #L44efba.  v1:= v5.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44efbe.  v2:= `@@io.reactivex.processors.ReplayProcessor.TERMINATED` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] @kind object;
  #L44efc2.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44efc8.  v1:= temp @kind object;
  #L44efca.  v1:= (`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[]) v1 @kind object;
  #L44efce.  v2:= length @variable v1;
  #L44efd0.  v3:= 0I;
  #L44efd2.  if v3 >= v2 then goto L44efe6;
  #L44efd6.  v4:= v1[v3] @kind object;
  #L44efda.  call `replay`(v0, v4) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @kind interface;
  #L44efe0.  v3:= v3 + 1;
  #L44efe4.  goto L44efd2;
  #L44efe6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44eff8.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44effc.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44f002.  v0:= v4.`io.reactivex.processors.ReplayProcessor.done` @type ^`boolean` @kind boolean;
  #L44f006.  if v0 == 0 then goto L44f012;
  #L44f00a.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44f010.  return @kind void;
  #L44f012.  v0:= 1I;
  #L44f014.  v4.`io.reactivex.processors.ReplayProcessor.done` @type ^`boolean` := v0 @kind boolean;
  #L44f018.  v0:= v4.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44f01c.  call `error`(v0, v5) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.error:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f022.  v5:= v4.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f026.  v1:= `@@io.reactivex.processors.ReplayProcessor.TERMINATED` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] @kind object;
  #L44f02a.  call temp:= `getAndSet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44f030.  v5:= temp @kind object;
  #L44f032.  v5:= (`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[]) v5 @kind object;
  #L44f036.  v1:= length @variable v5;
  #L44f038.  v2:= 0I;
  #L44f03a.  if v2 >= v1 then goto L44f04e;
  #L44f03e.  v3:= v5[v2] @kind object;
  #L44f042.  call `replay`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @kind interface;
  #L44f048.  v2:= v2 + 1;
  #L44f04c.  goto L44f03a;
  #L44f04e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44f060.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44f064.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44f06a.  v0:= v4.`io.reactivex.processors.ReplayProcessor.done` @type ^`boolean` @kind boolean;
  #L44f06e.  if v0 == 0 then goto L44f074;
  #L44f072.  return @kind void;
  #L44f074.  v0:= v4.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44f078.  call `next`(v0, v5) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.next:(Ljava/lang/Object;)V` @kind interface;
  #L44f07e.  v5:= v4.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f082.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44f088.  v5:= temp @kind object;
  #L44f08a.  v5:= (`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[]) v5 @kind object;
  #L44f08e.  v1:= length @variable v5;
  #L44f090.  v2:= 0I;
  #L44f092.  if v2 >= v1 then goto L44f0a6;
  #L44f096.  v3:= v5[v2] @kind object;
  #L44f09a.  call `replay`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @kind interface;
  #L44f0a0.  v2:= v2 + 1;
  #L44f0a4.  goto L44f092;
  #L44f0a6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.ReplayProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f0b8.  v0:= v2.`io.reactivex.processors.ReplayProcessor.done` @type ^`boolean` @kind boolean;
  #L44f0bc.  if v0 == 0 then goto L44f0c8;
  #L44f0c0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44f0c6.  return @kind void;
  #L44f0c8.  v0:= 9223372036854775807L;
  #L44f0d2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44f0d8.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.processors.ReplayProcessor` v6 @kind this, `io.reactivex.processors.ReplayProcessor$ReplaySubscription` v7 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.remove:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44f0ec.  v0:= v6.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f0f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44f0f6.  v0:= temp @kind object;
  #L44f0f8.  v0:= (`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[]) v0 @kind object;
  #L44f0fc.  v1:= `@@io.reactivex.processors.ReplayProcessor.TERMINATED` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] @kind object;
  #L44f100.  if v0 == v1 then goto L44f16c;
  #L44f104.  v1:= `@@io.reactivex.processors.ReplayProcessor.EMPTY` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] @kind object;
  #L44f108.  if v0 != v1 then goto L44f10e;
  #L44f10c.  goto L44f16c;
  #L44f10e.  v1:= length @variable v0;
  #L44f110.  v2:= -1I;
  #L44f112.  v3:= 0I;
  #L44f114.  v4:= 0I;
  #L44f116.  if v4 >= v1 then goto L44f12c;
  #L44f11a.  v5:= v0[v4] @kind object;
  #L44f11e.  if v5 != v7 then goto L44f126;
  #L44f122.  v2:= v4;
  #L44f124.  goto L44f12c;
  #L44f126.  v4:= v4 + 1;
  #L44f12a.  goto L44f116;
  #L44f12c.  if v2 >= 0 then goto L44f132;
  #L44f130.  return @kind void;
  #L44f132.  v4:= 1I;
  #L44f134.  if v1 != v4 then goto L44f13e;
  #L44f138.  v1:= `@@io.reactivex.processors.ReplayProcessor.EMPTY` @type ^`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[] @kind object;
  #L44f13c.  goto L44f15c;
  #L44f13e.  v5:= v1 + -1;
  #L44f142.  v5:= new `io.reactivex.processors.ReplayProcessor$ReplaySubscription`[v5];
  #L44f146.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44f14c.  v3:= v2 + 1;
  #L44f150.  v1:= v1 - v2 @kind int;
  #L44f152.  v1:= v1 - v4 @kind int;
  #L44f154.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44f15a.  v1:= v5 @kind object;
  #L44f15c.  v2:= v6.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f160.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44f166.  v0:= temp;
  #L44f168.  if v0 == 0 then goto L44f0ec;
  #L44f16c.  return @kind void;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L44ed38.  v0:= v1.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44ed3c.  call temp:= `size`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.size:()I` @kind interface;
  #L44ed42.  v0:= temp;
  #L44ed44.  return v0;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L44f180.  v0:= new `io.reactivex.processors.ReplayProcessor$ReplaySubscription`;
  #L44f184.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/ReplayProcessor;)V` @kind direct;
  #L44f18a.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44f190.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.add:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)Z` @kind virtual;
  #L44f196.  v2:= temp;
  #L44f198.  if v2 == 0 then goto L44f1ac;
  #L44f19c.  v2:= v0.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44f1a0.  if v2 == 0 then goto L44f1ac;
  #L44f1a4.  call `remove`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.remove:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @kind virtual;
  #L44f1aa.  return @kind void;
  #L44f1ac.  v2:= v1.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44f1b0.  call `replay`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @kind interface;
  #L44f1b6.  return @kind void;
}
procedure `int` `subscriberCount`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.subscriberCount:()I` @AccessFlag  {
    temp;
    v0;

  #L44ed58.  v0:= v1.`io.reactivex.processors.ReplayProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ed5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ed62.  v0:= temp @kind object;
  #L44ed64.  v0:= (`io.reactivex.processors.ReplayProcessor$ReplaySubscription`[]) v0 @kind object;
  #L44ed68.  v0:= length @variable v0;
  #L44ed6a.  return v0;
}
