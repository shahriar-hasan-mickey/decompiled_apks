record `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind interface {
  `boolean` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.error` @AccessFlag ;
  `io.reactivex.processors.ReplayProcessor$TimedNode` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @AccessFlag VOLATILE;
  `long` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxAge` @AccessFlag FINAL;
  `int` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxSize` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
  `int` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.size` @AccessFlag ;
  `io.reactivex.processors.ReplayProcessor$TimedNode` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.tail` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v1 @kind this, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44e24c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44e252.  v0:= "maxSize" @kind object;
  #L44e256.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44e25c.  v2:= temp;
  #L44e25e.  v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxSize` @type ^`int` := v2;
  #L44e262.  v2:= "maxAge" @kind object;
  #L44e266.  call temp:= `verifyPositive`(v3, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L44e26c.  v2:= temp @kind wide;
  #L44e26e.  v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` := v2 @kind wide;
  #L44e272.  v2:= "unit is null" @kind object;
  #L44e276.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44e27c.  v2:= temp @kind object;
  #L44e27e.  v2:= (`java.util.concurrent.TimeUnit`) v2 @kind object;
  #L44e282.  v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L44e286.  v2:= "scheduler is null" @kind object;
  #L44e28a.  call temp:= `requireNonNull`(v6, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44e290.  v2:= temp @kind object;
  #L44e292.  v2:= (`io.reactivex.Scheduler`) v2 @kind object;
  #L44e296.  v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L44e29a.  v2:= new `io.reactivex.processors.ReplayProcessor$TimedNode`;
  #L44e29e.  v3:= 0I;
  #L44e2a0.  v4:= 0L;
  #L44e2a4.  call `<init>`(v2, v3, v4) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L44e2aa.  v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v2 @kind object;
  #L44e2ae.  v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v2 @kind object;
  #L44e2b2.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e2c4.  call `trimFinal`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.trimFinal:()V` @kind virtual;
  #L44e2ca.  v0:= 1I;
  #L44e2cc.  v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` := v0 @kind boolean;
  #L44e2d0.  return @kind void;
}
procedure `void` `error`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L44e2e4.  call `trimFinal`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.trimFinal:()V` @kind virtual;
  #L44e2ea.  v0.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L44e2ee.  v1:= 1I;
  #L44e2f0.  v0.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` := v1 @kind boolean;
  #L44e2f4.  return @kind void;
}
procedure `java.lang.Throwable` `getError`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.getError:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e234.  v0:= v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44e238.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor$TimedNode` `getHead`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/processors/ReplayProcessor$TimedNode;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L44e0fc.  v0:= v8.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` @kind object;
  #L44e100.  v1:= v8.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L44e104.  v2:= v8.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44e108.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44e10e.  v1:= temp @kind wide;
  #L44e110.  v3:= v8.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L44e114.  v1:= v1 - v3 @kind long;
  #L44e116.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e11c.  v3:= temp @kind object;
  #L44e11e.  v3:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v3 @kind object;
  #L44e122.  v7:= v3 @kind object;
  #L44e124.  v3:= v0 @kind object;
  #L44e126.  v0:= v7 @kind object;
  #L44e128.  if v0 == 0 then goto L44e148;
  #L44e12c.  v4:= v0.`io.reactivex.processors.ReplayProcessor$TimedNode.time` @type ^`long` @kind wide;
  #L44e130.  v6:= lcmp(v4, v1);
  #L44e134.  if v6 <= 0 then goto L44e13a;
  #L44e138.  goto L44e148;
  #L44e13a.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e140.  v3:= temp @kind object;
  #L44e142.  v3:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v3 @kind object;
  #L44e146.  goto L44e122;
  #L44e148.  return v3 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v6 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44e15c.  v0:= v6.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` @kind object;
  #L44e160.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e166.  v1:= temp @kind object;
  #L44e168.  v1:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v1 @kind object;
  #L44e16c.  if v1 != 0 then goto L44e19c;
  #L44e170.  v1:= v6.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L44e174.  v2:= v6.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44e178.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44e17e.  v1:= temp @kind wide;
  #L44e180.  v3:= v6.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L44e184.  v1:= v1 - v3 @kind long;
  #L44e186.  v3:= v0.`io.reactivex.processors.ReplayProcessor$TimedNode.time` @type ^`long` @kind wide;
  #L44e18a.  v5:= lcmp(v3, v1);
  #L44e18e.  if v5 >= 0 then goto L44e196;
  #L44e192.  v0:= 0I;
  #L44e194.  return v0 @kind object;
  #L44e196.  v0:= v0.`io.reactivex.processors.ReplayProcessor$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L44e19a.  return v0 @kind object;
  #L44e19c.  v0:= v1 @kind object;
  #L44e19e.  goto L44e160;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44e1b0.  call temp:= `getHead`(v5) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/processors/ReplayProcessor$TimedNode;` @kind virtual;
  #L44e1b6.  v0:= temp @kind object;
  #L44e1b8.  call temp:= `size`(v5, v0) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/processors/ReplayProcessor$TimedNode;)I` @kind virtual;
  #L44e1be.  v1:= temp;
  #L44e1c0.  v2:= 0I;
  #L44e1c2.  v3:= 0I;
  #L44e1c4.  if v1 != 0 then goto L44e1d4;
  #L44e1c8.  v0:= length @variable v6;
  #L44e1ca.  if v0 == 0 then goto L44e222;
  #L44e1ce.  v6[v3]:= v2 @kind object;
  #L44e1d2.  goto L44e222;
  #L44e1d4.  v4:= length @variable v6;
  #L44e1d6.  if v4 >= v1 then goto L44e1fa;
  #L44e1da.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L44e1e0.  v6:= temp @kind object;
  #L44e1e2.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L44e1e8.  v6:= temp @kind object;
  #L44e1ea.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L44e1f0.  v6:= temp @kind object;
  #L44e1f2.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L44e1f6.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L44e1fa.  if v3 == v1 then goto L44e218;
  #L44e1fe.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e204.  v0:= temp @kind object;
  #L44e206.  v0:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v0 @kind object;
  #L44e20a.  v4:= v0.`io.reactivex.processors.ReplayProcessor$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L44e20e.  v6[v3]:= v4 @kind object;
  #L44e212.  v3:= v3 + 1;
  #L44e216.  goto L44e1fa;
  #L44e218.  v0:= length @variable v6;
  #L44e21a.  if v0 <= v1 then goto L44e222;
  #L44e21e.  v6[v1]:= v2 @kind object;
  #L44e222.  return v6 @kind object;
}
procedure `boolean` `isDone`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e088.  v0:= v1.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44e08c.  return v0;
}
procedure `void` `next`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44e308.  v0:= new `io.reactivex.processors.ReplayProcessor$TimedNode`;
  #L44e30c.  v1:= v3.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L44e310.  v2:= v3.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44e314.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44e31a.  v1:= temp @kind wide;
  #L44e31c.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L44e322.  v4:= v3.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` @kind object;
  #L44e326.  v3.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v0 @kind object;
  #L44e32a.  v1:= v3.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L44e32e.  v1:= v1 + 1;
  #L44e332.  v3.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v1;
  #L44e336.  call `set`(v4, v0) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L44e33c.  call `trim`(v3) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.trim:()V` @kind virtual;
  #L44e342.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v12 @kind this, `io.reactivex.processors.ReplayProcessor$ReplaySubscription` v13 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L44e354.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.getAndIncrement:()I` @kind virtual;
  #L44e35a.  v0:= temp;
  #L44e35c.  if v0 == 0 then goto L44e362;
  #L44e360.  return @kind void;
  #L44e362.  v0:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e366.  v1:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` @kind object;
  #L44e36a.  v1:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v1 @kind object;
  #L44e36e.  if v1 != 0 then goto L44e37a;
  #L44e372.  call temp:= `getHead`(v12) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/processors/ReplayProcessor$TimedNode;` @kind virtual;
  #L44e378.  v1:= temp @kind object;
  #L44e37a.  v2:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.emitted` @type ^`long` @kind wide;
  #L44e37e.  v4:= 1I;
  #L44e380.  v5:= 1I;
  #L44e382.  v6:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e386.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44e38c.  v6:= temp @kind wide;
  #L44e38e.  v8:= 0I;
  #L44e390.  v9:= lcmp(v2, v6);
  #L44e394.  if v9 == 0 then goto L44e402;
  #L44e398.  v9:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44e39c.  if v9 == 0 then goto L44e3a6;
  #L44e3a0.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v8 @kind object;
  #L44e3a4.  return @kind void;
  #L44e3a6.  v9:= v12.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44e3aa.  call temp:= `get`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e3b0.  v10:= temp @kind object;
  #L44e3b2.  v10:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v10 @kind object;
  #L44e3b6.  if v10 != 0 then goto L44e3be;
  #L44e3ba.  v11:= 1I;
  #L44e3bc.  goto L44e3c0;
  #L44e3be.  v11:= 0I;
  #L44e3c0.  if v9 == 0 then goto L44e3e8;
  #L44e3c4.  if v11 == 0 then goto L44e3e8;
  #L44e3c8.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v8 @kind object;
  #L44e3cc.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L44e3d0.  v13:= v12.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44e3d4.  if v13 != 0 then goto L44e3e0;
  #L44e3d8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e3de.  goto L44e3e6;
  #L44e3e0.  call `onError`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e3e6.  return @kind void;
  #L44e3e8.  if v11 == 0 then goto L44e3ee;
  #L44e3ec.  goto L44e402;
  #L44e3ee.  v1:= v10.`io.reactivex.processors.ReplayProcessor$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L44e3f2.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44e3f8.  v8:= 1L;
  #L44e3fc.  v2:= v2 + v8 @kind long;
  #L44e3fe.  v1:= v10 @kind object;
  #L44e400.  goto L44e38e;
  #L44e402.  v9:= lcmp(v2, v6);
  #L44e406.  if v9 != 0 then goto L44e44c;
  #L44e40a.  v6:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44e40e.  if v6 == 0 then goto L44e418;
  #L44e412.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v8 @kind object;
  #L44e416.  return @kind void;
  #L44e418.  v6:= v12.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44e41c.  if v6 == 0 then goto L44e44c;
  #L44e420.  call temp:= `get`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e426.  v6:= temp @kind object;
  #L44e428.  if v6 != 0 then goto L44e44c;
  #L44e42c.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v8 @kind object;
  #L44e430.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L44e434.  v13:= v12.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44e438.  if v13 != 0 then goto L44e444;
  #L44e43c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e442.  goto L44e44a;
  #L44e444.  call `onError`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e44a.  return @kind void;
  #L44e44c.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v1 @kind object;
  #L44e450.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.emitted` @type ^`long` := v2 @kind wide;
  #L44e454.  v5:= -v5 @kind int;
  #L44e456.  call temp:= `addAndGet`(v13, v5) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.addAndGet:(I)I` @kind virtual;
  #L44e45c.  v5:= temp;
  #L44e45e.  if v5 != 0 then goto L44e382;
  #L44e462.  return @kind void;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e0a0.  call temp:= `getHead`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/processors/ReplayProcessor$TimedNode;` @kind virtual;
  #L44e0a6.  v0:= temp @kind object;
  #L44e0a8.  call temp:= `size`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/processors/ReplayProcessor$TimedNode;)I` @kind virtual;
  #L44e0ae.  v0:= temp;
  #L44e0b0.  return v0;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v2 @kind this, `io.reactivex.processors.ReplayProcessor$TimedNode` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/processors/ReplayProcessor$TimedNode;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44e0c4.  v0:= 0I;
  #L44e0c6.  v1:= 2147483647I;
  #L44e0cc.  if v0 == v1 then goto L44e0e8;
  #L44e0d0.  call temp:= `get`(v3) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e0d6.  v3:= temp @kind object;
  #L44e0d8.  v3:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v3 @kind object;
  #L44e0dc.  if v3 != 0 then goto L44e0e2;
  #L44e0e0.  goto L44e0e8;
  #L44e0e2.  v0:= v0 + 1;
  #L44e0e6.  goto L44e0c6;
  #L44e0e8.  return v0;
}
procedure `void` `trim`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v7 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.trim:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44e474.  v0:= v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L44e478.  v1:= v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxSize` @type ^`int`;
  #L44e47c.  if v0 <= v1 then goto L44e49c;
  #L44e480.  v0:= v0 + -1;
  #L44e484.  v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v0;
  #L44e488.  v0:= v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` @kind object;
  #L44e48c.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e492.  v0:= temp @kind object;
  #L44e494.  v0:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v0 @kind object;
  #L44e498.  v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v0 @kind object;
  #L44e49c.  v0:= v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L44e4a0.  v1:= v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44e4a4.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44e4aa.  v0:= temp @kind wide;
  #L44e4ac.  v2:= v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L44e4b0.  v0:= v0 - v2 @kind long;
  #L44e4b2.  v2:= v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` @kind object;
  #L44e4b6.  call temp:= `get`(v2) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e4bc.  v3:= temp @kind object;
  #L44e4be.  v3:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v3 @kind object;
  #L44e4c2.  if v3 != 0 then goto L44e4cc;
  #L44e4c6.  v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v2 @kind object;
  #L44e4ca.  goto L44e4dc;
  #L44e4cc.  v4:= v3.`io.reactivex.processors.ReplayProcessor$TimedNode.time` @type ^`long` @kind wide;
  #L44e4d0.  v6:= lcmp(v4, v0);
  #L44e4d4.  if v6 <= 0 then goto L44e4de;
  #L44e4d8.  v7.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v2 @kind object;
  #L44e4dc.  return @kind void;
  #L44e4de.  v2:= v3 @kind object;
  #L44e4e0.  goto L44e4b6;
}
procedure `void` `trimFinal`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v10 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.trimFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L44e4f4.  v0:= v10.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L44e4f8.  v1:= v10.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44e4fc.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44e502.  v0:= temp @kind wide;
  #L44e504.  v2:= v10.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L44e508.  v0:= v0 - v2 @kind long;
  #L44e50a.  v2:= v10.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` @kind object;
  #L44e50e.  call temp:= `get`(v2) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e514.  v3:= temp @kind object;
  #L44e516.  v3:= (`io.reactivex.processors.ReplayProcessor$TimedNode`) v3 @kind object;
  #L44e51a.  v4:= 0L;
  #L44e51e.  v6:= 0I;
  #L44e520.  if v3 != 0 then goto L44e542;
  #L44e524.  v0:= v2.`io.reactivex.processors.ReplayProcessor$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L44e528.  if v0 == 0 then goto L44e53c;
  #L44e52c.  v0:= new `io.reactivex.processors.ReplayProcessor$TimedNode`;
  #L44e530.  call `<init>`(v0, v6, v4) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L44e536.  v10.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v0 @kind object;
  #L44e53a.  goto L44e578;
  #L44e53c.  v10.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v2 @kind object;
  #L44e540.  goto L44e578;
  #L44e542.  v7:= v3.`io.reactivex.processors.ReplayProcessor$TimedNode.time` @type ^`long` @kind wide;
  #L44e546.  v9:= lcmp(v7, v0);
  #L44e54a.  if v9 <= 0 then goto L44e57a;
  #L44e54e.  v0:= v2.`io.reactivex.processors.ReplayProcessor$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L44e552.  if v0 == 0 then goto L44e574;
  #L44e556.  v0:= new `io.reactivex.processors.ReplayProcessor$TimedNode`;
  #L44e55a.  call `<init>`(v0, v6, v4) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L44e560.  call temp:= `get`(v2) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e566.  v1:= temp @kind object;
  #L44e568.  call `lazySet`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44e56e.  v10.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v0 @kind object;
  #L44e572.  goto L44e578;
  #L44e574.  v10.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v2 @kind object;
  #L44e578.  return @kind void;
  #L44e57a.  v2:= v3 @kind object;
  #L44e57c.  goto L44e50e;
}
procedure `void` `trimHead`(`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer` v4 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$SizeAndTimeBoundReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44e590.  v0:= v4.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` @kind object;
  #L44e594.  v0:= v0.`io.reactivex.processors.ReplayProcessor$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L44e598.  if v0 == 0 then goto L44e5c2;
  #L44e59c.  v0:= new `io.reactivex.processors.ReplayProcessor$TimedNode`;
  #L44e5a0.  v1:= 0I;
  #L44e5a2.  v2:= 0L;
  #L44e5a6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L44e5ac.  v1:= v4.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` @kind object;
  #L44e5b0.  call temp:= `get`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e5b6.  v1:= temp @kind object;
  #L44e5b8.  call `lazySet`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor$TimedNode;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44e5be.  v4.`io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.processors.ReplayProcessor$TimedNode` := v0 @kind object;
  #L44e5c2.  return @kind void;
}
