record `io.reactivex.processors.AsyncProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `java.lang.Throwable` `io.reactivex.processors.AsyncProcessor.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.AsyncProcessor.subscribers` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.processors.AsyncProcessor.value` @AccessFlag ;
}
global `io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] `@@io.reactivex.processors.AsyncProcessor.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/AsyncProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44c3d0.  v0:= 0I;
  #L44c3d2.  v1:= new `io.reactivex.processors.AsyncProcessor$AsyncSubscription`[v0];
  #L44c3d6.  `@@io.reactivex.processors.AsyncProcessor.EMPTY` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] := v1 @kind object;
  #L44c3da.  v0:= new `io.reactivex.processors.AsyncProcessor$AsyncSubscription`[v0];
  #L44c3de.  `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] := v0 @kind object;
  #L44c3e2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44c3f4.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L44c3fa.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44c3fe.  v1:= `@@io.reactivex.processors.AsyncProcessor.EMPTY` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c402.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44c408.  v2.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44c40c.  return @kind void;
}
procedure `io.reactivex.processors.AsyncProcessor` `create`() @signature `Lio/reactivex/processors/AsyncProcessor;.create:()Lio/reactivex/processors/AsyncProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44c2d8.  v0:= new `io.reactivex.processors.AsyncProcessor`;
  #L44c2dc.  call `<init>`(v0) @signature `Lio/reactivex/processors/AsyncProcessor;.<init>:()V` @kind direct;
  #L44c2e2.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.processors.AsyncProcessor` v4 @kind this, `io.reactivex.processors.AsyncProcessor$AsyncSubscription` v5 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.add:(Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44c1b8.  v0:= v4.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c1bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c1c2.  v0:= temp @kind object;
  #L44c1c4.  v0:= (`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[]) v0 @kind object;
  #L44c1c8.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c1cc.  v2:= 0I;
  #L44c1ce.  if v0 != v1 then goto L44c1d4;
  #L44c1d2.  return v2;
  #L44c1d4.  v1:= length @variable v0;
  #L44c1d6.  v3:= v1 + 1;
  #L44c1da.  v3:= new `io.reactivex.processors.AsyncProcessor$AsyncSubscription`[v3];
  #L44c1de.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44c1e4.  v3[v1]:= v5 @kind object;
  #L44c1e8.  v1:= v4.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c1ec.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c1f2.  v0:= temp;
  #L44c1f4.  if v0 == 0 then goto L44c1b8;
  #L44c1f8.  v5:= 1I;
  #L44c1fa.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c3a0.  v0:= v2.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c3a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c3aa.  v0:= temp @kind object;
  #L44c3ac.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c3b0.  if v0 != v1 then goto L44c3ba;
  #L44c3b4.  v0:= v2.`io.reactivex.processors.AsyncProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44c3b8.  goto L44c3bc;
  #L44c3ba.  v0:= 0I;
  #L44c3bc.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c2f4.  v0:= v2.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c2f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c2fe.  v0:= temp @kind object;
  #L44c300.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c304.  if v0 != v1 then goto L44c30e;
  #L44c308.  v0:= v2.`io.reactivex.processors.AsyncProcessor.value` @type ^`java.lang.Object` @kind object;
  #L44c30c.  goto L44c310;
  #L44c30e.  v0:= 0I;
  #L44c310.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.AsyncProcessor` v3 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44c324.  call temp:= `getValue`(v3) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L44c32a.  v0:= temp @kind object;
  #L44c32c.  v1:= 0I;
  #L44c32e.  if v0 == 0 then goto L44c33e;
  #L44c332.  v2:= 1I;
  #L44c334.  v2:= new `java.lang.Object`[v2];
  #L44c338.  v2[v1]:= v0 @kind object;
  #L44c33c.  goto L44c342;
  #L44c33e.  v2:= new `java.lang.Object`[v1];
  #L44c342.  return v2 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.AsyncProcessor` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44c354.  call temp:= `getValue`(v5) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L44c35a.  v0:= temp @kind object;
  #L44c35c.  v1:= 0I;
  #L44c35e.  v2:= 0I;
  #L44c360.  if v0 != 0 then goto L44c370;
  #L44c364.  v0:= length @variable v6;
  #L44c366.  if v0 == 0 then goto L44c36e;
  #L44c36a.  v6[v2]:= v1 @kind object;
  #L44c36e.  return v6 @kind object;
  #L44c370.  v3:= length @variable v6;
  #L44c372.  v4:= 1I;
  #L44c374.  if v3 != 0 then goto L44c380;
  #L44c378.  call temp:= `copyOf`(v6, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L44c37e.  v6:= temp @kind object;
  #L44c380.  v6[v2]:= v0 @kind object;
  #L44c384.  v0:= length @variable v6;
  #L44c386.  if v0 == v4 then goto L44c38e;
  #L44c38a.  v6[v4]:= v1 @kind object;
  #L44c38e.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c20c.  v0:= v2.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c210.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c216.  v0:= temp @kind object;
  #L44c218.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c21c.  if v0 != v1 then goto L44c22c;
  #L44c220.  v0:= v2.`io.reactivex.processors.AsyncProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44c224.  if v0 != 0 then goto L44c22c;
  #L44c228.  v0:= 1I;
  #L44c22a.  goto L44c22e;
  #L44c22c.  v0:= 0I;
  #L44c22e.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.AsyncProcessor` v1 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c240.  v0:= v1.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c244.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c24a.  v0:= temp @kind object;
  #L44c24c.  v0:= (`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[]) v0 @kind object;
  #L44c250.  v0:= length @variable v0;
  #L44c252.  if v0 == 0 then goto L44c25a;
  #L44c256.  v0:= 1I;
  #L44c258.  goto L44c25c;
  #L44c25a.  v0:= 0I;
  #L44c25c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c270.  v0:= v2.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c274.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c27a.  v0:= temp @kind object;
  #L44c27c.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c280.  if v0 != v1 then goto L44c290;
  #L44c284.  v0:= v2.`io.reactivex.processors.AsyncProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44c288.  if v0 == 0 then goto L44c290;
  #L44c28c.  v0:= 1I;
  #L44c28e.  goto L44c292;
  #L44c290.  v0:= 0I;
  #L44c292.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c2a4.  v0:= v2.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c2a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c2ae.  v0:= temp @kind object;
  #L44c2b0.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c2b4.  if v0 != v1 then goto L44c2c4;
  #L44c2b8.  v0:= v2.`io.reactivex.processors.AsyncProcessor.value` @type ^`java.lang.Object` @kind object;
  #L44c2bc.  if v0 == 0 then goto L44c2c4;
  #L44c2c0.  v0:= 1I;
  #L44c2c2.  goto L44c2c6;
  #L44c2c4.  v0:= 0I;
  #L44c2c6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.AsyncProcessor` v5 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44c420.  v0:= v5.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c424.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c42a.  v0:= temp @kind object;
  #L44c42c.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c430.  if v0 != v1 then goto L44c436;
  #L44c434.  return @kind void;
  #L44c436.  v0:= v5.`io.reactivex.processors.AsyncProcessor.value` @type ^`java.lang.Object` @kind object;
  #L44c43a.  v2:= v5.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c43e.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44c444.  v1:= temp @kind object;
  #L44c446.  v1:= (`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[]) v1 @kind object;
  #L44c44a.  v2:= 0I;
  #L44c44c.  if v0 != 0 then goto L44c466;
  #L44c450.  v0:= length @variable v1;
  #L44c452.  if v2 >= v0 then goto L44c47c;
  #L44c456.  v3:= v1[v2] @kind object;
  #L44c45a.  call `onComplete`(v3) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.onComplete:()V` @kind virtual;
  #L44c460.  v2:= v2 + 1;
  #L44c464.  goto L44c452;
  #L44c466.  v3:= length @variable v1;
  #L44c468.  if v2 >= v3 then goto L44c47c;
  #L44c46c.  v4:= v1[v2] @kind object;
  #L44c470.  call `complete`(v4, v0) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L44c476.  v2:= v2 + 1;
  #L44c47a.  goto L44c468;
  #L44c47c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.AsyncProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44c490.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44c494.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44c49a.  v0:= v4.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c49e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c4a4.  v0:= temp @kind object;
  #L44c4a6.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c4aa.  if v0 != v1 then goto L44c4b6;
  #L44c4ae.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44c4b4.  return @kind void;
  #L44c4b6.  v0:= 0I;
  #L44c4b8.  v4.`io.reactivex.processors.AsyncProcessor.value` @type ^`java.lang.Object` := v0 @kind object;
  #L44c4bc.  v4.`io.reactivex.processors.AsyncProcessor.error` @type ^`java.lang.Throwable` := v5 @kind object;
  #L44c4c0.  v0:= v4.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c4c4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44c4ca.  v0:= temp @kind object;
  #L44c4cc.  v0:= (`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[]) v0 @kind object;
  #L44c4d0.  v1:= length @variable v0;
  #L44c4d2.  v2:= 0I;
  #L44c4d4.  if v2 >= v1 then goto L44c4e8;
  #L44c4d8.  v3:= v0[v2] @kind object;
  #L44c4dc.  call `onError`(v3, v5) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44c4e2.  v2:= v2 + 1;
  #L44c4e6.  goto L44c4d4;
  #L44c4e8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c4fc.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44c500.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44c506.  v0:= v2.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c50a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c510.  v0:= temp @kind object;
  #L44c512.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c516.  if v0 != v1 then goto L44c51c;
  #L44c51a.  return @kind void;
  #L44c51c.  v2.`io.reactivex.processors.AsyncProcessor.value` @type ^`java.lang.Object` := v3 @kind object;
  #L44c520.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c534.  v0:= v2.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c538.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c53e.  v0:= temp @kind object;
  #L44c540.  v1:= `@@io.reactivex.processors.AsyncProcessor.TERMINATED` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c544.  if v0 != v1 then goto L44c550;
  #L44c548.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44c54e.  return @kind void;
  #L44c550.  v0:= 9223372036854775807L;
  #L44c55a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44c560.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.processors.AsyncProcessor` v6 @kind this, `io.reactivex.processors.AsyncProcessor$AsyncSubscription` v7 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.remove:(Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44c574.  v0:= v6.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c578.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c57e.  v0:= temp @kind object;
  #L44c580.  v0:= (`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[]) v0 @kind object;
  #L44c584.  v1:= length @variable v0;
  #L44c586.  if v1 != 0 then goto L44c58c;
  #L44c58a.  return @kind void;
  #L44c58c.  v2:= -1I;
  #L44c58e.  v3:= 0I;
  #L44c590.  v4:= 0I;
  #L44c592.  if v4 >= v1 then goto L44c5a8;
  #L44c596.  v5:= v0[v4] @kind object;
  #L44c59a.  if v5 != v7 then goto L44c5a2;
  #L44c59e.  v2:= v4;
  #L44c5a0.  goto L44c5a8;
  #L44c5a2.  v4:= v4 + 1;
  #L44c5a6.  goto L44c592;
  #L44c5a8.  if v2 >= 0 then goto L44c5ae;
  #L44c5ac.  return @kind void;
  #L44c5ae.  v4:= 1I;
  #L44c5b0.  if v1 != v4 then goto L44c5ba;
  #L44c5b4.  v1:= `@@io.reactivex.processors.AsyncProcessor.EMPTY` @type ^`io.reactivex.processors.AsyncProcessor$AsyncSubscription`[] @kind object;
  #L44c5b8.  goto L44c5d8;
  #L44c5ba.  v5:= v1 + -1;
  #L44c5be.  v5:= new `io.reactivex.processors.AsyncProcessor$AsyncSubscription`[v5];
  #L44c5c2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44c5c8.  v3:= v2 + 1;
  #L44c5cc.  v1:= v1 - v2 @kind int;
  #L44c5ce.  v1:= v1 - v4 @kind int;
  #L44c5d0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44c5d6.  v1:= v5 @kind object;
  #L44c5d8.  v2:= v6.`io.reactivex.processors.AsyncProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c5dc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c5e2.  v0:= temp;
  #L44c5e4.  if v0 == 0 then goto L44c574;
  #L44c5e8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L44c5fc.  v0:= new `io.reactivex.processors.AsyncProcessor$AsyncSubscription`;
  #L44c600.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/AsyncProcessor;)V` @kind direct;
  #L44c606.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44c60c.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/processors/AsyncProcessor;.add:(Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;)Z` @kind virtual;
  #L44c612.  v1:= temp;
  #L44c614.  if v1 == 0 then goto L44c62c;
  #L44c618.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.isCancelled:()Z` @kind virtual;
  #L44c61e.  v3:= temp;
  #L44c620.  if v3 == 0 then goto L44c652;
  #L44c624.  call `remove`(v2, v0) @signature `Lio/reactivex/processors/AsyncProcessor;.remove:(Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;)V` @kind virtual;
  #L44c62a.  goto L44c652;
  #L44c62c.  v1:= v2.`io.reactivex.processors.AsyncProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44c630.  if v1 == 0 then goto L44c63c;
  #L44c634.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c63a.  goto L44c652;
  #L44c63c.  v3:= v2.`io.reactivex.processors.AsyncProcessor.value` @type ^`java.lang.Object` @kind object;
  #L44c640.  if v3 == 0 then goto L44c64c;
  #L44c644.  call `complete`(v0, v3) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L44c64a.  goto L44c652;
  #L44c64c.  call `onComplete`(v0) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.onComplete:()V` @kind virtual;
  #L44c652.  return @kind void;
}
