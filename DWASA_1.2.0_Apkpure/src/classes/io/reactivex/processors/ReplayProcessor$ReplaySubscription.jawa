record `io.reactivex.processors.ReplayProcessor$ReplaySubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.emitted` @AccessFlag ;
  `java.lang.Object` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @AccessFlag FINAL;
  `io.reactivex.processors.ReplayProcessor` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.state` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.ReplayProcessor$ReplaySubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$ReplaySubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.ReplayProcessor` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/ReplayProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44dff4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44dffa.  v0.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44dffe.  v0.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.state` @type ^`io.reactivex.processors.ReplayProcessor` := v2 @kind object;
  #L44e002.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44e006.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44e00c.  v0.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L44e010.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.ReplayProcessor$ReplaySubscription` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e024.  v0:= v1.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44e028.  if v0 != 0 then goto L44e03c;
  #L44e02c.  v0:= 1I;
  #L44e02e.  v1.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L44e032.  v0:= v1.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.state` @type ^`io.reactivex.processors.ReplayProcessor` @kind object;
  #L44e036.  call `remove`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.remove:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @kind virtual;
  #L44e03c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.processors.ReplayProcessor$ReplaySubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e050.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44e056.  v0:= temp;
  #L44e058.  if v0 == 0 then goto L44e074;
  #L44e05c.  v0:= v1.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e060.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44e066.  v2:= v1.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.state` @type ^`io.reactivex.processors.ReplayProcessor` @kind object;
  #L44e06a.  v2:= v2.`io.reactivex.processors.ReplayProcessor.buffer` @type ^`io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind object;
  #L44e06e.  call `replay`(v2, v1) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @kind interface;
  #L44e074.  return @kind void;
}
