record `io.reactivex.processors.MulticastProcessor$MulticastSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.processors.MulticastProcessor$MulticastSubscription.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.processors.MulticastProcessor$MulticastSubscription.emitted` @AccessFlag ;
  `io.reactivex.processors.MulticastProcessor` `io.reactivex.processors.MulticastProcessor$MulticastSubscription.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.MulticastProcessor$MulticastSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.MulticastProcessor$MulticastSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.MulticastProcessor` v2 @kind object) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/MulticastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44d080.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44d086.  v0.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44d08a.  v0.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.parent` @type ^`io.reactivex.processors.MulticastProcessor` := v2 @kind object;
  #L44d08e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.MulticastProcessor$MulticastSubscription` v5 @kind this) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44d0a0.  v0:= -9223372036854775808L;
  #L44d0a4.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.getAndSet:(J)J` @kind virtual;
  #L44d0aa.  v2:= temp @kind wide;
  #L44d0ac.  v4:= lcmp(v2, v0);
  #L44d0b0.  if v4 == 0 then goto L44d0be;
  #L44d0b4.  v0:= v5.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.parent` @type ^`io.reactivex.processors.MulticastProcessor` @kind object;
  #L44d0b8.  call `remove`(v0, v5) @signature `Lio/reactivex/processors/MulticastProcessor;.remove:(Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;)V` @kind virtual;
  #L44d0be.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.processors.MulticastProcessor$MulticastSubscription` v5 @kind this) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.onComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44d0d0.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.get:()J` @kind virtual;
  #L44d0d6.  v0:= temp @kind wide;
  #L44d0d8.  v2:= -9223372036854775808L;
  #L44d0dc.  v4:= lcmp(v0, v2);
  #L44d0e0.  if v4 == 0 then goto L44d0ee;
  #L44d0e4.  v0:= v5.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d0e8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44d0ee.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.MulticastProcessor$MulticastSubscription` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44d100.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.get:()J` @kind virtual;
  #L44d106.  v0:= temp @kind wide;
  #L44d108.  v2:= -9223372036854775808L;
  #L44d10c.  v4:= lcmp(v0, v2);
  #L44d110.  if v4 == 0 then goto L44d11e;
  #L44d114.  v0:= v5.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d118.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44d11e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.MulticastProcessor$MulticastSubscription` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.onNext:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44d130.  call temp:= `get`(v5) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.get:()J` @kind virtual;
  #L44d136.  v0:= temp @kind wide;
  #L44d138.  v2:= -9223372036854775808L;
  #L44d13c.  v4:= lcmp(v0, v2);
  #L44d140.  if v4 == 0 then goto L44d15c;
  #L44d144.  v0:= v5.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.emitted` @type ^`long` @kind wide;
  #L44d148.  v2:= 1L;
  #L44d14c.  v0:= v0 + v2 @kind long;
  #L44d14e.  v5.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.emitted` @type ^`long` := v0 @kind wide;
  #L44d152.  v0:= v5.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d156.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44d15c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.processors.MulticastProcessor$MulticastSubscription` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44d170.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44d176.  v0:= temp;
  #L44d178.  if v0 == 0 then goto L44d1ce;
  #L44d17c.  call temp:= `get`(v9) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.get:()J` @kind virtual;
  #L44d182.  v0:= temp @kind wide;
  #L44d184.  v2:= -9223372036854775808L;
  #L44d188.  v4:= lcmp(v0, v2);
  #L44d18c.  if v4 == 0 then goto L44d1ce;
  #L44d190.  v2:= 9223372036854775807L;
  #L44d19a.  v4:= lcmp(v0, v2);
  #L44d19e.  if v4 != 0 then goto L44d1a4;
  #L44d1a2.  goto L44d1ce;
  #L44d1a4.  v4:= v0 + v10 @kind long;
  #L44d1a8.  v6:= 0L;
  #L44d1ac.  v8:= lcmp(v4, v6);
  #L44d1b0.  if v8 >= 0 then goto L44d1b6;
  #L44d1b4.  goto L44d1b8;
  #L44d1b6.  v2:= v4 @kind wide;
  #L44d1b8.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Lio/reactivex/processors/MulticastProcessor$MulticastSubscription;.compareAndSet:(JJ)Z` @kind virtual;
  #L44d1be.  v0:= temp;
  #L44d1c0.  if v0 == 0 then goto L44d17c;
  #L44d1c4.  v10:= v9.`io.reactivex.processors.MulticastProcessor$MulticastSubscription.parent` @type ^`io.reactivex.processors.MulticastProcessor` @kind object;
  #L44d1c8.  call `drain`(v10) @signature `Lio/reactivex/processors/MulticastProcessor;.drain:()V` @kind virtual;
  #L44d1ce.  return @kind void;
}
