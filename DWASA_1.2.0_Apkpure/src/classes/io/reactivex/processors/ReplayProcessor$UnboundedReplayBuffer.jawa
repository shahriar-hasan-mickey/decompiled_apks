record `io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind interface {
  `java.util.List` `io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.error` @AccessFlag ;
  `int` `io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.size` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44ea54.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44ea5a.  v0:= new `java.util.ArrayList`;
  #L44ea5e.  v1:= "capacityHint" @kind object;
  #L44ea62.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44ea68.  v3:= temp;
  #L44ea6a.  call `<init>`(v0, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L44ea70.  v2.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.buffer` @type ^`java.util.List` := v0 @kind object;
  #L44ea74.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ea88.  v0:= 1I;
  #L44ea8a.  v1.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.done` @type ^`boolean` := v0 @kind boolean;
  #L44ea8e.  return @kind void;
}
procedure `void` `error`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L44eaa0.  v0.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L44eaa4.  v1:= 1I;
  #L44eaa6.  v0.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.done` @type ^`boolean` := v1 @kind boolean;
  #L44eaaa.  return @kind void;
}
procedure `java.lang.Throwable` `getError`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.getError:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ea3c.  v0:= v1.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44ea40.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e998.  v0:= v2.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.size` @type ^`int`;
  #L44e99c.  if v0 != 0 then goto L44e9a4;
  #L44e9a0.  v0:= 0I;
  #L44e9a2.  return v0 @kind object;
  #L44e9a4.  v1:= v2.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L44e9a8.  v0:= v0 + -1;
  #L44e9ac.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44e9b2.  v0:= temp @kind object;
  #L44e9b4.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44e9c8.  v0:= v5.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.size` @type ^`int`;
  #L44e9cc.  v1:= 0I;
  #L44e9ce.  v2:= 0I;
  #L44e9d0.  if v0 != 0 then goto L44e9e0;
  #L44e9d4.  v0:= length @variable v6;
  #L44e9d6.  if v0 == 0 then goto L44e9de;
  #L44e9da.  v6[v2]:= v1 @kind object;
  #L44e9de.  return v6 @kind object;
  #L44e9e0.  v3:= v5.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L44e9e4.  v4:= length @variable v6;
  #L44e9e6.  if v4 >= v0 then goto L44ea0a;
  #L44e9ea.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L44e9f0.  v6:= temp @kind object;
  #L44e9f2.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L44e9f8.  v6:= temp @kind object;
  #L44e9fa.  call temp:= `newInstance`(v6, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L44ea00.  v6:= temp @kind object;
  #L44ea02.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L44ea06.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L44ea0a.  if v2 >= v0 then goto L44ea20;
  #L44ea0e.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44ea14.  v4:= temp @kind object;
  #L44ea16.  v6[v2]:= v4 @kind object;
  #L44ea1a.  v2:= v2 + 1;
  #L44ea1e.  goto L44ea0a;
  #L44ea20.  v2:= length @variable v6;
  #L44ea22.  if v2 <= v0 then goto L44ea2a;
  #L44ea26.  v6[v0]:= v1 @kind object;
  #L44ea2a.  return v6 @kind object;
}
procedure `boolean` `isDone`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e968.  v0:= v1.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44e96c.  return v0;
}
procedure `void` `next`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44eabc.  v0:= v1.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L44eac0.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44eac6.  v2:= v1.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.size` @type ^`int`;
  #L44eaca.  v2:= v2 + 1;
  #L44eace.  v1.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.size` @type ^`int` := v2;
  #L44ead2.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v12 @kind this, `io.reactivex.processors.ReplayProcessor$ReplaySubscription` v13 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L44eae4.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.getAndIncrement:()I` @kind virtual;
  #L44eaea.  v0:= temp;
  #L44eaec.  if v0 == 0 then goto L44eaf2;
  #L44eaf0.  return @kind void;
  #L44eaf2.  v0:= v12.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L44eaf6.  v1:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44eafa.  v2:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` @kind object;
  #L44eafe.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L44eb02.  v3:= 0I;
  #L44eb04.  if v2 == 0 then goto L44eb12;
  #L44eb08.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L44eb0e.  v3:= temp;
  #L44eb10.  goto L44eb1e;
  #L44eb12.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L44eb18.  v2:= temp @kind object;
  #L44eb1a.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v2 @kind object;
  #L44eb1e.  v4:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.emitted` @type ^`long` @kind wide;
  #L44eb22.  v2:= 1I;
  #L44eb24.  v6:= 1I;
  #L44eb26.  v7:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44eb2a.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44eb30.  v7:= temp @kind wide;
  #L44eb32.  v9:= 0I;
  #L44eb34.  v10:= lcmp(v4, v7);
  #L44eb38.  if v10 == 0 then goto L44eb9a;
  #L44eb3c.  v10:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44eb40.  if v10 == 0 then goto L44eb4a;
  #L44eb44.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v9 @kind object;
  #L44eb48.  return @kind void;
  #L44eb4a.  v10:= v12.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44eb4e.  v11:= v12.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.size` @type ^`int`;
  #L44eb52.  if v10 == 0 then goto L44eb7a;
  #L44eb56.  if v3 != v11 then goto L44eb7a;
  #L44eb5a.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v9 @kind object;
  #L44eb5e.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` := v2 @kind boolean;
  #L44eb62.  v13:= v12.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44eb66.  if v13 != 0 then goto L44eb72;
  #L44eb6a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44eb70.  goto L44eb78;
  #L44eb72.  call `onError`(v1, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44eb78.  return @kind void;
  #L44eb7a.  if v3 != v11 then goto L44eb80;
  #L44eb7e.  goto L44eb9a;
  #L44eb80.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44eb86.  v9:= temp @kind object;
  #L44eb88.  call `onNext`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44eb8e.  v3:= v3 + 1;
  #L44eb92.  v9:= 1L;
  #L44eb96.  v4:= v4 + v9 @kind long;
  #L44eb98.  goto L44eb32;
  #L44eb9a.  v10:= lcmp(v4, v7);
  #L44eb9e.  if v10 != 0 then goto L44ebe0;
  #L44eba2.  v7:= v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L44eba6.  if v7 == 0 then goto L44ebb0;
  #L44ebaa.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v9 @kind object;
  #L44ebae.  return @kind void;
  #L44ebb0.  v7:= v12.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L44ebb4.  v8:= v12.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.size` @type ^`int`;
  #L44ebb8.  if v7 == 0 then goto L44ebe0;
  #L44ebbc.  if v3 != v8 then goto L44ebe0;
  #L44ebc0.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v9 @kind object;
  #L44ebc4.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` := v2 @kind boolean;
  #L44ebc8.  v13:= v12.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.error` @type ^`java.lang.Throwable` @kind object;
  #L44ebcc.  if v13 != 0 then goto L44ebd8;
  #L44ebd0.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44ebd6.  goto L44ebde;
  #L44ebd8.  call `onError`(v1, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ebde.  return @kind void;
  #L44ebe0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L44ebe6.  v7:= temp @kind object;
  #L44ebe8.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @type ^`java.lang.Object` := v7 @kind object;
  #L44ebec.  v13.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.emitted` @type ^`long` := v4 @kind wide;
  #L44ebf0.  v6:= -v6 @kind int;
  #L44ebf2.  call temp:= `addAndGet`(v13, v6) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.addAndGet:(I)I` @kind virtual;
  #L44ebf8.  v6:= temp;
  #L44ebfa.  if v6 != 0 then goto L44eb26;
  #L44ebfe.  return @kind void;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e980.  v0:= v1.`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer.size` @type ^`int`;
  #L44e984.  return v0;
}
procedure `void` `trimHead`(`io.reactivex.processors.ReplayProcessor$UnboundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$UnboundedReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;

  #L44ec10.  return @kind void;
}
