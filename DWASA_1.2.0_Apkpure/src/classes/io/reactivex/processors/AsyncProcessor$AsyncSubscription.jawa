record `io.reactivex.processors.AsyncProcessor$AsyncSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class {
  `io.reactivex.processors.AsyncProcessor` `io.reactivex.processors.AsyncProcessor$AsyncSubscription.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.AsyncProcessor$AsyncSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.AsyncProcessor$AsyncSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.AsyncProcessor` v2 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/AsyncProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44c11c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L44c122.  v0.`io.reactivex.processors.AsyncProcessor$AsyncSubscription.parent` @type ^`io.reactivex.processors.AsyncProcessor` := v2 @kind object;
  #L44c126.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.AsyncProcessor$AsyncSubscription` v1 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c138.  call temp:= `tryCancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.tryCancel:()Z` @kind super;
  #L44c13e.  v0:= temp;
  #L44c140.  if v0 == 0 then goto L44c14e;
  #L44c144.  v0:= v1.`io.reactivex.processors.AsyncProcessor$AsyncSubscription.parent` @type ^`io.reactivex.processors.AsyncProcessor` @kind object;
  #L44c148.  call `remove`(v0, v1) @signature `Lio/reactivex/processors/AsyncProcessor;.remove:(Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;)V` @kind virtual;
  #L44c14e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.processors.AsyncProcessor$AsyncSubscription` v1 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.onComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L44c160.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.isCancelled:()Z` @kind virtual;
  #L44c166.  v0:= temp;
  #L44c168.  if v0 != 0 then goto L44c176;
  #L44c16c.  v0:= v1.`io.reactivex.processors.AsyncProcessor$AsyncSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c170.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c176.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.AsyncProcessor$AsyncSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L44c188.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.isCancelled:()Z` @kind virtual;
  #L44c18e.  v0:= temp;
  #L44c190.  if v0 == 0 then goto L44c19c;
  #L44c194.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44c19a.  goto L44c1a6;
  #L44c19c.  v0:= v1.`io.reactivex.processors.AsyncProcessor$AsyncSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c1a0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c1a6.  return @kind void;
}
