record `io.reactivex.processors.ReplayProcessor$ReplayBuffer` @kind interface @AccessFlag ABSTRACT_INTERFACE {
}
procedure `void` `complete`() @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.complete:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `error`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Throwable` `getError`() @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.getError:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getValue`() @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object`[] `getValues`(`java.lang.Object`[] v0 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isDone`() @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.isDone:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `next`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `replay`(`io.reactivex.processors.ReplayProcessor$ReplaySubscription` v0 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.replay:(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `size`() @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.size:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `trimHead`() @signature `Lio/reactivex/processors/ReplayProcessor$ReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
