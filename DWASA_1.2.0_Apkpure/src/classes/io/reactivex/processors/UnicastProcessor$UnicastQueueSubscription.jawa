record `io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription` v0 @kind this, `io.reactivex.processors.UnicastProcessor` v1 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.<init>:(Lio/reactivex/processors/UnicastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44f598.  v0.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L44f59c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L44f5a2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f5b4.  v0:= v2.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f5b8.  v0:= v0.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` @kind boolean;
  #L44f5bc.  if v0 == 0 then goto L44f5c2;
  #L44f5c0.  return @kind void;
  #L44f5c2.  v0:= v2.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f5c6.  v1:= 1I;
  #L44f5c8.  v0.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L44f5cc.  call `doTerminate`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.doTerminate:()V` @kind virtual;
  #L44f5d2.  v0:= v2.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f5d6.  v0:= v0.`io.reactivex.processors.UnicastProcessor.enableOperatorFusion` @type ^`boolean` @kind boolean;
  #L44f5da.  if v0 != 0 then goto L44f610;
  #L44f5de.  v0:= v2.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f5e2.  v0:= v0.`io.reactivex.processors.UnicastProcessor.wip` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L44f5e6.  call temp:= `getAndIncrement`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.getAndIncrement:()I` @kind virtual;
  #L44f5ec.  v0:= temp;
  #L44f5ee.  if v0 != 0 then goto L44f610;
  #L44f5f2.  v0:= v2.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f5f6.  v0:= v0.`io.reactivex.processors.UnicastProcessor.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44f5fa.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44f600.  v0:= v2.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f604.  v0:= v0.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f608.  v1:= 0I;
  #L44f60a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44f610.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f624.  v0:= v1.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f628.  v0:= v0.`io.reactivex.processors.UnicastProcessor.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44f62c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44f632.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f528.  v0:= v1.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f52c.  v0:= v0.`io.reactivex.processors.UnicastProcessor.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44f530.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L44f536.  v0:= temp;
  #L44f538.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f574.  v0:= v1.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f578.  v0:= v0.`io.reactivex.processors.UnicastProcessor.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44f57c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44f582.  v0:= temp @kind object;
  #L44f584.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f644.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44f64a.  v0:= temp;
  #L44f64c.  if v0 == 0 then goto L44f668;
  #L44f650.  v0:= v1.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f654.  v0:= v0.`io.reactivex.processors.UnicastProcessor.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44f658.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44f65e.  v2:= v1.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f662.  call `drain`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.drain:()V` @kind virtual;
  #L44f668.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f54c.  v0:= 2I;
  #L44f54e.  v3:= v3 ^& v0 @kind int;
  #L44f550.  if v3 == 0 then goto L44f560;
  #L44f554.  v3:= v2.`io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription.this$0` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f558.  v1:= 1I;
  #L44f55a.  v3.`io.reactivex.processors.UnicastProcessor.enableOperatorFusion` @type ^`boolean` := v1 @kind boolean;
  #L44f55e.  return v0;
  #L44f560.  v3:= 0I;
  #L44f562.  return v3;
}
