record `io.reactivex.processors.SerializedProcessor` @kind class @AccessFlag FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.processors.SerializedProcessor.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.SerializedProcessor.done` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.processors.SerializedProcessor.emitting` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.processors.SerializedProcessor.queue` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.processors.SerializedProcessor` v0 @kind this, `io.reactivex.processors.FlowableProcessor` v1 @kind object) @signature `Lio/reactivex/processors/SerializedProcessor;.<init>:(Lio/reactivex/processors/FlowableProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44f248.  call `<init>`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L44f24e.  v0.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` := v1 @kind object;
  #L44f252.  return @kind void;
}
procedure `void` `emitLoop`(`io.reactivex.processors.SerializedProcessor` v2 @kind this) @signature `Lio/reactivex/processors/SerializedProcessor;.emitLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44f264.  @monitorenter v2
  #L44f266.  v0:= v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L44f26a.  if v0 != 0 then goto L44f278;
  #L44f26e.  v0:= 0I;
  #L44f270.  v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` := v0 @kind boolean;
  #L44f274.  @monitorexit v2
  #L44f276.  return @kind void;
  #L44f278.  v1:= 0I;
  #L44f27a.  v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L44f27e.  @monitorexit v2
  #L44f280.  v1:= v2.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f284.  call temp:= `accept`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L44f28a.  goto L44f264;
  #L44f28c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f28e.  @monitorexit v2
  #L44f290.  goto L44f294;
  #L44f292.  throw v0;
  #L44f294.  goto L44f292;
  catch `java.lang.Throwable` @[L44f266..L44f280] goto L44f28c;
  catch `java.lang.Throwable` @[L44f28e..L44f290] goto L44f28c;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.SerializedProcessor` v1 @kind this) @signature `Lio/reactivex/processors/SerializedProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f228.  v0:= v1.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f22c.  call temp:= `getThrowable`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L44f232.  v0:= temp @kind object;
  #L44f234.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.SerializedProcessor` v1 @kind this) @signature `Lio/reactivex/processors/SerializedProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f1c8.  v0:= v1.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f1cc.  call temp:= `hasComplete`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasComplete:()Z` @kind virtual;
  #L44f1d2.  v0:= temp;
  #L44f1d4.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.SerializedProcessor` v1 @kind this) @signature `Lio/reactivex/processors/SerializedProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f1e8.  v0:= v1.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f1ec.  call temp:= `hasSubscribers`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasSubscribers:()Z` @kind virtual;
  #L44f1f2.  v0:= temp;
  #L44f1f4.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.SerializedProcessor` v1 @kind this) @signature `Lio/reactivex/processors/SerializedProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f208.  v0:= v1.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f20c.  call temp:= `hasThrowable`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasThrowable:()Z` @kind virtual;
  #L44f212.  v0:= temp;
  #L44f214.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.SerializedProcessor` v2 @kind this) @signature `Lio/reactivex/processors/SerializedProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f2bc.  v0:= v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` @kind boolean;
  #L44f2c0.  if v0 == 0 then goto L44f2c6;
  #L44f2c4.  return @kind void;
  #L44f2c6.  @monitorenter v2
  #L44f2c8.  v0:= v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` @kind boolean;
  #L44f2cc.  if v0 == 0 then goto L44f2d4;
  #L44f2d0.  @monitorexit v2
  #L44f2d2.  return @kind void;
  #L44f2d4.  v0:= 1I;
  #L44f2d6.  v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` := v0 @kind boolean;
  #L44f2da.  v1:= v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` @kind boolean;
  #L44f2de.  if v1 == 0 then goto L44f30c;
  #L44f2e2.  v0:= v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L44f2e6.  if v0 != 0 then goto L44f2fa;
  #L44f2ea.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L44f2ee.  v1:= 4I;
  #L44f2f0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L44f2f6.  v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L44f2fa.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L44f300.  v1:= temp @kind object;
  #L44f302.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L44f308.  @monitorexit v2
  #L44f30a.  return @kind void;
  #L44f30c.  v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` := v0 @kind boolean;
  #L44f310.  @monitorexit v2
  #L44f312.  v0:= v2.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f316.  call `onComplete`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.onComplete:()V` @kind virtual;
  #L44f31c.  return @kind void;
  #L44f31e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f320.  @monitorexit v2
  #L44f322.  throw v0;
  catch `java.lang.Throwable` @[L44f2c8..L44f312] goto L44f31e;
  catch `java.lang.Throwable` @[L44f320..L44f322] goto L44f31e;
}
procedure `void` `onError`(`io.reactivex.processors.SerializedProcessor` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/processors/SerializedProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f348.  v0:= v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` @kind boolean;
  #L44f34c.  if v0 == 0 then goto L44f358;
  #L44f350.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44f356.  return @kind void;
  #L44f358.  @monitorenter v2
  #L44f35a.  v0:= v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` @kind boolean;
  #L44f35e.  v1:= 1I;
  #L44f360.  if v0 == 0 then goto L44f368;
  #L44f364.  v0:= 1I;
  #L44f366.  goto L44f3a4;
  #L44f368.  v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` := v1 @kind boolean;
  #L44f36c.  v0:= v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` @kind boolean;
  #L44f370.  if v0 == 0 then goto L44f39e;
  #L44f374.  v0:= v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L44f378.  if v0 != 0 then goto L44f38c;
  #L44f37c.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L44f380.  v1:= 4I;
  #L44f382.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L44f388.  v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L44f38c.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L44f392.  v3:= temp @kind object;
  #L44f394.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L44f39a.  @monitorexit v2
  #L44f39c.  return @kind void;
  #L44f39e.  v0:= 0I;
  #L44f3a0.  v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` := v1 @kind boolean;
  #L44f3a4.  @monitorexit v2
  #L44f3a6.  if v0 == 0 then goto L44f3b2;
  #L44f3aa.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44f3b0.  return @kind void;
  #L44f3b2.  v0:= v2.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f3b6.  call `onError`(v0, v3) @signature `Lio/reactivex/processors/FlowableProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44f3bc.  return @kind void;
  #L44f3be.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f3c0.  @monitorexit v2
  #L44f3c2.  throw v3;
  catch `java.lang.Throwable` @[L44f35a..L44f3a6] goto L44f3be;
  catch `java.lang.Throwable` @[L44f3c0..L44f3c2] goto L44f3be;
}
procedure `void` `onNext`(`io.reactivex.processors.SerializedProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/SerializedProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f3e8.  v0:= v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` @kind boolean;
  #L44f3ec.  if v0 == 0 then goto L44f3f2;
  #L44f3f0.  return @kind void;
  #L44f3f2.  @monitorenter v2
  #L44f3f4.  v0:= v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` @kind boolean;
  #L44f3f8.  if v0 == 0 then goto L44f400;
  #L44f3fc.  @monitorexit v2
  #L44f3fe.  return @kind void;
  #L44f400.  v0:= v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` @kind boolean;
  #L44f404.  if v0 == 0 then goto L44f432;
  #L44f408.  v0:= v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L44f40c.  if v0 != 0 then goto L44f420;
  #L44f410.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L44f414.  v1:= 4I;
  #L44f416.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L44f41c.  v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L44f420.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44f426.  v3:= temp @kind object;
  #L44f428.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L44f42e.  @monitorexit v2
  #L44f430.  return @kind void;
  #L44f432.  v0:= 1I;
  #L44f434.  v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` := v0 @kind boolean;
  #L44f438.  @monitorexit v2
  #L44f43a.  v0:= v2.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f43e.  call `onNext`(v0, v3) @signature `Lio/reactivex/processors/FlowableProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44f444.  call `emitLoop`(v2) @signature `Lio/reactivex/processors/SerializedProcessor;.emitLoop:()V` @kind virtual;
  #L44f44a.  return @kind void;
  #L44f44c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f44e.  @monitorexit v2
  #L44f450.  throw v3;
  catch `java.lang.Throwable` @[L44f3f4..L44f43a] goto L44f44c;
  catch `java.lang.Throwable` @[L44f44e..L44f450] goto L44f44c;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.SerializedProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/SerializedProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f478.  v0:= v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` @kind boolean;
  #L44f47c.  v1:= 1I;
  #L44f47e.  if v0 != 0 then goto L44f4d2;
  #L44f482.  @monitorenter v2
  #L44f484.  v0:= v2.`io.reactivex.processors.SerializedProcessor.done` @type ^`boolean` @kind boolean;
  #L44f488.  if v0 == 0 then goto L44f48e;
  #L44f48c.  goto L44f4c8;
  #L44f48e.  v0:= v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` @kind boolean;
  #L44f492.  if v0 == 0 then goto L44f4c0;
  #L44f496.  v0:= v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L44f49a.  if v0 != 0 then goto L44f4ae;
  #L44f49e.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L44f4a2.  v1:= 4I;
  #L44f4a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L44f4aa.  v2.`io.reactivex.processors.SerializedProcessor.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L44f4ae.  call temp:= `subscription`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.subscription:(Lorg/reactivestreams/Subscription;)Ljava/lang/Object;` @kind static;
  #L44f4b4.  v3:= temp @kind object;
  #L44f4b6.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L44f4bc.  @monitorexit v2
  #L44f4be.  return @kind void;
  #L44f4c0.  v2.`io.reactivex.processors.SerializedProcessor.emitting` @type ^`boolean` := v1 @kind boolean;
  #L44f4c4.  v0:= 0I;
  #L44f4c6.  v1:= 0I;
  #L44f4c8.  @monitorexit v2
  #L44f4ca.  goto L44f4d2;
  #L44f4cc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f4ce.  @monitorexit v2
  #L44f4d0.  throw v3;
  #L44f4d2.  if v1 == 0 then goto L44f4de;
  #L44f4d6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44f4dc.  goto L44f4ee;
  #L44f4de.  v0:= v2.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f4e2.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/processors/FlowableProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L44f4e8.  call `emitLoop`(v2) @signature `Lio/reactivex/processors/SerializedProcessor;.emitLoop:()V` @kind virtual;
  #L44f4ee.  return @kind void;
  catch `java.lang.Throwable` @[L44f484..L44f4d0] goto L44f4cc;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.SerializedProcessor` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/processors/SerializedProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L44f50c.  v0:= v1.`io.reactivex.processors.SerializedProcessor.actual` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L44f510.  call `subscribe`(v0, v2) @signature `Lio/reactivex/processors/FlowableProcessor;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L44f516.  return @kind void;
}
