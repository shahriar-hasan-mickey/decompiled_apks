record `io.reactivex.processors.PublishProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `java.lang.Throwable` `io.reactivex.processors.PublishProcessor.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.PublishProcessor.subscribers` @AccessFlag FINAL;
}
global `io.reactivex.processors.PublishProcessor$PublishSubscription`[] `@@io.reactivex.processors.PublishProcessor.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.PublishProcessor$PublishSubscription`[] `@@io.reactivex.processors.PublishProcessor.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/PublishProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44dd64.  v0:= 0I;
  #L44dd66.  v1:= new `io.reactivex.processors.PublishProcessor$PublishSubscription`[v0];
  #L44dd6a.  `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] := v1 @kind object;
  #L44dd6e.  v0:= new `io.reactivex.processors.PublishProcessor$PublishSubscription`[v0];
  #L44dd72.  `@@io.reactivex.processors.PublishProcessor.EMPTY` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] := v0 @kind object;
  #L44dd76.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44dd88.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L44dd8e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44dd92.  v1:= `@@io.reactivex.processors.PublishProcessor.EMPTY` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44dd96.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44dd9c.  v2.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44dda0.  return @kind void;
}
procedure `io.reactivex.processors.PublishProcessor` `create`() @signature `Lio/reactivex/processors/PublishProcessor;.create:()Lio/reactivex/processors/PublishProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44dd18.  v0:= new `io.reactivex.processors.PublishProcessor`;
  #L44dd1c.  call `<init>`(v0) @signature `Lio/reactivex/processors/PublishProcessor;.<init>:()V` @kind direct;
  #L44dd22.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.processors.PublishProcessor` v4 @kind this, `io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.add:(Lio/reactivex/processors/PublishProcessor$PublishSubscription;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44dbb4.  v0:= v4.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44dbb8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44dbbe.  v0:= temp @kind object;
  #L44dbc0.  v0:= (`io.reactivex.processors.PublishProcessor$PublishSubscription`[]) v0 @kind object;
  #L44dbc4.  v1:= `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44dbc8.  v2:= 0I;
  #L44dbca.  if v0 != v1 then goto L44dbd0;
  #L44dbce.  return v2;
  #L44dbd0.  v1:= length @variable v0;
  #L44dbd2.  v3:= v1 + 1;
  #L44dbd6.  v3:= new `io.reactivex.processors.PublishProcessor$PublishSubscription`[v3];
  #L44dbda.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44dbe0.  v3[v1]:= v5 @kind object;
  #L44dbe4.  v1:= v4.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44dbe8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44dbee.  v0:= temp;
  #L44dbf0.  if v0 == 0 then goto L44dbb4;
  #L44dbf4.  v5:= 1I;
  #L44dbf6.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44dd34.  v0:= v2.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44dd38.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44dd3e.  v0:= temp @kind object;
  #L44dd40.  v1:= `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44dd44.  if v0 != v1 then goto L44dd4e;
  #L44dd48.  v0:= v2.`io.reactivex.processors.PublishProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44dd4c.  return v0 @kind object;
  #L44dd4e.  v0:= 0I;
  #L44dd50.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44dc08.  v0:= v2.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44dc0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44dc12.  v0:= temp @kind object;
  #L44dc14.  v1:= `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44dc18.  if v0 != v1 then goto L44dc28;
  #L44dc1c.  v0:= v2.`io.reactivex.processors.PublishProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44dc20.  if v0 != 0 then goto L44dc28;
  #L44dc24.  v0:= 1I;
  #L44dc26.  goto L44dc2a;
  #L44dc28.  v0:= 0I;
  #L44dc2a.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.PublishProcessor` v1 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44dc3c.  v0:= v1.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44dc40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44dc46.  v0:= temp @kind object;
  #L44dc48.  v0:= (`io.reactivex.processors.PublishProcessor$PublishSubscription`[]) v0 @kind object;
  #L44dc4c.  v0:= length @variable v0;
  #L44dc4e.  if v0 == 0 then goto L44dc56;
  #L44dc52.  v0:= 1I;
  #L44dc54.  goto L44dc58;
  #L44dc56.  v0:= 0I;
  #L44dc58.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44dc6c.  v0:= v2.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44dc70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44dc76.  v0:= temp @kind object;
  #L44dc78.  v1:= `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44dc7c.  if v0 != v1 then goto L44dc8c;
  #L44dc80.  v0:= v2.`io.reactivex.processors.PublishProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44dc84.  if v0 == 0 then goto L44dc8c;
  #L44dc88.  v0:= 1I;
  #L44dc8a.  goto L44dc8e;
  #L44dc8c.  v0:= 0I;
  #L44dc8e.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.processors.PublishProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44dca0.  v0:= 1I;
  #L44dca2.  if v7 != 0 then goto L44dcbc;
  #L44dca6.  v7:= new `java.lang.NullPointerException`;
  #L44dcaa.  v1:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44dcae.  call `<init>`(v7, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44dcb4.  call `onError`(v6, v7) @signature `Lio/reactivex/processors/PublishProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44dcba.  return v0;
  #L44dcbc.  v1:= v6.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44dcc0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44dcc6.  v1:= temp @kind object;
  #L44dcc8.  v1:= (`io.reactivex.processors.PublishProcessor$PublishSubscription`[]) v1 @kind object;
  #L44dccc.  v2:= length @variable v1;
  #L44dcce.  v3:= 0I;
  #L44dcd0.  v4:= 0I;
  #L44dcd2.  if v4 >= v2 then goto L44dcee;
  #L44dcd6.  v5:= v1[v4] @kind object;
  #L44dcda.  call temp:= `isFull`(v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.isFull:()Z` @kind virtual;
  #L44dce0.  v5:= temp;
  #L44dce2.  if v5 == 0 then goto L44dce8;
  #L44dce6.  return v3;
  #L44dce8.  v4:= v4 + 1;
  #L44dcec.  goto L44dcd2;
  #L44dcee.  v2:= length @variable v1;
  #L44dcf0.  if v3 >= v2 then goto L44dd04;
  #L44dcf4.  v4:= v1[v3] @kind object;
  #L44dcf8.  call `onNext`(v4, v7) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44dcfe.  v3:= v3 + 1;
  #L44dd02.  goto L44dcf0;
  #L44dd04.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.PublishProcessor` v4 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44ddb4.  v0:= v4.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ddb8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ddbe.  v0:= temp @kind object;
  #L44ddc0.  v1:= `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44ddc4.  if v0 != v1 then goto L44ddca;
  #L44ddc8.  return @kind void;
  #L44ddca.  v0:= v4.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ddce.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44ddd4.  v0:= temp @kind object;
  #L44ddd6.  v0:= (`io.reactivex.processors.PublishProcessor$PublishSubscription`[]) v0 @kind object;
  #L44ddda.  v1:= length @variable v0;
  #L44dddc.  v2:= 0I;
  #L44ddde.  if v2 >= v1 then goto L44ddf2;
  #L44dde2.  v3:= v0[v2] @kind object;
  #L44dde6.  call `onComplete`(v3) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onComplete:()V` @kind virtual;
  #L44ddec.  v2:= v2 + 1;
  #L44ddf0.  goto L44ddde;
  #L44ddf2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.PublishProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44de04.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44de08.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44de0e.  v0:= v4.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44de12.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44de18.  v0:= temp @kind object;
  #L44de1a.  v1:= `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44de1e.  if v0 != v1 then goto L44de2a;
  #L44de22.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44de28.  return @kind void;
  #L44de2a.  v4.`io.reactivex.processors.PublishProcessor.error` @type ^`java.lang.Throwable` := v5 @kind object;
  #L44de2e.  v0:= v4.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44de32.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44de38.  v0:= temp @kind object;
  #L44de3a.  v0:= (`io.reactivex.processors.PublishProcessor$PublishSubscription`[]) v0 @kind object;
  #L44de3e.  v1:= length @variable v0;
  #L44de40.  v2:= 0I;
  #L44de42.  if v2 >= v1 then goto L44de56;
  #L44de46.  v3:= v0[v2] @kind object;
  #L44de4a.  call `onError`(v3, v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44de50.  v2:= v2 + 1;
  #L44de54.  goto L44de42;
  #L44de56.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.PublishProcessor` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44de68.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44de6c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44de72.  v0:= v4.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44de76.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44de7c.  v0:= temp @kind object;
  #L44de7e.  v0:= (`io.reactivex.processors.PublishProcessor$PublishSubscription`[]) v0 @kind object;
  #L44de82.  v1:= length @variable v0;
  #L44de84.  v2:= 0I;
  #L44de86.  if v2 >= v1 then goto L44de9a;
  #L44de8a.  v3:= v0[v2] @kind object;
  #L44de8e.  call `onNext`(v3, v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44de94.  v2:= v2 + 1;
  #L44de98.  goto L44de86;
  #L44de9a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.PublishProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44deac.  v0:= v2.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44deb0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44deb6.  v0:= temp @kind object;
  #L44deb8.  v1:= `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44debc.  if v0 != v1 then goto L44dec8;
  #L44dec0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44dec6.  return @kind void;
  #L44dec8.  v0:= 9223372036854775807L;
  #L44ded2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ded8.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.processors.PublishProcessor` v6 @kind this, `io.reactivex.processors.PublishProcessor$PublishSubscription` v7 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.remove:(Lio/reactivex/processors/PublishProcessor$PublishSubscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44deec.  v0:= v6.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44def0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44def6.  v0:= temp @kind object;
  #L44def8.  v0:= (`io.reactivex.processors.PublishProcessor$PublishSubscription`[]) v0 @kind object;
  #L44defc.  v1:= `@@io.reactivex.processors.PublishProcessor.TERMINATED` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44df00.  if v0 == v1 then goto L44df6c;
  #L44df04.  v1:= `@@io.reactivex.processors.PublishProcessor.EMPTY` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44df08.  if v0 != v1 then goto L44df0e;
  #L44df0c.  goto L44df6c;
  #L44df0e.  v1:= length @variable v0;
  #L44df10.  v2:= -1I;
  #L44df12.  v3:= 0I;
  #L44df14.  v4:= 0I;
  #L44df16.  if v4 >= v1 then goto L44df2c;
  #L44df1a.  v5:= v0[v4] @kind object;
  #L44df1e.  if v5 != v7 then goto L44df26;
  #L44df22.  v2:= v4;
  #L44df24.  goto L44df2c;
  #L44df26.  v4:= v4 + 1;
  #L44df2a.  goto L44df16;
  #L44df2c.  if v2 >= 0 then goto L44df32;
  #L44df30.  return @kind void;
  #L44df32.  v4:= 1I;
  #L44df34.  if v1 != v4 then goto L44df3e;
  #L44df38.  v1:= `@@io.reactivex.processors.PublishProcessor.EMPTY` @type ^`io.reactivex.processors.PublishProcessor$PublishSubscription`[] @kind object;
  #L44df3c.  goto L44df5c;
  #L44df3e.  v5:= v1 + -1;
  #L44df42.  v5:= new `io.reactivex.processors.PublishProcessor$PublishSubscription`[v5];
  #L44df46.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44df4c.  v3:= v2 + 1;
  #L44df50.  v1:= v1 - v2 @kind int;
  #L44df52.  v1:= v1 - v4 @kind int;
  #L44df54.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44df5a.  v1:= v5 @kind object;
  #L44df5c.  v2:= v6.`io.reactivex.processors.PublishProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44df60.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44df66.  v0:= temp;
  #L44df68.  if v0 == 0 then goto L44deec;
  #L44df6c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.PublishProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L44df80.  v0:= new `io.reactivex.processors.PublishProcessor$PublishSubscription`;
  #L44df84.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/PublishProcessor;)V` @kind direct;
  #L44df8a.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44df90.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/processors/PublishProcessor;.add:(Lio/reactivex/processors/PublishProcessor$PublishSubscription;)Z` @kind virtual;
  #L44df96.  v1:= temp;
  #L44df98.  if v1 == 0 then goto L44dfb0;
  #L44df9c.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.isCancelled:()Z` @kind virtual;
  #L44dfa2.  v3:= temp;
  #L44dfa4.  if v3 == 0 then goto L44dfc6;
  #L44dfa8.  call `remove`(v2, v0) @signature `Lio/reactivex/processors/PublishProcessor;.remove:(Lio/reactivex/processors/PublishProcessor$PublishSubscription;)V` @kind virtual;
  #L44dfae.  goto L44dfc6;
  #L44dfb0.  v0:= v2.`io.reactivex.processors.PublishProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44dfb4.  if v0 == 0 then goto L44dfc0;
  #L44dfb8.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44dfbe.  goto L44dfc6;
  #L44dfc0.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44dfc6.  return @kind void;
}
