record `io.reactivex.processors.UnicastProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `boolean` `io.reactivex.processors.UnicastProcessor.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.processors.UnicastProcessor.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.UnicastProcessor.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.enableOperatorFusion` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.processors.UnicastProcessor.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.UnicastProcessor.onTerminate` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.processors.UnicastProcessor.once` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.processors.UnicastProcessor.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.processors.UnicastProcessor.requested` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` `io.reactivex.processors.UnicastProcessor.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44f854.  v0:= 0I;
  #L44f856.  v1:= 1I;
  #L44f858.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L44f85e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44f870.  v0:= 1I;
  #L44f872.  call `<init>`(v1, v2, v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L44f878.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44f88c.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L44f892.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L44f896.  v1:= "capacityHint" @kind object;
  #L44f89a.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L44f8a0.  v3:= temp;
  #L44f8a2.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L44f8a8.  v2.`io.reactivex.processors.UnicastProcessor.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L44f8ac.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44f8b0.  call `<init>`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44f8b6.  v2.`io.reactivex.processors.UnicastProcessor.onTerminate` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L44f8ba.  v2.`io.reactivex.processors.UnicastProcessor.delayError` @type ^`boolean` := v5 @kind boolean;
  #L44f8be.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44f8c2.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44f8c8.  v2.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L44f8cc.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L44f8d0.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44f8d6.  v2.`io.reactivex.processors.UnicastProcessor.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L44f8da.  v3:= new `io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription`;
  #L44f8de.  call `<init>`(v3, v2) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.<init>:(Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L44f8e4.  v2.`io.reactivex.processors.UnicastProcessor.wip` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` := v3 @kind object;
  #L44f8e8.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44f8ec.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44f8f2.  v2.`io.reactivex.processors.UnicastProcessor.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L44f8f6.  return @kind void;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44f778.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L44f77c.  call temp:= `bufferSize`() @signature `Lio/reactivex/processors/UnicastProcessor;.bufferSize:()I` @kind static;
  #L44f782.  v1:= temp;
  #L44f784.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @kind direct;
  #L44f78a.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44f7c4.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L44f7c8.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @kind direct;
  #L44f7ce.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44f7e0.  v0:= "onTerminate" @kind object;
  #L44f7e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44f7ea.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L44f7ee.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;)V` @kind direct;
  #L44f7f4.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44f808.  v0:= "onTerminate" @kind object;
  #L44f80c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44f812.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L44f816.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L44f81c.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`boolean` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(Z)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L44f79c.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L44f7a0.  call temp:= `bufferSize`() @signature `Lio/reactivex/processors/UnicastProcessor;.bufferSize:()I` @kind static;
  #L44f7a6.  v1:= temp;
  #L44f7a8.  v2:= 0I;
  #L44f7aa.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L44f7b0.  return v0 @kind object;
}
procedure `boolean` `checkTerminated`(`io.reactivex.processors.UnicastProcessor` v3 @kind this, `boolean` v4 , `boolean` v5 , `boolean` v6 , `org.reactivestreams.Subscriber` v7 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v8 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.checkTerminated:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L44f67c.  v0:= v3.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` @kind boolean;
  #L44f680.  v1:= 1I;
  #L44f682.  v2:= 0I;
  #L44f684.  if v0 == 0 then goto L44f69a;
  #L44f688.  call `clear`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44f68e.  v4:= v3.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f692.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44f698.  return v1;
  #L44f69a.  if v5 == 0 then goto L44f6ec;
  #L44f69e.  if v4 == 0 then goto L44f6c6;
  #L44f6a2.  v4:= v3.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44f6a6.  if v4 == 0 then goto L44f6c6;
  #L44f6aa.  call `clear`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44f6b0.  v4:= v3.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f6b4.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44f6ba.  v4:= v3.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44f6be.  call `onError`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f6c4.  return v1;
  #L44f6c6.  if v6 == 0 then goto L44f6ec;
  #L44f6ca.  v4:= v3.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44f6ce.  v5:= v3.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f6d2.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44f6d8.  if v4 == 0 then goto L44f6e4;
  #L44f6dc.  call `onError`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f6e2.  goto L44f6ea;
  #L44f6e4.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44f6ea.  return v1;
  #L44f6ec.  v4:= 0I;
  #L44f6ee.  return v4;
}
procedure `void` `doTerminate`(`io.reactivex.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.doTerminate:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44f908.  v0:= v2.`io.reactivex.processors.UnicastProcessor.onTerminate` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f90c.  v1:= 0I;
  #L44f90e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44f914.  v0:= temp @kind object;
  #L44f916.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L44f91a.  if v0 == 0 then goto L44f924;
  #L44f91e.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L44f924.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44f938.  v0:= v2.`io.reactivex.processors.UnicastProcessor.wip` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L44f93c.  call temp:= `getAndIncrement`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.getAndIncrement:()I` @kind virtual;
  #L44f942.  v0:= temp;
  #L44f944.  if v0 == 0 then goto L44f94a;
  #L44f948.  return @kind void;
  #L44f94a.  v0:= 1I;
  #L44f94c.  v1:= v2.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f950.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44f956.  v1:= temp @kind object;
  #L44f958.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L44f95c.  if v1 == 0 then goto L44f978;
  #L44f960.  v0:= v2.`io.reactivex.processors.UnicastProcessor.enableOperatorFusion` @type ^`boolean` @kind boolean;
  #L44f964.  if v0 == 0 then goto L44f970;
  #L44f968.  call `drainFused`(v2, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.drainFused:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L44f96e.  goto L44f976;
  #L44f970.  call `drainRegular`(v2, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.drainRegular:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L44f976.  return @kind void;
  #L44f978.  v1:= v2.`io.reactivex.processors.UnicastProcessor.wip` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L44f97c.  v0:= -v0 @kind int;
  #L44f97e.  call temp:= `addAndGet`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.addAndGet:(I)I` @kind virtual;
  #L44f984.  v0:= temp;
  #L44f986.  if v0 != 0 then goto L44f98c;
  #L44f98a.  return @kind void;
  #L44f98c.  v1:= v2.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f990.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44f996.  v1:= temp @kind object;
  #L44f998.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L44f99c.  goto L44f95c;
}
procedure `void` `drainFused`(`io.reactivex.processors.UnicastProcessor` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.drainFused:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44f9b0.  v0:= v6.`io.reactivex.processors.UnicastProcessor.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44f9b4.  v1:= v6.`io.reactivex.processors.UnicastProcessor.delayError` @type ^`boolean` @kind boolean;
  #L44f9b8.  v2:= 1I;
  #L44f9ba.  v1:= v1 ^~ v2 @kind int;
  #L44f9bc.  v3:= v6.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` @kind boolean;
  #L44f9c0.  v4:= 0I;
  #L44f9c2.  if v3 == 0 then goto L44f9d8;
  #L44f9c6.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44f9cc.  v7:= v6.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f9d0.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44f9d6.  return @kind void;
  #L44f9d8.  v3:= v6.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44f9dc.  if v1 == 0 then goto L44fa08;
  #L44f9e0.  if v3 == 0 then goto L44fa08;
  #L44f9e4.  v5:= v6.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44f9e8.  if v5 == 0 then goto L44fa08;
  #L44f9ec.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44f9f2.  v0:= v6.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f9f6.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44f9fc.  v0:= v6.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44fa00.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44fa06.  return @kind void;
  #L44fa08.  call `onNext`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44fa0e.  if v3 == 0 then goto L44fa34;
  #L44fa12.  v0:= v6.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44fa16.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44fa1c.  v0:= v6.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44fa20.  if v0 == 0 then goto L44fa2c;
  #L44fa24.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44fa2a.  goto L44fa32;
  #L44fa2c.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44fa32.  return @kind void;
  #L44fa34.  v3:= v6.`io.reactivex.processors.UnicastProcessor.wip` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L44fa38.  v2:= -v2 @kind int;
  #L44fa3a.  call temp:= `addAndGet`(v3, v2) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.addAndGet:(I)I` @kind virtual;
  #L44fa40.  v2:= temp;
  #L44fa42.  if v2 != 0 then goto L44f9bc;
  #L44fa46.  return @kind void;
}
procedure `void` `drainRegular`(`io.reactivex.processors.UnicastProcessor` v17 @kind this, `org.reactivestreams.Subscriber` v18 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.drainRegular:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L44fa58.  v6:= v17 @kind object;
  #L44fa5c.  v7:= v6.`io.reactivex.processors.UnicastProcessor.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44fa60.  v0:= v6.`io.reactivex.processors.UnicastProcessor.delayError` @type ^`boolean` @kind boolean;
  #L44fa64.  v8:= 1I;
  #L44fa66.  v9:= v0 ^~ 1;
  #L44fa6a.  v10:= 1I;
  #L44fa6c.  v0:= v6.`io.reactivex.processors.UnicastProcessor.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44fa70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44fa76.  v11:= temp @kind wide;
  #L44fa78.  v4:= 0L;
  #L44fa7c.  v0:= lcmp(v11, v4);
  #L44fa80.  if v0 == 0 then goto L44fada;
  #L44fa84.  v2:= v6.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44fa88.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44fa8e.  v15:= temp @kind object;
  #L44fa90.  if v15 != 0 then goto L44fa9a;
  #L44fa94.  v16:= 1I;
  #L44fa98.  goto L44faa0;
  #L44fa9a.  v0:= 0I;
  #L44fa9c.  v16:= 0I;
  #L44faa0.  v0:= v17 @kind object;
  #L44faa4.  v1:= v9;
  #L44faa6.  v3:= v16;
  #L44faaa.  v13:= v4 @kind wide;
  #L44faac.  v4:= v18 @kind object;
  #L44fab0.  v5:= v7 @kind object;
  #L44fab2.  call temp:= `checkTerminated`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.checkTerminated:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L44fab8.  v0:= temp;
  #L44faba.  if v0 == 0 then goto L44fac0;
  #L44fabe.  return @kind void;
  #L44fac0.  if v16 == 0 then goto L44fac6;
  #L44fac4.  goto L44fadc;
  #L44fac6.  v5:= v18 @kind object;
  #L44faca.  call `onNext`(v5, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44fad0.  v0:= 1L;
  #L44fad4.  v0:= v0 + v13 @kind long;
  #L44fad6.  v4:= v0 @kind wide;
  #L44fad8.  goto L44fa7c;
  #L44fada.  v13:= v4 @kind wide;
  #L44fadc.  v5:= v18 @kind object;
  #L44fae0.  v0:= lcmp(v11, v13);
  #L44fae4.  if v0 != 0 then goto L44fb0e;
  #L44fae8.  v2:= v6.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44faec.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L44faf2.  v3:= temp;
  #L44faf4.  v0:= v17 @kind object;
  #L44faf8.  v1:= v9;
  #L44fafa.  v4:= v18 @kind object;
  #L44fafe.  v5:= v7 @kind object;
  #L44fb00.  call temp:= `checkTerminated`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.checkTerminated:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L44fb06.  v0:= temp;
  #L44fb08.  if v0 == 0 then goto L44fb0e;
  #L44fb0c.  return @kind void;
  #L44fb0e.  v0:= 0L;
  #L44fb12.  v2:= lcmp(v13, v0);
  #L44fb16.  if v2 == 0 then goto L44fb38;
  #L44fb1a.  v0:= 9223372036854775807L;
  #L44fb24.  v2:= lcmp(v11, v0);
  #L44fb28.  if v2 == 0 then goto L44fb38;
  #L44fb2c.  v0:= v6.`io.reactivex.processors.UnicastProcessor.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44fb30.  v1:= -v13 @kind long;
  #L44fb32.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44fb38.  v0:= v6.`io.reactivex.processors.UnicastProcessor.wip` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L44fb3c.  v1:= -v10 @kind int;
  #L44fb3e.  call temp:= `addAndGet`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.addAndGet:(I)I` @kind virtual;
  #L44fb44.  v10:= temp;
  #L44fb46.  if v10 != 0 then goto L44fa6c;
  #L44fb4a.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f830.  v0:= v1.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44f834.  if v0 == 0 then goto L44f83e;
  #L44f838.  v0:= v1.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44f83c.  return v0 @kind object;
  #L44f83e.  v0:= 0I;
  #L44f840.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f700.  v0:= v1.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44f704.  if v0 == 0 then goto L44f714;
  #L44f708.  v0:= v1.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44f70c.  if v0 != 0 then goto L44f714;
  #L44f710.  v0:= 1I;
  #L44f712.  goto L44f716;
  #L44f714.  v0:= 0I;
  #L44f716.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f728.  v0:= v1.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44f72c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44f732.  v0:= temp @kind object;
  #L44f734.  if v0 == 0 then goto L44f73c;
  #L44f738.  v0:= 1I;
  #L44f73a.  goto L44f73e;
  #L44f73c.  v0:= 0I;
  #L44f73e.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f750.  v0:= v1.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44f754.  if v0 == 0 then goto L44f764;
  #L44f758.  v0:= v1.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L44f75c.  if v0 == 0 then goto L44f764;
  #L44f760.  v0:= 1I;
  #L44f762.  goto L44f766;
  #L44f764.  v0:= 0I;
  #L44f766.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fb5c.  v0:= v1.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44fb60.  if v0 != 0 then goto L44fb80;
  #L44fb64.  v0:= v1.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` @kind boolean;
  #L44fb68.  if v0 == 0 then goto L44fb6e;
  #L44fb6c.  goto L44fb80;
  #L44fb6e.  v0:= 1I;
  #L44fb70.  v1.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` := v0 @kind boolean;
  #L44fb74.  call `doTerminate`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.doTerminate:()V` @kind virtual;
  #L44fb7a.  call `drain`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.drain:()V` @kind virtual;
  #L44fb80.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fb94.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44fb98.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44fb9e.  v0:= v1.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44fba2.  if v0 != 0 then goto L44fbc8;
  #L44fba6.  v0:= v1.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` @kind boolean;
  #L44fbaa.  if v0 == 0 then goto L44fbb0;
  #L44fbae.  goto L44fbc8;
  #L44fbb0.  v1.`io.reactivex.processors.UnicastProcessor.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L44fbb4.  v2:= 1I;
  #L44fbb6.  v1.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` := v2 @kind boolean;
  #L44fbba.  call `doTerminate`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.doTerminate:()V` @kind virtual;
  #L44fbc0.  call `drain`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.drain:()V` @kind virtual;
  #L44fbc6.  return @kind void;
  #L44fbc8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44fbce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fbe0.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44fbe4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44fbea.  v0:= v1.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44fbee.  if v0 != 0 then goto L44fc0c;
  #L44fbf2.  v0:= v1.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` @kind boolean;
  #L44fbf6.  if v0 == 0 then goto L44fbfc;
  #L44fbfa.  goto L44fc0c;
  #L44fbfc.  v0:= v1.`io.reactivex.processors.UnicastProcessor.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44fc00.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L44fc06.  call `drain`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.drain:()V` @kind virtual;
  #L44fc0c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44fc20.  v0:= v2.`io.reactivex.processors.UnicastProcessor.done` @type ^`boolean` @kind boolean;
  #L44fc24.  if v0 != 0 then goto L44fc44;
  #L44fc28.  v0:= v2.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` @kind boolean;
  #L44fc2c.  if v0 == 0 then goto L44fc32;
  #L44fc30.  goto L44fc44;
  #L44fc32.  v0:= 9223372036854775807L;
  #L44fc3c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44fc42.  goto L44fc4a;
  #L44fc44.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44fc4a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.UnicastProcessor` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L44fc5c.  v0:= v3.`io.reactivex.processors.UnicastProcessor.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44fc60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44fc66.  v0:= temp;
  #L44fc68.  if v0 != 0 then goto L44fcb2;
  #L44fc6c.  v0:= v3.`io.reactivex.processors.UnicastProcessor.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44fc70.  v1:= 0I;
  #L44fc72.  v2:= 1I;
  #L44fc74.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44fc7a.  v0:= temp;
  #L44fc7c.  if v0 == 0 then goto L44fcb2;
  #L44fc80.  v0:= v3.`io.reactivex.processors.UnicastProcessor.wip` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L44fc84.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44fc8a.  v0:= v3.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44fc8e.  call `set`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L44fc94.  v4:= v3.`io.reactivex.processors.UnicastProcessor.cancelled` @type ^`boolean` @kind boolean;
  #L44fc98.  if v4 == 0 then goto L44fcaa;
  #L44fc9c.  v4:= v3.`io.reactivex.processors.UnicastProcessor.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44fca0.  v0:= 0I;
  #L44fca2.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44fca8.  goto L44fcc6;
  #L44fcaa.  call `drain`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.drain:()V` @kind virtual;
  #L44fcb0.  goto L44fcc6;
  #L44fcb2.  v0:= new `java.lang.IllegalStateException`;
  #L44fcb6.  v1:= "This processor allows only a single Subscriber" @kind object;
  #L44fcba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44fcc0.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L44fcc6.  return @kind void;
}
