record `io.reactivex.Maybe` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.MaybeSource` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.Maybe` v0 @kind this) @signature `Lio/reactivex/Maybe;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3da88c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3da892.  return @kind void;
}
procedure `io.reactivex.Maybe` `amb`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Maybe;.amb:(Ljava/lang/Iterable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8f50.  v0:= "sources is null" @kind object;
  #L3d8f54.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8f5a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeAmb`;
  #L3d8f5e.  v1:= 0I;
  #L3d8f60.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/MaybeSource;Ljava/lang/Iterable;)V` @kind direct;
  #L3d8f66.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d8f6c.  v2:= temp @kind object;
  #L3d8f6e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `ambArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.ambArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8f80.  v0:= length @variable v2;
  #L3d8f82.  if v0 != 0 then goto L3d8f90;
  #L3d8f86.  call temp:= `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @kind static;
  #L3d8f8c.  v2:= temp @kind object;
  #L3d8f8e.  return v2 @kind object;
  #L3d8f90.  v0:= length @variable v2;
  #L3d8f92.  v1:= 1I;
  #L3d8f94.  if v0 != v1 then goto L3d8fa8;
  #L3d8f98.  v0:= 0I;
  #L3d8f9a.  v2:= v2[v0] @kind object;
  #L3d8f9e.  call temp:= `wrap`(v2) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3d8fa4.  v2:= temp @kind object;
  #L3d8fa6.  return v2 @kind object;
  #L3d8fa8.  v0:= new `io.reactivex.internal.operators.maybe.MaybeAmb`;
  #L3d8fac.  v1:= 0I;
  #L3d8fae.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/MaybeSource;Ljava/lang/Iterable;)V` @kind direct;
  #L3d8fb4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d8fba.  v2:= temp @kind object;
  #L3d8fbc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8718.  v0:= "source1 is null" @kind object;
  #L3d871c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8722.  v0:= "source2 is null" @kind object;
  #L3d8726.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d872c.  v0:= 2I;
  #L3d872e.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d8732.  v1:= 0I;
  #L3d8734.  v0[v1]:= v2 @kind object;
  #L3d8738.  v2:= 1I;
  #L3d873a.  v0[v2]:= v3 @kind object;
  #L3d873e.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8744.  v2:= temp @kind object;
  #L3d8746.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8758.  v0:= "source1 is null" @kind object;
  #L3d875c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8762.  v0:= "source2 is null" @kind object;
  #L3d8766.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d876c.  v0:= "source3 is null" @kind object;
  #L3d8770.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8776.  v0:= 3I;
  #L3d8778.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d877c.  v1:= 0I;
  #L3d877e.  v0[v1]:= v2 @kind object;
  #L3d8782.  v2:= 1I;
  #L3d8784.  v0[v2]:= v3 @kind object;
  #L3d8788.  v2:= 2I;
  #L3d878a.  v0[v2]:= v4 @kind object;
  #L3d878e.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8794.  v2:= temp @kind object;
  #L3d8796.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d87a8.  v0:= "source1 is null" @kind object;
  #L3d87ac.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d87b2.  v0:= "source2 is null" @kind object;
  #L3d87b6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d87bc.  v0:= "source3 is null" @kind object;
  #L3d87c0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d87c6.  v0:= "source4 is null" @kind object;
  #L3d87ca.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d87d0.  v0:= 4I;
  #L3d87d2.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d87d6.  v1:= 0I;
  #L3d87d8.  v0[v1]:= v2 @kind object;
  #L3d87dc.  v2:= 1I;
  #L3d87de.  v0[v2]:= v3 @kind object;
  #L3d87e2.  v2:= 2I;
  #L3d87e4.  v0[v2]:= v4 @kind object;
  #L3d87e8.  v2:= 3I;
  #L3d87ea.  v0[v2]:= v5 @kind object;
  #L3d87ee.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d87f4.  v2:= temp @kind object;
  #L3d87f6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8808.  v0:= "sources is null" @kind object;
  #L3d880c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8812.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatIterable`;
  #L3d8816.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L3d881c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8822.  v1:= temp @kind object;
  #L3d8824.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8838.  v0:= 2I;
  #L3d883a.  call temp:= `concat`(v1, v0) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3d8840.  v1:= temp @kind object;
  #L3d8842.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d8854.  v0:= "sources is null" @kind object;
  #L3d8858.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d885e.  v0:= "prefetch" @kind object;
  #L3d8862.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d8868.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapPublisher`;
  #L3d886c.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d8872.  v1:= temp @kind object;
  #L3d8874.  v2:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d8878.  call `<init>`(v0, v3, v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3d887e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8884.  v3:= temp @kind object;
  #L3d8886.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8898.  v0:= "sources is null" @kind object;
  #L3d889c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d88a2.  v0:= length @variable v2;
  #L3d88a4.  if v0 != 0 then goto L3d88b2;
  #L3d88a8.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d88ae.  v2:= temp @kind object;
  #L3d88b0.  return v2 @kind object;
  #L3d88b2.  v0:= length @variable v2;
  #L3d88b4.  v1:= 1I;
  #L3d88b6.  if v0 != v1 then goto L3d88d4;
  #L3d88ba.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L3d88be.  v1:= 0I;
  #L3d88c0.  v2:= v2[v1] @kind object;
  #L3d88c4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d88ca.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d88d0.  v2:= temp @kind object;
  #L3d88d2.  return v2 @kind object;
  #L3d88d4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatArray`;
  #L3d88d8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d88de.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d88e4.  v2:= temp @kind object;
  #L3d88e6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayDelayError`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.concatArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d88f8.  v0:= length @variable v2;
  #L3d88fa.  if v0 != 0 then goto L3d8908;
  #L3d88fe.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d8904.  v2:= temp @kind object;
  #L3d8906.  return v2 @kind object;
  #L3d8908.  v0:= length @variable v2;
  #L3d890a.  v1:= 1I;
  #L3d890c.  if v0 != v1 then goto L3d892a;
  #L3d8910.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L3d8914.  v1:= 0I;
  #L3d8916.  v2:= v2[v1] @kind object;
  #L3d891a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d8920.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8926.  v2:= temp @kind object;
  #L3d8928.  return v2 @kind object;
  #L3d892a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError`;
  #L3d892e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d8934.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d893a.  v2:= temp @kind object;
  #L3d893c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`io.reactivex.MaybeSource`[] v1 @kind object) @signature `Lio/reactivex/Maybe;.concatArrayEager:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8950.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d8956.  v1:= temp @kind object;
  #L3d8958.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d895e.  v0:= temp @kind object;
  #L3d8960.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d8966.  v1:= temp @kind object;
  #L3d8968.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d897c.  v0:= "sources is null" @kind object;
  #L3d8980.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8986.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d898c.  v1:= temp @kind object;
  #L3d898e.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d8994.  v0:= temp @kind object;
  #L3d8996.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d899c.  v1:= temp @kind object;
  #L3d899e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d89b0.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d89b6.  v1:= temp @kind object;
  #L3d89b8.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d89be.  v0:= temp @kind object;
  #L3d89c0.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d89c6.  v1:= temp @kind object;
  #L3d89c8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatEager:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d89dc.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d89e2.  v1:= temp @kind object;
  #L3d89e4.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d89ea.  v0:= temp @kind object;
  #L3d89ec.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d89f2.  v1:= temp @kind object;
  #L3d89f4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatEager:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8a08.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d8a0e.  v1:= temp @kind object;
  #L3d8a10.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d8a16.  v0:= temp @kind object;
  #L3d8a18.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d8a1e.  v1:= temp @kind object;
  #L3d8a20.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `create`(`io.reactivex.MaybeOnSubscribe` v1 @kind object) @signature `Lio/reactivex/Maybe;.create:(Lio/reactivex/MaybeOnSubscribe;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d90bc.  v0:= "onSubscribe is null" @kind object;
  #L3d90c0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d90c6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCreate`;
  #L3d90ca.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate;.<init>:(Lio/reactivex/MaybeOnSubscribe;)V` @kind direct;
  #L3d90d0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d90d6.  v1:= temp @kind object;
  #L3d90d8.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `defer`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.defer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9118.  v0:= "maybeSupplier is null" @kind object;
  #L3d911c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9122.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDefer`;
  #L3d9126.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDefer;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d912c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9132.  v1:= temp @kind object;
  #L3d9134.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d950c.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeEmpty.INSTANCE` @type ^`io.reactivex.internal.operators.maybe.MaybeEmpty` @kind object;
  #L3d9510.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9516.  v0:= temp @kind object;
  #L3d9518.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/Maybe;.error:(Ljava/lang/Throwable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d952c.  v0:= "exception is null" @kind object;
  #L3d9530.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9536.  v0:= new `io.reactivex.internal.operators.maybe.MaybeError`;
  #L3d953a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeError;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3d9540.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9546.  v1:= temp @kind object;
  #L3d9548.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `error`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d955c.  v0:= "errorSupplier is null" @kind object;
  #L3d9560.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9566.  v0:= new `io.reactivex.internal.operators.maybe.MaybeErrorCallable`;
  #L3d956a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeErrorCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d9570.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9576.  v1:= temp @kind object;
  #L3d9578.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromAction`(`io.reactivex.functions.Action` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromAction:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9698.  v0:= "run is null" @kind object;
  #L3d969c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d96a2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromAction`;
  #L3d96a6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.<init>:(Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d96ac.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d96b2.  v1:= temp @kind object;
  #L3d96b4.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromCallable:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d96c8.  v0:= "callable is null" @kind object;
  #L3d96cc.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d96d2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromCallable`;
  #L3d96d6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d96dc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d96e2.  v1:= temp @kind object;
  #L3d96e4.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromCompletable`(`io.reactivex.CompletableSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromCompletable:(Lio/reactivex/CompletableSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d96f8.  v0:= "completableSource is null" @kind object;
  #L3d96fc.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9702.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromCompletable`;
  #L3d9706.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCompletable;.<init>:(Lio/reactivex/CompletableSource;)V` @kind direct;
  #L3d970c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9712.  v1:= temp @kind object;
  #L3d9714.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromFuture`(`java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/Maybe;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d9728.  v0:= "future is null" @kind object;
  #L3d972c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9732.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromFuture`;
  #L3d9736.  v1:= 0L;
  #L3d973a.  v3:= 0I;
  #L3d973c.  call `<init>`(v0, v4, v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3d9742.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9748.  v4:= temp @kind object;
  #L3d974a.  return v4 @kind object;
}
procedure `io.reactivex.Maybe` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d975c.  v0:= "future is null" @kind object;
  #L3d9760.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9766.  v0:= "unit is null" @kind object;
  #L3d976a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9770.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromFuture`;
  #L3d9774.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3d977a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9780.  v1:= temp @kind object;
  #L3d9782.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromRunnable`(`java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9794.  v0:= "run is null" @kind object;
  #L3d9798.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d979e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromRunnable`;
  #L3d97a2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L3d97a8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d97ae.  v1:= temp @kind object;
  #L3d97b0.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromSingle`(`io.reactivex.SingleSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromSingle:(Lio/reactivex/SingleSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d97c4.  v0:= "singleSource is null" @kind object;
  #L3d97c8.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d97ce.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromSingle`;
  #L3d97d2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle;.<init>:(Lio/reactivex/SingleSource;)V` @kind direct;
  #L3d97d8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d97de.  v1:= temp @kind object;
  #L3d97e0.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `just`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Maybe;.just:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9818.  v0:= "item is null" @kind object;
  #L3d981c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9822.  v0:= new `io.reactivex.internal.operators.maybe.MaybeJust`;
  #L3d9826.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeJust;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3d982c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9832.  v1:= temp @kind object;
  #L3d9834.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8ab8.  v0:= "source1 is null" @kind object;
  #L3d8abc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8ac2.  v0:= "source2 is null" @kind object;
  #L3d8ac6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8acc.  v0:= 2I;
  #L3d8ace.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d8ad2.  v1:= 0I;
  #L3d8ad4.  v0[v1]:= v2 @kind object;
  #L3d8ad8.  v2:= 1I;
  #L3d8ada.  v0[v2]:= v3 @kind object;
  #L3d8ade.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8ae4.  v2:= temp @kind object;
  #L3d8ae6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8af8.  v0:= "source1 is null" @kind object;
  #L3d8afc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8b02.  v0:= "source2 is null" @kind object;
  #L3d8b06.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8b0c.  v0:= "source3 is null" @kind object;
  #L3d8b10.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8b16.  v0:= 3I;
  #L3d8b18.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d8b1c.  v1:= 0I;
  #L3d8b1e.  v0[v1]:= v2 @kind object;
  #L3d8b22.  v2:= 1I;
  #L3d8b24.  v0[v2]:= v3 @kind object;
  #L3d8b28.  v2:= 2I;
  #L3d8b2a.  v0[v2]:= v4 @kind object;
  #L3d8b2e.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8b34.  v2:= temp @kind object;
  #L3d8b36.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8b48.  v0:= "source1 is null" @kind object;
  #L3d8b4c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8b52.  v0:= "source2 is null" @kind object;
  #L3d8b56.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8b5c.  v0:= "source3 is null" @kind object;
  #L3d8b60.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8b66.  v0:= "source4 is null" @kind object;
  #L3d8b6a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8b70.  v0:= 4I;
  #L3d8b72.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d8b76.  v1:= 0I;
  #L3d8b78.  v0[v1]:= v2 @kind object;
  #L3d8b7c.  v2:= 1I;
  #L3d8b7e.  v0[v2]:= v3 @kind object;
  #L3d8b82.  v2:= 2I;
  #L3d8b84.  v0[v2]:= v4 @kind object;
  #L3d8b88.  v2:= 3I;
  #L3d8b8a.  v0[v2]:= v5 @kind object;
  #L3d8b8e.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8b94.  v2:= temp @kind object;
  #L3d8b96.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v0 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3d8ba8.  call temp:= `fromIterable`(v0) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8bae.  v0:= temp @kind object;
  #L3d8bb0.  call temp:= `merge`(v0) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d8bb6.  v0:= temp @kind object;
  #L3d8bb8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8bcc.  v0:= 2147483647I;
  #L3d8bd2.  call temp:= `merge`(v1, v0) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3d8bd8.  v1:= temp @kind object;
  #L3d8bda.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v7 @kind object, `int` v8 ) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d8bec.  v0:= "source is null" @kind object;
  #L3d8bf0.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8bf6.  v0:= "maxConcurrency" @kind object;
  #L3d8bfa.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d8c00.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapPublisher`;
  #L3d8c04.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d8c0a.  v3:= temp @kind object;
  #L3d8c0c.  v4:= 0I;
  #L3d8c0e.  v6:= 1I;
  #L3d8c10.  v1:= v0 @kind object;
  #L3d8c12.  v2:= v7 @kind object;
  #L3d8c14.  v5:= v8;
  #L3d8c16.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L3d8c1c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8c22.  v7:= temp @kind object;
  #L3d8c24.  return v7 @kind object;
}
procedure `io.reactivex.Maybe` `merge`(`io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d98a8.  v0:= "source is null" @kind object;
  #L3d98ac.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d98b2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L3d98b6.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d98bc.  v1:= temp @kind object;
  #L3d98be.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d98c4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d98ca.  v2:= temp @kind object;
  #L3d98cc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8c38.  v0:= "sources is null" @kind object;
  #L3d8c3c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8c42.  v0:= length @variable v2;
  #L3d8c44.  if v0 != 0 then goto L3d8c52;
  #L3d8c48.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d8c4e.  v2:= temp @kind object;
  #L3d8c50.  return v2 @kind object;
  #L3d8c52.  v0:= length @variable v2;
  #L3d8c54.  v1:= 1I;
  #L3d8c56.  if v0 != v1 then goto L3d8c74;
  #L3d8c5a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L3d8c5e.  v1:= 0I;
  #L3d8c60.  v2:= v2[v1] @kind object;
  #L3d8c64.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d8c6a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8c70.  v2:= temp @kind object;
  #L3d8c72.  return v2 @kind object;
  #L3d8c74.  v0:= new `io.reactivex.internal.operators.maybe.MaybeMergeArray`;
  #L3d8c78.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d8c7e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8c84.  v2:= temp @kind object;
  #L3d8c86.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`io.reactivex.MaybeSource`[] v3 @kind object) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d8c98.  v0:= length @variable v3;
  #L3d8c9a.  if v0 != 0 then goto L3d8ca8;
  #L3d8c9e.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d8ca4.  v3:= temp @kind object;
  #L3d8ca6.  return v3 @kind object;
  #L3d8ca8.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d8cae.  v0:= temp @kind object;
  #L3d8cb0.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d8cb6.  v1:= temp @kind object;
  #L3d8cb8.  v2:= 1I;
  #L3d8cba.  v3:= length @variable v3;
  #L3d8cbc.  call temp:= `flatMap`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d8cc2.  v3:= temp @kind object;
  #L3d8cc4.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8cd8.  v0:= "source1 is null" @kind object;
  #L3d8cdc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8ce2.  v0:= "source2 is null" @kind object;
  #L3d8ce6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8cec.  v0:= 2I;
  #L3d8cee.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d8cf2.  v1:= 0I;
  #L3d8cf4.  v0[v1]:= v2 @kind object;
  #L3d8cf8.  v2:= 1I;
  #L3d8cfa.  v0[v2]:= v3 @kind object;
  #L3d8cfe.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8d04.  v2:= temp @kind object;
  #L3d8d06.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8d18.  v0:= "source1 is null" @kind object;
  #L3d8d1c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8d22.  v0:= "source2 is null" @kind object;
  #L3d8d26.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8d2c.  v0:= "source3 is null" @kind object;
  #L3d8d30.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8d36.  v0:= 3I;
  #L3d8d38.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d8d3c.  v1:= 0I;
  #L3d8d3e.  v0[v1]:= v2 @kind object;
  #L3d8d42.  v2:= 1I;
  #L3d8d44.  v0[v2]:= v3 @kind object;
  #L3d8d48.  v2:= 2I;
  #L3d8d4a.  v0[v2]:= v4 @kind object;
  #L3d8d4e.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8d54.  v2:= temp @kind object;
  #L3d8d56.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8d68.  v0:= "source1 is null" @kind object;
  #L3d8d6c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8d72.  v0:= "source2 is null" @kind object;
  #L3d8d76.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8d7c.  v0:= "source3 is null" @kind object;
  #L3d8d80.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8d86.  v0:= "source4 is null" @kind object;
  #L3d8d8a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8d90.  v0:= 4I;
  #L3d8d92.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d8d96.  v1:= 0I;
  #L3d8d98.  v0[v1]:= v2 @kind object;
  #L3d8d9c.  v2:= 1I;
  #L3d8d9e.  v0[v2]:= v3 @kind object;
  #L3d8da2.  v2:= 2I;
  #L3d8da4.  v0[v2]:= v4 @kind object;
  #L3d8da8.  v2:= 3I;
  #L3d8daa.  v0[v2]:= v5 @kind object;
  #L3d8dae.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8db4.  v2:= temp @kind object;
  #L3d8db6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8dc8.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8dce.  v2:= temp @kind object;
  #L3d8dd0.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d8dd6.  v0:= temp @kind object;
  #L3d8dd8.  v1:= 1I;
  #L3d8dda.  call temp:= `flatMap`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d8de0.  v2:= temp @kind object;
  #L3d8de2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8df4.  v0:= 2147483647I;
  #L3d8dfa.  call temp:= `mergeDelayError`(v1, v0) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3d8e00.  v1:= temp @kind object;
  #L3d8e02.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v7 @kind object, `int` v8 ) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d8e14.  v0:= "source is null" @kind object;
  #L3d8e18.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8e1e.  v0:= "maxConcurrency" @kind object;
  #L3d8e22.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d8e28.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapPublisher`;
  #L3d8e2c.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3d8e32.  v3:= temp @kind object;
  #L3d8e34.  v4:= 1I;
  #L3d8e36.  v6:= 1I;
  #L3d8e38.  v1:= v0 @kind object;
  #L3d8e3a.  v2:= v7 @kind object;
  #L3d8e3c.  v5:= v8;
  #L3d8e3e.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L3d8e44.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8e4a.  v7:= temp @kind object;
  #L3d8e4c.  return v7 @kind object;
}
procedure `io.reactivex.Maybe` `never`() @signature `Lio/reactivex/Maybe;.never:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d98e0.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeNever.INSTANCE` @type ^`io.reactivex.internal.operators.maybe.MaybeNever` @kind object;
  #L3d98e4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d98ea.  v0:= temp @kind object;
  #L3d98ec.  return v0 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da5c0.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L3da5c6.  v0:= temp @kind object;
  #L3da5c8.  call temp:= `sequenceEqual`(v1, v2, v0) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @kind static;
  #L3da5ce.  v1:= temp @kind object;
  #L3da5d0.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da5e4.  v0:= "source1 is null" @kind object;
  #L3da5e8.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da5ee.  v0:= "source2 is null" @kind object;
  #L3da5f2.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da5f8.  v0:= "isEqual is null" @kind object;
  #L3da5fc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da602.  v0:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle`;
  #L3da606.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3da60c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3da612.  v1:= temp @kind object;
  #L3da614.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9e34.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d9e3a.  v0:= temp @kind object;
  #L3d9e3c.  call temp:= `timer`(v1, v3, v0) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L3d9e42.  v1:= temp @kind object;
  #L3d9e44.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timer`(`long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d9e58.  v0:= "unit is null" @kind object;
  #L3d9e5c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9e62.  v0:= "scheduler is null" @kind object;
  #L3d9e66.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9e6c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimer`;
  #L3d9e70.  v1:= 0L;
  #L3d9e74.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d9e7a.  v3:= temp @kind wide;
  #L3d9e7c.  call `<init>`(v0, v3, v5, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimer;.<init>:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d9e82.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9e88.  v3:= temp @kind object;
  #L3d9e8a.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `unsafeCreate`(`io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.unsafeCreate:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9e9c.  v0:= instanceof @variable v1 @type ^`io.reactivex.Maybe` @kind boolean;
  #L3d9ea0.  if v0 != 0 then goto L3d9ec2;
  #L3d9ea4.  v0:= "onSubscribe is null" @kind object;
  #L3d9ea8.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9eae.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsafeCreate`;
  #L3d9eb2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsafeCreate;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9eb8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9ebe.  v1:= temp @kind object;
  #L3d9ec0.  return v1 @kind object;
  #L3d9ec2.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d9ec6.  v0:= "unsafeCreate(Maybe) should be upgraded" @kind object;
  #L3d9eca.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d9ed0.  throw v1;
}
procedure `io.reactivex.Maybe` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9f14.  v0:= 1I;
  #L3d9f16.  call temp:= `using`(v1, v2, v3, v0) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Maybe;` @kind static;
  #L3d9f1c.  v1:= temp @kind object;
  #L3d9f1e.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9f30.  v0:= "resourceSupplier is null" @kind object;
  #L3d9f34.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9f3a.  v0:= "sourceSupplier is null" @kind object;
  #L3d9f3e.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9f44.  v0:= "disposer is null" @kind object;
  #L3d9f48.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9f4e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUsing`;
  #L3d9f52.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L3d9f58.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9f5e.  v1:= temp @kind object;
  #L3d9f60.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `wrap`(`io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d9f74.  v0:= instanceof @variable v1 @type ^`io.reactivex.Maybe` @kind boolean;
  #L3d9f78.  if v0 == 0 then goto L3d9f8a;
  #L3d9f7c.  v1:= (`io.reactivex.Maybe`) v1 @kind object;
  #L3d9f80.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9f86.  v1:= temp @kind object;
  #L3d9f88.  return v1 @kind object;
  #L3d9f8a.  v0:= "onSubscribe is null" @kind object;
  #L3d9f8e.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9f94.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsafeCreate`;
  #L3d9f98.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsafeCreate;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9f9e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9fa4.  v1:= temp @kind object;
  #L3d9fa6.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.MaybeSource` v9 @kind object, `io.reactivex.MaybeSource` v10 @kind object, `io.reactivex.functions.Function9` v11 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function9;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d9fb8.  v0:= "source1 is null" @kind object;
  #L3d9fbc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9fc2.  v0:= "source2 is null" @kind object;
  #L3d9fc6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9fcc.  v0:= "source3 is null" @kind object;
  #L3d9fd0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9fd6.  v0:= "source4 is null" @kind object;
  #L3d9fda.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9fe0.  v0:= "source5 is null" @kind object;
  #L3d9fe4.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9fea.  v0:= "source6 is null" @kind object;
  #L3d9fee.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9ff4.  v0:= "source7 is null" @kind object;
  #L3d9ff8.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9ffe.  v0:= "source8 is null" @kind object;
  #L3da002.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da008.  v0:= "source9 is null" @kind object;
  #L3da00c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da012.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L3da018.  v11:= temp @kind object;
  #L3da01a.  v0:= 9I;
  #L3da01e.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3da022.  v1:= 0I;
  #L3da024.  v0[v1]:= v2 @kind object;
  #L3da028.  v2:= 1I;
  #L3da02a.  v0[v2]:= v3 @kind object;
  #L3da02e.  v2:= 2I;
  #L3da030.  v0[v2]:= v4 @kind object;
  #L3da034.  v2:= 3I;
  #L3da036.  v0[v2]:= v5 @kind object;
  #L3da03a.  v2:= 4I;
  #L3da03c.  v0[v2]:= v6 @kind object;
  #L3da040.  v2:= 5I;
  #L3da042.  v0[v2]:= v7 @kind object;
  #L3da046.  v2:= 6I;
  #L3da048.  v0[v2]:= v8 @kind object;
  #L3da04c.  v2:= 7I;
  #L3da04e.  v0[v2]:= v9 @kind object;
  #L3da052.  v2:= 8I;
  #L3da056.  v0[v2]:= v10 @kind object;
  #L3da05a.  call temp:= `zipArray`(v11, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3da060.  v2:= temp @kind object;
  #L3da062.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.MaybeSource` v9 @kind object, `io.reactivex.functions.Function8` v10 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function8;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3da074.  v0:= "source1 is null" @kind object;
  #L3da078.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da07e.  v0:= "source2 is null" @kind object;
  #L3da082.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da088.  v0:= "source3 is null" @kind object;
  #L3da08c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da092.  v0:= "source4 is null" @kind object;
  #L3da096.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da09c.  v0:= "source5 is null" @kind object;
  #L3da0a0.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da0a6.  v0:= "source6 is null" @kind object;
  #L3da0aa.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da0b0.  v0:= "source7 is null" @kind object;
  #L3da0b4.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da0ba.  v0:= "source8 is null" @kind object;
  #L3da0be.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da0c4.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L3da0ca.  v10:= temp @kind object;
  #L3da0cc.  v0:= 8I;
  #L3da0d0.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3da0d4.  v1:= 0I;
  #L3da0d6.  v0[v1]:= v2 @kind object;
  #L3da0da.  v2:= 1I;
  #L3da0dc.  v0[v2]:= v3 @kind object;
  #L3da0e0.  v2:= 2I;
  #L3da0e2.  v0[v2]:= v4 @kind object;
  #L3da0e6.  v2:= 3I;
  #L3da0e8.  v0[v2]:= v5 @kind object;
  #L3da0ec.  v2:= 4I;
  #L3da0ee.  v0[v2]:= v6 @kind object;
  #L3da0f2.  v2:= 5I;
  #L3da0f4.  v0[v2]:= v7 @kind object;
  #L3da0f8.  v2:= 6I;
  #L3da0fa.  v0[v2]:= v8 @kind object;
  #L3da0fe.  v2:= 7I;
  #L3da100.  v0[v2]:= v9 @kind object;
  #L3da104.  call temp:= `zipArray`(v10, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3da10a.  v2:= temp @kind object;
  #L3da10c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.functions.Function7` v9 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function7;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3da120.  v0:= "source1 is null" @kind object;
  #L3da124.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da12a.  v0:= "source2 is null" @kind object;
  #L3da12e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da134.  v0:= "source3 is null" @kind object;
  #L3da138.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da13e.  v0:= "source4 is null" @kind object;
  #L3da142.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da148.  v0:= "source5 is null" @kind object;
  #L3da14c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da152.  v0:= "source6 is null" @kind object;
  #L3da156.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da15c.  v0:= "source7 is null" @kind object;
  #L3da160.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da166.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L3da16c.  v9:= temp @kind object;
  #L3da16e.  v0:= 7I;
  #L3da170.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3da174.  v1:= 0I;
  #L3da176.  v0[v1]:= v2 @kind object;
  #L3da17a.  v2:= 1I;
  #L3da17c.  v0[v2]:= v3 @kind object;
  #L3da180.  v2:= 2I;
  #L3da182.  v0[v2]:= v4 @kind object;
  #L3da186.  v2:= 3I;
  #L3da188.  v0[v2]:= v5 @kind object;
  #L3da18c.  v2:= 4I;
  #L3da18e.  v0[v2]:= v6 @kind object;
  #L3da192.  v2:= 5I;
  #L3da194.  v0[v2]:= v7 @kind object;
  #L3da198.  v2:= 6I;
  #L3da19a.  v0[v2]:= v8 @kind object;
  #L3da19e.  call temp:= `zipArray`(v9, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3da1a4.  v2:= temp @kind object;
  #L3da1a6.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.functions.Function6` v8 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function6;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3da1b8.  v0:= "source1 is null" @kind object;
  #L3da1bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da1c2.  v0:= "source2 is null" @kind object;
  #L3da1c6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da1cc.  v0:= "source3 is null" @kind object;
  #L3da1d0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da1d6.  v0:= "source4 is null" @kind object;
  #L3da1da.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da1e0.  v0:= "source5 is null" @kind object;
  #L3da1e4.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da1ea.  v0:= "source6 is null" @kind object;
  #L3da1ee.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da1f4.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L3da1fa.  v8:= temp @kind object;
  #L3da1fc.  v0:= 6I;
  #L3da1fe.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3da202.  v1:= 0I;
  #L3da204.  v0[v1]:= v2 @kind object;
  #L3da208.  v2:= 1I;
  #L3da20a.  v0[v2]:= v3 @kind object;
  #L3da20e.  v2:= 2I;
  #L3da210.  v0[v2]:= v4 @kind object;
  #L3da214.  v2:= 3I;
  #L3da216.  v0[v2]:= v5 @kind object;
  #L3da21a.  v2:= 4I;
  #L3da21c.  v0[v2]:= v6 @kind object;
  #L3da220.  v2:= 5I;
  #L3da222.  v0[v2]:= v7 @kind object;
  #L3da226.  call temp:= `zipArray`(v8, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3da22c.  v2:= temp @kind object;
  #L3da22e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function5;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3da240.  v0:= "source1 is null" @kind object;
  #L3da244.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da24a.  v0:= "source2 is null" @kind object;
  #L3da24e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da254.  v0:= "source3 is null" @kind object;
  #L3da258.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da25e.  v0:= "source4 is null" @kind object;
  #L3da262.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da268.  v0:= "source5 is null" @kind object;
  #L3da26c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da272.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L3da278.  v7:= temp @kind object;
  #L3da27a.  v0:= 5I;
  #L3da27c.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3da280.  v1:= 0I;
  #L3da282.  v0[v1]:= v2 @kind object;
  #L3da286.  v2:= 1I;
  #L3da288.  v0[v2]:= v3 @kind object;
  #L3da28c.  v2:= 2I;
  #L3da28e.  v0[v2]:= v4 @kind object;
  #L3da292.  v2:= 3I;
  #L3da294.  v0[v2]:= v5 @kind object;
  #L3da298.  v2:= 4I;
  #L3da29a.  v0[v2]:= v6 @kind object;
  #L3da29e.  call temp:= `zipArray`(v7, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3da2a4.  v2:= temp @kind object;
  #L3da2a6.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function4;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3da2b8.  v0:= "source1 is null" @kind object;
  #L3da2bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da2c2.  v0:= "source2 is null" @kind object;
  #L3da2c6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da2cc.  v0:= "source3 is null" @kind object;
  #L3da2d0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da2d6.  v0:= "source4 is null" @kind object;
  #L3da2da.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da2e0.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L3da2e6.  v6:= temp @kind object;
  #L3da2e8.  v0:= 4I;
  #L3da2ea.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3da2ee.  v1:= 0I;
  #L3da2f0.  v0[v1]:= v2 @kind object;
  #L3da2f4.  v2:= 1I;
  #L3da2f6.  v0[v2]:= v3 @kind object;
  #L3da2fa.  v2:= 2I;
  #L3da2fc.  v0[v2]:= v4 @kind object;
  #L3da300.  v2:= 3I;
  #L3da302.  v0[v2]:= v5 @kind object;
  #L3da306.  call temp:= `zipArray`(v6, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3da30c.  v2:= temp @kind object;
  #L3da30e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function3;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3da320.  v0:= "source1 is null" @kind object;
  #L3da324.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da32a.  v0:= "source2 is null" @kind object;
  #L3da32e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da334.  v0:= "source3 is null" @kind object;
  #L3da338.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da33e.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L3da344.  v5:= temp @kind object;
  #L3da346.  v0:= 3I;
  #L3da348.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3da34c.  v1:= 0I;
  #L3da34e.  v0[v1]:= v2 @kind object;
  #L3da352.  v2:= 1I;
  #L3da354.  v0[v2]:= v3 @kind object;
  #L3da358.  v2:= 2I;
  #L3da35a.  v0[v2]:= v4 @kind object;
  #L3da35e.  call temp:= `zipArray`(v5, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3da364.  v2:= temp @kind object;
  #L3da366.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3da378.  v0:= "source1 is null" @kind object;
  #L3da37c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da382.  v0:= "source2 is null" @kind object;
  #L3da386.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da38c.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3da392.  v4:= temp @kind object;
  #L3da394.  v0:= 2I;
  #L3da396.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3da39a.  v1:= 0I;
  #L3da39c.  v0[v1]:= v2 @kind object;
  #L3da3a0.  v2:= 1I;
  #L3da3a2.  v0[v2]:= v3 @kind object;
  #L3da3a6.  call temp:= `zipArray`(v4, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3da3ac.  v2:= temp @kind object;
  #L3da3ae.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da3c0.  v0:= "zipper is null" @kind object;
  #L3da3c4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da3ca.  v0:= "sources is null" @kind object;
  #L3da3ce.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da3d4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipIterable`;
  #L3da3d8.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3da3de.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3da3e4.  v1:= temp @kind object;
  #L3da3e6.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `zipArray`(`io.reactivex.functions.Function` v1 @kind object, `io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da3f8.  v0:= "sources is null" @kind object;
  #L3da3fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da402.  v0:= length @variable v2;
  #L3da404.  if v0 != 0 then goto L3da412;
  #L3da408.  call temp:= `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @kind static;
  #L3da40e.  v1:= temp @kind object;
  #L3da410.  return v1 @kind object;
  #L3da412.  v0:= "zipper is null" @kind object;
  #L3da416.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da41c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray`;
  #L3da420.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray;.<init>:([Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3da426.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3da42c.  v1:= temp @kind object;
  #L3da42e.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `ambWith`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.ambWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d8fd0.  v0:= "other is null" @kind object;
  #L3d8fd4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8fda.  v0:= 2I;
  #L3d8fdc.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3d8fe0.  v1:= 0I;
  #L3d8fe2.  v0[v1]:= v2 @kind object;
  #L3d8fe6.  v1:= 1I;
  #L3d8fe8.  v0[v1]:= v3 @kind object;
  #L3d8fec.  call temp:= `ambArray`(v0) @signature `Lio/reactivex/Maybe;.ambArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3d8ff2.  v3:= temp @kind object;
  #L3d8ff4.  return v3 @kind object;
}
procedure `java.lang.Object` `as`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeConverter` v2 @kind object) @signature `Lio/reactivex/Maybe;.as:(Lio/reactivex/MaybeConverter;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da7b8.  v0:= "converter is null" @kind object;
  #L3da7bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da7c2.  v2:= temp @kind object;
  #L3da7c4.  v2:= (`io.reactivex.MaybeConverter`) v2 @kind object;
  #L3da7c8.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/MaybeConverter;.apply:(Lio/reactivex/Maybe;)Ljava/lang/Object;` @kind interface;
  #L3da7ce.  v2:= temp @kind object;
  #L3da7d0.  return v2 @kind object;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da7e4.  v0:= new `io.reactivex.internal.observers.BlockingMultiObserver`;
  #L3da7e8.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L3da7ee.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3da7f4.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3da7fa.  v0:= temp @kind object;
  #L3da7fc.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da810.  v0:= "defaultValue is null" @kind object;
  #L3da814.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da81a.  v0:= new `io.reactivex.internal.observers.BlockingMultiObserver`;
  #L3da81e.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L3da824.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3da82a.  call temp:= `blockingGet`(v0, v2) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3da830.  v2:= temp @kind object;
  #L3da832.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `cache`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.cache:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9008.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache`;
  #L3d900c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9012.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9018.  v0:= temp @kind object;
  #L3d901a.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `cast`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Maybe;.cast:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d902c.  v0:= "clazz is null" @kind object;
  #L3d9030.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9036.  call temp:= `castFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.castFunction:(Ljava/lang/Class;)Lio/reactivex/functions/Function;` @kind static;
  #L3d903c.  v2:= temp @kind object;
  #L3d903e.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Maybe;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9044.  v2:= temp @kind object;
  #L3d9046.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `compose`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeTransformer` v2 @kind object) @signature `Lio/reactivex/Maybe;.compose:(Lio/reactivex/MaybeTransformer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9058.  v0:= "transformer is null" @kind object;
  #L3d905c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9062.  v2:= temp @kind object;
  #L3d9064.  v2:= (`io.reactivex.MaybeTransformer`) v2 @kind object;
  #L3d9068.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/MaybeTransformer;.apply:(Lio/reactivex/Maybe;)Lio/reactivex/MaybeSource;` @kind interface;
  #L3d906e.  v2:= temp @kind object;
  #L3d9070.  call temp:= `wrap`(v2) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3d9076.  v2:= temp @kind object;
  #L3d9078.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `concatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d908c.  v0:= "mapper is null" @kind object;
  #L3d9090.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9096.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L3d909a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d90a0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d90a6.  v2:= temp @kind object;
  #L3d90a8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.concatWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8a34.  v0:= "other is null" @kind object;
  #L3d8a38.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8a3e.  call temp:= `concat`(v1, v2) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8a44.  v2:= temp @kind object;
  #L3d8a46.  return v2 @kind object;
}
procedure `io.reactivex.Single` `contains`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.contains:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da518.  v0:= "item is null" @kind object;
  #L3da51c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da522.  v0:= new `io.reactivex.internal.operators.maybe.MaybeContains`;
  #L3da526.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L3da52c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3da532.  v2:= temp @kind object;
  #L3da534.  return v2 @kind object;
}
procedure `io.reactivex.Single` `count`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.count:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da548.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCount`;
  #L3da54c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3da552.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3da558.  v0:= temp @kind object;
  #L3da55a.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `defaultIfEmpty`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.defaultIfEmpty:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d90ec.  v0:= "item is null" @kind object;
  #L3d90f0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d90f6.  call temp:= `just`(v2) @signature `Lio/reactivex/Maybe;.just:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @kind static;
  #L3d90fc.  v2:= temp @kind object;
  #L3d90fe.  call temp:= `switchIfEmpty`(v1, v2) @signature `Lio/reactivex/Maybe;.switchIfEmpty:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9104.  v2:= temp @kind object;
  #L3d9106.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9148.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d914e.  v0:= temp @kind object;
  #L3d9150.  call temp:= `delay`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9156.  v2:= temp @kind object;
  #L3d9158.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d916c.  v0:= "unit is null" @kind object;
  #L3d9170.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9176.  v0:= "scheduler is null" @kind object;
  #L3d917a.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9180.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelay`;
  #L3d9184.  v1:= 0L;
  #L3d9188.  call temp:= `max`(v1, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d918e.  v3:= temp @kind wide;
  #L3d9190.  v1:= v0 @kind object;
  #L3d9192.  v2:= v7 @kind object;
  #L3d9194.  v5:= v10 @kind object;
  #L3d9196.  v6:= v11 @kind object;
  #L3d9198.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay;.<init>:(Lio/reactivex/MaybeSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d919e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d91a4.  v8:= temp @kind object;
  #L3d91a6.  return v8 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.delay:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d91b8.  v0:= "delayIndicator is null" @kind object;
  #L3d91bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d91c2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher`;
  #L3d91c6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d91cc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d91d2.  v2:= temp @kind object;
  #L3d91d4.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d91e8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d91ee.  v0:= temp @kind object;
  #L3d91f0.  call temp:= `delaySubscription`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d91f6.  v2:= temp @kind object;
  #L3d91f8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d920c.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d9212.  v1:= temp @kind object;
  #L3d9214.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Maybe;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d921a.  v1:= temp @kind object;
  #L3d921c.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9230.  v0:= "subscriptionIndicator is null" @kind object;
  #L3d9234.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d923a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher`;
  #L3d923e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d9244.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d924a.  v2:= temp @kind object;
  #L3d924c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doAfterSuccess`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Maybe;.doAfterSuccess:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9260.  v0:= "doAfterSuccess is null" @kind object;
  #L3d9264.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d926a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess`;
  #L3d926e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3d9274.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d927a.  v2:= temp @kind object;
  #L3d927c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doAfterTerminate`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doAfterTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d9290.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3d9294.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d929a.  v2:= temp @kind object;
  #L3d929c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d92a2.  v3:= temp @kind object;
  #L3d92a4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d92aa.  v4:= temp @kind object;
  #L3d92ac.  v5:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d92b0.  v0:= "onAfterTerminate is null" @kind object;
  #L3d92b4.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d92ba.  v10:= temp @kind object;
  #L3d92bc.  v6:= v10 @kind object;
  #L3d92be.  v6:= (`io.reactivex.functions.Action`) v6 @kind object;
  #L3d92c2.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d92c6.  v0:= v8 @kind object;
  #L3d92c8.  v1:= v9 @kind object;
  #L3d92ca.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d92d0.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d92d6.  v10:= temp @kind object;
  #L3d92d8.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doFinally`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/Maybe;.doFinally:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d92ec.  v0:= "onFinally is null" @kind object;
  #L3d92f0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d92f6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoFinally`;
  #L3d92fa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d9300.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9306.  v2:= temp @kind object;
  #L3d9308.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doOnComplete`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d931c.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3d9320.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d9326.  v2:= temp @kind object;
  #L3d9328.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d932e.  v3:= temp @kind object;
  #L3d9330.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d9336.  v4:= temp @kind object;
  #L3d9338.  v0:= "onComplete is null" @kind object;
  #L3d933c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9342.  v10:= temp @kind object;
  #L3d9344.  v5:= v10 @kind object;
  #L3d9346.  v5:= (`io.reactivex.functions.Action`) v5 @kind object;
  #L3d934a.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d934e.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d9352.  v0:= v8 @kind object;
  #L3d9354.  v1:= v9 @kind object;
  #L3d9356.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d935c.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9362.  v10:= temp @kind object;
  #L3d9364.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnDispose`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnDispose:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d9378.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3d937c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d9382.  v2:= temp @kind object;
  #L3d9384.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d938a.  v3:= temp @kind object;
  #L3d938c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d9392.  v4:= temp @kind object;
  #L3d9394.  v5:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d9398.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d939c.  v0:= "onDispose is null" @kind object;
  #L3d93a0.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d93a6.  v10:= temp @kind object;
  #L3d93a8.  v7:= v10 @kind object;
  #L3d93aa.  v7:= (`io.reactivex.functions.Action`) v7 @kind object;
  #L3d93ae.  v0:= v8 @kind object;
  #L3d93b0.  v1:= v9 @kind object;
  #L3d93b2.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d93b8.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d93be.  v10:= temp @kind object;
  #L3d93c0.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnError`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d93d4.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3d93d8.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d93de.  v2:= temp @kind object;
  #L3d93e0.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d93e6.  v3:= temp @kind object;
  #L3d93e8.  v0:= "onError is null" @kind object;
  #L3d93ec.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d93f2.  v10:= temp @kind object;
  #L3d93f4.  v4:= v10 @kind object;
  #L3d93f6.  v4:= (`io.reactivex.functions.Consumer`) v4 @kind object;
  #L3d93fa.  v5:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d93fe.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d9402.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d9406.  v0:= v8 @kind object;
  #L3d9408.  v1:= v9 @kind object;
  #L3d940a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d9410.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9416.  v10:= temp @kind object;
  #L3d9418.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnEvent`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BiConsumer` v2 @kind object) @signature `Lio/reactivex/Maybe;.doOnEvent:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d942c.  v0:= "onEvent is null" @kind object;
  #L3d9430.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9436.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoOnEvent`;
  #L3d943a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L3d9440.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9446.  v2:= temp @kind object;
  #L3d9448.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doOnSubscribe`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d945c.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3d9460.  v0:= "onSubscribe is null" @kind object;
  #L3d9464.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d946a.  v10:= temp @kind object;
  #L3d946c.  v2:= v10 @kind object;
  #L3d946e.  v2:= (`io.reactivex.functions.Consumer`) v2 @kind object;
  #L3d9472.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d9478.  v3:= temp @kind object;
  #L3d947a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d9480.  v4:= temp @kind object;
  #L3d9482.  v5:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d9486.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d948a.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d948e.  v0:= v8 @kind object;
  #L3d9490.  v1:= v9 @kind object;
  #L3d9492.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d9498.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d949e.  v10:= temp @kind object;
  #L3d94a0.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnSuccess`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnSuccess:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d94b4.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3d94b8.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d94be.  v2:= temp @kind object;
  #L3d94c0.  v0:= "onSubscribe is null" @kind object;
  #L3d94c4.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d94ca.  v10:= temp @kind object;
  #L3d94cc.  v3:= v10 @kind object;
  #L3d94ce.  v3:= (`io.reactivex.functions.Consumer`) v3 @kind object;
  #L3d94d2.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d94d8.  v4:= temp @kind object;
  #L3d94da.  v5:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d94de.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d94e2.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d94e6.  v0:= v8 @kind object;
  #L3d94e8.  v1:= v9 @kind object;
  #L3d94ea.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d94f0.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d94f6.  v10:= temp @kind object;
  #L3d94f8.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `filter`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d958c.  v0:= "predicate is null" @kind object;
  #L3d9590.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9596.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFilter`;
  #L3d959a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFilter;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d95a0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d95a6.  v2:= temp @kind object;
  #L3d95a8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d95bc.  v0:= "mapper is null" @kind object;
  #L3d95c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d95c6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L3d95ca.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d95d0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d95d6.  v2:= temp @kind object;
  #L3d95d8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d95ec.  v0:= "mapper is null" @kind object;
  #L3d95f0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d95f6.  v0:= "resultSelector is null" @kind object;
  #L3d95fa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9600.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapBiSelector`;
  #L3d9604.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapBiSelector;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d960a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9610.  v2:= temp @kind object;
  #L3d9612.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9624.  v0:= "onSuccessMapper is null" @kind object;
  #L3d9628.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d962e.  v0:= "onErrorMapper is null" @kind object;
  #L3d9632.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9638.  v0:= "onCompleteSupplier is null" @kind object;
  #L3d963c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9642.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification`;
  #L3d9646.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d964c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9652.  v2:= temp @kind object;
  #L3d9654.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d86c4.  v0:= "mapper is null" @kind object;
  #L3d86c8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d86ce.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable`;
  #L3d86d2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d86d8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3d86de.  v2:= temp @kind object;
  #L3d86e0.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `flatMapObservable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapObservable:(Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da47c.  v0:= "mapper is null" @kind object;
  #L3da480.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da486.  v0:= new `io.reactivex.internal.operators.mixed.MaybeFlatMapObservable`;
  #L3da48a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3da490.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L3da496.  v2:= temp @kind object;
  #L3da498.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapPublisher`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapPublisher:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8a58.  v0:= "mapper is null" @kind object;
  #L3d8a5c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8a62.  v0:= new `io.reactivex.internal.operators.mixed.MaybeFlatMapPublisher`;
  #L3d8a66.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapPublisher;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d8a6c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8a72.  v2:= temp @kind object;
  #L3d8a74.  return v2 @kind object;
}
procedure `io.reactivex.Single` `flatMapSingle`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da56c.  v0:= "mapper is null" @kind object;
  #L3da570.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da576.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle`;
  #L3da57a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3da580.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3da586.  v2:= temp @kind object;
  #L3da588.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMapSingleElement`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapSingleElement:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9668.  v0:= "mapper is null" @kind object;
  #L3d966c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9672.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement`;
  #L3d9676.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d967c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9682.  v2:= temp @kind object;
  #L3d9684.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flattenAsFlowable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flattenAsFlowable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8a88.  v0:= "mapper is null" @kind object;
  #L3d8a8c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8a92.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable`;
  #L3d8a96.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d8a9c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8aa2.  v2:= temp @kind object;
  #L3d8aa4.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `flattenAsObservable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flattenAsObservable:(Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da4ac.  v0:= "mapper is null" @kind object;
  #L3da4b0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da4b6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable`;
  #L3da4ba.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3da4c0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L3da4c6.  v2:= temp @kind object;
  #L3da4c8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `hide`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.hide:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d97f4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeHide`;
  #L3d97f8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeHide;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d97fe.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9804.  v0:= temp @kind object;
  #L3d9806.  return v0 @kind object;
}
procedure `io.reactivex.Completable` `ignoreElement`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.ignoreElement:()Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d86f4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeIgnoreElementCompletable`;
  #L3d86f8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeIgnoreElementCompletable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d86fe.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3d8704.  v0:= temp @kind object;
  #L3d8706.  return v0 @kind object;
}
procedure `io.reactivex.Single` `isEmpty`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.isEmpty:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da59c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle`;
  #L3da5a0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3da5a6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3da5ac.  v0:= temp @kind object;
  #L3da5ae.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `lift`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeOperator` v2 @kind object) @signature `Lio/reactivex/Maybe;.lift:(Lio/reactivex/MaybeOperator;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9848.  v0:= "onLift is null" @kind object;
  #L3d984c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9852.  v0:= new `io.reactivex.internal.operators.maybe.MaybeLift`;
  #L3d9856.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeLift;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeOperator;)V` @kind direct;
  #L3d985c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9862.  v2:= temp @kind object;
  #L3d9864.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `map`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9878.  v0:= "mapper is null" @kind object;
  #L3d987c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9882.  v0:= new `io.reactivex.internal.operators.maybe.MaybeMap`;
  #L3d9886.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d988c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9892.  v2:= temp @kind object;
  #L3d9894.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8e60.  v0:= "other is null" @kind object;
  #L3d8e64.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8e6a.  call temp:= `merge`(v1, v2) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3d8e70.  v2:= temp @kind object;
  #L3d8e72.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `observeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9900.  v0:= "scheduler is null" @kind object;
  #L3d9904.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d990a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeObserveOn`;
  #L3d990e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d9914.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d991a.  v2:= temp @kind object;
  #L3d991c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `ofType`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Maybe;.ofType:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9930.  v0:= "clazz is null" @kind object;
  #L3d9934.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d993a.  call temp:= `isInstanceOf`(v2) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3d9940.  v0:= temp @kind object;
  #L3d9942.  call temp:= `filter`(v1, v0) @signature `Lio/reactivex/Maybe;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9948.  v0:= temp @kind object;
  #L3d994a.  call temp:= `cast`(v0, v2) @signature `Lio/reactivex/Maybe;.cast:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9950.  v2:= temp @kind object;
  #L3d9952.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorComplete`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.onErrorComplete:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9964.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3d996a.  v0:= temp @kind object;
  #L3d996c.  call temp:= `onErrorComplete`(v1, v0) @signature `Lio/reactivex/Maybe;.onErrorComplete:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9972.  v0:= temp @kind object;
  #L3d9974.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorComplete`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorComplete:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9988.  v0:= "predicate is null" @kind object;
  #L3d998c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9992.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete`;
  #L3d9996.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d999c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d99a2.  v2:= temp @kind object;
  #L3d99a4.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorResumeNext`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d99b8.  v0:= "next is null" @kind object;
  #L3d99bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d99c2.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3d99c8.  v2:= temp @kind object;
  #L3d99ca.  call temp:= `onErrorResumeNext`(v1, v2) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d99d0.  v2:= temp @kind object;
  #L3d99d2.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorResumeNext`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d99e4.  v0:= "resumeFunction is null" @kind object;
  #L3d99e8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d99ee.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext`;
  #L3d99f2.  v1:= 1I;
  #L3d99f4.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d99fa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9a00.  v3:= temp @kind object;
  #L3d9a02.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorReturn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9a14.  v0:= "valueSupplier is null" @kind object;
  #L3d9a18.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9a1e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorReturn`;
  #L3d9a22.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorReturn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d9a28.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9a2e.  v2:= temp @kind object;
  #L3d9a30.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorReturnItem`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorReturnItem:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9a44.  v0:= "item is null" @kind object;
  #L3d9a48.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9a4e.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3d9a54.  v2:= temp @kind object;
  #L3d9a56.  call temp:= `onErrorReturn`(v1, v2) @signature `Lio/reactivex/Maybe;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9a5c.  v2:= temp @kind object;
  #L3d9a5e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onExceptionResumeNext`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.onExceptionResumeNext:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d9a70.  v0:= "next is null" @kind object;
  #L3d9a74.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9a7a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext`;
  #L3d9a7e.  call temp:= `justFunction`(v3) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3d9a84.  v3:= temp @kind object;
  #L3d9a86.  v1:= 0I;
  #L3d9a88.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d9a8e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9a94.  v3:= temp @kind object;
  #L3d9a96.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `onTerminateDetach`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.onTerminateDetach:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9aa8.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDetach`;
  #L3d9aac.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9ab2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9ab8.  v0:= temp @kind object;
  #L3d9aba.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Maybe` v2 @kind this) @signature `Lio/reactivex/Maybe;.repeat:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d8e84.  v0:= 9223372036854775807L;
  #L3d8e8e.  call temp:= `repeat`(v2, v0) @signature `Lio/reactivex/Maybe;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L3d8e94.  v0:= temp @kind object;
  #L3d8e96.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Maybe` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Maybe;.repeat:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8ea8.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d8eae.  v0:= temp @kind object;
  #L3d8eb0.  call temp:= `repeat`(v0, v2) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L3d8eb6.  v2:= temp @kind object;
  #L3d8eb8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatUntil`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BooleanSupplier` v2 @kind object) @signature `Lio/reactivex/Maybe;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8ecc.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d8ed2.  v0:= temp @kind object;
  #L3d8ed4.  call temp:= `repeatUntil`(v0, v2) @signature `Lio/reactivex/Flowable;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d8eda.  v2:= temp @kind object;
  #L3d8edc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatWhen`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8ef0.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d8ef6.  v0:= temp @kind object;
  #L3d8ef8.  call temp:= `repeatWhen`(v0, v2) @signature `Lio/reactivex/Flowable;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d8efe.  v2:= temp @kind object;
  #L3d8f00.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v3 @kind this) @signature `Lio/reactivex/Maybe;.retry:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d9acc.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3d9ad2.  v0:= temp @kind object;
  #L3d9ad4.  v1:= 9223372036854775807L;
  #L3d9ade.  call temp:= `retry`(v3, v1, v0) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9ae4.  v0:= temp @kind object;
  #L3d9ae6.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Maybe;.retry:(J)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9b48.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3d9b4e.  v0:= temp @kind object;
  #L3d9b50.  call temp:= `retry`(v1, v2, v0) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9b56.  v2:= temp @kind object;
  #L3d9b58.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9b6c.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d9b72.  v0:= temp @kind object;
  #L3d9b74.  call temp:= `retry`(v0, v2, v4) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d9b7a.  v2:= temp @kind object;
  #L3d9b7c.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L3d9b82.  v2:= temp @kind object;
  #L3d9b84.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BiPredicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9af8.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d9afe.  v0:= temp @kind object;
  #L3d9b00.  call temp:= `retry`(v0, v2) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d9b06.  v2:= temp @kind object;
  #L3d9b08.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L3d9b0e.  v2:= temp @kind object;
  #L3d9b10.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Maybe;.retry:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d9b24.  v0:= 9223372036854775807L;
  #L3d9b2e.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9b34.  v3:= temp @kind object;
  #L3d9b36.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `retryUntil`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.BooleanSupplier` v3 @kind object) @signature `Lio/reactivex/Maybe;.retryUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d9b98.  v0:= "stop is null" @kind object;
  #L3d9b9c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9ba2.  call temp:= `predicateReverseFor`(v3) @signature `Lio/reactivex/internal/functions/Functions;.predicateReverseFor:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3d9ba8.  v3:= temp @kind object;
  #L3d9baa.  v0:= 9223372036854775807L;
  #L3d9bb4.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9bba.  v3:= temp @kind object;
  #L3d9bbc.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `retryWhen`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9bd0.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d9bd6.  v0:= temp @kind object;
  #L3d9bd8.  call temp:= `retryWhen`(v0, v2) @signature `Lio/reactivex/Flowable;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d9bde.  v2:= temp @kind object;
  #L3d9be0.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L3d9be6.  v2:= temp @kind object;
  #L3d9be8.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v3 @kind this) @signature `Lio/reactivex/Maybe;.subscribe:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3da6b0.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3da6b6.  v0:= temp @kind object;
  #L3da6b8.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3da6bc.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3da6c0.  call temp:= `subscribe`(v3, v0, v1, v2) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3da6c6.  v0:= temp @kind object;
  #L3da6c8.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3da6dc.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3da6e0.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3da6e4.  call temp:= `subscribe`(v2, v3, v0, v1) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3da6ea.  v3:= temp @kind object;
  #L3da6ec.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da700.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3da704.  call temp:= `subscribe`(v1, v2, v3, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3da70a.  v2:= temp @kind object;
  #L3da70c.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da720.  v0:= "onSuccess is null" @kind object;
  #L3da724.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da72a.  v0:= "onError is null" @kind object;
  #L3da72e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da734.  v0:= "onComplete is null" @kind object;
  #L3da738.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da73e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCallbackObserver`;
  #L3da742.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3da748.  call temp:= `subscribeWith`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribeWith:(Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @kind virtual;
  #L3da74e.  v2:= temp @kind object;
  #L3da750.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L3da754.  return v2 @kind object;
}
procedure `void` `subscribe`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3da8a4.  v0:= "observer is null" @kind object;
  #L3da8a8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da8ae.  call temp:= `onSubscribe`(v2, v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Maybe;Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @kind static;
  #L3da8b4.  v3:= temp @kind object;
  #L3da8b6.  v0:= "The RxJavaPlugins.onSubscribe hook returned a null MaybeObserver. Please check the handler provided to RxJavaPlugins.setOnMaybeSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins" @kind object;
  #L3da8ba.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da8c0.  call `subscribeActual`(v2, v3) @signature `Lio/reactivex/Maybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3da8c6.  return @kind void;
  #L3da8c8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3da8ca.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3da8d0.  v0:= new `java.lang.NullPointerException`;
  #L3da8d4.  v1:= "subscribeActual failed" @kind object;
  #L3da8d8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da8de.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3da8e4.  throw v0;
  #L3da8e6.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L3da8e8.  throw v3;
  catch `java.lang.NullPointerException` @[L3da8c0..L3da8c6] goto L3da8e6;
  catch `java.lang.Throwable` @[L3da8c0..L3da8c6] goto L3da8c8;
}
procedure `void` `subscribeActual`(`io.reactivex.MaybeObserver` v0 @kind object) @signature `Lio/reactivex/Maybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `io.reactivex.Maybe` `subscribeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9bfc.  v0:= "scheduler is null" @kind object;
  #L3d9c00.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9c06.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSubscribeOn`;
  #L3d9c0a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d9c10.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9c16.  v2:= temp @kind object;
  #L3d9c18.  return v2 @kind object;
}
procedure `io.reactivex.MaybeObserver` `subscribeWith`(`io.reactivex.Maybe` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/Maybe;.subscribeWith:(Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3da464.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3da46a.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `switchIfEmpty`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.switchIfEmpty:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9c2c.  v0:= "other is null" @kind object;
  #L3d9c30.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9c36.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty`;
  #L3d9c3a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9c40.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9c46.  v2:= temp @kind object;
  #L3d9c48.  return v2 @kind object;
}
procedure `io.reactivex.Single` `switchIfEmpty`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.switchIfEmpty:(Lio/reactivex/SingleSource;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da628.  v0:= "other is null" @kind object;
  #L3da62c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da632.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmptySingle`;
  #L3da636.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmptySingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/SingleSource;)V` @kind direct;
  #L3da63c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3da642.  v2:= temp @kind object;
  #L3da644.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `takeUntil`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.takeUntil:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9c5c.  v0:= "other is null" @kind object;
  #L3d9c60.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9c66.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe`;
  #L3d9c6a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9c70.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9c76.  v2:= temp @kind object;
  #L3d9c78.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `takeUntil`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9c8c.  v0:= "other is null" @kind object;
  #L3d9c90.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9c96.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher`;
  #L3d9c9a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d9ca0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9ca6.  v2:= temp @kind object;
  #L3d9ca8.  return v2 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `test`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.test:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da768.  v0:= new `io.reactivex.observers.TestObserver`;
  #L3da76c.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L3da772.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3da778.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `test`(`io.reactivex.Maybe` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/Maybe;.test:(Z)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da78c.  v0:= new `io.reactivex.observers.TestObserver`;
  #L3da790.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L3da796.  if v2 == 0 then goto L3da7a0;
  #L3da79a.  call `cancel`(v0) @signature `Lio/reactivex/observers/TestObserver;.cancel:()V` @kind virtual;
  #L3da7a0.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3da7a6.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9d24.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d9d2a.  v0:= temp @kind object;
  #L3d9d2c.  call temp:= `timeout`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9d32.  v2:= temp @kind object;
  #L3d9d34.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.MaybeSource` v11 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d9d48.  v0:= "other is null" @kind object;
  #L3d9d4c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9d52.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d9d58.  v5:= temp @kind object;
  #L3d9d5a.  v1:= v7 @kind object;
  #L3d9d5c.  v2:= v8 @kind wide;
  #L3d9d5e.  v4:= v10 @kind object;
  #L3d9d60.  v6:= v11 @kind object;
  #L3d9d62.  call temp:= `timeout`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9d68.  v8:= temp @kind object;
  #L3d9d6a.  return v8 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d9d7c.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L3d9d82.  v1:= temp @kind object;
  #L3d9d84.  call temp:= `timeout`(v0, v1) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9d8a.  v1:= temp @kind object;
  #L3d9d8c.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9da0.  v0:= "fallback is null" @kind object;
  #L3d9da4.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9daa.  call temp:= `timer`(v2, v4, v5) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L3d9db0.  v2:= temp @kind object;
  #L3d9db2.  call temp:= `timeout`(v1, v2, v6) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L3d9db8.  v2:= temp @kind object;
  #L3d9dba.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d9cbc.  v0:= "timeoutIndicator is null" @kind object;
  #L3d9cc0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9cc6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe`;
  #L3d9cca.  v1:= 0I;
  #L3d9ccc.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9cd2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9cd8.  v3:= temp @kind object;
  #L3d9cda.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9cec.  v0:= "timeoutIndicator is null" @kind object;
  #L3d9cf0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9cf6.  v0:= "fallback is null" @kind object;
  #L3d9cfa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9d00.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe`;
  #L3d9d04.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9d0a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9d10.  v2:= temp @kind object;
  #L3d9d12.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d9dcc.  v0:= "timeoutIndicator is null" @kind object;
  #L3d9dd0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9dd6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher`;
  #L3d9dda.  v1:= 0I;
  #L3d9ddc.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9de2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9de8.  v3:= temp @kind object;
  #L3d9dea.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9dfc.  v0:= "timeoutIndicator is null" @kind object;
  #L3d9e00.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9e06.  v0:= "fallback is null" @kind object;
  #L3d9e0a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9e10.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher`;
  #L3d9e14.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d9e1a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9e20.  v2:= temp @kind object;
  #L3d9e22.  return v2 @kind object;
}
procedure `java.lang.Object` `to`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da844.  v0:= "convert is null" @kind object;
  #L3da848.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da84e.  v2:= temp @kind object;
  #L3da850.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L3da854.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3da85a.  v2:= temp @kind object;
  #L3da85c.  return v2 @kind object;
  #L3da85e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3da860.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3da866.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3da86c.  v2:= temp @kind object;
  #L3da86e.  throw v2;
  catch `java.lang.Throwable` @[L3da844..L3da85c] goto L3da85e;
}
procedure `io.reactivex.Flowable` `toFlowable`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8f14.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.FuseToFlowable` @kind boolean;
  #L3d8f18.  if v0 == 0 then goto L3d8f2c;
  #L3d8f1c.  v0:= v1 @kind object;
  #L3d8f1e.  v0:= (`io.reactivex.internal.fuseable.FuseToFlowable`) v0 @kind object;
  #L3d8f22.  call temp:= `fuseToFlowable`(v0) @signature `Lio/reactivex/internal/fuseable/FuseToFlowable;.fuseToFlowable:()Lio/reactivex/Flowable;` @kind interface;
  #L3d8f28.  v0:= temp @kind object;
  #L3d8f2a.  return v0 @kind object;
  #L3d8f2c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L3d8f30.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d8f36.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d8f3c.  v0:= temp @kind object;
  #L3d8f3e.  return v0 @kind object;
}
procedure `io.reactivex.Observable` `toObservable`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.toObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da4dc.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.FuseToObservable` @kind boolean;
  #L3da4e0.  if v0 == 0 then goto L3da4f4;
  #L3da4e4.  v0:= v1 @kind object;
  #L3da4e6.  v0:= (`io.reactivex.internal.fuseable.FuseToObservable`) v0 @kind object;
  #L3da4ea.  call temp:= `fuseToObservable`(v0) @signature `Lio/reactivex/internal/fuseable/FuseToObservable;.fuseToObservable:()Lio/reactivex/Observable;` @kind interface;
  #L3da4f0.  v0:= temp @kind object;
  #L3da4f2.  return v0 @kind object;
  #L3da4f4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToObservable`;
  #L3da4f8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3da4fe.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L3da504.  v0:= temp @kind object;
  #L3da506.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSingle`(`io.reactivex.Maybe` v2 @kind this) @signature `Lio/reactivex/Maybe;.toSingle:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3da658.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToSingle`;
  #L3da65c.  v1:= 0I;
  #L3da65e.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L3da664.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3da66a.  v0:= temp @kind object;
  #L3da66c.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSingle`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.toSingle:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da680.  v0:= "defaultValue is null" @kind object;
  #L3da684.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da68a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToSingle`;
  #L3da68e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L3da694.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3da69a.  v2:= temp @kind object;
  #L3da69c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `unsubscribeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.unsubscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d9ee4.  v0:= "scheduler is null" @kind object;
  #L3d9ee8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d9eee.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn`;
  #L3d9ef2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d9ef8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d9efe.  v2:= temp @kind object;
  #L3d9f00.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zipWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Maybe;.zipWith:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3da440.  v0:= "other is null" @kind object;
  #L3da444.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3da44a.  call temp:= `zip`(v1, v2, v3) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @kind static;
  #L3da450.  v2:= temp @kind object;
  #L3da452.  return v2 @kind object;
}
