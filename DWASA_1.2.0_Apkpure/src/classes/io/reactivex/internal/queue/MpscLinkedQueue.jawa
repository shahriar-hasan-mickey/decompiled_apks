record `io.reactivex.internal.queue.MpscLinkedQueue` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.fuseable.SimplePlainQueue` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.queue.MpscLinkedQueue.consumerNode` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.queue.MpscLinkedQueue.producerNode` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.queue.MpscLinkedQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43eef8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43eefe.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43ef02.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43ef08.  v1.`io.reactivex.internal.queue.MpscLinkedQueue.producerNode` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L43ef0c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43ef10.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43ef16.  v1.`io.reactivex.internal.queue.MpscLinkedQueue.consumerNode` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L43ef1a.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode`;
  #L43ef1e.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;.<init>:()V` @kind direct;
  #L43ef24.  call `spConsumerNode`(v1, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.spConsumerNode:(Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;)V` @kind virtual;
  #L43ef2a.  call temp:= `xchgProducerNode`(v1, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.xchgProducerNode:(Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;)Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @kind virtual;
  #L43ef30.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.queue.MpscLinkedQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ef44.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43ef4a.  v0:= temp @kind object;
  #L43ef4c.  if v0 == 0 then goto L43ef5e;
  #L43ef50.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L43ef56.  v0:= temp;
  #L43ef58.  if v0 != 0 then goto L43ef5e;
  #L43ef5c.  goto L43ef44;
  #L43ef5e.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.queue.MpscLinkedQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ed78.  call temp:= `lvConsumerNode`(v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.lvConsumerNode:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @kind virtual;
  #L43ed7e.  v0:= temp @kind object;
  #L43ed80.  call temp:= `lvProducerNode`(v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.lvProducerNode:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @kind virtual;
  #L43ed86.  v1:= temp @kind object;
  #L43ed88.  if v0 != v1 then goto L43ed90;
  #L43ed8c.  v0:= 1I;
  #L43ed8e.  goto L43ed92;
  #L43ed90.  v0:= 0I;
  #L43ed92.  return v0;
}
procedure `io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode` `lpConsumerNode`(`io.reactivex.internal.queue.MpscLinkedQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.lpConsumerNode:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @AccessFlag  {
    temp;
    v0;

  #L43ee04.  v0:= v1.`io.reactivex.internal.queue.MpscLinkedQueue.consumerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ee08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ee0e.  v0:= temp @kind object;
  #L43ee10.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode`) v0 @kind object;
  #L43ee14.  return v0 @kind object;
}
procedure `io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode` `lvConsumerNode`(`io.reactivex.internal.queue.MpscLinkedQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.lvConsumerNode:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @AccessFlag  {
    temp;
    v0;

  #L43ee28.  v0:= v1.`io.reactivex.internal.queue.MpscLinkedQueue.consumerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ee2c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ee32.  v0:= temp @kind object;
  #L43ee34.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode`) v0 @kind object;
  #L43ee38.  return v0 @kind object;
}
procedure `io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode` `lvProducerNode`(`io.reactivex.internal.queue.MpscLinkedQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.lvProducerNode:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @AccessFlag  {
    temp;
    v0;

  #L43ee4c.  v0:= v1.`io.reactivex.internal.queue.MpscLinkedQueue.producerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ee50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ee56.  v0:= temp @kind object;
  #L43ee58.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode`) v0 @kind object;
  #L43ee5c.  return v0 @kind object;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.MpscLinkedQueue` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43eda4.  if v2 == 0 then goto L43edc4;
  #L43eda8.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode`;
  #L43edac.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L43edb2.  call temp:= `xchgProducerNode`(v1, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.xchgProducerNode:(Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;)Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @kind virtual;
  #L43edb8.  v2:= temp @kind object;
  #L43edba.  call `soNext`(v2, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;.soNext:(Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;)V` @kind virtual;
  #L43edc0.  v2:= 1I;
  #L43edc2.  return v2;
  #L43edc4.  v2:= new `java.lang.NullPointerException`;
  #L43edc8.  v0:= "Null is not a valid element" @kind object;
  #L43edcc.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43edd2.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.MpscLinkedQueue` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L43ede4.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43edea.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43edf0.  v1:= 1I;
  #L43edf2.  return v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.queue.MpscLinkedQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ee94.  call temp:= `lpConsumerNode`(v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.lpConsumerNode:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @kind virtual;
  #L43ee9a.  v0:= temp @kind object;
  #L43ee9c.  call temp:= `lvNext`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;.lvNext:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @kind virtual;
  #L43eea2.  v1:= temp @kind object;
  #L43eea4.  if v1 == 0 then goto L43eeb8;
  #L43eea8.  call temp:= `getAndNullValue`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;.getAndNullValue:()Ljava/lang/Object;` @kind virtual;
  #L43eeae.  v0:= temp @kind object;
  #L43eeb0.  call `spConsumerNode`(v2, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.spConsumerNode:(Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;)V` @kind virtual;
  #L43eeb6.  return v0 @kind object;
  #L43eeb8.  call temp:= `lvProducerNode`(v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.lvProducerNode:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @kind virtual;
  #L43eebe.  v1:= temp @kind object;
  #L43eec0.  if v0 == v1 then goto L43eee2;
  #L43eec4.  call temp:= `lvNext`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;.lvNext:()Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @kind virtual;
  #L43eeca.  v1:= temp @kind object;
  #L43eecc.  if v1 != 0 then goto L43eed2;
  #L43eed0.  goto L43eec4;
  #L43eed2.  call temp:= `getAndNullValue`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;.getAndNullValue:()Ljava/lang/Object;` @kind virtual;
  #L43eed8.  v0:= temp @kind object;
  #L43eeda.  call `spConsumerNode`(v2, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.spConsumerNode:(Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;)V` @kind virtual;
  #L43eee0.  return v0 @kind object;
  #L43eee2.  v0:= 0I;
  #L43eee4.  return v0 @kind object;
}
procedure `void` `spConsumerNode`(`io.reactivex.internal.queue.MpscLinkedQueue` v1 @kind this, `io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode` v2 @kind object) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.spConsumerNode:(Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;)V` @AccessFlag  {
    temp;
    v0;

  #L43ef70.  v0:= v1.`io.reactivex.internal.queue.MpscLinkedQueue.consumerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ef74.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43ef7a.  return @kind void;
}
procedure `io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode` `xchgProducerNode`(`io.reactivex.internal.queue.MpscLinkedQueue` v1 @kind this, `io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode` v2 @kind object) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.xchgProducerNode:(Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;)Lio/reactivex/internal/queue/MpscLinkedQueue$LinkedQueueNode;` @AccessFlag  {
    temp;
    v0;

  #L43ee70.  v0:= v1.`io.reactivex.internal.queue.MpscLinkedQueue.producerNode` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ee74.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43ee7a.  v2:= temp @kind object;
  #L43ee7c.  v2:= (`io.reactivex.internal.queue.MpscLinkedQueue$LinkedQueueNode`) v2 @kind object;
  #L43ee80.  return v2 @kind object;
}
