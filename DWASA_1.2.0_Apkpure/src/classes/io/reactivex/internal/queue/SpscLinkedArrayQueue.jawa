record `io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.fuseable.SimplePlainQueue` @kind interface {
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerBuffer` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerIndex` @AccessFlag FINAL;
  `int` `io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerMask` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.queue.SpscLinkedArrayQueue.producerBuffer` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscLinkedArrayQueue.producerIndex` @AccessFlag FINAL;
  `long` `io.reactivex.internal.queue.SpscLinkedArrayQueue.producerLookAhead` @AccessFlag ;
  `int` `io.reactivex.internal.queue.SpscLinkedArrayQueue.producerLookAheadStep` @AccessFlag ;
  `int` `io.reactivex.internal.queue.SpscLinkedArrayQueue.producerMask` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.HAS_NEXT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.MAX_LOOK_AHEAD_STEP` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L43f654.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L43f658.  v1:= 4096I;
  #L43f65c.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L43f662.  v0:= temp @kind object;
  #L43f664.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L43f66a.  v0:= temp;
  #L43f66c.  `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.MAX_LOOK_AHEAD_STEP` @type ^`int` := v0;
  #L43f670.  v0:= new `java.lang.Object`;
  #L43f674.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f67a.  `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` := v0 @kind object;
  #L43f67e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L43f690.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f696.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43f69a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43f6a0.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L43f6a4.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43f6a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43f6ae.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L43f6b2.  v0:= 8I;
  #L43f6b6.  call temp:= `max`(v0, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L43f6bc.  v4:= temp;
  #L43f6be.  call temp:= `roundToPowerOfTwo`(v4) @signature `Lio/reactivex/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L43f6c4.  v4:= temp;
  #L43f6c6.  v0:= v4 + -1;
  #L43f6ca.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L43f6ce.  v2:= v4 + 1;
  #L43f6d2.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L43f6d8.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L43f6dc.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerMask` @type ^`int` := v0;
  #L43f6e0.  call `adjustLookAheadStep`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.adjustLookAheadStep:(I)V` @kind direct;
  #L43f6e6.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L43f6ea.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerMask` @type ^`int` := v0;
  #L43f6ee.  v0:= v0 + -1;
  #L43f6f2.  v0:= (`long`) v0 @kind i2l;
  #L43f6f4.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerLookAhead` @type ^`long` := v0 @kind wide;
  #L43f6f8.  v0:= 0L;
  #L43f6fc.  call `soProducerIndex`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soProducerIndex:(J)V` @kind direct;
  #L43f702.  return @kind void;
}
procedure `void` `adjustLookAheadStep`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.adjustLookAheadStep:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43f714.  v2:= v2 / 4;
  #L43f718.  v0:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.MAX_LOOK_AHEAD_STEP` @type ^`int`;
  #L43f71c.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L43f722.  v2:= temp;
  #L43f724.  v1.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerLookAheadStep` @type ^`int` := v2;
  #L43f728.  return @kind void;
}
procedure `int` `calcDirectOffset`(`int` v0 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcDirectOffset:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L43f3e8.  return v0;
}
procedure `int` `calcWrappedOffset`(`long` v0 , `int` v2 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L43f3fc.  v1:= (`int`) v0 @kind l2i;
  #L43f3fe.  v0:= v1 ^& v2 @kind int;
  #L43f402.  call temp:= `calcDirectOffset`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcDirectOffset:(I)I` @kind static;
  #L43f408.  v0:= temp;
  #L43f40a.  return v0;
}
procedure `long` `lpConsumerIndex`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lpConsumerIndex:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43f5d4.  v0:= v2.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f5d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43f5de.  v0:= temp @kind wide;
  #L43f5e0.  return v0 @kind wide;
}
procedure `long` `lpProducerIndex`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lpProducerIndex:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43f5f4.  v0:= v2.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f5f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43f5fe.  v0:= temp @kind wide;
  #L43f600.  return v0 @kind wide;
}
procedure `long` `lvConsumerIndex`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvConsumerIndex:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43f614.  v0:= v2.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f618.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43f61e.  v0:= temp @kind wide;
  #L43f620.  return v0 @kind wide;
}
procedure `java.lang.Object` `lvElement`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L43f458.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L43f45e.  v0:= temp @kind object;
  #L43f460.  return v0 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicReferenceArray` `lvNextBufferAndUnlink`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvNextBufferAndUnlink:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43f5a4.  call temp:= `calcDirectOffset`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcDirectOffset:(I)I` @kind static;
  #L43f5aa.  v4:= temp;
  #L43f5ac.  call temp:= `lvElement`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L43f5b2.  v0:= temp @kind object;
  #L43f5b4.  v0:= (`java.util.concurrent.atomic.AtomicReferenceArray`) v0 @kind object;
  #L43f5b8.  v1:= 0I;
  #L43f5ba.  call `soElement`(v3, v4, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f5c0.  return v0 @kind object;
}
procedure `long` `lvProducerIndex`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvProducerIndex:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43f634.  v0:= v2.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f638.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43f63e.  v0:= temp @kind wide;
  #L43f640.  return v0 @kind wide;
}
procedure `java.lang.Object` `newBufferPeek`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.newBufferPeek:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;

  #L43f474.  v0.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L43f478.  call temp:= `calcWrappedOffset`(v2, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f47e.  v2:= temp;
  #L43f480.  call temp:= `lvElement`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L43f486.  v1:= temp @kind object;
  #L43f488.  return v1 @kind object;
}
procedure `java.lang.Object` `newBufferPoll`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v4 @kind object, `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.newBufferPoll:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L43f49c.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v4 @kind object;
  #L43f4a0.  call temp:= `calcWrappedOffset`(v5, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f4a6.  v7:= temp;
  #L43f4a8.  call temp:= `lvElement`(v4, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L43f4ae.  v0:= temp @kind object;
  #L43f4b0.  if v0 == 0 then goto L43f4c8;
  #L43f4b4.  v1:= 0I;
  #L43f4b6.  call `soElement`(v4, v7, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f4bc.  v1:= 1L;
  #L43f4c0.  v5:= v5 + v1 @kind long;
  #L43f4c2.  call `soConsumerIndex`(v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soConsumerIndex:(J)V` @kind direct;
  #L43f4c8.  return v0 @kind object;
}
procedure `void` `resize`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v4 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v5 @kind object, `long` v6 , `int` v8 , `java.lang.Object` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.resize:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43f768.  call temp:= `length`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L43f76e.  v0:= temp;
  #L43f770.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L43f774.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L43f77a.  v4.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L43f77e.  v10:= v10 + v6 @kind long;
  #L43f780.  v2:= 1L;
  #L43f784.  v10:= v10 - v2 @kind long;
  #L43f786.  v4.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerLookAhead` @type ^`long` := v10 @kind wide;
  #L43f78a.  call `soElement`(v1, v8, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f790.  call `soNext`(v4, v5, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soNext:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L43f796.  v9:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` @kind object;
  #L43f79a.  call `soElement`(v5, v8, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f7a0.  v6:= v6 + v2 @kind long;
  #L43f7a2.  call `soProducerIndex`(v4, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soProducerIndex:(J)V` @kind direct;
  #L43f7a8.  return @kind void;
}
procedure `void` `soConsumerIndex`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soConsumerIndex:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43f7bc.  v0:= v1.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f7c0.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L43f7c6.  return @kind void;
}
procedure `void` `soElement`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L43f7d8.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L43f7de.  return @kind void;
}
procedure `void` `soNext`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v2 @kind object, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soNext:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43f7f0.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L43f7f6.  v0:= temp;
  #L43f7f8.  v0:= v0 + -1;
  #L43f7fc.  call temp:= `calcDirectOffset`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcDirectOffset:(I)I` @kind static;
  #L43f802.  v0:= temp;
  #L43f804.  call `soElement`(v2, v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f80a.  return @kind void;
}
procedure `void` `soProducerIndex`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soProducerIndex:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43f81c.  v0:= v1.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f820.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L43f826.  return @kind void;
}
procedure `boolean` `writeToQueue`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `java.lang.Object` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @AccessFlag PRIVATE {
    temp;

  #L43f3c0.  call `soElement`(v1, v5, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f3c6.  v1:= 1L;
  #L43f3ca.  v3:= v3 + v1 @kind long;
  #L43f3cc.  call `soProducerIndex`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soProducerIndex:(J)V` @kind direct;
  #L43f3d2.  v1:= 1I;
  #L43f3d4.  return v1;
}
procedure `void` `clear`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f73c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43f742.  v0:= temp @kind object;
  #L43f744.  if v0 != 0 then goto L43f73c;
  #L43f748.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43f74e.  v0:= temp;
  #L43f750.  if v0 != 0 then goto L43f756;
  #L43f754.  goto L43f73c;
  #L43f756.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v5 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43f228.  call temp:= `lvProducerIndex`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvProducerIndex:()J` @kind direct;
  #L43f22e.  v0:= temp @kind wide;
  #L43f230.  call temp:= `lvConsumerIndex`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvConsumerIndex:()J` @kind direct;
  #L43f236.  v2:= temp @kind wide;
  #L43f238.  v4:= lcmp(v0, v2);
  #L43f23c.  if v4 != 0 then goto L43f244;
  #L43f240.  v0:= 1I;
  #L43f242.  goto L43f246;
  #L43f244.  v0:= 0I;
  #L43f246.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v10 @kind this, `java.lang.Object` v11 @kind object) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L43f258.  if v11 == 0 then goto L43f2fa;
  #L43f25c.  v1:= v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L43f260.  call temp:= `lpProducerIndex`(v10) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lpProducerIndex:()J` @kind direct;
  #L43f266.  v3:= temp @kind wide;
  #L43f268.  v0:= v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerMask` @type ^`int`;
  #L43f26c.  call temp:= `calcWrappedOffset`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f272.  v5:= temp;
  #L43f274.  v6:= v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerLookAhead` @type ^`long` @kind wide;
  #L43f278.  v2:= lcmp(v3, v6);
  #L43f27c.  if v2 >= 0 then goto L43f28e;
  #L43f280.  v0:= v10 @kind object;
  #L43f282.  v2:= v11 @kind object;
  #L43f284.  call temp:= `writeToQueue`(v0, v1, v2, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L43f28a.  v11:= temp;
  #L43f28c.  return v11;
  #L43f28e.  v2:= v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerLookAheadStep` @type ^`int`;
  #L43f292.  v6:= (`long`) v2 @kind i2l;
  #L43f294.  v6:= v6 + v3 @kind long;
  #L43f296.  call temp:= `calcWrappedOffset`(v6, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f29c.  v2:= temp;
  #L43f29e.  call temp:= `lvElement`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L43f2a4.  v2:= temp @kind object;
  #L43f2a6.  v8:= 1L;
  #L43f2aa.  if v2 != 0 then goto L43f2c2;
  #L43f2ae.  v6:= v6 - v8 @kind long;
  #L43f2b0.  v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerLookAhead` @type ^`long` := v6 @kind wide;
  #L43f2b4.  v0:= v10 @kind object;
  #L43f2b6.  v2:= v11 @kind object;
  #L43f2b8.  call temp:= `writeToQueue`(v0, v1, v2, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L43f2be.  v11:= temp;
  #L43f2c0.  return v11;
  #L43f2c2.  v8:= v8 + v3 @kind long;
  #L43f2c4.  call temp:= `calcWrappedOffset`(v8, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f2ca.  v2:= temp;
  #L43f2cc.  call temp:= `lvElement`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L43f2d2.  v2:= temp @kind object;
  #L43f2d4.  if v2 != 0 then goto L43f2e6;
  #L43f2d8.  v0:= v10 @kind object;
  #L43f2da.  v2:= v11 @kind object;
  #L43f2dc.  call temp:= `writeToQueue`(v0, v1, v2, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L43f2e2.  v11:= temp;
  #L43f2e4.  return v11;
  #L43f2e6.  v6:= (`long`) v0 @kind i2l;
  #L43f2e8.  v0:= v10 @kind object;
  #L43f2ea.  v2:= v3 @kind wide;
  #L43f2ec.  v4:= v5;
  #L43f2ee.  v5:= v11 @kind object;
  #L43f2f0.  call `resize`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.resize:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @kind direct;
  #L43f2f6.  v11:= 1I;
  #L43f2f8.  return v11;
  #L43f2fa.  v11:= new `java.lang.NullPointerException`;
  #L43f2fe.  v0:= "Null is not a valid element" @kind object;
  #L43f302.  call `<init>`(v11, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43f308.  throw v11;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v8 @kind this, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43f31c.  v0:= v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L43f320.  call temp:= `lvProducerIndex`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvProducerIndex:()J` @kind direct;
  #L43f326.  v1:= temp @kind wide;
  #L43f328.  v3:= v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerMask` @type ^`int`;
  #L43f32c.  v4:= 2L;
  #L43f330.  v4:= v4 + v1 @kind long;
  #L43f332.  call temp:= `calcWrappedOffset`(v4, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f338.  v6:= temp;
  #L43f33a.  call temp:= `lvElement`(v0, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L43f340.  v6:= temp @kind object;
  #L43f342.  if v6 != 0 then goto L43f366;
  #L43f346.  call temp:= `calcWrappedOffset`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f34c.  v1:= temp;
  #L43f34e.  v2:= v1 + 1;
  #L43f352.  call `soElement`(v0, v2, v10) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f358.  call `soElement`(v0, v1, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f35e.  call `soProducerIndex`(v8, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soProducerIndex:(J)V` @kind direct;
  #L43f364.  goto L43f3aa;
  #L43f366.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L43f36c.  v6:= temp;
  #L43f36e.  v7:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L43f372.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L43f378.  v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.producerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v7 @kind object;
  #L43f37c.  call temp:= `calcWrappedOffset`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f382.  v1:= temp;
  #L43f384.  v2:= v1 + 1;
  #L43f388.  call `soElement`(v7, v2, v10) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f38e.  call `soElement`(v7, v1, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f394.  call `soNext`(v8, v0, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soNext:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L43f39a.  v9:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` @kind object;
  #L43f39e.  call `soElement`(v0, v1, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f3a4.  call `soProducerIndex`(v8, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soProducerIndex:(J)V` @kind direct;
  #L43f3aa.  v9:= 1I;
  #L43f3ac.  return v9;
}
procedure `java.lang.Object` `peek`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43f4dc.  v0:= v6.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L43f4e0.  call temp:= `lpConsumerIndex`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lpConsumerIndex:()J` @kind direct;
  #L43f4e6.  v1:= temp @kind wide;
  #L43f4e8.  v3:= v6.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerMask` @type ^`int`;
  #L43f4ec.  call temp:= `calcWrappedOffset`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f4f2.  v4:= temp;
  #L43f4f4.  call temp:= `lvElement`(v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L43f4fa.  v4:= temp @kind object;
  #L43f4fc.  v5:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` @kind object;
  #L43f500.  if v4 != v5 then goto L43f51a;
  #L43f504.  v4:= v3 + 1;
  #L43f508.  call temp:= `lvNextBufferAndUnlink`(v6, v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvNextBufferAndUnlink:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L43f50e.  v0:= temp @kind object;
  #L43f510.  call temp:= `newBufferPeek`(v6, v0, v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.newBufferPeek:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L43f516.  v0:= temp @kind object;
  #L43f518.  return v0 @kind object;
  #L43f51a.  return v4 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v8 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43f52c.  v0:= v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerBuffer` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L43f530.  call temp:= `lpConsumerIndex`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lpConsumerIndex:()J` @kind direct;
  #L43f536.  v1:= temp @kind wide;
  #L43f538.  v3:= v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.consumerMask` @type ^`int`;
  #L43f53c.  call temp:= `calcWrappedOffset`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.calcWrappedOffset:(JI)I` @kind static;
  #L43f542.  v4:= temp;
  #L43f544.  call temp:= `lvElement`(v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L43f54a.  v5:= temp @kind object;
  #L43f54c.  v6:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.HAS_NEXT` @type ^`java.lang.Object` @kind object;
  #L43f550.  if v5 != v6 then goto L43f558;
  #L43f554.  v6:= 1I;
  #L43f556.  goto L43f55a;
  #L43f558.  v6:= 0I;
  #L43f55a.  v7:= 0I;
  #L43f55c.  if v5 == 0 then goto L43f578;
  #L43f560.  if v6 != 0 then goto L43f578;
  #L43f564.  call `soElement`(v0, v4, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L43f56a.  v3:= 1L;
  #L43f56e.  v1:= v1 + v3 @kind long;
  #L43f570.  call `soConsumerIndex`(v8, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.soConsumerIndex:(J)V` @kind direct;
  #L43f576.  return v5 @kind object;
  #L43f578.  if v6 == 0 then goto L43f592;
  #L43f57c.  v4:= v3 + 1;
  #L43f580.  call temp:= `lvNextBufferAndUnlink`(v8, v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvNextBufferAndUnlink:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L43f586.  v0:= temp @kind object;
  #L43f588.  call temp:= `newBufferPoll`(v8, v0, v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.newBufferPoll:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L43f58e.  v0:= temp @kind object;
  #L43f590.  return v0 @kind object;
  #L43f592.  return v7 @kind object;
}
procedure `int` `size`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v7 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L43f41c.  call temp:= `lvConsumerIndex`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvConsumerIndex:()J` @kind direct;
  #L43f422.  v0:= temp @kind wide;
  #L43f424.  call temp:= `lvProducerIndex`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvProducerIndex:()J` @kind direct;
  #L43f42a.  v2:= temp @kind wide;
  #L43f42c.  call temp:= `lvConsumerIndex`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.lvConsumerIndex:()J` @kind direct;
  #L43f432.  v4:= temp @kind wide;
  #L43f434.  v6:= lcmp(v0, v4);
  #L43f438.  if v6 != 0 then goto L43f442;
  #L43f43c.  v2:= v2 - v4 @kind long;
  #L43f43e.  v0:= (`int`) v2 @kind l2i;
  #L43f440.  return v0;
  #L43f442.  v0:= v4 @kind wide;
  #L43f444.  goto L43f424;
}
