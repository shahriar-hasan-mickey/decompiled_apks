record `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @AccessFlag PROTECTED;
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @AccessFlag PROTECTED;
  `java.lang.Object` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.COMPLETE_MASK` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.REQUEST_MASK` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L443d7c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L443d82.  v0.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L443d86.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443d98.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443d9c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443da2.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.complete:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L443db4.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @type ^`long` @kind wide;
  #L443db8.  v2:= 0L;
  #L443dbc.  v4:= lcmp(v0, v2);
  #L443dc0.  if v4 == 0 then goto L443dca;
  #L443dc4.  call temp:= `produced`(v9, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L443dca.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.get:()J` @kind virtual;
  #L443dd0.  v0:= temp @kind wide;
  #L443dd2.  v4:= -9223372036854775808L;
  #L443dd6.  v6:= v0 ^& v4 @kind long;
  #L443dda.  v8:= lcmp(v6, v2);
  #L443dde.  if v8 == 0 then goto L443dea;
  #L443de2.  call `onDrop`(v9, v10) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @kind virtual;
  #L443de8.  return @kind void;
  #L443dea.  v6:= 9223372036854775807L;
  #L443df4.  v0:= v0 ^& v6 @kind long;
  #L443df6.  v6:= lcmp(v0, v2);
  #L443dfa.  if v6 == 0 then goto L443e24;
  #L443dfe.  v0:= -4.9E-324D;
  #L443e08.  call `lazySet`(v9, v0) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.lazySet:(J)V` @kind virtual;
  #L443e0e.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443e12.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L443e18.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443e1c.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443e22.  return @kind void;
  #L443e24.  v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v10 @kind object;
  #L443e28.  call temp:= `compareAndSet`(v9, v2, v4) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L443e2e.  v0:= temp;
  #L443e30.  if v0 == 0 then goto L443e36;
  #L443e34.  return @kind void;
  #L443e36.  v0:= 0I;
  #L443e38.  v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L443e3c.  goto L443dca;
}
procedure `void` `onDrop`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L443e50.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443e64.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443e68.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L443e6e.  v0:= temp;
  #L443e70.  if v0 == 0 then goto L443e82;
  #L443e74.  v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L443e78.  v2:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443e7c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L443e82.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L443e94.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L443e9a.  v0:= temp;
  #L443e9c.  if v0 == 0 then goto L443f0a;
  #L443ea0.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.get:()J` @kind virtual;
  #L443ea6.  v0:= temp @kind wide;
  #L443ea8.  v2:= -9223372036854775808L;
  #L443eac.  v4:= v0 ^& v2 @kind long;
  #L443eb0.  v6:= 0L;
  #L443eb4.  v8:= lcmp(v4, v6);
  #L443eb8.  if v8 == 0 then goto L443eec;
  #L443ebc.  v10:= -4.9E-324D;
  #L443ec6.  call temp:= `compareAndSet`(v9, v2, v10) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L443ecc.  v10:= temp;
  #L443ece.  if v10 == 0 then goto L443f0a;
  #L443ed2.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443ed6.  v11:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L443eda.  call `onNext`(v10, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L443ee0.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443ee4.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443eea.  goto L443f0a;
  #L443eec.  call temp:= `addCap`(v0, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L443ef2.  v2:= temp @kind wide;
  #L443ef4.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L443efa.  v0:= temp;
  #L443efc.  if v0 == 0 then goto L443ea0;
  #L443f00.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443f04.  call `request`(v0, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L443f0a.  return @kind void;
}
