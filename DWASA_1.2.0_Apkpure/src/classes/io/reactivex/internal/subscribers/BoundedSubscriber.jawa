record `io.reactivex.internal.subscribers.BoundedSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.observers.LambdaConsumerIntrospection` @kind interface {
  `int` `io.reactivex.internal.subscribers.BoundedSubscriber.bufferSize` @AccessFlag FINAL;
  `int` `io.reactivex.internal.subscribers.BoundedSubscriber.consumed` @AccessFlag ;
  `int` `io.reactivex.internal.subscribers.BoundedSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.subscribers.BoundedSubscriber.onComplete` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.BoundedSubscriber.onError` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.BoundedSubscriber.onNext` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.BoundedSubscriber.onSubscribe` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.BoundedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L442e10.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L442e16.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L442e1a.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.onError` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L442e1e.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.onComplete` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L442e22.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.onSubscribe` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L442e26.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.bufferSize` @type ^`int` := v5;
  #L442e2a.  v1:= v5 ^> 2;
  #L442e2e.  v5:= v5 - v1 @kind int;
  #L442e30.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.limit` @type ^`int` := v5;
  #L442e34.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L442e48.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442e4e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L442e60.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.cancel:()V` @kind virtual;
  #L442e66.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442dc4.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L442dc8.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L442dcc.  if v0 == v1 then goto L442dd4;
  #L442dd0.  v0:= 1I;
  #L442dd2.  goto L442dd6;
  #L442dd4.  v0:= 0I;
  #L442dd6.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442de8.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L442dee.  v0:= temp @kind object;
  #L442df0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L442df4.  if v0 != v1 then goto L442dfc;
  #L442df8.  v0:= 1I;
  #L442dfa.  goto L442dfe;
  #L442dfc.  v0:= 0I;
  #L442dfe.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442e78.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L442e7e.  v0:= temp @kind object;
  #L442e80.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L442e84.  if v0 == v1 then goto L442eac;
  #L442e88.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L442e8c.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L442e92.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L442e96.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L442e9c.  goto L442eac;
  #L442e9e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442ea0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442ea6.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442eac.  return @kind void;
  catch `java.lang.Throwable` @[L442e92..L442e9c] goto L442e9e;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BoundedSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L442ecc.  call temp:= `get`(v4) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L442ed2.  v0:= temp @kind object;
  #L442ed4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L442ed8.  if v0 == v1 then goto L442f1e;
  #L442edc.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L442ee0.  call `lazySet`(v4, v0) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L442ee6.  v0:= v4.`io.reactivex.internal.subscribers.BoundedSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L442eea.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L442ef0.  goto L442f24;
  #L442ef2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442ef4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442efa.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L442efe.  v2:= 2I;
  #L442f00.  v2:= new `java.lang.Throwable`[v2];
  #L442f04.  v3:= 0I;
  #L442f06.  v2[v3]:= v5 @kind object;
  #L442f0a.  v5:= 1I;
  #L442f0c.  v2[v5]:= v0 @kind object;
  #L442f10.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L442f16.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442f1c.  goto L442f24;
  #L442f1e.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442f24.  return @kind void;
  catch `java.lang.Throwable` @[L442ee6..L442ef0] goto L442ef2;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442f44.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @kind virtual;
  #L442f4a.  v0:= temp;
  #L442f4c.  if v0 != 0 then goto L442fb0;
  #L442f50.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L442f54.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L442f5a.  v3:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.consumed` @type ^`int`;
  #L442f5e.  v3:= v3 + 1;
  #L442f62.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.limit` @type ^`int`;
  #L442f66.  if v3 != v0 then goto L442f8a;
  #L442f6a.  v3:= 0I;
  #L442f6c.  v2.`io.reactivex.internal.subscribers.BoundedSubscriber.consumed` @type ^`int` := v3;
  #L442f70.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L442f76.  v3:= temp @kind object;
  #L442f78.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L442f7c.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.limit` @type ^`int`;
  #L442f80.  v0:= (`long`) v0 @kind i2l;
  #L442f82.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L442f88.  goto L442fb0;
  #L442f8a.  v2.`io.reactivex.internal.subscribers.BoundedSubscriber.consumed` @type ^`int` := v3;
  #L442f8e.  goto L442fb0;
  #L442f90.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442f92.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442f98.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L442f9e.  v0:= temp @kind object;
  #L442fa0.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L442fa4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L442faa.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L442fb0.  return @kind void;
  catch `java.lang.Throwable` @[L442f50..L442f8e] goto L442f90;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BoundedSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442fd0.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L442fd6.  v0:= temp;
  #L442fd8.  if v0 == 0 then goto L442ffc;
  #L442fdc.  v0:= v1.`io.reactivex.internal.subscribers.BoundedSubscriber.onSubscribe` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L442fe0.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L442fe6.  goto L442ffc;
  #L442fe8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442fea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442ff0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L442ff6.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L442ffc.  return @kind void;
  catch `java.lang.Throwable` @[L442fdc..L442fe6] goto L442fe8;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BoundedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44301c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L443022.  v0:= temp @kind object;
  #L443024.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L443028.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44302e.  return @kind void;
}
