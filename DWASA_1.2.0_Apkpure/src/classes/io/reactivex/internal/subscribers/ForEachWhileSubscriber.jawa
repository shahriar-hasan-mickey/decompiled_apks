record `io.reactivex.internal.subscribers.ForEachWhileSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @AccessFlag ;
  `io.reactivex.functions.Action` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.onComplete` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.onError` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.onNext` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.ForEachWhileSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v0 @kind this, `io.reactivex.functions.Predicate` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L443138.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44313e.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onNext` @type ^`io.reactivex.functions.Predicate` := v1 @kind object;
  #L443142.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onError` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L443146.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onComplete` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L44314a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L44315c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L443162.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443110.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L443116.  v0:= temp @kind object;
  #L443118.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L44311c.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L443122.  v0:= temp;
  #L443124.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443174.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L443178.  if v0 == 0 then goto L44317e;
  #L44317c.  return @kind void;
  #L44317e.  v0:= 1I;
  #L443180.  v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L443184.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L443188.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L44318e.  goto L44319e;
  #L443190.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443192.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L443198.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44319e.  return @kind void;
  catch `java.lang.Throwable` @[L443184..L44318e] goto L443190;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4431bc.  v0:= v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L4431c0.  if v0 == 0 then goto L4431cc;
  #L4431c4.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4431ca.  return @kind void;
  #L4431cc.  v0:= 1I;
  #L4431ce.  v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4431d2.  v1:= v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4431d6.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4431dc.  goto L443206;
  #L4431de.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4431e0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4431e6.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L4431ea.  v3:= 2I;
  #L4431ec.  v3:= new `java.lang.Throwable`[v3];
  #L4431f0.  v4:= 0I;
  #L4431f2.  v3[v4]:= v6 @kind object;
  #L4431f6.  v3[v0]:= v1 @kind object;
  #L4431fa.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L443200.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L443206.  return @kind void;
  catch `java.lang.Throwable` @[L4431d2..L4431dc] goto L4431de;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443224.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L443228.  if v0 == 0 then goto L44322e;
  #L44322c.  return @kind void;
  #L44322e.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onNext` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L443232.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L443238.  v2:= temp;
  #L44323a.  if v2 != 0 then goto L44324a;
  #L44323e.  call `dispose`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L443244.  call `onComplete`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @kind virtual;
  #L44324a.  return @kind void;
  #L44324c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44324e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L443254.  call `dispose`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L44325a.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L443260.  return @kind void;
  catch `java.lang.Throwable` @[L44322e..L44323a] goto L44324c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443280.  v0:= 9223372036854775807L;
  #L44328a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L443290.  return @kind void;
}
