record `io.reactivex.internal.subscribers.StrictSubscriber` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.StrictSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.StrictSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.subscribers.StrictSubscriber.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.subscribers.StrictSubscriber.once` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscribers.StrictSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscribers.StrictSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.StrictSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.StrictSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L443f1c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L443f22.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L443f26.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L443f2a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L443f30.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L443f34.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L443f38.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L443f3e.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L443f42.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L443f46.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L443f4c.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L443f50.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L443f54.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L443f5a.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L443f5e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.StrictSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443f70.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` @kind boolean;
  #L443f74.  if v0 != 0 then goto L443f82;
  #L443f78.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L443f7c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L443f82.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443f94.  v0:= 1I;
  #L443f96.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L443f9a.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443f9e.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L443fa2.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L443fa8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443fbc.  v0:= 1I;
  #L443fbe.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L443fc2.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443fc6.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L443fca.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L443fd0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443fe4.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443fe8.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L443fec.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L443ff2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L444004.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L444008.  v1:= 0I;
  #L44400a.  v2:= 1I;
  #L44400c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L444012.  v0:= temp;
  #L444014.  if v0 == 0 then goto L444032;
  #L444018.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44401c.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L444022.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444026.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44402a.  call temp:= `deferredSetOnce`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L444030.  goto L444052;
  #L444032.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L444038.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L44403e.  v4:= new `java.lang.IllegalStateException`;
  #L444042.  v0:= "ยง2.12 violated: onSubscribe must be called at most once" @kind object;
  #L444046.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44404c.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L444052.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L444064.  v0:= 0L;
  #L444068.  v2:= lcmp(v4, v0);
  #L44406c.  if v2 > 0 then goto L4440aa;
  #L444070.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L444076.  v0:= new `java.lang.IllegalArgumentException`;
  #L44407a.  v1:= new `java.lang.StringBuilder`;
  #L44407e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L444084.  v2:= "ยง3.9 violated: positive request amount required but it was " @kind object;
  #L444088.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44408e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L444094.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44409a.  v4:= temp @kind object;
  #L44409c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4440a2.  call `onError`(v3, v0) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4440a8.  goto L4440b8;
  #L4440aa.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4440ae.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4440b2.  call `deferredRequest`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4440b8.  return @kind void;
}
