record `io.reactivex.internal.subscribers.LambdaSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.functions.Action` `io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.onError` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.LambdaSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44381c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L443822.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L443826.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onError` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L44382a.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L44382e.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L443832.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L443844.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44384a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L44385c.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @kind virtual;
  #L443862.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4437d0.  v0:= v2.`io.reactivex.internal.subscribers.LambdaSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4437d4.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4437d8.  if v0 == v1 then goto L4437e0;
  #L4437dc.  v0:= 1I;
  #L4437de.  goto L4437e2;
  #L4437e0.  v0:= 0I;
  #L4437e2.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4437f4.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L4437fa.  v0:= temp @kind object;
  #L4437fc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L443800.  if v0 != v1 then goto L443808;
  #L443804.  v0:= 1I;
  #L443806.  goto L44380a;
  #L443808.  v0:= 0I;
  #L44380a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443874.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L44387a.  v0:= temp @kind object;
  #L44387c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L443880.  if v0 == v1 then goto L4438a8;
  #L443884.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L443888.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44388e.  v0:= v2.`io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L443892.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L443898.  goto L4438a8;
  #L44389a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44389c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4438a2.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4438a8.  return @kind void;
  catch `java.lang.Throwable` @[L44388e..L443898] goto L44389a;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.LambdaSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4438c8.  call temp:= `get`(v4) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L4438ce.  v0:= temp @kind object;
  #L4438d0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4438d4.  if v0 == v1 then goto L44391a;
  #L4438d8.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4438dc.  call `lazySet`(v4, v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4438e2.  v0:= v4.`io.reactivex.internal.subscribers.LambdaSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4438e6.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4438ec.  goto L443920;
  #L4438ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4438f0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4438f6.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L4438fa.  v2:= 2I;
  #L4438fc.  v2:= new `java.lang.Throwable`[v2];
  #L443900.  v3:= 0I;
  #L443902.  v2[v3]:= v5 @kind object;
  #L443906.  v5:= 1I;
  #L443908.  v2[v5]:= v0 @kind object;
  #L44390c.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L443912.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L443918.  goto L443920;
  #L44391a.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L443920.  return @kind void;
  catch `java.lang.Throwable` @[L4438e2..L4438ec] goto L4438ee;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443940.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @kind virtual;
  #L443946.  v0:= temp;
  #L443948.  if v0 != 0 then goto L443978;
  #L44394c.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L443950.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L443956.  goto L443978;
  #L443958.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44395a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L443960.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L443966.  v0:= temp @kind object;
  #L443968.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L44396c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443972.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L443978.  return @kind void;
  catch `java.lang.Throwable` @[L44394c..L443956] goto L443958;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443998.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44399e.  v0:= temp;
  #L4439a0.  if v0 == 0 then goto L4439c4;
  #L4439a4.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4439a8.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4439ae.  goto L4439c4;
  #L4439b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4439b2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4439b8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4439be.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4439c4.  return @kind void;
  catch `java.lang.Throwable` @[L4439a4..L4439ae] goto L4439b0;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4439e4.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L4439ea.  v0:= temp @kind object;
  #L4439ec.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4439f0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4439f6.  return @kind void;
}
