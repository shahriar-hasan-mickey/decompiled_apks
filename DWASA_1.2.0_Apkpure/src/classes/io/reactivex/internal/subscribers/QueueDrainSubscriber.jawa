record `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.subscribers.QueueDrainSubscriberPad4` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.internal.util.QueueDrain` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @AccessFlag PROTECTED_VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Throwable` `io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L443bc0.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriberPad4;.<init>:()V` @kind direct;
  #L443bc6.  v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L443bca.  v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L443bce.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L443aa0.  v1:= 0I;
  #L443aa2.  return v1;
}
procedure `boolean` `cancelled`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L443ab4.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L443ab8.  return v0;
}
procedure `boolean` `done`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L443acc.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L443ad0.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L443ae4.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L443ae8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L443aee.  v0:= temp;
  #L443af0.  if v0 != 0 then goto L443af8;
  #L443af4.  v0:= 1I;
  #L443af6.  goto L443afa;
  #L443af8.  v0:= 0I;
  #L443afa.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L443b68.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L443b6c.  return v0 @kind object;
}
procedure `boolean` `fastEnter`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L443b0c.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L443b10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L443b16.  v0:= temp;
  #L443b18.  v1:= 1I;
  #L443b1a.  v2:= 0I;
  #L443b1c.  if v0 != 0 then goto L443b32;
  #L443b20.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L443b24.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L443b2a.  v0:= temp;
  #L443b2c.  if v0 == 0 then goto L443b32;
  #L443b30.  goto L443b34;
  #L443b32.  v1:= 0I;
  #L443b34.  return v1;
}
procedure `void` `fastPathEmitMax`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L443be0.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443be4.  v1:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L443be8.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L443bee.  v2:= temp;
  #L443bf0.  if v2 == 0 then goto L443c60;
  #L443bf4.  v2:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443bf8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L443bfe.  v2:= temp @kind wide;
  #L443c00.  v4:= 0L;
  #L443c04.  v6:= lcmp(v2, v4);
  #L443c08.  if v6 == 0 then goto L443c44;
  #L443c0c.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L443c12.  v8:= temp;
  #L443c14.  if v8 == 0 then goto L443c34;
  #L443c18.  v4:= 9223372036854775807L;
  #L443c22.  v8:= lcmp(v2, v4);
  #L443c26.  if v8 == 0 then goto L443c34;
  #L443c2a.  v2:= 1L;
  #L443c2e.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L443c34.  v8:= -1I;
  #L443c36.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L443c3c.  v8:= temp;
  #L443c3e.  if v8 != 0 then goto L443c74;
  #L443c42.  return @kind void;
  #L443c44.  call `dispose`(v10) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443c4a.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L443c4e.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L443c52.  call `<init>`(v8, v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443c58.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443c5e.  return @kind void;
  #L443c60.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L443c66.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L443c6c.  v8:= temp;
  #L443c6e.  if v8 != 0 then goto L443c74;
  #L443c72.  return @kind void;
  #L443c74.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L443c7a.  return @kind void;
}
procedure `void` `fastPathOrderedEmitMax`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L443c8c.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443c90.  v1:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L443c94.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L443c9a.  v2:= temp;
  #L443c9c.  if v2 == 0 then goto L443d26;
  #L443ca0.  v2:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443ca4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L443caa.  v2:= temp @kind wide;
  #L443cac.  v4:= 0L;
  #L443cb0.  v6:= lcmp(v2, v4);
  #L443cb4.  if v6 == 0 then goto L443d04;
  #L443cb8.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L443cbe.  v4:= temp;
  #L443cc0.  if v4 == 0 then goto L443cfc;
  #L443cc4.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L443cca.  v8:= temp;
  #L443ccc.  if v8 == 0 then goto L443cec;
  #L443cd0.  v4:= 9223372036854775807L;
  #L443cda.  v8:= lcmp(v2, v4);
  #L443cde.  if v8 == 0 then goto L443cec;
  #L443ce2.  v2:= 1L;
  #L443ce6.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L443cec.  v8:= -1I;
  #L443cee.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L443cf4.  v8:= temp;
  #L443cf6.  if v8 != 0 then goto L443d3a;
  #L443cfa.  return @kind void;
  #L443cfc.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L443d02.  goto L443d3a;
  #L443d04.  v8:= 1I;
  #L443d06.  v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v8 @kind boolean;
  #L443d0a.  call `dispose`(v10) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443d10.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L443d14.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L443d18.  call `<init>`(v8, v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443d1e.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443d24.  return @kind void;
  #L443d26.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L443d2c.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L443d32.  v8:= temp;
  #L443d34.  if v8 != 0 then goto L443d3a;
  #L443d38.  return @kind void;
  #L443d3a.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L443d40.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L443b48.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L443b4c.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L443b52.  v2:= temp;
  #L443b54.  return v2;
}
procedure `long` `produced`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L443b80.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443b84.  v2:= -v2 @kind long;
  #L443b86.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L443b8c.  v2:= temp @kind wide;
  #L443b8e.  return v2 @kind wide;
}
procedure `long` `requested`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L443ba0.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443ba4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L443baa.  v0:= temp @kind wide;
  #L443bac.  return v0 @kind wide;
}
procedure `void` `requested`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L443d54.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L443d5a.  v0:= temp;
  #L443d5c.  if v0 == 0 then goto L443d6a;
  #L443d60.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443d64.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L443d6a.  return @kind void;
}
