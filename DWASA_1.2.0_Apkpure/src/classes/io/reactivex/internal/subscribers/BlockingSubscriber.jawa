record `io.reactivex.internal.subscribers.BlockingSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.Queue` `io.reactivex.internal.subscribers.BlockingSubscriber.queue` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscribers.BlockingSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L442c9c.  v0:= new `java.lang.Object`;
  #L442ca0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L442ca6.  `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` := v0 @kind object;
  #L442caa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BlockingSubscriber` v0 @kind this, `java.util.Queue` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.<init>:(Ljava/util/Queue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L442cbc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L442cc2.  v0.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L442cc6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442cd8.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442cde.  v0:= temp;
  #L442ce0.  if v0 == 0 then goto L442cf2;
  #L442ce4.  v0:= v2.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L442ce8.  v1:= `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L442cec.  call temp:= `offer`(v0, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442cf2.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442c74.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L442c7a.  v0:= temp @kind object;
  #L442c7c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L442c80.  if v0 != v1 then goto L442c88;
  #L442c84.  v0:= 1I;
  #L442c86.  goto L442c8a;
  #L442c88.  v0:= 0I;
  #L442c8a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442d04.  v0:= v2.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L442d08.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L442d0e.  v1:= temp @kind object;
  #L442d10.  call temp:= `offer`(v0, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442d16.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d28.  v0:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L442d2c.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L442d32.  v2:= temp @kind object;
  #L442d34.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442d3a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d4c.  v0:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L442d50.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L442d56.  v2:= temp @kind object;
  #L442d58.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442d5e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d70.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L442d76.  v2:= temp;
  #L442d78.  if v2 == 0 then goto L442d8e;
  #L442d7c.  v2:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L442d80.  call temp:= `subscription`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.subscription:(Lorg/reactivestreams/Subscription;)Ljava/lang/Object;` @kind static;
  #L442d86.  v0:= temp @kind object;
  #L442d88.  call temp:= `offer`(v2, v0) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442d8e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442da0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L442da6.  v0:= temp @kind object;
  #L442da8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L442dac.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L442db2.  return @kind void;
}
