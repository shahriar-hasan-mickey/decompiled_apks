record `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `io.reactivex.internal.fuseable.QueueSubscription` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @AccessFlag PROTECTED;
  `int` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @AccessFlag PROTECTED;
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44273c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L442742.  v0.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L442746.  return @kind void;
}
procedure `void` `afterDownstream`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.afterDownstream:()V` @AccessFlag PROTECTED {
    temp;

  #L442758.  return @kind void;
}
procedure `boolean` `beforeDownstream`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.beforeDownstream:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L442690.  v0:= 1I;
  #L442692.  return v0;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44276c.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L442770.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L442776.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442788.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L44278c.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.clear:()V` @kind interface;
  #L442792.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4427a4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4427aa.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4427ae.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4427b4.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4427ba.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4426a4.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4426a8.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.isEmpty:()Z` @kind interface;
  #L4426ae.  v0:= temp;
  #L4426b0.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4426c4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L4426c8.  v0:= "Should not be called!" @kind object;
  #L4426cc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4426d2.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4426e4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4426e8.  v2:= "Should not be called!" @kind object;
  #L4426ec.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4426f2.  throw v1;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4427cc.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4427d0.  if v0 == 0 then goto L4427d6;
  #L4427d4.  return @kind void;
  #L4427d6.  v0:= 1I;
  #L4427d8.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4427dc.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4427e0.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L4427e6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4427f8.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4427fc.  if v0 == 0 then goto L442808;
  #L442800.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442806.  return @kind void;
  #L442808.  v0:= 1I;
  #L44280a.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L44280e.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L442812.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L442818.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44282c.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L442830.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L442836.  v0:= temp;
  #L442838.  if v0 == 0 then goto L44286c;
  #L44283c.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L442840.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L442844.  if v0 == 0 then goto L442850;
  #L442848.  v2:= (`io.reactivex.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L44284c.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L442850.  call temp:= `beforeDownstream`(v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.beforeDownstream:()Z` @kind virtual;
  #L442856.  v2:= temp;
  #L442858.  if v2 == 0 then goto L44286c;
  #L44285c.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L442860.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L442866.  call `afterDownstream`(v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.afterDownstream:()V` @kind virtual;
  #L44286c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442880.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L442884.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44288a.  return @kind void;
}
procedure `int` `transitiveBoundaryFusion`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L442704.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L442708.  if v0 == 0 then goto L442726;
  #L44270c.  v1:= v3 ^& 4;
  #L442710.  if v1 != 0 then goto L442726;
  #L442714.  call temp:= `requestFusion`(v0, v3) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L44271a.  v3:= temp;
  #L44271c.  if v3 == 0 then goto L442724;
  #L442720.  v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int` := v3;
  #L442724.  return v3;
  #L442726.  v3:= 0I;
  #L442728.  return v3;
}
