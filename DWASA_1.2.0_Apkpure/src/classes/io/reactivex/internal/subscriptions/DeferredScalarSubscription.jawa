record `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @AccessFlag PROTECTED;
}
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.CANCELLED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.FUSED_CONSUMED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.FUSED_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.FUSED_READY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.HAS_REQUEST_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.HAS_REQUEST_NO_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.NO_REQUEST_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.NO_REQUEST_NO_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4446e8.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4446ee.  v0.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4446f2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444704.  v0:= 4I;
  #L444706.  call `set`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.set:(I)V` @kind virtual;
  #L44470c.  v0:= 0I;
  #L44470e.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L444712.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L444724.  v0:= 32I;
  #L444728.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.lazySet:(I)V` @kind virtual;
  #L44472e.  v0:= 0I;
  #L444730.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L444734.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L444748.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L44474e.  v0:= temp;
  #L444750.  v1:= 8I;
  #L444754.  v2:= 4I;
  #L444756.  if v0 != v1 then goto L444786;
  #L44475a.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L44475e.  v0:= 16I;
  #L444762.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.lazySet:(I)V` @kind virtual;
  #L444768.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44476c.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444772.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L444778.  v4:= temp;
  #L44477a.  if v4 == v2 then goto L444784;
  #L44477e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L444784.  return @kind void;
  #L444786.  v1:= v0 ^& -3;
  #L44478a.  if v1 == 0 then goto L444790;
  #L44478e.  return @kind void;
  #L444790.  v1:= 2I;
  #L444792.  if v0 != v1 then goto L4447bc;
  #L444796.  v0:= 3I;
  #L444798.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.lazySet:(I)V` @kind virtual;
  #L44479e.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4447a2.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4447a8.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L4447ae.  v4:= temp;
  #L4447b0.  if v4 == v2 then goto L4447ba;
  #L4447b4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4447ba.  return @kind void;
  #L4447bc.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4447c0.  v0:= 0I;
  #L4447c2.  v1:= 1I;
  #L4447c4.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.compareAndSet:(II)Z` @kind virtual;
  #L4447ca.  v0:= temp;
  #L4447cc.  if v0 == 0 then goto L4447d2;
  #L4447d0.  return @kind void;
  #L4447d2.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L4447d8.  v0:= temp;
  #L4447da.  if v0 != v2 then goto L444750;
  #L4447de.  v4:= 0I;
  #L4447e0.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4447e4.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L444610.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L444616.  v0:= temp;
  #L444618.  v1:= 4I;
  #L44461a.  if v0 != v1 then goto L444622;
  #L44461e.  v0:= 1I;
  #L444620.  goto L444624;
  #L444622.  v0:= 0I;
  #L444624.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L444638.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L44463e.  v0:= temp;
  #L444640.  v1:= 16I;
  #L444644.  if v0 == v1 then goto L44464c;
  #L444648.  v0:= 1I;
  #L44464a.  goto L44464e;
  #L44464c.  v0:= 0I;
  #L44464e.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4446b0.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L4446b6.  v0:= temp;
  #L4446b8.  v1:= 0I;
  #L4446ba.  v2:= 16I;
  #L4446be.  if v0 != v2 then goto L4446d6;
  #L4446c2.  v0:= 32I;
  #L4446c6.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.lazySet:(I)V` @kind virtual;
  #L4446cc.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4446d0.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4446d4.  return v0 @kind object;
  #L4446d6.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4447f8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4447fe.  v2:= temp;
  #L444800.  if v2 == 0 then goto L444868;
  #L444804.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L44480a.  v2:= temp;
  #L44480c.  v3:= v2 ^& -2;
  #L444810.  if v3 == 0 then goto L444816;
  #L444814.  return @kind void;
  #L444816.  v3:= 1I;
  #L444818.  if v2 != v3 then goto L444858;
  #L44481c.  v2:= 3I;
  #L44481e.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.compareAndSet:(II)Z` @kind virtual;
  #L444824.  v2:= temp;
  #L444826.  if v2 == 0 then goto L444856;
  #L44482a.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L44482e.  if v2 == 0 then goto L444856;
  #L444832.  v3:= 0I;
  #L444834.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L444838.  v3:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44483c.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444842.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.get:()I` @kind virtual;
  #L444848.  v2:= temp;
  #L44484a.  v0:= 4I;
  #L44484c.  if v2 == v0 then goto L444856;
  #L444850.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L444856.  return @kind void;
  #L444858.  v2:= 0I;
  #L44485a.  v3:= 2I;
  #L44485c.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.compareAndSet:(II)Z` @kind virtual;
  #L444862.  v2:= temp;
  #L444864.  if v2 == 0 then goto L444804;
  #L444868.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L444688.  v0:= 2I;
  #L44468a.  v2:= v2 ^& v0 @kind int;
  #L44468c.  if v2 == 0 then goto L44469c;
  #L444690.  v2:= 8I;
  #L444694.  call `lazySet`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.lazySet:(I)V` @kind virtual;
  #L44469a.  return v0;
  #L44469c.  v2:= 0I;
  #L44469e.  return v2;
}
procedure `boolean` `tryCancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.tryCancel:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L444660.  v0:= 4I;
  #L444662.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.getAndSet:(I)I` @kind virtual;
  #L444668.  v1:= temp;
  #L44466a.  if v1 == v0 then goto L444672;
  #L44466e.  v0:= 1I;
  #L444670.  goto L444674;
  #L444672.  v0:= 0I;
  #L444674.  return v0;
}
