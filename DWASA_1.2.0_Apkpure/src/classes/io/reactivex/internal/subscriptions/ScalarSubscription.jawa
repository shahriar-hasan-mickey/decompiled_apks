record `io.reactivex.internal.subscriptions.ScalarSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.QueueSubscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.subscriptions.ScalarSubscription.value` @AccessFlag FINAL;
}
global `int` `@@io.reactivex.internal.subscriptions.ScalarSubscription.CANCELLED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.ScalarSubscription.NO_REQUEST` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.ScalarSubscription.REQUESTED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscriptions.ScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L444b08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L444b0e.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L444b12.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` := v2 @kind object;
  #L444b16.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444b28.  v0:= 2I;
  #L444b2a.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.lazySet:(I)V` @kind virtual;
  #L444b30.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444b44.  v0:= 1I;
  #L444b46.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.lazySet:(I)V` @kind virtual;
  #L444b4c.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.ScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L444a34.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.get:()I` @kind virtual;
  #L444a3a.  v0:= temp;
  #L444a3c.  v1:= 2I;
  #L444a3e.  if v0 != v1 then goto L444a46;
  #L444a42.  v0:= 1I;
  #L444a44.  goto L444a48;
  #L444a46.  v0:= 0I;
  #L444a48.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444a5c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.get:()I` @kind virtual;
  #L444a62.  v0:= temp;
  #L444a64.  if v0 == 0 then goto L444a6c;
  #L444a68.  v0:= 1I;
  #L444a6a.  goto L444a6e;
  #L444a6c.  v0:= 0I;
  #L444a6e.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444a80.  v2:= new `java.lang.UnsupportedOperationException`;
  #L444a84.  v0:= "Should not be called!" @kind object;
  #L444a88.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L444a8e.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L444aa0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L444aa4.  v2:= "Should not be called!" @kind object;
  #L444aa8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L444aae.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444ad8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.get:()I` @kind virtual;
  #L444ade.  v0:= temp;
  #L444ae0.  if v0 != 0 then goto L444af2;
  #L444ae4.  v0:= 1I;
  #L444ae6.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.lazySet:(I)V` @kind virtual;
  #L444aec.  v0:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L444af0.  return v0 @kind object;
  #L444af2.  v0:= 0I;
  #L444af4.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444b60.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L444b66.  v2:= temp;
  #L444b68.  if v2 != 0 then goto L444b6e;
  #L444b6c.  return @kind void;
  #L444b6e.  v2:= 0I;
  #L444b70.  v3:= 1I;
  #L444b72.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.compareAndSet:(II)Z` @kind virtual;
  #L444b78.  v2:= temp;
  #L444b7a.  if v2 == 0 then goto L444ba0;
  #L444b7e.  v2:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444b82.  v3:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L444b86.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444b8c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.get:()I` @kind virtual;
  #L444b92.  v3:= temp;
  #L444b94.  v0:= 2I;
  #L444b96.  if v3 == v0 then goto L444ba0;
  #L444b9a.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L444ba0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L444ac0.  v1:= v1 ^& 1;
  #L444ac4.  return v1;
}
