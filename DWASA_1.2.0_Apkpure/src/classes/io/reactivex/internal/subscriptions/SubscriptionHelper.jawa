record `io.reactivex.internal.subscriptions.SubscriptionHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `org.reactivestreams.Subscription` @kind interface {
}
global `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.internal.subscriptions.SubscriptionHelper` `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L445230.  v0:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`;
  #L445234.  v1:= 0I;
  #L445236.  v2:= "CANCELLED" @kind object;
  #L44523a.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L445240.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` := v0 @kind object;
  #L445244.  v0:= 1I;
  #L445246.  v0:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`[v0];
  #L44524a.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44524e.  v0[v1]:= v2 @kind object;
  #L445252.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] := v0 @kind object;
  #L445256.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L445268.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L44526e.  return @kind void;
}
procedure `boolean` `cancel`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L444f98.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444f9e.  v0:= temp @kind object;
  #L444fa0.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L444fa4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L444fa8.  if v0 == v1 then goto L444fce;
  #L444fac.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L444fb2.  v2:= temp @kind object;
  #L444fb4.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L444fb8.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L444fbc.  if v2 == v0 then goto L444fce;
  #L444fc0.  if v2 == 0 then goto L444fca;
  #L444fc4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L444fca.  v2:= 1I;
  #L444fcc.  return v2;
  #L444fce.  v2:= 0I;
  #L444fd0.  return v2;
}
procedure `void` `deferredRequest`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.atomic.AtomicLong` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L445294.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44529a.  v0:= temp @kind object;
  #L44529c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4452a0.  if v0 == 0 then goto L4452ac;
  #L4452a4.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4452aa.  goto L4452e8;
  #L4452ac.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4452b2.  v0:= temp;
  #L4452b4.  if v0 == 0 then goto L4452e8;
  #L4452b8.  call temp:= `add`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4452be.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4452c4.  v2:= temp @kind object;
  #L4452c6.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4452ca.  if v2 == 0 then goto L4452e8;
  #L4452ce.  v4:= 0L;
  #L4452d2.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4452d8.  v0:= temp @kind wide;
  #L4452da.  v3:= lcmp(v0, v4);
  #L4452de.  if v3 == 0 then goto L4452e8;
  #L4452e2.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4452e8.  return @kind void;
}
procedure `boolean` `deferredSetOnce`(`java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.atomic.AtomicLong` v4 @kind object, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L444fe4.  call temp:= `setOnce`(v3, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L444fea.  v3:= temp;
  #L444fec.  if v3 == 0 then goto L44500e;
  #L444ff0.  v0:= 0L;
  #L444ff4.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L444ffa.  v3:= temp @kind wide;
  #L444ffc.  v2:= lcmp(v3, v0);
  #L445000.  if v2 == 0 then goto L44500a;
  #L445004.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44500a.  v3:= 1I;
  #L44500c.  return v3;
  #L44500e.  v3:= 0I;
  #L445010.  return v3;
}
procedure `boolean` `isCancelled`(`org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445024.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L445028.  if v1 != v0 then goto L445030;
  #L44502c.  v1:= 1I;
  #L44502e.  goto L445032;
  #L445030.  v1:= 0I;
  #L445032.  return v1;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L445044.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44504a.  v0:= temp @kind object;
  #L44504c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L445050.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L445054.  if v0 != v1 then goto L445066;
  #L445058.  if v3 == 0 then goto L445062;
  #L44505c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L445062.  v2:= 0I;
  #L445064.  return v2;
  #L445066.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44506c.  v0:= temp;
  #L44506e.  if v0 == 0 then goto L445044;
  #L445072.  v2:= 1I;
  #L445074.  return v2;
}
procedure `void` `reportMoreProduced`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4452fc.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L445300.  v1:= new `java.lang.StringBuilder`;
  #L445304.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44530a.  v2:= "More produced than requested: " @kind object;
  #L44530e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L445314.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L44531a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L445320.  v3:= temp @kind object;
  #L445322.  call `<init>`(v0, v3) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L445328.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44532e.  return @kind void;
}
procedure `void` `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L445340.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L445344.  v1:= "Subscription already set!" @kind object;
  #L445348.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44534e.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L445354.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L445088.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44508e.  v0:= temp @kind object;
  #L445090.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L445094.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L445098.  if v0 != v1 then goto L4450aa;
  #L44509c.  if v3 == 0 then goto L4450a6;
  #L4450a0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4450a6.  v2:= 0I;
  #L4450a8.  return v2;
  #L4450aa.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4450b0.  v1:= temp;
  #L4450b2.  if v1 == 0 then goto L445088;
  #L4450b6.  if v0 == 0 then goto L4450c0;
  #L4450ba.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4450c0.  v2:= 1I;
  #L4450c2.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4450d4.  v0:= "s is null" @kind object;
  #L4450d8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4450de.  v0:= 0I;
  #L4450e0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4450e6.  v0:= temp;
  #L4450e8.  if v0 != 0 then goto L44510c;
  #L4450ec.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4450f2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4450f8.  v1:= temp @kind object;
  #L4450fa.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4450fe.  if v1 == v2 then goto L445108;
  #L445102.  call `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L445108.  v1:= 0I;
  #L44510a.  return v1;
  #L44510c.  v1:= 1I;
  #L44510e.  return v1;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v0 @kind object, `org.reactivestreams.Subscription` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L445120.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L445126.  v0:= temp;
  #L445128.  if v0 == 0 then goto L445136;
  #L44512c.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L445132.  v0:= 1I;
  #L445134.  return v0;
  #L445136.  v0:= 0I;
  #L445138.  return v0;
}
procedure `boolean` `validate`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L44514c.  v0:= 0L;
  #L445150.  v2:= lcmp(v3, v0);
  #L445154.  if v2 > 0 then goto L44518e;
  #L445158.  v0:= new `java.lang.IllegalArgumentException`;
  #L44515c.  v1:= new `java.lang.StringBuilder`;
  #L445160.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L445166.  v2:= "n > 0 required but it was " @kind object;
  #L44516a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L445170.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L445176.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44517c.  v3:= temp @kind object;
  #L44517e.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L445184.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44518a.  v3:= 0I;
  #L44518c.  return v3;
  #L44518e.  v3:= 1I;
  #L445190.  return v3;
}
procedure `boolean` `validate`(`org.reactivestreams.Subscription` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4451a4.  v0:= 0I;
  #L4451a6.  if v2 != 0 then goto L4451c0;
  #L4451aa.  v1:= new `java.lang.NullPointerException`;
  #L4451ae.  v2:= "next is null" @kind object;
  #L4451b2.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4451b8.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4451be.  return v0;
  #L4451c0.  if v1 == 0 then goto L4451d2;
  #L4451c4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4451ca.  call `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L4451d0.  return v0;
  #L4451d2.  v1:= 1I;
  #L4451d4.  return v1;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4451e8.  v0:= constclass @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4451ec.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L4451f2.  v1:= temp @kind object;
  #L4451f4.  v1:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`) v1 @kind object;
  #L4451f8.  return v1 @kind object;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `values`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.values:()[Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L44520c.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] @kind object;
  #L445210.  call temp:= `clone`(v0) @signature `[Lio/reactivex/internal/subscriptions/SubscriptionHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L445216.  v0:= temp @kind object;
  #L445218.  v0:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`[]) v0 @kind object;
  #L44521c.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L445280.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L445368.  return @kind void;
}
