record `io.reactivex.internal.subscriptions.ArrayCompositeSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
global `long` `@@io.reactivex.internal.subscriptions.ArrayCompositeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4442f0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4442f6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v4 @kind this) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L444308.  v0:= 0I;
  #L44430a.  call temp:= `get`(v4, v0) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L444310.  v1:= temp @kind object;
  #L444312.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L444316.  if v1 == v2 then goto L444362;
  #L44431a.  call temp:= `length`(v4) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.length:()I` @kind virtual;
  #L444320.  v1:= temp;
  #L444322.  if v0 >= v1 then goto L444362;
  #L444326.  call temp:= `get`(v4, v0) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L44432c.  v2:= temp @kind object;
  #L44432e.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L444332.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L444336.  if v2 == v3 then goto L44435c;
  #L44433a.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44433e.  call temp:= `getAndSet`(v4, v0, v2) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L444344.  v2:= temp @kind object;
  #L444346.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L44434a.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44434e.  if v2 == v3 then goto L44435c;
  #L444352.  if v2 == 0 then goto L44435c;
  #L444356.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44435c.  v0:= v0 + 1;
  #L444360.  goto L444322;
  #L444362.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v3 @kind this) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44423c.  v0:= 0I;
  #L44423e.  call temp:= `get`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L444244.  v1:= temp @kind object;
  #L444246.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44424a.  if v1 != v2 then goto L444250;
  #L44424e.  v0:= 1I;
  #L444250.  return v0;
}
procedure `org.reactivestreams.Subscription` `replaceResource`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v2 @kind this, `int` v3 , `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.replaceResource:(ILorg/reactivestreams/Subscription;)Lorg/reactivestreams/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4442b0.  call temp:= `get`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4442b6.  v0:= temp @kind object;
  #L4442b8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4442bc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4442c0.  if v0 != v1 then goto L4442d2;
  #L4442c4.  if v4 == 0 then goto L4442ce;
  #L4442c8.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4442ce.  v3:= 0I;
  #L4442d0.  return v3 @kind object;
  #L4442d2.  call temp:= `compareAndSet`(v2, v3, v0, v4) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4442d8.  v1:= temp;
  #L4442da.  if v1 == 0 then goto L4442b0;
  #L4442de.  return v0 @kind object;
}
procedure `boolean` `setResource`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v2 @kind this, `int` v3 , `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.setResource:(ILorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L444264.  call temp:= `get`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L44426a.  v0:= temp @kind object;
  #L44426c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L444270.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L444274.  if v0 != v1 then goto L444286;
  #L444278.  if v4 == 0 then goto L444282;
  #L44427c.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L444282.  v3:= 0I;
  #L444284.  return v3;
  #L444286.  call temp:= `compareAndSet`(v2, v3, v0, v4) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44428c.  v1:= temp;
  #L44428e.  if v1 == 0 then goto L444264;
  #L444292.  if v0 == 0 then goto L44429c;
  #L444296.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44429c.  v3:= 1I;
  #L44429e.  return v3;
}
