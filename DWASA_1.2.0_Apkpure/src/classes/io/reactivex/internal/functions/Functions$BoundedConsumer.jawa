record `io.reactivex.internal.functions.Functions$BoundedConsumer` @kind class @AccessFlag PUBLIC extends `io.reactivex.functions.Consumer` @kind interface {
  `int` `io.reactivex.internal.functions.Functions$BoundedConsumer.bufferSize` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.functions.Functions$BoundedConsumer` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/functions/Functions$BoundedConsumer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e6498.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e649e.  v0.`io.reactivex.internal.functions.Functions$BoundedConsumer.bufferSize` @type ^`int` := v1;
  #L3e64a2.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.functions.Functions$BoundedConsumer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/functions/Functions$BoundedConsumer;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3e64b4.  v1:= (`org.reactivestreams.Subscription`) v1 @kind object;
  #L3e64b8.  call `accept`(v0, v1) @signature `Lio/reactivex/internal/functions/Functions$BoundedConsumer;.accept:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L3e64be.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.functions.Functions$BoundedConsumer` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/functions/Functions$BoundedConsumer;.accept:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e64d0.  v0:= v2.`io.reactivex.internal.functions.Functions$BoundedConsumer.bufferSize` @type ^`int`;
  #L3e64d4.  v0:= (`long`) v0 @kind i2l;
  #L3e64d6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3e64dc.  return @kind void;
}
