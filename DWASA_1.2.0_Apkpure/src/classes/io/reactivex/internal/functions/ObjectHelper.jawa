record `io.reactivex.internal.functions.ObjectHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
global `io.reactivex.functions.BiPredicate` `@@io.reactivex.internal.functions.ObjectHelper.EQUALS` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e7474.  v0:= new `io.reactivex.internal.functions.ObjectHelper$BiObjectPredicate`;
  #L3e7478.  call `<init>`(v0) @signature `Lio/reactivex/internal/functions/ObjectHelper$BiObjectPredicate;.<init>:()V` @kind direct;
  #L3e747e.  `@@io.reactivex.internal.functions.ObjectHelper.EQUALS` @type ^`io.reactivex.functions.BiPredicate` := v0 @kind object;
  #L3e7482.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.functions.ObjectHelper` v2 @kind this) @signature `Lio/reactivex/internal/functions/ObjectHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e7494.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e749a.  v0:= new `java.lang.IllegalStateException`;
  #L3e749e.  v1:= "No instances!" @kind object;
  #L3e74a2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e74a8.  throw v0;
}
procedure `int` `compare`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/internal/functions/ObjectHelper;.compare:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e72e4.  if v0 >= v1 then goto L3e72ec;
  #L3e72e8.  v0:= -1I;
  #L3e72ea.  goto L3e72f6;
  #L3e72ec.  if v0 <= v1 then goto L3e72f4;
  #L3e72f0.  v0:= 1I;
  #L3e72f2.  goto L3e72f6;
  #L3e72f4.  v0:= 0I;
  #L3e72f6.  return v0;
}
procedure `int` `compare`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/functions/ObjectHelper;.compare:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e7308.  v0:= lcmp(v1, v3);
  #L3e730c.  if v0 >= 0 then goto L3e7314;
  #L3e7310.  v1:= -1I;
  #L3e7312.  goto L3e7322;
  #L3e7314.  v0:= lcmp(v1, v3);
  #L3e7318.  if v0 <= 0 then goto L3e7320;
  #L3e731c.  v1:= 1I;
  #L3e731e.  goto L3e7322;
  #L3e7320.  v1:= 0I;
  #L3e7322.  return v1;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e72b4.  if v0 == v1 then goto L3e72ce;
  #L3e72b8.  if v0 == 0 then goto L3e72ca;
  #L3e72bc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e72c2.  v0:= temp;
  #L3e72c4.  if v0 == 0 then goto L3e72ca;
  #L3e72c8.  goto L3e72ce;
  #L3e72ca.  v0:= 0I;
  #L3e72cc.  goto L3e72d0;
  #L3e72ce.  v0:= 1I;
  #L3e72d0.  return v0;
}
procedure `io.reactivex.functions.BiPredicate` `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e73a4.  v0:= `@@io.reactivex.internal.functions.ObjectHelper.EQUALS` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L3e73a8.  return v0 @kind object;
}
procedure `int` `hashCode`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.hashCode:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e7334.  if v0 == 0 then goto L3e7342;
  #L3e7338.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e733e.  v0:= temp;
  #L3e7340.  goto L3e7344;
  #L3e7342.  v0:= 0I;
  #L3e7344.  return v0;
}
procedure `long` `requireNonNull`(`long` v1 , `java.lang.String` v3 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(JLjava/lang/String;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e73e0.  v1:= new `java.lang.InternalError`;
  #L3e73e4.  v2:= new `java.lang.StringBuilder`;
  #L3e73e8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e73ee.  v0:= "Null check on a primitive: " @kind object;
  #L3e73f2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e73f8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e73fe.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e7404.  v2:= temp @kind object;
  #L3e7406.  call `<init>`(v1, v2) @signature `Ljava/lang/InternalError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e740c.  throw v1;
}
procedure `java.lang.Object` `requireNonNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e73bc.  if v0 == 0 then goto L3e73c2;
  #L3e73c0.  return v0 @kind object;
  #L3e73c2.  v0:= new `java.lang.NullPointerException`;
  #L3e73c6.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e73cc.  throw v0;
}
procedure `int` `verifyPositive`(`int` v2 , `java.lang.String` v3 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3e7358.  if v2 <= 0 then goto L3e735e;
  #L3e735c.  return v2;
  #L3e735e.  v0:= new `java.lang.IllegalArgumentException`;
  #L3e7362.  v1:= new `java.lang.StringBuilder`;
  #L3e7366.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e736c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7372.  v3:= " > 0 required but it was " @kind object;
  #L3e7376.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e737c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7382.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e7388.  v2:= temp @kind object;
  #L3e738a.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7390.  throw v0;
}
procedure `long` `verifyPositive`(`long` v3 , `java.lang.String` v5 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3e7420.  v0:= 0L;
  #L3e7424.  v2:= lcmp(v3, v0);
  #L3e7428.  if v2 <= 0 then goto L3e742e;
  #L3e742c.  return v3 @kind wide;
  #L3e742e.  v0:= new `java.lang.IllegalArgumentException`;
  #L3e7432.  v1:= new `java.lang.StringBuilder`;
  #L3e7436.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e743c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7442.  v5:= " > 0 required but it was " @kind object;
  #L3e7446.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e744c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7452.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e7458.  v3:= temp @kind object;
  #L3e745a.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7460.  throw v0;
}
