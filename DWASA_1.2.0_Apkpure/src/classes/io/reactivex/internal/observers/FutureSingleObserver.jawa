record `io.reactivex.internal.observers.FutureSingleObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.SingleObserver` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Throwable` `io.reactivex.internal.observers.FutureSingleObserver.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.observers.FutureSingleObserver.upstream` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.observers.FutureSingleObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e8c5c.  v0:= 1I;
  #L3e8c5e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L3e8c64.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3e8c68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3e8c6e.  v1.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3e8c72.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8ab0.  v3:= v2.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8ab4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e8aba.  v3:= temp @kind object;
  #L3e8abc.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L3e8ac0.  if v3 == v2 then goto L3e8af6;
  #L3e8ac4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3e8ac8.  if v3 != v0 then goto L3e8ace;
  #L3e8acc.  goto L3e8af6;
  #L3e8ace.  v0:= v2.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8ad2.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3e8ad6.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3e8adc.  v0:= temp;
  #L3e8ade.  if v0 == 0 then goto L3e8ab0;
  #L3e8ae2.  if v3 == 0 then goto L3e8aec;
  #L3e8ae6.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3e8aec.  call `countDown`(v2) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.countDown:()V` @kind virtual;
  #L3e8af2.  v3:= 1I;
  #L3e8af4.  return v3;
  #L3e8af6.  v3:= 0I;
  #L3e8af8.  return v3;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.FutureSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3e8c84.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e8b80.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.getCount:()J` @kind virtual;
  #L3e8b86.  v0:= temp @kind wide;
  #L3e8b88.  v2:= 0L;
  #L3e8b8c.  v4:= lcmp(v0, v2);
  #L3e8b90.  if v4 == 0 then goto L3e8ba0;
  #L3e8b94.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e8b9a.  call `await`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.await:()V` @kind virtual;
  #L3e8ba0.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @kind virtual;
  #L3e8ba6.  v0:= temp;
  #L3e8ba8.  if v0 != 0 then goto L3e8bc6;
  #L3e8bac.  v0:= v5.`io.reactivex.internal.observers.FutureSingleObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e8bb0.  if v0 != 0 then goto L3e8bba;
  #L3e8bb4.  v0:= v5.`io.reactivex.internal.observers.FutureSingleObserver.value` @type ^`java.lang.Object` @kind object;
  #L3e8bb8.  return v0 @kind object;
  #L3e8bba.  v1:= new `java.util.concurrent.ExecutionException`;
  #L3e8bbe.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3e8bc4.  throw v1;
  #L3e8bc6.  v0:= new `java.util.concurrent.CancellationException`;
  #L3e8bca.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L3e8bd0.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e8be4.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.getCount:()J` @kind virtual;
  #L3e8bea.  v0:= temp @kind wide;
  #L3e8bec.  v2:= 0L;
  #L3e8bf0.  v4:= lcmp(v0, v2);
  #L3e8bf4.  if v4 == 0 then goto L3e8c18;
  #L3e8bf8.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e8bfe.  call temp:= `await`(v5, v6, v8) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L3e8c04.  v6:= temp;
  #L3e8c06.  if v6 == 0 then goto L3e8c0c;
  #L3e8c0a.  goto L3e8c18;
  #L3e8c0c.  v6:= new `java.util.concurrent.TimeoutException`;
  #L3e8c10.  call `<init>`(v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L3e8c16.  throw v6;
  #L3e8c18.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @kind virtual;
  #L3e8c1e.  v6:= temp;
  #L3e8c20.  if v6 != 0 then goto L3e8c3e;
  #L3e8c24.  v6:= v5.`io.reactivex.internal.observers.FutureSingleObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e8c28.  if v6 != 0 then goto L3e8c32;
  #L3e8c2c.  v6:= v5.`io.reactivex.internal.observers.FutureSingleObserver.value` @type ^`java.lang.Object` @kind object;
  #L3e8c30.  return v6 @kind object;
  #L3e8c32.  v7:= new `java.util.concurrent.ExecutionException`;
  #L3e8c36.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3e8c3c.  throw v7;
  #L3e8c3e.  v6:= new `java.util.concurrent.CancellationException`;
  #L3e8c42.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L3e8c48.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8b0c.  v0:= v1.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8b10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e8b16.  v0:= temp @kind object;
  #L3e8b18.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3e8b1c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3e8b22.  v0:= temp;
  #L3e8b24.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8b38.  call temp:= `isDone`(v1) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDone:()Z` @kind virtual;
  #L3e8b3e.  v0:= temp;
  #L3e8b40.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e8b54.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.getCount:()J` @kind virtual;
  #L3e8b5a.  v0:= temp @kind wide;
  #L3e8b5c.  v2:= 0L;
  #L3e8b60.  v4:= lcmp(v0, v2);
  #L3e8b64.  if v4 != 0 then goto L3e8b6c;
  #L3e8b68.  v0:= 1I;
  #L3e8b6a.  goto L3e8b6e;
  #L3e8b6c.  v0:= 0I;
  #L3e8b6e.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8c98.  v0:= v2.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8c9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e8ca2.  v0:= temp @kind object;
  #L3e8ca4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3e8ca8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3e8cac.  if v0 != v1 then goto L3e8cb8;
  #L3e8cb0.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3e8cb6.  return @kind void;
  #L3e8cb8.  v2.`io.reactivex.internal.observers.FutureSingleObserver.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L3e8cbc.  v1:= v2.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8cc0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3e8cc6.  v0:= temp;
  #L3e8cc8.  if v0 == 0 then goto L3e8c98;
  #L3e8ccc.  call `countDown`(v2) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.countDown:()V` @kind virtual;
  #L3e8cd2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8ce4.  v0:= v1.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8ce8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3e8cee.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8d00.  v0:= v2.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8d04.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e8d0a.  v0:= temp @kind object;
  #L3e8d0c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3e8d10.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3e8d14.  if v0 != v1 then goto L3e8d1a;
  #L3e8d18.  return @kind void;
  #L3e8d1a.  v2.`io.reactivex.internal.observers.FutureSingleObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L3e8d1e.  v3:= v2.`io.reactivex.internal.observers.FutureSingleObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8d22.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3e8d28.  call `countDown`(v2) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.countDown:()V` @kind virtual;
  #L3e8d2e.  return @kind void;
}
