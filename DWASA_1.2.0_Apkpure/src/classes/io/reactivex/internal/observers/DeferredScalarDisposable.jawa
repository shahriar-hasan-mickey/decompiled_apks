record `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.observers.DeferredScalarDisposable.value` @AccessFlag PROTECTED;
}
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.DISPOSED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.FUSED_CONSUMED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.FUSED_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.FUSED_READY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.observers.DeferredScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.DeferredScalarDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3e81e4.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L3e81ea.  v0.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L3e81ee.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e8200.  v0:= 32I;
  #L3e8204.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L3e820a.  v0:= 0I;
  #L3e820c.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L3e8210.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e8224.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.get:()I` @kind virtual;
  #L3e822a.  v0:= temp;
  #L3e822c.  v0:= v0 ^& 54;
  #L3e8230.  if v0 == 0 then goto L3e8236;
  #L3e8234.  return @kind void;
  #L3e8236.  v0:= 2I;
  #L3e8238.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L3e823e.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L3e8242.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L3e8248.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3e825c.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.get:()I` @kind virtual;
  #L3e8262.  v0:= temp;
  #L3e8264.  v1:= v0 ^& 54;
  #L3e8268.  if v1 == 0 then goto L3e826e;
  #L3e826c.  return @kind void;
  #L3e826e.  v1:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L3e8272.  v2:= 8I;
  #L3e8276.  if v0 != v2 then goto L3e8292;
  #L3e827a.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v4 @kind object;
  #L3e827e.  v4:= 16I;
  #L3e8282.  call `lazySet`(v3, v4) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L3e8288.  v4:= 0I;
  #L3e828a.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3e8290.  goto L3e82a0;
  #L3e8292.  v0:= 2I;
  #L3e8294.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L3e829a.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3e82a0.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.get:()I` @kind virtual;
  #L3e82a6.  v4:= temp;
  #L3e82a8.  v0:= 4I;
  #L3e82aa.  if v4 == v0 then goto L3e82b4;
  #L3e82ae.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L3e82b4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e82c8.  v0:= 4I;
  #L3e82ca.  call `set`(v1, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.set:(I)V` @kind virtual;
  #L3e82d0.  v0:= 0I;
  #L3e82d2.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L3e82d6.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e82e8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.get:()I` @kind virtual;
  #L3e82ee.  v0:= temp;
  #L3e82f0.  v0:= v0 ^& 54;
  #L3e82f4.  if v0 == 0 then goto L3e8300;
  #L3e82f8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3e82fe.  return @kind void;
  #L3e8300.  v0:= 2I;
  #L3e8302.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L3e8308.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L3e830c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e8312.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3e810c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.get:()I` @kind virtual;
  #L3e8112.  v0:= temp;
  #L3e8114.  v1:= 4I;
  #L3e8116.  if v0 != v1 then goto L3e811e;
  #L3e811a.  v0:= 1I;
  #L3e811c.  goto L3e8120;
  #L3e811e.  v0:= 0I;
  #L3e8120.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3e8134.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.get:()I` @kind virtual;
  #L3e813a.  v0:= temp;
  #L3e813c.  v1:= 16I;
  #L3e8140.  if v0 == v1 then goto L3e8148;
  #L3e8144.  v0:= 1I;
  #L3e8146.  goto L3e814a;
  #L3e8148.  v0:= 0I;
  #L3e814a.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3e81ac.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.get:()I` @kind virtual;
  #L3e81b2.  v0:= temp;
  #L3e81b4.  v1:= 0I;
  #L3e81b6.  v2:= 16I;
  #L3e81ba.  if v0 != v2 then goto L3e81d2;
  #L3e81be.  v0:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L3e81c2.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L3e81c6.  v1:= 32I;
  #L3e81ca.  call `lazySet`(v3, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L3e81d0.  return v0 @kind object;
  #L3e81d2.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e8184.  v0:= 2I;
  #L3e8186.  v2:= v2 ^& v0 @kind int;
  #L3e8188.  if v2 == 0 then goto L3e8198;
  #L3e818c.  v2:= 8I;
  #L3e8190.  call `lazySet`(v1, v2) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L3e8196.  return v0;
  #L3e8198.  v2:= 0I;
  #L3e819a.  return v2;
}
procedure `boolean` `tryDispose`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.tryDispose:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3e815c.  v0:= 4I;
  #L3e815e.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.getAndSet:(I)I` @kind virtual;
  #L3e8164.  v1:= temp;
  #L3e8166.  if v1 == v0 then goto L3e816e;
  #L3e816a.  v0:= 1I;
  #L3e816c.  goto L3e8170;
  #L3e816e.  v0:= 0I;
  #L3e8170.  return v0;
}
