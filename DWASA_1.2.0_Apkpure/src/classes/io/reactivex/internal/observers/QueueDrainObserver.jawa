record `io.reactivex.internal.observers.QueueDrainObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.observers.QueueDrainSubscriberPad2` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.internal.util.ObservableQueueDrain` @kind interface {
  `boolean` `io.reactivex.internal.observers.QueueDrainObserver.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.internal.observers.QueueDrainObserver.done` @AccessFlag PROTECTED_VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.observers.QueueDrainObserver.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Throwable` `io.reactivex.internal.observers.QueueDrainObserver.error` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.observers.QueueDrainObserver.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3e919c.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/QueueDrainSubscriberPad2;.<init>:()V` @kind direct;
  #L3e91a2.  v0.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L3e91a6.  v0.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L3e91aa.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3e91bc.  return @kind void;
}
procedure `boolean` `cancelled`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e90d0.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L3e90d4.  return v0;
}
procedure `boolean` `done`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e90e8.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L3e90ec.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e9100.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e9104.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3e910a.  v0:= temp;
  #L3e910c.  if v0 != 0 then goto L3e9114;
  #L3e9110.  v0:= 1I;
  #L3e9112.  goto L3e9116;
  #L3e9114.  v0:= 0I;
  #L3e9116.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e9184.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e9188.  return v0 @kind object;
}
procedure `boolean` `fastEnter`(`io.reactivex.internal.observers.QueueDrainObserver` v3 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3e9128.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e912c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3e9132.  v0:= temp;
  #L3e9134.  v1:= 1I;
  #L3e9136.  v2:= 0I;
  #L3e9138.  if v0 != 0 then goto L3e914e;
  #L3e913c.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e9140.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L3e9146.  v0:= temp;
  #L3e9148.  if v0 == 0 then goto L3e914e;
  #L3e914c.  goto L3e9150;
  #L3e914e.  v1:= 0I;
  #L3e9150.  return v1;
}
procedure `void` `fastPathEmit`(`io.reactivex.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e91d0.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L3e91d4.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3e91d8.  v2:= v5.`io.reactivex.internal.observers.QueueDrainObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e91dc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3e91e2.  v2:= temp;
  #L3e91e4.  if v2 != 0 then goto L3e9212;
  #L3e91e8.  v2:= v5.`io.reactivex.internal.observers.QueueDrainObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e91ec.  v3:= 0I;
  #L3e91ee.  v4:= 1I;
  #L3e91f0.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L3e91f6.  v2:= temp;
  #L3e91f8.  if v2 == 0 then goto L3e9212;
  #L3e91fc.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L3e9202.  v6:= -1I;
  #L3e9204.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L3e920a.  v6:= temp;
  #L3e920c.  if v6 != 0 then goto L3e9226;
  #L3e9210.  return @kind void;
  #L3e9212.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3e9218.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L3e921e.  v6:= temp;
  #L3e9220.  if v6 != 0 then goto L3e9226;
  #L3e9224.  return @kind void;
  #L3e9226.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L3e922c.  return @kind void;
}
procedure `void` `fastPathOrderedEmit`(`io.reactivex.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e9240.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L3e9244.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3e9248.  v2:= v5.`io.reactivex.internal.observers.QueueDrainObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e924c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3e9252.  v2:= temp;
  #L3e9254.  if v2 != 0 then goto L3e9296;
  #L3e9258.  v2:= v5.`io.reactivex.internal.observers.QueueDrainObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e925c.  v3:= 0I;
  #L3e925e.  v4:= 1I;
  #L3e9260.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L3e9266.  v2:= temp;
  #L3e9268.  if v2 == 0 then goto L3e9296;
  #L3e926c.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L3e9272.  v2:= temp;
  #L3e9274.  if v2 == 0 then goto L3e928e;
  #L3e9278.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L3e927e.  v6:= -1I;
  #L3e9280.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L3e9286.  v6:= temp;
  #L3e9288.  if v6 != 0 then goto L3e92aa;
  #L3e928c.  return @kind void;
  #L3e928e.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3e9294.  goto L3e92aa;
  #L3e9296.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3e929c.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L3e92a2.  v6:= temp;
  #L3e92a4.  if v6 != 0 then goto L3e92aa;
  #L3e92a8.  return @kind void;
  #L3e92aa.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L3e92b0.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3e9164.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e9168.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L3e916e.  v2:= temp;
  #L3e9170.  return v2;
}
