record `io.reactivex.internal.observers.BlockingMultiObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.MaybeObserver` @kind interface {
  `boolean` `io.reactivex.internal.observers.BlockingMultiObserver.cancelled` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.observers.BlockingMultiObserver.error` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.observers.BlockingMultiObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.observers.BlockingMultiObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.BlockingMultiObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e7c80.  v0:= 1I;
  #L3e7c82.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L3e7c88.  return @kind void;
}
procedure `boolean` `blockingAwait`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingAwait:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e7a58.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.getCount:()J` @kind virtual;
  #L3e7a5e.  v0:= temp @kind wide;
  #L3e7a60.  v2:= 0L;
  #L3e7a64.  v4:= lcmp(v0, v2);
  #L3e7a68.  if v4 == 0 then goto L3e7a9a;
  #L3e7a6c.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e7a72.  call temp:= `await`(v5, v6, v8) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L3e7a78.  v6:= temp;
  #L3e7a7a.  if v6 != 0 then goto L3e7a9a;
  #L3e7a7e.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.dispose:()V` @kind virtual;
  #L3e7a84.  v6:= 0I;
  #L3e7a86.  return v6;
  #L3e7a88.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3e7a8a.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.dispose:()V` @kind virtual;
  #L3e7a90.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3e7a96.  v6:= temp @kind object;
  #L3e7a98.  throw v6;
  #L3e7a9a.  v6:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e7a9e.  if v6 != 0 then goto L3e7aa6;
  #L3e7aa2.  v6:= 1I;
  #L3e7aa4.  return v6;
  #L3e7aa6.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3e7aac.  v6:= temp @kind object;
  #L3e7aae.  throw v6;
  catch `java.lang.InterruptedException` @[L3e7a6c..L3e7a84] goto L3e7a88;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e7ad0.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.getCount:()J` @kind virtual;
  #L3e7ad6.  v0:= temp @kind wide;
  #L3e7ad8.  v2:= 0L;
  #L3e7adc.  v4:= lcmp(v0, v2);
  #L3e7ae0.  if v4 == 0 then goto L3e7b04;
  #L3e7ae4.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e7aea.  call `await`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.await:()V` @kind virtual;
  #L3e7af0.  goto L3e7b04;
  #L3e7af2.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3e7af4.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.dispose:()V` @kind virtual;
  #L3e7afa.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3e7b00.  v0:= temp @kind object;
  #L3e7b02.  throw v0;
  #L3e7b04.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e7b08.  if v0 != 0 then goto L3e7b12;
  #L3e7b0c.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.value` @type ^`java.lang.Object` @kind object;
  #L3e7b10.  return v0 @kind object;
  #L3e7b12.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3e7b18.  v0:= temp @kind object;
  #L3e7b1a.  throw v0;
  catch `java.lang.InterruptedException` @[L3e7ae4..L3e7af0] goto L3e7af2;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e7b3c.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.getCount:()J` @kind virtual;
  #L3e7b42.  v0:= temp @kind wide;
  #L3e7b44.  v2:= 0L;
  #L3e7b48.  v4:= lcmp(v0, v2);
  #L3e7b4c.  if v4 == 0 then goto L3e7b70;
  #L3e7b50.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e7b56.  call `await`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.await:()V` @kind virtual;
  #L3e7b5c.  goto L3e7b70;
  #L3e7b5e.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3e7b60.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.dispose:()V` @kind virtual;
  #L3e7b66.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3e7b6c.  v6:= temp @kind object;
  #L3e7b6e.  throw v6;
  #L3e7b70.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e7b74.  if v0 != 0 then goto L3e7b84;
  #L3e7b78.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.value` @type ^`java.lang.Object` @kind object;
  #L3e7b7c.  if v0 == 0 then goto L3e7b82;
  #L3e7b80.  v6:= v0 @kind object;
  #L3e7b82.  return v6 @kind object;
  #L3e7b84.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3e7b8a.  v6:= temp @kind object;
  #L3e7b8c.  throw v6;
  catch `java.lang.InterruptedException` @[L3e7b50..L3e7b5c] goto L3e7b5e;
}
procedure `java.lang.Throwable` `blockingGetError`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGetError:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e7bb0.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.getCount:()J` @kind virtual;
  #L3e7bb6.  v0:= temp @kind wide;
  #L3e7bb8.  v2:= 0L;
  #L3e7bbc.  v4:= lcmp(v0, v2);
  #L3e7bc0.  if v4 == 0 then goto L3e7bdc;
  #L3e7bc4.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e7bca.  call `await`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.await:()V` @kind virtual;
  #L3e7bd0.  goto L3e7bdc;
  #L3e7bd2.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3e7bd4.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.dispose:()V` @kind virtual;
  #L3e7bda.  return v0 @kind object;
  #L3e7bdc.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e7be0.  return v0 @kind object;
  catch `java.lang.InterruptedException` @[L3e7bc4..L3e7bd0] goto L3e7bd2;
}
procedure `java.lang.Throwable` `blockingGetError`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGetError:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e7c04.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.getCount:()J` @kind virtual;
  #L3e7c0a.  v0:= temp @kind wide;
  #L3e7c0c.  v2:= 0L;
  #L3e7c10.  v4:= lcmp(v0, v2);
  #L3e7c14.  if v4 == 0 then goto L3e7c58;
  #L3e7c18.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e7c1e.  call temp:= `await`(v5, v6, v8) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L3e7c24.  v6:= temp;
  #L3e7c26.  if v6 == 0 then goto L3e7c2c;
  #L3e7c2a.  goto L3e7c58;
  #L3e7c2c.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.dispose:()V` @kind virtual;
  #L3e7c32.  v6:= new `java.util.concurrent.TimeoutException`;
  #L3e7c36.  call `<init>`(v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L3e7c3c.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3e7c42.  v6:= temp @kind object;
  #L3e7c44.  throw v6;
  #L3e7c46.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3e7c48.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.dispose:()V` @kind virtual;
  #L3e7c4e.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3e7c54.  v6:= temp @kind object;
  #L3e7c56.  throw v6;
  #L3e7c58.  v6:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e7c5c.  return v6 @kind object;
  catch `java.lang.InterruptedException` @[L3e7c18..L3e7c46] goto L3e7c46;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.BlockingMultiObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.dispose:()V` @AccessFlag  {
    temp;
    v0;

  #L3e7c9c.  v0:= 1I;
  #L3e7c9e.  v1.`io.reactivex.internal.observers.BlockingMultiObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3e7ca2.  v0:= v1.`io.reactivex.internal.observers.BlockingMultiObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3e7ca6.  if v0 == 0 then goto L3e7cb0;
  #L3e7caa.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3e7cb0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.BlockingMultiObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L3e7cc4.  call `countDown`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.countDown:()V` @kind virtual;
  #L3e7cca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.BlockingMultiObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L3e7cdc.  v0.`io.reactivex.internal.observers.BlockingMultiObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L3e7ce0.  call `countDown`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.countDown:()V` @kind virtual;
  #L3e7ce6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.BlockingMultiObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7cf8.  v1.`io.reactivex.internal.observers.BlockingMultiObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L3e7cfc.  v0:= v1.`io.reactivex.internal.observers.BlockingMultiObserver.cancelled` @type ^`boolean` @kind boolean;
  #L3e7d00.  if v0 == 0 then goto L3e7d0a;
  #L3e7d04.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3e7d0a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.observers.BlockingMultiObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3e7d1c.  v0.`io.reactivex.internal.observers.BlockingMultiObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L3e7d20.  call `countDown`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.countDown:()V` @kind virtual;
  #L3e7d26.  return @kind void;
}
