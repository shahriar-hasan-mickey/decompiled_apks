record `io.reactivex.internal.observers.FutureObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.Observer` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Throwable` `io.reactivex.internal.observers.FutureObserver.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.observers.FutureObserver.upstream` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.observers.FutureObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e8944.  v0:= 1I;
  #L3e8946.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L3e894c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3e8950.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3e8956.  v1.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3e895a.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.internal.observers.FutureObserver` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/internal/observers/FutureObserver;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8798.  v3:= v2.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e879c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e87a2.  v3:= temp @kind object;
  #L3e87a4.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L3e87a8.  if v3 == v2 then goto L3e87de;
  #L3e87ac.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3e87b0.  if v3 != v0 then goto L3e87b6;
  #L3e87b4.  goto L3e87de;
  #L3e87b6.  v0:= v2.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e87ba.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3e87be.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3e87c4.  v0:= temp;
  #L3e87c6.  if v0 == 0 then goto L3e8798;
  #L3e87ca.  if v3 == 0 then goto L3e87d4;
  #L3e87ce.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3e87d4.  call `countDown`(v2) @signature `Lio/reactivex/internal/observers/FutureObserver;.countDown:()V` @kind virtual;
  #L3e87da.  v3:= 1I;
  #L3e87dc.  return v3;
  #L3e87de.  v3:= 0I;
  #L3e87e0.  return v3;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.FutureObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/FutureObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3e896c.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.FutureObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/FutureObserver;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e8868.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/FutureObserver;.getCount:()J` @kind virtual;
  #L3e886e.  v0:= temp @kind wide;
  #L3e8870.  v2:= 0L;
  #L3e8874.  v4:= lcmp(v0, v2);
  #L3e8878.  if v4 == 0 then goto L3e8888;
  #L3e887c.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e8882.  call `await`(v5) @signature `Lio/reactivex/internal/observers/FutureObserver;.await:()V` @kind virtual;
  #L3e8888.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/FutureObserver;.isCancelled:()Z` @kind virtual;
  #L3e888e.  v0:= temp;
  #L3e8890.  if v0 != 0 then goto L3e88ae;
  #L3e8894.  v0:= v5.`io.reactivex.internal.observers.FutureObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e8898.  if v0 != 0 then goto L3e88a2;
  #L3e889c.  v0:= v5.`io.reactivex.internal.observers.FutureObserver.value` @type ^`java.lang.Object` @kind object;
  #L3e88a0.  return v0 @kind object;
  #L3e88a2.  v1:= new `java.util.concurrent.ExecutionException`;
  #L3e88a6.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3e88ac.  throw v1;
  #L3e88ae.  v0:= new `java.util.concurrent.CancellationException`;
  #L3e88b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L3e88b8.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.FutureObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/FutureObserver;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e88cc.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/FutureObserver;.getCount:()J` @kind virtual;
  #L3e88d2.  v0:= temp @kind wide;
  #L3e88d4.  v2:= 0L;
  #L3e88d8.  v4:= lcmp(v0, v2);
  #L3e88dc.  if v4 == 0 then goto L3e8900;
  #L3e88e0.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3e88e6.  call temp:= `await`(v5, v6, v8) @signature `Lio/reactivex/internal/observers/FutureObserver;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L3e88ec.  v6:= temp;
  #L3e88ee.  if v6 == 0 then goto L3e88f4;
  #L3e88f2.  goto L3e8900;
  #L3e88f4.  v6:= new `java.util.concurrent.TimeoutException`;
  #L3e88f8.  call `<init>`(v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L3e88fe.  throw v6;
  #L3e8900.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/FutureObserver;.isCancelled:()Z` @kind virtual;
  #L3e8906.  v6:= temp;
  #L3e8908.  if v6 != 0 then goto L3e8926;
  #L3e890c.  v6:= v5.`io.reactivex.internal.observers.FutureObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e8910.  if v6 != 0 then goto L3e891a;
  #L3e8914.  v6:= v5.`io.reactivex.internal.observers.FutureObserver.value` @type ^`java.lang.Object` @kind object;
  #L3e8918.  return v6 @kind object;
  #L3e891a.  v7:= new `java.util.concurrent.ExecutionException`;
  #L3e891e.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3e8924.  throw v7;
  #L3e8926.  v6:= new `java.util.concurrent.CancellationException`;
  #L3e892a.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L3e8930.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureObserver;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e87f4.  v0:= v1.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e87f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e87fe.  v0:= temp @kind object;
  #L3e8800.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3e8804.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3e880a.  v0:= temp;
  #L3e880c.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8820.  call temp:= `isDone`(v1) @signature `Lio/reactivex/internal/observers/FutureObserver;.isDone:()Z` @kind virtual;
  #L3e8826.  v0:= temp;
  #L3e8828.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.internal.observers.FutureObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/FutureObserver;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e883c.  call temp:= `getCount`(v5) @signature `Lio/reactivex/internal/observers/FutureObserver;.getCount:()J` @kind virtual;
  #L3e8842.  v0:= temp @kind wide;
  #L3e8844.  v2:= 0L;
  #L3e8848.  v4:= lcmp(v0, v2);
  #L3e884c.  if v4 != 0 then goto L3e8854;
  #L3e8850.  v0:= 1I;
  #L3e8852.  goto L3e8856;
  #L3e8854.  v0:= 0I;
  #L3e8856.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.FutureObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/FutureObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8980.  v0:= v2.`io.reactivex.internal.observers.FutureObserver.value` @type ^`java.lang.Object` @kind object;
  #L3e8984.  if v0 != 0 then goto L3e899e;
  #L3e8988.  v0:= new `java.util.NoSuchElementException`;
  #L3e898c.  v1:= "The source is empty" @kind object;
  #L3e8990.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e8996.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3e899c.  return @kind void;
  #L3e899e.  v0:= v2.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e89a2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e89a8.  v0:= temp @kind object;
  #L3e89aa.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3e89ae.  if v0 == v2 then goto L3e89d2;
  #L3e89b2.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3e89b6.  if v0 != v1 then goto L3e89bc;
  #L3e89ba.  goto L3e89d2;
  #L3e89bc.  v1:= v2.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e89c0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3e89c6.  v0:= temp;
  #L3e89c8.  if v0 == 0 then goto L3e899e;
  #L3e89cc.  call `countDown`(v2) @signature `Lio/reactivex/internal/observers/FutureObserver;.countDown:()V` @kind virtual;
  #L3e89d2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.FutureObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e89e4.  v0:= v2.`io.reactivex.internal.observers.FutureObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3e89e8.  if v0 != 0 then goto L3e8a2e;
  #L3e89ec.  v2.`io.reactivex.internal.observers.FutureObserver.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L3e89f0.  v0:= v2.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e89f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e89fa.  v0:= temp @kind object;
  #L3e89fc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3e8a00.  if v0 == v2 then goto L3e8a26;
  #L3e8a04.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3e8a08.  if v0 != v1 then goto L3e8a0e;
  #L3e8a0c.  goto L3e8a26;
  #L3e8a0e.  v1:= v2.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8a12.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3e8a18.  v0:= temp;
  #L3e8a1a.  if v0 == 0 then goto L3e89f0;
  #L3e8a1e.  call `countDown`(v2) @signature `Lio/reactivex/internal/observers/FutureObserver;.countDown:()V` @kind virtual;
  #L3e8a24.  return @kind void;
  #L3e8a26.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3e8a2c.  return @kind void;
  #L3e8a2e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3e8a34.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.FutureObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/FutureObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8a48.  v0:= v1.`io.reactivex.internal.observers.FutureObserver.value` @type ^`java.lang.Object` @kind object;
  #L3e8a4c.  if v0 == 0 then goto L3e8a7c;
  #L3e8a50.  v2:= v1.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8a54.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e8a5a.  v2:= temp @kind object;
  #L3e8a5c.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L3e8a60.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3e8a66.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L3e8a6a.  v0:= "More than one element received" @kind object;
  #L3e8a6e.  call `<init>`(v2, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e8a74.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3e8a7a.  return @kind void;
  #L3e8a7c.  v1.`io.reactivex.internal.observers.FutureObserver.value` @type ^`java.lang.Object` := v2 @kind object;
  #L3e8a80.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.FutureObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/FutureObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8a94.  v0:= v1.`io.reactivex.internal.observers.FutureObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e8a98.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3e8a9e.  return @kind void;
}
