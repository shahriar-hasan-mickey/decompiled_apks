record `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.emitLast` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timeout` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerRunning` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43120c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L431212.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L431216.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timeout` @type ^`long` := v2 @kind wide;
  #L43121a.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L43121e.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L431222.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.emitLast` @type ^`boolean` := v6 @kind boolean;
  #L431226.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43122a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L431230.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L431234.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431248.  v0:= 1I;
  #L43124a.  v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L43124e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L431252.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L431258.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43125c.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L431262.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.getAndIncrement:()I` @kind virtual;
  #L431268.  v0:= temp;
  #L43126a.  if v0 != 0 then goto L43127a;
  #L43126e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431272.  v1:= 0I;
  #L431274.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43127a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43128c.  call temp:= `getAndIncrement`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.getAndIncrement:()I` @kind virtual;
  #L431292.  v0:= temp;
  #L431294.  if v0 == 0 then goto L43129a;
  #L431298.  return @kind void;
  #L43129a.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43129e.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4312a2.  v2:= 1I;
  #L4312a4.  v3:= 1I;
  #L4312a6.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4312aa.  v5:= 0I;
  #L4312ac.  if v4 == 0 then goto L4312b8;
  #L4312b0.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4312b6.  return @kind void;
  #L4312b8.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.done` @type ^`boolean` @kind boolean;
  #L4312bc.  if v4 == 0 then goto L4312e4;
  #L4312c0.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4312c4.  if v6 == 0 then goto L4312e4;
  #L4312c8.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4312ce.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4312d2.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4312d8.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4312dc.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4312e2.  return @kind void;
  #L4312e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4312ea.  v6:= temp @kind object;
  #L4312ec.  v7:= 0I;
  #L4312ee.  if v6 != 0 then goto L4312f6;
  #L4312f2.  v6:= 1I;
  #L4312f4.  goto L4312f8;
  #L4312f6.  v6:= 0I;
  #L4312f8.  if v4 == 0 then goto L431328;
  #L4312fc.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L431302.  v0:= temp @kind object;
  #L431304.  if v6 != 0 then goto L431316;
  #L431308.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.emitLast` @type ^`boolean` @kind boolean;
  #L43130c.  if v2 == 0 then goto L431316;
  #L431310.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L431316.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43131c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L431320.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L431326.  return @kind void;
  #L431328.  if v6 == 0 then goto L43133e;
  #L43132c.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` @kind boolean;
  #L431330.  if v4 == 0 then goto L431350;
  #L431334.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerRunning` @type ^`boolean` := v7 @kind boolean;
  #L431338.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` := v7 @kind boolean;
  #L43133c.  goto L431350;
  #L43133e.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerRunning` @type ^`boolean` @kind boolean;
  #L431342.  if v4 == 0 then goto L431360;
  #L431346.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` @kind boolean;
  #L43134a.  if v4 == 0 then goto L431350;
  #L43134e.  goto L431360;
  #L431350.  v3:= -v3 @kind int;
  #L431352.  call temp:= `addAndGet`(v8, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.addAndGet:(I)I` @kind virtual;
  #L431358.  v3:= temp;
  #L43135a.  if v3 != 0 then goto L4312a6;
  #L43135e.  return @kind void;
  #L431360.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L431366.  v4:= temp @kind object;
  #L431368.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43136e.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` := v7 @kind boolean;
  #L431372.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerRunning` @type ^`boolean` := v2 @kind boolean;
  #L431376.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43137a.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timeout` @type ^`long` @kind wide;
  #L43137e.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L431382.  call temp:= `schedule`(v4, v8, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L431388.  goto L4312a6;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4311f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4311f8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43139c.  v0:= 1I;
  #L43139e.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4313a2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @kind virtual;
  #L4313a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4313bc.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4313c0.  v1:= 1I;
  #L4313c2.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L4313c6.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @kind virtual;
  #L4313cc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4313e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4313e4.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4313ea.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @kind virtual;
  #L4313f0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431404.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L431408.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43140e.  v0:= temp;
  #L431410.  if v0 == 0 then goto L431422;
  #L431414.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L431418.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43141c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L431422.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431434.  v0:= 1I;
  #L431436.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` := v0 @kind boolean;
  #L43143a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @kind virtual;
  #L431440.  return @kind void;
}
