record `io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.error` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.hasNext` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.isNextConsumed` @AccessFlag PRIVATE;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.items` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.next` @AccessFlag PRIVATE;
  `io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.observer` @AccessFlag PRIVATE_FINAL;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.started` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator` v1 @kind this, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextIterator;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41c38c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41c392.  v0:= 1I;
  #L41c394.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L41c398.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.isNextConsumed` @type ^`boolean` := v0 @kind boolean;
  #L41c39c.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.items` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L41c3a0.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.observer` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` := v3 @kind object;
  #L41c3a4.  return @kind void;
}
procedure `boolean` `moveToNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextIterator;.moveToNext:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41c27c.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.started` @type ^`boolean` @kind boolean;
  #L41c280.  v1:= 1I;
  #L41c282.  if v0 != 0 then goto L41c2ac;
  #L41c286.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.started` @type ^`boolean` := v1 @kind boolean;
  #L41c28a.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.observer` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` @kind object;
  #L41c28e.  call `setWaiting`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.setWaiting:()V` @kind virtual;
  #L41c294.  v0:= new `io.reactivex.internal.operators.observable.ObservableMaterialize`;
  #L41c298.  v2:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.items` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41c29c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L41c2a2.  v2:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.observer` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` @kind object;
  #L41c2a6.  call `subscribe`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L41c2ac.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.observer` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` @kind object;
  #L41c2b0.  call temp:= `takeNext`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.takeNext:()Lio/reactivex/Notification;` @kind virtual;
  #L41c2b6.  v0:= temp @kind object;
  #L41c2b8.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L41c2be.  v2:= temp;
  #L41c2c0.  v3:= 0I;
  #L41c2c2.  if v2 == 0 then goto L41c2d8;
  #L41c2c6.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.isNextConsumed` @type ^`boolean` := v3 @kind boolean;
  #L41c2ca.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L41c2d0.  v0:= temp @kind object;
  #L41c2d2.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.next` @type ^`java.lang.Object` := v0 @kind object;
  #L41c2d6.  return v1;
  #L41c2d8.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.hasNext` @type ^`boolean` := v3 @kind boolean;
  #L41c2dc.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L41c2e2.  v1:= temp;
  #L41c2e4.  if v1 == 0 then goto L41c2ea;
  #L41c2e8.  return v3;
  #L41c2ea.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L41c2f0.  v0:= temp @kind object;
  #L41c2f2.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.error` @type ^`java.lang.Throwable` := v0 @kind object;
  #L41c2f6.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L41c2fa.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41c300.  v0:= temp @kind object;
  #L41c302.  throw v0;
  #L41c304.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L41c306.  v1:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.observer` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` @kind object;
  #L41c30a.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.dispose:()V` @kind virtual;
  #L41c310.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.error` @type ^`java.lang.Throwable` := v0 @kind object;
  #L41c314.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41c31a.  v0:= temp @kind object;
  #L41c31c.  throw v0;
  catch `java.lang.InterruptedException` @[L41c2ac..L41c2b8] goto L41c304;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c234.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L41c238.  if v0 != 0 then goto L41c260;
  #L41c23c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.hasNext` @type ^`boolean` @kind boolean;
  #L41c240.  v1:= 0I;
  #L41c242.  if v0 != 0 then goto L41c248;
  #L41c246.  return v1;
  #L41c248.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.isNextConsumed` @type ^`boolean` @kind boolean;
  #L41c24c.  if v0 == 0 then goto L41c25c;
  #L41c250.  call temp:= `moveToNext`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextIterator;.moveToNext:()Z` @kind direct;
  #L41c256.  v0:= temp;
  #L41c258.  if v0 == 0 then goto L41c25e;
  #L41c25c.  v1:= 1I;
  #L41c25e.  return v1;
  #L41c260.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41c266.  v0:= temp @kind object;
  #L41c268.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c340.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L41c344.  if v0 != 0 then goto L41c370;
  #L41c348.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextIterator;.hasNext:()Z` @kind virtual;
  #L41c34e.  v0:= temp;
  #L41c350.  if v0 == 0 then goto L41c360;
  #L41c354.  v0:= 1I;
  #L41c356.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.isNextConsumed` @type ^`boolean` := v0 @kind boolean;
  #L41c35a.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator.next` @type ^`java.lang.Object` @kind object;
  #L41c35e.  return v0 @kind object;
  #L41c360.  v0:= new `java.util.NoSuchElementException`;
  #L41c364.  v1:= "No more elements" @kind object;
  #L41c368.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41c36e.  throw v0;
  #L41c370.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41c376.  v0:= temp @kind object;
  #L41c378.  throw v0;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c3b8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L41c3bc.  v1:= "Read only iterator" @kind object;
  #L41c3c0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41c3c6.  throw v0;
}
