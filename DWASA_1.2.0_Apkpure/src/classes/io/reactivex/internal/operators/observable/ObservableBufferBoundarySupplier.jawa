record `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier.boundarySupplier` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier.bufferSupplier` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier;.<init>:(Lio/reactivex/ObservableSource;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41e174.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L41e17a.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier.boundarySupplier` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L41e17e.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L41e182.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41e194.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41e198.  v1:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver`;
  #L41e19c.  v2:= new `io.reactivex.observers.SerializedObserver`;
  #L41e1a0.  call `<init>`(v2, v5) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L41e1a6.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41e1aa.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier.boundarySupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41e1ae.  call `<init>`(v1, v2, v5, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41e1b4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41e1ba.  return @kind void;
}
