record `io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.collection` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.keySelector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L422af8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L422afe.  v0.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L422b02.  v0.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.collection` @type ^`java.util.Collection` := v3 @kind object;
  #L422b06.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422b18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.collection` @type ^`java.util.Collection` @kind object;
  #L422b1c.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L422b22.  call `clear`(v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.clear:()V` @kind super;
  #L422b28.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422b3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.done` @type ^`boolean` @kind boolean;
  #L422b40.  if v0 != 0 then goto L422b5e;
  #L422b44.  v0:= 1I;
  #L422b46.  v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L422b4a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.collection` @type ^`java.util.Collection` @kind object;
  #L422b4e.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L422b54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422b58.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L422b5e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422b70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.done` @type ^`boolean` @kind boolean;
  #L422b74.  if v0 == 0 then goto L422b80;
  #L422b78.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L422b7e.  goto L422b9a;
  #L422b80.  v0:= 1I;
  #L422b82.  v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L422b86.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.collection` @type ^`java.util.Collection` @kind object;
  #L422b8a.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L422b90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422b94.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L422b9a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L422bac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.done` @type ^`boolean` @kind boolean;
  #L422bb0.  if v0 == 0 then goto L422bb6;
  #L422bb4.  return @kind void;
  #L422bb6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.sourceMode` @type ^`int`;
  #L422bba.  if v0 != 0 then goto L422bfc;
  #L422bbe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L422bc2.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L422bc8.  v0:= temp @kind object;
  #L422bca.  v1:= "The keySelector returned a null key" @kind object;
  #L422bce.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L422bd4.  v0:= temp @kind object;
  #L422bd6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.collection` @type ^`java.util.Collection` @kind object;
  #L422bda.  call temp:= `add`(v1, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L422be0.  v0:= temp;
  #L422be2.  if v0 == 0 then goto L422c08;
  #L422be6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422bea.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422bf0.  goto L422c08;
  #L422bf2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L422bf4.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L422bfa.  return @kind void;
  #L422bfc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422c00.  v0:= 0I;
  #L422c02.  call `onNext`(v3, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422c08.  return @kind void;
  catch `java.lang.Throwable` @[L422bbe..L422be2] goto L422bf2;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L422aac.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L422ab0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.poll:()Ljava/lang/Object;` @kind interface;
  #L422ab6.  v0:= temp @kind object;
  #L422ab8.  if v0 == 0 then goto L422ae4;
  #L422abc.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.collection` @type ^`java.util.Collection` @kind object;
  #L422ac0.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L422ac4.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L422aca.  v2:= temp @kind object;
  #L422acc.  v3:= "The keySelector returned a null key" @kind object;
  #L422ad0.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L422ad6.  v2:= temp @kind object;
  #L422ad8.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L422ade.  v1:= temp;
  #L422ae0.  if v1 == 0 then goto L422aac;
  #L422ae4.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L422a90.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L422a96.  v1:= temp;
  #L422a98.  return v1;
}
