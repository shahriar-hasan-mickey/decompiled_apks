record `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.inSingle` @AccessFlag ;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.other` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/SingleSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4212d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4212de.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4212e2.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.other` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L4212e6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4212f8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4212fe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4212b0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L4212b6.  v0:= temp @kind object;
  #L4212b8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4212bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4212c2.  v0:= temp;
  #L4212c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421310.  v0:= 1I;
  #L421312.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.inSingle` @type ^`boolean` := v0 @kind boolean;
  #L421316.  v0:= 0I;
  #L421318.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42131e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.other` @type ^`io.reactivex.SingleSource` @kind object;
  #L421322.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.other` @type ^`io.reactivex.SingleSource` := v0 @kind object;
  #L421326.  call `subscribe`(v1, v2) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L42132c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421340.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L421344.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42134a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42135c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L421360.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L421366.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L421378.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42137e.  v1:= temp;
  #L421380.  if v1 == 0 then goto L421396;
  #L421384.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.inSingle` @type ^`boolean` @kind boolean;
  #L421388.  if v1 != 0 then goto L421396;
  #L42138c.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L421390.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L421396.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4213a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4213ac.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4213b2.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4213b6.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4213bc.  return @kind void;
}
