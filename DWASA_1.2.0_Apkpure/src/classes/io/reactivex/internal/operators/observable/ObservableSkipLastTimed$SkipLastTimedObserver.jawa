record `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.error` @AccessFlag ;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `int` v6 , `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f2dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42f2e2.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42f2e6.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.time` @type ^`long` := v2 @kind wide;
  #L42f2ea.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L42f2ee.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.scheduler` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L42f2f2.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L42f2f6.  call `<init>`(v1, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L42f2fc.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L42f300.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.delayError` @type ^`boolean` := v7 @kind boolean;
  #L42f304.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f318.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42f31c.  if v0 != 0 then goto L42f346;
  #L42f320.  v0:= 1I;
  #L42f322.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42f326.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f32a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42f330.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.getAndIncrement:()I` @kind virtual;
  #L42f336.  v0:= temp;
  #L42f338.  if v0 != 0 then goto L42f346;
  #L42f33c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42f340.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42f346.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v17 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L42f358.  v0:= v17 @kind object;
  #L42f35c.  call temp:= `getAndIncrement`(v17) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.getAndIncrement:()I` @kind virtual;
  #L42f362.  v1:= temp;
  #L42f364.  if v1 == 0 then goto L42f36a;
  #L42f368.  return @kind void;
  #L42f36a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f36e.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42f372.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.delayError` @type ^`boolean` @kind boolean;
  #L42f376.  v4:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42f37a.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42f37e.  v6:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.time` @type ^`long` @kind wide;
  #L42f382.  v8:= 1I;
  #L42f384.  v9:= 1I;
  #L42f386.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42f38a.  if v10 == 0 then goto L42f39a;
  #L42f38e.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42f392.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42f398.  return @kind void;
  #L42f39a.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.done` @type ^`boolean` @kind boolean;
  #L42f39e.  call temp:= `peek`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L42f3a4.  v11:= temp @kind object;
  #L42f3a6.  v11:= (`java.lang.Long`) v11 @kind object;
  #L42f3aa.  if v11 != 0 then goto L42f3b2;
  #L42f3ae.  v12:= 1I;
  #L42f3b0.  goto L42f3b4;
  #L42f3b2.  v12:= 0I;
  #L42f3b4.  call temp:= `now`(v5, v4) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L42f3ba.  v13:= temp @kind wide;
  #L42f3bc.  if v12 != 0 then goto L42f3d4;
  #L42f3c0.  call temp:= `longValue`(v11) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L42f3c6.  v15:= temp @kind wide;
  #L42f3c8.  v13:= v13 - v6 @kind long;
  #L42f3ca.  v11:= lcmp(v15, v13);
  #L42f3ce.  if v11 <= 0 then goto L42f3d4;
  #L42f3d2.  v12:= 1I;
  #L42f3d4.  if v10 == 0 then goto L42f41e;
  #L42f3d8.  if v3 == 0 then goto L42f3f8;
  #L42f3dc.  if v12 == 0 then goto L42f41e;
  #L42f3e0.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L42f3e4.  if v2 == 0 then goto L42f3f0;
  #L42f3e8.  call `onError`(v1, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f3ee.  goto L42f3f6;
  #L42f3f0.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42f3f6.  return @kind void;
  #L42f3f8.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L42f3fc.  if v10 == 0 then goto L42f412;
  #L42f400.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42f404.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42f40a.  call `onError`(v1, v10) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f410.  return @kind void;
  #L42f412.  if v12 == 0 then goto L42f41e;
  #L42f416.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42f41c.  return @kind void;
  #L42f41e.  if v12 == 0 then goto L42f432;
  #L42f422.  v9:= -v9 @kind int;
  #L42f424.  call temp:= `addAndGet`(v0, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.addAndGet:(I)I` @kind virtual;
  #L42f42a.  v9:= temp;
  #L42f42c.  if v9 != 0 then goto L42f386;
  #L42f430.  return @kind void;
  #L42f432.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L42f438.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L42f43e.  v10:= temp @kind object;
  #L42f440.  call `onNext`(v1, v10) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42f446.  goto L42f386;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f2c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42f2c8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f458.  v0:= 1I;
  #L42f45a.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42f45e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.drain:()V` @kind virtual;
  #L42f464.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L42f478.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L42f47c.  v1:= 1I;
  #L42f47e.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L42f482.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.drain:()V` @kind virtual;
  #L42f488.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42f49c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42f4a0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42f4a4.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42f4a8.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L42f4ae.  v1:= temp @kind wide;
  #L42f4b0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42f4b6.  v1:= temp @kind object;
  #L42f4b8.  call temp:= `offer`(v0, v1, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42f4be.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.drain:()V` @kind virtual;
  #L42f4c4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f4d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f4dc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f4e2.  v0:= temp;
  #L42f4e4.  if v0 == 0 then goto L42f4f6;
  #L42f4e8.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42f4ec.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f4f0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42f4f6.  return @kind void;
}
