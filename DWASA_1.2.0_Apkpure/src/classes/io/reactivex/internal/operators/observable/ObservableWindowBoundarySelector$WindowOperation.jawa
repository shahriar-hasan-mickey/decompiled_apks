record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation` @kind class @AccessFlag FINAL {
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation.open` @AccessFlag FINAL;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation` v0 @kind this, `io.reactivex.subjects.UnicastSubject` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowOperation;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L433bc8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L433bce.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation.w` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L433bd2.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation.open` @type ^`java.lang.Object` := v2 @kind object;
  #L433bd6.  return @kind void;
}
