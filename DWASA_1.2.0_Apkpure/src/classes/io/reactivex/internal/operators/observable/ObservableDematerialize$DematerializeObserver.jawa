record `io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L422788.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42278e.  v0.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L422792.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4227a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4227a8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4227ae.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422768.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42276c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L422772.  v0:= temp;
  #L422774.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4227c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.done` @type ^`boolean` @kind boolean;
  #L4227c4.  if v0 == 0 then goto L4227ca;
  #L4227c8.  return @kind void;
  #L4227ca.  v0:= 1I;
  #L4227cc.  v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4227d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4227d4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4227da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4227ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.done` @type ^`boolean` @kind boolean;
  #L4227f0.  if v0 == 0 then goto L4227fc;
  #L4227f4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4227fa.  return @kind void;
  #L4227fc.  v0:= 1I;
  #L4227fe.  v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L422802.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422806.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42280c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.onNext:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422820.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.done` @type ^`boolean` @kind boolean;
  #L422824.  if v0 == 0 then goto L422844;
  #L422828.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L42282e.  v0:= temp;
  #L422830.  if v0 == 0 then goto L422842;
  #L422834.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L42283a.  v2:= temp @kind object;
  #L42283c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L422842.  return @kind void;
  #L422844.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L42284a.  v0:= temp;
  #L42284c.  if v0 == 0 then goto L42286a;
  #L422850.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L422854.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42285a.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L422860.  v2:= temp @kind object;
  #L422862.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L422868.  goto L42289a;
  #L42286a.  call temp:= `isOnComplete`(v2) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L422870.  v0:= temp;
  #L422872.  if v0 == 0 then goto L422888;
  #L422876.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42287a.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L422880.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.onComplete:()V` @kind virtual;
  #L422886.  goto L42289a;
  #L422888.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42288c.  call temp:= `getValue`(v2) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L422892.  v2:= temp @kind object;
  #L422894.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42289a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4228ac.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L4228b0.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.onNext:(Lio/reactivex/Notification;)V` @kind virtual;
  #L4228b6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4228c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4228cc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4228d2.  v0:= temp;
  #L4228d4.  if v0 == 0 then goto L4228e6;
  #L4228d8.  v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4228dc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4228e0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4228e6.  return @kind void;
}
