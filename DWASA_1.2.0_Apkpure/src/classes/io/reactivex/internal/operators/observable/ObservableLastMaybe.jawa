record `io.reactivex.internal.operators.observable.ObservableLastMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableLastMaybe.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableLastMaybe` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableLastMaybe;.<init>:(Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L428b0c.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L428b12.  v0.`io.reactivex.internal.operators.observable.ObservableLastMaybe.source` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L428b16.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableLastMaybe` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableLastMaybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L428b28.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableLastMaybe.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L428b2c.  v1:= new `io.reactivex.internal.operators.observable.ObservableLastMaybe$LastObserver`;
  #L428b30.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableLastMaybe$LastObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L428b36.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L428b3c.  return @kind void;
}
