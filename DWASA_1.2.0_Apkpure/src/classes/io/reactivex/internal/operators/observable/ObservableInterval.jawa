record `io.reactivex.internal.operators.observable.ObservableInterval` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableInterval.initialDelay` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableInterval.period` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableInterval.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableInterval.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableInterval` v0 @kind this, `long` v1 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval;.<init>:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42825c.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L428262.  v0.`io.reactivex.internal.operators.observable.ObservableInterval.initialDelay` @type ^`long` := v1 @kind wide;
  #L428266.  v0.`io.reactivex.internal.operators.observable.ObservableInterval.period` @type ^`long` := v3 @kind wide;
  #L42826a.  v0.`io.reactivex.internal.operators.observable.ObservableInterval.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L42826e.  v0.`io.reactivex.internal.operators.observable.ObservableInterval.scheduler` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L428272.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableInterval` v8 @kind this, `io.reactivex.Observer` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L428284.  v7:= new `io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver`;
  #L428288.  call `<init>`(v7, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L42828e.  call `onSubscribe`(v9, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L428294.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L428298.  v9:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L42829c.  if v9 == 0 then goto L4282c4;
  #L4282a0.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L4282a6.  v0:= temp @kind object;
  #L4282a8.  call `setResource`(v7, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.setResource:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4282ae.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.initialDelay` @type ^`long` @kind wide;
  #L4282b2.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.period` @type ^`long` @kind wide;
  #L4282b6.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4282ba.  v1:= v7 @kind object;
  #L4282bc.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4282c2.  goto L4282e0;
  #L4282c4.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.initialDelay` @type ^`long` @kind wide;
  #L4282c8.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.period` @type ^`long` @kind wide;
  #L4282cc.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4282d0.  v1:= v7 @kind object;
  #L4282d2.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4282d8.  v9:= temp @kind object;
  #L4282da.  call `setResource`(v7, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.setResource:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4282e0.  return @kind void;
}
