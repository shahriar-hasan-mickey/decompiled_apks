record `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.count` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.done` @AccessFlag ;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.index` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$ElementAtObserver;.<init>:(Lio/reactivex/MaybeObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4235ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4235b2.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4235b6.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.index` @type ^`long` := v2 @kind wide;
  #L4235ba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$ElementAtObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4235cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4235d0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4235d6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$ElementAtObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42358c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L423590.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L423596.  v0:= temp;
  #L423598.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$ElementAtObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4235e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.done` @type ^`boolean` @kind boolean;
  #L4235ec.  if v0 != 0 then goto L423600;
  #L4235f0.  v0:= 1I;
  #L4235f2.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4235f6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4235fa.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L423600.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$ElementAtObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423614.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.done` @type ^`boolean` @kind boolean;
  #L423618.  if v0 == 0 then goto L423624;
  #L42361c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L423622.  return @kind void;
  #L423624.  v0:= 1I;
  #L423626.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42362a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42362e.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L423634.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$ElementAtObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L423648.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.done` @type ^`boolean` @kind boolean;
  #L42364c.  if v0 == 0 then goto L423652;
  #L423650.  return @kind void;
  #L423652.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.count` @type ^`long` @kind wide;
  #L423656.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.index` @type ^`long` @kind wide;
  #L42365a.  v4:= lcmp(v0, v2);
  #L42365e.  if v4 != 0 then goto L42367e;
  #L423662.  v0:= 1I;
  #L423664.  v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L423668.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42366c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L423672.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L423676.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42367c.  return @kind void;
  #L42367e.  v2:= 1L;
  #L423682.  v0:= v0 + v2 @kind long;
  #L423684.  v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.count` @type ^`long` := v0 @kind wide;
  #L423688.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$ElementAtObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42369c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4236a0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4236a6.  v0:= temp;
  #L4236a8.  if v0 == 0 then goto L4236ba;
  #L4236ac.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4236b0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4236b4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4236ba.  return @kind void;
}
