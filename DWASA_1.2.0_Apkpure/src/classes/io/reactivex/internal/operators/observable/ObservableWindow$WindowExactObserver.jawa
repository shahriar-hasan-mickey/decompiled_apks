record `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.capacityHint` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.count` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.size` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.<init>:(Lio/reactivex/Observer;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L432d9c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L432da2.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L432da6.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.count` @type ^`long` := v2 @kind wide;
  #L432daa.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.capacityHint` @type ^`int` := v4;
  #L432dae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432dc0.  v0:= 1I;
  #L432dc2.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L432dc6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432d84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` @kind boolean;
  #L432d88.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432dd8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L432ddc.  if v0 == 0 then goto L432dec;
  #L432de0.  v1:= 0I;
  #L432de2.  v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L432de6.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L432dec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432df0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L432df6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432e08.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L432e0c.  if v0 == 0 then goto L432e1c;
  #L432e10.  v1:= 0I;
  #L432e12.  v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L432e16.  call `onError`(v0, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L432e1c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432e20.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432e26.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L432e38.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L432e3c.  if v0 != 0 then goto L432e62;
  #L432e40.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` @kind boolean;
  #L432e44.  if v1 != 0 then goto L432e62;
  #L432e48.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.capacityHint` @type ^`int`;
  #L432e4c.  call temp:= `create`(v0, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L432e52.  v0:= temp @kind object;
  #L432e54.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v0 @kind object;
  #L432e58.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432e5c.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L432e62.  if v0 == 0 then goto L432eac;
  #L432e66.  call `onNext`(v0, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L432e6c.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.size` @type ^`long` @kind wide;
  #L432e70.  v3:= 1L;
  #L432e74.  v1:= v1 + v3 @kind long;
  #L432e76.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.size` @type ^`long` := v1 @kind wide;
  #L432e7a.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.count` @type ^`long` @kind wide;
  #L432e7e.  v6:= lcmp(v1, v3);
  #L432e82.  if v6 < 0 then goto L432eac;
  #L432e86.  v1:= 0L;
  #L432e8a.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.size` @type ^`long` := v1 @kind wide;
  #L432e8e.  v6:= 0I;
  #L432e90.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L432e94.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L432e9a.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` @kind boolean;
  #L432e9e.  if v6 == 0 then goto L432eac;
  #L432ea2.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432ea6.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432eac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432ec0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432ec4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L432eca.  v0:= temp;
  #L432ecc.  if v0 == 0 then goto L432ede;
  #L432ed0.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L432ed4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432ed8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L432ede.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432ef0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` @kind boolean;
  #L432ef4.  if v0 == 0 then goto L432f02;
  #L432ef8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432efc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432f02.  return @kind void;
}
