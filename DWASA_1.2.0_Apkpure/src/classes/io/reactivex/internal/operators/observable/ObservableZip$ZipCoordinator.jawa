record `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.delayError` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver`[] `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.row` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4358f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4358f6.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4358fa.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.zipper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4358fe.  v1:= new `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver`[v3];
  #L435902.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver`[] := v1 @kind object;
  #L435906.  v1:= new `java.lang.Object`[v3];
  #L43590a.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L43590e.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.row` @type ^`java.lang.Object`[] := v1 @kind object;
  #L435912.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.delayError` @type ^`boolean` := v4 @kind boolean;
  #L435916.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @AccessFlag  {
    temp;

  #L435928.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.clear:()V` @kind virtual;
  #L43592e.  call `cancelSources`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancelSources:()V` @kind virtual;
  #L435934.  return @kind void;
}
procedure `void` `cancelSources`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancelSources:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L435948.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver`[] @kind object;
  #L43594c.  v1:= length @variable v0;
  #L43594e.  v2:= 0I;
  #L435950.  if v2 >= v1 then goto L435964;
  #L435954.  v3:= v0[v2] @kind object;
  #L435958.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;.dispose:()V` @kind virtual;
  #L43595e.  v2:= v2 + 1;
  #L435962.  goto L435950;
  #L435964.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.Observer` v5 @kind object, `boolean` v6 , `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.checkTerminated:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L435860.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L435864.  v1:= 1I;
  #L435866.  if v0 == 0 then goto L435872;
  #L43586a.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L435870.  return v1;
  #L435872.  if v3 == 0 then goto L4358c4;
  #L435876.  if v6 == 0 then goto L43589c;
  #L43587a.  if v4 == 0 then goto L4358c4;
  #L43587e.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L435882.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L435888.  if v3 == 0 then goto L435894;
  #L43588c.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435892.  goto L43589a;
  #L435894.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43589a.  return v1;
  #L43589c.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4358a0.  if v3 == 0 then goto L4358b2;
  #L4358a4.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L4358aa.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4358b0.  return v1;
  #L4358b2.  if v4 == 0 then goto L4358c4;
  #L4358b6.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L4358bc.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4358c2.  return v1;
  #L4358c4.  v3:= 0I;
  #L4358c6.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L435978.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver`[] @kind object;
  #L43597c.  v1:= length @variable v0;
  #L43597e.  v2:= 0I;
  #L435980.  if v2 >= v1 then goto L435998;
  #L435984.  v3:= v0[v2] @kind object;
  #L435988.  v3:= v3.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43598c.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L435992.  v2:= v2 + 1;
  #L435996.  goto L435980;
  #L435998.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4359ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L4359b0.  if v0 != 0 then goto L4359d2;
  #L4359b4.  v0:= 1I;
  #L4359b6.  v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4359ba.  call `cancelSources`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancelSources:()V` @kind virtual;
  #L4359c0.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.getAndIncrement:()I` @kind virtual;
  #L4359c6.  v0:= temp;
  #L4359c8.  if v0 != 0 then goto L4359d2;
  #L4359cc.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.clear:()V` @kind virtual;
  #L4359d2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v20 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L4359e4.  v7:= v20 @kind object;
  #L4359e8.  call temp:= `getAndIncrement`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.getAndIncrement:()I` @kind virtual;
  #L4359ee.  v0:= temp;
  #L4359f0.  if v0 == 0 then goto L4359f6;
  #L4359f4.  return @kind void;
  #L4359f6.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver`[] @kind object;
  #L4359fa.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4359fe.  v9:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.row` @type ^`java.lang.Object`[] @kind object;
  #L435a02.  v10:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.delayError` @type ^`boolean` @kind boolean;
  #L435a06.  v11:= 1I;
  #L435a08.  v12:= 1I;
  #L435a0a.  v13:= length @variable v0;
  #L435a0c.  v14:= 0I;
  #L435a0e.  v15:= 0I;
  #L435a10.  v16:= 0I;
  #L435a14.  v17:= 0I;
  #L435a18.  if v15 >= v13 then goto L435a9c;
  #L435a1c.  v6:= v0[v15] @kind object;
  #L435a20.  v1:= v9[v17] @kind object;
  #L435a24.  if v1 != 0 then goto L435a70;
  #L435a28.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.done` @type ^`boolean` @kind boolean;
  #L435a2c.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L435a30.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L435a36.  v18:= temp @kind object;
  #L435a38.  if v18 != 0 then goto L435a42;
  #L435a3c.  v19:= 1I;
  #L435a40.  goto L435a46;
  #L435a42.  v19:= 0I;
  #L435a46.  v1:= v20 @kind object;
  #L435a4a.  v3:= v19;
  #L435a4e.  v4:= v8 @kind object;
  #L435a50.  v5:= v10;
  #L435a52.  call temp:= `checkTerminated`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.checkTerminated:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;)Z` @kind virtual;
  #L435a58.  v1:= temp;
  #L435a5a.  if v1 == 0 then goto L435a60;
  #L435a5e.  return @kind void;
  #L435a60.  if v19 != 0 then goto L435a6a;
  #L435a64.  v9[v17]:= v18 @kind object;
  #L435a68.  goto L435a92;
  #L435a6a.  v16:= v16 + 1;
  #L435a6e.  goto L435a92;
  #L435a70.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.done` @type ^`boolean` @kind boolean;
  #L435a74.  if v1 == 0 then goto L435a92;
  #L435a78.  if v10 != 0 then goto L435a92;
  #L435a7c.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L435a80.  if v1 == 0 then goto L435a92;
  #L435a84.  call `cancel`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L435a8a.  call `onError`(v8, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435a90.  return @kind void;
  #L435a92.  v17:= v17 + 1;
  #L435a96.  v15:= v15 + 1;
  #L435a9a.  goto L435a18;
  #L435a9c.  if v16 == 0 then goto L435ab0;
  #L435aa0.  v1:= -v12 @kind int;
  #L435aa2.  call temp:= `addAndGet`(v7, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.addAndGet:(I)I` @kind virtual;
  #L435aa8.  v12:= temp;
  #L435aaa.  if v12 != 0 then goto L435a0a;
  #L435aae.  return @kind void;
  #L435ab0.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L435ab4.  call temp:= `clone`(v9) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L435aba.  v2:= temp @kind object;
  #L435abc.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L435ac2.  v1:= temp @kind object;
  #L435ac4.  v2:= "The zipper returned a null value" @kind object;
  #L435ac8.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L435ace.  v1:= temp @kind object;
  #L435ad0.  call `onNext`(v8, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L435ad6.  v1:= 0I;
  #L435ad8.  call `fill`(v9, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L435ade.  goto L435a0a;
  #L435ae0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435ae2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435ae8.  call `cancel`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L435aee.  call `onError`(v8, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435af4.  return @kind void;
  catch `java.lang.Throwable` @[L435ab0..L435ad0] goto L435ae0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4358d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L4358dc.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v5 @kind this, `io.reactivex.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.subscribe:([Lio/reactivex/ObservableSource;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L435b14.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver`[] @kind object;
  #L435b18.  v1:= length @variable v0;
  #L435b1a.  v2:= 0I;
  #L435b1c.  v3:= 0I;
  #L435b1e.  if v3 >= v1 then goto L435b36;
  #L435b22.  v4:= new `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver`;
  #L435b26.  call `<init>`(v4, v5, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;I)V` @kind direct;
  #L435b2c.  v0[v3]:= v4 @kind object;
  #L435b30.  v3:= v3 + 1;
  #L435b34.  goto L435b1e;
  #L435b36.  call `lazySet`(v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.lazySet:(I)V` @kind virtual;
  #L435b3c.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435b40.  call `onSubscribe`(v7, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L435b46.  if v2 >= v1 then goto L435b68;
  #L435b4a.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L435b4e.  if v7 == 0 then goto L435b54;
  #L435b52.  return @kind void;
  #L435b54.  v7:= v6[v2] @kind object;
  #L435b58.  v3:= v0[v2] @kind object;
  #L435b5c.  call `subscribe`(v7, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L435b62.  v2:= v2 + 1;
  #L435b66.  goto L435b46;
  #L435b68.  return @kind void;
}
