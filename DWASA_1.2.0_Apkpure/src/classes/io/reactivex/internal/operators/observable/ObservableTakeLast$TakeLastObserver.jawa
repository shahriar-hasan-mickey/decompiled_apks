record `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.count` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.<init>:(Lio/reactivex/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L430464.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L43046a.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43046e.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.count` @type ^`int` := v2;
  #L430472.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430484.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` @kind boolean;
  #L430488.  if v0 != 0 then goto L43049c;
  #L43048c.  v0:= 1I;
  #L43048e.  v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L430492.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430496.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43049c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43044c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` @kind boolean;
  #L430450.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4304b0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4304b4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4304b8.  if v1 == 0 then goto L4304be;
  #L4304bc.  return @kind void;
  #L4304be.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4304c4.  v1:= temp @kind object;
  #L4304c6.  if v1 != 0 then goto L4304da;
  #L4304ca.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4304ce.  if v1 != 0 then goto L4304d8;
  #L4304d2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4304d8.  return @kind void;
  #L4304da.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4304e0.  goto L4304b4;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4304f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4304f8.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4304fe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430510.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.count` @type ^`int`;
  #L430514.  call temp:= `size`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.size:()I` @kind virtual;
  #L43051a.  v1:= temp;
  #L43051c.  if v0 != v1 then goto L430526;
  #L430520.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.poll:()Ljava/lang/Object;` @kind virtual;
  #L430526.  call temp:= `offer`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43052c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430540.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430544.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43054a.  v0:= temp;
  #L43054c.  if v0 == 0 then goto L43055e;
  #L430550.  v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L430554.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430558.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43055e.  return @kind void;
}
