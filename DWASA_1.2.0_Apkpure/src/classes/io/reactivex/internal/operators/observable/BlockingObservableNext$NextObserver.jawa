record `io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.buf` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.waiting` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41c408.  call `<init>`(v2) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L41c40e.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L41c412.  v1:= 1I;
  #L41c414.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L41c41a.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.buf` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L41c41e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L41c422.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41c428.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L41c42c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L41c440.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L41c454.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41c45a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` v2 @kind this, `io.reactivex.Notification` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.onNext:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c46c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c470.  v1:= 0I;
  #L41c472.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L41c478.  v0:= temp;
  #L41c47a.  v1:= 1I;
  #L41c47c.  if v0 == v1 then goto L41c48c;
  #L41c480.  call temp:= `isOnNext`(v3) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L41c486.  v0:= temp;
  #L41c488.  if v0 != 0 then goto L41c4c0;
  #L41c48c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L41c490.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41c496.  v0:= temp;
  #L41c498.  if v0 != 0 then goto L41c4c0;
  #L41c49c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L41c4a0.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41c4a6.  v0:= temp @kind object;
  #L41c4a8.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L41c4ac.  if v0 == 0 then goto L41c48c;
  #L41c4b0.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L41c4b6.  v1:= temp;
  #L41c4b8.  if v1 != 0 then goto L41c48c;
  #L41c4bc.  v3:= v0 @kind object;
  #L41c4be.  goto L41c48c;
  #L41c4c0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L41c4d4.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L41c4d8.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.onNext:(Lio/reactivex/Notification;)V` @kind virtual;
  #L41c4de.  return @kind void;
}
procedure `void` `setWaiting`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.setWaiting:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41c4f0.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c4f4.  v1:= 1I;
  #L41c4f6.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L41c4fc.  return @kind void;
}
procedure `io.reactivex.Notification` `takeNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.takeNext:()Lio/reactivex/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c3d8.  call `setWaiting`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver;.setWaiting:()V` @kind virtual;
  #L41c3de.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L41c3e4.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$NextObserver.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L41c3e8.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L41c3ee.  v0:= temp @kind object;
  #L41c3f0.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L41c3f4.  return v0 @kind object;
}
