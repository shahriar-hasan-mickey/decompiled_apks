record `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.id` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L423b68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L423b6e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.id` @type ^`long` := v2 @kind wide;
  #L423b72.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` := v1 @kind object;
  #L423b76.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L423b88.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L423b8e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423ba0.  v0:= 1I;
  #L423ba2.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L423ba6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L423baa.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.drain:()V` @kind virtual;
  #L423bb0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423bc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L423bc8.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L423bcc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L423bd2.  v0:= temp;
  #L423bd4.  if v0 == 0 then goto L423c00;
  #L423bd8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L423bdc.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L423be0.  if v2 != 0 then goto L423bee;
  #L423be4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L423be8.  call temp:= `disposeAll`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.disposeAll:()Z` @kind virtual;
  #L423bee.  v2:= 1I;
  #L423bf0.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L423bf4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L423bf8.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.drain:()V` @kind virtual;
  #L423bfe.  goto L423c06;
  #L423c00.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L423c06.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423c18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int`;
  #L423c1c.  if v0 != 0 then goto L423c2c;
  #L423c20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L423c24.  call `tryEmit`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.tryEmit:(Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;)V` @kind virtual;
  #L423c2a.  goto L423c36;
  #L423c2c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L423c30.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.drain:()V` @kind virtual;
  #L423c36.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L423c48.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L423c4e.  v0:= temp;
  #L423c50.  if v0 == 0 then goto L423c96;
  #L423c54.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L423c58.  if v0 == 0 then goto L423c96;
  #L423c5c.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L423c60.  v0:= 7I;
  #L423c62.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.requestFusion:(I)I` @kind interface;
  #L423c68.  v0:= temp;
  #L423c6a.  v1:= 1I;
  #L423c6c.  if v0 != v1 then goto L423c88;
  #L423c70.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int` := v0;
  #L423c74.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L423c78.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L423c7c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L423c80.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.drain:()V` @kind virtual;
  #L423c86.  return @kind void;
  #L423c88.  v1:= 2I;
  #L423c8a.  if v0 != v1 then goto L423c96;
  #L423c8e.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int` := v0;
  #L423c92.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L423c96.  return @kind void;
}
