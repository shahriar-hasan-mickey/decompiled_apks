record `io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.predicate` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAnySingle$AnyObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41ce74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41ce7a.  v0.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L41ce7e.  v0.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L41ce82.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAnySingle$AnyObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ce94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41ce98.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ce9e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAnySingle$AnyObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ce54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41ce58.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41ce5e.  v0:= temp;
  #L41ce60.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAnySingle$AnyObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41ceb0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.done` @type ^`boolean` @kind boolean;
  #L41ceb4.  if v0 != 0 then goto L41ced2;
  #L41ceb8.  v0:= 1I;
  #L41ceba.  v2.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41cebe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41cec2.  v1:= 0I;
  #L41cec4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L41ceca.  v1:= temp @kind object;
  #L41cecc.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41ced2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAnySingle$AnyObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cee4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.done` @type ^`boolean` @kind boolean;
  #L41cee8.  if v0 == 0 then goto L41cef4;
  #L41ceec.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41cef2.  return @kind void;
  #L41cef4.  v0:= 1I;
  #L41cef6.  v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41cefa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41cefe.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41cf04.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAnySingle$AnyObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cf18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.done` @type ^`boolean` @kind boolean;
  #L41cf1c.  if v0 == 0 then goto L41cf22;
  #L41cf20.  return @kind void;
  #L41cf22.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L41cf26.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L41cf2c.  v2:= temp;
  #L41cf2e.  if v2 == 0 then goto L41cf54;
  #L41cf32.  v2:= 1I;
  #L41cf34.  v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41cf38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41cf3c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41cf42.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41cf46.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L41cf4c.  v2:= temp @kind object;
  #L41cf4e.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41cf54.  return @kind void;
  #L41cf56.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41cf58.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41cf5e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41cf62.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41cf68.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAnySingle$AnyObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41cf6e.  return @kind void;
  catch `java.lang.Throwable` @[L41cf22..L41cf2e] goto L41cf56;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAnySingle$AnyObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cf8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41cf90.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41cf96.  v0:= temp;
  #L41cf98.  if v0 == 0 then goto L41cfaa;
  #L41cf9c.  v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41cfa0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAnySingle$AnyObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41cfa4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41cfaa.  return @kind void;
}
