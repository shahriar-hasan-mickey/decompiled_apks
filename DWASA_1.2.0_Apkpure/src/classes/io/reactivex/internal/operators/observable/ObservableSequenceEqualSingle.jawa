record `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToObservable` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.bufferSize` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.comparer` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.first` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.second` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42ec6c.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L42ec72.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.first` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L42ec76.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.second` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L42ec7a.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.comparer` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L42ec7e.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.bufferSize` @type ^`int` := v4;
  #L42ec82.  return @kind void;
}
procedure `io.reactivex.Observable` `fuseToObservable`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle;.fuseToObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42ec38.  v0:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual`;
  #L42ec3c.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.first` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42ec40.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.second` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42ec44.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L42ec48.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.bufferSize` @type ^`int`;
  #L42ec4c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;I)V` @kind direct;
  #L42ec52.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L42ec58.  v0:= temp @kind object;
  #L42ec5a.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle` v7 @kind this, `io.reactivex.SingleObserver` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42ec94.  v6:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator`;
  #L42ec98.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.bufferSize` @type ^`int`;
  #L42ec9c.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.first` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42eca0.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.second` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42eca4.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L42eca8.  v0:= v6 @kind object;
  #L42ecaa.  v1:= v8 @kind object;
  #L42ecac.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L42ecb2.  call `onSubscribe`(v8, v6) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42ecb8.  call `subscribe`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.subscribe:()V` @kind virtual;
  #L42ecbe.  return @kind void;
}
