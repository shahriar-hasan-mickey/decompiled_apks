record `io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.ObservableEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4217a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4217ae.  v0.`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4217b2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4217c4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4217ca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4216c0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.get:()Ljava/lang/Object;` @kind virtual;
  #L4216c6.  v0:= temp @kind object;
  #L4216c8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4216cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4216d2.  v0:= temp;
  #L4216d4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4217dc.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.isDisposed:()Z` @kind virtual;
  #L4217e2.  v0:= temp;
  #L4217e4.  if v0 != 0 then goto L421804;
  #L4217e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @type ^`io.reactivex.Observer` @kind object;
  #L4217ec.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4217f2.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @kind virtual;
  #L4217f8.  goto L421804;
  #L4217fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4217fc.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @kind virtual;
  #L421802.  throw v0;
  #L421804.  return @kind void;
  catch `java.lang.Throwable` @[L4217e8..L4217f2] goto L4217fa;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421824.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42182a.  v0:= temp;
  #L42182c.  if v0 != 0 then goto L421836;
  #L421830.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L421836.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421848.  if v2 != 0 then goto L421862;
  #L42184c.  v2:= new `java.lang.NullPointerException`;
  #L421850.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L421854.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42185a.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L421860.  return @kind void;
  #L421862.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.isDisposed:()Z` @kind virtual;
  #L421868.  v0:= temp;
  #L42186a.  if v0 != 0 then goto L421878;
  #L42186e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @type ^`io.reactivex.Observer` @kind object;
  #L421872.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L421878.  return @kind void;
}
procedure `io.reactivex.ObservableEmitter` `serialize`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.serialize:()Lio/reactivex/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421744.  v0:= new `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter`;
  #L421748.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.<init>:(Lio/reactivex/ObservableEmitter;)V` @kind direct;
  #L42174e.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42188c.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L421890.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L421896.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L42189c.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4218b0.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4218b6.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L421760.  v0:= 2I;
  #L421762.  v0:= new `java.lang.Object`[v0];
  #L421766.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L42176c.  v1:= temp @kind object;
  #L42176e.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L421774.  v1:= temp @kind object;
  #L421776.  v2:= 0I;
  #L421778.  v0[v2]:= v1 @kind object;
  #L42177c.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L421782.  v1:= temp @kind object;
  #L421784.  v2:= 1I;
  #L421786.  v0[v2]:= v1 @kind object;
  #L42178a.  v1:= "%s{%s}" @kind object;
  #L42178e.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L421794.  v0:= temp @kind object;
  #L421796.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4216e8.  if v2 != 0 then goto L4216fa;
  #L4216ec.  v2:= new `java.lang.NullPointerException`;
  #L4216f0.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4216f4.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4216fa.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.isDisposed:()Z` @kind virtual;
  #L421700.  v0:= temp;
  #L421702.  if v0 != 0 then goto L421724;
  #L421706.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @type ^`io.reactivex.Observer` @kind object;
  #L42170a.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421710.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @kind virtual;
  #L421716.  v2:= 1I;
  #L421718.  return v2;
  #L42171a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42171c.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @kind virtual;
  #L421722.  throw v2;
  #L421724.  v2:= 0I;
  #L421726.  return v2;
  catch `java.lang.Throwable` @[L421706..L421710] goto L42171a;
}
