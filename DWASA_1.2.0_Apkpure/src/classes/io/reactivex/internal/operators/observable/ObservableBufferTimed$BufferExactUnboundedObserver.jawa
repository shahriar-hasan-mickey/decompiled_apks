record `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.bufferSupplier` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timer` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41e9c0.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L41e9c4.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L41e9ca.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L41e9d0.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41e9d4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41e9da.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L41e9de.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L41e9e2.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timespan` @type ^`long` := v4 @kind wide;
  #L41e9e6.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L41e9ea.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.scheduler` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L41e9ee.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L41ea00.  v2:= (`java.util.Collection`) v2 @kind object;
  #L41ea04.  call `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.accept:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L41ea0a.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.accept:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L41ea1c.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ea20.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41ea26.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ea38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ea3c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41ea42.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41ea46.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ea4c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41e994.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41e998.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41e99e.  v0:= temp @kind object;
  #L41e9a0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41e9a4.  if v0 != v1 then goto L41e9ac;
  #L41e9a8.  v0:= 1I;
  #L41e9aa.  goto L41e9ae;
  #L41e9ac.  v0:= 0I;
  #L41e9ae.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41ea60.  @monitorenter v4
  #L41ea62.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41ea66.  v1:= 0I;
  #L41ea68.  v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L41ea6c.  @monitorexit v4
  #L41ea6e.  if v0 == 0 then goto L41ea9e;
  #L41ea72.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41ea76.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41ea7c.  v0:= 1I;
  #L41ea7e.  v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41ea82.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.enter:()Z` @kind virtual;
  #L41ea88.  v0:= temp;
  #L41ea8a.  if v0 == 0 then goto L41ea9e;
  #L41ea8e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41ea92.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ea96.  v3:= 0I;
  #L41ea98.  call `drainLoop`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L41ea9e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41eaa2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41eaa8.  return @kind void;
  #L41eaaa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41eaac.  @monitorexit v4
  #L41eaae.  throw v0;
  catch `java.lang.Throwable` @[L41ea62..L41ea6e] goto L41eaaa;
  catch `java.lang.Throwable` @[L41eaac..L41eaae] goto L41eaaa;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ead4.  @monitorenter v1
  #L41ead6.  v0:= 0I;
  #L41ead8.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L41eadc.  @monitorexit v1
  #L41eade.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41eae2.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41eae8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41eaec.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41eaf2.  return @kind void;
  #L41eaf4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41eaf6.  @monitorexit v1
  #L41eaf8.  throw v2;
  catch `java.lang.Throwable` @[L41ead8..L41eade] goto L41eaf4;
  catch `java.lang.Throwable` @[L41eaf6..L41eaf8] goto L41eaf4;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41eb20.  @monitorenter v1
  #L41eb22.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41eb26.  if v0 != 0 then goto L41eb2e;
  #L41eb2a.  @monitorexit v1
  #L41eb2c.  return @kind void;
  #L41eb2e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41eb34.  @monitorexit v1
  #L41eb36.  return @kind void;
  #L41eb38.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41eb3a.  @monitorexit v1
  #L41eb3c.  throw v2;
  catch `java.lang.Throwable` @[L41eb22..L41eb3c] goto L41eb38;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41eb5c.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41eb60.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41eb66.  v0:= temp;
  #L41eb68.  if v0 == 0 then goto L41ebec;
  #L41eb6c.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L41eb70.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41eb74.  call temp:= `call`(v8) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41eb7a.  v8:= temp @kind object;
  #L41eb7c.  v0:= "The buffer supplied is null" @kind object;
  #L41eb80.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41eb86.  v8:= temp @kind object;
  #L41eb88.  v8:= (`java.util.Collection`) v8 @kind object;
  #L41eb8c.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.buffer` @type ^`java.util.Collection` := v8 @kind object;
  #L41eb90.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41eb94.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41eb9a.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41eb9e.  if v8 != 0 then goto L41ebec;
  #L41eba2.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L41eba6.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timespan` @type ^`long` @kind wide;
  #L41ebaa.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41ebae.  v1:= v7 @kind object;
  #L41ebb0.  v2:= v4 @kind wide;
  #L41ebb2.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41ebb8.  v8:= temp @kind object;
  #L41ebba.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ebbe.  v1:= 0I;
  #L41ebc0.  call temp:= `compareAndSet`(v0, v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41ebc6.  v0:= temp;
  #L41ebc8.  if v0 != 0 then goto L41ebec;
  #L41ebcc.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ebd2.  goto L41ebec;
  #L41ebd4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ebd6.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41ebdc.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.dispose:()V` @kind virtual;
  #L41ebe2.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ebe6.  call `error`(v8, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L41ebec.  return @kind void;
  catch `java.lang.Throwable` @[L41eb70..L41eb8c] goto L41ebd4;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41ec0c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41ec10.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41ec16.  v0:= temp @kind object;
  #L41ec18.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L41ec1c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ec22.  v0:= temp @kind object;
  #L41ec24.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41ec28.  @monitorenter v2
  #L41ec2a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41ec2e.  if v1 == 0 then goto L41ec36;
  #L41ec32.  v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L41ec36.  @monitorexit v2
  #L41ec38.  if v1 != 0 then goto L41ec48;
  #L41ec3c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ec40.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41ec46.  return @kind void;
  #L41ec48.  v0:= 0I;
  #L41ec4a.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L41ec50.  return @kind void;
  #L41ec52.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ec54.  @monitorexit v2
  #L41ec56.  throw v0;
  #L41ec58.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ec5a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41ec60.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ec64.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ec6a.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferExactUnboundedObserver;.dispose:()V` @kind virtual;
  #L41ec70.  return @kind void;
  catch `java.lang.Throwable` @[L41ec0c..L41ec28] goto L41ec58;
  catch `java.lang.Throwable` @[L41ec2a..L41ec38] goto L41ec52;
  catch `java.lang.Throwable` @[L41ec54..L41ec56] goto L41ec52;
}
