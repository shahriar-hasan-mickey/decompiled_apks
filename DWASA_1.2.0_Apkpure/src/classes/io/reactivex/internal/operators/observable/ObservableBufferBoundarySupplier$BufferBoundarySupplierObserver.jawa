record `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.boundarySupplier` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.bufferSupplier` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.other` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41de00.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L41de04.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L41de0a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L41de10.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41de14.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41de1a.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L41de1e.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L41de22.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.boundarySupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L41de26.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L41de38.  v2:= (`java.util.Collection`) v2 @kind object;
  #L41de3c.  call `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.accept:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L41de42.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.accept:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L41de54.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41de58.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41de5e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41de70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41de74.  if v0 != 0 then goto L41dea4;
  #L41de78.  v0:= 1I;
  #L41de7a.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41de7e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41de82.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41de88.  call `disposeOther`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.disposeOther:()V` @kind virtual;
  #L41de8e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.enter:()Z` @kind virtual;
  #L41de94.  v0:= temp;
  #L41de96.  if v0 == 0 then goto L41dea4;
  #L41de9a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41de9e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41dea4.  return @kind void;
}
procedure `void` `disposeOther`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.disposeOther:()V` @AccessFlag  {
    temp;
    v0;

  #L41deb8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41debc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41dec2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41dde8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41ddec.  return v0;
}
procedure `void` `next`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41ded4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41ded8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41dede.  v0:= temp @kind object;
  #L41dee0.  v1:= "The buffer supplied is null" @kind object;
  #L41dee4.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41deea.  v0:= temp @kind object;
  #L41deec.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41def0.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.boundarySupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41def4.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41defa.  v1:= temp @kind object;
  #L41defc.  v2:= "The boundary ObservableSource supplied is null" @kind object;
  #L41df00.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41df06.  v1:= temp @kind object;
  #L41df08.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L41df0c.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver`;
  #L41df10.  call `<init>`(v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundaryObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;)V` @kind direct;
  #L41df16.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41df1a.  call temp:= `replace`(v3, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41df20.  v3:= temp;
  #L41df22.  if v3 == 0 then goto L41df50;
  #L41df26.  @monitorenter v4
  #L41df28.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41df2c.  if v3 != 0 then goto L41df34;
  #L41df30.  @monitorexit v4
  #L41df32.  return @kind void;
  #L41df34.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L41df38.  @monitorexit v4
  #L41df3a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41df40.  v0:= 0I;
  #L41df42.  call `fastPathEmit`(v4, v3, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L41df48.  goto L41df50;
  #L41df4a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41df4c.  @monitorexit v4
  #L41df4e.  throw v0;
  #L41df50.  return @kind void;
  #L41df52.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41df54.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41df5a.  v1:= 1I;
  #L41df5c.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L41df60.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41df64.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41df6a.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41df6e.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41df74.  return @kind void;
  #L41df76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41df78.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41df7e.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.dispose:()V` @kind virtual;
  #L41df84.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41df88.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41df8e.  return @kind void;
  catch `java.lang.Throwable` @[L41ded4..L41def0] goto L41df76;
  catch `java.lang.Throwable` @[L41def0..L41df0c] goto L41df52;
  catch `java.lang.Throwable` @[L41df28..L41df3a] goto L41df4a;
  catch `java.lang.Throwable` @[L41df4c..L41df4e] goto L41df4a;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41dfc8.  @monitorenter v3
  #L41dfca.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41dfce.  if v0 != 0 then goto L41dfd6;
  #L41dfd2.  @monitorexit v3
  #L41dfd4.  return @kind void;
  #L41dfd6.  v1:= 0I;
  #L41dfd8.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L41dfdc.  @monitorexit v3
  #L41dfde.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41dfe2.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41dfe8.  v0:= 1I;
  #L41dfea.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41dfee.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.enter:()Z` @kind virtual;
  #L41dff4.  v0:= temp;
  #L41dff6.  if v0 == 0 then goto L41e00a;
  #L41dffa.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41dffe.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e002.  v2:= 0I;
  #L41e004.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L41e00a.  return @kind void;
  #L41e00c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e00e.  @monitorexit v3
  #L41e010.  throw v0;
  catch `java.lang.Throwable` @[L41dfca..L41dfde] goto L41e00c;
  catch `java.lang.Throwable` @[L41e00e..L41e010] goto L41e00c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e038.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.dispose:()V` @kind virtual;
  #L41e03e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e042.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41e048.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e05c.  @monitorenter v1
  #L41e05e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41e062.  if v0 != 0 then goto L41e06a;
  #L41e066.  @monitorexit v1
  #L41e068.  return @kind void;
  #L41e06a.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41e070.  @monitorexit v1
  #L41e072.  return @kind void;
  #L41e074.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e076.  @monitorexit v1
  #L41e078.  throw v2;
  catch `java.lang.Throwable` @[L41e05e..L41e078] goto L41e074;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v4 @kind this, `io.reactivex.disposables.Disposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41e098.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41e09c.  call temp:= `validate`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41e0a2.  v0:= temp;
  #L41e0a4.  if v0 == 0 then goto L41e14a;
  #L41e0a8.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v5 @kind object;
  #L41e0ac.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e0b0.  v1:= 1I;
  #L41e0b2.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41e0b6.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41e0bc.  v2:= temp @kind object;
  #L41e0be.  v3:= "The buffer supplied is null" @kind object;
  #L41e0c2.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41e0c8.  v2:= temp @kind object;
  #L41e0ca.  v2:= (`java.util.Collection`) v2 @kind object;
  #L41e0ce.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.buffer` @type ^`java.util.Collection` := v2 @kind object;
  #L41e0d2.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.boundarySupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41e0d6.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41e0dc.  v2:= temp @kind object;
  #L41e0de.  v3:= "The boundary ObservableSource supplied is null" @kind object;
  #L41e0e2.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41e0e8.  v2:= temp @kind object;
  #L41e0ea.  v2:= (`io.reactivex.ObservableSource`) v2 @kind object;
  #L41e0ee.  v5:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver`;
  #L41e0f2.  call `<init>`(v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundaryObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;)V` @kind direct;
  #L41e0f8.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41e0fc.  call `set`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L41e102.  call `onSubscribe`(v0, v4) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41e108.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41e10c.  if v0 != 0 then goto L41e14a;
  #L41e110.  call `subscribe`(v2, v5) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41e116.  goto L41e14a;
  #L41e118.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e11a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41e120.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L41e124.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41e12a.  call `error`(v2, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L41e130.  return @kind void;
  #L41e132.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e134.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41e13a.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L41e13e.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41e144.  call `error`(v2, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L41e14a.  return @kind void;
  catch `java.lang.Throwable` @[L41e0b2..L41e0ce] goto L41e132;
  catch `java.lang.Throwable` @[L41e0d2..L41e0ee] goto L41e118;
}
