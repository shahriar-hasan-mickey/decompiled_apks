record `io.reactivex.internal.operators.observable.ObservableRepeatWhen` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableRepeatWhen.handler` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42be50.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42be56.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen.handler` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42be5a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42be6c.  call temp:= `create`() @signature `Lio/reactivex/subjects/PublishSubject;.create:()Lio/reactivex/subjects/PublishSubject;` @kind static;
  #L42be72.  v0:= temp @kind object;
  #L42be74.  call temp:= `toSerialized`(v0) @signature `Lio/reactivex/subjects/PublishSubject;.toSerialized:()Lio/reactivex/subjects/Subject;` @kind virtual;
  #L42be7a.  v0:= temp @kind object;
  #L42be7c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableRepeatWhen.handler` @type ^`io.reactivex.functions.Function` @kind object;
  #L42be80.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42be86.  v1:= temp @kind object;
  #L42be88.  v2:= "The handler returned a null ObservableSource" @kind object;
  #L42be8c.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42be92.  v1:= temp @kind object;
  #L42be94.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L42be98.  v2:= new `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver`;
  #L42be9c.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableRepeatWhen.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42bea0.  call `<init>`(v2, v5, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/Subject;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42bea6.  call `onSubscribe`(v5, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42beac.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L42beb0.  call `subscribe`(v1, v5) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42beb6.  call `subscribeNext`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.subscribeNext:()V` @kind virtual;
  #L42bebc.  return @kind void;
  #L42bebe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42bec0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42bec6.  call `error`(v0, v5) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L42becc.  return @kind void;
  catch `java.lang.Throwable` @[L42be7c..L42be98] goto L42bebe;
}
