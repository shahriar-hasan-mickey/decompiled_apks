record `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableReplay$Node` `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42c028.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42c02e.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L42c032.  v1:= 0I;
  #L42c034.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42c03a.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` := v0 @kind object;
  #L42c03e.  call `set`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L42c044.  return @kind void;
}
procedure `void` `addLast`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$Node` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L42c058.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` @kind object;
  #L42c05c.  call `set`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L42c062.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` := v2 @kind object;
  #L42c066.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L42c06a.  v2:= v2 + 1;
  #L42c06e.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v2;
  #L42c072.  return @kind void;
}
procedure `void` `collect`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.collect:(Ljava/util/Collection;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42c084.  call temp:= `getHead`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/observable/ObservableReplay$Node;` @kind virtual;
  #L42c08a.  v0:= temp @kind object;
  #L42c08c.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c092.  v0:= temp @kind object;
  #L42c094.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L42c098.  if v0 == 0 then goto L42c0d2;
  #L42c09c.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42c0a0.  call temp:= `leaveTransform`(v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42c0a6.  v1:= temp @kind object;
  #L42c0a8.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L42c0ae.  v2:= temp;
  #L42c0b0.  if v2 != 0 then goto L42c0d2;
  #L42c0b4.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L42c0ba.  v2:= temp;
  #L42c0bc.  if v2 == 0 then goto L42c0c2;
  #L42c0c0.  goto L42c0d2;
  #L42c0c2.  call temp:= `getValue`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L42c0c8.  v1:= temp @kind object;
  #L42c0ca.  call temp:= `add`(v4, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L42c0d0.  goto L42c08c;
  #L42c0d2.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L42c0e4.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L42c0ea.  v0:= temp @kind object;
  #L42c0ec.  call temp:= `enterTransform`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42c0f2.  v0:= temp @kind object;
  #L42c0f4.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L42c0f8.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42c0fe.  call `addLast`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L42c104.  call `truncateFinal`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncateFinal:()V` @kind virtual;
  #L42c10a.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L42c000.  return v1 @kind object;
}
procedure `void` `error`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42c11c.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L42c122.  v2:= temp @kind object;
  #L42c124.  call temp:= `enterTransform`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42c12a.  v2:= temp @kind object;
  #L42c12c.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L42c130.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42c136.  call `addLast`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L42c13c.  call `truncateFinal`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncateFinal:()V` @kind virtual;
  #L42c142.  return @kind void;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$Node` `getHead`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/observable/ObservableReplay$Node;` @AccessFlag  {
    temp;
    v0;

  #L42bfe0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L42bfe6.  v0:= temp @kind object;
  #L42bfe8.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L42bfec.  return v0 @kind object;
}
procedure `boolean` `hasCompleted`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.hasCompleted:()Z` @AccessFlag  {
    temp;
    v0;

  #L42bf60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` @kind object;
  #L42bf64.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42bf68.  if v0 == 0 then goto L42bf8c;
  #L42bf6c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` @kind object;
  #L42bf70.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42bf74.  call temp:= `leaveTransform`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42bf7a.  v0:= temp @kind object;
  #L42bf7c.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L42bf82.  v0:= temp;
  #L42bf84.  if v0 == 0 then goto L42bf8c;
  #L42bf88.  v0:= 1I;
  #L42bf8a.  goto L42bf8e;
  #L42bf8c.  v0:= 0I;
  #L42bf8e.  return v0;
}
procedure `boolean` `hasError`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.hasError:()Z` @AccessFlag  {
    temp;
    v0;

  #L42bfa0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` @kind object;
  #L42bfa4.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42bfa8.  if v0 == 0 then goto L42bfcc;
  #L42bfac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` @kind object;
  #L42bfb0.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42bfb4.  call temp:= `leaveTransform`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42bfba.  v0:= temp @kind object;
  #L42bfbc.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L42bfc2.  v0:= temp;
  #L42bfc4.  if v0 == 0 then goto L42bfcc;
  #L42bfc8.  v0:= 1I;
  #L42bfca.  goto L42bfce;
  #L42bfcc.  v0:= 0I;
  #L42bfce.  return v0;
}
procedure `java.lang.Object` `leaveTransform`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L42c014.  return v1 @kind object;
}
procedure `void` `next`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42c154.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L42c15a.  v2:= temp @kind object;
  #L42c15c.  call temp:= `enterTransform`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42c162.  v2:= temp @kind object;
  #L42c164.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L42c168.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42c16e.  call `addLast`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L42c174.  call `truncate`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncate:()V` @kind virtual;
  #L42c17a.  return @kind void;
}
procedure `void` `removeFirst`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.removeFirst:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L42c18c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c192.  v0:= temp @kind object;
  #L42c194.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L42c198.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c19e.  v0:= temp @kind object;
  #L42c1a0.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L42c1a4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L42c1a8.  v1:= v1 + -1;
  #L42c1ac.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v1;
  #L42c1b0.  call `setFirst`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L42c1b6.  return @kind void;
}
procedure `void` `removeSome`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.removeSome:(I)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L42c1c8.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c1ce.  v0:= temp @kind object;
  #L42c1d0.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L42c1d4.  if v3 <= 0 then goto L42c1f6;
  #L42c1d8.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c1de.  v0:= temp @kind object;
  #L42c1e0.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L42c1e4.  v3:= v3 + -1;
  #L42c1e8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L42c1ec.  v1:= v1 + -1;
  #L42c1f0.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v1;
  #L42c1f4.  goto L42c1d4;
  #L42c1f6.  call `setFirst`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L42c1fc.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42c210.  call temp:= `getAndIncrement`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.getAndIncrement:()I` @kind virtual;
  #L42c216.  v0:= temp;
  #L42c218.  if v0 == 0 then goto L42c21e;
  #L42c21c.  return @kind void;
  #L42c21e.  v0:= 1I;
  #L42c220.  call temp:= `index`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.index:()Ljava/lang/Object;` @kind virtual;
  #L42c226.  v1:= temp @kind object;
  #L42c228.  v1:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v1 @kind object;
  #L42c22c.  if v1 != 0 then goto L42c23c;
  #L42c230.  call temp:= `getHead`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/observable/ObservableReplay$Node;` @kind virtual;
  #L42c236.  v1:= temp @kind object;
  #L42c238.  v5.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v1 @kind object;
  #L42c23c.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @kind virtual;
  #L42c242.  v2:= temp;
  #L42c244.  if v2 == 0 then goto L42c24a;
  #L42c248.  return @kind void;
  #L42c24a.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c250.  v2:= temp @kind object;
  #L42c252.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v2 @kind object;
  #L42c256.  if v2 == 0 then goto L42c282;
  #L42c25a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42c25e.  call temp:= `leaveTransform`(v4, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42c264.  v1:= temp @kind object;
  #L42c266.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.child` @type ^`io.reactivex.Observer` @kind object;
  #L42c26a.  call temp:= `accept`(v1, v3) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L42c270.  v1:= temp;
  #L42c272.  if v1 == 0 then goto L42c27e;
  #L42c276.  v0:= 0I;
  #L42c278.  v5.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v0 @kind object;
  #L42c27c.  return @kind void;
  #L42c27e.  v1:= v2 @kind object;
  #L42c280.  goto L42c23c;
  #L42c282.  v5.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v1 @kind object;
  #L42c286.  v0:= -v0 @kind int;
  #L42c288.  call temp:= `addAndGet`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.addAndGet:(I)I` @kind virtual;
  #L42c28e.  v0:= temp;
  #L42c290.  if v0 != 0 then goto L42c220;
  #L42c294.  return @kind void;
}
procedure `void` `setFirst`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$Node` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @AccessFlag FINAL {
    temp;

  #L42c2a8.  call `set`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L42c2ae.  return @kind void;
}
procedure `void` `trimHead`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.trimHead:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42c2c0.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c2c6.  v0:= temp @kind object;
  #L42c2c8.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L42c2cc.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42c2d0.  if v1 == 0 then goto L42c2f4;
  #L42c2d4.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L42c2d8.  v2:= 0I;
  #L42c2da.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42c2e0.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c2e6.  v0:= temp @kind object;
  #L42c2e8.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42c2ee.  call `set`(v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L42c2f4.  return @kind void;
}
procedure `void` `truncate`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncate:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `truncateFinal`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;

  #L42c308.  call `trimHead`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.trimHead:()V` @kind virtual;
  #L42c30e.  return @kind void;
}
