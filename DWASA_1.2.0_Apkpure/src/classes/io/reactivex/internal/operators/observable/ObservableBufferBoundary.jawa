record `io.reactivex.internal.operators.observable.ObservableBufferBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferClose` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferOpen` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferSupplier` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41e1cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L41e1d2.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferOpen` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L41e1d6.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferClose` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L41e1da.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L41e1de.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41e1f0.  v0:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver`;
  #L41e1f4.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferOpen` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41e1f8.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferClose` @type ^`io.reactivex.functions.Function` @kind object;
  #L41e1fc.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41e200.  call `<init>`(v0, v5, v1, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41e206.  call `onSubscribe`(v5, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41e20c.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41e210.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41e216.  return @kind void;
}
