record `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `java.util.Iterator` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.locks.Condition` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.condition` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.error` @AccessFlag ;
  `java.util.concurrent.locks.Lock` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41bc78.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41bc7e.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L41bc82.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L41bc88.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L41bc8c.  v2:= new `java.util.concurrent.locks.ReentrantLock`;
  #L41bc90.  call `<init>`(v2) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L41bc96.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` := v2 @kind object;
  #L41bc9a.  v2:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L41bc9e.  call temp:= `newCondition`(v2) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L41bca4.  v2:= temp @kind object;
  #L41bca6.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.condition` @type ^`java.util.concurrent.locks.Condition` := v2 @kind object;
  #L41bcaa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L41bcbc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41bcc2.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41bb4c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @type ^`boolean` @kind boolean;
  #L41bb50.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41bb54.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L41bb5a.  v1:= temp;
  #L41bb5c.  if v0 == 0 then goto L41bb7a;
  #L41bb60.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L41bb64.  if v0 != 0 then goto L41bb70;
  #L41bb68.  if v1 == 0 then goto L41bb7a;
  #L41bb6c.  v0:= 0I;
  #L41bb6e.  return v0;
  #L41bb70.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41bb76.  v0:= temp @kind object;
  #L41bb78.  throw v0;
  #L41bb7a.  if v1 == 0 then goto L41bbe4;
  #L41bb7e.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L41bb84.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L41bb88.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L41bb8e.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @type ^`boolean` @kind boolean;
  #L41bb92.  if v0 != 0 then goto L41bbb2;
  #L41bb96.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41bb9a.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L41bba0.  v0:= temp;
  #L41bba2.  if v0 == 0 then goto L41bbb2;
  #L41bba6.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.condition` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L41bbaa.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L41bbb0.  goto L41bb8e;
  #L41bbb2.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L41bbb6.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L41bbbc.  goto L41bb4c;
  #L41bbbe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41bbc0.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L41bbc4.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L41bbca.  throw v0;
  #L41bbcc.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L41bbce.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41bbd4.  call `signalConsumer`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @kind virtual;
  #L41bbda.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41bbe0.  v0:= temp @kind object;
  #L41bbe2.  throw v0;
  #L41bbe4.  v0:= 1I;
  #L41bbe6.  return v0;
  catch `java.lang.InterruptedException` @[L41bb7e..L41bb8e] goto L41bbcc;
  catch `java.lang.Throwable` @[L41bb8e..L41bbb0] goto L41bbbe;
  catch `java.lang.InterruptedException` @[L41bbb2..L41bbcc] goto L41bbcc;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bc18.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.get:()Ljava/lang/Object;` @kind virtual;
  #L41bc1e.  v0:= temp @kind object;
  #L41bc20.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L41bc24.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41bc2a.  v0:= temp;
  #L41bc2c.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bc40.  call temp:= `hasNext`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.hasNext:()Z` @kind virtual;
  #L41bc46.  v0:= temp;
  #L41bc48.  if v0 == 0 then goto L41bc5a;
  #L41bc4c.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41bc50.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L41bc56.  v0:= temp @kind object;
  #L41bc58.  return v0 @kind object;
  #L41bc5a.  v0:= new `java.util.NoSuchElementException`;
  #L41bc5e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L41bc64.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bcd4.  v0:= 1I;
  #L41bcd6.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @type ^`boolean` := v0 @kind boolean;
  #L41bcda.  call `signalConsumer`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @kind virtual;
  #L41bce0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L41bcf4.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L41bcf8.  v1:= 1I;
  #L41bcfa.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @type ^`boolean` := v1 @kind boolean;
  #L41bcfe.  call `signalConsumer`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @kind virtual;
  #L41bd04.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bd18.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41bd1c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L41bd22.  call `signalConsumer`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @kind virtual;
  #L41bd28.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L41bd3c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41bd42.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41bd54.  v0:= new `java.lang.UnsupportedOperationException`;
  #L41bd58.  v1:= "remove" @kind object;
  #L41bd5c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41bd62.  throw v0;
}
procedure `void` `signalConsumer`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41bd74.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L41bd78.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L41bd7e.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.condition` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L41bd82.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L41bd88.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L41bd8c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L41bd92.  return @kind void;
  #L41bd94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41bd96.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L41bd9a.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L41bda0.  throw v0;
  catch `java.lang.Throwable` @[L41bd7e..L41bd88] goto L41bd94;
}
