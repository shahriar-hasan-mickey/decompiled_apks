record `io.reactivex.internal.operators.observable.ObservableConcatWithSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.observable.ObservableConcatWithSingle.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle;.<init>:(Lio/reactivex/Observable;Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4213d0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L4213d6.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle.other` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L4213da.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4213ec.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4213f0.  v1:= new `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver`;
  #L4213f4.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle.other` @type ^`io.reactivex.SingleSource` @kind object;
  #L4213f8.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/SingleSource;)V` @kind direct;
  #L4213fe.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L421404.  return @kind void;
}
