record `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.remaining` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.sd` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `io.reactivex.internal.disposables.SequentialDisposable` v4 @kind object, `io.reactivex.ObservableSource` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.<init>:(Lio/reactivex/Observer;JLio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42b940.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42b946.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42b94a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v4 @kind object;
  #L42b94e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.source` @type ^`io.reactivex.ObservableSource` := v5 @kind object;
  #L42b952.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.remaining` @type ^`long` := v2 @kind wide;
  #L42b956.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b968.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.remaining` @type ^`long` @kind wide;
  #L42b96c.  v2:= 9223372036854775807L;
  #L42b976.  v4:= lcmp(v0, v2);
  #L42b97a.  if v4 == 0 then goto L42b98a;
  #L42b97e.  v2:= 1L;
  #L42b982.  v2:= v0 - v2 @kind long;
  #L42b986.  v5.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.remaining` @type ^`long` := v2 @kind wide;
  #L42b98a.  v2:= 0L;
  #L42b98e.  v4:= lcmp(v0, v2);
  #L42b992.  if v4 == 0 then goto L42b99e;
  #L42b996.  call `subscribeNext`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.subscribeNext:()V` @kind virtual;
  #L42b99c.  goto L42b9a8;
  #L42b99e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b9a2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42b9a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b9bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b9c0.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b9c6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b9d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b9dc.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42b9e2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b9f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42b9f8.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42b9fe.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42ba10.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.getAndIncrement:()I` @kind virtual;
  #L42ba16.  v0:= temp;
  #L42ba18.  if v0 != 0 then goto L42ba48;
  #L42ba1c.  v0:= 1I;
  #L42ba1e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42ba22.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L42ba28.  v1:= temp;
  #L42ba2a.  if v1 == 0 then goto L42ba30;
  #L42ba2e.  return @kind void;
  #L42ba30.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42ba34.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42ba3a.  v0:= -v0 @kind int;
  #L42ba3c.  call temp:= `addAndGet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.addAndGet:(I)I` @kind virtual;
  #L42ba42.  v0:= temp;
  #L42ba44.  if v0 != 0 then goto L42ba1e;
  #L42ba48.  return @kind void;
}
