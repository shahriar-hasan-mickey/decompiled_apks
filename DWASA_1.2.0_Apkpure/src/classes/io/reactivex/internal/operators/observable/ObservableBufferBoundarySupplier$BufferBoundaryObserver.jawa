record `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.once` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundaryObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41dd38.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L41dd3e.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` := v1 @kind object;
  #L41dd42.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundaryObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41dd54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.once` @type ^`boolean` @kind boolean;
  #L41dd58.  if v0 == 0 then goto L41dd5e;
  #L41dd5c.  return @kind void;
  #L41dd5e.  v0:= 1I;
  #L41dd60.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.once` @type ^`boolean` := v0 @kind boolean;
  #L41dd64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` @kind object;
  #L41dd68.  call `next`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.next:()V` @kind virtual;
  #L41dd6e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundaryObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41dd80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.once` @type ^`boolean` @kind boolean;
  #L41dd84.  if v0 == 0 then goto L41dd90;
  #L41dd88.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41dd8e.  return @kind void;
  #L41dd90.  v0:= 1I;
  #L41dd92.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.once` @type ^`boolean` := v0 @kind boolean;
  #L41dd96.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` @kind object;
  #L41dd9a.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41dda0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundaryObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L41ddb4.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.once` @type ^`boolean` @kind boolean;
  #L41ddb8.  if v1 == 0 then goto L41ddbe;
  #L41ddbc.  return @kind void;
  #L41ddbe.  v1:= 1I;
  #L41ddc0.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.once` @type ^`boolean` := v1 @kind boolean;
  #L41ddc4.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundaryObserver;.dispose:()V` @kind virtual;
  #L41ddca.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundaryObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver` @kind object;
  #L41ddce.  call `next`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$BufferBoundarySupplierObserver;.next:()V` @kind virtual;
  #L41ddd4.  return @kind void;
}
