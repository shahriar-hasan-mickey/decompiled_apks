record `io.reactivex.internal.operators.observable.ObservableConcatMapEager` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.observable.ObservableConcatMapEager.errorMode` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMapEager.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager.maxConcurrency` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager.prefetch` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L420ec0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L420ec6.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L420eca.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L420ece.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.maxConcurrency` @type ^`int` := v4;
  #L420ed2.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.prefetch` @type ^`int` := v5;
  #L420ed6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager` v8 @kind this, `io.reactivex.Observer` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L420ee8.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L420eec.  v7:= new `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver`;
  #L420ef0.  v3:= v8.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L420ef4.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.maxConcurrency` @type ^`int`;
  #L420ef8.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.prefetch` @type ^`int`;
  #L420efc.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableConcatMapEager.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420f00.  v1:= v7 @kind object;
  #L420f02.  v2:= v9 @kind object;
  #L420f04.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L420f0a.  call `subscribe`(v0, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L420f10.  return @kind void;
}
