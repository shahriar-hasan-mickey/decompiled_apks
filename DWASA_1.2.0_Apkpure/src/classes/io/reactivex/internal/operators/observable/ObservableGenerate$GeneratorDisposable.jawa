record `io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.Emitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.disposeState` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.generator` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.hasNext` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.state` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.terminate` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L426290.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L426296.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42629a.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.generator` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L42629e.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.disposeState` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L4262a2.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.state` @type ^`java.lang.Object` := v4 @kind object;
  #L4262a6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.dispose:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4262d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.disposeState` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4262d4.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4262da.  goto L4262ea;
  #L4262dc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4262de.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4262e4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4262ea.  return @kind void;
  catch `java.lang.Throwable` @[L4262d0..L4262da] goto L4262dc;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4262b8.  v0:= 1I;
  #L4262ba.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4262be.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426278.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L42627c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426308.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.terminate` @type ^`boolean` @kind boolean;
  #L42630c.  if v0 != 0 then goto L426320;
  #L426310.  v0:= 1I;
  #L426312.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.terminate` @type ^`boolean` := v0 @kind boolean;
  #L426316.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42631a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L426320.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426334.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.terminate` @type ^`boolean` @kind boolean;
  #L426338.  if v0 == 0 then goto L426344;
  #L42633c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L426342.  goto L426366;
  #L426344.  if v2 != 0 then goto L426356;
  #L426348.  v2:= new `java.lang.NullPointerException`;
  #L42634c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L426350.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L426356.  v0:= 1I;
  #L426358.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.terminate` @type ^`boolean` := v0 @kind boolean;
  #L42635c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L426360.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L426366.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426378.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.terminate` @type ^`boolean` @kind boolean;
  #L42637c.  if v0 != 0 then goto L4263c8;
  #L426380.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.hasNext` @type ^`boolean` @kind boolean;
  #L426384.  if v0 == 0 then goto L42639e;
  #L426388.  v2:= new `java.lang.IllegalStateException`;
  #L42638c.  v0:= "onNext already called in this generate turn" @kind object;
  #L426390.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L426396.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42639c.  goto L4263c8;
  #L42639e.  if v2 != 0 then goto L4263b8;
  #L4263a2.  v2:= new `java.lang.NullPointerException`;
  #L4263a6.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4263aa.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4263b0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4263b6.  goto L4263c8;
  #L4263b8.  v0:= 1I;
  #L4263ba.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L4263be.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4263c2.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4263c8.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4263dc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.state` @type ^`java.lang.Object` @kind object;
  #L4263e0.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L4263e4.  v2:= 0I;
  #L4263e6.  if v1 == 0 then goto L4263f6;
  #L4263ea.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.state` @type ^`java.lang.Object` := v2 @kind object;
  #L4263ee.  call `dispose`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.dispose:(Ljava/lang/Object;)V` @kind direct;
  #L4263f4.  return @kind void;
  #L4263f6.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.generator` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4263fa.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L4263fe.  if v3 == 0 then goto L42640e;
  #L426402.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.state` @type ^`java.lang.Object` := v2 @kind object;
  #L426406.  call `dispose`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.dispose:(Ljava/lang/Object;)V` @kind direct;
  #L42640c.  return @kind void;
  #L42640e.  v3:= 0I;
  #L426410.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.hasNext` @type ^`boolean` := v3 @kind boolean;
  #L426414.  v3:= 1I;
  #L426416.  call temp:= `apply`(v1, v0, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42641c.  v0:= temp @kind object;
  #L42641e.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.terminate` @type ^`boolean` @kind boolean;
  #L426422.  if v4 == 0 then goto L4263fa;
  #L426426.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L42642a.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.state` @type ^`java.lang.Object` := v2 @kind object;
  #L42642e.  call `dispose`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.dispose:(Ljava/lang/Object;)V` @kind direct;
  #L426434.  return @kind void;
  #L426436.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L426438.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42643e.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.state` @type ^`java.lang.Object` := v2 @kind object;
  #L426442.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L426446.  call `onError`(v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42644c.  call `dispose`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$GeneratorDisposable;.dispose:(Ljava/lang/Object;)V` @kind direct;
  #L426452.  return @kind void;
  catch `java.lang.Throwable` @[L426416..L42641e] goto L426436;
}
