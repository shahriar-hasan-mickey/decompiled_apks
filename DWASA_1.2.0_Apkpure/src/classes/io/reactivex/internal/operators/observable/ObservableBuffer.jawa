record `io.reactivex.internal.operators.observable.ObservableBuffer` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer.bufferSupplier` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer.count` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer.skip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer;.<init>:(Lio/reactivex/ObservableSource;IILjava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41f278.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L41f27e.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.count` @type ^`int` := v2;
  #L41f282.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.skip` @type ^`int` := v3;
  #L41f286.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L41f28a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableBuffer` v5 @kind this, `io.reactivex.Observer` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41f29c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.skip` @type ^`int`;
  #L41f2a0.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.count` @type ^`int`;
  #L41f2a4.  if v0 != v1 then goto L41f2ce;
  #L41f2a8.  v0:= new `io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver`;
  #L41f2ac.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41f2b0.  call `<init>`(v0, v6, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.<init>:(Lio/reactivex/Observer;ILjava/util/concurrent/Callable;)V` @kind direct;
  #L41f2b6.  call temp:= `createBuffer`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.createBuffer:()Z` @kind virtual;
  #L41f2bc.  v6:= temp;
  #L41f2be.  if v6 == 0 then goto L41f2ee;
  #L41f2c2.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41f2c6.  call `subscribe`(v6, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41f2cc.  goto L41f2ee;
  #L41f2ce.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41f2d2.  v1:= new `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver`;
  #L41f2d6.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.count` @type ^`int`;
  #L41f2da.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.skip` @type ^`int`;
  #L41f2de.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41f2e2.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.<init>:(Lio/reactivex/Observer;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L41f2e8.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41f2ee.  return @kind void;
}
