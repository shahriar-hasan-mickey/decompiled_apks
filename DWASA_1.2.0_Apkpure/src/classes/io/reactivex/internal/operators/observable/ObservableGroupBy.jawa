record `io.reactivex.internal.operators.observable.ObservableGroupBy` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableGroupBy.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy.delayError` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupBy.keySelector` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupBy.valueSelector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L426b70.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L426b76.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L426b7a.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy.valueSelector` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L426b7e.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy.bufferSize` @type ^`int` := v4;
  #L426b82.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy.delayError` @type ^`boolean` := v5 @kind boolean;
  #L426b86.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableGroupBy` v8 @kind this, `io.reactivex.Observer` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L426b98.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L426b9c.  v7:= new `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver`;
  #L426ba0.  v3:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L426ba4.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy.valueSelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L426ba8.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy.bufferSize` @type ^`int`;
  #L426bac.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy.delayError` @type ^`boolean` @kind boolean;
  #L426bb0.  v1:= v7 @kind object;
  #L426bb2.  v2:= v9 @kind object;
  #L426bb4.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L426bba.  call `subscribe`(v0, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L426bc0.  return @kind void;
}
