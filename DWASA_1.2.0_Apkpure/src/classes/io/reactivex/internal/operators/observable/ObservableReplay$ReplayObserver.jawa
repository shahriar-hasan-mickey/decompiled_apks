record `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42c570.  v0:= 0I;
  #L42c572.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[v0];
  #L42c576.  `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] := v1 @kind object;
  #L42c57a.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[v0];
  #L42c57e.  `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] := v0 @kind object;
  #L42c582.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42c594.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42c59a.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` := v2 @kind object;
  #L42c59e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42c5a2.  v0:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L42c5a6.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42c5ac.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L42c5b0.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L42c5b4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42c5ba.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L42c5be.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.add:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42c4f0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c4f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c4fa.  v0:= temp @kind object;
  #L42c4fc.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[]) v0 @kind object;
  #L42c500.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L42c504.  v2:= 0I;
  #L42c506.  if v0 != v1 then goto L42c50c;
  #L42c50a.  return v2;
  #L42c50c.  v1:= length @variable v0;
  #L42c50e.  v3:= v1 + 1;
  #L42c512.  v3:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[v3];
  #L42c516.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42c51c.  v3[v1]:= v5 @kind object;
  #L42c520.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c524.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42c52a.  v0:= temp;
  #L42c52c.  if v0 == 0 then goto L42c4f0;
  #L42c530.  v5:= 1I;
  #L42c532.  return v5;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c5d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c5d4.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L42c5d8.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L42c5de.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42c5e4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c544.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c548.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c54e.  v0:= temp @kind object;
  #L42c550.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L42c554.  if v0 != v1 then goto L42c55c;
  #L42c558.  v0:= 1I;
  #L42c55a.  goto L42c55e;
  #L42c55c.  v0:= 0I;
  #L42c55e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c5f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` @kind boolean;
  #L42c5fc.  if v0 != 0 then goto L42c616;
  #L42c600.  v0:= 1I;
  #L42c602.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42c606.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` @kind object;
  #L42c60a.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;.complete:()V` @kind interface;
  #L42c610.  call `replayFinal`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replayFinal:()V` @kind virtual;
  #L42c616.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c628.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` @kind boolean;
  #L42c62c.  if v0 != 0 then goto L42c648;
  #L42c630.  v0:= 1I;
  #L42c632.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42c636.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` @kind object;
  #L42c63a.  call `error`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;.error:(Ljava/lang/Throwable;)V` @kind interface;
  #L42c640.  call `replayFinal`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replayFinal:()V` @kind virtual;
  #L42c646.  goto L42c64e;
  #L42c648.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42c64e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c660.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` @kind boolean;
  #L42c664.  if v0 != 0 then goto L42c678;
  #L42c668.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` @kind object;
  #L42c66c.  call `next`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;.next:(Ljava/lang/Object;)V` @kind interface;
  #L42c672.  call `replay`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replay:()V` @kind virtual;
  #L42c678.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42c68c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42c692.  v1:= temp;
  #L42c694.  if v1 == 0 then goto L42c69e;
  #L42c698.  call `replay`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replay:()V` @kind virtual;
  #L42c69e.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.remove:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42c6b0.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c6b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c6ba.  v0:= temp @kind object;
  #L42c6bc.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[]) v0 @kind object;
  #L42c6c0.  v1:= length @variable v0;
  #L42c6c2.  if v1 != 0 then goto L42c6c8;
  #L42c6c6.  return @kind void;
  #L42c6c8.  v2:= -1I;
  #L42c6ca.  v3:= 0I;
  #L42c6cc.  v4:= 0I;
  #L42c6ce.  if v4 >= v1 then goto L42c6ec;
  #L42c6d2.  v5:= v0[v4] @kind object;
  #L42c6d6.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42c6dc.  v5:= temp;
  #L42c6de.  if v5 == 0 then goto L42c6e6;
  #L42c6e2.  v2:= v4;
  #L42c6e4.  goto L42c6ec;
  #L42c6e6.  v4:= v4 + 1;
  #L42c6ea.  goto L42c6ce;
  #L42c6ec.  if v2 >= 0 then goto L42c6f2;
  #L42c6f0.  return @kind void;
  #L42c6f2.  v4:= 1I;
  #L42c6f4.  if v1 != v4 then goto L42c6fe;
  #L42c6f8.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L42c6fc.  goto L42c71c;
  #L42c6fe.  v5:= v1 + -1;
  #L42c702.  v5:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[v5];
  #L42c706.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42c70c.  v3:= v2 + 1;
  #L42c710.  v1:= v1 - v2 @kind int;
  #L42c712.  v1:= v1 - v4 @kind int;
  #L42c714.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42c71a.  v1:= v5 @kind object;
  #L42c71c.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c720.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42c726.  v0:= temp;
  #L42c728.  if v0 == 0 then goto L42c6b0;
  #L42c72c.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replay:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42c740.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c744.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c74a.  v0:= temp @kind object;
  #L42c74c.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[]) v0 @kind object;
  #L42c750.  v1:= length @variable v0;
  #L42c752.  v2:= 0I;
  #L42c754.  if v2 >= v1 then goto L42c76c;
  #L42c758.  v3:= v0[v2] @kind object;
  #L42c75c.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` @kind object;
  #L42c760.  call `replay`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind interface;
  #L42c766.  v2:= v2 + 1;
  #L42c76a.  goto L42c754;
  #L42c76c.  return @kind void;
}
procedure `void` `replayFinal`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replayFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42c780.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c784.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L42c788.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42c78e.  v0:= temp @kind object;
  #L42c790.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[]) v0 @kind object;
  #L42c794.  v1:= length @variable v0;
  #L42c796.  v2:= 0I;
  #L42c798.  if v2 >= v1 then goto L42c7b0;
  #L42c79c.  v3:= v0[v2] @kind object;
  #L42c7a0.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` @kind object;
  #L42c7a4.  call `replay`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind interface;
  #L42c7aa.  v2:= v2 + 1;
  #L42c7ae.  goto L42c798;
  #L42c7b0.  return @kind void;
}
