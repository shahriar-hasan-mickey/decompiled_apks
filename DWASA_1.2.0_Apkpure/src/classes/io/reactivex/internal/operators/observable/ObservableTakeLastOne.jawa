record `io.reactivex.internal.operators.observable.ObservableTakeLastOne` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeLastOne` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastOne;.<init>:(Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L430688.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L43068e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableTakeLastOne` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastOne;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4306a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLastOne.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4306a4.  v1:= new `io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver`;
  #L4306a8.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastOne$TakeLastOneObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L4306ae.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4306b4.  return @kind void;
}
