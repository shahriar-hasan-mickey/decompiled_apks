record `io.reactivex.internal.operators.observable.ObservableSubscribeOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableSubscribeOn.scheduler` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42fae4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42faea.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L42faee.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fb00.  v0:= new `io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver`;
  #L42fb04.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L42fb0a.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42fb10.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSubscribeOn.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42fb14.  v1:= new `io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeTask`;
  #L42fb18.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeTask;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSubscribeOn;Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;)V` @kind direct;
  #L42fb1e.  call temp:= `scheduleDirect`(v3, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42fb24.  v3:= temp @kind object;
  #L42fb26.  call `setDisposable`(v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L42fb2c.  return @kind void;
}
