record `io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.predicate` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$TakeWhileObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L430e28.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L430e2e.  v0.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L430e32.  v0.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L430e36.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$TakeWhileObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430e48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430e4c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430e52.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$TakeWhileObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430e08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430e0c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L430e12.  v0:= temp;
  #L430e14.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$TakeWhileObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430e64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.done` @type ^`boolean` @kind boolean;
  #L430e68.  if v0 == 0 then goto L430e6e;
  #L430e6c.  return @kind void;
  #L430e6e.  v0:= 1I;
  #L430e70.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L430e74.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430e78.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L430e7e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$TakeWhileObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430e90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.done` @type ^`boolean` @kind boolean;
  #L430e94.  if v0 == 0 then goto L430ea0;
  #L430e98.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L430e9e.  return @kind void;
  #L430ea0.  v0:= 1I;
  #L430ea2.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L430ea6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430eaa.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430eb0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$TakeWhileObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430ec4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.done` @type ^`boolean` @kind boolean;
  #L430ec8.  if v0 == 0 then goto L430ece;
  #L430ecc.  return @kind void;
  #L430ece.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L430ed2.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L430ed8.  v0:= temp;
  #L430eda.  if v0 != 0 then goto L430efa;
  #L430ede.  v2:= 1I;
  #L430ee0.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L430ee4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430ee8.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430eee.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430ef2.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L430ef8.  return @kind void;
  #L430efa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430efe.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L430f04.  return @kind void;
  #L430f06.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L430f08.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L430f0e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430f12.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430f18.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$TakeWhileObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L430f1e.  return @kind void;
  catch `java.lang.Throwable` @[L430ece..L430eda] goto L430f06;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$TakeWhileObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430f3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430f40.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L430f46.  v0:= temp;
  #L430f48.  if v0 == 0 then goto L430f5a;
  #L430f4c.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L430f50.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430f54.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L430f5a.  return @kind void;
}
