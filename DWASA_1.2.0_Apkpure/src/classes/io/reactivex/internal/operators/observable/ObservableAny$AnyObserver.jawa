record `io.reactivex.internal.operators.observable.ObservableAny$AnyObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.predicate` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAny$AnyObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41ccf4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41ccfa.  v0.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41ccfe.  v0.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L41cd02.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAny$AnyObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cd14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41cd18.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41cd1e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAny$AnyObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ccd4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41ccd8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41ccde.  v0:= temp;
  #L41cce0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAny$AnyObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41cd30.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.done` @type ^`boolean` @kind boolean;
  #L41cd34.  if v0 != 0 then goto L41cd5c;
  #L41cd38.  v0:= 1I;
  #L41cd3a.  v2.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41cd3e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cd42.  v1:= 0I;
  #L41cd44.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L41cd4a.  v1:= temp @kind object;
  #L41cd4c.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41cd52.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cd56.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41cd5c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAny$AnyObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cd70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.done` @type ^`boolean` @kind boolean;
  #L41cd74.  if v0 == 0 then goto L41cd80;
  #L41cd78.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41cd7e.  return @kind void;
  #L41cd80.  v0:= 1I;
  #L41cd82.  v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41cd86.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cd8a.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41cd90.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAny$AnyObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cda4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.done` @type ^`boolean` @kind boolean;
  #L41cda8.  if v0 == 0 then goto L41cdae;
  #L41cdac.  return @kind void;
  #L41cdae.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L41cdb2.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L41cdb8.  v2:= temp;
  #L41cdba.  if v2 == 0 then goto L41cdea;
  #L41cdbe.  v2:= 1I;
  #L41cdc0.  v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41cdc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41cdc8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41cdce.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cdd2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L41cdd8.  v2:= temp @kind object;
  #L41cdda.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41cde0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cde4.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41cdea.  return @kind void;
  #L41cdec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41cdee.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41cdf4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41cdf8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41cdfe.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAny$AnyObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41ce04.  return @kind void;
  catch `java.lang.Throwable` @[L41cdae..L41cdba] goto L41cdec;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAny$AnyObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ce24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41ce28.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41ce2e.  v0:= temp;
  #L41ce30.  if v0 == 0 then goto L41ce42;
  #L41ce34.  v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41ce38.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAny$AnyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ce3c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41ce42.  return @kind void;
}
