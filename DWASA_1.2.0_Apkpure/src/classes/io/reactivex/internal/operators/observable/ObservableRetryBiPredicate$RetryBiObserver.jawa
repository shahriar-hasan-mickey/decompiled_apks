record `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.predicate` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.retries` @AccessFlag ;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.source` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiPredicate` v2 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiPredicate;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42cfd0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42cfd6.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42cfda.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v3 @kind object;
  #L42cfde.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.source` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L42cfe2.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.predicate` @type ^`io.reactivex.functions.BiPredicate` := v2 @kind object;
  #L42cfe6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cff8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42cffc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d002.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42d014.  v0:= 1I;
  #L42d016.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.predicate` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L42d01a.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.retries` @type ^`int`;
  #L42d01e.  v2:= v2 + v0 @kind int;
  #L42d020.  v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.retries` @type ^`int` := v2;
  #L42d024.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42d02a.  v2:= temp @kind object;
  #L42d02c.  call temp:= `test`(v1, v2, v7) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L42d032.  v0:= temp;
  #L42d034.  if v0 != 0 then goto L42d044;
  #L42d038.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d03c.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d042.  return @kind void;
  #L42d044.  call `subscribeNext`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.subscribeNext:()V` @kind virtual;
  #L42d04a.  return @kind void;
  #L42d04c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d04e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d054.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d058.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L42d05c.  v4:= 2I;
  #L42d05e.  v4:= new `java.lang.Throwable`[v4];
  #L42d062.  v5:= 0I;
  #L42d064.  v4[v5]:= v7 @kind object;
  #L42d068.  v4[v0]:= v1 @kind object;
  #L42d06c.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42d072.  call `onError`(v2, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d078.  return @kind void;
  catch `java.lang.Throwable` @[L42d016..L42d034] goto L42d04c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d098.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d09c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42d0a2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d0b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42d0b8.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42d0be.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42d0d0.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.getAndIncrement:()I` @kind virtual;
  #L42d0d6.  v0:= temp;
  #L42d0d8.  if v0 != 0 then goto L42d108;
  #L42d0dc.  v0:= 1I;
  #L42d0de.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42d0e2.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L42d0e8.  v1:= temp;
  #L42d0ea.  if v1 == 0 then goto L42d0f0;
  #L42d0ee.  return @kind void;
  #L42d0f0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42d0f4.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42d0fa.  v0:= -v0 @kind int;
  #L42d0fc.  call temp:= `addAndGet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.addAndGet:(I)I` @kind virtual;
  #L42d102.  v0:= temp;
  #L42d104.  if v0 != 0 then goto L42d0de;
  #L42d108.  return @kind void;
}
