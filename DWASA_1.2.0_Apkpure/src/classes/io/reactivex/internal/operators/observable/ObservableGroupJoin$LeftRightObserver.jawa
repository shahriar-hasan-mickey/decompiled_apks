record `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.isLeft` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L427354.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42735a.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` := v1 @kind object;
  #L42735e.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.isLeft` @type ^`boolean` := v2 @kind boolean;
  #L427362.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L427374.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42737a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42732c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L427332.  v0:= temp @kind object;
  #L427334.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L427338.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42733e.  v0:= temp;
  #L427340.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42738c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` @kind object;
  #L427390.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;.innerComplete:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;)V` @kind interface;
  #L427396.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4273a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` @kind object;
  #L4273ac.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;.innerError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4273b2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4273c4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` @kind object;
  #L4273c8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.isLeft` @type ^`boolean` @kind boolean;
  #L4273cc.  call `innerValue`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;.innerValue:(ZLjava/lang/Object;)V` @kind interface;
  #L4273d2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4273e4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4273ea.  return @kind void;
}
