record `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.bufferSupplier` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.count` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.skip` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.<init>:(Lio/reactivex/Observer;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41d424.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L41d42a.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41d42e.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.count` @type ^`int` := v2;
  #L41d432.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.skip` @type ^`int` := v3;
  #L41d436.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L41d43a.  v1:= new `java.util.ArrayDeque`;
  #L41d43e.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L41d444.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L41d448.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d45c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41d460.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41d466.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d404.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41d408.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41d40e.  v0:= temp;
  #L41d410.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41d478.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L41d47c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L41d482.  v0:= temp;
  #L41d484.  if v0 != 0 then goto L41d4a0;
  #L41d488.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d48c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L41d490.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L41d496.  v1:= temp @kind object;
  #L41d498.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41d49e.  goto L41d478;
  #L41d4a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d4a4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41d4aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d4bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L41d4c0.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L41d4c6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d4ca.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41d4d0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41d4e4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.index` @type ^`long` @kind wide;
  #L41d4e8.  v2:= 1L;
  #L41d4ec.  v2:= v2 + v0 @kind long;
  #L41d4ee.  v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.index` @type ^`long` := v2 @kind wide;
  #L41d4f2.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.skip` @type ^`int`;
  #L41d4f6.  v2:= (`long`) v2 @kind i2l;
  #L41d4f8.  v0:= v0 %% v2 @kind long;
  #L41d4fa.  v2:= 0L;
  #L41d4fe.  v4:= lcmp(v0, v2);
  #L41d502.  if v4 != 0 then goto L41d550;
  #L41d506.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41d50a.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41d510.  v0:= temp @kind object;
  #L41d512.  v1:= "The bufferSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L41d516.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d51c.  v0:= temp @kind object;
  #L41d51e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41d522.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L41d526.  call temp:= `offer`(v1, v0) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L41d52c.  goto L41d550;
  #L41d52e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41d530.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L41d534.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L41d53a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41d53e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41d544.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d548.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41d54e.  return @kind void;
  #L41d550.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L41d554.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L41d55a.  v0:= temp @kind object;
  #L41d55c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41d562.  v1:= temp;
  #L41d564.  if v1 == 0 then goto L41d59c;
  #L41d568.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41d56e.  v1:= temp @kind object;
  #L41d570.  v1:= (`java.util.Collection`) v1 @kind object;
  #L41d574.  call temp:= `add`(v1, v6) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41d57a.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.count` @type ^`int`;
  #L41d57e.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L41d584.  v3:= temp;
  #L41d586.  if v2 > v3 then goto L41d55c;
  #L41d58a.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L41d590.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d594.  call `onNext`(v2, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41d59a.  goto L41d55c;
  #L41d59c.  return @kind void;
  catch `java.lang.Throwable` @[L41d506..L41d522] goto L41d52e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d5bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41d5c0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41d5c6.  v0:= temp;
  #L41d5c8.  if v0 == 0 then goto L41d5da;
  #L41d5cc.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41d5d0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d5d4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41d5da.  return @kind void;
}
