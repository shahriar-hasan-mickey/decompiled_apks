record `io.reactivex.internal.operators.observable.ObservableToList$ToListObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.collection` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToList$ToListObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L432584.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43258a.  v0.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43258e.  v0.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.collection` @type ^`java.util.Collection` := v2 @kind object;
  #L432592.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToList$ToListObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4325a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4325a8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4325ae.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToList$ToListObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432564.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432568.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43256e.  v0:= temp;
  #L432570.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToList$ToListObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4325c0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.collection` @type ^`java.util.Collection` @kind object;
  #L4325c4.  v1:= 0I;
  #L4325c6.  v2.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.collection` @type ^`java.util.Collection` := v1 @kind object;
  #L4325ca.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4325ce.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4325d4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4325d8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4325de.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToList$ToListObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4325f0.  v0:= 0I;
  #L4325f2.  v1.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.collection` @type ^`java.util.Collection` := v0 @kind object;
  #L4325f6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4325fa.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432600.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToList$ToListObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432614.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.collection` @type ^`java.util.Collection` @kind object;
  #L432618.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43261e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToList$ToListObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432630.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432634.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43263a.  v0:= temp;
  #L43263c.  if v0 == 0 then goto L43264e;
  #L432640.  v1.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L432644.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableToList$ToListObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432648.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43264e.  return @kind void;
}
