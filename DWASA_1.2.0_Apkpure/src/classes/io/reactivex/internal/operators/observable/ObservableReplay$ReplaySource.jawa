record `io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource` @kind class @AccessFlag FINAL extends `io.reactivex.ObservableSource` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` `io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource.bufferFactory` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource.curr` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplaySource;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42c7c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42c7ca.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource.curr` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42c7ce.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource.bufferFactory` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` := v2 @kind object;
  #L42c7d2.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplaySource;.subscribe:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42c7e4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c7e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c7ee.  v0:= temp @kind object;
  #L42c7f0.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`) v0 @kind object;
  #L42c7f4.  if v0 != 0 then goto L42c824;
  #L42c7f8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource.bufferFactory` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` @kind object;
  #L42c7fc.  call temp:= `call`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;.call:()Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;` @kind interface;
  #L42c802.  v0:= temp @kind object;
  #L42c804.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`;
  #L42c808.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;)V` @kind direct;
  #L42c80e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c812.  v2:= 0I;
  #L42c814.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42c81a.  v0:= temp;
  #L42c81c.  if v0 != 0 then goto L42c822;
  #L42c820.  goto L42c7e4;
  #L42c822.  v0:= v1 @kind object;
  #L42c824.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`;
  #L42c828.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;Lio/reactivex/Observer;)V` @kind direct;
  #L42c82e.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42c834.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.add:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)Z` @kind virtual;
  #L42c83a.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @kind virtual;
  #L42c840.  v4:= temp;
  #L42c842.  if v4 == 0 then goto L42c84e;
  #L42c846.  call `remove`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.remove:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind virtual;
  #L42c84c.  return @kind void;
  #L42c84e.  v4:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` @kind object;
  #L42c852.  call `replay`(v4, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind interface;
  #L42c858.  return @kind void;
}
