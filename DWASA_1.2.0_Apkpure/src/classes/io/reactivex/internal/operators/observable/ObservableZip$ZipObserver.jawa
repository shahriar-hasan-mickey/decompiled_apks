record `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.error` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.parent` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.upstream` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L435b7c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L435b82.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L435b86.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L435b8c.  v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L435b90.  v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` := v2 @kind object;
  #L435b94.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L435b98.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L435b9e.  v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L435ba2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435bb4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435bb8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L435bbe.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435bd0.  v0:= 1I;
  #L435bd2.  v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L435bd6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` @kind object;
  #L435bda.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L435be0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L435bf4.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L435bf8.  v1:= 1I;
  #L435bfa.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L435bfe.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` @kind object;
  #L435c02.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L435c08.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435c1c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L435c20.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L435c26.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` @kind object;
  #L435c2a.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L435c30.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435c44.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435c48.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L435c4e.  return @kind void;
}
