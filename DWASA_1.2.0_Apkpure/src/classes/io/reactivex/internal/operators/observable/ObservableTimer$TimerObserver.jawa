record `io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L432470.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L432476.  v0.`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43247a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43248c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L432492.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432448.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43244e.  v0:= temp @kind object;
  #L432450.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L432454.  if v0 != v1 then goto L43245c;
  #L432458.  v0:= 1I;
  #L43245a.  goto L43245e;
  #L43245c.  v0:= 0I;
  #L43245e.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4324a4.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.isDisposed:()Z` @kind virtual;
  #L4324aa.  v0:= temp;
  #L4324ac.  if v0 != 0 then goto L4324da;
  #L4324b0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4324b4.  v1:= 0L;
  #L4324b8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4324be.  v1:= temp @kind object;
  #L4324c0.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4324c6.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4324ca.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4324d0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4324d4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4324da.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.setResource:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4324ec.  call temp:= `trySet`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4324f2.  return @kind void;
}
