record `io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$TargetObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42aa04.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42aa0a.  v0.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42aa0e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$TargetObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aa20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42aa24.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42aa2a.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42aa30.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$TargetObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a9e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42a9e8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42a9ee.  v0:= temp;
  #L42a9f0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$TargetObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aa44.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42aa4a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42aa4e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42aa54.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$TargetObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aa68.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42aa6e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42aa72.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42aa78.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$TargetObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aa8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42aa90.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42aa96.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$TargetObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aaa8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42aaac.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42aab2.  v0:= temp;
  #L42aab4.  if v0 == 0 then goto L42aac6;
  #L42aab8.  v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42aabc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42aac0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42aac6.  return @kind void;
}
