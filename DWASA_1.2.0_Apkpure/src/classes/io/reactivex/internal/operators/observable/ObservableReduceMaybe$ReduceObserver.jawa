record `io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.done` @AccessFlag ;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.reducer` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$ReduceObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42b0c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42b0ce.  v0.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42b0d2.  v0.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.reducer` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L42b0d6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$ReduceObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b0e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b0ec.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b0f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$ReduceObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b0a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b0ac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42b0b2.  v0:= temp;
  #L42b0b4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$ReduceObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b104.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.done` @type ^`boolean` @kind boolean;
  #L42b108.  if v0 == 0 then goto L42b10e;
  #L42b10c.  return @kind void;
  #L42b10e.  v0:= 1I;
  #L42b110.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42b114.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.value` @type ^`java.lang.Object` @kind object;
  #L42b118.  v1:= 0I;
  #L42b11a.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L42b11e.  if v0 == 0 then goto L42b12e;
  #L42b122.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b126.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42b12c.  goto L42b138;
  #L42b12e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b132.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42b138.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$ReduceObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b14c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.done` @type ^`boolean` @kind boolean;
  #L42b150.  if v0 == 0 then goto L42b15c;
  #L42b154.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42b15a.  return @kind void;
  #L42b15c.  v0:= 1I;
  #L42b15e.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42b162.  v0:= 0I;
  #L42b164.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.value` @type ^`java.lang.Object` := v0 @kind object;
  #L42b168.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b16c.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b172.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$ReduceObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b184.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.done` @type ^`boolean` @kind boolean;
  #L42b188.  if v0 != 0 then goto L42b1d0;
  #L42b18c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.value` @type ^`java.lang.Object` @kind object;
  #L42b190.  if v0 != 0 then goto L42b19a;
  #L42b194.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L42b198.  goto L42b1d0;
  #L42b19a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.reducer` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L42b19e.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42b1a4.  v3:= temp @kind object;
  #L42b1a6.  v0:= "The reducer returned a null value" @kind object;
  #L42b1aa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42b1b0.  v3:= temp @kind object;
  #L42b1b2.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L42b1b6.  goto L42b1d0;
  #L42b1b8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b1ba.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42b1c0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b1c4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b1ca.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$ReduceObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42b1d0.  return @kind void;
  catch `java.lang.Throwable` @[L42b19a..L42b1b6] goto L42b1b8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$ReduceObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b1f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b1f4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b1fa.  v0:= temp;
  #L42b1fc.  if v0 == 0 then goto L42b20e;
  #L42b200.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42b204.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$ReduceObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b208.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b20e.  return @kind void;
}
