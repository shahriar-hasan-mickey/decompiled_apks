record `io.reactivex.internal.operators.observable.ObservableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.observables.ConnectableObservable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamObservableSource` @kind interface, `io.reactivex.internal.disposables.ResettableConnectable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` `io.reactivex.internal.operators.observable.ObservableReplay.bufferFactory` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay.current` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableReplay.onSubscribe` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableReplay.source` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` `@@io.reactivex.internal.operators.observable.ObservableReplay.DEFAULT_UNBOUNDED_FACTORY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42ce7c.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$UnBoundedFactory`;
  #L42ce80.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnBoundedFactory;.<init>:()V` @kind direct;
  #L42ce86.  `@@io.reactivex.internal.operators.observable.ObservableReplay.DEFAULT_UNBOUNDED_FACTORY` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` := v0 @kind object;
  #L42ce8a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L42ce9c.  call `<init>`(v0) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L42cea2.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.onSubscribe` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L42cea6.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.source` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L42ceaa.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L42ceae.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.bufferFactory` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` := v4 @kind object;
  #L42ceb2.  return @kind void;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;I)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42cd68.  v0:= 2147483647I;
  #L42cd6e.  if v2 != v0 then goto L42cd7c;
  #L42cd72.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L42cd78.  v1:= temp @kind object;
  #L42cd7a.  return v1 @kind object;
  #L42cd7c.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$ReplayBufferSupplier`;
  #L42cd80.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBufferSupplier;.<init>:(I)V` @kind direct;
  #L42cd86.  call temp:= `create`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L42cd8c.  v1:= temp @kind object;
  #L42cd8e.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42cdd8.  v5:= 2147483647I;
  #L42cdde.  v0:= v6 @kind object;
  #L42cde0.  v1:= v7 @kind wide;
  #L42cde2.  v3:= v9 @kind object;
  #L42cde4.  v4:= v10 @kind object;
  #L42cde6.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L42cdec.  v6:= temp @kind object;
  #L42cdee.  return v6 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42ce00.  v6:= new `io.reactivex.internal.operators.observable.ObservableReplay$ScheduledReplaySupplier`;
  #L42ce04.  v0:= v6 @kind object;
  #L42ce06.  v1:= v12;
  #L42ce08.  v2:= v8 @kind wide;
  #L42ce0a.  v4:= v10 @kind object;
  #L42ce0c.  v5:= v11 @kind object;
  #L42ce0e.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ScheduledReplaySupplier;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L42ce14.  call temp:= `create`(v7, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L42ce1a.  v7:= temp @kind object;
  #L42ce1c.  return v7 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42cda0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42cda4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42cdaa.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$ReplaySource`;
  #L42cdae.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplaySource;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;)V` @kind direct;
  #L42cdb4.  v2:= new `io.reactivex.internal.operators.observable.ObservableReplay`;
  #L42cdb8.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;)V` @kind direct;
  #L42cdbe.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L42cdc4.  v3:= temp @kind object;
  #L42cdc6.  return v3 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `createFrom`(`io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42ce30.  v0:= `@@io.reactivex.internal.operators.observable.ObservableReplay.DEFAULT_UNBOUNDED_FACTORY` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` @kind object;
  #L42ce34.  call temp:= `create`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L42ce3a.  v1:= temp @kind object;
  #L42ce3c.  return v1 @kind object;
}
procedure `io.reactivex.Observable` `multicastSelector`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42cd2c.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$MulticastReplay`;
  #L42cd30.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$MulticastReplay;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L42cd36.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L42cd3c.  v1:= temp @kind object;
  #L42cd3e.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `observeOn`(`io.reactivex.observables.ConnectableObservable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.observeOn:(Lio/reactivex/observables/ConnectableObservable;Lio/reactivex/Scheduler;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42ce50.  call temp:= `observeOn`(v1, v2) @signature `Lio/reactivex/observables/ConnectableObservable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @kind virtual;
  #L42ce56.  v2:= temp @kind object;
  #L42ce58.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$Replay`;
  #L42ce5c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Replay;.<init>:(Lio/reactivex/observables/ConnectableObservable;Lio/reactivex/Observable;)V` @kind direct;
  #L42ce62.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L42ce68.  v1:= temp @kind object;
  #L42ce6a.  return v1 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.observable.ObservableReplay` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42cec4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42cec8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42cece.  v0:= temp @kind object;
  #L42ced0.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`) v0 @kind object;
  #L42ced4.  if v0 == 0 then goto L42cee4;
  #L42ced8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.isDisposed:()Z` @kind virtual;
  #L42cede.  v1:= temp;
  #L42cee0.  if v1 == 0 then goto L42cf0e;
  #L42cee4.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.bufferFactory` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` @kind object;
  #L42cee8.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier;.call:()Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;` @kind interface;
  #L42ceee.  v1:= temp @kind object;
  #L42cef0.  v2:= new `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`;
  #L42cef4.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;)V` @kind direct;
  #L42cefa.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42cefe.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42cf04.  v0:= temp;
  #L42cf06.  if v0 != 0 then goto L42cf0c;
  #L42cf0a.  goto L42cec4;
  #L42cf0c.  v0:= v2 @kind object;
  #L42cf0e.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42cf12.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L42cf18.  v1:= temp;
  #L42cf1a.  v2:= 1I;
  #L42cf1c.  v3:= 0I;
  #L42cf1e.  if v1 != 0 then goto L42cf36;
  #L42cf22.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42cf26.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42cf2c.  v1:= temp;
  #L42cf2e.  if v1 == 0 then goto L42cf36;
  #L42cf32.  v1:= 1I;
  #L42cf34.  goto L42cf38;
  #L42cf36.  v1:= 0I;
  #L42cf38.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42cf3e.  if v1 == 0 then goto L42cf4c;
  #L42cf42.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42cf46.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42cf4c.  return @kind void;
  #L42cf4e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42cf50.  if v1 == 0 then goto L42cf5e;
  #L42cf54.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42cf58.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42cf5e.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42cf64.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L42cf6a.  v5:= temp @kind object;
  #L42cf6c.  goto L42cf70;
  #L42cf6e.  throw v5;
  #L42cf70.  goto L42cf6e;
  catch `java.lang.Throwable` @[L42cf38..L42cf3e] goto L42cf4e;
}
procedure `void` `resetIf`(`io.reactivex.internal.operators.observable.ObservableReplay` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42cf90.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42cf94.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`) v3 @kind object;
  #L42cf98.  v1:= 0I;
  #L42cf9a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42cfa0.  return @kind void;
}
procedure `io.reactivex.ObservableSource` `source`(`io.reactivex.internal.operators.observable.ObservableReplay` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.source:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cd50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42cd54.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableReplay` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L42cfb4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay.onSubscribe` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42cfb8.  call `subscribe`(v0, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42cfbe.  return @kind void;
}
