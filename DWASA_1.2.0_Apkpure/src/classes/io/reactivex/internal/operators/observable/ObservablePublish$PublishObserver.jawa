record `io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.current` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.shouldConnect` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.upstream` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42a674.  v0:= 0I;
  #L42a676.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[v0];
  #L42a67a.  `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] := v1 @kind object;
  #L42a67e.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[v0];
  #L42a682.  `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] := v0 @kind object;
  #L42a686.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42a698.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42a69e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42a6a2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42a6a8.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L42a6ac.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42a6b0.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L42a6b4.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42a6ba.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L42a6be.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L42a6c2.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L42a6c6.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42a6cc.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L42a6d0.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v4 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.add:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a5f4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a5f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a5fe.  v0:= temp @kind object;
  #L42a600.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L42a604.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L42a608.  v2:= 0I;
  #L42a60a.  if v0 != v1 then goto L42a610;
  #L42a60e.  return v2;
  #L42a610.  v1:= length @variable v0;
  #L42a612.  v3:= v1 + 1;
  #L42a616.  v3:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[v3];
  #L42a61a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42a620.  v3[v1]:= v5 @kind object;
  #L42a624.  v1:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a628.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a62e.  v0:= temp;
  #L42a630.  if v0 == 0 then goto L42a5f4;
  #L42a634.  v5:= 1I;
  #L42a636.  return v5;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a6e4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a6e8.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L42a6ec.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42a6f2.  v0:= temp @kind object;
  #L42a6f4.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L42a6f8.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L42a6fc.  if v0 == v1 then goto L42a716;
  #L42a700.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a704.  v1:= 0I;
  #L42a706.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a70c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a710.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42a716.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a648.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a64c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a652.  v0:= temp @kind object;
  #L42a654.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L42a658.  if v0 != v1 then goto L42a660;
  #L42a65c.  v0:= 1I;
  #L42a65e.  goto L42a662;
  #L42a660.  v0:= 0I;
  #L42a662.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a728.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a72c.  v1:= 0I;
  #L42a72e.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a734.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a738.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L42a73c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42a742.  v0:= temp @kind object;
  #L42a744.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L42a748.  v1:= length @variable v0;
  #L42a74a.  v2:= 0I;
  #L42a74c.  if v2 >= v1 then goto L42a764;
  #L42a750.  v3:= v0[v2] @kind object;
  #L42a754.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @type ^`io.reactivex.Observer` @kind object;
  #L42a758.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42a75e.  v2:= v2 + 1;
  #L42a762.  goto L42a74c;
  #L42a764.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a778.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a77c.  v1:= 0I;
  #L42a77e.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a784.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a788.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L42a78c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42a792.  v0:= temp @kind object;
  #L42a794.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L42a798.  v1:= length @variable v0;
  #L42a79a.  if v1 == 0 then goto L42a7ba;
  #L42a79e.  v1:= length @variable v0;
  #L42a7a0.  v2:= 0I;
  #L42a7a2.  if v2 >= v1 then goto L42a7c0;
  #L42a7a6.  v3:= v0[v2] @kind object;
  #L42a7aa.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @type ^`io.reactivex.Observer` @kind object;
  #L42a7ae.  call `onError`(v3, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a7b4.  v2:= v2 + 1;
  #L42a7b8.  goto L42a7a2;
  #L42a7ba.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a7c0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a7d4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a7d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a7de.  v0:= temp @kind object;
  #L42a7e0.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L42a7e4.  v1:= length @variable v0;
  #L42a7e6.  v2:= 0I;
  #L42a7e8.  if v2 >= v1 then goto L42a800;
  #L42a7ec.  v3:= v0[v2] @kind object;
  #L42a7f0.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @type ^`io.reactivex.Observer` @kind object;
  #L42a7f4.  call `onNext`(v3, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42a7fa.  v2:= v2 + 1;
  #L42a7fe.  goto L42a7e8;
  #L42a800.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a814.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a818.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42a81e.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v6 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.remove:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a830.  v0:= v6.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a834.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a83a.  v0:= temp @kind object;
  #L42a83c.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L42a840.  v1:= length @variable v0;
  #L42a842.  if v1 != 0 then goto L42a848;
  #L42a846.  return @kind void;
  #L42a848.  v2:= -1I;
  #L42a84a.  v3:= 0I;
  #L42a84c.  v4:= 0I;
  #L42a84e.  if v4 >= v1 then goto L42a86c;
  #L42a852.  v5:= v0[v4] @kind object;
  #L42a856.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42a85c.  v5:= temp;
  #L42a85e.  if v5 == 0 then goto L42a866;
  #L42a862.  v2:= v4;
  #L42a864.  goto L42a86c;
  #L42a866.  v4:= v4 + 1;
  #L42a86a.  goto L42a84e;
  #L42a86c.  if v2 >= 0 then goto L42a872;
  #L42a870.  return @kind void;
  #L42a872.  v4:= 1I;
  #L42a874.  if v1 != v4 then goto L42a87e;
  #L42a878.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L42a87c.  goto L42a89c;
  #L42a87e.  v5:= v1 + -1;
  #L42a882.  v5:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[v5];
  #L42a886.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42a88c.  v3:= v2 + 1;
  #L42a890.  v1:= v1 - v2 @kind int;
  #L42a892.  v1:= v1 - v4 @kind int;
  #L42a894.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42a89a.  v1:= v5 @kind object;
  #L42a89c.  v2:= v6.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a8a0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a8a6.  v0:= temp;
  #L42a8a8.  if v0 == 0 then goto L42a830;
  #L42a8ac.  return @kind void;
}
