record `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.limit` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ca08.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.<init>:()V` @kind direct;
  #L42ca0e.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L42ca12.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int` := v1;
  #L42ca16.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` := v2 @kind wide;
  #L42ca1a.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L42ca1e.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42c9b8.  v0:= new `io.reactivex.schedulers.Timed`;
  #L42c9bc.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42c9c0.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42c9c4.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L42c9ca.  v1:= temp @kind wide;
  #L42c9cc.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42c9d0.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L42c9d6.  return v0 @kind object;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$Node` `getHead`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/internal/operators/observable/ObservableReplay$Node;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42c91c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42c920.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42c924.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L42c92a.  v0:= temp @kind wide;
  #L42c92c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L42c930.  v0:= v0 - v2 @kind long;
  #L42c932.  call temp:= `get`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c938.  v2:= temp @kind object;
  #L42c93a.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v2 @kind object;
  #L42c93e.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c944.  v3:= temp @kind object;
  #L42c946.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L42c94a.  v7:= v3 @kind object;
  #L42c94c.  v3:= v2 @kind object;
  #L42c94e.  v2:= v7 @kind object;
  #L42c950.  if v2 != 0 then goto L42c956;
  #L42c954.  goto L42c9a6;
  #L42c956.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42c95a.  v4:= (`io.reactivex.schedulers.Timed`) v4 @kind object;
  #L42c95e.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L42c964.  v5:= temp @kind object;
  #L42c966.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L42c96c.  v5:= temp;
  #L42c96e.  if v5 != 0 then goto L42c9a6;
  #L42c972.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L42c978.  v5:= temp @kind object;
  #L42c97a.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L42c980.  v5:= temp;
  #L42c982.  if v5 == 0 then goto L42c988;
  #L42c986.  goto L42c9a6;
  #L42c988.  call temp:= `time`(v4) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L42c98e.  v4:= temp @kind wide;
  #L42c990.  v6:= lcmp(v4, v0);
  #L42c994.  if v6 > 0 then goto L42c9a6;
  #L42c998.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c99e.  v3:= temp @kind object;
  #L42c9a0.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L42c9a4.  goto L42c94a;
  #L42c9a6.  return v3 @kind object;
}
procedure `java.lang.Object` `leaveTransform`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L42c9e8.  v1:= (`io.reactivex.schedulers.Timed`) v1 @kind object;
  #L42c9ec.  call temp:= `value`(v1) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L42c9f2.  v1:= temp @kind object;
  #L42c9f4.  return v1 @kind object;
}
procedure `void` `truncate`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42ca30.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42ca34.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42ca38.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L42ca3e.  v0:= temp @kind wide;
  #L42ca40.  v2:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L42ca44.  v0:= v0 - v2 @kind long;
  #L42ca46.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ca4c.  v2:= temp @kind object;
  #L42ca4e.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v2 @kind object;
  #L42ca52.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ca58.  v3:= temp @kind object;
  #L42ca5a.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L42ca5e.  v4:= 0I;
  #L42ca60.  v8:= v3 @kind object;
  #L42ca62.  v3:= v2 @kind object;
  #L42ca64.  v2:= v8 @kind object;
  #L42ca66.  if v2 == 0 then goto L42caca;
  #L42ca6a.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L42ca6e.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int`;
  #L42ca72.  if v5 <= v6 then goto L42ca94;
  #L42ca76.  v4:= v4 + 1;
  #L42ca7a.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L42ca7e.  v3:= v3 + -1;
  #L42ca82.  v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L42ca86.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ca8c.  v3:= temp @kind object;
  #L42ca8e.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L42ca92.  goto L42ca60;
  #L42ca94.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42ca98.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L42ca9c.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L42caa2.  v5:= temp @kind wide;
  #L42caa4.  v7:= lcmp(v5, v0);
  #L42caa8.  if v7 > 0 then goto L42caca;
  #L42caac.  v4:= v4 + 1;
  #L42cab0.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L42cab4.  v3:= v3 + -1;
  #L42cab8.  v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L42cabc.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42cac2.  v3:= temp @kind object;
  #L42cac4.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L42cac8.  goto L42ca60;
  #L42caca.  if v4 == 0 then goto L42cad4;
  #L42cace.  call `setFirst`(v9, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L42cad4.  return @kind void;
}
procedure `void` `truncateFinal`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L42cae8.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42caec.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42caf0.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L42caf6.  v0:= temp @kind wide;
  #L42caf8.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L42cafc.  v0:= v0 - v2 @kind long;
  #L42cafe.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L42cb04.  v2:= temp @kind object;
  #L42cb06.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v2 @kind object;
  #L42cb0a.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42cb10.  v3:= temp @kind object;
  #L42cb12.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L42cb16.  v4:= 0I;
  #L42cb18.  v9:= v3 @kind object;
  #L42cb1a.  v3:= v2 @kind object;
  #L42cb1c.  v2:= v9 @kind object;
  #L42cb1e.  if v2 == 0 then goto L42cb60;
  #L42cb22.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L42cb26.  v6:= 1I;
  #L42cb28.  if v5 <= v6 then goto L42cb60;
  #L42cb2c.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L42cb30.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L42cb34.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L42cb3a.  v7:= temp @kind wide;
  #L42cb3c.  v5:= lcmp(v7, v0);
  #L42cb40.  if v5 > 0 then goto L42cb60;
  #L42cb44.  v4:= v4 + 1;
  #L42cb48.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L42cb4c.  v3:= v3 - v6 @kind int;
  #L42cb4e.  v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L42cb52.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L42cb58.  v3:= temp @kind object;
  #L42cb5a.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L42cb5e.  goto L42cb18;
  #L42cb60.  if v4 == 0 then goto L42cb6a;
  #L42cb64.  call `setFirst`(v10, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L42cb6a.  return @kind void;
}
