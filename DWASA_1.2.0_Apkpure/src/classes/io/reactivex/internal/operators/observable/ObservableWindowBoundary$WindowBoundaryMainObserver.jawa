record `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.capacityHint` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @AccessFlag FINAL;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.NEXT_WINDOW` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L433210.  v0:= new `java.lang.Object`;
  #L433214.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43321a.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` := v0 @kind object;
  #L43321e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.<init>:(Lio/reactivex/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L433230.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L433236.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43323a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.capacityHint` @type ^`int` := v2;
  #L43323e.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver`;
  #L433242.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;)V` @kind direct;
  #L433248.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` := v1 @kind object;
  #L43324c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L433250.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L433256.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43325a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43325e.  v2:= 1I;
  #L433260.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L433266.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L43326a.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L43326e.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L433274.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L433278.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L43327c.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L433282.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L433286.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43328a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L433290.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L433294.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4332a8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4332ac.  v1:= 0I;
  #L4332ae.  v2:= 1I;
  #L4332b0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4332b6.  v0:= temp;
  #L4332b8.  if v0 == 0 then goto L4332e0;
  #L4332bc.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` @kind object;
  #L4332c0.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryInnerObserver;.dispose:()V` @kind virtual;
  #L4332c6.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4332ca.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4332d0.  v0:= temp;
  #L4332d2.  if v0 != 0 then goto L4332e0;
  #L4332d6.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4332da.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4332e0.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4332f4.  call temp:= `getAndIncrement`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.getAndIncrement:()I` @kind virtual;
  #L4332fa.  v0:= temp;
  #L4332fc.  if v0 == 0 then goto L433302;
  #L433300.  return @kind void;
  #L433302.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L433306.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L43330a.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43330e.  v3:= 1I;
  #L433310.  v4:= 1I;
  #L433312.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L433316.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43331c.  v5:= temp;
  #L43331e.  v6:= 0I;
  #L433320.  if v5 != 0 then goto L433330;
  #L433324.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L43332a.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L43332e.  return @kind void;
  #L433330.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L433334.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` @kind boolean;
  #L433338.  if v7 == 0 then goto L43336c;
  #L43333c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L433342.  v8:= temp @kind object;
  #L433344.  if v8 == 0 then goto L43336c;
  #L433348.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L43334e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L433354.  v1:= temp @kind object;
  #L433356.  if v5 == 0 then goto L433364;
  #L43335a.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L43335e.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L433364.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43336a.  return @kind void;
  #L43336c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L433372.  v8:= temp @kind object;
  #L433374.  if v8 != 0 then goto L43337c;
  #L433378.  v9:= 1I;
  #L43337a.  goto L43337e;
  #L43337c.  v9:= 0I;
  #L43337e.  if v7 == 0 then goto L4333be;
  #L433382.  if v9 == 0 then goto L4333be;
  #L433386.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43338c.  v1:= temp @kind object;
  #L43338e.  if v1 != 0 then goto L4333a8;
  #L433392.  if v5 == 0 then goto L4333a0;
  #L433396.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L43339a.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4333a0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4333a6.  goto L4333bc;
  #L4333a8.  if v5 == 0 then goto L4333b6;
  #L4333ac.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L4333b0.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4333b6.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4333bc.  return @kind void;
  #L4333be.  if v9 == 0 then goto L4333d2;
  #L4333c2.  v4:= -v4 @kind int;
  #L4333c4.  call temp:= `addAndGet`(v10, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.addAndGet:(I)I` @kind virtual;
  #L4333ca.  v4:= temp;
  #L4333cc.  if v4 != 0 then goto L433312;
  #L4333d0.  return @kind void;
  #L4333d2.  v7:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L4333d6.  if v8 == v7 then goto L4333e2;
  #L4333da.  call `onNext`(v5, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4333e0.  goto L433312;
  #L4333e2.  if v5 == 0 then goto L4333f0;
  #L4333e6.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L4333ea.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4333f0.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4333f4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4333fa.  v5:= temp;
  #L4333fc.  if v5 != 0 then goto L433312;
  #L433400.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.capacityHint` @type ^`int`;
  #L433404.  call temp:= `create`(v5, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L43340a.  v5:= temp @kind object;
  #L43340c.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v5 @kind object;
  #L433410.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L433414.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43341a.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L433420.  goto L433312;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L433434.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433438.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43343e.  v0:= 1I;
  #L433440.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433444.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L43344a.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L43345c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433460.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L433466.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43346a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L433470.  v0:= temp;
  #L433472.  if v0 == 0 then goto L433484;
  #L433476.  v2:= 1I;
  #L433478.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L43347c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L433482.  goto L43348a;
  #L433484.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43348a.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43349c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L4334a0.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L4334a4.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4334aa.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L4334b0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4331f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4331f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4331fa.  v0:= temp;
  #L4331fc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4334c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` @kind object;
  #L4334c8.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryInnerObserver;.dispose:()V` @kind virtual;
  #L4334ce.  v0:= 1I;
  #L4334d0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4334d4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L4334da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4334ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` @kind object;
  #L4334f0.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryInnerObserver;.dispose:()V` @kind virtual;
  #L4334f6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4334fa.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L433500.  v0:= temp;
  #L433502.  if v0 == 0 then goto L433514;
  #L433506.  v2:= 1I;
  #L433508.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L43350c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L433512.  goto L43351a;
  #L433514.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43351a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43352c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L433530.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L433536.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L43353c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433550.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433554.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43355a.  v2:= temp;
  #L43355c.  if v2 == 0 then goto L433566;
  #L433560.  call `innerNext`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerNext:()V` @kind virtual;
  #L433566.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433578.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43357c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L433582.  v0:= temp;
  #L433584.  if v0 != 0 then goto L433592;
  #L433588.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43358c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L433592.  return @kind void;
}
