record `io.reactivex.internal.operators.observable.ObservableSkip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableSkip.n` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkip` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip;.<init>:(Lio/reactivex/ObservableSource;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42f958.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42f95e.  v0.`io.reactivex.internal.operators.observable.ObservableSkip.n` @type ^`long` := v2 @kind wide;
  #L42f962.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSkip` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42f974.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSkip.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42f978.  v1:= new `io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver`;
  #L42f97c.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSkip.n` @type ^`long` @kind wide;
  #L42f980.  call `<init>`(v1, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$SkipObserver;.<init>:(Lio/reactivex/Observer;J)V` @kind direct;
  #L42f986.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42f98c.  return @kind void;
}
