record `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42fc60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42fc66.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` := v1 @kind object;
  #L42fc6a.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @type ^`long` := v2 @kind wide;
  #L42fc6e.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.bufferSize` @type ^`int` := v4;
  #L42fc72.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L42fc84.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42fc8a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42fc9c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @type ^`long` @kind wide;
  #L42fca0.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L42fca4.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` @kind wide;
  #L42fca8.  v4:= lcmp(v0, v2);
  #L42fcac.  if v4 != 0 then goto L42fcc0;
  #L42fcb0.  v0:= 1I;
  #L42fcb2.  v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42fcb6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L42fcba.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L42fcc0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fcd4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L42fcd8.  call `innerError`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;Ljava/lang/Throwable;)V` @kind virtual;
  #L42fcde.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42fcf0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @type ^`long` @kind wide;
  #L42fcf4.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L42fcf8.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` @kind wide;
  #L42fcfc.  v4:= lcmp(v0, v2);
  #L42fd00.  if v4 != 0 then goto L42fd1c;
  #L42fd04.  if v6 == 0 then goto L42fd12;
  #L42fd08.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42fd0c.  call temp:= `offer`(v0, v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42fd12.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L42fd16.  call `drain`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L42fd1c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fd30.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42fd36.  v0:= temp;
  #L42fd38.  if v0 == 0 then goto L42fd8a;
  #L42fd3c.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L42fd40.  if v0 == 0 then goto L42fd78;
  #L42fd44.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L42fd48.  v0:= 7I;
  #L42fd4a.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.requestFusion:(I)I` @kind interface;
  #L42fd50.  v0:= temp;
  #L42fd52.  v1:= 1I;
  #L42fd54.  if v0 != v1 then goto L42fd6c;
  #L42fd58.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L42fd5c.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L42fd60.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L42fd64.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L42fd6a.  return @kind void;
  #L42fd6c.  v1:= 2I;
  #L42fd6e.  if v0 != v1 then goto L42fd78;
  #L42fd72.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L42fd76.  return @kind void;
  #L42fd78.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L42fd7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.bufferSize` @type ^`int`;
  #L42fd80.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L42fd86.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L42fd8a.  return @kind void;
}
