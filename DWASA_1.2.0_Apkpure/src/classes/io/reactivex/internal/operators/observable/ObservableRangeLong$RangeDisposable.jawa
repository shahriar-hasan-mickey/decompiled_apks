record `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.fused` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.<init>:(Lio/reactivex/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42af20.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L42af26.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42af2a.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` := v2 @kind wide;
  #L42af2e.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` := v4 @kind wide;
  #L42af32.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42af44.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` @kind wide;
  #L42af48.  v2.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` := v0 @kind wide;
  #L42af4c.  v0:= 1I;
  #L42af4e.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.lazySet:(I)V` @kind virtual;
  #L42af54.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42af68.  v0:= 1I;
  #L42af6a.  call `set`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.set:(I)V` @kind virtual;
  #L42af70.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ae54.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.get:()I` @kind virtual;
  #L42ae5a.  v0:= temp;
  #L42ae5c.  if v0 == 0 then goto L42ae64;
  #L42ae60.  v0:= 1I;
  #L42ae62.  goto L42ae66;
  #L42ae64.  v0:= 0I;
  #L42ae66.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42ae78.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` @kind wide;
  #L42ae7c.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` @kind wide;
  #L42ae80.  v4:= lcmp(v0, v2);
  #L42ae84.  if v4 != 0 then goto L42ae8c;
  #L42ae88.  v0:= 1I;
  #L42ae8a.  goto L42ae8e;
  #L42ae8c.  v0:= 0I;
  #L42ae8e.  return v0;
}
procedure `java.lang.Long` `poll`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.poll:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42aec4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` @kind wide;
  #L42aec8.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` @kind wide;
  #L42aecc.  v4:= lcmp(v0, v2);
  #L42aed0.  if v4 == 0 then goto L42aee8;
  #L42aed4.  v2:= 1L;
  #L42aed8.  v2:= v2 + v0 @kind long;
  #L42aeda.  v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` := v2 @kind wide;
  #L42aede.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42aee4.  v0:= temp @kind object;
  #L42aee6.  return v0 @kind object;
  #L42aee8.  v0:= 1I;
  #L42aeea.  call `lazySet`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.lazySet:(I)V` @kind virtual;
  #L42aef0.  v0:= 0I;
  #L42aef2.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L42af04.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.poll:()Ljava/lang/Long;` @kind virtual;
  #L42af0a.  v0:= temp @kind object;
  #L42af0c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aea0.  v0:= 1I;
  #L42aea2.  v2:= v2 ^& v0 @kind int;
  #L42aea4.  if v2 == 0 then goto L42aeae;
  #L42aea8.  v1.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.fused` @type ^`boolean` := v0 @kind boolean;
  #L42aeac.  return v0;
  #L42aeae.  v2:= 0I;
  #L42aeb0.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42af84.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.fused` @type ^`boolean` @kind boolean;
  #L42af88.  if v0 == 0 then goto L42af8e;
  #L42af8c.  return @kind void;
  #L42af8e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42af92.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` @kind wide;
  #L42af96.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` @kind wide;
  #L42af9a.  v5:= lcmp(v3, v1);
  #L42af9e.  if v5 == 0 then goto L42afc4;
  #L42afa2.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.get:()I` @kind virtual;
  #L42afa8.  v5:= temp;
  #L42afaa.  if v5 != 0 then goto L42afc4;
  #L42afae.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42afb4.  v5:= temp @kind object;
  #L42afb6.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42afbc.  v5:= 1L;
  #L42afc0.  v3:= v3 + v5 @kind long;
  #L42afc2.  goto L42af9a;
  #L42afc4.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.get:()I` @kind virtual;
  #L42afca.  v1:= temp;
  #L42afcc.  if v1 != 0 then goto L42afde;
  #L42afd0.  v1:= 1I;
  #L42afd2.  call `lazySet`(v7, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.lazySet:(I)V` @kind virtual;
  #L42afd8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42afde.  return @kind void;
}
