record `io.reactivex.internal.operators.observable.ObservableRetryPredicate` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableRetryPredicate.count` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableRetryPredicate.predicate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate;.<init>:(Lio/reactivex/Observable;JLio/reactivex/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d2ec.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42d2f2.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate.predicate` @type ^`io.reactivex.functions.Predicate` := v4 @kind object;
  #L42d2f6.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate.count` @type ^`long` := v2 @kind wide;
  #L42d2fa.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate` v8 @kind this, `io.reactivex.Observer` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42d30c.  v5:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L42d310.  call `<init>`(v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L42d316.  call `onSubscribe`(v9, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42d31c.  v7:= new `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver`;
  #L42d320.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableRetryPredicate.count` @type ^`long` @kind wide;
  #L42d324.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableRetryPredicate.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L42d328.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableRetryPredicate.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42d32c.  v0:= v7 @kind object;
  #L42d32e.  v1:= v9 @kind object;
  #L42d330.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.<init>:(Lio/reactivex/Observer;JLio/reactivex/functions/Predicate;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42d336.  call `subscribeNext`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.subscribeNext:()V` @kind virtual;
  #L42d33c.  return @kind void;
}
