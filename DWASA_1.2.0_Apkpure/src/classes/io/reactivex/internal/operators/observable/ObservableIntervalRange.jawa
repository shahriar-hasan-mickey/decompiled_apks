record `io.reactivex.internal.operators.observable.ObservableIntervalRange` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange.end` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange.initialDelay` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange.period` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableIntervalRange.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange.start` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableIntervalRange.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableIntervalRange` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange;.<init>:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4281b0.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L4281b6.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.initialDelay` @type ^`long` := v5 @kind wide;
  #L4281ba.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.period` @type ^`long` := v7 @kind wide;
  #L4281be.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.unit` @type ^`java.util.concurrent.TimeUnit` := v9 @kind object;
  #L4281c2.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.scheduler` @type ^`io.reactivex.Scheduler` := v10 @kind object;
  #L4281c6.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.start` @type ^`long` := v1 @kind wide;
  #L4281ca.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.end` @type ^`long` := v3 @kind wide;
  #L4281ce.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableIntervalRange` v8 @kind this, `io.reactivex.Observer` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4281e0.  v7:= new `io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver`;
  #L4281e4.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.start` @type ^`long` @kind wide;
  #L4281e8.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.end` @type ^`long` @kind wide;
  #L4281ec.  v0:= v7 @kind object;
  #L4281ee.  v1:= v9 @kind object;
  #L4281f0.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.<init>:(Lio/reactivex/Observer;JJ)V` @kind direct;
  #L4281f6.  call `onSubscribe`(v9, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4281fc.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L428200.  v9:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L428204.  if v9 == 0 then goto L42822c;
  #L428208.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L42820e.  v0:= temp @kind object;
  #L428210.  call `setResource`(v7, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.setResource:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L428216.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.initialDelay` @type ^`long` @kind wide;
  #L42821a.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.period` @type ^`long` @kind wide;
  #L42821e.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L428222.  v1:= v7 @kind object;
  #L428224.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42822a.  goto L428248;
  #L42822c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.initialDelay` @type ^`long` @kind wide;
  #L428230.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.period` @type ^`long` @kind wide;
  #L428234.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L428238.  v1:= v7 @kind object;
  #L42823a.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L428240.  v9:= temp @kind object;
  #L428242.  call `setResource`(v7, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.setResource:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L428248.  return @kind void;
}
