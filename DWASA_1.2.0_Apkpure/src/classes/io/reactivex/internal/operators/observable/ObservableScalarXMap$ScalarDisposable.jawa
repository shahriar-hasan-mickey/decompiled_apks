record `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.QueueDisposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @AccessFlag FINAL;
}
global `int` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.FUSED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.ON_COMPLETE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.ON_NEXT` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.START` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42de70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42de76.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42de7a.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` := v2 @kind object;
  #L42de7e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42de90.  v0:= 3I;
  #L42de92.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L42de98.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42deac.  v0:= 3I;
  #L42deae.  call `set`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.set:(I)V` @kind virtual;
  #L42deb4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42dd90.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.get:()I` @kind virtual;
  #L42dd96.  v0:= temp;
  #L42dd98.  v1:= 3I;
  #L42dd9a.  if v0 != v1 then goto L42dda2;
  #L42dd9e.  v0:= 1I;
  #L42dda0.  goto L42dda4;
  #L42dda2.  v0:= 0I;
  #L42dda4.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ddb8.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.get:()I` @kind virtual;
  #L42ddbe.  v0:= temp;
  #L42ddc0.  v1:= 1I;
  #L42ddc2.  if v0 == v1 then goto L42ddc8;
  #L42ddc6.  goto L42ddca;
  #L42ddc8.  v1:= 0I;
  #L42ddca.  return v1;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dddc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L42dde0.  v0:= "Should not be called!" @kind object;
  #L42dde4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ddea.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L42ddfc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L42de00.  v2:= "Should not be called!" @kind object;
  #L42de04.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42de0a.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42de40.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.get:()I` @kind virtual;
  #L42de46.  v0:= temp;
  #L42de48.  v1:= 1I;
  #L42de4a.  if v0 != v1 then goto L42de5c;
  #L42de4e.  v0:= 3I;
  #L42de50.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L42de56.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L42de5a.  return v0 @kind object;
  #L42de5c.  v0:= 0I;
  #L42de5e.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42de1c.  v0:= 1I;
  #L42de1e.  v2:= v2 ^& v0 @kind int;
  #L42de20.  if v2 == 0 then goto L42de2c;
  #L42de24.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L42de2a.  return v0;
  #L42de2c.  v2:= 0I;
  #L42de2e.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42dec8.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.get:()I` @kind virtual;
  #L42dece.  v0:= temp;
  #L42ded0.  if v0 != 0 then goto L42df10;
  #L42ded4.  v0:= 0I;
  #L42ded6.  v1:= 2I;
  #L42ded8.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.compareAndSet:(II)Z` @kind virtual;
  #L42dede.  v0:= temp;
  #L42dee0.  if v0 == 0 then goto L42df10;
  #L42dee4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`io.reactivex.Observer` @kind object;
  #L42dee8.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L42deec.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42def2.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.get:()I` @kind virtual;
  #L42def8.  v0:= temp;
  #L42defa.  if v0 != v1 then goto L42df10;
  #L42defe.  v0:= 3I;
  #L42df00.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.lazySet:(I)V` @kind virtual;
  #L42df06.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`io.reactivex.Observer` @kind object;
  #L42df0a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42df10.  return @kind void;
}
