record `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.combiner` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.values` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L435324.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43532a.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L43532e.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.combiner` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L435332.  v2:= new `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[v4];
  #L435336.  v3:= 0I;
  #L435338.  if v3 >= v4 then goto L435350;
  #L43533c.  v0:= new `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`;
  #L435340.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;I)V` @kind direct;
  #L435346.  v2[v3]:= v0 @kind object;
  #L43534a.  v3:= v3 + 1;
  #L43534e.  goto L435338;
  #L435350.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] := v2 @kind object;
  #L435354.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L435358.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L43535e.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L435362.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L435366.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43536c.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L435370.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L435374.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L43537a.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L43537e.  return @kind void;
}
procedure `void` `cancelAllBut`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L435390.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] @kind object;
  #L435394.  v1:= 0I;
  #L435396.  v2:= length @variable v0;
  #L435398.  if v1 >= v2 then goto L4353b0;
  #L43539c.  if v1 == v4 then goto L4353aa;
  #L4353a0.  v2:= v0[v1] @kind object;
  #L4353a4.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestInnerObserver;.dispose:()V` @kind virtual;
  #L4353aa.  v1:= v1 + 1;
  #L4353ae.  goto L435396;
  #L4353b0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4353c4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4353c8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4353ce.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] @kind object;
  #L4353d2.  v1:= length @variable v0;
  #L4353d4.  v2:= 0I;
  #L4353d6.  if v2 >= v1 then goto L4353ea;
  #L4353da.  v3:= v0[v2] @kind object;
  #L4353de.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestInnerObserver;.dispose:()V` @kind virtual;
  #L4353e4.  v2:= v2 + 1;
  #L4353e8.  goto L4353d6;
  #L4353ea.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.innerComplete:(IZ)V` @AccessFlag  {
    temp;

  #L4353fc.  if v2 != 0 then goto L43541a;
  #L435400.  v2:= 1I;
  #L435402.  v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L435406.  call `cancelAllBut`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @kind virtual;
  #L43540c.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435410.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435414.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L43541a.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.innerError:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L43542c.  v0:= 1I;
  #L43542e.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L435432.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435436.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43543c.  call `cancelAllBut`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @kind virtual;
  #L435442.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435446.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43544a.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L435450.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.innerNext:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L435464.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L435468.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L43546e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4352f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4352fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435302.  v0:= temp @kind object;
  #L435304.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L435308.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43530e.  v0:= temp;
  #L435310.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L435480.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` @kind boolean;
  #L435484.  if v0 != 0 then goto L4354a4;
  #L435488.  v0:= 1I;
  #L43548a.  v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43548e.  v0:= -1I;
  #L435490.  call `cancelAllBut`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @kind virtual;
  #L435496.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43549a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43549e.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4354a4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4354b8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` @kind boolean;
  #L4354bc.  if v0 == 0 then goto L4354c8;
  #L4354c0.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4354c6.  return @kind void;
  #L4354c8.  v0:= 1I;
  #L4354ca.  v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4354ce.  v0:= -1I;
  #L4354d0.  call `cancelAllBut`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @kind virtual;
  #L4354d6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4354da.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4354de.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4354e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4354f8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` @kind boolean;
  #L4354fc.  if v0 == 0 then goto L435502;
  #L435500.  return @kind void;
  #L435502.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L435506.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L43550c.  v1:= temp;
  #L43550e.  v2:= v1 + 1;
  #L435512.  v2:= new `java.lang.Object`[v2];
  #L435516.  v3:= 0I;
  #L435518.  v2[v3]:= v5 @kind object;
  #L43551c.  if v3 >= v1 then goto L435538;
  #L435520.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L435526.  v5:= temp @kind object;
  #L435528.  if v5 != 0 then goto L43552e;
  #L43552c.  return @kind void;
  #L43552e.  v3:= v3 + 1;
  #L435532.  v2[v3]:= v5 @kind object;
  #L435536.  goto L43551c;
  #L435538.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.combiner` @type ^`io.reactivex.functions.Function` @kind object;
  #L43553c.  call temp:= `apply`(v5, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L435542.  v5:= temp @kind object;
  #L435544.  v0:= "combiner returned a null value" @kind object;
  #L435548.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43554e.  v5:= temp @kind object;
  #L435550.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435554.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435558.  call `onNext`(v0, v5, v4, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L43555e.  return @kind void;
  #L435560.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435562.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435568.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.dispose:()V` @kind virtual;
  #L43556e.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L435574.  return @kind void;
  catch `java.lang.Throwable` @[L435538..L435550] goto L435560;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435594.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435598.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43559e.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v5 @kind this, `io.reactivex.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.subscribe:([Lio/reactivex/ObservableSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4355b0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] @kind object;
  #L4355b4.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4355b8.  v2:= 0I;
  #L4355ba.  if v2 >= v7 then goto L4355f4;
  #L4355be.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4355c4.  v3:= temp @kind object;
  #L4355c6.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L4355ca.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4355d0.  v3:= temp;
  #L4355d2.  if v3 != 0 then goto L4355f4;
  #L4355d6.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` @kind boolean;
  #L4355da.  if v3 == 0 then goto L4355e0;
  #L4355de.  goto L4355f4;
  #L4355e0.  v3:= v6[v2] @kind object;
  #L4355e4.  v4:= v0[v2] @kind object;
  #L4355e8.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4355ee.  v2:= v2 + 1;
  #L4355f2.  goto L4355ba;
  #L4355f4.  return @kind void;
}
