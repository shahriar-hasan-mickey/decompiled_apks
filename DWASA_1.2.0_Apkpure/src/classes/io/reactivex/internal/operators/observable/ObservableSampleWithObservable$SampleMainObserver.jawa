record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.sampler` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42db04.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42db0a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42db0e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42db14.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L42db18.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L42db1c.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.sampler` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L42db20.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42db34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42db38.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42db3e.  call `completeOther`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.completeOther:()V` @kind virtual;
  #L42db44.  return @kind void;
}
procedure `void` `completeMain`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.completeMain:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `completeOther`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.completeOther:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42db58.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42db5c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42db62.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42db66.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42db6c.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42db80.  v0:= 0I;
  #L42db82.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42db88.  v0:= temp @kind object;
  #L42db8a.  if v0 == 0 then goto L42db98;
  #L42db8e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42db92.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42db98.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dbac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42dbb0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42dbb6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42dbba.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42dbc0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42dab8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42dabc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42dac2.  v0:= temp @kind object;
  #L42dac4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42dac8.  if v0 != v1 then goto L42dad0;
  #L42dacc.  v0:= 1I;
  #L42dace.  goto L42dad2;
  #L42dad0.  v0:= 0I;
  #L42dad2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dbd4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42dbd8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42dbde.  call `completeMain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.completeMain:()V` @kind virtual;
  #L42dbe4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dbf8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42dbfc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42dc02.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42dc06.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42dc0c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42dc20.  call `lazySet`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42dc26.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dc38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42dc3c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42dc42.  v0:= temp;
  #L42dc44.  if v0 == 0 then goto L42dc7a;
  #L42dc48.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42dc4c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42dc50.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42dc56.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42dc5a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42dc60.  v2:= temp @kind object;
  #L42dc62.  if v2 != 0 then goto L42dc7a;
  #L42dc66.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.sampler` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42dc6a.  v0:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver`;
  #L42dc6e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SamplerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;)V` @kind direct;
  #L42dc74.  call `subscribe`(v2, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42dc7a.  return @kind void;
}
procedure `void` `run`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.run:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `setOther`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.setOther:(Lio/reactivex/disposables/Disposable;)Z` @AccessFlag  {
    temp;
    v0;

  #L42dae4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42dae8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42daee.  v2:= temp;
  #L42daf0.  return v2;
}
