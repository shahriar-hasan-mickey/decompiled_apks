record `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.child` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.currentBuffer` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.currentIndexInBuffer` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.index` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableCache$CacheState` `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.state` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableCache$CacheState` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f5b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41f5ba.  v0.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.child` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41f5be.  v0.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` := v2 @kind object;
  #L41f5c2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f5d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L41f5d8.  if v0 != 0 then goto L41f5ec;
  #L41f5dc.  v0:= 1I;
  #L41f5de.  v1.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41f5e2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f5e6.  call `removeChild`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.removeChild:(Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;)V` @kind virtual;
  #L41f5ec.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f59c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L41f5a0.  return v0;
}
procedure `void` `replay`(`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.replay:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41f600.  call temp:= `getAndIncrement`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.getAndIncrement:()I` @kind virtual;
  #L41f606.  v0:= temp;
  #L41f608.  if v0 == 0 then goto L41f60e;
  #L41f60c.  return @kind void;
  #L41f60e.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.child` @type ^`io.reactivex.Observer` @kind object;
  #L41f612.  v1:= 1I;
  #L41f614.  v2:= 1I;
  #L41f616.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L41f61a.  if v3 == 0 then goto L41f620;
  #L41f61e.  return @kind void;
  #L41f620.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f624.  call temp:= `size`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.size:()I` @kind virtual;
  #L41f62a.  v3:= temp;
  #L41f62c.  if v3 == 0 then goto L41f6a6;
  #L41f630.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.currentBuffer` @type ^`java.lang.Object`[] @kind object;
  #L41f634.  if v4 != 0 then goto L41f648;
  #L41f638.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f63c.  call temp:= `head`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.head:()[Ljava/lang/Object;` @kind virtual;
  #L41f642.  v4:= temp @kind object;
  #L41f644.  v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.currentBuffer` @type ^`java.lang.Object`[] := v4 @kind object;
  #L41f648.  v5:= length @variable v4;
  #L41f64a.  v5:= v5 - v1 @kind int;
  #L41f64c.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.index` @type ^`int`;
  #L41f650.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.currentIndexInBuffer` @type ^`int`;
  #L41f654.  if v6 >= v3 then goto L41f690;
  #L41f658.  v8:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L41f65c.  if v8 == 0 then goto L41f662;
  #L41f660.  return @kind void;
  #L41f662.  if v7 != v5 then goto L41f674;
  #L41f666.  v4:= v4[v5] @kind object;
  #L41f66a.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L41f66e.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L41f672.  v7:= 0I;
  #L41f674.  v8:= v4[v7] @kind object;
  #L41f678.  call temp:= `accept`(v8, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L41f67e.  v8:= temp;
  #L41f680.  if v8 == 0 then goto L41f686;
  #L41f684.  return @kind void;
  #L41f686.  v7:= v7 + 1;
  #L41f68a.  v6:= v6 + 1;
  #L41f68e.  goto L41f654;
  #L41f690.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L41f694.  if v3 == 0 then goto L41f69a;
  #L41f698.  return @kind void;
  #L41f69a.  v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.index` @type ^`int` := v6;
  #L41f69e.  v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.currentIndexInBuffer` @type ^`int` := v7;
  #L41f6a2.  v9.`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable.currentBuffer` @type ^`java.lang.Object`[] := v4 @kind object;
  #L41f6a6.  v2:= -v2 @kind int;
  #L41f6a8.  call temp:= `addAndGet`(v9, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.addAndGet:(I)I` @kind virtual;
  #L41f6ae.  v2:= temp;
  #L41f6b0.  if v2 != 0 then goto L41f616;
  #L41f6b4.  return @kind void;
}
