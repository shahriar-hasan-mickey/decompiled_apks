record `io.reactivex.internal.operators.observable.ObservableScan$ScanObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.accumulator` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$ScanObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42e134.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42e13a.  v0.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42e13e.  v0.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.accumulator` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L42e142.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$ScanObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e154.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e158.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42e15e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$ScanObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e114.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e118.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42e11e.  v0:= temp;
  #L42e120.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$ScanObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e170.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.done` @type ^`boolean` @kind boolean;
  #L42e174.  if v0 == 0 then goto L42e17a;
  #L42e178.  return @kind void;
  #L42e17a.  v0:= 1I;
  #L42e17c.  v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42e180.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e184.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42e18a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$ScanObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e19c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.done` @type ^`boolean` @kind boolean;
  #L42e1a0.  if v0 == 0 then goto L42e1ac;
  #L42e1a4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42e1aa.  return @kind void;
  #L42e1ac.  v0:= 1I;
  #L42e1ae.  v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42e1b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e1b6.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e1bc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$ScanObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42e1d0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.done` @type ^`boolean` @kind boolean;
  #L42e1d4.  if v0 == 0 then goto L42e1da;
  #L42e1d8.  return @kind void;
  #L42e1da.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e1de.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.value` @type ^`java.lang.Object` @kind object;
  #L42e1e2.  if v1 != 0 then goto L42e1f2;
  #L42e1e6.  v3.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.value` @type ^`java.lang.Object` := v4 @kind object;
  #L42e1ea.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42e1f0.  goto L42e214;
  #L42e1f2.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.accumulator` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L42e1f6.  call temp:= `apply`(v2, v1, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42e1fc.  v4:= temp @kind object;
  #L42e1fe.  v1:= "The value returned by the accumulator is null" @kind object;
  #L42e202.  call temp:= `requireNonNull`(v4, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42e208.  v4:= temp @kind object;
  #L42e20a.  v3.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.value` @type ^`java.lang.Object` := v4 @kind object;
  #L42e20e.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42e214.  return @kind void;
  #L42e216.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42e218.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42e21e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e222.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42e228.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$ScanObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42e22e.  return @kind void;
  catch `java.lang.Throwable` @[L42e1f2..L42e20a] goto L42e216;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$ScanObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e24c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e250.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42e256.  v0:= temp;
  #L42e258.  if v0 == 0 then goto L42e26a;
  #L42e25c.  v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42e260.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableScan$ScanObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e264.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42e26a.  return @kind void;
}
