record `io.reactivex.internal.operators.observable.ObservableDistinct` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableDistinct.collectionSupplier` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableDistinct.keySelector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDistinct` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L422da0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L422da6.  v0.`io.reactivex.internal.operators.observable.ObservableDistinct.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L422daa.  v0.`io.reactivex.internal.operators.observable.ObservableDistinct.collectionSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L422dae.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableDistinct` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L422dc0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct.collectionSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L422dc4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L422dca.  v0:= temp @kind object;
  #L422dcc.  v1:= "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L422dd0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L422dd6.  v0:= temp @kind object;
  #L422dd8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L422ddc.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L422de0.  v2:= new `io.reactivex.internal.operators.observable.ObservableDistinct$DistinctObserver`;
  #L422de4.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L422de8.  call `<init>`(v2, v5, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$DistinctObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Ljava/util/Collection;)V` @kind direct;
  #L422dee.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L422df4.  return @kind void;
  #L422df6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L422df8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L422dfe.  call `error`(v0, v5) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L422e04.  return @kind void;
  catch `java.lang.Throwable` @[L422dc0..L422ddc] goto L422df6;
}
