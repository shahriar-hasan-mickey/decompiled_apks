record `io.reactivex.internal.operators.observable.ObservableMap$MapObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableMap$MapObserver.mapper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMap$MapObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMap$MapObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L428de8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L428dee.  v0.`io.reactivex.internal.operators.observable.ObservableMap$MapObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L428df2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMap$MapObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMap$MapObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428e04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMap$MapObserver.done` @type ^`boolean` @kind boolean;
  #L428e08.  if v0 == 0 then goto L428e0e;
  #L428e0c.  return @kind void;
  #L428e0e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMap$MapObserver.sourceMode` @type ^`int`;
  #L428e12.  if v0 == 0 then goto L428e24;
  #L428e16.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMap$MapObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L428e1a.  v0:= 0I;
  #L428e1c.  call `onNext`(v2, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L428e22.  return @kind void;
  #L428e24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMap$MapObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L428e28.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428e2e.  v2:= temp @kind object;
  #L428e30.  v0:= "The mapper function returned a null value." @kind object;
  #L428e34.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L428e3a.  v2:= temp @kind object;
  #L428e3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMap$MapObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L428e40.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L428e46.  return @kind void;
  #L428e48.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L428e4a.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMap$MapObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L428e50.  return @kind void;
  catch `java.lang.Throwable` @[L428e24..L428e3c] goto L428e48;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableMap$MapObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMap$MapObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428da8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMap$MapObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L428dac.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.poll:()Ljava/lang/Object;` @kind interface;
  #L428db2.  v0:= temp @kind object;
  #L428db4.  if v0 == 0 then goto L428dd2;
  #L428db8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMap$MapObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L428dbc.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428dc2.  v0:= temp @kind object;
  #L428dc4.  v1:= "The mapper function returned a null value." @kind object;
  #L428dc8.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L428dce.  v0:= temp @kind object;
  #L428dd0.  goto L428dd4;
  #L428dd2.  v0:= 0I;
  #L428dd4.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableMap$MapObserver` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableMap$MapObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L428d8c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMap$MapObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L428d92.  v1:= temp;
  #L428d94.  return v1;
}
