record `io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.subjects.PublishSubject` `io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver.subject` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver.target` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver` v0 @kind this, `io.reactivex.subjects.PublishSubject` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$SourceObserver;.<init>:(Lio/reactivex/subjects/PublishSubject;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42a954.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42a95a.  v0.`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver.subject` @type ^`io.reactivex.subjects.PublishSubject` := v1 @kind object;
  #L42a95e.  v0.`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver.target` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L42a962.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$SourceObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a974.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver.subject` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L42a978.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/PublishSubject;.onComplete:()V` @kind virtual;
  #L42a97e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$SourceObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a990.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver.subject` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L42a994.  call `onError`(v0, v2) @signature `Lio/reactivex/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42a99a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$SourceObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a9ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver.subject` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L42a9b0.  call `onNext`(v0, v2) @signature `Lio/reactivex/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L42a9b6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$SourceObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a9c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver.target` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a9cc.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42a9d2.  return @kind void;
}
