record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41dc28.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41dc2e.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` := v1 @kind object;
  #L41dc32.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.index` @type ^`long` := v2 @kind wide;
  #L41dc36.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L41dc48.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41dc4e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41dc00.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L41dc06.  v0:= temp @kind object;
  #L41dc08.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41dc0c.  if v0 != v1 then goto L41dc14;
  #L41dc10.  v0:= 1I;
  #L41dc12.  goto L41dc16;
  #L41dc14.  v0:= 0I;
  #L41dc16.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41dc60.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L41dc66.  v0:= temp @kind object;
  #L41dc68.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41dc6c.  if v0 == v1 then goto L41dc88;
  #L41dc70.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41dc74.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41dc7a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L41dc7e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.index` @type ^`long` @kind wide;
  #L41dc82.  call `close`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.close:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;J)V` @kind virtual;
  #L41dc88.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41dc9c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L41dca2.  v0:= temp @kind object;
  #L41dca4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41dca8.  if v0 == v1 then goto L41dcc2;
  #L41dcac.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41dcb0.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41dcb6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L41dcba.  call `boundaryError`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.boundaryError:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @kind virtual;
  #L41dcc0.  goto L41dcc8;
  #L41dcc2.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41dcc8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41dcdc.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L41dce2.  v3:= temp @kind object;
  #L41dce4.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L41dce8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41dcec.  if v3 == v0 then goto L41dd0e;
  #L41dcf0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41dcf4.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41dcfa.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41dd00.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L41dd04.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.index` @type ^`long` @kind wide;
  #L41dd08.  call `close`(v3, v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.close:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;J)V` @kind virtual;
  #L41dd0e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L41dd20.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41dd26.  return @kind void;
}
