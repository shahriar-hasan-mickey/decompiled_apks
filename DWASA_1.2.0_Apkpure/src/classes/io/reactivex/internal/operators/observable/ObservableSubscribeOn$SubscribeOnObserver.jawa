record `io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f9c8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42f9ce.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42f9d2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42f9d6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42f9dc.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42f9e0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f9f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42f9f8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f9fe.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42fa04.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f9a0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L42f9a6.  v0:= temp @kind object;
  #L42f9a8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42f9ac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f9b2.  v0:= temp;
  #L42f9b4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fa18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42fa1c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42fa22.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fa34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42fa38.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42fa3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fa50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42fa54.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42fa5a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fa6c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42fa70.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42fa76.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;

  #L42fa88.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42fa8e.  return @kind void;
}
