record `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.disposed` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @AccessFlag VOLATILE;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.OTHER_STATE_CONSUMED_OR_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.OTHER_STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L429980.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L429986.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42998a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42998e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L429994.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L429998.  v1:= new `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver`;
  #L42999c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;)V` @kind direct;
  #L4299a2.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver` := v1 @kind object;
  #L4299a6.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4299aa.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4299b0.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L4299b4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4299c8.  v0:= 1I;
  #L4299ca.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L4299ce.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4299d2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4299d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver` @kind object;
  #L4299dc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4299e2.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L4299e8.  v0:= temp;
  #L4299ea.  if v0 != 0 then goto L4299f8;
  #L4299ee.  v0:= 0I;
  #L4299f0.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4299f4.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v0 @kind object;
  #L4299f8.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L429a0c.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L429a12.  v0:= temp;
  #L429a14.  if v0 != 0 then goto L429a1e;
  #L429a18.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L429a1e.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L429a30.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429a34.  v1:= 1I;
  #L429a36.  v2:= 1I;
  #L429a38.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.disposed` @type ^`boolean` @kind boolean;
  #L429a3c.  v4:= 0I;
  #L429a3e.  if v3 == 0 then goto L429a4c;
  #L429a42.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L429a46.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L429a4a.  return @kind void;
  #L429a4c.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429a50.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L429a56.  v3:= temp @kind object;
  #L429a58.  if v3 == 0 then goto L429a78;
  #L429a5c.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L429a60.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L429a64.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429a68.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L429a6e.  v1:= temp @kind object;
  #L429a70.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429a76.  return @kind void;
  #L429a78.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @type ^`int`;
  #L429a7c.  v5:= 2I;
  #L429a7e.  if v3 != v1 then goto L429a96;
  #L429a82.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` @kind object;
  #L429a86.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L429a8a.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v5;
  #L429a8e.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429a94.  v3:= 2I;
  #L429a96.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L429a9a.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L429a9e.  if v7 == 0 then goto L429aac;
  #L429aa2.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L429aa8.  v7:= temp @kind object;
  #L429aaa.  goto L429aae;
  #L429aac.  v7:= v4 @kind object;
  #L429aae.  if v7 != 0 then goto L429ab6;
  #L429ab2.  v8:= 1I;
  #L429ab4.  goto L429ab8;
  #L429ab6.  v8:= 0I;
  #L429ab8.  if v6 == 0 then goto L429ad0;
  #L429abc.  if v8 == 0 then goto L429ad0;
  #L429ac0.  if v3 != v5 then goto L429ad0;
  #L429ac4.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L429ac8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L429ace.  return @kind void;
  #L429ad0.  if v8 == 0 then goto L429ae4;
  #L429ad4.  v2:= -v2 @kind int;
  #L429ad6.  call temp:= `addAndGet`(v9, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.addAndGet:(I)I` @kind virtual;
  #L429adc.  v2:= temp;
  #L429ade.  if v2 != 0 then goto L429a38;
  #L429ae2.  return @kind void;
  #L429ae4.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429aea.  goto L429a38;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `getOrCreateQueue`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L429950.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L429954.  if v0 != 0 then goto L42996e;
  #L429958.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L42995c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L429962.  v1:= temp;
  #L429964.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L42996a.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L42996e.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429924.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L429928.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42992e.  v0:= temp @kind object;
  #L429930.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L429934.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42993a.  v0:= temp;
  #L42993c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429afc.  v0:= 1I;
  #L429afe.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L429b02.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L429b08.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429b1c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429b20.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L429b26.  v0:= temp;
  #L429b28.  if v0 == 0 then goto L429b3e;
  #L429b2c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L429b30.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L429b36.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L429b3c.  goto L429b44;
  #L429b3e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L429b44.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429b58.  v0:= 0I;
  #L429b5a.  v1:= 1I;
  #L429b5c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.compareAndSet:(II)Z` @kind virtual;
  #L429b62.  v0:= temp;
  #L429b64.  if v0 == 0 then goto L429b80;
  #L429b68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429b6c.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429b72.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.decrementAndGet:()I` @kind virtual;
  #L429b78.  v3:= temp;
  #L429b7a.  if v3 != 0 then goto L429b9c;
  #L429b7e.  return @kind void;
  #L429b80.  call temp:= `getOrCreateQueue`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L429b86.  v0:= temp @kind object;
  #L429b88.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L429b8e.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L429b94.  v3:= temp;
  #L429b96.  if v3 == 0 then goto L429b9c;
  #L429b9a.  return @kind void;
  #L429b9c.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L429ba2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429bb4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L429bb8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L429bbe.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L429bd0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429bd4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L429bda.  v0:= temp;
  #L429bdc.  if v0 == 0 then goto L429bf2;
  #L429be0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L429be4.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L429bea.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L429bf0.  goto L429bf8;
  #L429bf2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L429bf8.  return @kind void;
}
procedure `void` `otherSuccess`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L429c0c.  v0:= 1I;
  #L429c0e.  v1:= 0I;
  #L429c10.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.compareAndSet:(II)Z` @kind virtual;
  #L429c16.  v1:= temp;
  #L429c18.  if v1 == 0 then goto L429c2e;
  #L429c1c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429c20.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429c26.  v3:= 2I;
  #L429c28.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v3;
  #L429c2c.  goto L429c44;
  #L429c2e.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v3 @kind object;
  #L429c32.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v0;
  #L429c36.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L429c3c.  v3:= temp;
  #L429c3e.  if v3 == 0 then goto L429c44;
  #L429c42.  return @kind void;
  #L429c44.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L429c4a.  return @kind void;
}
