record `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L425424.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42542a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42542e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L425432.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L425436.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L42543a.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L425440.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L425444.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L425448.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L42544e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L425452.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L425456.  v2:= 1I;
  #L425458.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L42545e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L425462.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L425466.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42546c.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L425470.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L425484.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L425488.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42548e.  v0:= temp @kind object;
  #L425490.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L425494.  if v0 == 0 then goto L42549e;
  #L425498.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42549e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4254b0.  v0:= 1I;
  #L4254b2.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4254b6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4254ba.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4254c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4254c4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4254ca.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L4254dc.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.getAndIncrement:()I` @kind virtual;
  #L4254e2.  v0:= temp;
  #L4254e4.  if v0 != 0 then goto L4254ee;
  #L4254e8.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drainLoop:()V` @kind virtual;
  #L4254ee.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L425500.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L425504.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L425508.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42550c.  v3:= 1I;
  #L42550e.  v4:= 1I;
  #L425510.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @type ^`boolean` @kind boolean;
  #L425514.  if v5 == 0 then goto L425520;
  #L425518.  call `clear`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.clear:()V` @kind virtual;
  #L42551e.  return @kind void;
  #L425520.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L425524.  if v5 != 0 then goto L425556;
  #L425528.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42552c.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L425532.  v5:= temp @kind object;
  #L425534.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L425538.  if v5 == 0 then goto L425556;
  #L42553c.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L425540.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L425546.  v1:= temp @kind object;
  #L425548.  call `clear`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.clear:()V` @kind virtual;
  #L42554e.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425554.  return @kind void;
  #L425556.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42555c.  v5:= temp;
  #L42555e.  v6:= 0I;
  #L425560.  if v5 != 0 then goto L425568;
  #L425564.  v5:= 1I;
  #L425566.  goto L42556a;
  #L425568.  v5:= 0I;
  #L42556a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L425570.  v7:= temp @kind object;
  #L425572.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L425576.  if v7 == 0 then goto L425584;
  #L42557a.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L425580.  v7:= temp @kind object;
  #L425582.  goto L425586;
  #L425584.  v7:= 0I;
  #L425586.  if v7 != 0 then goto L42558c;
  #L42558a.  v6:= 1I;
  #L42558c.  if v5 == 0 then goto L4255b4;
  #L425590.  if v6 == 0 then goto L4255b4;
  #L425594.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L425598.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42559e.  v1:= temp @kind object;
  #L4255a0.  if v1 == 0 then goto L4255ac;
  #L4255a4.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4255aa.  goto L4255b2;
  #L4255ac.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4255b2.  return @kind void;
  #L4255b4.  if v6 == 0 then goto L4255c8;
  #L4255b8.  v4:= -v4 @kind int;
  #L4255ba.  call temp:= `addAndGet`(v8, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.addAndGet:(I)I` @kind virtual;
  #L4255c0.  v4:= temp;
  #L4255c2.  if v4 != 0 then goto L425510;
  #L4255c6.  return @kind void;
  #L4255c8.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4255ce.  goto L425510;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `getOrCreateQueue`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4253d8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4253dc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4253e2.  v0:= temp @kind object;
  #L4253e4.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4253e8.  if v0 == 0 then goto L4253ee;
  #L4253ec.  return v0 @kind object;
  #L4253ee.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4253f2.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L4253f8.  v1:= temp;
  #L4253fa.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L425400.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L425404.  v2:= 0I;
  #L425406.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42540c.  v1:= temp;
  #L42540e.  if v1 == 0 then goto L4253d8;
  #L425412.  return v0 @kind object;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4255e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4255e4.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4255ea.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4255ee.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4255f4.  v2:= temp;
  #L4255f6.  if v2 == 0 then goto L425628;
  #L4255fa.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L4255fe.  if v2 != 0 then goto L425616;
  #L425602.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L425606.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42560c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L425610.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L425616.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42561a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L425620.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drain:()V` @kind virtual;
  #L425626.  goto L42562e;
  #L425628.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42562e.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.innerSuccess:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L425640.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L425644.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42564a.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.get:()I` @kind virtual;
  #L425650.  v3:= temp;
  #L425652.  if v3 != 0 then goto L4256de;
  #L425656.  v3:= 1I;
  #L425658.  v0:= 0I;
  #L42565a.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.compareAndSet:(II)Z` @kind virtual;
  #L425660.  v1:= temp;
  #L425662.  if v1 == 0 then goto L4256de;
  #L425666.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42566a.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L425670.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L425674.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42567a.  v4:= temp;
  #L42567c.  if v4 != 0 then goto L425682;
  #L425680.  goto L425684;
  #L425682.  v3:= 0I;
  #L425684.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L425688.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42568e.  v4:= temp @kind object;
  #L425690.  v4:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L425694.  if v3 == 0 then goto L4256d0;
  #L425698.  if v4 == 0 then goto L4256a8;
  #L42569c.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4256a2.  v3:= temp;
  #L4256a4.  if v3 == 0 then goto L4256d0;
  #L4256a8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4256ac.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4256b2.  v3:= temp @kind object;
  #L4256b4.  if v3 == 0 then goto L4256c4;
  #L4256b8.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4256bc.  call `onError`(v4, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4256c2.  goto L4256ce;
  #L4256c4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4256c8.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4256ce.  return @kind void;
  #L4256d0.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.decrementAndGet:()I` @kind virtual;
  #L4256d6.  v3:= temp;
  #L4256d8.  if v3 != 0 then goto L425708;
  #L4256dc.  return @kind void;
  #L4256de.  call temp:= `getOrCreateQueue`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4256e4.  v3:= temp @kind object;
  #L4256e6.  @monitorenter v3
  #L4256e8.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4256ee.  @monitorexit v3
  #L4256f0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4256f4.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4256fa.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.getAndIncrement:()I` @kind virtual;
  #L425700.  v3:= temp;
  #L425702.  if v3 == 0 then goto L425708;
  #L425706.  return @kind void;
  #L425708.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drainLoop:()V` @kind virtual;
  #L42570e.  return @kind void;
  #L425710.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L425712.  @monitorexit v3
  #L425714.  throw v4;
  catch `java.lang.Throwable` @[L4256e8..L4256f0] goto L425710;
  catch `java.lang.Throwable` @[L425712..L425714] goto L425710;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4253c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4253c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42573c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L425740.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L425746.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drain:()V` @kind virtual;
  #L42574c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425760.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L425764.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42576a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42576e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L425774.  v0:= temp;
  #L425776.  if v0 == 0 then goto L425794;
  #L42577a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L42577e.  if v2 != 0 then goto L42578c;
  #L425782.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L425786.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42578c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drain:()V` @kind virtual;
  #L425792.  goto L42579a;
  #L425794.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42579a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4257ac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L4257b0.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4257b6.  v3:= temp @kind object;
  #L4257b8.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4257bc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4257c2.  v3:= temp @kind object;
  #L4257c4.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L4257c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4257cc.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4257d2.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver`;
  #L4257d6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;)V` @kind direct;
  #L4257dc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4257e0.  if v1 != 0 then goto L4257fa;
  #L4257e4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4257e8.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4257ee.  v1:= temp;
  #L4257f0.  if v1 == 0 then goto L4257fa;
  #L4257f4.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L4257fa.  return @kind void;
  #L4257fc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4257fe.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L425804.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L425808.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42580e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L425814.  return @kind void;
  catch `java.lang.Throwable` @[L4257ac..L4257c8] goto L4257fc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425834.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L425838.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42583e.  v0:= temp;
  #L425840.  if v0 == 0 then goto L425852;
  #L425844.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L425848.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42584c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L425852.  return @kind void;
}
