record `io.reactivex.internal.operators.observable.ObservableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableCache.once` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableCache$CacheState` `io.reactivex.internal.operators.observable.ObservableCache.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableCache$CacheState` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.<init>:(Lio/reactivex/Observable;Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L41f790.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L41f796.  v0.`io.reactivex.internal.operators.observable.ObservableCache.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` := v2 @kind object;
  #L41f79a.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L41f79e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L41f7a4.  v0.`io.reactivex.internal.operators.observable.ObservableCache.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L41f7a8.  return @kind void;
}
procedure `io.reactivex.Observable` `from`(`io.reactivex.Observable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.from:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41f738.  v0:= 16I;
  #L41f73c.  call temp:= `from`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.from:(Lio/reactivex/Observable;I)Lio/reactivex/Observable;` @kind static;
  #L41f742.  v1:= temp @kind object;
  #L41f744.  return v1 @kind object;
}
procedure `io.reactivex.Observable` `from`(`io.reactivex.Observable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.from:(Lio/reactivex/Observable;I)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41f758.  v0:= "capacityHint" @kind object;
  #L41f75c.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41f762.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$CacheState`;
  #L41f766.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.<init>:(Lio/reactivex/Observable;I)V` @kind direct;
  #L41f76c.  v2:= new `io.reactivex.internal.operators.observable.ObservableCache`;
  #L41f770.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.<init>:(Lio/reactivex/Observable;Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;)V` @kind direct;
  #L41f776.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L41f77c.  v1:= temp @kind object;
  #L41f77e.  return v1 @kind object;
}
procedure `int` `cachedEventCount`(`io.reactivex.internal.operators.observable.ObservableCache` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.cachedEventCount:()I` @AccessFlag  {
    temp;
    v0;

  #L41f718.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f71c.  call temp:= `size`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.size:()I` @kind virtual;
  #L41f722.  v0:= temp;
  #L41f724.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.internal.operators.observable.ObservableCache` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.hasObservers:()Z` @AccessFlag  {
    temp;
    v0;

  #L41f6c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f6cc.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f6d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f6d6.  v0:= temp @kind object;
  #L41f6d8.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[]) v0 @kind object;
  #L41f6dc.  v0:= length @variable v0;
  #L41f6de.  if v0 == 0 then goto L41f6e6;
  #L41f6e2.  v0:= 1I;
  #L41f6e4.  goto L41f6e8;
  #L41f6e6.  v0:= 0I;
  #L41f6e8.  return v0;
}
procedure `boolean` `isConnected`(`io.reactivex.internal.operators.observable.ObservableCache` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.isConnected:()Z` @AccessFlag  {
    temp;
    v0;

  #L41f6fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f700.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.isConnected` @type ^`boolean` @kind boolean;
  #L41f704.  return v0;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableCache` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L41f7bc.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`;
  #L41f7c0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableCache.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f7c4.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;)V` @kind direct;
  #L41f7ca.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41f7d0.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f7d4.  call temp:= `addChild`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.addChild:(Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;)Z` @kind virtual;
  #L41f7da.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L41f7de.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L41f7e4.  v4:= temp;
  #L41f7e6.  if v4 != 0 then goto L41f808;
  #L41f7ea.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L41f7ee.  v1:= 0I;
  #L41f7f0.  v2:= 1I;
  #L41f7f2.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L41f7f8.  v4:= temp;
  #L41f7fa.  if v4 == 0 then goto L41f808;
  #L41f7fe.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.state` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind object;
  #L41f802.  call `connect`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.connect:()V` @kind virtual;
  #L41f808.  call `replay`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.replay:()V` @kind virtual;
  #L41f80e.  return @kind void;
}
