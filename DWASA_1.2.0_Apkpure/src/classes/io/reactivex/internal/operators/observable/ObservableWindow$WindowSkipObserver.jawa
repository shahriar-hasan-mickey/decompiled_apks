record `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.capacityHint` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.count` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.firstEmission` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.index` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.skip` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @AccessFlag ;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.<init>:(Lio/reactivex/Observer;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L432f2c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L432f32.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L432f36.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L432f3c.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L432f40.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L432f44.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.count` @type ^`long` := v3 @kind wide;
  #L432f48.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.skip` @type ^`long` := v5 @kind wide;
  #L432f4c.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.capacityHint` @type ^`int` := v7;
  #L432f50.  v2:= new `java.util.ArrayDeque`;
  #L432f54.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L432f5a.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L432f5e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432f70.  v0:= 1I;
  #L432f72.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L432f76.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432f14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` @kind boolean;
  #L432f18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432f88.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L432f8c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L432f92.  v1:= temp;
  #L432f94.  if v1 != 0 then goto L432fac;
  #L432f98.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L432f9e.  v1:= temp @kind object;
  #L432fa0.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L432fa4.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L432faa.  goto L432f8c;
  #L432fac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432fb0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L432fb6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432fc8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L432fcc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L432fd2.  v1:= temp;
  #L432fd4.  if v1 != 0 then goto L432fec;
  #L432fd8.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L432fde.  v1:= temp @kind object;
  #L432fe0.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L432fe4.  call `onError`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L432fea.  goto L432fcc;
  #L432fec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432ff0.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432ff6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v11 @kind this, `java.lang.Object` v12 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L433008.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L43300c.  v1:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.index` @type ^`long` @kind wide;
  #L433010.  v3:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.skip` @type ^`long` @kind wide;
  #L433014.  v5:= v1 %% v3 @kind long;
  #L433018.  v7:= 0L;
  #L43301c.  v9:= lcmp(v5, v7);
  #L433020.  if v9 != 0 then goto L433052;
  #L433024.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` @kind boolean;
  #L433028.  if v5 != 0 then goto L433052;
  #L43302c.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L433030.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L433036.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.capacityHint` @type ^`int`;
  #L43303a.  call temp:= `create`(v5, v11) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L433040.  v5:= temp @kind object;
  #L433042.  call temp:= `offer`(v0, v5) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L433048.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43304c.  call `onNext`(v6, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L433052.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.firstEmission` @type ^`long` @kind wide;
  #L433056.  v7:= 1L;
  #L43305a.  v5:= v5 + v7 @kind long;
  #L43305c.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L433062.  v9:= temp @kind object;
  #L433064.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43306a.  v10:= temp;
  #L43306c.  if v10 == 0 then goto L433084;
  #L433070.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L433076.  v10:= temp @kind object;
  #L433078.  v10:= (`io.reactivex.subjects.UnicastSubject`) v10 @kind object;
  #L43307c.  call `onNext`(v10, v12) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L433082.  goto L433064;
  #L433084.  v9:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.count` @type ^`long` @kind wide;
  #L433088.  v12:= lcmp(v5, v9);
  #L43308c.  if v12 < 0 then goto L4330ca;
  #L433090.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L433096.  v12:= temp @kind object;
  #L433098.  v12:= (`io.reactivex.subjects.UnicastSubject`) v12 @kind object;
  #L43309c.  call `onComplete`(v12) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4330a2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4330a8.  v12:= temp;
  #L4330aa.  if v12 == 0 then goto L4330c2;
  #L4330ae.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4330b2.  if v12 == 0 then goto L4330c2;
  #L4330b6.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4330ba.  call `dispose`(v12) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4330c0.  return @kind void;
  #L4330c2.  v5:= v5 - v3 @kind long;
  #L4330c4.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.firstEmission` @type ^`long` := v5 @kind wide;
  #L4330c8.  goto L4330ce;
  #L4330ca.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.firstEmission` @type ^`long` := v5 @kind wide;
  #L4330ce.  v1:= v1 + v7 @kind long;
  #L4330d0.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.index` @type ^`long` := v1 @kind wide;
  #L4330d4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4330e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4330ec.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4330f2.  v0:= temp;
  #L4330f4.  if v0 == 0 then goto L433106;
  #L4330f8.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4330fc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L433100.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L433106.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433118.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43311c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L433122.  v0:= temp;
  #L433124.  if v0 != 0 then goto L43313a;
  #L433128.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43312c.  if v0 == 0 then goto L43313a;
  #L433130.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433134.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43313a.  return @kind void;
}
