record `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.disposed` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @AccessFlag VOLATILE;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.OTHER_STATE_CONSUMED_OR_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.OTHER_STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L429564.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42956a.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42956e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L429572.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L429578.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42957c.  v1:= new `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver`;
  #L429580.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;)V` @kind direct;
  #L429586.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver` := v1 @kind object;
  #L42958a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42958e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L429594.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L429598.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4295ac.  v0:= 1I;
  #L4295ae.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L4295b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4295b6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4295bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver` @kind object;
  #L4295c0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4295c6.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L4295cc.  v0:= temp;
  #L4295ce.  if v0 != 0 then goto L4295dc;
  #L4295d2.  v0:= 0I;
  #L4295d4.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4295d8.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v0 @kind object;
  #L4295dc.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L4295f0.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L4295f6.  v0:= temp;
  #L4295f8.  if v0 != 0 then goto L429602;
  #L4295fc.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L429602.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L429614.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429618.  v1:= 1I;
  #L42961a.  v2:= 1I;
  #L42961c.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.disposed` @type ^`boolean` @kind boolean;
  #L429620.  v4:= 0I;
  #L429622.  if v3 == 0 then goto L429630;
  #L429626.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L42962a.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L42962e.  return @kind void;
  #L429630.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429634.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L42963a.  v3:= temp @kind object;
  #L42963c.  if v3 == 0 then goto L42965c;
  #L429640.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L429644.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L429648.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42964c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L429652.  v1:= temp @kind object;
  #L429654.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42965a.  return @kind void;
  #L42965c.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int`;
  #L429660.  v5:= 2I;
  #L429662.  if v3 != v1 then goto L42967a;
  #L429666.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` @kind object;
  #L42966a.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L42966e.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v5;
  #L429672.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429678.  v3:= 2I;
  #L42967a.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L42967e.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L429682.  if v7 == 0 then goto L429690;
  #L429686.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L42968c.  v7:= temp @kind object;
  #L42968e.  goto L429692;
  #L429690.  v7:= v4 @kind object;
  #L429692.  if v7 != 0 then goto L42969a;
  #L429696.  v8:= 1I;
  #L429698.  goto L42969c;
  #L42969a.  v8:= 0I;
  #L42969c.  if v6 == 0 then goto L4296b4;
  #L4296a0.  if v8 == 0 then goto L4296b4;
  #L4296a4.  if v3 != v5 then goto L4296b4;
  #L4296a8.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4296ac.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4296b2.  return @kind void;
  #L4296b4.  if v8 == 0 then goto L4296c8;
  #L4296b8.  v2:= -v2 @kind int;
  #L4296ba.  call temp:= `addAndGet`(v9, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.addAndGet:(I)I` @kind virtual;
  #L4296c0.  v2:= temp;
  #L4296c2.  if v2 != 0 then goto L42961c;
  #L4296c6.  return @kind void;
  #L4296c8.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4296ce.  goto L42961c;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `getOrCreateQueue`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L429534.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L429538.  if v0 != 0 then goto L429552;
  #L42953c.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L429540.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L429546.  v1:= temp;
  #L429548.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L42954e.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L429552.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429508.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42950c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L429512.  v0:= temp @kind object;
  #L429514.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L429518.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42951e.  v0:= temp;
  #L429520.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4296e0.  v0:= 1I;
  #L4296e2.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L4296e6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L4296ec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429700.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429704.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42970a.  v0:= temp;
  #L42970c.  if v0 == 0 then goto L429722;
  #L429710.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L429714.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42971a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L429720.  goto L429728;
  #L429722.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L429728.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42973c.  v0:= 0I;
  #L42973e.  v1:= 1I;
  #L429740.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.compareAndSet:(II)Z` @kind virtual;
  #L429746.  v0:= temp;
  #L429748.  if v0 == 0 then goto L429764;
  #L42974c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429750.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429756.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.decrementAndGet:()I` @kind virtual;
  #L42975c.  v3:= temp;
  #L42975e.  if v3 != 0 then goto L429780;
  #L429762.  return @kind void;
  #L429764.  call temp:= `getOrCreateQueue`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L42976a.  v0:= temp @kind object;
  #L42976c.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L429772.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L429778.  v3:= temp;
  #L42977a.  if v3 == 0 then goto L429780;
  #L42977e.  return @kind void;
  #L429780.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L429786.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429798.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42979c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4297a2.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L4297b4.  v0:= 2I;
  #L4297b6.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v0;
  #L4297ba.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L4297c0.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4297d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4297d8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4297de.  v0:= temp;
  #L4297e0.  if v0 == 0 then goto L4297f6;
  #L4297e4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4297e8.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4297ee.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L4297f4.  goto L4297fc;
  #L4297f6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4297fc.  return @kind void;
}
procedure `void` `otherSuccess`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L429810.  v0:= 1I;
  #L429812.  v1:= 0I;
  #L429814.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.compareAndSet:(II)Z` @kind virtual;
  #L42981a.  v1:= temp;
  #L42981c.  if v1 == 0 then goto L429832;
  #L429820.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429824.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42982a.  v3:= 2I;
  #L42982c.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v3;
  #L429830.  goto L429848;
  #L429832.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v3 @kind object;
  #L429836.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v0;
  #L42983a.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L429840.  v3:= temp;
  #L429842.  if v3 == 0 then goto L429848;
  #L429846.  return @kind void;
  #L429848.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L42984e.  return @kind void;
}
