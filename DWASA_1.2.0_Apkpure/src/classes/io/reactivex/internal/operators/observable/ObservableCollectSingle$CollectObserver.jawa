record `io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.collector` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.downstream` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.u` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$CollectObserver;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f98c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41f992.  v0.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L41f996.  v0.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.collector` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L41f99a.  v0.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.u` @type ^`java.lang.Object` := v2 @kind object;
  #L41f99e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$CollectObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f9b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41f9b4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41f9ba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$CollectObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f96c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41f970.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41f976.  v0:= temp;
  #L41f978.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$CollectObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41f9cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.done` @type ^`boolean` @kind boolean;
  #L41f9d0.  if v0 == 0 then goto L41f9d6;
  #L41f9d4.  return @kind void;
  #L41f9d6.  v0:= 1I;
  #L41f9d8.  v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41f9dc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41f9e0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.u` @type ^`java.lang.Object` @kind object;
  #L41f9e4.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41f9ea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$CollectObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f9fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.done` @type ^`boolean` @kind boolean;
  #L41fa00.  if v0 == 0 then goto L41fa0c;
  #L41fa04.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41fa0a.  return @kind void;
  #L41fa0c.  v0:= 1I;
  #L41fa0e.  v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41fa12.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41fa16.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41fa1c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$CollectObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41fa30.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.done` @type ^`boolean` @kind boolean;
  #L41fa34.  if v0 == 0 then goto L41fa3a;
  #L41fa38.  return @kind void;
  #L41fa3a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.collector` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L41fa3e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.u` @type ^`java.lang.Object` @kind object;
  #L41fa42.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L41fa48.  goto L41fa5c;
  #L41fa4a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41fa4c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41fa50.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41fa56.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$CollectObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41fa5c.  return @kind void;
  catch `java.lang.Throwable` @[L41fa3a..L41fa48] goto L41fa4a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$CollectObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41fa7c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41fa80.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41fa86.  v0:= temp;
  #L41fa88.  if v0 == 0 then goto L41fa9a;
  #L41fa8c.  v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41fa90.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$CollectObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41fa94.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41fa9a.  return @kind void;
}
