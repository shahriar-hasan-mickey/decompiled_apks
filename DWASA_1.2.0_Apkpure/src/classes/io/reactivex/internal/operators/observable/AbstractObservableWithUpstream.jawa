record `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class @AccessFlag ABSTRACT extends `io.reactivex.Observable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamObservableSource` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream.source` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41bb30.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L41bb36.  v0.`io.reactivex.internal.operators.observable.AbstractObservableWithUpstream.source` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L41bb3a.  return @kind void;
}
procedure `io.reactivex.ObservableSource` `source`(`io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.source:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bb18.  v0:= v1.`io.reactivex.internal.operators.observable.AbstractObservableWithUpstream.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41bb1c.  return v0 @kind object;
}
