record `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.source` @AccessFlag FINAL;
  `io.reactivex.functions.BooleanSupplier` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.stop` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BooleanSupplier` v2 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BooleanSupplier;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ba5c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42ba62.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42ba66.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v3 @kind object;
  #L42ba6a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.source` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L42ba6e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.stop` @type ^`io.reactivex.functions.BooleanSupplier` := v2 @kind object;
  #L42ba72.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ba84.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.stop` @type ^`io.reactivex.functions.BooleanSupplier` @kind object;
  #L42ba88.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L42ba8e.  v0:= temp;
  #L42ba90.  if v0 == 0 then goto L42baa0;
  #L42ba94.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42ba98.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42ba9e.  goto L42baa6;
  #L42baa0.  call `subscribeNext`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.subscribeNext:()V` @kind virtual;
  #L42baa6.  return @kind void;
  #L42baa8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42baaa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42bab0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42bab4.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42baba.  return @kind void;
  catch `java.lang.Throwable` @[L42ba84..L42ba90] goto L42baa8;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bad8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42badc.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42bae2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42baf4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42baf8.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42bafe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bb10.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42bb14.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42bb1a.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42bb2c.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.getAndIncrement:()I` @kind virtual;
  #L42bb32.  v0:= temp;
  #L42bb34.  if v0 != 0 then goto L42bb52;
  #L42bb38.  v0:= 1I;
  #L42bb3a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42bb3e.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42bb44.  v0:= -v0 @kind int;
  #L42bb46.  call temp:= `addAndGet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.addAndGet:(I)I` @kind virtual;
  #L42bb4c.  v0:= temp;
  #L42bb4e.  if v0 != 0 then goto L42bb3a;
  #L42bb52.  return @kind void;
}
