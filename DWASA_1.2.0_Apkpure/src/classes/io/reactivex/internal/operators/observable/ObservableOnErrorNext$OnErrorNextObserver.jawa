record `io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.allowFatal` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.arbiter` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.nextSupplier` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.once` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$OnErrorNextObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42a1f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42a1fa.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42a1fe.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.nextSupplier` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42a202.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.allowFatal` @type ^`boolean` := v3 @kind boolean;
  #L42a206.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L42a20a.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L42a210.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.arbiter` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L42a214.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$OnErrorNextObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a228.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.done` @type ^`boolean` @kind boolean;
  #L42a22c.  if v0 == 0 then goto L42a232;
  #L42a230.  return @kind void;
  #L42a232.  v0:= 1I;
  #L42a234.  v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42a238.  v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.once` @type ^`boolean` := v0 @kind boolean;
  #L42a23c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a240.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42a246.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$OnErrorNextObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a258.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.once` @type ^`boolean` @kind boolean;
  #L42a25c.  if v0 == 0 then goto L42a27c;
  #L42a260.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.done` @type ^`boolean` @kind boolean;
  #L42a264.  if v0 == 0 then goto L42a270;
  #L42a268.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a26e.  return @kind void;
  #L42a270.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a274.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a27a.  return @kind void;
  #L42a27c.  v0:= 1I;
  #L42a27e.  v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.once` @type ^`boolean` := v0 @kind boolean;
  #L42a282.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.allowFatal` @type ^`boolean` @kind boolean;
  #L42a286.  if v1 == 0 then goto L42a29e;
  #L42a28a.  v1:= instanceof @variable v7 @type ^`java.lang.Exception` @kind boolean;
  #L42a28e.  if v1 != 0 then goto L42a29e;
  #L42a292.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a296.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a29c.  return @kind void;
  #L42a29e.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.nextSupplier` @type ^`io.reactivex.functions.Function` @kind object;
  #L42a2a2.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42a2a8.  v1:= temp @kind object;
  #L42a2aa.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L42a2ae.  if v1 != 0 then goto L42a2d2;
  #L42a2b2.  v0:= new `java.lang.NullPointerException`;
  #L42a2b6.  v1:= "Observable is null" @kind object;
  #L42a2ba.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a2c0.  call temp:= `initCause`(v0, v7) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L42a2c6.  v7:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a2ca.  call `onError`(v7, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a2d0.  return @kind void;
  #L42a2d2.  call `subscribe`(v1, v6) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42a2d8.  return @kind void;
  #L42a2da.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42a2dc.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42a2e2.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a2e6.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L42a2ea.  v4:= 2I;
  #L42a2ec.  v4:= new `java.lang.Throwable`[v4];
  #L42a2f0.  v5:= 0I;
  #L42a2f2.  v4[v5]:= v7 @kind object;
  #L42a2f6.  v4[v0]:= v1 @kind object;
  #L42a2fa.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42a300.  call `onError`(v2, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a306.  return @kind void;
  catch `java.lang.Throwable` @[L42a29e..L42a2ae] goto L42a2da;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$OnErrorNextObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a324.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.done` @type ^`boolean` @kind boolean;
  #L42a328.  if v0 == 0 then goto L42a32e;
  #L42a32c.  return @kind void;
  #L42a32e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a332.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42a338.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$OnErrorNextObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a34c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.arbiter` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42a350.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42a356.  return @kind void;
}
