record `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.active` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.observer` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.sourceMode` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.tillTheEnd` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L420268.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42026e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L420272.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L420276.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.bufferSize` @type ^`int` := v3;
  #L42027a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.tillTheEnd` @type ^`boolean` := v4 @kind boolean;
  #L42027e.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L420282.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L420288.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L42028c.  v2:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver`;
  #L420290.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;)V` @kind direct;
  #L420296.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.observer` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` := v2 @kind object;
  #L42029a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4202ac.  v0:= 1I;
  #L4202ae.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4202b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4202b6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4202bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.observer` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` @kind object;
  #L4202c0.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.dispose:()V` @kind virtual;
  #L4202c6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4202d8.  call temp:= `getAndIncrement`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.getAndIncrement:()I` @kind virtual;
  #L4202de.  v0:= temp;
  #L4202e0.  if v0 == 0 then goto L4202e6;
  #L4202e4.  return @kind void;
  #L4202e6.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4202ea.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4202ee.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4202f2.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.active` @type ^`boolean` @kind boolean;
  #L4202f6.  if v3 != 0 then goto L420442;
  #L4202fa.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4202fe.  if v3 == 0 then goto L42030a;
  #L420302.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420308.  return @kind void;
  #L42030a.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.tillTheEnd` @type ^`boolean` @kind boolean;
  #L42030e.  v4:= 1I;
  #L420310.  if v3 != 0 then goto L42033e;
  #L420314.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L42031a.  v3:= temp @kind object;
  #L42031c.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L420320.  if v3 == 0 then goto L42033e;
  #L420324.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42032a.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L42032e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420334.  v1:= temp @kind object;
  #L420336.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42033c.  return @kind void;
  #L42033e.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @type ^`boolean` @kind boolean;
  #L420342.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L420348.  v5:= temp @kind object;
  #L42034a.  if v5 != 0 then goto L420352;
  #L42034e.  v6:= 1I;
  #L420350.  goto L420354;
  #L420352.  v6:= 0I;
  #L420354.  if v3 == 0 then goto L42037c;
  #L420358.  if v6 == 0 then goto L42037c;
  #L42035c.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L420360.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420366.  v1:= temp @kind object;
  #L420368.  if v1 == 0 then goto L420374;
  #L42036c.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420372.  goto L42037a;
  #L420374.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42037a.  return @kind void;
  #L42037c.  if v6 != 0 then goto L420442;
  #L420380.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L420384.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42038a.  v3:= temp @kind object;
  #L42038c.  v5:= "The mapper returned a null ObservableSource" @kind object;
  #L420390.  call temp:= `requireNonNull`(v3, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L420396.  v3:= temp @kind object;
  #L420398.  v3:= (`io.reactivex.ObservableSource`) v3 @kind object;
  #L42039c.  v5:= instanceof @variable v3 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L4203a0.  if v5 == 0 then goto L4203d4;
  #L4203a4.  v3:= (`java.util.concurrent.Callable`) v3 @kind object;
  #L4203a8.  call temp:= `call`(v3) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4203ae.  v3:= temp @kind object;
  #L4203b0.  if v3 == 0 then goto L4202f2;
  #L4203b4.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4203b8.  if v4 != 0 then goto L4202f2;
  #L4203bc.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4203c2.  goto L4202f2;
  #L4203c4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4203c6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4203cc.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4203d2.  goto L4202f2;
  #L4203d4.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.active` @type ^`boolean` := v4 @kind boolean;
  #L4203d8.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.observer` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` @kind object;
  #L4203dc.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4203e2.  goto L420442;
  #L4203e4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4203e6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4203ec.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L4203f0.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4203f4.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4203fa.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420400.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L420406.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42040c.  v1:= temp @kind object;
  #L42040e.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420414.  return @kind void;
  #L420416.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420418.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42041e.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L420422.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L420426.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42042c.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L420432.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420438.  v1:= temp @kind object;
  #L42043a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420440.  return @kind void;
  #L420442.  call temp:= `decrementAndGet`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.decrementAndGet:()I` @kind virtual;
  #L420448.  v3:= temp;
  #L42044a.  if v3 != 0 then goto L4202f2;
  #L42044e.  return @kind void;
  catch `java.lang.Throwable` @[L420342..L42034a] goto L420416;
  catch `java.lang.Throwable` @[L420380..L42039c] goto L4203e4;
  catch `java.lang.Throwable` @[L4203a4..L4203b0] goto L4203c4;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420250.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` @kind boolean;
  #L420254.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420484.  v0:= 1I;
  #L420486.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42048a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L420490.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4204a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4204a8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4204ae.  v0:= temp;
  #L4204b0.  if v0 == 0 then goto L4204c2;
  #L4204b4.  v2:= 1I;
  #L4204b6.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L4204ba.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L4204c0.  goto L4204c8;
  #L4204c2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4204c8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4204dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.sourceMode` @type ^`int`;
  #L4204e0.  if v0 != 0 then goto L4204ee;
  #L4204e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4204e8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4204ee.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L4204f4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L420508.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42050c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L420512.  v0:= temp;
  #L420514.  if v0 == 0 then goto L42058c;
  #L420518.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L42051c.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L420520.  if v0 == 0 then goto L420570;
  #L420524.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L420528.  v0:= 3I;
  #L42052a.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.requestFusion:(I)I` @kind interface;
  #L420530.  v0:= temp;
  #L420532.  v1:= 1I;
  #L420534.  if v0 != v1 then goto L420556;
  #L420538.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.sourceMode` @type ^`int` := v0;
  #L42053c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L420540.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L420544.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420548.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42054e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L420554.  return @kind void;
  #L420556.  v1:= 2I;
  #L420558.  if v0 != v1 then goto L420570;
  #L42055c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.sourceMode` @type ^`int` := v0;
  #L420560.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L420564.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420568.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42056e.  return @kind void;
  #L420570.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L420574.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.bufferSize` @type ^`int`;
  #L420578.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L42057e.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L420582.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420586.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42058c.  return @kind void;
}
