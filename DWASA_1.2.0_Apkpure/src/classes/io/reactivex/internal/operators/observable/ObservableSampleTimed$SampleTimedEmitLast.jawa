record `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d678.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L42d67e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42d682.  v2:= 1I;
  #L42d684.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L42d68a.  v0.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L42d68e.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.complete:()V` @AccessFlag  {
    temp;
    v0;

  #L42d6a0.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.emit:()V` @kind virtual;
  #L42d6a6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42d6aa.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42d6b0.  v0:= temp;
  #L42d6b2.  if v0 != 0 then goto L42d6c0;
  #L42d6b6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d6ba.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d6c0.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d6d4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42d6d8.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L42d6de.  v0:= temp;
  #L42d6e0.  v1:= 2I;
  #L42d6e2.  if v0 != v1 then goto L42d706;
  #L42d6e6.  call `emit`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.emit:()V` @kind virtual;
  #L42d6ec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42d6f0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42d6f6.  v0:= temp;
  #L42d6f8.  if v0 != 0 then goto L42d706;
  #L42d6fc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d700.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d706.  return @kind void;
}
