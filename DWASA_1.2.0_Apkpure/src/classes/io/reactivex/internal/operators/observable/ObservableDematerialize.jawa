record `io.reactivex.internal.operators.observable.ObservableDematerialize` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDematerialize` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize;.<init>:(Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4228f8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L4228fe.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableDematerialize` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L422910.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDematerialize.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L422914.  v1:= new `io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeObserver`;
  #L422918.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableDematerialize$DematerializeObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L42291e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L422924.  return @kind void;
}
