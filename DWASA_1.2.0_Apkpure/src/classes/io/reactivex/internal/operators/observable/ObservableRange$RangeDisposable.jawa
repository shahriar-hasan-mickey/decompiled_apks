record `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.fused` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.<init>:(Lio/reactivex/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ad80.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L42ad86.  v0.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42ad8a.  v0.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` := v2 @kind wide;
  #L42ad8e.  v0.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` := v4 @kind wide;
  #L42ad92.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ada4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` @kind wide;
  #L42ada8.  v2.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` := v0 @kind wide;
  #L42adac.  v0:= 1I;
  #L42adae.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.lazySet:(I)V` @kind virtual;
  #L42adb4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42adc8.  v0:= 1I;
  #L42adca.  call `set`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.set:(I)V` @kind virtual;
  #L42add0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42acb0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.get:()I` @kind virtual;
  #L42acb6.  v0:= temp;
  #L42acb8.  if v0 == 0 then goto L42acc0;
  #L42acbc.  v0:= 1I;
  #L42acbe.  goto L42acc2;
  #L42acc0.  v0:= 0I;
  #L42acc2.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42acd4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` @kind wide;
  #L42acd8.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` @kind wide;
  #L42acdc.  v4:= lcmp(v0, v2);
  #L42ace0.  if v4 != 0 then goto L42ace8;
  #L42ace4.  v0:= 1I;
  #L42ace6.  goto L42acea;
  #L42ace8.  v0:= 0I;
  #L42acea.  return v0;
}
procedure `java.lang.Integer` `poll`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.poll:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42ad20.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` @kind wide;
  #L42ad24.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` @kind wide;
  #L42ad28.  v4:= lcmp(v0, v2);
  #L42ad2c.  if v4 == 0 then goto L42ad46;
  #L42ad30.  v2:= 1L;
  #L42ad34.  v2:= v2 + v0 @kind long;
  #L42ad36.  v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` := v2 @kind wide;
  #L42ad3a.  v1:= (`int`) v0 @kind l2i;
  #L42ad3c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42ad42.  v0:= temp @kind object;
  #L42ad44.  return v0 @kind object;
  #L42ad46.  v0:= 1I;
  #L42ad48.  call `lazySet`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.lazySet:(I)V` @kind virtual;
  #L42ad4e.  v0:= 0I;
  #L42ad50.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L42ad64.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.poll:()Ljava/lang/Integer;` @kind virtual;
  #L42ad6a.  v0:= temp @kind object;
  #L42ad6c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42acfc.  v0:= 1I;
  #L42acfe.  v2:= v2 ^& v0 @kind int;
  #L42ad00.  if v2 == 0 then goto L42ad0a;
  #L42ad04.  v1.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.fused` @type ^`boolean` := v0 @kind boolean;
  #L42ad08.  return v0;
  #L42ad0a.  v2:= 0I;
  #L42ad0c.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42ade4.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.fused` @type ^`boolean` @kind boolean;
  #L42ade8.  if v0 == 0 then goto L42adee;
  #L42adec.  return @kind void;
  #L42adee.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42adf2.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` @kind wide;
  #L42adf6.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` @kind wide;
  #L42adfa.  v5:= lcmp(v3, v1);
  #L42adfe.  if v5 == 0 then goto L42ae26;
  #L42ae02.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.get:()I` @kind virtual;
  #L42ae08.  v5:= temp;
  #L42ae0a.  if v5 != 0 then goto L42ae26;
  #L42ae0e.  v5:= (`int`) v3 @kind l2i;
  #L42ae10.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42ae16.  v5:= temp @kind object;
  #L42ae18.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42ae1e.  v5:= 1L;
  #L42ae22.  v3:= v3 + v5 @kind long;
  #L42ae24.  goto L42adfa;
  #L42ae26.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.get:()I` @kind virtual;
  #L42ae2c.  v1:= temp;
  #L42ae2e.  if v1 != 0 then goto L42ae40;
  #L42ae32.  v1:= 1I;
  #L42ae34.  call `lazySet`(v7, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.lazySet:(I)V` @kind virtual;
  #L42ae3a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42ae40.  return @kind void;
}
