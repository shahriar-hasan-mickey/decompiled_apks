record `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.comparer` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.first` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver`[] `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.resources` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.second` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object, `io.reactivex.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.<init>:(Lio/reactivex/Observer;ILio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42e4e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42e4ee.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42e4f2.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L42e4f6.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L42e4fa.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.comparer` @type ^`io.reactivex.functions.BiPredicate` := v5 @kind object;
  #L42e4fe.  v1:= 2I;
  #L42e500.  v3:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver`[v1];
  #L42e504.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver`[] := v3 @kind object;
  #L42e508.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver`;
  #L42e50c.  v5:= 0I;
  #L42e50e.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;II)V` @kind direct;
  #L42e514.  v3[v5]:= v4 @kind object;
  #L42e518.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver`;
  #L42e51c.  v5:= 1I;
  #L42e51e.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;II)V` @kind direct;
  #L42e524.  v3[v5]:= v4 @kind object;
  #L42e528.  v2:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L42e52c.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L42e532.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L42e536.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v1 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L42e548.  v0:= 1I;
  #L42e54a.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42e54e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e554.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e55a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42e56c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L42e570.  if v0 != 0 then goto L42e5b2;
  #L42e574.  v0:= 1I;
  #L42e576.  v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42e57a.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L42e57e.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L42e584.  call temp:= `getAndIncrement`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.getAndIncrement:()I` @kind virtual;
  #L42e58a.  v1:= temp;
  #L42e58c.  if v1 != 0 then goto L42e5b2;
  #L42e590.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver`[] @kind object;
  #L42e594.  v2:= 0I;
  #L42e596.  v2:= v1[v2] @kind object;
  #L42e59a.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42e59e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e5a4.  v0:= v1[v0] @kind object;
  #L42e5a8.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42e5ac.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e5b2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L42e5c4.  call temp:= `getAndIncrement`(v12) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.getAndIncrement:()I` @kind virtual;
  #L42e5ca.  v0:= temp;
  #L42e5cc.  if v0 == 0 then goto L42e5d2;
  #L42e5d0.  return @kind void;
  #L42e5d2.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver`[] @kind object;
  #L42e5d6.  v1:= 0I;
  #L42e5d8.  v2:= v0[v1] @kind object;
  #L42e5dc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42e5e0.  v4:= 1I;
  #L42e5e2.  v0:= v0[v4] @kind object;
  #L42e5e6.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42e5ea.  v6:= 1I;
  #L42e5ec.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L42e5f0.  if v7 == 0 then goto L42e602;
  #L42e5f4.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e5fa.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e600.  return @kind void;
  #L42e602.  v7:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver.done` @type ^`boolean` @kind boolean;
  #L42e606.  if v7 == 0 then goto L42e624;
  #L42e60a.  v8:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L42e60e.  if v8 == 0 then goto L42e624;
  #L42e612.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42e618.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e61c.  call `onError`(v0, v8) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e622.  return @kind void;
  #L42e624.  v8:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver.done` @type ^`boolean` @kind boolean;
  #L42e628.  if v8 == 0 then goto L42e646;
  #L42e62c.  v9:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L42e630.  if v9 == 0 then goto L42e646;
  #L42e634.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42e63a.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e63e.  call `onError`(v0, v9) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e644.  return @kind void;
  #L42e646.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L42e64a.  if v9 != 0 then goto L42e65a;
  #L42e64e.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L42e654.  v9:= temp @kind object;
  #L42e656.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` := v9 @kind object;
  #L42e65a.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L42e65e.  if v9 != 0 then goto L42e666;
  #L42e662.  v9:= 1I;
  #L42e664.  goto L42e668;
  #L42e666.  v9:= 0I;
  #L42e668.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L42e66c.  if v10 != 0 then goto L42e67c;
  #L42e670.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L42e676.  v10:= temp @kind object;
  #L42e678.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` := v10 @kind object;
  #L42e67c.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L42e680.  if v10 != 0 then goto L42e688;
  #L42e684.  v10:= 1I;
  #L42e686.  goto L42e68a;
  #L42e688.  v10:= 0I;
  #L42e68a.  if v7 == 0 then goto L42e6b8;
  #L42e68e.  if v8 == 0 then goto L42e6b8;
  #L42e692.  if v9 == 0 then goto L42e6b8;
  #L42e696.  if v10 == 0 then goto L42e6b8;
  #L42e69a.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e69e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L42e6a4.  v1:= temp @kind object;
  #L42e6a6.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42e6ac.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e6b0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42e6b6.  return @kind void;
  #L42e6b8.  if v7 == 0 then goto L42e6e8;
  #L42e6bc.  if v8 == 0 then goto L42e6e8;
  #L42e6c0.  if v9 == v10 then goto L42e6e8;
  #L42e6c4.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42e6ca.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e6ce.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L42e6d4.  v1:= temp @kind object;
  #L42e6d6.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42e6dc.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e6e0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42e6e6.  return @kind void;
  #L42e6e8.  if v9 != 0 then goto L42e752;
  #L42e6ec.  if v10 != 0 then goto L42e752;
  #L42e6f0.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L42e6f4.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L42e6f8.  v11:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L42e6fc.  call temp:= `test`(v7, v8, v11) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L42e702.  v7:= temp;
  #L42e704.  if v7 != 0 then goto L42e72c;
  #L42e708.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42e70e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e712.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L42e718.  v1:= temp @kind object;
  #L42e71a.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42e720.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e724.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42e72a.  return @kind void;
  #L42e72c.  v7:= 0I;
  #L42e72e.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` := v7 @kind object;
  #L42e732.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` := v7 @kind object;
  #L42e736.  goto L42e752;
  #L42e738.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42e73a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42e740.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42e746.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e74a.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e750.  return @kind void;
  #L42e752.  if v9 != 0 then goto L42e75a;
  #L42e756.  if v10 == 0 then goto L42e5ec;
  #L42e75a.  v6:= -v6 @kind int;
  #L42e75c.  call temp:= `addAndGet`(v12, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.addAndGet:(I)I` @kind virtual;
  #L42e762.  v6:= temp;
  #L42e764.  if v6 != 0 then goto L42e5ec;
  #L42e768.  return @kind void;
  catch `java.lang.Throwable` @[L42e6f0..L42e704] goto L42e738;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e4b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L42e4b4.  return v0;
}
procedure `boolean` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.setDisposable:(Lio/reactivex/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L42e4c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L42e4cc.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42e4d2.  v2:= temp;
  #L42e4d4.  return v2;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.subscribe:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42e788.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualObserver`[] @kind object;
  #L42e78c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42e790.  v2:= 0I;
  #L42e792.  v2:= v0[v2] @kind object;
  #L42e796.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42e79c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42e7a0.  v2:= 1I;
  #L42e7a2.  v0:= v0[v2] @kind object;
  #L42e7a6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42e7ac.  return @kind void;
}
