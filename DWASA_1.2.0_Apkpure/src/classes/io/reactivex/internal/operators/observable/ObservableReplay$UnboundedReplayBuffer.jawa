record `io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42cbf4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L42cbfa.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cc0c.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L42cc12.  v0:= temp @kind object;
  #L42cc14.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L42cc1a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L42cc1e.  v0:= v0 + 1;
  #L42cc22.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int` := v0;
  #L42cc26.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L42cc38.  call temp:= `error`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L42cc3e.  v1:= temp @kind object;
  #L42cc40.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L42cc46.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L42cc4a.  v1:= v1 + 1;
  #L42cc4e.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int` := v1;
  #L42cc52.  return @kind void;
}
procedure `void` `next`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42cc64.  call temp:= `next`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L42cc6a.  v1:= temp @kind object;
  #L42cc6c.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L42cc72.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L42cc76.  v1:= v1 + 1;
  #L42cc7a.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int` := v1;
  #L42cc7e.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42cc90.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.getAndIncrement:()I` @kind virtual;
  #L42cc96.  v0:= temp;
  #L42cc98.  if v0 == 0 then goto L42cc9e;
  #L42cc9c.  return @kind void;
  #L42cc9e.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.child` @type ^`io.reactivex.Observer` @kind object;
  #L42cca2.  v1:= 1I;
  #L42cca4.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @kind virtual;
  #L42ccaa.  v2:= temp;
  #L42ccac.  if v2 == 0 then goto L42ccb2;
  #L42ccb0.  return @kind void;
  #L42ccb2.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L42ccb6.  call temp:= `index`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.index:()Ljava/lang/Object;` @kind virtual;
  #L42ccbc.  v3:= temp @kind object;
  #L42ccbe.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L42ccc2.  if v3 == 0 then goto L42ccd0;
  #L42ccc6.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L42cccc.  v3:= temp;
  #L42ccce.  goto L42ccd2;
  #L42ccd0.  v3:= 0I;
  #L42ccd2.  if v3 >= v2 then goto L42cd00;
  #L42ccd6.  call temp:= `get`(v5, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L42ccdc.  v4:= temp @kind object;
  #L42ccde.  call temp:= `accept`(v4, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L42cce4.  v4:= temp;
  #L42cce6.  if v4 == 0 then goto L42ccec;
  #L42ccea.  return @kind void;
  #L42ccec.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @kind virtual;
  #L42ccf2.  v4:= temp;
  #L42ccf4.  if v4 == 0 then goto L42ccfa;
  #L42ccf8.  return @kind void;
  #L42ccfa.  v3:= v3 + 1;
  #L42ccfe.  goto L42ccd2;
  #L42cd00.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42cd06.  v2:= temp @kind object;
  #L42cd08.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v2 @kind object;
  #L42cd0c.  v1:= -v1 @kind int;
  #L42cd0e.  call temp:= `addAndGet`(v6, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.addAndGet:(I)I` @kind virtual;
  #L42cd14.  v1:= temp;
  #L42cd16.  if v1 != 0 then goto L42cca4;
  #L42cd1a.  return @kind void;
}
