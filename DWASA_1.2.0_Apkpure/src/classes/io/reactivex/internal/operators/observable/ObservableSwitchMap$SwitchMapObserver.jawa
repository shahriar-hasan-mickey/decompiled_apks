record `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.mapper` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @AccessFlag VOLATILE;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42fdb4.  v0:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`;
  #L42fdb8.  v1:= 0I;
  #L42fdba.  v2:= -1L;
  #L42fdbe.  v4:= 1I;
  #L42fdc0.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;JI)V` @kind direct;
  #L42fdc6.  `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` := v0 @kind object;
  #L42fdca.  v0:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` @kind object;
  #L42fdce.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @kind virtual;
  #L42fdd4.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42fde8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42fdee.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42fdf2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42fdf8.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L42fdfc.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L42fe00.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.mapper` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L42fe04.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.bufferSize` @type ^`int` := v4;
  #L42fe08.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @type ^`boolean` := v5 @kind boolean;
  #L42fe0c.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42fe10.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L42fe16.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L42fe1a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fe2c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42fe30.  if v0 != 0 then goto L42fe4a;
  #L42fe34.  v0:= 1I;
  #L42fe36.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42fe3a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42fe3e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42fe44.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.disposeInner:()V` @kind virtual;
  #L42fe4a.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42fe5c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42fe60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42fe66.  v0:= temp @kind object;
  #L42fe68.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v0 @kind object;
  #L42fe6c.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` @kind object;
  #L42fe70.  if v0 == v1 then goto L42fe96;
  #L42fe74.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42fe78.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42fe7e.  v0:= temp @kind object;
  #L42fe80.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v0 @kind object;
  #L42fe84.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` @kind object;
  #L42fe88.  if v0 == v1 then goto L42fe96;
  #L42fe8c.  if v0 == 0 then goto L42fe96;
  #L42fe90.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @kind virtual;
  #L42fe96.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v13 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L42fea8.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.getAndIncrement:()I` @kind virtual;
  #L42feae.  v0:= temp;
  #L42feb0.  if v0 == 0 then goto L42feb6;
  #L42feb4.  return @kind void;
  #L42feb6.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42feba.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42febe.  v2:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L42fec2.  v3:= 1I;
  #L42fec4.  v4:= 1I;
  #L42fec6.  v5:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42feca.  if v5 == 0 then goto L42fed0;
  #L42fece.  return @kind void;
  #L42fed0.  v5:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` @kind boolean;
  #L42fed4.  v6:= 0I;
  #L42fed6.  if v5 == 0 then goto L42ff4c;
  #L42feda.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42fee0.  v5:= temp @kind object;
  #L42fee2.  if v5 != 0 then goto L42feea;
  #L42fee6.  v5:= 1I;
  #L42fee8.  goto L42feec;
  #L42feea.  v5:= 0I;
  #L42feec.  if v2 == 0 then goto L42ff18;
  #L42fef0.  if v5 == 0 then goto L42ff4c;
  #L42fef4.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42fef8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L42fefe.  v1:= temp @kind object;
  #L42ff00.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L42ff04.  if v1 == 0 then goto L42ff10;
  #L42ff08.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ff0e.  goto L42ff16;
  #L42ff10.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42ff16.  return @kind void;
  #L42ff18.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ff1c.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ff22.  v7:= temp @kind object;
  #L42ff24.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L42ff28.  if v7 == 0 then goto L42ff40;
  #L42ff2c.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ff30.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42ff36.  v1:= temp @kind object;
  #L42ff38.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ff3e.  return @kind void;
  #L42ff40.  if v5 == 0 then goto L42ff4c;
  #L42ff44.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42ff4a.  return @kind void;
  #L42ff4c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ff52.  v5:= temp @kind object;
  #L42ff54.  v5:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v5 @kind object;
  #L42ff58.  if v5 == 0 then goto L43007a;
  #L42ff5c.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42ff60.  if v7 == 0 then goto L43007a;
  #L42ff64.  v8:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` @kind boolean;
  #L42ff68.  v9:= 0I;
  #L42ff6a.  if v8 == 0 then goto L42ffba;
  #L42ff6e.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L42ff74.  v8:= temp;
  #L42ff76.  if v2 == 0 then goto L42ff86;
  #L42ff7a.  if v8 == 0 then goto L42ffba;
  #L42ff7e.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42ff84.  goto L42fec6;
  #L42ff86.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ff8a.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ff90.  v10:= temp @kind object;
  #L42ff92.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L42ff96.  if v10 == 0 then goto L42ffae;
  #L42ff9a.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ff9e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42ffa4.  v1:= temp @kind object;
  #L42ffa6.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ffac.  return @kind void;
  #L42ffae.  if v8 == 0 then goto L42ffba;
  #L42ffb2.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42ffb8.  goto L42fec6;
  #L42ffba.  v8:= 0I;
  #L42ffbc.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42ffc0.  if v10 == 0 then goto L42ffc6;
  #L42ffc4.  return @kind void;
  #L42ffc6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ffcc.  v10:= temp @kind object;
  #L42ffce.  if v5 == v10 then goto L42ffd6;
  #L42ffd2.  v8:= 1I;
  #L42ffd4.  goto L43006a;
  #L42ffd6.  if v2 != 0 then goto L430002;
  #L42ffda.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ffde.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ffe4.  v10:= temp @kind object;
  #L42ffe6.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L42ffea.  if v10 == 0 then goto L430002;
  #L42ffee.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42fff2.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42fff8.  v1:= temp @kind object;
  #L42fffa.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430000.  return @kind void;
  #L430002.  v10:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` @kind boolean;
  #L430006.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43000c.  v11:= temp @kind object;
  #L43000e.  goto L43004c;
  #L430010.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L430012.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L430018.  v11:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43001c.  call temp:= `addThrowable`(v11, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L430022.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L430028.  if v2 != 0 then goto L430042;
  #L43002c.  call `disposeInner`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.disposeInner:()V` @kind virtual;
  #L430032.  v8:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430036.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43003c.  v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` := v3 @kind boolean;
  #L430040.  goto L430048;
  #L430042.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @kind virtual;
  #L430048.  v11:= v9 @kind object;
  #L43004a.  v8:= 1I;
  #L43004c.  if v11 != 0 then goto L430054;
  #L430050.  v12:= 1I;
  #L430052.  goto L430056;
  #L430054.  v12:= 0I;
  #L430056.  if v10 == 0 then goto L430066;
  #L43005a.  if v12 == 0 then goto L430066;
  #L43005e.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L430064.  goto L42ffd2;
  #L430066.  if v12 == 0 then goto L430072;
  #L43006a.  if v8 == 0 then goto L43007a;
  #L43006e.  goto L42fec6;
  #L430072.  call `onNext`(v0, v11) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L430078.  goto L42ffbc;
  #L43007a.  v4:= -v4 @kind int;
  #L43007c.  call temp:= `addAndGet`(v13, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.addAndGet:(I)I` @kind virtual;
  #L430082.  v4:= temp;
  #L430084.  if v4 != 0 then goto L42fec6;
  #L430088.  return @kind void;
  catch `java.lang.Throwable` @[L430006..L43000e] goto L430010;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4300a8.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @type ^`long` @kind wide;
  #L4300ac.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` @kind wide;
  #L4300b0.  v4:= lcmp(v0, v2);
  #L4300b4.  if v4 != 0 then goto L4300e8;
  #L4300b8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4300bc.  call temp:= `addThrowable`(v0, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4300c2.  v0:= temp;
  #L4300c4.  if v0 == 0 then goto L4300e8;
  #L4300c8.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L4300cc.  if v7 != 0 then goto L4300da;
  #L4300d0.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4300d4.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4300da.  v7:= 1I;
  #L4300dc.  v6.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` := v7 @kind boolean;
  #L4300e0.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L4300e6.  goto L4300ee;
  #L4300e8.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4300ee.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fd9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42fda0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430100.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` @kind boolean;
  #L430104.  if v0 != 0 then goto L430114;
  #L430108.  v0:= 1I;
  #L43010a.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43010e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L430114.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430128.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` @kind boolean;
  #L43012c.  if v0 != 0 then goto L43015c;
  #L430130.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L430134.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43013a.  v0:= temp;
  #L43013c.  if v0 == 0 then goto L43015c;
  #L430140.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L430144.  if v2 != 0 then goto L43014e;
  #L430148.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.disposeInner:()V` @kind virtual;
  #L43014e.  v2:= 1I;
  #L430150.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L430154.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L43015a.  goto L430162;
  #L43015c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L430162.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L430174.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` @kind wide;
  #L430178.  v2:= 1L;
  #L43017c.  v0:= v0 + v2 @kind long;
  #L43017e.  v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` := v0 @kind wide;
  #L430182.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L430186.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43018c.  v2:= temp @kind object;
  #L43018e.  v2:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v2 @kind object;
  #L430192.  if v2 == 0 then goto L43019c;
  #L430196.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @kind virtual;
  #L43019c.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L4301a0.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4301a6.  v5:= temp @kind object;
  #L4301a8.  v2:= "The ObservableSource returned is null" @kind object;
  #L4301ac.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4301b2.  v5:= temp @kind object;
  #L4301b4.  v5:= (`io.reactivex.ObservableSource`) v5 @kind object;
  #L4301b8.  v2:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`;
  #L4301bc.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.bufferSize` @type ^`int`;
  #L4301c0.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;JI)V` @kind direct;
  #L4301c6.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4301ca.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4301d0.  v0:= temp @kind object;
  #L4301d2.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v0 @kind object;
  #L4301d6.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` @kind object;
  #L4301da.  if v0 != v1 then goto L4301e0;
  #L4301de.  goto L4301f6;
  #L4301e0.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4301e4.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4301ea.  v0:= temp;
  #L4301ec.  if v0 == 0 then goto L4301c6;
  #L4301f0.  call `subscribe`(v5, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4301f6.  return @kind void;
  #L4301f8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4301fa.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L430200.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430204.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43020a.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L430210.  return @kind void;
  catch `java.lang.Throwable` @[L43019c..L4301b8] goto L4301f8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430230.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430234.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43023a.  v0:= temp;
  #L43023c.  if v0 == 0 then goto L43024e;
  #L430240.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L430244.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430248.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43024e.  return @kind void;
}
