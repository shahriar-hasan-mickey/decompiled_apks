record `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.bufferSupplier` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.buffers` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.timeskip` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41edb4.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L41edb8.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L41edbe.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L41edc4.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L41edc8.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.timespan` @type ^`long` := v4 @kind wide;
  #L41edcc.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.timeskip` @type ^`long` := v6 @kind wide;
  #L41edd0.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L41edd4.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L41edd8.  v2:= new `java.util.LinkedList`;
  #L41eddc.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L41ede2.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.buffers` @type ^`java.util.List` := v2 @kind object;
  #L41ede6.  return @kind void;
}
procedure `void` `access$000`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.access$000:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L41ee2c.  call `fastPathOrderedEmit`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L41ee32.  return @kind void;
}
procedure `void` `access$100`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.access$100:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L41ee44.  call `fastPathOrderedEmit`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L41ee4a.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L41edf8.  v2:= (`java.util.Collection`) v2 @kind object;
  #L41edfc.  call `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.accept:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L41ee02.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.accept:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L41ee14.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41ee1a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L41ee5c.  @monitorenter v1
  #L41ee5e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.buffers` @type ^`java.util.List` @kind object;
  #L41ee62.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L41ee68.  @monitorexit v1
  #L41ee6a.  return @kind void;
  #L41ee6c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ee6e.  @monitorexit v1
  #L41ee70.  throw v0;
  catch `java.lang.Throwable` @[L41ee5e..L41ee70] goto L41ee6c;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ee90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41ee94.  if v0 != 0 then goto L41eeb8;
  #L41ee98.  v0:= 1I;
  #L41ee9a.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41ee9e.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.clear:()V` @kind virtual;
  #L41eea4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41eea8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41eeae.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41eeb2.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L41eeb8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ed9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41eda0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41eecc.  @monitorenter v4
  #L41eece.  v0:= new `java.util.ArrayList`;
  #L41eed2.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.buffers` @type ^`java.util.List` @kind object;
  #L41eed6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L41eedc.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.buffers` @type ^`java.util.List` @kind object;
  #L41eee0.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L41eee6.  @monitorexit v4
  #L41eee8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L41eeee.  v0:= temp @kind object;
  #L41eef0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41eef6.  v1:= temp;
  #L41eef8.  if v1 == 0 then goto L41ef14;
  #L41eefc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41ef02.  v1:= temp @kind object;
  #L41ef04.  v1:= (`java.util.Collection`) v1 @kind object;
  #L41ef08.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41ef0c.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41ef12.  goto L41eef0;
  #L41ef14.  v0:= 1I;
  #L41ef16.  v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41ef1a.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.enter:()Z` @kind virtual;
  #L41ef20.  v0:= temp;
  #L41ef22.  if v0 == 0 then goto L41ef3a;
  #L41ef26.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41ef2a.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ef2e.  v2:= 0I;
  #L41ef30.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41ef34.  call `drainLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L41ef3a.  return @kind void;
  #L41ef3c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ef3e.  @monitorexit v4
  #L41ef40.  goto L41ef44;
  #L41ef42.  throw v0;
  #L41ef44.  goto L41ef42;
  catch `java.lang.Throwable` @[L41eece..L41eee8] goto L41ef3c;
  catch `java.lang.Throwable` @[L41ef3e..L41ef40] goto L41ef3c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ef6c.  v0:= 1I;
  #L41ef6e.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41ef72.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.clear:()V` @kind virtual;
  #L41ef78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ef7c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ef82.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41ef86.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L41ef8c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41efa0.  @monitorenter v2
  #L41efa2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.buffers` @type ^`java.util.List` @kind object;
  #L41efa6.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L41efac.  v0:= temp @kind object;
  #L41efae.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41efb4.  v1:= temp;
  #L41efb6.  if v1 == 0 then goto L41efce;
  #L41efba.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41efc0.  v1:= temp @kind object;
  #L41efc2.  v1:= (`java.util.Collection`) v1 @kind object;
  #L41efc6.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41efcc.  goto L41efae;
  #L41efce.  @monitorexit v2
  #L41efd0.  return @kind void;
  #L41efd2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41efd4.  @monitorexit v2
  #L41efd6.  goto L41efda;
  #L41efd8.  throw v3;
  #L41efda.  goto L41efd8;
  catch `java.lang.Throwable` @[L41efa2..L41efd6] goto L41efd2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v8 @kind this, `io.reactivex.disposables.Disposable` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L41eff8.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41effc.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41f002.  v0:= temp;
  #L41f004.  if v0 == 0 then goto L41f092;
  #L41f008.  v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v9 @kind object;
  #L41f00c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41f010.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41f016.  v0:= temp @kind object;
  #L41f018.  v1:= "The buffer supplied is null" @kind object;
  #L41f01c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41f022.  v0:= temp @kind object;
  #L41f024.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41f028.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.buffers` @type ^`java.util.List` @kind object;
  #L41f02c.  call temp:= `add`(v9, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41f032.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41f036.  call `onSubscribe`(v9, v8) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41f03c.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41f040.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.timeskip` @type ^`long` @kind wide;
  #L41f044.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41f048.  v2:= v8 @kind object;
  #L41f04a.  v3:= v5 @kind wide;
  #L41f04c.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41f052.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41f056.  v1:= new `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver$RemoveFromBufferEmit`;
  #L41f05a.  call `<init>`(v1, v8, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver$RemoveFromBufferEmit;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;Ljava/util/Collection;)V` @kind direct;
  #L41f060.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.timespan` @type ^`long` @kind wide;
  #L41f064.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41f068.  call temp:= `schedule`(v9, v1, v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41f06e.  goto L41f092;
  #L41f070.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41f072.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41f078.  call `dispose`(v9) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41f07e.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41f082.  call `error`(v0, v9) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L41f088.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41f08c.  call `dispose`(v9) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L41f092.  return @kind void;
  catch `java.lang.Throwable` @[L41f00c..L41f028] goto L41f070;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41f0b0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41f0b4.  if v0 == 0 then goto L41f0ba;
  #L41f0b8.  return @kind void;
  #L41f0ba.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41f0be.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41f0c4.  v0:= temp @kind object;
  #L41f0c6.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L41f0ca.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41f0d0.  v0:= temp @kind object;
  #L41f0d2.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41f0d6.  @monitorenter v5
  #L41f0d8.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41f0dc.  if v1 == 0 then goto L41f0e4;
  #L41f0e0.  @monitorexit v5
  #L41f0e2.  return @kind void;
  #L41f0e4.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.buffers` @type ^`java.util.List` @kind object;
  #L41f0e8.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41f0ee.  @monitorexit v5
  #L41f0f0.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41f0f4.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver$RemoveFromBuffer`;
  #L41f0f8.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver$RemoveFromBuffer;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;Ljava/util/Collection;)V` @kind direct;
  #L41f0fe.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.timespan` @type ^`long` @kind wide;
  #L41f102.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41f106.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41f10c.  return @kind void;
  #L41f10e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41f110.  @monitorexit v5
  #L41f112.  throw v0;
  #L41f114.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41f116.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41f11c.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41f120.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41f126.  call `dispose`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver;.dispose:()V` @kind virtual;
  #L41f12c.  return @kind void;
  catch `java.lang.Throwable` @[L41f0ba..L41f0d6] goto L41f114;
  catch `java.lang.Throwable` @[L41f0d8..L41f0f0] goto L41f10e;
  catch `java.lang.Throwable` @[L41f110..L41f112] goto L41f10e;
}
