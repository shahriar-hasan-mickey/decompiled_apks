record `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.Observer` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.disposed` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42467c.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L424682.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L424686.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42468a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L42468e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L424692.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L424698.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L42469c.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L4246a0.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4246a6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L4246aa.  v1:= 1I;
  #L4246ac.  call `lazySet`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.lazySet:(I)V` @kind virtual;
  #L4246b2.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L4246c4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4246d8.  v0:= 1I;
  #L4246da.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L4246de.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4246e2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4246e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4246ec.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4246f2.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.innerComplete:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver;)V` @AccessFlag  {
    temp;
    v0;

  #L424704.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L424708.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42470e.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onComplete:()V` @kind virtual;
  #L424714.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L424728.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42472c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L424732.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L424738.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42461c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L424620.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L424626.  v0:= temp;
  #L424628.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42463c.  v0:= 1I;
  #L42463e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42474c.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.decrementAndGet:()I` @kind virtual;
  #L424752.  v0:= temp;
  #L424754.  if v0 != 0 then goto L42477e;
  #L424758.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42475c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L424762.  v0:= temp @kind object;
  #L424764.  if v0 == 0 then goto L424774;
  #L424768.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42476c.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424772.  goto L42477e;
  #L424774.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L424778.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42477e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424790.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L424794.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42479a.  v0:= temp;
  #L42479c.  if v0 == 0 then goto L4247f8;
  #L4247a0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L4247a4.  if v2 == 0 then goto L4247cc;
  #L4247a8.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.decrementAndGet:()I` @kind virtual;
  #L4247ae.  v2:= temp;
  #L4247b0.  if v2 != 0 then goto L4247fe;
  #L4247b4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4247b8.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4247be.  v2:= temp @kind object;
  #L4247c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4247c4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4247ca.  goto L4247fe;
  #L4247cc.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.dispose:()V` @kind virtual;
  #L4247d2.  v2:= 0I;
  #L4247d4.  call temp:= `getAndSet`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.getAndSet:(I)I` @kind virtual;
  #L4247da.  v2:= temp;
  #L4247dc.  if v2 <= 0 then goto L4247fe;
  #L4247e0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4247e4.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4247ea.  v2:= temp @kind object;
  #L4247ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4247f0.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4247f6.  goto L4247fe;
  #L4247f8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4247fe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L424810.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L424814.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42481a.  v3:= temp @kind object;
  #L42481c.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L424820.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L424826.  v3:= temp @kind object;
  #L424828.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L42482c.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.getAndIncrement:()I` @kind virtual;
  #L424832.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver`;
  #L424836.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;)V` @kind direct;
  #L42483c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.disposed` @type ^`boolean` @kind boolean;
  #L424840.  if v1 != 0 then goto L42485a;
  #L424844.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L424848.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42484e.  v1:= temp;
  #L424850.  if v1 == 0 then goto L42485a;
  #L424854.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42485a.  return @kind void;
  #L42485c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42485e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L424864.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L424868.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42486e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L424874.  return @kind void;
  catch `java.lang.Throwable` @[L424810..L42482c] goto L42485c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424894.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L424898.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42489e.  v0:= temp;
  #L4248a0.  if v0 == 0 then goto L4248b2;
  #L4248a4.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4248a8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4248ac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4248b2.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424668.  v0:= 0I;
  #L42466a.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L424650.  v1:= v1 ^& 2;
  #L424654.  return v1;
}
