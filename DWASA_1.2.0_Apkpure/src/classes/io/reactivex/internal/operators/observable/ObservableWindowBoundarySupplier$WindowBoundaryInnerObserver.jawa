record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.done` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L433c48.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L433c4e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` := v1 @kind object;
  #L433c52.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433c64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.done` @type ^`boolean` @kind boolean;
  #L433c68.  if v0 == 0 then goto L433c6e;
  #L433c6c.  return @kind void;
  #L433c6e.  v0:= 1I;
  #L433c70.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433c74.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` @kind object;
  #L433c78.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerComplete:()V` @kind virtual;
  #L433c7e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433c90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.done` @type ^`boolean` @kind boolean;
  #L433c94.  if v0 == 0 then goto L433ca0;
  #L433c98.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L433c9e.  return @kind void;
  #L433ca0.  v0:= 1I;
  #L433ca2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433ca6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` @kind object;
  #L433caa.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L433cb0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L433cc4.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.done` @type ^`boolean` @kind boolean;
  #L433cc8.  if v1 == 0 then goto L433cce;
  #L433ccc.  return @kind void;
  #L433cce.  v1:= 1I;
  #L433cd0.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L433cd4.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;.dispose:()V` @kind virtual;
  #L433cda.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` @kind object;
  #L433cde.  call `innerNext`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerNext:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;)V` @kind virtual;
  #L433ce4.  return @kind void;
}
