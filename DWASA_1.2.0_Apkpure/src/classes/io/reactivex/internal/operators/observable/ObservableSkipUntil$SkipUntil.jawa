record `io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.frc` @AccessFlag FINAL;
  `io.reactivex.observers.SerializedObserver` `io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.serial` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver` `io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.sus` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSkipUntil` `io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.this$0` @AccessFlag FINAL_SYNTHETIC;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSkipUntil` v1 @kind object, `io.reactivex.internal.disposables.ArrayCompositeDisposable` v2 @kind object, `io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver` v3 @kind object, `io.reactivex.observers.SerializedObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$SkipUntil;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSkipUntil;Lio/reactivex/internal/disposables/ArrayCompositeDisposable;Lio/reactivex/internal/operators/observable/ObservableSkipUntil$SkipUntilObserver;Lio/reactivex/observers/SerializedObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f6a0.  v0.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableSkipUntil` := v1 @kind object;
  #L42f6a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42f6aa.  v0.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.frc` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L42f6ae.  v0.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.sus` @type ^`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver` := v3 @kind object;
  #L42f6b2.  v0.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.serial` @type ^`io.reactivex.observers.SerializedObserver` := v4 @kind object;
  #L42f6b6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$SkipUntil;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f6c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.sus` @type ^`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver` @kind object;
  #L42f6cc.  v1:= 1I;
  #L42f6ce.  v0.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver.notSkipping` @type ^`boolean` := v1 @kind boolean;
  #L42f6d2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$SkipUntil;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f6e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.frc` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L42f6e8.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L42f6ee.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.serial` @type ^`io.reactivex.observers.SerializedObserver` @kind object;
  #L42f6f2.  call `onError`(v0, v2) @signature `Lio/reactivex/observers/SerializedObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42f6f8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$SkipUntil;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f70c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f710.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42f716.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.sus` @type ^`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver` @kind object;
  #L42f71a.  v0:= 1I;
  #L42f71c.  v2.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver.notSkipping` @type ^`boolean` := v0 @kind boolean;
  #L42f720.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$SkipUntil;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f734.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f738.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f73e.  v0:= temp;
  #L42f740.  if v0 == 0 then goto L42f754;
  #L42f744.  v2.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L42f748.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntil.frc` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L42f74c.  v1:= 1I;
  #L42f74e.  call temp:= `setResource`(v0, v1, v3) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42f754.  return @kind void;
}
