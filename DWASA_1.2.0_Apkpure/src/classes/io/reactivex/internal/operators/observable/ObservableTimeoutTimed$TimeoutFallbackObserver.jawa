record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutSupport` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.fallback` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.unit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `io.reactivex.ObservableSource` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L431e20.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L431e26.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L431e2a.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.timeout` @type ^`long` := v2 @kind wide;
  #L431e2e.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L431e32.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L431e36.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.ObservableSource` := v6 @kind object;
  #L431e3a.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L431e3e.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L431e44.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L431e48.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L431e4c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L431e52.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L431e56.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L431e5a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L431e60.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L431e64.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431e78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431e7c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L431e82.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L431e88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L431e8c.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L431e92.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431df8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L431dfe.  v0:= temp @kind object;
  #L431e00.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L431e04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L431e0a.  v0:= temp;
  #L431e0c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L431ea4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L431ea8.  v1:= 9223372036854775807L;
  #L431eb2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L431eb8.  v3:= temp @kind wide;
  #L431eba.  v0:= lcmp(v3, v1);
  #L431ebe.  if v0 == 0 then goto L431ee0;
  #L431ec2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431ec6.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L431ecc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431ed0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L431ed6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L431eda.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L431ee0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L431ef4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L431ef8.  v1:= 9223372036854775807L;
  #L431f02.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L431f08.  v3:= temp @kind wide;
  #L431f0a.  v0:= lcmp(v3, v1);
  #L431f0e.  if v0 == 0 then goto L431f32;
  #L431f12.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431f16.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L431f1c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431f20.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431f26.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L431f2a.  call `dispose`(v6) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L431f30.  goto L431f38;
  #L431f32.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L431f38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L431f4c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L431f50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L431f56.  v0:= temp @kind wide;
  #L431f58.  v2:= 9223372036854775807L;
  #L431f62.  v4:= lcmp(v0, v2);
  #L431f66.  if v4 == 0 then goto L431fa8;
  #L431f6a.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L431f6e.  v3:= 1L;
  #L431f72.  v3:= v3 + v0 @kind long;
  #L431f74.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L431f7a.  v0:= temp;
  #L431f7c.  if v0 != 0 then goto L431f82;
  #L431f80.  goto L431fa8;
  #L431f82.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431f86.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L431f8c.  v0:= temp @kind object;
  #L431f8e.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L431f92.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L431f98.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431f9c.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L431fa2.  call `startTimeout`(v5, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.startTimeout:(J)V` @kind virtual;
  #L431fa8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431fbc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431fc0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L431fc6.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L431fd8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L431fdc.  v1:= 9223372036854775807L;
  #L431fe6.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L431fec.  v4:= temp;
  #L431fee.  if v4 == 0 then goto L432024;
  #L431ff2.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431ff6.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L431ffc.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.ObservableSource` @kind object;
  #L432000.  v5:= 0I;
  #L432002.  v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.ObservableSource` := v5 @kind object;
  #L432006.  v5:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$FallbackObserver`;
  #L43200a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43200e.  call `<init>`(v5, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$FallbackObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L432014.  call `subscribe`(v4, v5) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43201a.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43201e.  call `dispose`(v4) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L432024.  return @kind void;
}
procedure `void` `startTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.startTimeout:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L432038.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L43203c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L432040.  v2:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTask`;
  #L432044.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutTask;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutSupport;)V` @kind direct;
  #L43204a.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.timeout` @type ^`long` @kind wide;
  #L43204e.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L432052.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L432058.  v5:= temp @kind object;
  #L43205a.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L432060.  return @kind void;
}
