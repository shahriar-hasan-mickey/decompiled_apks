record `io.reactivex.internal.operators.observable.ObservableOnErrorNext` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext.allowFatal` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableOnErrorNext.nextSupplier` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42a368.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42a36e.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext.nextSupplier` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42a372.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext.allowFatal` @type ^`boolean` := v3 @kind boolean;
  #L42a376.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42a388.  v0:= new `io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver`;
  #L42a38c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableOnErrorNext.nextSupplier` @type ^`io.reactivex.functions.Function` @kind object;
  #L42a390.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableOnErrorNext.allowFatal` @type ^`boolean` @kind boolean;
  #L42a394.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$OnErrorNextObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L42a39a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver.arbiter` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42a39e.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42a3a4.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableOnErrorNext.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42a3a8.  call `subscribe`(v4, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42a3ae.  return @kind void;
}
