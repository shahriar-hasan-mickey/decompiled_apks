record `io.reactivex.internal.operators.observable.ObservableAll$AllObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableAll$AllObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableAll$AllObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableAll$AllObserver.predicate` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableAll$AllObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAll$AllObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAll$AllObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41c578.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41c57e.  v0.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41c582.  v0.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L41c586.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAll$AllObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAll$AllObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c598.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c59c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41c5a2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableAll$AllObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAll$AllObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c558.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c55c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41c562.  v0:= temp;
  #L41c564.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableAll$AllObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAll$AllObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c5b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.done` @type ^`boolean` @kind boolean;
  #L41c5b8.  if v0 == 0 then goto L41c5be;
  #L41c5bc.  return @kind void;
  #L41c5be.  v0:= 1I;
  #L41c5c0.  v2.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41c5c4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41c5c8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L41c5ce.  v0:= temp @kind object;
  #L41c5d0.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41c5d6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41c5da.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41c5e0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableAll$AllObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAll$AllObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c5f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.done` @type ^`boolean` @kind boolean;
  #L41c5f8.  if v0 == 0 then goto L41c604;
  #L41c5fc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41c602.  return @kind void;
  #L41c604.  v0:= 1I;
  #L41c606.  v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41c60a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41c60e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41c614.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableAll$AllObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAll$AllObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c628.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.done` @type ^`boolean` @kind boolean;
  #L41c62c.  if v0 == 0 then goto L41c632;
  #L41c630.  return @kind void;
  #L41c632.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L41c636.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L41c63c.  v2:= temp;
  #L41c63e.  if v2 != 0 then goto L41c670;
  #L41c642.  v2:= 1I;
  #L41c644.  v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41c648.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c64c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41c652.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41c656.  v0:= 0I;
  #L41c658.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L41c65e.  v0:= temp @kind object;
  #L41c660.  call `onNext`(v2, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41c666.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41c66a.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41c670.  return @kind void;
  #L41c672.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41c674.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41c67a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c67e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41c684.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAll$AllObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41c68a.  return @kind void;
  catch `java.lang.Throwable` @[L41c632..L41c63e] goto L41c672;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableAll$AllObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAll$AllObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c6a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c6ac.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41c6b2.  v0:= temp;
  #L41c6b4.  if v0 == 0 then goto L41c6c6;
  #L41c6b8.  v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41c6bc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAll$AllObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41c6c0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41c6c6.  return @kind void;
}
