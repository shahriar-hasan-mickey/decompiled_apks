record `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.inCompletable` @AccessFlag ;
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.other` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/CompletableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L421008.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42100e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L421012.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.other` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L421016.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L421028.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42102e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420fe0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L420fe6.  v0:= temp @kind object;
  #L420fe8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L420fec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L420ff2.  v0:= temp;
  #L420ff4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421040.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.inCompletable` @type ^`boolean` @kind boolean;
  #L421044.  if v0 == 0 then goto L421054;
  #L421048.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42104c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L421052.  goto L421070;
  #L421054.  v0:= 1I;
  #L421056.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.inCompletable` @type ^`boolean` := v0 @kind boolean;
  #L42105a.  v0:= 0I;
  #L42105c.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L421062.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.other` @type ^`io.reactivex.CompletableSource` @kind object;
  #L421066.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.other` @type ^`io.reactivex.CompletableSource` := v0 @kind object;
  #L42106a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L421070.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421084.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L421088.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42108e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4210a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4210a4.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4210aa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4210bc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4210c2.  v1:= temp;
  #L4210c4.  if v1 == 0 then goto L4210da;
  #L4210c8.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.inCompletable` @type ^`boolean` @kind boolean;
  #L4210cc.  if v1 != 0 then goto L4210da;
  #L4210d0.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4210d4.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4210da.  return @kind void;
}
