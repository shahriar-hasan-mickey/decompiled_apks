record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.done` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.parent` @AccessFlag FINAL;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v1 @kind object, `io.reactivex.subjects.UnicastSubject` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;Lio/reactivex/subjects/UnicastSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4335a4.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4335aa.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` := v1 @kind object;
  #L4335ae.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.w` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L4335b2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4335c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.done` @type ^`boolean` @kind boolean;
  #L4335c8.  if v0 == 0 then goto L4335ce;
  #L4335cc.  return @kind void;
  #L4335ce.  v0:= 1I;
  #L4335d0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4335d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` @kind object;
  #L4335d8.  call `close`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.close:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;)V` @kind virtual;
  #L4335de.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4335f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.done` @type ^`boolean` @kind boolean;
  #L4335f4.  if v0 == 0 then goto L433600;
  #L4335f8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4335fe.  return @kind void;
  #L433600.  v0:= 1I;
  #L433602.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433606.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` @kind object;
  #L43360a.  call `error`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L433610.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L433624.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;.dispose:()V` @kind virtual;
  #L43362a.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;.onComplete:()V` @kind virtual;
  #L433630.  return @kind void;
}
