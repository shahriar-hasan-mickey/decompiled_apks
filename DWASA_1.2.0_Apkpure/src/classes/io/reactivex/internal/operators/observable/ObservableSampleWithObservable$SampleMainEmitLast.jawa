record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d96c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42d972.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42d976.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42d97c.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L42d980.  return @kind void;
}
procedure `void` `completeMain`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.completeMain:()V` @AccessFlag  {
    temp;
    v0;

  #L42d994.  v0:= 1I;
  #L42d996.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.done` @type ^`boolean` := v0 @kind boolean;
  #L42d99a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42d99e.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42d9a4.  v0:= temp;
  #L42d9a6.  if v0 != 0 then goto L42d9ba;
  #L42d9aa.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.emit:()V` @kind virtual;
  #L42d9b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d9b4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d9ba.  return @kind void;
}
procedure `void` `completeOther`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.completeOther:()V` @AccessFlag  {
    temp;
    v0;

  #L42d9cc.  v0:= 1I;
  #L42d9ce.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.done` @type ^`boolean` := v0 @kind boolean;
  #L42d9d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42d9d6.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42d9dc.  v0:= temp;
  #L42d9de.  if v0 != 0 then goto L42d9f2;
  #L42d9e2.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.emit:()V` @kind virtual;
  #L42d9e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d9ec.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d9f2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.run:()V` @AccessFlag  {
    temp;
    v0;

  #L42da04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42da08.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42da0e.  v0:= temp;
  #L42da10.  if v0 != 0 then goto L42da3e;
  #L42da14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.done` @type ^`boolean` @kind boolean;
  #L42da18.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.emit:()V` @kind virtual;
  #L42da1e.  if v0 == 0 then goto L42da2e;
  #L42da22.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42da26.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42da2c.  return @kind void;
  #L42da2e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42da32.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42da38.  v0:= temp;
  #L42da3a.  if v0 != 0 then goto L42da14;
  #L42da3e.  return @kind void;
}
