record `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.isLeft` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L427270.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L427276.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` := v1 @kind object;
  #L42727a.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.isLeft` @type ^`boolean` := v2 @kind boolean;
  #L42727e.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @type ^`int` := v3;
  #L427282.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L427294.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42729a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427248.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L42724e.  v0:= temp @kind object;
  #L427250.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L427254.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42725a.  v0:= temp;
  #L42725c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4272ac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` @kind object;
  #L4272b0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.isLeft` @type ^`boolean` @kind boolean;
  #L4272b4.  call `innerClose`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;.innerClose:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;)V` @kind interface;
  #L4272ba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4272cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` @kind object;
  #L4272d0.  call `innerCloseError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;.innerCloseError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4272d6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4272e8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4272ee.  v2:= temp;
  #L4272f0.  if v2 == 0 then goto L427302;
  #L4272f4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` @kind object;
  #L4272f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.isLeft` @type ^`boolean` @kind boolean;
  #L4272fc.  call `innerClose`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;.innerClose:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;)V` @kind interface;
  #L427302.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L427314.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42731a.  return @kind void;
}
