record `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.boundary` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.bufferSupplier` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.other` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41e2b0.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L41e2b4.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L41e2ba.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L41e2c0.  v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L41e2c4.  v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.boundary` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L41e2c8.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L41e2dc.  v2:= (`java.util.Collection`) v2 @kind object;
  #L41e2e0.  call `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.accept:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L41e2e6.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.accept:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L41e2f8.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e2fc.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41e302.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e314.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41e318.  if v0 != 0 then goto L41e34c;
  #L41e31c.  v0:= 1I;
  #L41e31e.  v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41e322.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.other` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41e326.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41e32c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41e330.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41e336.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.enter:()Z` @kind virtual;
  #L41e33c.  v0:= temp;
  #L41e33e.  if v0 == 0 then goto L41e34c;
  #L41e342.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41e346.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41e34c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e298.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41e29c.  return v0;
}
procedure `void` `next`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41e360.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41e364.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41e36a.  v0:= temp @kind object;
  #L41e36c.  v1:= "The buffer supplied is null" @kind object;
  #L41e370.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41e376.  v0:= temp @kind object;
  #L41e378.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41e37c.  @monitorenter v2
  #L41e37e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41e382.  if v1 != 0 then goto L41e38a;
  #L41e386.  @monitorexit v2
  #L41e388.  return @kind void;
  #L41e38a.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L41e38e.  @monitorexit v2
  #L41e390.  v0:= 0I;
  #L41e392.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L41e398.  return @kind void;
  #L41e39a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e39c.  @monitorexit v2
  #L41e39e.  throw v0;
  #L41e3a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e3a2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41e3a8.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.dispose:()V` @kind virtual;
  #L41e3ae.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e3b2.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41e3b8.  return @kind void;
  catch `java.lang.Throwable` @[L41e360..L41e37c] goto L41e3a0;
  catch `java.lang.Throwable` @[L41e37e..L41e390] goto L41e39a;
  catch `java.lang.Throwable` @[L41e39c..L41e39e] goto L41e39a;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41e3ec.  @monitorenter v3
  #L41e3ee.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41e3f2.  if v0 != 0 then goto L41e3fa;
  #L41e3f6.  @monitorexit v3
  #L41e3f8.  return @kind void;
  #L41e3fa.  v1:= 0I;
  #L41e3fc.  v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L41e400.  @monitorexit v3
  #L41e402.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41e406.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41e40c.  v0:= 1I;
  #L41e40e.  v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41e412.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.enter:()Z` @kind virtual;
  #L41e418.  v0:= temp;
  #L41e41a.  if v0 == 0 then goto L41e42e;
  #L41e41e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41e422.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e426.  v2:= 0I;
  #L41e428.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L41e42e.  return @kind void;
  #L41e430.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e432.  @monitorexit v3
  #L41e434.  throw v0;
  catch `java.lang.Throwable` @[L41e3ee..L41e402] goto L41e430;
  catch `java.lang.Throwable` @[L41e432..L41e434] goto L41e430;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e45c.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.dispose:()V` @kind virtual;
  #L41e462.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e466.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41e46c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e480.  @monitorenter v1
  #L41e482.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41e486.  if v0 != 0 then goto L41e48e;
  #L41e48a.  @monitorexit v1
  #L41e48c.  return @kind void;
  #L41e48e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41e494.  @monitorexit v1
  #L41e496.  return @kind void;
  #L41e498.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e49a.  @monitorexit v1
  #L41e49c.  throw v2;
  catch `java.lang.Throwable` @[L41e482..L41e49c] goto L41e498;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41e4bc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41e4c0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41e4c6.  v0:= temp;
  #L41e4c8.  if v0 == 0 then goto L41e53a;
  #L41e4cc.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L41e4d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41e4d4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41e4da.  v0:= temp @kind object;
  #L41e4dc.  v1:= "The buffer supplied is null" @kind object;
  #L41e4e0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41e4e6.  v0:= temp @kind object;
  #L41e4e8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41e4ec.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L41e4f0.  v3:= new `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferBoundaryObserver`;
  #L41e4f4.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferBoundaryObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$BufferExactBoundaryObserver;)V` @kind direct;
  #L41e4fa.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.other` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L41e4fe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e502.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41e508.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41e50c.  if v0 != 0 then goto L41e53a;
  #L41e510.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.boundary` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41e514.  call `subscribe`(v0, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41e51a.  goto L41e53a;
  #L41e51c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e51e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41e524.  v1:= 1I;
  #L41e526.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L41e52a.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41e530.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41e534.  call `error`(v0, v3) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L41e53a.  return @kind void;
  catch `java.lang.Throwable` @[L41e4d0..L41e4ec] goto L41e51c;
}
