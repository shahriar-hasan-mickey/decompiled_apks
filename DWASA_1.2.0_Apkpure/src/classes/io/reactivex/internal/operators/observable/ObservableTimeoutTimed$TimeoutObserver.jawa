record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutSupport` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.unit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4320a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4320a6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4320aa.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.timeout` @type ^`long` := v2 @kind wide;
  #L4320ae.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4320b2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L4320b6.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L4320ba.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4320c0.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4320c4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4320c8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4320ce.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4320d2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4320e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4320e8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4320ee.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4320f2.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4320f8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432074.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L432078.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43207e.  v0:= temp @kind object;
  #L432080.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L432084.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43208a.  v0:= temp;
  #L43208c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43210c.  v0:= 9223372036854775807L;
  #L432116.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.getAndSet:(J)J` @kind virtual;
  #L43211c.  v2:= temp @kind wide;
  #L43211e.  v4:= lcmp(v2, v0);
  #L432122.  if v4 == 0 then goto L432144;
  #L432126.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L43212a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L432130.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432134.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43213a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43213e.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L432144.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L432158.  v0:= 9223372036854775807L;
  #L432162.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.getAndSet:(J)J` @kind virtual;
  #L432168.  v2:= temp @kind wide;
  #L43216a.  v4:= lcmp(v2, v0);
  #L43216e.  if v4 == 0 then goto L432192;
  #L432172.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L432176.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L43217c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432180.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432186.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43218a.  call `dispose`(v6) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L432190.  goto L432198;
  #L432192.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L432198.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4321ac.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.get:()J` @kind virtual;
  #L4321b2.  v0:= temp @kind wide;
  #L4321b4.  v2:= 9223372036854775807L;
  #L4321be.  v4:= lcmp(v0, v2);
  #L4321c2.  if v4 == 0 then goto L432200;
  #L4321c6.  v2:= 1L;
  #L4321ca.  v2:= v2 + v0 @kind long;
  #L4321cc.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.compareAndSet:(JJ)Z` @kind virtual;
  #L4321d2.  v0:= temp;
  #L4321d4.  if v0 != 0 then goto L4321da;
  #L4321d8.  goto L432200;
  #L4321da.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4321de.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L4321e4.  v0:= temp @kind object;
  #L4321e6.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4321ea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4321f0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4321f4.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4321fa.  call `startTimeout`(v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.startTimeout:(J)V` @kind virtual;
  #L432200.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432214.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L432218.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43221e.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432230.  v0:= 9223372036854775807L;
  #L43223a.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.compareAndSet:(JJ)Z` @kind virtual;
  #L432240.  v3:= temp;
  #L432242.  if v3 == 0 then goto L43226e;
  #L432246.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43224a.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L432250.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432254.  v4:= new `java.util.concurrent.TimeoutException`;
  #L432258.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L43225e.  call `onError`(v3, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432264.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L432268.  call `dispose`(v3) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L43226e.  return @kind void;
}
procedure `void` `startTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.startTimeout:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L432280.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L432284.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L432288.  v2:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTask`;
  #L43228c.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutTask;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutSupport;)V` @kind direct;
  #L432292.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.timeout` @type ^`long` @kind wide;
  #L432296.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L43229a.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4322a0.  v5:= temp @kind object;
  #L4322a2.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4322a8.  return @kind void;
}
