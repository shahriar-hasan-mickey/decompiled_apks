record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferClose` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferOpen` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferSupplier` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.index` @AccessFlag ;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41d6f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41d6fe.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41d702.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L41d706.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferOpen` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L41d70a.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferClose` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L41d70e.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L41d712.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L41d718.  v2:= temp;
  #L41d71a.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L41d720.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L41d724.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L41d728.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L41d72e.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L41d732.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41d736.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41d73c.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41d740.  v1:= new `java.util.LinkedHashMap`;
  #L41d744.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L41d74a.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` := v1 @kind object;
  #L41d74e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L41d752.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L41d758.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41d75c.  return @kind void;
}
procedure `void` `boundaryError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.boundaryError:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L41d770.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41d774.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41d77a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41d77e.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41d784.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41d78a.  return @kind void;
}
procedure `void` `close`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v3 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.close:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L41d79c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41d7a0.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41d7a6.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41d7aa.  call temp:= `size`(v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L41d7b0.  v4:= temp;
  #L41d7b2.  v0:= 1I;
  #L41d7b4.  if v4 != 0 then goto L41d7c6;
  #L41d7b8.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41d7bc.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41d7c2.  v4:= 1I;
  #L41d7c4.  goto L41d7c8;
  #L41d7c6.  v4:= 0I;
  #L41d7c8.  @monitorenter v3
  #L41d7ca.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L41d7ce.  if v1 != 0 then goto L41d7d6;
  #L41d7d2.  @monitorexit v3
  #L41d7d4.  return @kind void;
  #L41d7d6.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41d7da.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L41d7de.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L41d7e4.  v5:= temp @kind object;
  #L41d7e6.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41d7ec.  v5:= temp @kind object;
  #L41d7ee.  call temp:= `offer`(v1, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L41d7f4.  @monitorexit v3
  #L41d7f6.  if v4 == 0 then goto L41d7fe;
  #L41d7fa.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41d7fe.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @kind virtual;
  #L41d804.  return @kind void;
  #L41d806.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41d808.  @monitorexit v3
  #L41d80a.  throw v4;
  catch `java.lang.Throwable` @[L41d7ca..L41d7f6] goto L41d806;
  catch `java.lang.Throwable` @[L41d808..L41d80a] goto L41d806;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d830.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41d834.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41d83a.  v0:= temp;
  #L41d83c.  if v0 == 0 then goto L41d878;
  #L41d840.  v0:= 1I;
  #L41d842.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41d846.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41d84a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L41d850.  @monitorenter v1
  #L41d852.  v0:= 0I;
  #L41d854.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` := v0 @kind object;
  #L41d858.  @monitorexit v1
  #L41d85a.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.getAndIncrement:()I` @kind virtual;
  #L41d860.  v0:= temp;
  #L41d862.  if v0 == 0 then goto L41d878;
  #L41d866.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41d86a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L41d870.  goto L41d878;
  #L41d872.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41d874.  @monitorexit v1
  #L41d876.  throw v0;
  #L41d878.  return @kind void;
  catch `java.lang.Throwable` @[L41d854..L41d85a] goto L41d872;
  catch `java.lang.Throwable` @[L41d874..L41d876] goto L41d872;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41d8a0.  call temp:= `getAndIncrement`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.getAndIncrement:()I` @kind virtual;
  #L41d8a6.  v0:= temp;
  #L41d8a8.  if v0 == 0 then goto L41d8ae;
  #L41d8ac.  return @kind void;
  #L41d8ae.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d8b2.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41d8b6.  v2:= 1I;
  #L41d8b8.  v3:= 1I;
  #L41d8ba.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41d8be.  if v4 == 0 then goto L41d8ca;
  #L41d8c2.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L41d8c8.  return @kind void;
  #L41d8ca.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` @kind boolean;
  #L41d8ce.  if v4 == 0 then goto L41d8fc;
  #L41d8d2.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41d8d6.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L41d8dc.  v5:= temp @kind object;
  #L41d8de.  if v5 == 0 then goto L41d8fc;
  #L41d8e2.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L41d8e8.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41d8ec.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41d8f2.  v1:= temp @kind object;
  #L41d8f4.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41d8fa.  return @kind void;
  #L41d8fc.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L41d902.  v5:= temp @kind object;
  #L41d904.  v5:= (`java.util.Collection`) v5 @kind object;
  #L41d908.  if v5 != 0 then goto L41d910;
  #L41d90c.  v6:= 1I;
  #L41d90e.  goto L41d912;
  #L41d910.  v6:= 0I;
  #L41d912.  if v4 == 0 then goto L41d922;
  #L41d916.  if v6 == 0 then goto L41d922;
  #L41d91a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41d920.  return @kind void;
  #L41d922.  if v6 == 0 then goto L41d936;
  #L41d926.  v3:= -v3 @kind int;
  #L41d928.  call temp:= `addAndGet`(v7, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.addAndGet:(I)I` @kind virtual;
  #L41d92e.  v3:= temp;
  #L41d930.  if v3 != 0 then goto L41d8ba;
  #L41d934.  return @kind void;
  #L41d936.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41d93c.  goto L41d8ba;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d6cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41d6d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41d6d6.  v0:= temp @kind object;
  #L41d6d8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L41d6dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41d6e2.  v0:= temp;
  #L41d6e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41d950.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41d954.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L41d95a.  @monitorenter v3
  #L41d95c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L41d960.  if v0 != 0 then goto L41d968;
  #L41d964.  @monitorexit v3
  #L41d966.  return @kind void;
  #L41d968.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L41d96e.  v0:= temp @kind object;
  #L41d970.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L41d976.  v0:= temp @kind object;
  #L41d978.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41d97e.  v1:= temp;
  #L41d980.  if v1 == 0 then goto L41d99c;
  #L41d984.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41d98a.  v1:= temp @kind object;
  #L41d98c.  v1:= (`java.util.Collection`) v1 @kind object;
  #L41d990.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41d994.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L41d99a.  goto L41d978;
  #L41d99c.  v0:= 0I;
  #L41d99e.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` := v0 @kind object;
  #L41d9a2.  @monitorexit v3
  #L41d9a4.  v0:= 1I;
  #L41d9a6.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41d9aa.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @kind virtual;
  #L41d9b0.  return @kind void;
  #L41d9b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41d9b4.  @monitorexit v3
  #L41d9b6.  goto L41d9ba;
  #L41d9b8.  throw v0;
  #L41d9ba.  goto L41d9b8;
  catch `java.lang.Throwable` @[L41d95c..L41d9a4] goto L41d9b2;
  catch `java.lang.Throwable` @[L41d9b4..L41d9b6] goto L41d9b2;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d9e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41d9e4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41d9ea.  v0:= temp;
  #L41d9ec.  if v0 == 0 then goto L41da18;
  #L41d9f0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41d9f4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L41d9fa.  @monitorenter v1
  #L41d9fc.  v2:= 0I;
  #L41d9fe.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` := v2 @kind object;
  #L41da02.  @monitorexit v1
  #L41da04.  v2:= 1I;
  #L41da06.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41da0a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @kind virtual;
  #L41da10.  goto L41da1e;
  #L41da12.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41da14.  @monitorexit v1
  #L41da16.  throw v2;
  #L41da18.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41da1e.  return @kind void;
  catch `java.lang.Throwable` @[L41d9fe..L41da04] goto L41da12;
  catch `java.lang.Throwable` @[L41da14..L41da16] goto L41da12;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41da44.  @monitorenter v2
  #L41da46.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L41da4a.  if v0 != 0 then goto L41da52;
  #L41da4e.  @monitorexit v2
  #L41da50.  return @kind void;
  #L41da52.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L41da58.  v0:= temp @kind object;
  #L41da5a.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L41da60.  v0:= temp @kind object;
  #L41da62.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41da68.  v1:= temp;
  #L41da6a.  if v1 == 0 then goto L41da82;
  #L41da6e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41da74.  v1:= temp @kind object;
  #L41da76.  v1:= (`java.util.Collection`) v1 @kind object;
  #L41da7a.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41da80.  goto L41da62;
  #L41da82.  @monitorexit v2
  #L41da84.  return @kind void;
  #L41da86.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41da88.  @monitorexit v2
  #L41da8a.  goto L41da8e;
  #L41da8c.  throw v3;
  #L41da8e.  goto L41da8c;
  catch `java.lang.Throwable` @[L41da46..L41da8a] goto L41da86;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41daac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41dab0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41dab6.  v2:= temp;
  #L41dab8.  if v2 == 0 then goto L41dada;
  #L41dabc.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver`;
  #L41dac0.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;)V` @kind direct;
  #L41dac6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41daca.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41dad0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferOpen` @type ^`io.reactivex.ObservableSource` @kind object;
  #L41dad4.  call `subscribe`(v0, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41dada.  return @kind void;
}
procedure `void` `open`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.open:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41daec.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41daf0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41daf6.  v0:= temp @kind object;
  #L41daf8.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L41dafc.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41db02.  v0:= temp @kind object;
  #L41db04.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41db08.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferClose` @type ^`io.reactivex.functions.Function` @kind object;
  #L41db0c.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41db12.  v6:= temp @kind object;
  #L41db14.  v1:= "The bufferClose returned a null ObservableSource" @kind object;
  #L41db18.  call temp:= `requireNonNull`(v6, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41db1e.  v6:= temp @kind object;
  #L41db20.  v6:= (`io.reactivex.ObservableSource`) v6 @kind object;
  #L41db24.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.index` @type ^`long` @kind wide;
  #L41db28.  v3:= 1L;
  #L41db2c.  v3:= v3 + v1 @kind long;
  #L41db2e.  v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.index` @type ^`long` := v3 @kind wide;
  #L41db32.  @monitorenter v5
  #L41db34.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L41db38.  if v3 != 0 then goto L41db40;
  #L41db3c.  @monitorexit v5
  #L41db3e.  return @kind void;
  #L41db40.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L41db46.  v4:= temp @kind object;
  #L41db48.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41db4e.  @monitorexit v5
  #L41db50.  v0:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver`;
  #L41db54.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;J)V` @kind direct;
  #L41db5a.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41db5e.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41db64.  call `subscribe`(v6, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41db6a.  return @kind void;
  #L41db6c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41db6e.  @monitorexit v5
  #L41db70.  throw v6;
  #L41db72.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41db74.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41db7a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41db7e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41db84.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41db8a.  return @kind void;
  catch `java.lang.Throwable` @[L41daec..L41db24] goto L41db72;
  catch `java.lang.Throwable` @[L41db34..L41db50] goto L41db6c;
  catch `java.lang.Throwable` @[L41db6e..L41db70] goto L41db6c;
}
procedure `void` `openComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.openComplete:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;)V` @AccessFlag  {
    temp;
    v0;

  #L41dbbc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41dbc0.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41dbc6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41dbca.  call temp:= `size`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L41dbd0.  v2:= temp;
  #L41dbd2.  if v2 != 0 then goto L41dbec;
  #L41dbd6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41dbda.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41dbe0.  v2:= 1I;
  #L41dbe2.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41dbe6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @kind virtual;
  #L41dbec.  return @kind void;
}
