record `io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.bufferSupplier` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.count` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.size` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.<init>:(Lio/reactivex/Observer;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41d2e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41d2ea.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41d2ee.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.count` @type ^`int` := v2;
  #L41d2f2.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L41d2f6.  return @kind void;
}
procedure `boolean` `createBuffer`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.createBuffer:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41d24c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L41d250.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41d256.  v0:= temp @kind object;
  #L41d258.  v1:= "Empty buffer supplied" @kind object;
  #L41d25c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d262.  v0:= temp @kind object;
  #L41d264.  v0:= (`java.util.Collection`) v0 @kind object;
  #L41d268.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L41d26c.  v0:= 1I;
  #L41d26e.  return v0;
  #L41d270.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41d272.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41d278.  v1:= 0I;
  #L41d27a.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L41d27e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41d282.  if v1 != 0 then goto L41d292;
  #L41d286.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d28a.  call `error`(v0, v1) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L41d290.  goto L41d2a2;
  #L41d292.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41d298.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d29c.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41d2a2.  v0:= 0I;
  #L41d2a4.  return v0;
  catch `java.lang.Throwable` @[L41d24c..L41d268] goto L41d270;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d308.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41d30c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41d312.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d2c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41d2c8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41d2ce.  v0:= temp;
  #L41d2d0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41d324.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41d328.  if v0 == 0 then goto L41d352;
  #L41d32c.  v1:= 0I;
  #L41d32e.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L41d332.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L41d338.  v1:= temp;
  #L41d33a.  if v1 != 0 then goto L41d348;
  #L41d33e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d342.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41d348.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d34c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41d352.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d364.  v0:= 0I;
  #L41d366.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L41d36a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d36e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41d374.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41d388.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.buffer` @type ^`java.util.Collection` @kind object;
  #L41d38c.  if v0 == 0 then goto L41d3c0;
  #L41d390.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41d396.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.size` @type ^`int`;
  #L41d39a.  v3:= v3 + 1;
  #L41d39e.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.size` @type ^`int` := v3;
  #L41d3a2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.count` @type ^`int`;
  #L41d3a6.  if v3 < v1 then goto L41d3c0;
  #L41d3aa.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d3ae.  call `onNext`(v3, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41d3b4.  v3:= 0I;
  #L41d3b6.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.size` @type ^`int` := v3;
  #L41d3ba.  call temp:= `createBuffer`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.createBuffer:()Z` @kind virtual;
  #L41d3c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferExactObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d3d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41d3d8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41d3de.  v0:= temp;
  #L41d3e0.  if v0 == 0 then goto L41d3f2;
  #L41d3e4.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41d3e8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41d3ec.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41d3f2.  return @kind void;
}
