record `io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class {
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.array` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.disposed` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.fusionMode` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.index` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.<init>:(Lio/reactivex/Observer;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L425be4.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L425bea.  v0.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L425bee.  v0.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.array` @type ^`java.lang.Object`[] := v2 @kind object;
  #L425bf2.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425c04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.array` @type ^`java.lang.Object`[] @kind object;
  #L425c08.  v0:= length @variable v0;
  #L425c0a.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.index` @type ^`int` := v0;
  #L425c0e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425c20.  v0:= 1I;
  #L425c22.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.disposed` @type ^`boolean` := v0 @kind boolean;
  #L425c26.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425b44.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.disposed` @type ^`boolean` @kind boolean;
  #L425b48.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L425b5c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.index` @type ^`int`;
  #L425b60.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.array` @type ^`java.lang.Object`[] @kind object;
  #L425b64.  v1:= length @variable v1;
  #L425b66.  if v0 != v1 then goto L425b6e;
  #L425b6a.  v0:= 1I;
  #L425b6c.  goto L425b70;
  #L425b6e.  v0:= 0I;
  #L425b70.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L425ba8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.index` @type ^`int`;
  #L425bac.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.array` @type ^`java.lang.Object`[] @kind object;
  #L425bb0.  v2:= length @variable v1;
  #L425bb2.  if v0 == v2 then goto L425bd0;
  #L425bb6.  v2:= v0 + 1;
  #L425bba.  v3.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.index` @type ^`int` := v2;
  #L425bbe.  v0:= v1[v0] @kind object;
  #L425bc2.  v1:= "The array element is null" @kind object;
  #L425bc6.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L425bcc.  v0:= temp @kind object;
  #L425bce.  return v0 @kind object;
  #L425bd0.  v0:= 0I;
  #L425bd2.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425b84.  v0:= 1I;
  #L425b86.  v2:= v2 ^& v0 @kind int;
  #L425b88.  if v2 == 0 then goto L425b92;
  #L425b8c.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.fusionMode` @type ^`boolean` := v0 @kind boolean;
  #L425b90.  return v0;
  #L425b92.  v2:= 0I;
  #L425b94.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L425c38.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.array` @type ^`java.lang.Object`[] @kind object;
  #L425c3c.  v1:= length @variable v0;
  #L425c3e.  v2:= 0I;
  #L425c40.  if v2 >= v1 then goto L425caa;
  #L425c44.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.isDisposed:()Z` @kind virtual;
  #L425c4a.  v3:= temp;
  #L425c4c.  if v3 != 0 then goto L425caa;
  #L425c50.  v3:= v0[v2] @kind object;
  #L425c54.  if v3 != 0 then goto L425c9a;
  #L425c58.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L425c5c.  v1:= new `java.lang.NullPointerException`;
  #L425c60.  v3:= new `java.lang.StringBuilder`;
  #L425c64.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L425c6a.  v4:= "The " @kind object;
  #L425c6e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425c74.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L425c7a.  v2:= "th element is null" @kind object;
  #L425c7e.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425c84.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L425c8a.  v2:= temp @kind object;
  #L425c8c.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425c92.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425c98.  return @kind void;
  #L425c9a.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L425c9e.  call `onNext`(v4, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L425ca4.  v2:= v2 + 1;
  #L425ca8.  goto L425c40;
  #L425caa.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$FromArrayDisposable;.isDisposed:()Z` @kind virtual;
  #L425cb0.  v0:= temp;
  #L425cb2.  if v0 != 0 then goto L425cc0;
  #L425cb6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L425cba.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L425cc0.  return @kind void;
}
