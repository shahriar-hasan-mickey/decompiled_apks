record `io.reactivex.internal.operators.observable.ObservableScalarXMap` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScalarXMap` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42e0ec.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42e0f2.  v0:= new `java.lang.IllegalStateException`;
  #L42e0f6.  v1:= "No instances!" @kind object;
  #L42e0fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e100.  throw v0;
}
procedure `io.reactivex.Observable` `scalarXMap`(`java.lang.Object` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42e0c8.  v0:= new `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable`;
  #L42e0cc.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarXMapObservable;.<init>:(Ljava/lang/Object;Lio/reactivex/functions/Function;)V` @kind direct;
  #L42e0d2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L42e0d8.  v1:= temp @kind object;
  #L42e0da.  return v1 @kind object;
}
procedure `boolean` `tryScalarXMapSubscribe`(`io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.tryScalarXMapSubscribe:(Lio/reactivex/ObservableSource;Lio/reactivex/Observer;Lio/reactivex/functions/Function;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42dfe8.  v0:= instanceof @variable v1 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L42dfec.  if v0 == 0 then goto L42e092;
  #L42dff0.  v0:= 1I;
  #L42dff2.  v1:= (`java.util.concurrent.Callable`) v1 @kind object;
  #L42dff6.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L42dffc.  v1:= temp @kind object;
  #L42dffe.  if v1 != 0 then goto L42e00a;
  #L42e002.  call `complete`(v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L42e008.  return v0;
  #L42e00a.  call temp:= `apply`(v3, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42e010.  v1:= temp @kind object;
  #L42e012.  v3:= "The mapper returned a null ObservableSource" @kind object;
  #L42e016.  call temp:= `requireNonNull`(v1, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42e01c.  v1:= temp @kind object;
  #L42e01e.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L42e022.  v3:= instanceof @variable v1 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L42e026.  if v3 == 0 then goto L42e06a;
  #L42e02a.  v1:= (`java.util.concurrent.Callable`) v1 @kind object;
  #L42e02e.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L42e034.  v1:= temp @kind object;
  #L42e036.  if v1 != 0 then goto L42e042;
  #L42e03a.  call `complete`(v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L42e040.  return v0;
  #L42e042.  v3:= new `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable`;
  #L42e046.  call `<init>`(v3, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind direct;
  #L42e04c.  call `onSubscribe`(v2, v3) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42e052.  call `run`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @kind virtual;
  #L42e058.  goto L42e070;
  #L42e05a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42e05c.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42e062.  call `error`(v1, v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L42e068.  return v0;
  #L42e06a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42e070.  return v0;
  #L42e072.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42e074.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42e07a.  call `error`(v1, v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L42e080.  return v0;
  #L42e082.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42e084.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42e08a.  call `error`(v1, v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L42e090.  return v0;
  #L42e092.  v1:= 0I;
  #L42e094.  return v1;
  catch `java.lang.Throwable` @[L42dff2..L42dffe] goto L42e082;
  catch `java.lang.Throwable` @[L42e00a..L42e022] goto L42e072;
  catch `java.lang.Throwable` @[L42e02a..L42e036] goto L42e05a;
}
