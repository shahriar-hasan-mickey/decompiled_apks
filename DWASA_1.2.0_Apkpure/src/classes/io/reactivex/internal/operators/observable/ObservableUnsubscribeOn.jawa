record `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn.scheduler` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L432a28.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L432a2e.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L432a32.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L432a44.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L432a48.  v1:= new `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver`;
  #L432a4c.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L432a50.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler;)V` @kind direct;
  #L432a56.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L432a5c.  return @kind void;
}
