record `io.reactivex.internal.operators.observable.ObservableWindow` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableWindow.capacityHint` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow.count` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow.skip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `long` v2 , `long` v4 , `int` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow;.<init>:(Lio/reactivex/ObservableSource;JJI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L434fe4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L434fea.  v0.`io.reactivex.internal.operators.observable.ObservableWindow.count` @type ^`long` := v2 @kind wide;
  #L434fee.  v0.`io.reactivex.internal.operators.observable.ObservableWindow.skip` @type ^`long` := v4 @kind wide;
  #L434ff2.  v0.`io.reactivex.internal.operators.observable.ObservableWindow.capacityHint` @type ^`int` := v6;
  #L434ff6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableWindow` v9 @kind this, `io.reactivex.Observer` v10 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L435008.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.count` @type ^`long` @kind wide;
  #L43500c.  v2:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.skip` @type ^`long` @kind wide;
  #L435010.  v4:= lcmp(v0, v2);
  #L435014.  if v4 != 0 then goto L435036;
  #L435018.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L43501c.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver`;
  #L435020.  v2:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.count` @type ^`long` @kind wide;
  #L435024.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.capacityHint` @type ^`int`;
  #L435028.  call `<init>`(v1, v10, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.<init>:(Lio/reactivex/Observer;JI)V` @kind direct;
  #L43502e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L435034.  goto L43505a;
  #L435036.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L43503a.  v8:= new `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver`;
  #L43503e.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.count` @type ^`long` @kind wide;
  #L435042.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.skip` @type ^`long` @kind wide;
  #L435046.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.capacityHint` @type ^`int`;
  #L43504a.  v1:= v8 @kind object;
  #L43504c.  v2:= v10 @kind object;
  #L43504e.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.<init>:(Lio/reactivex/Observer;JJI)V` @kind direct;
  #L435054.  call `subscribe`(v0, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43505a.  return @kind void;
}
