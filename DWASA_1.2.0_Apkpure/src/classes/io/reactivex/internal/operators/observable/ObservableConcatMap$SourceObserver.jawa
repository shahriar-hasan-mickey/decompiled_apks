record `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.active` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.fusionMode` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.inner` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L420668.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42066e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L420672.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L420676.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.bufferSize` @type ^`int` := v3;
  #L42067a.  v2:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver`;
  #L42067e.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;)V` @kind direct;
  #L420684.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` := v2 @kind object;
  #L420688.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42069c.  v0:= 1I;
  #L42069e.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L4206a2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` @kind object;
  #L4206a6.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.dispose:()V` @kind virtual;
  #L4206ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4206b0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4206b6.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.getAndIncrement:()I` @kind virtual;
  #L4206bc.  v0:= temp;
  #L4206be.  if v0 != 0 then goto L4206cc;
  #L4206c2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4206c6.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4206cc.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4206e0.  call temp:= `getAndIncrement`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.getAndIncrement:()I` @kind virtual;
  #L4206e6.  v0:= temp;
  #L4206e8.  if v0 == 0 then goto L4206ee;
  #L4206ec.  return @kind void;
  #L4206ee.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @type ^`boolean` @kind boolean;
  #L4206f2.  if v0 == 0 then goto L420702;
  #L4206f6.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4206fa.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420700.  return @kind void;
  #L420702.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.active` @type ^`boolean` @kind boolean;
  #L420706.  if v0 != 0 then goto L4207b6;
  #L42070a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` @kind boolean;
  #L42070e.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L420712.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L420718.  v1:= temp @kind object;
  #L42071a.  v2:= 1I;
  #L42071c.  if v1 != 0 then goto L420724;
  #L420720.  v3:= 1I;
  #L420722.  goto L420726;
  #L420724.  v3:= 0I;
  #L420726.  if v0 == 0 then goto L42073e;
  #L42072a.  if v3 == 0 then goto L42073e;
  #L42072e.  v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @type ^`boolean` := v2 @kind boolean;
  #L420732.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420736.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42073c.  return @kind void;
  #L42073e.  if v3 != 0 then goto L4207b6;
  #L420742.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L420746.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42074c.  v0:= temp @kind object;
  #L42074e.  v1:= "The mapper returned a null ObservableSource" @kind object;
  #L420752.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L420758.  v0:= temp @kind object;
  #L42075a.  v0:= (`io.reactivex.ObservableSource`) v0 @kind object;
  #L42075e.  v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.active` @type ^`boolean` := v2 @kind boolean;
  #L420762.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` @kind object;
  #L420766.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42076c.  goto L4207b6;
  #L42076e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420770.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L420776.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @kind virtual;
  #L42077c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L420780.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420786.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42078a.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420790.  return @kind void;
  #L420792.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420794.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42079a.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @kind virtual;
  #L4207a0.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4207a4.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4207aa.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4207ae.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4207b4.  return @kind void;
  #L4207b6.  call temp:= `decrementAndGet`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.decrementAndGet:()I` @kind virtual;
  #L4207bc.  v0:= temp;
  #L4207be.  if v0 != 0 then goto L4206ee;
  #L4207c2.  return @kind void;
  catch `java.lang.Throwable` @[L42070e..L42071a] goto L420792;
  catch `java.lang.Throwable` @[L420742..L42075e] goto L42076e;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L4207ec.  v0:= 0I;
  #L4207ee.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L4207f2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @kind virtual;
  #L4207f8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420650.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @type ^`boolean` @kind boolean;
  #L420654.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42080c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` @kind boolean;
  #L420810.  if v0 == 0 then goto L420816;
  #L420814.  return @kind void;
  #L420816.  v0:= 1I;
  #L420818.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42081c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @kind virtual;
  #L420822.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420834.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` @kind boolean;
  #L420838.  if v0 == 0 then goto L420844;
  #L42083c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L420842.  return @kind void;
  #L420844.  v0:= 1I;
  #L420846.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42084a.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @kind virtual;
  #L420850.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420854.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42085a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42086c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` @kind boolean;
  #L420870.  if v0 == 0 then goto L420876;
  #L420874.  return @kind void;
  #L420876.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.fusionMode` @type ^`int`;
  #L42087a.  if v0 != 0 then goto L420888;
  #L42087e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L420882.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L420888.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @kind virtual;
  #L42088e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4208a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4208a4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4208aa.  v0:= temp;
  #L4208ac.  if v0 == 0 then goto L420924;
  #L4208b0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L4208b4.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L4208b8.  if v0 == 0 then goto L420908;
  #L4208bc.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4208c0.  v0:= 3I;
  #L4208c2.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.requestFusion:(I)I` @kind interface;
  #L4208c8.  v0:= temp;
  #L4208ca.  v1:= 1I;
  #L4208cc.  if v0 != v1 then goto L4208ee;
  #L4208d0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.fusionMode` @type ^`int` := v0;
  #L4208d4.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4208d8.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L4208dc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4208e0.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4208e6.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @kind virtual;
  #L4208ec.  return @kind void;
  #L4208ee.  v1:= 2I;
  #L4208f0.  if v0 != v1 then goto L420908;
  #L4208f4.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.fusionMode` @type ^`int` := v0;
  #L4208f8.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4208fc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420900.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L420906.  return @kind void;
  #L420908.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L42090c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.bufferSize` @type ^`int`;
  #L420910.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L420916.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L42091a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42091e.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L420924.  return @kind void;
}
