record `io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.defaultValue` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$SingleElementObserver;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ef30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42ef36.  v0.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L42ef3a.  v0.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.defaultValue` @type ^`java.lang.Object` := v2 @kind object;
  #L42ef3e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$SingleElementObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ef50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42ef54.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42ef5a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$SingleElementObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ef10.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42ef14.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42ef1a.  v0:= temp;
  #L42ef1c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$SingleElementObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ef6c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.done` @type ^`boolean` @kind boolean;
  #L42ef70.  if v0 == 0 then goto L42ef76;
  #L42ef74.  return @kind void;
  #L42ef76.  v0:= 1I;
  #L42ef78.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42ef7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.value` @type ^`java.lang.Object` @kind object;
  #L42ef80.  v1:= 0I;
  #L42ef82.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L42ef86.  if v0 != 0 then goto L42ef8e;
  #L42ef8a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.defaultValue` @type ^`java.lang.Object` @kind object;
  #L42ef8e.  if v0 == 0 then goto L42ef9e;
  #L42ef92.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42ef96.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42ef9c.  goto L42efb2;
  #L42ef9e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42efa2.  v1:= new `java.util.NoSuchElementException`;
  #L42efa6.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L42efac.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42efb2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$SingleElementObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42efc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.done` @type ^`boolean` @kind boolean;
  #L42efc8.  if v0 == 0 then goto L42efd4;
  #L42efcc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42efd2.  return @kind void;
  #L42efd4.  v0:= 1I;
  #L42efd6.  v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42efda.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42efde.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42efe4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$SingleElementObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42eff8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.done` @type ^`boolean` @kind boolean;
  #L42effc.  if v0 == 0 then goto L42f002;
  #L42f000.  return @kind void;
  #L42f002.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.value` @type ^`java.lang.Object` @kind object;
  #L42f006.  if v0 == 0 then goto L42f034;
  #L42f00a.  v3:= 1I;
  #L42f00c.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.done` @type ^`boolean` := v3 @kind boolean;
  #L42f010.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f014.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42f01a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42f01e.  v0:= new `java.lang.IllegalArgumentException`;
  #L42f022.  v1:= "Sequence contains more than one element!" @kind object;
  #L42f026.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42f02c.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f032.  return @kind void;
  #L42f034.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L42f038.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$SingleElementObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f04c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f050.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f056.  v0:= temp;
  #L42f058.  if v0 == 0 then goto L42f06a;
  #L42f05c.  v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42f060.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$SingleElementObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42f064.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42f06a.  return @kind void;
}
