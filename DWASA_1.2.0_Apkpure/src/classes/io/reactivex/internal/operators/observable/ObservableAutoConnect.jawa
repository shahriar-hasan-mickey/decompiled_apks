record `io.reactivex.internal.operators.observable.ObservableAutoConnect` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableAutoConnect.clients` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableAutoConnect.connection` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableAutoConnect.numberOfObservers` @AccessFlag FINAL;
  `io.reactivex.observables.ConnectableObservable` `io.reactivex.internal.operators.observable.ObservableAutoConnect.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAutoConnect` v0 @kind this, `io.reactivex.observables.ConnectableObservable` v1 @kind object, `int` v2 , `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAutoConnect;.<init>:(Lio/reactivex/observables/ConnectableObservable;ILio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41d07c.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L41d082.  v0.`io.reactivex.internal.operators.observable.ObservableAutoConnect.source` @type ^`io.reactivex.observables.ConnectableObservable` := v1 @kind object;
  #L41d086.  v0.`io.reactivex.internal.operators.observable.ObservableAutoConnect.numberOfObservers` @type ^`int` := v2;
  #L41d08a.  v0.`io.reactivex.internal.operators.observable.ObservableAutoConnect.connection` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L41d08e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L41d092.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41d098.  v0.`io.reactivex.internal.operators.observable.ObservableAutoConnect.clients` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L41d09c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableAutoConnect` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAutoConnect;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d0b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L41d0b4.  call `subscribe`(v0, v2) @signature `Lio/reactivex/observables/ConnectableObservable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L41d0ba.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.clients` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41d0be.  call temp:= `incrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L41d0c4.  v2:= temp;
  #L41d0c6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.numberOfObservers` @type ^`int`;
  #L41d0ca.  if v2 != v0 then goto L41d0dc;
  #L41d0ce.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L41d0d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.connection` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41d0d6.  call `connect`(v2, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L41d0dc.  return @kind void;
}
