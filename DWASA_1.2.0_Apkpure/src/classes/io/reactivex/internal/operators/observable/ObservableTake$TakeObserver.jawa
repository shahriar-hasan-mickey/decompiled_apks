record `io.reactivex.internal.operators.observable.ObservableTake$TakeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.remaining` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$TakeObserver;.<init>:(Lio/reactivex/Observer;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4302ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4302f2.  v0.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4302f6.  v0.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.remaining` @type ^`long` := v2 @kind wide;
  #L4302fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$TakeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43030c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430310.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430316.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$TakeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4302cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4302d0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4302d6.  v0:= temp;
  #L4302d8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$TakeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430328.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.done` @type ^`boolean` @kind boolean;
  #L43032c.  if v0 != 0 then goto L43034a;
  #L430330.  v0:= 1I;
  #L430332.  v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L430336.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43033a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430340.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430344.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43034a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$TakeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43035c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.done` @type ^`boolean` @kind boolean;
  #L430360.  if v0 == 0 then goto L43036c;
  #L430364.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43036a.  return @kind void;
  #L43036c.  v0:= 1I;
  #L43036e.  v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L430372.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430376.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43037c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430380.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430386.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$TakeObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L430398.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.done` @type ^`boolean` @kind boolean;
  #L43039c.  if v0 != 0 then goto L4303e2;
  #L4303a0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.remaining` @type ^`long` @kind wide;
  #L4303a4.  v2:= 1L;
  #L4303a8.  v2:= v0 - v2 @kind long;
  #L4303ac.  v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.remaining` @type ^`long` := v2 @kind wide;
  #L4303b0.  v2:= 0L;
  #L4303b4.  v4:= lcmp(v0, v2);
  #L4303b8.  if v4 <= 0 then goto L4303e2;
  #L4303bc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.remaining` @type ^`long` @kind wide;
  #L4303c0.  v4:= lcmp(v0, v2);
  #L4303c4.  if v4 != 0 then goto L4303cc;
  #L4303c8.  v0:= 1I;
  #L4303ca.  goto L4303ce;
  #L4303cc.  v0:= 0I;
  #L4303ce.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4303d2.  call `onNext`(v1, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4303d8.  if v0 == 0 then goto L4303e2;
  #L4303dc.  call `onComplete`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$TakeObserver;.onComplete:()V` @kind virtual;
  #L4303e2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver` v5 @kind this, `io.reactivex.disposables.Disposable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$TakeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4303f4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4303f8.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4303fe.  v0:= temp;
  #L430400.  if v0 == 0 then goto L43043a;
  #L430404.  v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v6 @kind object;
  #L430408.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.remaining` @type ^`long` @kind wide;
  #L43040c.  v2:= 0L;
  #L430410.  v4:= lcmp(v0, v2);
  #L430414.  if v4 != 0 then goto L430430;
  #L430418.  v0:= 1I;
  #L43041a.  v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43041e.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430424.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430428.  call `complete`(v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L43042e.  goto L43043a;
  #L430430.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTake$TakeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430434.  call `onSubscribe`(v6, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43043a.  return @kind void;
}
