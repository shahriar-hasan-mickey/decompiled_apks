record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier.capacityHint` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier;.<init>:(Lio/reactivex/ObservableSource;Ljava/util/concurrent/Callable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L434164.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L43416a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier.other` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L43416e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier.capacityHint` @type ^`int` := v3;
  #L434172.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L434184.  v0:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver`;
  #L434188.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier.capacityHint` @type ^`int`;
  #L43418c.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier.other` @type ^`java.util.concurrent.Callable` @kind object;
  #L434190.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.<init>:(Lio/reactivex/Observer;ILjava/util/concurrent/Callable;)V` @kind direct;
  #L434196.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L43419a.  call `subscribe`(v4, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4341a0.  return @kind void;
}
