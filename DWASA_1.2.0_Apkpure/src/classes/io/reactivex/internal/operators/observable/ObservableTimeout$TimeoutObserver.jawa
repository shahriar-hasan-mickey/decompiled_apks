record `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSelectorSupport` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.itemTimeoutIndicator` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L431abc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L431ac2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L431ac6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.itemTimeoutIndicator` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L431aca.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L431ace.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L431ad4.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L431ad8.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L431adc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L431ae2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L431ae6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431af8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431afc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L431b02.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431b06.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L431b0c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431a90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431a94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L431a9a.  v0:= temp @kind object;
  #L431a9c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L431aa0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L431aa6.  v0:= temp;
  #L431aa8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L431b20.  v0:= 9223372036854775807L;
  #L431b2a.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.getAndSet:(J)J` @kind virtual;
  #L431b30.  v2:= temp @kind wide;
  #L431b32.  v4:= lcmp(v2, v0);
  #L431b36.  if v4 == 0 then goto L431b4e;
  #L431b3a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431b3e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L431b44.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431b48.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L431b4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L431b60.  v0:= 9223372036854775807L;
  #L431b6a.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.getAndSet:(J)J` @kind virtual;
  #L431b70.  v2:= temp @kind wide;
  #L431b72.  v4:= lcmp(v2, v0);
  #L431b76.  if v4 == 0 then goto L431b90;
  #L431b7a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431b7e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L431b84.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431b88.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431b8e.  goto L431b96;
  #L431b90.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L431b96.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L431ba8.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.get:()J` @kind virtual;
  #L431bae.  v0:= temp @kind wide;
  #L431bb0.  v2:= 9223372036854775807L;
  #L431bba.  v4:= lcmp(v0, v2);
  #L431bbe.  if v4 == 0 then goto L431c66;
  #L431bc2.  v4:= 1L;
  #L431bc6.  v4:= v4 + v0 @kind long;
  #L431bc8.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.compareAndSet:(JJ)Z` @kind virtual;
  #L431bce.  v0:= temp;
  #L431bd0.  if v0 != 0 then goto L431bd6;
  #L431bd4.  goto L431c66;
  #L431bd6.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431bda.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L431be0.  v0:= temp @kind object;
  #L431be2.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L431be6.  if v0 == 0 then goto L431bf0;
  #L431bea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L431bf0.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431bf4.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L431bfa.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.itemTimeoutIndicator` @type ^`io.reactivex.functions.Function` @kind object;
  #L431bfe.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L431c04.  v7:= temp @kind object;
  #L431c06.  v0:= "The itemTimeoutIndicator returned a null ObservableSource." @kind object;
  #L431c0a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L431c10.  v7:= temp @kind object;
  #L431c12.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L431c16.  v0:= new `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer`;
  #L431c1a.  call `<init>`(v0, v4, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutSelectorSupport;)V` @kind direct;
  #L431c20.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431c24.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L431c2a.  v1:= temp;
  #L431c2c.  if v1 == 0 then goto L431c36;
  #L431c30.  call `subscribe`(v7, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L431c36.  return @kind void;
  #L431c38.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431c3a.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431c40.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431c44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L431c4a.  v0:= temp @kind object;
  #L431c4c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L431c50.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L431c56.  call temp:= `getAndSet`(v6, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.getAndSet:(J)J` @kind virtual;
  #L431c5c.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431c60.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431c66.  return @kind void;
  catch `java.lang.Throwable` @[L431bfa..L431c16] goto L431c38;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431c84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431c88.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L431c8e.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431ca0.  v0:= 9223372036854775807L;
  #L431caa.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.compareAndSet:(JJ)Z` @kind virtual;
  #L431cb0.  v3:= temp;
  #L431cb2.  if v3 == 0 then goto L431cd4;
  #L431cb6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431cba.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L431cc0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431cc4.  v4:= new `java.util.concurrent.TimeoutException`;
  #L431cc8.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L431cce.  call `onError`(v3, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431cd4.  return @kind void;
}
procedure `void` `onTimeoutError`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v2 @kind this, `long` v3 , `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onTimeoutError:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431ce8.  v0:= 9223372036854775807L;
  #L431cf2.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.compareAndSet:(JJ)Z` @kind virtual;
  #L431cf8.  v3:= temp;
  #L431cfa.  if v3 == 0 then goto L431d14;
  #L431cfe.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431d02.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L431d08.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431d0c.  call `onError`(v3, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431d12.  goto L431d1a;
  #L431d14.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L431d1a.  return @kind void;
}
procedure `void` `startFirstTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v3 @kind this, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.startFirstTimeout:(Lio/reactivex/ObservableSource;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L431d2c.  if v4 == 0 then goto L431d54;
  #L431d30.  v0:= new `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer`;
  #L431d34.  v1:= 0L;
  #L431d38.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutSelectorSupport;)V` @kind direct;
  #L431d3e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L431d42.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L431d48.  v1:= temp;
  #L431d4a.  if v1 == 0 then goto L431d54;
  #L431d4e.  call `subscribe`(v4, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L431d54.  return @kind void;
}
