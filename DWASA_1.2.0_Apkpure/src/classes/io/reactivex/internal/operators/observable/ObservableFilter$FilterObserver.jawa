record `io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.filter` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFilter$FilterObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L423aac.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L423ab2.  v0.`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.filter` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L423ab6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFilter$FilterObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423ac8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.sourceMode` @type ^`int`;
  #L423acc.  if v0 != 0 then goto L423af6;
  #L423ad0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.filter` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L423ad4.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L423ada.  v0:= temp;
  #L423adc.  if v0 == 0 then goto L423b02;
  #L423ae0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L423ae4.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L423aea.  goto L423b02;
  #L423aec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L423aee.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFilter$FilterObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L423af4.  return @kind void;
  #L423af6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L423afa.  v0:= 0I;
  #L423afc.  call `onNext`(v2, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L423b02.  return @kind void;
  catch `java.lang.Throwable` @[L423ad0..L423adc] goto L423aec;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFilter$FilterObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L423a78.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L423a7c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.poll:()Ljava/lang/Object;` @kind interface;
  #L423a82.  v0:= temp @kind object;
  #L423a84.  if v0 == 0 then goto L423a98;
  #L423a88.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.filter` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L423a8c.  call temp:= `test`(v1, v0) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L423a92.  v1:= temp;
  #L423a94.  if v1 == 0 then goto L423a78;
  #L423a98.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFilter$FilterObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L423a5c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFilter$FilterObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L423a62.  v1:= temp;
  #L423a64.  return v1;
}
