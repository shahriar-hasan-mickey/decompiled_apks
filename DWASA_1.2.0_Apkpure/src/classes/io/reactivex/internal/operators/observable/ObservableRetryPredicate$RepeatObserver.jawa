record `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.predicate` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.remaining` @AccessFlag ;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.source` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v5 @kind object, `io.reactivex.ObservableSource` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.<init>:(Lio/reactivex/Observer;JLio/reactivex/functions/Predicate;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d174.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42d17a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42d17e.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v5 @kind object;
  #L42d182.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.source` @type ^`io.reactivex.ObservableSource` := v6 @kind object;
  #L42d186.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.predicate` @type ^`io.reactivex.functions.Predicate` := v4 @kind object;
  #L42d18a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.remaining` @type ^`long` := v2 @kind wide;
  #L42d18e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d1a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d1a4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d1aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42d1bc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.remaining` @type ^`long` @kind wide;
  #L42d1c0.  v2:= 9223372036854775807L;
  #L42d1ca.  v4:= lcmp(v0, v2);
  #L42d1ce.  if v4 == 0 then goto L42d1de;
  #L42d1d2.  v2:= 1L;
  #L42d1d6.  v2:= v0 - v2 @kind long;
  #L42d1da.  v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.remaining` @type ^`long` := v2 @kind wide;
  #L42d1de.  v2:= 0L;
  #L42d1e2.  v4:= lcmp(v0, v2);
  #L42d1e6.  if v4 != 0 then goto L42d1f6;
  #L42d1ea.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d1ee.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d1f4.  goto L42d218;
  #L42d1f6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L42d1fa.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L42d200.  v0:= temp;
  #L42d202.  if v0 != 0 then goto L42d212;
  #L42d206.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d20a.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d210.  return @kind void;
  #L42d212.  call `subscribeNext`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.subscribeNext:()V` @kind virtual;
  #L42d218.  return @kind void;
  #L42d21a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d21c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d222.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d226.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L42d22a.  v3:= 2I;
  #L42d22c.  v3:= new `java.lang.Throwable`[v3];
  #L42d230.  v4:= 0I;
  #L42d232.  v3[v4]:= v6 @kind object;
  #L42d236.  v6:= 1I;
  #L42d238.  v3[v6]:= v0 @kind object;
  #L42d23c.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42d242.  call `onError`(v1, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d248.  return @kind void;
  catch `java.lang.Throwable` @[L42d1f6..L42d202] goto L42d21a;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d268.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d26c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42d272.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d284.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42d288.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42d28e.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42d2a0.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.getAndIncrement:()I` @kind virtual;
  #L42d2a6.  v0:= temp;
  #L42d2a8.  if v0 != 0 then goto L42d2d8;
  #L42d2ac.  v0:= 1I;
  #L42d2ae.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42d2b2.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L42d2b8.  v1:= temp;
  #L42d2ba.  if v1 == 0 then goto L42d2c0;
  #L42d2be.  return @kind void;
  #L42d2c0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42d2c4.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42d2ca.  v0:= -v0 @kind int;
  #L42d2cc.  call temp:= `addAndGet`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.addAndGet:(I)I` @kind virtual;
  #L42d2d2.  v0:= temp;
  #L42d2d4.  if v0 != 0 then goto L42d2ae;
  #L42d2d8.  return @kind void;
}
