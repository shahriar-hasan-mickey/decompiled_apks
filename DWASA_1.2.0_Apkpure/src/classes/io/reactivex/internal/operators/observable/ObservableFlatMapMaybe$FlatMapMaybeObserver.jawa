record `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L424dc4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L424dca.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L424dce.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L424dd2.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L424dd6.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L424dda.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L424de0.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L424de4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L424de8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L424dee.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L424df2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L424df6.  v2:= 1I;
  #L424df8.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L424dfe.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L424e02.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L424e06.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L424e0c.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L424e10.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L424e24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424e28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L424e2e.  v0:= temp @kind object;
  #L424e30.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L424e34.  if v0 == 0 then goto L424e3e;
  #L424e38.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L424e3e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424e50.  v0:= 1I;
  #L424e52.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L424e56.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L424e5a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L424e60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L424e64.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L424e6a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L424e7c.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.getAndIncrement:()I` @kind virtual;
  #L424e82.  v0:= temp;
  #L424e84.  if v0 != 0 then goto L424e8e;
  #L424e88.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drainLoop:()V` @kind virtual;
  #L424e8e.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L424ea0.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L424ea4.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L424ea8.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424eac.  v3:= 1I;
  #L424eae.  v4:= 1I;
  #L424eb0.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L424eb4.  if v5 == 0 then goto L424ec0;
  #L424eb8.  call `clear`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.clear:()V` @kind virtual;
  #L424ebe.  return @kind void;
  #L424ec0.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L424ec4.  if v5 != 0 then goto L424ef6;
  #L424ec8.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L424ecc.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L424ed2.  v5:= temp @kind object;
  #L424ed4.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L424ed8.  if v5 == 0 then goto L424ef6;
  #L424edc.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L424ee0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L424ee6.  v1:= temp @kind object;
  #L424ee8.  call `clear`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.clear:()V` @kind virtual;
  #L424eee.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424ef4.  return @kind void;
  #L424ef6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L424efc.  v5:= temp;
  #L424efe.  v6:= 0I;
  #L424f00.  if v5 != 0 then goto L424f08;
  #L424f04.  v5:= 1I;
  #L424f06.  goto L424f0a;
  #L424f08.  v5:= 0I;
  #L424f0a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L424f10.  v7:= temp @kind object;
  #L424f12.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L424f16.  if v7 == 0 then goto L424f24;
  #L424f1a.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L424f20.  v7:= temp @kind object;
  #L424f22.  goto L424f26;
  #L424f24.  v7:= 0I;
  #L424f26.  if v7 != 0 then goto L424f2c;
  #L424f2a.  v6:= 1I;
  #L424f2c.  if v5 == 0 then goto L424f54;
  #L424f30.  if v6 == 0 then goto L424f54;
  #L424f34.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L424f38.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L424f3e.  v1:= temp @kind object;
  #L424f40.  if v1 == 0 then goto L424f4c;
  #L424f44.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424f4a.  goto L424f52;
  #L424f4c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L424f52.  return @kind void;
  #L424f54.  if v6 == 0 then goto L424f68;
  #L424f58.  v4:= -v4 @kind int;
  #L424f5a.  call temp:= `addAndGet`(v8, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.addAndGet:(I)I` @kind virtual;
  #L424f60.  v4:= temp;
  #L424f62.  if v4 != 0 then goto L424eb0;
  #L424f66.  return @kind void;
  #L424f68.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L424f6e.  goto L424eb0;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `getOrCreateQueue`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L424d78.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424d7c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L424d82.  v0:= temp @kind object;
  #L424d84.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L424d88.  if v0 == 0 then goto L424d8e;
  #L424d8c.  return v0 @kind object;
  #L424d8e.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L424d92.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L424d98.  v1:= temp;
  #L424d9a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L424da0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424da4.  v2:= 0I;
  #L424da6.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L424dac.  v1:= temp;
  #L424dae.  if v1 == 0 then goto L424d78;
  #L424db2.  return v0 @kind object;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.innerComplete:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L424f80.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L424f84.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L424f8a.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.get:()I` @kind virtual;
  #L424f90.  v3:= temp;
  #L424f92.  if v3 != 0 then goto L42501c;
  #L424f96.  v3:= 1I;
  #L424f98.  v0:= 0I;
  #L424f9a.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.compareAndSet:(II)Z` @kind virtual;
  #L424fa0.  v1:= temp;
  #L424fa2.  if v1 == 0 then goto L42501c;
  #L424fa6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L424faa.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L424fb0.  v1:= temp;
  #L424fb2.  if v1 != 0 then goto L424fb8;
  #L424fb6.  goto L424fba;
  #L424fb8.  v3:= 0I;
  #L424fba.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424fbe.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L424fc4.  v0:= temp @kind object;
  #L424fc6.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L424fca.  if v3 == 0 then goto L425006;
  #L424fce.  if v0 == 0 then goto L424fde;
  #L424fd2.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L424fd8.  v3:= temp;
  #L424fda.  if v3 == 0 then goto L425006;
  #L424fde.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L424fe2.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L424fe8.  v3:= temp @kind object;
  #L424fea.  if v3 == 0 then goto L424ffa;
  #L424fee.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L424ff2.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424ff8.  goto L425004;
  #L424ffa.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L424ffe.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L425004.  return @kind void;
  #L425006.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.decrementAndGet:()I` @kind virtual;
  #L42500c.  v3:= temp;
  #L42500e.  if v3 != 0 then goto L425014;
  #L425012.  return @kind void;
  #L425014.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drainLoop:()V` @kind virtual;
  #L42501a.  goto L42502c;
  #L42501c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L425020.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L425026.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @kind virtual;
  #L42502c.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L425040.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L425044.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42504a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42504e.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L425054.  v2:= temp;
  #L425056.  if v2 == 0 then goto L425088;
  #L42505a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L42505e.  if v2 != 0 then goto L425076;
  #L425062.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L425066.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42506c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L425070.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L425076.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42507a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L425080.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @kind virtual;
  #L425086.  goto L42508e;
  #L425088.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42508e.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.innerSuccess:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4250a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4250a4.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4250aa.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.get:()I` @kind virtual;
  #L4250b0.  v3:= temp;
  #L4250b2.  if v3 != 0 then goto L42513e;
  #L4250b6.  v3:= 1I;
  #L4250b8.  v0:= 0I;
  #L4250ba.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.compareAndSet:(II)Z` @kind virtual;
  #L4250c0.  v1:= temp;
  #L4250c2.  if v1 == 0 then goto L42513e;
  #L4250c6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4250ca.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4250d0.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4250d4.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4250da.  v4:= temp;
  #L4250dc.  if v4 != 0 then goto L4250e2;
  #L4250e0.  goto L4250e4;
  #L4250e2.  v3:= 0I;
  #L4250e4.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4250e8.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4250ee.  v4:= temp @kind object;
  #L4250f0.  v4:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L4250f4.  if v3 == 0 then goto L425130;
  #L4250f8.  if v4 == 0 then goto L425108;
  #L4250fc.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L425102.  v3:= temp;
  #L425104.  if v3 == 0 then goto L425130;
  #L425108.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42510c.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L425112.  v3:= temp @kind object;
  #L425114.  if v3 == 0 then goto L425124;
  #L425118.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42511c.  call `onError`(v4, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425122.  goto L42512e;
  #L425124.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L425128.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42512e.  return @kind void;
  #L425130.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.decrementAndGet:()I` @kind virtual;
  #L425136.  v3:= temp;
  #L425138.  if v3 != 0 then goto L425168;
  #L42513c.  return @kind void;
  #L42513e.  call temp:= `getOrCreateQueue`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L425144.  v3:= temp @kind object;
  #L425146.  @monitorenter v3
  #L425148.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L42514e.  @monitorexit v3
  #L425150.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L425154.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42515a.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.getAndIncrement:()I` @kind virtual;
  #L425160.  v3:= temp;
  #L425162.  if v3 == 0 then goto L425168;
  #L425166.  return @kind void;
  #L425168.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drainLoop:()V` @kind virtual;
  #L42516e.  return @kind void;
  #L425170.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L425172.  @monitorexit v3
  #L425174.  throw v4;
  catch `java.lang.Throwable` @[L425148..L425150] goto L425170;
  catch `java.lang.Throwable` @[L425172..L425174] goto L425170;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424d60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L424d64.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42519c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4251a0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4251a6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @kind virtual;
  #L4251ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4251c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4251c4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4251ca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4251ce.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4251d4.  v0:= temp;
  #L4251d6.  if v0 == 0 then goto L4251f4;
  #L4251da.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L4251de.  if v2 != 0 then goto L4251ec;
  #L4251e2.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4251e6.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4251ec.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @kind virtual;
  #L4251f2.  goto L4251fa;
  #L4251f4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4251fa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42520c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L425210.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L425216.  v3:= temp @kind object;
  #L425218.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L42521c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L425222.  v3:= temp @kind object;
  #L425224.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L425228.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42522c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L425232.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver`;
  #L425236.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;)V` @kind direct;
  #L42523c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L425240.  if v1 != 0 then goto L42525a;
  #L425244.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L425248.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42524e.  v1:= temp;
  #L425250.  if v1 == 0 then goto L42525a;
  #L425254.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42525a.  return @kind void;
  #L42525c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42525e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L425264.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L425268.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42526e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L425274.  return @kind void;
  catch `java.lang.Throwable` @[L42520c..L425228] goto L42525c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425294.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L425298.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42529e.  v0:= temp;
  #L4252a0.  if v0 == 0 then goto L4252b2;
  #L4252a4.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4252a8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4252ac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4252b2.  return @kind void;
}
