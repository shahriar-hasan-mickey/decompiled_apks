record `io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.collector` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.downstream` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.u` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$CollectObserver;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f840.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41f846.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41f84a.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.collector` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L41f84e.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.u` @type ^`java.lang.Object` := v2 @kind object;
  #L41f852.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$CollectObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f864.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41f868.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41f86e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$CollectObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f820.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41f824.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41f82a.  v0:= temp;
  #L41f82c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$CollectObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41f880.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.done` @type ^`boolean` @kind boolean;
  #L41f884.  if v0 == 0 then goto L41f88a;
  #L41f888.  return @kind void;
  #L41f88a.  v0:= 1I;
  #L41f88c.  v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41f890.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41f894.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.u` @type ^`java.lang.Object` @kind object;
  #L41f898.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41f89e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41f8a2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41f8a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$CollectObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f8bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.done` @type ^`boolean` @kind boolean;
  #L41f8c0.  if v0 == 0 then goto L41f8cc;
  #L41f8c4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41f8ca.  return @kind void;
  #L41f8cc.  v0:= 1I;
  #L41f8ce.  v1.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41f8d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41f8d6.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41f8dc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$CollectObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41f8f0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.done` @type ^`boolean` @kind boolean;
  #L41f8f4.  if v0 == 0 then goto L41f8fa;
  #L41f8f8.  return @kind void;
  #L41f8fa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.collector` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L41f8fe.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.u` @type ^`java.lang.Object` @kind object;
  #L41f902.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L41f908.  goto L41f91c;
  #L41f90a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41f90c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41f910.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41f916.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$CollectObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41f91c.  return @kind void;
  catch `java.lang.Throwable` @[L41f8fa..L41f908] goto L41f90a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$CollectObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f93c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41f940.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41f946.  v0:= temp;
  #L41f948.  if v0 == 0 then goto L41f95a;
  #L41f94c.  v1.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41f950.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$CollectObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41f954.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41f95a.  return @kind void;
}
