record `io.reactivex.internal.operators.observable.ObservableReplay$ReplayBufferSupplier` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableReplay$BufferSupplier` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayBufferSupplier.bufferSize` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBufferSupplier` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBufferSupplier;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42c4d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42c4da.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBufferSupplier.bufferSize` @type ^`int` := v1;
  #L42c4de.  return @kind void;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer` `call`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBufferSupplier` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBufferSupplier;.call:()Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c4b4.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$SizeBoundReplayBuffer`;
  #L42c4b8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayBufferSupplier.bufferSize` @type ^`int`;
  #L42c4bc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L42c4c2.  return v0 @kind object;
}
