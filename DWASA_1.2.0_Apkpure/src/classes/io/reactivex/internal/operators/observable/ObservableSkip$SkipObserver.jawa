record `io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.remaining` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$SkipObserver;.<init>:(Lio/reactivex/Observer;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f0e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42f0ee.  v0.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42f0f2.  v0.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.remaining` @type ^`long` := v2 @kind wide;
  #L42f0f6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$SkipObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f108.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f10c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42f112.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$SkipObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f0c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f0cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42f0d2.  v0:= temp;
  #L42f0d4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$SkipObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f124.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f128.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42f12e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$SkipObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f140.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f144.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f14a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$SkipObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42f15c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.remaining` @type ^`long` @kind wide;
  #L42f160.  v2:= 0L;
  #L42f164.  v4:= lcmp(v0, v2);
  #L42f168.  if v4 == 0 then goto L42f178;
  #L42f16c.  v2:= 1L;
  #L42f170.  v0:= v0 - v2 @kind long;
  #L42f172.  v5.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.remaining` @type ^`long` := v0 @kind wide;
  #L42f176.  goto L42f182;
  #L42f178.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f17c.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42f182.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$SkipObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f194.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f198.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f19e.  v0:= temp;
  #L42f1a0.  if v0 == 0 then goto L42f1b2;
  #L42f1a4.  v1.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42f1a8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$SkipObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f1ac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42f1b2.  return @kind void;
}
