record `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.comparer` @AccessFlag FINAL;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.first` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver`[] `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.resources` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.second` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object, `io.reactivex.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42e8bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42e8c2.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L42e8c6.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L42e8ca.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L42e8ce.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.comparer` @type ^`io.reactivex.functions.BiPredicate` := v5 @kind object;
  #L42e8d2.  v1:= 2I;
  #L42e8d4.  v3:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver`[v1];
  #L42e8d8.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver`[] := v3 @kind object;
  #L42e8dc.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver`;
  #L42e8e0.  v5:= 0I;
  #L42e8e2.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;II)V` @kind direct;
  #L42e8e8.  v3[v5]:= v4 @kind object;
  #L42e8ec.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver`;
  #L42e8f0.  v5:= 1I;
  #L42e8f2.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;II)V` @kind direct;
  #L42e8f8.  v3[v5]:= v4 @kind object;
  #L42e8fc.  v2:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L42e900.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L42e906.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L42e90a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L42e91c.  v0:= 1I;
  #L42e91e.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42e922.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e928.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e92e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42e940.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L42e944.  if v0 != 0 then goto L42e986;
  #L42e948.  v0:= 1I;
  #L42e94a.  v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42e94e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L42e952.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L42e958.  call temp:= `getAndIncrement`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.getAndIncrement:()I` @kind virtual;
  #L42e95e.  v1:= temp;
  #L42e960.  if v1 != 0 then goto L42e986;
  #L42e964.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver`[] @kind object;
  #L42e968.  v2:= 0I;
  #L42e96a.  v2:= v1[v2] @kind object;
  #L42e96e.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42e972.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e978.  v0:= v1[v0] @kind object;
  #L42e97c.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42e980.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e986.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L42e998.  call temp:= `getAndIncrement`(v12) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.getAndIncrement:()I` @kind virtual;
  #L42e99e.  v0:= temp;
  #L42e9a0.  if v0 == 0 then goto L42e9a6;
  #L42e9a4.  return @kind void;
  #L42e9a6.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver`[] @kind object;
  #L42e9aa.  v1:= 0I;
  #L42e9ac.  v2:= v0[v1] @kind object;
  #L42e9b0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42e9b4.  v4:= 1I;
  #L42e9b6.  v0:= v0[v4] @kind object;
  #L42e9ba.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42e9be.  v6:= 1I;
  #L42e9c0.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L42e9c4.  if v7 == 0 then goto L42e9d6;
  #L42e9c8.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e9ce.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L42e9d4.  return @kind void;
  #L42e9d6.  v7:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.done` @type ^`boolean` @kind boolean;
  #L42e9da.  if v7 == 0 then goto L42e9f8;
  #L42e9de.  v8:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L42e9e2.  if v8 == 0 then goto L42e9f8;
  #L42e9e6.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42e9ec.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42e9f0.  call `onError`(v0, v8) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e9f6.  return @kind void;
  #L42e9f8.  v8:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.done` @type ^`boolean` @kind boolean;
  #L42e9fc.  if v8 == 0 then goto L42ea1a;
  #L42ea00.  v9:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L42ea04.  if v9 == 0 then goto L42ea1a;
  #L42ea08.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42ea0e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42ea12.  call `onError`(v0, v9) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ea18.  return @kind void;
  #L42ea1a.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L42ea1e.  if v9 != 0 then goto L42ea2e;
  #L42ea22.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L42ea28.  v9:= temp @kind object;
  #L42ea2a.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` := v9 @kind object;
  #L42ea2e.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L42ea32.  if v9 != 0 then goto L42ea3a;
  #L42ea36.  v9:= 1I;
  #L42ea38.  goto L42ea3c;
  #L42ea3a.  v9:= 0I;
  #L42ea3c.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L42ea40.  if v10 != 0 then goto L42ea50;
  #L42ea44.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L42ea4a.  v10:= temp @kind object;
  #L42ea4c.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` := v10 @kind object;
  #L42ea50.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L42ea54.  if v10 != 0 then goto L42ea5c;
  #L42ea58.  v10:= 1I;
  #L42ea5a.  goto L42ea5e;
  #L42ea5c.  v10:= 0I;
  #L42ea5e.  if v7 == 0 then goto L42ea82;
  #L42ea62.  if v8 == 0 then goto L42ea82;
  #L42ea66.  if v9 == 0 then goto L42ea82;
  #L42ea6a.  if v10 == 0 then goto L42ea82;
  #L42ea6e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42ea72.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L42ea78.  v1:= temp @kind object;
  #L42ea7a.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42ea80.  return @kind void;
  #L42ea82.  if v7 == 0 then goto L42eaa8;
  #L42ea86.  if v8 == 0 then goto L42eaa8;
  #L42ea8a.  if v9 == v10 then goto L42eaa8;
  #L42ea8e.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42ea94.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42ea98.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L42ea9e.  v1:= temp @kind object;
  #L42eaa0.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42eaa6.  return @kind void;
  #L42eaa8.  if v9 != 0 then goto L42eb08;
  #L42eaac.  if v10 != 0 then goto L42eb08;
  #L42eab0.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L42eab4.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L42eab8.  v11:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L42eabc.  call temp:= `test`(v7, v8, v11) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L42eac2.  v7:= temp;
  #L42eac4.  if v7 != 0 then goto L42eae2;
  #L42eac8.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42eace.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42ead2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L42ead8.  v1:= temp @kind object;
  #L42eada.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42eae0.  return @kind void;
  #L42eae2.  v7:= 0I;
  #L42eae4.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` := v7 @kind object;
  #L42eae8.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` := v7 @kind object;
  #L42eaec.  goto L42eb08;
  #L42eaee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42eaf0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42eaf6.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L42eafc.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42eb00.  call `onError`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42eb06.  return @kind void;
  #L42eb08.  if v9 != 0 then goto L42eb10;
  #L42eb0c.  if v10 == 0 then goto L42e9c0;
  #L42eb10.  v6:= -v6 @kind int;
  #L42eb12.  call temp:= `addAndGet`(v12, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.addAndGet:(I)I` @kind virtual;
  #L42eb18.  v6:= temp;
  #L42eb1a.  if v6 != 0 then goto L42e9c0;
  #L42eb1e.  return @kind void;
  catch `java.lang.Throwable` @[L42eab0..L42eac4] goto L42eaee;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e884.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L42e888.  return v0;
}
procedure `boolean` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.setDisposable:(Lio/reactivex/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L42e89c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L42e8a0.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42e8a6.  v2:= temp;
  #L42e8a8.  return v2;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.subscribe:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42eb3c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver`[] @kind object;
  #L42eb40.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42eb44.  v2:= 0I;
  #L42eb46.  v2:= v0[v2] @kind object;
  #L42eb4a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42eb50.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42eb54.  v2:= 1I;
  #L42eb56.  v0:= v0[v2] @kind object;
  #L42eb5a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42eb60.  return @kind void;
}
