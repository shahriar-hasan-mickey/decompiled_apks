record `io.reactivex.internal.operators.observable.ObservableCache$CacheState` @kind class @AccessFlag FINAL extends `io.reactivex.internal.util.LinkedArrayList` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableCache$CacheState.connection` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache$CacheState.isConnected` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @AccessFlag FINAL;
  `io.reactivex.Observable` `io.reactivex.internal.operators.observable.ObservableCache$CacheState.source` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache$CacheState.sourceDone` @AccessFlag ;
}
global `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41f354.  v0:= 0I;
  #L41f356.  v1:= new `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[v0];
  #L41f35a.  `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] := v1 @kind object;
  #L41f35e.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[v0];
  #L41f362.  `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] := v0 @kind object;
  #L41f366.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache$CacheState` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.<init>:(Lio/reactivex/Observable;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f378.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/LinkedArrayList;.<init>:(I)V` @kind direct;
  #L41f37e.  v0.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.source` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L41f382.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41f386.  v2:= `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] @kind object;
  #L41f38a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L41f390.  v0.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41f394.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L41f398.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L41f39e.  v0.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.connection` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L41f3a2.  return @kind void;
}
procedure `boolean` `addChild`(`io.reactivex.internal.operators.observable.ObservableCache$CacheState` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.addChild:(Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41f300.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f304.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f30a.  v0:= temp @kind object;
  #L41f30c.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[]) v0 @kind object;
  #L41f310.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] @kind object;
  #L41f314.  v2:= 0I;
  #L41f316.  if v0 != v1 then goto L41f31c;
  #L41f31a.  return v2;
  #L41f31c.  v1:= length @variable v0;
  #L41f31e.  v3:= v1 + 1;
  #L41f322.  v3:= new `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[v3];
  #L41f326.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41f32c.  v3[v1]:= v5 @kind object;
  #L41f330.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f334.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41f33a.  v0:= temp;
  #L41f33c.  if v0 == 0 then goto L41f300;
  #L41f340.  v5:= 1I;
  #L41f342.  return v5;
}
procedure `void` `connect`(`io.reactivex.internal.operators.observable.ObservableCache$CacheState` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.connect:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f3b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.source` @type ^`io.reactivex.Observable` @kind object;
  #L41f3b8.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L41f3be.  v0:= 1I;
  #L41f3c0.  v1.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.isConnected` @type ^`boolean` := v0 @kind boolean;
  #L41f3c4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCache$CacheState` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41f3d8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L41f3dc.  if v0 != 0 then goto L41f42a;
  #L41f3e0.  v0:= 1I;
  #L41f3e2.  v4.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.sourceDone` @type ^`boolean` := v0 @kind boolean;
  #L41f3e6.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L41f3ec.  v0:= temp @kind object;
  #L41f3ee.  call `add`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L41f3f4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.connection` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L41f3f8.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L41f3fe.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f402.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] @kind object;
  #L41f406.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41f40c.  v0:= temp @kind object;
  #L41f40e.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[]) v0 @kind object;
  #L41f412.  v1:= length @variable v0;
  #L41f414.  v2:= 0I;
  #L41f416.  if v2 >= v1 then goto L41f42a;
  #L41f41a.  v3:= v0[v2] @kind object;
  #L41f41e.  call `replay`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.replay:()V` @kind virtual;
  #L41f424.  v2:= v2 + 1;
  #L41f428.  goto L41f416;
  #L41f42a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCache$CacheState` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41f43c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L41f440.  if v0 != 0 then goto L41f48e;
  #L41f444.  v0:= 1I;
  #L41f446.  v3.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.sourceDone` @type ^`boolean` := v0 @kind boolean;
  #L41f44a.  call temp:= `error`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L41f450.  v4:= temp @kind object;
  #L41f452.  call `add`(v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L41f458.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.connection` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L41f45c.  call `dispose`(v4) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L41f462.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f466.  v0:= `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] @kind object;
  #L41f46a.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41f470.  v4:= temp @kind object;
  #L41f472.  v4:= (`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[]) v4 @kind object;
  #L41f476.  v0:= length @variable v4;
  #L41f478.  v1:= 0I;
  #L41f47a.  if v1 >= v0 then goto L41f48e;
  #L41f47e.  v2:= v4[v1] @kind object;
  #L41f482.  call `replay`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.replay:()V` @kind virtual;
  #L41f488.  v1:= v1 + 1;
  #L41f48c.  goto L41f47a;
  #L41f48e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCache$CacheState` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41f4a0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L41f4a4.  if v0 != 0 then goto L41f4de;
  #L41f4a8.  call temp:= `next`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L41f4ae.  v4:= temp @kind object;
  #L41f4b0.  call `add`(v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L41f4b6.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f4ba.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f4c0.  v4:= temp @kind object;
  #L41f4c2.  v4:= (`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[]) v4 @kind object;
  #L41f4c6.  v0:= length @variable v4;
  #L41f4c8.  v1:= 0I;
  #L41f4ca.  if v1 >= v0 then goto L41f4de;
  #L41f4ce.  v2:= v4[v1] @kind object;
  #L41f4d2.  call `replay`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;.replay:()V` @kind virtual;
  #L41f4d8.  v1:= v1 + 1;
  #L41f4dc.  goto L41f4ca;
  #L41f4de.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCache$CacheState` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f4f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.connection` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L41f4f4.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41f4fa.  return @kind void;
}
procedure `void` `removeChild`(`io.reactivex.internal.operators.observable.ObservableCache$CacheState` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheState;.removeChild:(Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41f50c.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f510.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f516.  v0:= temp @kind object;
  #L41f518.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[]) v0 @kind object;
  #L41f51c.  v1:= length @variable v0;
  #L41f51e.  if v1 != 0 then goto L41f524;
  #L41f522.  return @kind void;
  #L41f524.  v2:= -1I;
  #L41f526.  v3:= 0I;
  #L41f528.  v4:= 0I;
  #L41f52a.  if v4 >= v1 then goto L41f548;
  #L41f52e.  v5:= v0[v4] @kind object;
  #L41f532.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L41f538.  v5:= temp;
  #L41f53a.  if v5 == 0 then goto L41f542;
  #L41f53e.  v2:= v4;
  #L41f540.  goto L41f548;
  #L41f542.  v4:= v4 + 1;
  #L41f546.  goto L41f52a;
  #L41f548.  if v2 >= 0 then goto L41f54e;
  #L41f54c.  return @kind void;
  #L41f54e.  v4:= 1I;
  #L41f550.  if v1 != v4 then goto L41f55a;
  #L41f554.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache$CacheState.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[] @kind object;
  #L41f558.  goto L41f578;
  #L41f55a.  v5:= v1 + -1;
  #L41f55e.  v5:= new `io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable`[v5];
  #L41f562.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41f568.  v3:= v2 + 1;
  #L41f56c.  v1:= v1 - v2 @kind int;
  #L41f56e.  v1:= v1 - v4 @kind int;
  #L41f570.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41f576.  v1:= v5 @kind object;
  #L41f578.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableCache$CacheState.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f57c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41f582.  v0:= temp;
  #L41f584.  if v0 == 0 then goto L41f50c;
  #L41f588.  return @kind void;
}
