record `io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.count` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$CountObserver;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L421530.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L421536.  v0.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L42153a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$CountObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42154c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L421550.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L421556.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42155a.  v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42155e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$CountObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421510.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L421514.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42151a.  v0:= temp;
  #L42151c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$CountObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L421570.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L421574.  v3.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L421578.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42157c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.count` @type ^`long` @kind wide;
  #L421580.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L421586.  v1:= temp @kind object;
  #L421588.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42158e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$CountObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4215a0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4215a4.  v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4215a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4215ac.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4215b2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$CountObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4215c4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.count` @type ^`long` @kind wide;
  #L4215c8.  v2:= 1L;
  #L4215cc.  v0:= v0 + v2 @kind long;
  #L4215ce.  v4.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.count` @type ^`long` := v0 @kind wide;
  #L4215d2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$CountObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4215e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4215e8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4215ee.  v0:= temp;
  #L4215f0.  if v0 == 0 then goto L421602;
  #L4215f4.  v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4215f8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$CountObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4215fc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L421602.  return @kind void;
}
