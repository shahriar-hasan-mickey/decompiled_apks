record `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.arbiter` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.empty` @AccessFlag ;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$SwitchIfEmptyObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42fb40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42fb46.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42fb4a.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.other` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L42fb4e.  v1:= 1I;
  #L42fb50.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.empty` @type ^`boolean` := v1 @kind boolean;
  #L42fb54.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L42fb58.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L42fb5e.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.arbiter` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L42fb62.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$SwitchIfEmptyObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fb74.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.empty` @type ^`boolean` @kind boolean;
  #L42fb78.  if v0 == 0 then goto L42fb8e;
  #L42fb7c.  v0:= 0I;
  #L42fb7e.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.empty` @type ^`boolean` := v0 @kind boolean;
  #L42fb82.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.other` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42fb86.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42fb8c.  goto L42fb98;
  #L42fb8e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42fb92.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42fb98.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$SwitchIfEmptyObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fbac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42fbb0.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42fbb6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$SwitchIfEmptyObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fbc8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.empty` @type ^`boolean` @kind boolean;
  #L42fbcc.  if v0 == 0 then goto L42fbd6;
  #L42fbd0.  v0:= 0I;
  #L42fbd2.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.empty` @type ^`boolean` := v0 @kind boolean;
  #L42fbd6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42fbda.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42fbe0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$SwitchIfEmptyObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fbf4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver.arbiter` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42fbf8.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42fbfe.  return @kind void;
}
