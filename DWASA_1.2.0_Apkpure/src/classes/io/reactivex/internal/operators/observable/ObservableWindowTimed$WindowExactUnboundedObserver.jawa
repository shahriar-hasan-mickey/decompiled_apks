record `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.bufferSize` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.scheduler` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.terminated` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.timer` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.upstream` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.window` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.NEXT` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L434750.  v0:= new `java.lang.Object`;
  #L434754.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43475a.  `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.NEXT` @type ^`java.lang.Object` := v0 @kind object;
  #L43475e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L434770.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L434774.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L43477a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L434780.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L434784.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43478a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L43478e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.timespan` @type ^`long` := v3 @kind wide;
  #L434792.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L434796.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.scheduler` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L43479a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.bufferSize` @type ^`int` := v7;
  #L43479e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4347b0.  v0:= 1I;
  #L4347b2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4347b6.  return @kind void;
}
procedure `void` `disposeTimer`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.disposeTimer:()V` @AccessFlag  {
    temp;
    v0;

  #L4347c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4347cc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4347d2.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4347e4.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4347e8.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L4347ec.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4347f0.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4347f4.  v3:= 1I;
  #L4347f6.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.terminated` @type ^`boolean` @kind boolean;
  #L4347fa.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.done` @type ^`boolean` @kind boolean;
  #L4347fe.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L434804.  v6:= temp @kind object;
  #L434806.  if v5 == 0 then goto L434840;
  #L43480a.  if v6 == 0 then goto L434816;
  #L43480e.  v5:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.NEXT` @type ^`java.lang.Object` @kind object;
  #L434812.  if v6 != v5 then goto L434840;
  #L434816.  v1:= 0I;
  #L434818.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L43481c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L434822.  call `disposeTimer`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.disposeTimer:()V` @kind virtual;
  #L434828.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L43482c.  if v0 == 0 then goto L434838;
  #L434830.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L434836.  goto L43483e;
  #L434838.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L43483e.  return @kind void;
  #L434840.  if v6 != 0 then goto L434854;
  #L434844.  v3:= -v3 @kind int;
  #L434846.  call temp:= `leave`(v7, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.leave:(I)I` @kind virtual;
  #L43484c.  v3:= temp;
  #L43484e.  if v3 != 0 then goto L4347f6;
  #L434852.  return @kind void;
  #L434854.  v5:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.NEXT` @type ^`java.lang.Object` @kind object;
  #L434858.  if v6 != v5 then goto L43488a;
  #L43485c.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L434862.  if v4 != 0 then goto L43487e;
  #L434866.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.bufferSize` @type ^`int`;
  #L43486a.  call temp:= `create`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L434870.  v2:= temp @kind object;
  #L434872.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L434876.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43487c.  goto L4347f6;
  #L43487e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L434882.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434888.  goto L4347f6;
  #L43488a.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L434890.  v4:= temp @kind object;
  #L434892.  call `onNext`(v2, v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L434898.  goto L4347f6;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434738.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43473c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4348ac.  v0:= 1I;
  #L4348ae.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4348b2.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.enter:()Z` @kind virtual;
  #L4348b8.  v0:= temp;
  #L4348ba.  if v0 == 0 then goto L4348c4;
  #L4348be.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.drainLoop:()V` @kind virtual;
  #L4348c4.  call `disposeTimer`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.disposeTimer:()V` @kind virtual;
  #L4348ca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4348ce.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4348d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4348e8.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4348ec.  v0:= 1I;
  #L4348ee.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4348f2.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.enter:()Z` @kind virtual;
  #L4348f8.  v0:= temp;
  #L4348fa.  if v0 == 0 then goto L434904;
  #L4348fe.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.drainLoop:()V` @kind virtual;
  #L434904.  call `disposeTimer`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.disposeTimer:()V` @kind virtual;
  #L43490a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43490e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434914.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434928.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.terminated` @type ^`boolean` @kind boolean;
  #L43492c.  if v0 == 0 then goto L434932;
  #L434930.  return @kind void;
  #L434932.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.fastEnter:()Z` @kind virtual;
  #L434938.  v0:= temp;
  #L43493a.  if v0 == 0 then goto L434958;
  #L43493e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L434942.  call `onNext`(v0, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L434948.  v2:= -1I;
  #L43494a.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.leave:(I)I` @kind virtual;
  #L434950.  v2:= temp;
  #L434952.  if v2 != 0 then goto L434978;
  #L434956.  return @kind void;
  #L434958.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L43495c.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L434962.  v2:= temp @kind object;
  #L434964.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L43496a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.enter:()Z` @kind virtual;
  #L434970.  v2:= temp;
  #L434972.  if v2 != 0 then goto L434978;
  #L434976.  return @kind void;
  #L434978.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.drainLoop:()V` @kind virtual;
  #L43497e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L434990.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L434994.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43499a.  v0:= temp;
  #L43499c.  if v0 == 0 then goto L4349f2;
  #L4349a0.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L4349a4.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.bufferSize` @type ^`int`;
  #L4349a8.  call temp:= `create`(v8) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4349ae.  v8:= temp @kind object;
  #L4349b0.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v8 @kind object;
  #L4349b4.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4349b8.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4349be.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4349c2.  call `onNext`(v8, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4349c8.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4349cc.  if v8 != 0 then goto L4349f2;
  #L4349d0.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L4349d4.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.timespan` @type ^`long` @kind wide;
  #L4349d8.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4349dc.  v1:= v7 @kind object;
  #L4349de.  v2:= v4 @kind wide;
  #L4349e0.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4349e6.  v8:= temp @kind object;
  #L4349e8.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4349ec.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4349f2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434a04.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L434a08.  if v0 == 0 then goto L434a18;
  #L434a0c.  v0:= 1I;
  #L434a0e.  v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.terminated` @type ^`boolean` := v0 @kind boolean;
  #L434a12.  call `disposeTimer`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.disposeTimer:()V` @kind virtual;
  #L434a18.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L434a1c.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver.NEXT` @type ^`java.lang.Object` @kind object;
  #L434a20.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L434a26.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.enter:()Z` @kind virtual;
  #L434a2c.  v0:= temp;
  #L434a2e.  if v0 == 0 then goto L434a38;
  #L434a32.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactUnboundedObserver;.drainLoop:()V` @kind virtual;
  #L434a38.  return @kind void;
}
