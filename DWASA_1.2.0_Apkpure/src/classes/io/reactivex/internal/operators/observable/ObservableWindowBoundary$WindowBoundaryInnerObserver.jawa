record `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.done` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43314c.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L433152.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` := v1 @kind object;
  #L433156.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433168.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.done` @type ^`boolean` @kind boolean;
  #L43316c.  if v0 == 0 then goto L433172;
  #L433170.  return @kind void;
  #L433172.  v0:= 1I;
  #L433174.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433178.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` @kind object;
  #L43317c.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerComplete:()V` @kind virtual;
  #L433182.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433194.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.done` @type ^`boolean` @kind boolean;
  #L433198.  if v0 == 0 then goto L4331a4;
  #L43319c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4331a2.  return @kind void;
  #L4331a4.  v0:= 1I;
  #L4331a6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4331aa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` @kind object;
  #L4331ae.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4331b4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryInnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4331c8.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.done` @type ^`boolean` @kind boolean;
  #L4331cc.  if v1 == 0 then goto L4331d2;
  #L4331d0.  return @kind void;
  #L4331d2.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` @kind object;
  #L4331d6.  call `innerNext`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerNext:()V` @kind virtual;
  #L4331dc.  return @kind void;
}
