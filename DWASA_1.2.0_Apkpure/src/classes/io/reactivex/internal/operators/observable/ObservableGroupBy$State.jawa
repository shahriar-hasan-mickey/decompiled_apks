record `io.reactivex.internal.operators.observable.ObservableGroupBy$State` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.ObservableSource` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.error` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.key` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.once` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.parent` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$State.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v1 @kind this, `int` v2 , `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.<init>:(ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L426958.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42695e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L426962.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L426968.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L42696c.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L426970.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L426976.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L42697a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42697e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L426984.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L426988.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L42698c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L426992.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L426996.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` := v3 @kind object;
  #L42699a.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.key` @type ^`java.lang.Object` := v4 @kind object;
  #L42699e.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.delayError` @type ^`boolean` := v5 @kind boolean;
  #L4269a2.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v3 @kind this, `boolean` v4 , `boolean` v5 , `io.reactivex.Observer` v6 @kind object, `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.checkTerminated:(ZZLio/reactivex/Observer;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L426884.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L426888.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L42688e.  v0:= temp;
  #L426890.  v1:= 1I;
  #L426892.  v2:= 0I;
  #L426894.  if v0 == 0 then goto L4268bc;
  #L426898.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42689c.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4268a2.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L4268a6.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.key` @type ^`java.lang.Object` @kind object;
  #L4268aa.  call `cancel`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4268b0.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4268b4.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4268ba.  return v1;
  #L4268bc.  if v4 == 0 then goto L426924;
  #L4268c0.  if v7 == 0 then goto L4268ea;
  #L4268c4.  if v5 == 0 then goto L426924;
  #L4268c8.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L4268cc.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4268d0.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4268d6.  if v4 == 0 then goto L4268e2;
  #L4268da.  call `onError`(v6, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4268e0.  goto L4268e8;
  #L4268e2.  call `onComplete`(v6) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4268e8.  return v1;
  #L4268ea.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L4268ee.  if v4 == 0 then goto L42690e;
  #L4268f2.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4268f6.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4268fc.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426900.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L426906.  call `onError`(v6, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42690c.  return v1;
  #L42690e.  if v5 == 0 then goto L426924;
  #L426912.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426916.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42691c.  call `onComplete`(v6) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L426922.  return v1;
  #L426924.  v4:= 0I;
  #L426926.  return v4;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4269b4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4269b8.  v1:= 0I;
  #L4269ba.  v2:= 1I;
  #L4269bc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4269c2.  v0:= temp;
  #L4269c4.  if v0 == 0 then goto L4269ee;
  #L4269c8.  call temp:= `getAndIncrement`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.getAndIncrement:()I` @kind virtual;
  #L4269ce.  v0:= temp;
  #L4269d0.  if v0 != 0 then goto L4269ee;
  #L4269d4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4269d8.  v1:= 0I;
  #L4269da.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4269e0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L4269e4.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.key` @type ^`java.lang.Object` @kind object;
  #L4269e8.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4269ee.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L426a00.  call temp:= `getAndIncrement`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.getAndIncrement:()I` @kind virtual;
  #L426a06.  v0:= temp;
  #L426a08.  if v0 == 0 then goto L426a0e;
  #L426a0c.  return @kind void;
  #L426a0e.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L426a12.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.delayError` @type ^`boolean` @kind boolean;
  #L426a16.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426a1a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L426a20.  v2:= temp @kind object;
  #L426a22.  v2:= (`io.reactivex.Observer`) v2 @kind object;
  #L426a26.  v3:= 1I;
  #L426a28.  v4:= 1I;
  #L426a2a.  if v2 == 0 then goto L426a60;
  #L426a2e.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L426a32.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L426a38.  v6:= temp @kind object;
  #L426a3a.  if v6 != 0 then goto L426a42;
  #L426a3e.  v7:= 1I;
  #L426a40.  goto L426a44;
  #L426a42.  v7:= 0I;
  #L426a44.  call temp:= `checkTerminated`(v8, v5, v7, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.checkTerminated:(ZZLio/reactivex/Observer;Z)Z` @kind virtual;
  #L426a4a.  v5:= temp;
  #L426a4c.  if v5 == 0 then goto L426a52;
  #L426a50.  return @kind void;
  #L426a52.  if v7 == 0 then goto L426a58;
  #L426a56.  goto L426a60;
  #L426a58.  call `onNext`(v2, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L426a5e.  goto L426a2e;
  #L426a60.  v4:= -v4 @kind int;
  #L426a62.  call temp:= `addAndGet`(v8, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.addAndGet:(I)I` @kind virtual;
  #L426a68.  v4:= temp;
  #L426a6a.  if v4 != 0 then goto L426a70;
  #L426a6e.  return @kind void;
  #L426a70.  if v2 != 0 then goto L426a2a;
  #L426a74.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426a78.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L426a7e.  v2:= temp @kind object;
  #L426a80.  v2:= (`io.reactivex.Observer`) v2 @kind object;
  #L426a84.  goto L426a2a;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426938.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42693c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L426942.  v0:= temp;
  #L426944.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426a98.  v0:= 1I;
  #L426a9a.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.done` @type ^`boolean` := v0 @kind boolean;
  #L426a9e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @kind virtual;
  #L426aa4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L426ab8.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L426abc.  v1:= 1I;
  #L426abe.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.done` @type ^`boolean` := v1 @kind boolean;
  #L426ac2.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @kind virtual;
  #L426ac8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426adc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L426ae0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L426ae6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @kind virtual;
  #L426aec.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.subscribe:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L426b00.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L426b04.  v1:= 0I;
  #L426b06.  v2:= 1I;
  #L426b08.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L426b0e.  v0:= temp;
  #L426b10.  if v0 == 0 then goto L426b4a;
  #L426b14.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L426b1a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426b1e.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L426b24.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L426b28.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L426b2e.  v4:= temp;
  #L426b30.  if v4 == 0 then goto L426b42;
  #L426b34.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426b38.  v0:= 0I;
  #L426b3a.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L426b40.  goto L426b5e;
  #L426b42.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @kind virtual;
  #L426b48.  goto L426b5e;
  #L426b4a.  v0:= new `java.lang.IllegalStateException`;
  #L426b4e.  v1:= "Only one Observer allowed!" @kind object;
  #L426b52.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L426b58.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L426b5e.  return @kind void;
}
