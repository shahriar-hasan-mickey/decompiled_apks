record `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder` v0 @kind this, `long` v1 , `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L434214.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43421a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder.index` @type ^`long` := v1 @kind wide;
  #L43421e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` := v3 @kind object;
  #L434222.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434234.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder.parent` @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` @kind object;
  #L434238.  call temp:= `access$000`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.access$000:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;)Z` @kind static;
  #L43423e.  v1:= temp;
  #L434240.  if v1 != 0 then goto L434254;
  #L434244.  call temp:= `access$100`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.access$100:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind static;
  #L43424a.  v1:= temp @kind object;
  #L43424c.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L434252.  goto L434260;
  #L434254.  v1:= 1I;
  #L434256.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.terminated` @type ^`boolean` := v1 @kind boolean;
  #L43425a.  call `disposeTimer`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.disposeTimer:()V` @kind virtual;
  #L434260.  call temp:= `enter`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.enter:()Z` @kind virtual;
  #L434266.  v1:= temp;
  #L434268.  if v1 == 0 then goto L434272;
  #L43426c.  call `drainLoop`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.drainLoop:()V` @kind virtual;
  #L434272.  return @kind void;
}
