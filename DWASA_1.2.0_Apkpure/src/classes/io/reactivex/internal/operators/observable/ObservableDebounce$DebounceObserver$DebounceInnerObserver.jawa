record `io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.done` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.index` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.once` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver` `io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.parent` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.value` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver` v2 @kind object, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver$DebounceInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L421c24.  call `<init>`(v1) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L421c2a.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L421c2e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L421c34.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L421c38.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver` := v2 @kind object;
  #L421c3c.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.index` @type ^`long` := v3 @kind wide;
  #L421c40.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.value` @type ^`java.lang.Object` := v5 @kind object;
  #L421c44.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver$DebounceInnerObserver;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L421c58.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L421c5c.  v1:= 0I;
  #L421c5e.  v2:= 1I;
  #L421c60.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L421c66.  v0:= temp;
  #L421c68.  if v0 == 0 then goto L421c7e;
  #L421c6c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver` @kind object;
  #L421c70.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.index` @type ^`long` @kind wide;
  #L421c74.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.value` @type ^`java.lang.Object` @kind object;
  #L421c78.  call `emit`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver;.emit:(JLjava/lang/Object;)V` @kind virtual;
  #L421c7e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver$DebounceInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421c90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.done` @type ^`boolean` @kind boolean;
  #L421c94.  if v0 == 0 then goto L421c9a;
  #L421c98.  return @kind void;
  #L421c9a.  v0:= 1I;
  #L421c9c.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L421ca0.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver$DebounceInnerObserver;.emit:()V` @kind virtual;
  #L421ca6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver$DebounceInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421cb8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.done` @type ^`boolean` @kind boolean;
  #L421cbc.  if v0 == 0 then goto L421cc8;
  #L421cc0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L421cc6.  return @kind void;
  #L421cc8.  v0:= 1I;
  #L421cca.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L421cce.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver` @kind object;
  #L421cd2.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L421cd8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver$DebounceInnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L421cec.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.done` @type ^`boolean` @kind boolean;
  #L421cf0.  if v1 == 0 then goto L421cf6;
  #L421cf4.  return @kind void;
  #L421cf6.  v1:= 1I;
  #L421cf8.  v0.`io.reactivex.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L421cfc.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver$DebounceInnerObserver;.dispose:()V` @kind virtual;
  #L421d02.  call `emit`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$DebounceObserver$DebounceInnerObserver;.emit:()V` @kind virtual;
  #L421d08.  return @kind void;
}
