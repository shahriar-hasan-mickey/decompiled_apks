record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.capacityHint` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.other` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.BOUNDARY_DISPOSED` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L433d18.  v0:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver`;
  #L433d1c.  v1:= 0I;
  #L433d1e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;)V` @kind direct;
  #L433d24.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` := v0 @kind object;
  #L433d28.  v0:= new `java.lang.Object`;
  #L433d2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L433d32.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` := v0 @kind object;
  #L433d36.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.<init>:(Lio/reactivex/Observer;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L433d48.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L433d4e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L433d52.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.capacityHint` @type ^`int` := v2;
  #L433d56.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L433d5a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L433d60.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L433d64.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L433d68.  v2:= 1I;
  #L433d6a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L433d70.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L433d74.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L433d78.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L433d7e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L433d82.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L433d86.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L433d8c.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L433d90.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L433d94.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L433d9a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L433d9e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.other` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L433da2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L433db4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L433db8.  v1:= 0I;
  #L433dba.  v2:= 1I;
  #L433dbc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L433dc2.  v0:= temp;
  #L433dc4.  if v0 == 0 then goto L433de8;
  #L433dc8.  call `disposeBoundary`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.disposeBoundary:()V` @kind virtual;
  #L433dce.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L433dd2.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L433dd8.  v0:= temp;
  #L433dda.  if v0 != 0 then goto L433de8;
  #L433dde.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433de2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433de8.  return @kind void;
}
procedure `void` `disposeBoundary`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.disposeBoundary:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L433dfc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433e00.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` @kind object;
  #L433e04.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L433e0a.  v0:= temp @kind object;
  #L433e0c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L433e10.  if v0 == 0 then goto L433e22;
  #L433e14.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` @kind object;
  #L433e18.  if v0 == v1 then goto L433e22;
  #L433e1c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433e22.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L433e34.  call temp:= `getAndIncrement`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.getAndIncrement:()I` @kind virtual;
  #L433e3a.  v0:= temp;
  #L433e3c.  if v0 == 0 then goto L433e42;
  #L433e40.  return @kind void;
  #L433e42.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L433e46.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L433e4a.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L433e4e.  v3:= 1I;
  #L433e50.  v4:= 1I;
  #L433e52.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L433e56.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L433e5c.  v5:= temp;
  #L433e5e.  v6:= 0I;
  #L433e60.  if v5 != 0 then goto L433e70;
  #L433e64.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L433e6a.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L433e6e.  return @kind void;
  #L433e70.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L433e74.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` @kind boolean;
  #L433e78.  if v7 == 0 then goto L433eac;
  #L433e7c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L433e82.  v8:= temp @kind object;
  #L433e84.  if v8 == 0 then goto L433eac;
  #L433e88.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L433e8e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L433e94.  v1:= temp @kind object;
  #L433e96.  if v5 == 0 then goto L433ea4;
  #L433e9a.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L433e9e.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L433ea4.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433eaa.  return @kind void;
  #L433eac.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L433eb2.  v8:= temp @kind object;
  #L433eb4.  if v8 != 0 then goto L433ebc;
  #L433eb8.  v9:= 1I;
  #L433eba.  goto L433ebe;
  #L433ebc.  v9:= 0I;
  #L433ebe.  if v7 == 0 then goto L433efe;
  #L433ec2.  if v9 == 0 then goto L433efe;
  #L433ec6.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L433ecc.  v1:= temp @kind object;
  #L433ece.  if v1 != 0 then goto L433ee8;
  #L433ed2.  if v5 == 0 then goto L433ee0;
  #L433ed6.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L433eda.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L433ee0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L433ee6.  goto L433efc;
  #L433ee8.  if v5 == 0 then goto L433ef6;
  #L433eec.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L433ef0.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L433ef6.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433efc.  return @kind void;
  #L433efe.  if v9 == 0 then goto L433f12;
  #L433f02.  v4:= -v4 @kind int;
  #L433f04.  call temp:= `addAndGet`(v10, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.addAndGet:(I)I` @kind virtual;
  #L433f0a.  v4:= temp;
  #L433f0c.  if v4 != 0 then goto L433e52;
  #L433f10.  return @kind void;
  #L433f12.  v7:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L433f16.  if v8 == v7 then goto L433f22;
  #L433f1a.  call `onNext`(v5, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L433f20.  goto L433e52;
  #L433f22.  if v5 == 0 then goto L433f30;
  #L433f26.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L433f2a.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L433f30.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L433f34.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L433f3a.  v5:= temp;
  #L433f3c.  if v5 != 0 then goto L433e52;
  #L433f40.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.capacityHint` @type ^`int`;
  #L433f44.  call temp:= `create`(v5, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L433f4a.  v5:= temp @kind object;
  #L433f4c.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v5 @kind object;
  #L433f50.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L433f54.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L433f5a.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.other` @type ^`java.util.concurrent.Callable` @kind object;
  #L433f5e.  call temp:= `call`(v7) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433f64.  v7:= temp @kind object;
  #L433f66.  v8:= "The other Callable returned a null ObservableSource" @kind object;
  #L433f6a.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433f70.  v7:= temp @kind object;
  #L433f72.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L433f76.  v8:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver`;
  #L433f7a.  call `<init>`(v8, v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;)V` @kind direct;
  #L433f80.  v9:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433f84.  call temp:= `compareAndSet`(v9, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L433f8a.  v6:= temp;
  #L433f8c.  if v6 == 0 then goto L433e52;
  #L433f90.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L433f96.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L433f9c.  goto L433e52;
  #L433fa0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433fa2.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L433fa8.  call temp:= `addThrowable`(v2, v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L433fae.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v3 @kind boolean;
  #L433fb2.  goto L433e52;
  catch `java.lang.Throwable` @[L433f5a..L433f76] goto L433fa0;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L433fd4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433fd8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433fde.  v0:= 1I;
  #L433fe0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433fe4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L433fea.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L433ffc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L434000.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434006.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43400a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L434010.  v0:= temp;
  #L434012.  if v0 == 0 then goto L434024;
  #L434016.  v2:= 1I;
  #L434018.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L43401c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L434022.  goto L43402a;
  #L434024.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43402a.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerNext:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryInnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43403c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434040.  v1:= 0I;
  #L434042.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L434048.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L43404c.  v0:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L434050.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L434056.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L43405c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433cf8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L433cfc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L433d02.  v0:= temp;
  #L433d04.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434070.  call `disposeBoundary`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.disposeBoundary:()V` @kind virtual;
  #L434076.  v0:= 1I;
  #L434078.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43407c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L434082.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434094.  call `disposeBoundary`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.disposeBoundary:()V` @kind virtual;
  #L43409a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43409e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4340a4.  v0:= temp;
  #L4340a6.  if v0 == 0 then goto L4340b8;
  #L4340aa.  v2:= 1I;
  #L4340ac.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L4340b0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L4340b6.  goto L4340be;
  #L4340b8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4340be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4340d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L4340d4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4340da.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L4340e0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4340f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4340f8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4340fe.  v0:= temp;
  #L434100.  if v0 == 0 then goto L434126;
  #L434104.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L434108.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43410c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L434112.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L434116.  v0:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L43411a.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L434120.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L434126.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434138.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43413c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L434142.  v0:= temp;
  #L434144.  if v0 != 0 then goto L434152;
  #L434148.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43414c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434152.  return @kind void;
}
