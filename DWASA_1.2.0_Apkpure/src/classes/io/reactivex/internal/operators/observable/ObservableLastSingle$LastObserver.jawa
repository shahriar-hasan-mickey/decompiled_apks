record `io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.defaultItem` @AccessFlag FINAL;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.downstream` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.item` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableLastSingle$LastObserver;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L428b74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L428b7a.  v0.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L428b7e.  v0.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.defaultItem` @type ^`java.lang.Object` := v2 @kind object;
  #L428b82.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableLastSingle$LastObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428b94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L428b98.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L428b9e.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428ba2.  v1.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L428ba6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableLastSingle$LastObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428b50.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L428b54.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428b58.  if v0 != v1 then goto L428b60;
  #L428b5c.  v0:= 1I;
  #L428b5e.  goto L428b62;
  #L428b60.  v0:= 0I;
  #L428b62.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableLastSingle$LastObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428bb8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428bbc.  v2.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L428bc0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.item` @type ^`java.lang.Object` @kind object;
  #L428bc4.  if v0 == 0 then goto L428bda;
  #L428bc8.  v1:= 0I;
  #L428bca.  v2.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.item` @type ^`java.lang.Object` := v1 @kind object;
  #L428bce.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L428bd2.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L428bd8.  goto L428c02;
  #L428bda.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.defaultItem` @type ^`java.lang.Object` @kind object;
  #L428bde.  if v0 == 0 then goto L428bee;
  #L428be2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L428be6.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L428bec.  goto L428c02;
  #L428bee.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L428bf2.  v1:= new `java.util.NoSuchElementException`;
  #L428bf6.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L428bfc.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L428c02.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableLastSingle$LastObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428c14.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428c18.  v1.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L428c1c.  v0:= 0I;
  #L428c1e.  v1.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.item` @type ^`java.lang.Object` := v0 @kind object;
  #L428c22.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L428c26.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L428c2c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableLastSingle$LastObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L428c40.  v0.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.item` @type ^`java.lang.Object` := v1 @kind object;
  #L428c44.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableLastSingle$LastObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428c58.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L428c5c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L428c62.  v0:= temp;
  #L428c64.  if v0 == 0 then goto L428c76;
  #L428c68.  v1.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L428c6c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableLastSingle$LastObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L428c70.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L428c76.  return @kind void;
}
