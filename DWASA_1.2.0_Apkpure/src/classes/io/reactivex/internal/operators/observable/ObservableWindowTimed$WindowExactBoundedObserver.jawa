record `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.bufferSize` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.count` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.maxSize` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.restartTimerOnMaxSize` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.scheduler` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.terminated` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timer` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.upstream` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.window` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.worker` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 , `long` v8 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4342cc.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4342d0.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4342d6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4342dc.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4342e0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4342e6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4342ea.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timespan` @type ^`long` := v3 @kind wide;
  #L4342ee.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4342f2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.scheduler` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L4342f6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.bufferSize` @type ^`int` := v7;
  #L4342fa.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.maxSize` @type ^`long` := v8 @kind wide;
  #L4342fe.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.restartTimerOnMaxSize` @type ^`boolean` := v10 @kind boolean;
  #L434302.  if v10 == 0 then goto L434314;
  #L434306.  call temp:= `createWorker`(v6) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L43430c.  v2:= temp @kind object;
  #L43430e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L434312.  goto L43431a;
  #L434314.  v2:= 0I;
  #L434316.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L43431a.  return @kind void;
}
procedure `boolean` `access$000`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v0 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.access$000:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L434284.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L434288.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `access$100`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v0 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.access$100:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4342b4.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4342b8.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43432c.  v0:= 1I;
  #L43432e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L434332.  return @kind void;
}
procedure `void` `disposeTimer`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.disposeTimer:()V` @AccessFlag  {
    temp;
    v0;

  #L434344.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434348.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43434e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434352.  if v0 == 0 then goto L43435c;
  #L434356.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L43435c.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v14 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L434370.  v0:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L434374.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L434378.  v1:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43437c.  v2:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L434380.  v3:= 1I;
  #L434382.  v4:= v2 @kind object;
  #L434384.  v2:= 1I;
  #L434386.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.terminated` @type ^`boolean` @kind boolean;
  #L43438a.  if v5 == 0 then goto L4343a6;
  #L43438e.  v1:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L434392.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434398.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L43439e.  call `disposeTimer`(v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.disposeTimer:()V` @kind virtual;
  #L4343a4.  return @kind void;
  #L4343a6.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.done` @type ^`boolean` @kind boolean;
  #L4343aa.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4343b0.  v6:= temp @kind object;
  #L4343b2.  if v6 != 0 then goto L4343ba;
  #L4343b6.  v7:= 1I;
  #L4343b8.  goto L4343bc;
  #L4343ba.  v7:= 0I;
  #L4343bc.  v8:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder` @kind boolean;
  #L4343c0.  if v5 == 0 then goto L4343f6;
  #L4343c4.  if v7 != 0 then goto L4343cc;
  #L4343c8.  if v8 == 0 then goto L4343f6;
  #L4343cc.  v1:= 0I;
  #L4343ce.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L4343d2.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4343d8.  call `disposeTimer`(v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.disposeTimer:()V` @kind virtual;
  #L4343de.  v0:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4343e2.  if v0 == 0 then goto L4343ee;
  #L4343e6.  call `onError`(v4, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4343ec.  goto L4343f4;
  #L4343ee.  call `onComplete`(v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4343f4.  return @kind void;
  #L4343f6.  if v7 == 0 then goto L43440a;
  #L4343fa.  v2:= -v2 @kind int;
  #L4343fc.  call temp:= `leave`(v14, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.leave:(I)I` @kind virtual;
  #L434402.  v2:= temp;
  #L434404.  if v2 != 0 then goto L434386;
  #L434408.  return @kind void;
  #L43440a.  v9:= 0L;
  #L43440e.  if v8 == 0 then goto L434450;
  #L434412.  v6:= (`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder`) v6 @kind object;
  #L434416.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L43441a.  if v5 != 0 then goto L43442e;
  #L43441e.  v7:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @type ^`long` @kind wide;
  #L434422.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder.index` @type ^`long` @kind wide;
  #L434426.  v11:= lcmp(v7, v5);
  #L43442a.  if v11 != 0 then goto L434386;
  #L43442e.  call `onComplete`(v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L434434.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.count` @type ^`long` := v9 @kind wide;
  #L434438.  v4:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.bufferSize` @type ^`int`;
  #L43443c.  call temp:= `create`(v4) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L434442.  v4:= temp @kind object;
  #L434444.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v4 @kind object;
  #L434448.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43444e.  goto L434386;
  #L434450.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L434456.  v5:= temp @kind object;
  #L434458.  call `onNext`(v4, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L43445e.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.count` @type ^`long` @kind wide;
  #L434462.  v7:= 1L;
  #L434466.  v5:= v5 + v7 @kind long;
  #L434468.  v11:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.maxSize` @type ^`long` @kind wide;
  #L43446c.  v13:= lcmp(v5, v11);
  #L434470.  if v13 < 0 then goto L4344fe;
  #L434474.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @type ^`long` @kind wide;
  #L434478.  v5:= v5 + v7 @kind long;
  #L43447a.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @type ^`long` := v5 @kind wide;
  #L43447e.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.count` @type ^`long` := v9 @kind wide;
  #L434482.  call `onComplete`(v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L434488.  v4:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.bufferSize` @type ^`int`;
  #L43448c.  call temp:= `create`(v4) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L434492.  v4:= temp @kind object;
  #L434494.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v4 @kind object;
  #L434498.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43449c.  call `onNext`(v5, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4344a2.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L4344a6.  if v5 == 0 then goto L434386;
  #L4344aa.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4344ae.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4344b4.  v5:= temp @kind object;
  #L4344b6.  v5:= (`io.reactivex.disposables.Disposable`) v5 @kind object;
  #L4344ba.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4344c0.  v6:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4344c4.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder`;
  #L4344c8.  v8:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @type ^`long` @kind wide;
  #L4344cc.  call `<init>`(v7, v8, v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;)V` @kind direct;
  #L4344d2.  v10:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timespan` @type ^`long` @kind wide;
  #L4344d6.  v12:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4344da.  v8:= v10 @kind wide;
  #L4344dc.  call temp:= `schedulePeriodically`(v6, v7, v8, v10, v12) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4344e2.  v6:= temp @kind object;
  #L4344e4.  v7:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4344e8.  call temp:= `compareAndSet`(v7, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4344ee.  v5:= temp;
  #L4344f0.  if v5 != 0 then goto L434386;
  #L4344f4.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4344fa.  goto L434386;
  #L4344fe.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.count` @type ^`long` := v5 @kind wide;
  #L434502.  goto L434386;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43429c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4342a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434518.  v0:= 1I;
  #L43451a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43451e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.enter:()Z` @kind virtual;
  #L434524.  v0:= temp;
  #L434526.  if v0 == 0 then goto L434530;
  #L43452a.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.drainLoop:()V` @kind virtual;
  #L434530.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L434534.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43453a.  call `disposeTimer`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.disposeTimer:()V` @kind virtual;
  #L434540.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434554.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L434558.  v0:= 1I;
  #L43455a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43455e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.enter:()Z` @kind virtual;
  #L434564.  v0:= temp;
  #L434566.  if v0 == 0 then goto L434570;
  #L43456a.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.drainLoop:()V` @kind virtual;
  #L434570.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L434574.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43457a.  call `disposeTimer`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.disposeTimer:()V` @kind virtual;
  #L434580.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L434594.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.terminated` @type ^`boolean` @kind boolean;
  #L434598.  if v0 == 0 then goto L43459e;
  #L43459c.  return @kind void;
  #L43459e.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.fastEnter:()Z` @kind virtual;
  #L4345a4.  v0:= temp;
  #L4345a6.  if v0 == 0 then goto L43465e;
  #L4345aa.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4345ae.  call `onNext`(v0, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4345b4.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.count` @type ^`long` @kind wide;
  #L4345b8.  v3:= 1L;
  #L4345bc.  v1:= v1 + v3 @kind long;
  #L4345be.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.maxSize` @type ^`long` @kind wide;
  #L4345c2.  v8:= lcmp(v1, v5);
  #L4345c6.  if v8 < 0 then goto L43464a;
  #L4345ca.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @type ^`long` @kind wide;
  #L4345ce.  v1:= v1 + v3 @kind long;
  #L4345d0.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @type ^`long` := v1 @kind wide;
  #L4345d4.  v1:= 0L;
  #L4345d8.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.count` @type ^`long` := v1 @kind wide;
  #L4345dc.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4345e2.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.bufferSize` @type ^`int`;
  #L4345e6.  call temp:= `create`(v8) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4345ec.  v8:= temp @kind object;
  #L4345ee.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v8 @kind object;
  #L4345f2.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4345f6.  call `onNext`(v0, v8) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4345fc.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L434600.  if v8 == 0 then goto L43464e;
  #L434604.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434608.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43460e.  v8:= temp @kind object;
  #L434610.  v8:= (`io.reactivex.disposables.Disposable`) v8 @kind object;
  #L434614.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43461a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43461e.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder`;
  #L434622.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @type ^`long` @kind wide;
  #L434626.  call `<init>`(v1, v2, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;)V` @kind direct;
  #L43462c.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timespan` @type ^`long` @kind wide;
  #L434630.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L434634.  v2:= v4 @kind wide;
  #L434636.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L43463c.  v8:= temp @kind object;
  #L43463e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434642.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L434648.  goto L43464e;
  #L43464a.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.count` @type ^`long` := v1 @kind wide;
  #L43464e.  v8:= -1I;
  #L434650.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.leave:(I)I` @kind virtual;
  #L434656.  v8:= temp;
  #L434658.  if v8 != 0 then goto L43467e;
  #L43465c.  return @kind void;
  #L43465e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L434662.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L434668.  v8:= temp @kind object;
  #L43466a.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L434670.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.enter:()Z` @kind virtual;
  #L434676.  v8:= temp;
  #L434678.  if v8 != 0 then goto L43467e;
  #L43467c.  return @kind void;
  #L43467e.  call `drainLoop`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.drainLoop:()V` @kind virtual;
  #L434684.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver` v8 @kind this, `io.reactivex.disposables.Disposable` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L434698.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43469c.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4346a2.  v0:= temp;
  #L4346a4.  if v0 == 0 then goto L434724;
  #L4346a8.  v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v9 @kind object;
  #L4346ac.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4346b0.  call `onSubscribe`(v9, v8) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4346b6.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4346ba.  if v0 == 0 then goto L4346c0;
  #L4346be.  return @kind void;
  #L4346c0.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.bufferSize` @type ^`int`;
  #L4346c4.  call temp:= `create`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4346ca.  v0:= temp @kind object;
  #L4346cc.  v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v0 @kind object;
  #L4346d0.  call `onNext`(v9, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4346d6.  v2:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder`;
  #L4346da.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.producerIndex` @type ^`long` @kind wide;
  #L4346de.  call `<init>`(v2, v0, v8) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver$ConsumerIndexHolder;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver;)V` @kind direct;
  #L4346e4.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L4346e8.  if v9 == 0 then goto L434704;
  #L4346ec.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4346f0.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timespan` @type ^`long` @kind wide;
  #L4346f4.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4346f8.  v3:= v5 @kind wide;
  #L4346fa.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L434700.  v9:= temp @kind object;
  #L434702.  goto L43471a;
  #L434704.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L434708.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timespan` @type ^`long` @kind wide;
  #L43470c.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L434710.  v3:= v5 @kind wide;
  #L434712.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L434718.  v9:= temp @kind object;
  #L43471a.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43471e.  call temp:= `replace`(v0, v9) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L434724.  return @kind void;
}
