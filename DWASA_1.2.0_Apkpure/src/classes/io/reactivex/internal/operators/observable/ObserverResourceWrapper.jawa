record `io.reactivex.internal.operators.observable.ObserverResourceWrapper` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObserverResourceWrapper.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L435ff4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L435ffa.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L435ffe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L436004.  v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L436008.  v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L43600c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436020.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L436024.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43602a.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L436030.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L435fc8.  v0:= v2.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435fcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435fd2.  v0:= temp @kind object;
  #L435fd4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L435fd8.  if v0 != v1 then goto L435fe0;
  #L435fdc.  v0:= 1I;
  #L435fde.  goto L435fe2;
  #L435fe0.  v0:= 0I;
  #L435fe2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436044.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @kind virtual;
  #L43604a.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43604e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L436054.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436068.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @kind virtual;
  #L43606e.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L436072.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436078.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43608c.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L436090.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L436096.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4360a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4360ac.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4360b2.  v2:= temp;
  #L4360b4.  if v2 == 0 then goto L4360c2;
  #L4360b8.  v2:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4360bc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4360c2.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.setResource:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4360d4.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4360da.  return @kind void;
}
