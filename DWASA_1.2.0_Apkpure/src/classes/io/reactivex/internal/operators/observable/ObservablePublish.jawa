record `io.reactivex.internal.operators.observable.ObservablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.observables.ConnectableObservable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamObservableSource` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish.current` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservablePublish.onSubscribe` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservablePublish.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L42abbc.  call `<init>`(v0) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L42abc2.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.onSubscribe` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L42abc6.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.source` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L42abca.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L42abce.  return @kind void;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.create:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42ab84.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42ab88.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42ab8e.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$PublishSource`;
  #L42ab92.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishSource;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L42ab98.  v2:= new `io.reactivex.internal.operators.observable.ObservablePublish`;
  #L42ab9c.  call `<init>`(v2, v1, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L42aba2.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L42aba8.  v3:= temp @kind object;
  #L42abaa.  return v3 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.observable.ObservablePublish` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42abe0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42abe4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42abea.  v0:= temp @kind object;
  #L42abec.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver`) v0 @kind object;
  #L42abf0.  if v0 == 0 then goto L42ac00;
  #L42abf4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.isDisposed:()Z` @kind virtual;
  #L42abfa.  v1:= temp;
  #L42abfc.  if v1 == 0 then goto L42ac22;
  #L42ac00.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver`;
  #L42ac04.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42ac08.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L42ac0e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42ac12.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42ac18.  v0:= temp;
  #L42ac1a.  if v0 != 0 then goto L42ac20;
  #L42ac1e.  goto L42abe0;
  #L42ac20.  v0:= v1 @kind object;
  #L42ac22.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42ac26.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L42ac2c.  v1:= temp;
  #L42ac2e.  v2:= 1I;
  #L42ac30.  v3:= 0I;
  #L42ac32.  if v1 != 0 then goto L42ac48;
  #L42ac36.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42ac3a.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42ac40.  v1:= temp;
  #L42ac42.  if v1 == 0 then goto L42ac48;
  #L42ac46.  goto L42ac4a;
  #L42ac48.  v2:= 0I;
  #L42ac4a.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42ac50.  if v2 == 0 then goto L42ac5e;
  #L42ac54.  v5:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42ac58.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42ac5e.  return @kind void;
  #L42ac60.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42ac62.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42ac68.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L42ac6e.  v5:= temp @kind object;
  #L42ac70.  goto L42ac74;
  #L42ac72.  throw v5;
  #L42ac74.  goto L42ac72;
  catch `java.lang.Throwable` @[L42ac4a..L42ac50] goto L42ac60;
}
procedure `io.reactivex.ObservableSource` `source`(`io.reactivex.internal.operators.observable.ObservablePublish` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.source:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ab6c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42ab70.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservablePublish` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L42ac94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish.onSubscribe` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42ac98.  call `subscribe`(v0, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42ac9e.  return @kind void;
}
