record `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.eager` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L432a8c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L432a92.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L432a96.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @type ^`java.lang.Object` := v2 @kind object;
  #L432a9a.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L432a9e.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.eager` @type ^`boolean` := v4 @kind boolean;
  #L432aa2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432ab4.  call `disposeAfter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.disposeAfter:()V` @kind virtual;
  #L432aba.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432abe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432ac4.  return @kind void;
}
procedure `void` `disposeAfter`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.disposeAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L432ad8.  v0:= 0I;
  #L432ada.  v1:= 1I;
  #L432adc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L432ae2.  v0:= temp;
  #L432ae4.  if v0 == 0 then goto L432b06;
  #L432ae8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L432aec.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @type ^`java.lang.Object` @kind object;
  #L432af0.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L432af6.  goto L432b06;
  #L432af8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432afa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L432b00.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L432b06.  return @kind void;
  catch `java.lang.Throwable` @[L432ae8..L432af6] goto L432af8;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432a70.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.get:()Z` @kind virtual;
  #L432a76.  v0:= temp;
  #L432a78.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432b24.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L432b28.  if v0 == 0 then goto L432b76;
  #L432b2c.  v0:= 0I;
  #L432b2e.  v1:= 1I;
  #L432b30.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L432b36.  v0:= temp;
  #L432b38.  if v0 == 0 then goto L432b60;
  #L432b3c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L432b40.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @type ^`java.lang.Object` @kind object;
  #L432b44.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L432b4a.  goto L432b60;
  #L432b4c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432b4e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L432b54.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432b58.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432b5e.  return @kind void;
  #L432b60.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432b64.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432b6a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432b6e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L432b74.  goto L432b90;
  #L432b76.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432b7a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L432b80.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432b84.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432b8a.  call `disposeAfter`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.disposeAfter:()V` @kind virtual;
  #L432b90.  return @kind void;
  catch `java.lang.Throwable` @[L432b3c..L432b4a] goto L432b4c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L432bb0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L432bb4.  if v0 == 0 then goto L432c10;
  #L432bb8.  v0:= 1I;
  #L432bba.  v1:= 0I;
  #L432bbc.  call temp:= `compareAndSet`(v5, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L432bc2.  v2:= temp;
  #L432bc4.  if v2 == 0 then goto L432bfa;
  #L432bc8.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L432bcc.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @type ^`java.lang.Object` @kind object;
  #L432bd0.  call `accept`(v2, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L432bd6.  goto L432bfa;
  #L432bd8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432bda.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L432be0.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L432be4.  v4:= 2I;
  #L432be6.  v4:= new `java.lang.Throwable`[v4];
  #L432bea.  v4[v1]:= v6 @kind object;
  #L432bee.  v4[v0]:= v2 @kind object;
  #L432bf2.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L432bf8.  v6:= v3 @kind object;
  #L432bfa.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432bfe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432c04.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432c08.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432c0e.  goto L432c2a;
  #L432c10.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432c14.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432c1a.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432c1e.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432c24.  call `disposeAfter`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.disposeAfter:()V` @kind virtual;
  #L432c2a.  return @kind void;
  catch `java.lang.Throwable` @[L432bc8..L432bd6] goto L432bd8;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432c48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432c4c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L432c52.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432c64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432c68.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L432c6e.  v0:= temp;
  #L432c70.  if v0 == 0 then goto L432c82;
  #L432c74.  v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L432c78.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432c7c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L432c82.  return @kind void;
}
