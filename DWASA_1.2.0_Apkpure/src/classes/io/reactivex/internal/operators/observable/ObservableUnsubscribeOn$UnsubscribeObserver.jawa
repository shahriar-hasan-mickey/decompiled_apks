record `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.scheduler` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L432920.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L432926.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43292a.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L43292e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432940.  v0:= 0I;
  #L432942.  v1:= 1I;
  #L432944.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43294a.  v0:= temp;
  #L43294c.  if v0 == 0 then goto L432964;
  #L432950.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L432954.  v1:= new `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver$DisposeTask`;
  #L432958.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver$DisposeTask;.<init>:(Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;)V` @kind direct;
  #L43295e.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L432964.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432904.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.get:()Z` @kind virtual;
  #L43290a.  v0:= temp;
  #L43290c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432978.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.get:()Z` @kind virtual;
  #L43297e.  v0:= temp;
  #L432980.  if v0 != 0 then goto L43298e;
  #L432984.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432988.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43298e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4329a0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.get:()Z` @kind virtual;
  #L4329a6.  v0:= temp;
  #L4329a8.  if v0 == 0 then goto L4329b4;
  #L4329ac.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4329b2.  return @kind void;
  #L4329b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4329b8.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4329be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4329d0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.get:()Z` @kind virtual;
  #L4329d6.  v0:= temp;
  #L4329d8.  if v0 != 0 then goto L4329e6;
  #L4329dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4329e0.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4329e6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4329f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4329fc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L432a02.  v0:= temp;
  #L432a04.  if v0 == 0 then goto L432a16;
  #L432a08.  v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L432a0c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L432a10.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L432a16.  return @kind void;
}
