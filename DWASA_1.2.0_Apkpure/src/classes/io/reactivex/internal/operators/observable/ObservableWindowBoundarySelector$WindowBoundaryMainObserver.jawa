record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.boundary` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.bufferSize` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.close` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.open` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.resources` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.upstream` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.windows` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.ws` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4336cc.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4336d0.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4336d6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4336dc.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4336e0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4336e6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.boundary` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4336ea.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4336ee.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4336f4.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4336f8.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.open` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L4336fc.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.close` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L433700.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.bufferSize` @type ^`int` := v5;
  #L433704.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L433708.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43370e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.resources` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L433712.  v2:= new `java.util.ArrayList`;
  #L433716.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L43371c.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.ws` @type ^`java.util.List` := v2 @kind object;
  #L433720.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L433724.  v3:= 1L;
  #L433728.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L43372e.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L433740.  return @kind void;
}
procedure `void` `close`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v3 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.close:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L433754.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L433758.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43375e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433762.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation`;
  #L433766.  v4:= v4.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver.w` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L43376a.  v2:= 0I;
  #L43376c.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowOperation;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @kind direct;
  #L433772.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L433778.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.enter:()Z` @kind virtual;
  #L43377e.  v4:= temp;
  #L433780.  if v4 == 0 then goto L43378a;
  #L433784.  call `drainLoop`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.drainLoop:()V` @kind virtual;
  #L43378a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43379c.  v0:= 1I;
  #L43379e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4337a2.  return @kind void;
}
procedure `void` `disposeBoundary`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.disposeBoundary:()V` @AccessFlag  {
    temp;
    v0;

  #L4337b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4337b8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4337be.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.boundary` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4337c2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4337c8.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4337dc.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4337e0.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L4337e4.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4337e8.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.ws` @type ^`java.util.List` @kind object;
  #L4337ec.  v3:= 1I;
  #L4337ee.  v4:= 1I;
  #L4337f0.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.done` @type ^`boolean` @kind boolean;
  #L4337f4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4337fa.  v6:= temp @kind object;
  #L4337fc.  if v6 != 0 then goto L433804;
  #L433800.  v7:= 1I;
  #L433802.  goto L433806;
  #L433804.  v7:= 0I;
  #L433806.  if v5 == 0 then goto L433874;
  #L43380a.  if v7 == 0 then goto L433874;
  #L43380e.  call `disposeBoundary`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.disposeBoundary:()V` @kind virtual;
  #L433814.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L433818.  if v0 == 0 then goto L433844;
  #L43381c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L433822.  v1:= temp @kind object;
  #L433824.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43382a.  v3:= temp;
  #L43382c.  if v3 == 0 then goto L43386c;
  #L433830.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L433836.  v3:= temp @kind object;
  #L433838.  v3:= (`io.reactivex.subjects.UnicastSubject`) v3 @kind object;
  #L43383c.  call `onError`(v3, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L433842.  goto L433824;
  #L433844.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43384a.  v0:= temp @kind object;
  #L43384c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L433852.  v1:= temp;
  #L433854.  if v1 == 0 then goto L43386c;
  #L433858.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43385e.  v1:= temp @kind object;
  #L433860.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L433864.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L43386a.  goto L43384c;
  #L43386c.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L433872.  return @kind void;
  #L433874.  if v7 == 0 then goto L433888;
  #L433878.  v4:= -v4 @kind int;
  #L43387a.  call temp:= `leave`(v10, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.leave:(I)I` @kind virtual;
  #L433880.  v4:= temp;
  #L433882.  if v4 != 0 then goto L4337f0;
  #L433886.  return @kind void;
  #L433888.  v5:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation` @kind boolean;
  #L43388c.  if v5 == 0 then goto L43395c;
  #L433890.  v6:= (`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation`) v6 @kind object;
  #L433894.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation.w` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L433898.  if v5 == 0 then goto L4338d6;
  #L43389c.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation.w` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4338a0.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4338a6.  v5:= temp;
  #L4338a8.  if v5 == 0 then goto L4337f0;
  #L4338ac.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation.w` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4338b0.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4338b6.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4338ba.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4338c0.  v5:= temp @kind wide;
  #L4338c2.  v7:= 0L;
  #L4338c6.  v9:= lcmp(v5, v7);
  #L4338ca.  if v9 != 0 then goto L4337f0;
  #L4338ce.  call `disposeBoundary`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.disposeBoundary:()V` @kind virtual;
  #L4338d4.  return @kind void;
  #L4338d6.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4338da.  if v5 == 0 then goto L4338e0;
  #L4338de.  goto L4337f0;
  #L4338e0.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.bufferSize` @type ^`int`;
  #L4338e4.  call temp:= `create`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4338ea.  v5:= temp @kind object;
  #L4338ec.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4338f2.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4338f8.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.close` @type ^`io.reactivex.functions.Function` @kind object;
  #L4338fc.  v6:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation.open` @type ^`java.lang.Object` @kind object;
  #L433900.  call temp:= `apply`(v7, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L433906.  v6:= temp @kind object;
  #L433908.  v7:= "The ObservableSource supplied is null" @kind object;
  #L43390c.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433912.  v6:= temp @kind object;
  #L433914.  v6:= (`io.reactivex.ObservableSource`) v6 @kind object;
  #L433918.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver`;
  #L43391c.  call `<init>`(v7, v10, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L433922.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L433926.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43392c.  v5:= temp;
  #L43392e.  if v5 == 0 then goto L4337f0;
  #L433932.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L433936.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L43393c.  call `subscribe`(v6, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L433942.  goto L4337f0;
  #L433946.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433948.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43394e.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L433952.  call `onError`(v1, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433958.  goto L4337f0;
  #L43395c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L433962.  v5:= temp @kind object;
  #L433964.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43396a.  v7:= temp;
  #L43396c.  if v7 == 0 then goto L4337f0;
  #L433970.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L433976.  v7:= temp @kind object;
  #L433978.  v7:= (`io.reactivex.subjects.UnicastSubject`) v7 @kind object;
  #L43397c.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L433982.  v8:= temp @kind object;
  #L433984.  call `onNext`(v7, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L43398a.  goto L433964;
  catch `java.lang.Throwable` @[L4338f8..L433918] goto L433946;
}
procedure `void` `error`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.error:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4339a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4339ac.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4339b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4339b6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4339bc.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4339c2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4336b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4336b8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4339d4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.done` @type ^`boolean` @kind boolean;
  #L4339d8.  if v0 == 0 then goto L4339de;
  #L4339dc.  return @kind void;
  #L4339de.  v0:= 1I;
  #L4339e0.  v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4339e4.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.enter:()Z` @kind virtual;
  #L4339ea.  v0:= temp;
  #L4339ec.  if v0 == 0 then goto L4339f6;
  #L4339f0.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.drainLoop:()V` @kind virtual;
  #L4339f6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4339fa.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L433a00.  v0:= temp @kind wide;
  #L433a02.  v2:= 0L;
  #L433a06.  v4:= lcmp(v0, v2);
  #L433a0a.  if v4 != 0 then goto L433a18;
  #L433a0e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L433a12.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L433a18.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L433a1c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L433a22.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L433a34.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.done` @type ^`boolean` @kind boolean;
  #L433a38.  if v0 == 0 then goto L433a44;
  #L433a3c.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L433a42.  return @kind void;
  #L433a44.  v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L433a48.  v0:= 1I;
  #L433a4a.  v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433a4e.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.enter:()Z` @kind virtual;
  #L433a54.  v0:= temp;
  #L433a56.  if v0 == 0 then goto L433a60;
  #L433a5a.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.drainLoop:()V` @kind virtual;
  #L433a60.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L433a64.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L433a6a.  v0:= temp @kind wide;
  #L433a6c.  v2:= 0L;
  #L433a70.  v4:= lcmp(v0, v2);
  #L433a74.  if v4 != 0 then goto L433a82;
  #L433a78.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L433a7c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L433a82.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L433a86.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433a8c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L433aa0.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.fastEnter:()Z` @kind virtual;
  #L433aa6.  v0:= temp;
  #L433aa8.  if v0 == 0 then goto L433ae8;
  #L433aac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.ws` @type ^`java.util.List` @kind object;
  #L433ab0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L433ab6.  v0:= temp @kind object;
  #L433ab8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L433abe.  v1:= temp;
  #L433ac0.  if v1 == 0 then goto L433ad8;
  #L433ac4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L433aca.  v1:= temp @kind object;
  #L433acc.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L433ad0.  call `onNext`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L433ad6.  goto L433ab8;
  #L433ad8.  v3:= -1I;
  #L433ada.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.leave:(I)I` @kind virtual;
  #L433ae0.  v3:= temp;
  #L433ae2.  if v3 != 0 then goto L433b08;
  #L433ae6.  return @kind void;
  #L433ae8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433aec.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L433af2.  v3:= temp @kind object;
  #L433af4.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L433afa.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.enter:()Z` @kind virtual;
  #L433b00.  v3:= temp;
  #L433b02.  if v3 != 0 then goto L433b08;
  #L433b06.  return @kind void;
  #L433b08.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.drainLoop:()V` @kind virtual;
  #L433b0e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L433b20.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433b24.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L433b2a.  v0:= temp;
  #L433b2c.  if v0 == 0 then goto L433b78;
  #L433b30.  v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L433b34.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L433b38.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L433b3e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L433b42.  if v3 == 0 then goto L433b48;
  #L433b46.  return @kind void;
  #L433b48.  v3:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryOpenObserver`;
  #L433b4c.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryOpenObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;)V` @kind direct;
  #L433b52.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.boundary` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433b56.  v1:= 0I;
  #L433b58.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L433b5e.  v0:= temp;
  #L433b60.  if v0 == 0 then goto L433b78;
  #L433b64.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L433b68.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L433b6e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.open` @type ^`io.reactivex.ObservableSource` @kind object;
  #L433b72.  call `subscribe`(v0, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L433b78.  return @kind void;
}
procedure `void` `open`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.open:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L433b8c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433b90.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowOperation`;
  #L433b94.  v2:= 0I;
  #L433b96.  call `<init>`(v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowOperation;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @kind direct;
  #L433b9c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L433ba2.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.enter:()Z` @kind virtual;
  #L433ba8.  v4:= temp;
  #L433baa.  if v4 == 0 then goto L433bb4;
  #L433bae.  call `drainLoop`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver;.drainLoop:()V` @kind virtual;
  #L433bb4.  return @kind void;
}
