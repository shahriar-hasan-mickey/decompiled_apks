record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SamplerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42dc8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42dc92.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` := v1 @kind object;
  #L42dc96.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SamplerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dca8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind object;
  #L42dcac.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.complete:()V` @kind virtual;
  #L42dcb2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SamplerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dcc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind object;
  #L42dcc8.  call `error`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42dcce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SamplerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42dce0.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind object;
  #L42dce4.  call `run`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.run:()V` @kind virtual;
  #L42dcea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SamplerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dcfc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind object;
  #L42dd00.  call temp:= `setOther`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.setOther:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42dd06.  return @kind void;
}
