record `io.reactivex.internal.operators.observable.ObservableObserveOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn.delayError` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableObserveOn.scheduler` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableObserveOn` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/Scheduler;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42a180.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42a186.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L42a18a.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn.delayError` @type ^`boolean` := v3 @kind boolean;
  #L42a18e.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn.bufferSize` @type ^`int` := v4;
  #L42a192.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableObserveOn` v5 @kind this, `io.reactivex.Observer` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42a1a4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42a1a8.  v1:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L42a1ac.  if v1 == 0 then goto L42a1bc;
  #L42a1b0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42a1b4.  call `subscribe`(v0, v6) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42a1ba.  goto L42a1e0;
  #L42a1bc.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L42a1c2.  v0:= temp @kind object;
  #L42a1c4.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42a1c8.  v2:= new `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver`;
  #L42a1cc.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn.delayError` @type ^`boolean` @kind boolean;
  #L42a1d0.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn.bufferSize` @type ^`int`;
  #L42a1d4.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L42a1da.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42a1e0.  return @kind void;
}
