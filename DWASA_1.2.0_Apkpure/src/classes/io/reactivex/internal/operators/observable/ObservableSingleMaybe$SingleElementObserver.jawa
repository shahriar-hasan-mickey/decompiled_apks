record `io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.done` @AccessFlag ;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$SingleElementObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ed94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42ed9a.  v0.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42ed9e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$SingleElementObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42edb0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42edb4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42edba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$SingleElementObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ed74.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42ed78.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42ed7e.  v0:= temp;
  #L42ed80.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$SingleElementObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42edcc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.done` @type ^`boolean` @kind boolean;
  #L42edd0.  if v0 == 0 then goto L42edd6;
  #L42edd4.  return @kind void;
  #L42edd6.  v0:= 1I;
  #L42edd8.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42eddc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.value` @type ^`java.lang.Object` @kind object;
  #L42ede0.  v1:= 0I;
  #L42ede2.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L42ede6.  if v0 != 0 then goto L42edf6;
  #L42edea.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42edee.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42edf4.  goto L42ee00;
  #L42edf6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42edfa.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42ee00.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$SingleElementObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ee14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.done` @type ^`boolean` @kind boolean;
  #L42ee18.  if v0 == 0 then goto L42ee24;
  #L42ee1c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42ee22.  return @kind void;
  #L42ee24.  v0:= 1I;
  #L42ee26.  v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42ee2a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42ee2e.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ee34.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$SingleElementObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ee48.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.done` @type ^`boolean` @kind boolean;
  #L42ee4c.  if v0 == 0 then goto L42ee52;
  #L42ee50.  return @kind void;
  #L42ee52.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.value` @type ^`java.lang.Object` @kind object;
  #L42ee56.  if v0 == 0 then goto L42ee84;
  #L42ee5a.  v3:= 1I;
  #L42ee5c.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.done` @type ^`boolean` := v3 @kind boolean;
  #L42ee60.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42ee64.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42ee6a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42ee6e.  v0:= new `java.lang.IllegalArgumentException`;
  #L42ee72.  v1:= "Sequence contains more than one element!" @kind object;
  #L42ee76.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ee7c.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ee82.  return @kind void;
  #L42ee84.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L42ee88.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$SingleElementObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ee9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42eea0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42eea6.  v0:= temp;
  #L42eea8.  if v0 == 0 then goto L42eeba;
  #L42eeac.  v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42eeb0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42eeb4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42eeba.  return @kind void;
}
