record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable.emitLast` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42dd18.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42dd1e.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.other` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L42dd22.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.emitLast` @type ^`boolean` := v3 @kind boolean;
  #L42dd26.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42dd38.  v0:= new `io.reactivex.observers.SerializedObserver`;
  #L42dd3c.  call `<init>`(v0, v4) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L42dd42.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.emitLast` @type ^`boolean` @kind boolean;
  #L42dd46.  if v4 == 0 then goto L42dd64;
  #L42dd4a.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42dd4e.  v1:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast`;
  #L42dd52.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.other` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42dd56.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42dd5c.  call `subscribe`(v4, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42dd62.  goto L42dd7c;
  #L42dd64.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42dd68.  v1:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast`;
  #L42dd6c.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.other` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42dd70.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainNoLast;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42dd76.  call `subscribe`(v4, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42dd7c.  return @kind void;
}
