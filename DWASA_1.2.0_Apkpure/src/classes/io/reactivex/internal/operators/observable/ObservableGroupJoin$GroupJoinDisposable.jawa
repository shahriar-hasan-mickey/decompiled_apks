record `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.resultSelector` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_VALUE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L426bec.  v0:= 1I;
  #L426bee.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L426bf4.  v0:= temp @kind object;
  #L426bf6.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L426bfa.  v0:= 2I;
  #L426bfc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L426c02.  v0:= temp @kind object;
  #L426c04.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L426c08.  v0:= 3I;
  #L426c0a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L426c10.  v0:= temp @kind object;
  #L426c12.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L426c16.  v0:= 4I;
  #L426c18.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L426c1e.  v0:= temp @kind object;
  #L426c20.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L426c24.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L426c38.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L426c3e.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L426c42.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L426c46.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L426c4c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L426c50.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L426c54.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L426c5a.  v0:= temp;
  #L426c5c.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L426c62.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L426c66.  v2:= new `java.util.LinkedHashMap`;
  #L426c6a.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L426c70.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` := v2 @kind object;
  #L426c74.  v2:= new `java.util.LinkedHashMap`;
  #L426c78.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L426c7e.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` := v2 @kind object;
  #L426c82.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L426c86.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L426c8c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L426c90.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftEnd` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L426c94.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightEnd` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L426c98.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.resultSelector` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L426c9c.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L426ca0.  v3:= 2I;
  #L426ca2.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L426ca8.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L426cac.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;

  #L426cc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L426cc4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L426cca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426cdc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L426ce0.  if v0 == 0 then goto L426ce6;
  #L426ce4.  return @kind void;
  #L426ce6.  v0:= 1I;
  #L426ce8.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L426cec.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L426cf2.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.getAndIncrement:()I` @kind virtual;
  #L426cf8.  v0:= temp;
  #L426cfa.  if v0 != 0 then goto L426d08;
  #L426cfe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L426d02.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L426d08.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L426d1c.  call temp:= `getAndIncrement`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.getAndIncrement:()I` @kind virtual;
  #L426d22.  v0:= temp;
  #L426d24.  if v0 == 0 then goto L426d2a;
  #L426d28.  return @kind void;
  #L426d2a.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L426d2e.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L426d32.  v2:= 1I;
  #L426d34.  v3:= 1I;
  #L426d36.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L426d3a.  if v4 == 0 then goto L426d46;
  #L426d3e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L426d44.  return @kind void;
  #L426d46.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426d4a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L426d50.  v4:= temp @kind object;
  #L426d52.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L426d56.  if v4 == 0 then goto L426d6e;
  #L426d5a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L426d60.  call `cancelAll`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L426d66.  call `errorAll`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/Observer;)V` @kind virtual;
  #L426d6c.  return @kind void;
  #L426d6e.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L426d72.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L426d78.  v4:= temp;
  #L426d7a.  v5:= 0I;
  #L426d7c.  if v4 != 0 then goto L426d84;
  #L426d80.  v4:= 1I;
  #L426d82.  goto L426d86;
  #L426d84.  v4:= 0I;
  #L426d86.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L426d8c.  v6:= temp @kind object;
  #L426d8e.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L426d92.  if v6 != 0 then goto L426d9a;
  #L426d96.  v7:= 1I;
  #L426d98.  goto L426d9c;
  #L426d9a.  v7:= 0I;
  #L426d9c.  if v4 == 0 then goto L426dfe;
  #L426da0.  if v7 == 0 then goto L426dfe;
  #L426da4.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L426da8.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L426dae.  v0:= temp @kind object;
  #L426db0.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L426db6.  v0:= temp @kind object;
  #L426db8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426dbe.  v2:= temp;
  #L426dc0.  if v2 == 0 then goto L426dd8;
  #L426dc4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426dca.  v2:= temp @kind object;
  #L426dcc.  v2:= (`io.reactivex.subjects.UnicastSubject`) v2 @kind object;
  #L426dd0.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L426dd6.  goto L426db8;
  #L426dd8.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L426ddc.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L426de2.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L426de6.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L426dec.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L426df0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L426df6.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L426dfc.  return @kind void;
  #L426dfe.  if v7 == 0 then goto L426e12;
  #L426e02.  v3:= -v3 @kind int;
  #L426e04.  call temp:= `addAndGet`(v9, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.addAndGet:(I)I` @kind virtual;
  #L426e0a.  v3:= temp;
  #L426e0c.  if v3 != 0 then goto L426d36;
  #L426e10.  return @kind void;
  #L426e12.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L426e18.  v4:= temp @kind object;
  #L426e1a.  v7:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L426e1e.  if v6 != v7 then goto L426f08;
  #L426e22.  call temp:= `create`() @signature `Lio/reactivex/subjects/UnicastSubject;.create:()Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L426e28.  v5:= temp @kind object;
  #L426e2a.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftIndex` @type ^`int`;
  #L426e2e.  v7:= v6 + 1;
  #L426e32.  v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftIndex` @type ^`int` := v7;
  #L426e36.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L426e3a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L426e40.  v8:= temp @kind object;
  #L426e42.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L426e48.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftEnd` @type ^`io.reactivex.functions.Function` @kind object;
  #L426e4c.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L426e52.  v7:= temp @kind object;
  #L426e54.  v8:= "The leftEnd returned a null ObservableSource" @kind object;
  #L426e58.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L426e5e.  v7:= temp @kind object;
  #L426e60.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L426e64.  v8:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`;
  #L426e68.  call `<init>`(v8, v9, v2, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;ZI)V` @kind direct;
  #L426e6e.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L426e72.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L426e78.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L426e7e.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426e82.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L426e88.  v6:= temp @kind object;
  #L426e8a.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L426e8e.  if v6 == 0 then goto L426ea6;
  #L426e92.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L426e98.  call `cancelAll`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L426e9e.  call `errorAll`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/Observer;)V` @kind virtual;
  #L426ea4.  return @kind void;
  #L426ea6.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.resultSelector` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L426eaa.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L426eb0.  v4:= temp @kind object;
  #L426eb2.  v6:= "The resultSelector returned a null value" @kind object;
  #L426eb6.  call temp:= `requireNonNull`(v4, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L426ebc.  v4:= temp @kind object;
  #L426ebe.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L426ec4.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L426ec8.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L426ece.  v4:= temp @kind object;
  #L426ed0.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L426ed6.  v4:= temp @kind object;
  #L426ed8.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426ede.  v6:= temp;
  #L426ee0.  if v6 == 0 then goto L426d36;
  #L426ee4.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426eea.  v6:= temp @kind object;
  #L426eec.  call `onNext`(v5, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L426ef2.  goto L426ed8;
  #L426ef4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L426ef6.  call `fail`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L426efc.  return @kind void;
  #L426efe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L426f00.  call `fail`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L426f06.  return @kind void;
  #L426f08.  v7:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L426f0c.  if v6 != v7 then goto L426fca;
  #L426f10.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightIndex` @type ^`int`;
  #L426f14.  v7:= v6 + 1;
  #L426f18.  v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightIndex` @type ^`int` := v7;
  #L426f1c.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L426f20.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L426f26.  v8:= temp @kind object;
  #L426f28.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L426f2e.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightEnd` @type ^`io.reactivex.functions.Function` @kind object;
  #L426f32.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L426f38.  v7:= temp @kind object;
  #L426f3a.  v8:= "The rightEnd returned a null ObservableSource" @kind object;
  #L426f3e.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L426f44.  v7:= temp @kind object;
  #L426f46.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L426f4a.  v8:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`;
  #L426f4e.  call `<init>`(v8, v9, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$JoinSupport;ZI)V` @kind direct;
  #L426f54.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L426f58.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L426f5e.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L426f64.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426f68.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L426f6e.  v5:= temp @kind object;
  #L426f70.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L426f74.  if v5 == 0 then goto L426f8c;
  #L426f78.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L426f7e.  call `cancelAll`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L426f84.  call `errorAll`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/Observer;)V` @kind virtual;
  #L426f8a.  return @kind void;
  #L426f8c.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L426f90.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L426f96.  v5:= temp @kind object;
  #L426f98.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L426f9e.  v5:= temp @kind object;
  #L426fa0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426fa6.  v6:= temp;
  #L426fa8.  if v6 == 0 then goto L426d36;
  #L426fac.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426fb2.  v6:= temp @kind object;
  #L426fb4.  v6:= (`io.reactivex.subjects.UnicastSubject`) v6 @kind object;
  #L426fb8.  call `onNext`(v6, v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L426fbe.  goto L426fa0;
  #L426fc0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L426fc2.  call `fail`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L426fc8.  return @kind void;
  #L426fca.  v5:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L426fce.  if v6 != v5 then goto L42700a;
  #L426fd2.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`) v4 @kind object;
  #L426fd6.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L426fda.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @type ^`int`;
  #L426fde.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L426fe4.  v6:= temp @kind object;
  #L426fe6.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L426fec.  v5:= temp @kind object;
  #L426fee.  v5:= (`io.reactivex.subjects.UnicastSubject`) v5 @kind object;
  #L426ff2.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L426ff6.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L426ffc.  if v5 == 0 then goto L426d36;
  #L427000.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L427006.  goto L426d36;
  #L42700a.  v5:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L42700e.  if v6 != v5 then goto L426d36;
  #L427012.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`) v4 @kind object;
  #L427016.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L42701a.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @type ^`int`;
  #L42701e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L427024.  v6:= temp @kind object;
  #L427026.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42702c.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L427030.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L427036.  goto L426d36;
  catch `java.lang.Throwable` @[L426e48..L426e64] goto L426efe;
  catch `java.lang.Throwable` @[L426ea6..L426ebe] goto L426ef4;
  catch `java.lang.Throwable` @[L426f2e..L426f4a] goto L426fc0;
}
procedure `void` `errorAll`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L427070.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427074.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L42707a.  v0:= temp @kind object;
  #L42707c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L427080.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L427086.  v1:= temp @kind object;
  #L427088.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42708e.  v1:= temp @kind object;
  #L427090.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L427096.  v2:= temp;
  #L427098.  if v2 == 0 then goto L4270b0;
  #L42709c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4270a2.  v2:= temp @kind object;
  #L4270a4.  v2:= (`io.reactivex.subjects.UnicastSubject`) v2 @kind object;
  #L4270a8.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4270ae.  goto L427090;
  #L4270b0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L4270b4.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4270ba.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L4270be.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4270c4.  call `onError`(v4, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4270ca.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.Observer` v3 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4270dc.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4270e2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4270e6.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4270ec.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4270f2.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L4270f8.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/Observer;)V` @kind virtual;
  #L4270fe.  return @kind void;
}
procedure `void` `innerClose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerClose:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427110.  @monitorenter v1
  #L427112.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L427116.  if v2 == 0 then goto L427120;
  #L42711a.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L42711e.  goto L427124;
  #L427120.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L427124.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42712a.  @monitorexit v1
  #L42712c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L427132.  return @kind void;
  #L427134.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427136.  @monitorexit v1
  #L427138.  throw v2;
  catch `java.lang.Throwable` @[L427112..L42712c] goto L427134;
  catch `java.lang.Throwable` @[L427136..L427138] goto L427134;
}
procedure `void` `innerCloseError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerCloseError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427160.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427164.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L42716a.  v0:= temp;
  #L42716c.  if v0 == 0 then goto L427178;
  #L427170.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L427176.  goto L42717e;
  #L427178.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42717e.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerComplete:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427190.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L427194.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42719a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42719e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4271a4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L4271aa.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4271bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4271c0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4271c6.  v0:= temp;
  #L4271c8.  if v0 == 0 then goto L4271de;
  #L4271cc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4271d0.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4271d6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L4271dc.  goto L4271e4;
  #L4271de.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4271e4.  return @kind void;
}
procedure `void` `innerValue`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerValue:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4271f8.  @monitorenter v1
  #L4271fa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4271fe.  if v2 == 0 then goto L427208;
  #L427202.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L427206.  goto L42720c;
  #L427208.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L42720c.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L427212.  @monitorexit v1
  #L427214.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L42721a.  return @kind void;
  #L42721c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42721e.  @monitorexit v1
  #L427220.  throw v2;
  catch `java.lang.Throwable` @[L4271fa..L427214] goto L42721c;
  catch `java.lang.Throwable` @[L42721e..L427220] goto L42721c;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426bd4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L426bd8.  return v0;
}
