record `io.reactivex.internal.operators.observable.ObservableHide$HideDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableHide$HideDisposable;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4274b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4274ba.  v0.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4274be.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableHide$HideDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4274d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4274d4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4274da.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableHide$HideDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427494.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L427498.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42749e.  v0:= temp;
  #L4274a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableHide$HideDisposable;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4274ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4274f0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4274f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableHide$HideDisposable;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427508.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42750c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L427512.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableHide$HideDisposable;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427524.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L427528.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42752e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableHide$HideDisposable;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427540.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L427544.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42754a.  v0:= temp;
  #L42754c.  if v0 == 0 then goto L42755e;
  #L427550.  v1.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L427554.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableHide$HideDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L427558.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42755e.  return @kind void;
}
