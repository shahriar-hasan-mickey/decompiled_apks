record `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowSkipObserver$SubjectWork` @kind class @AccessFlag FINAL {
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowSkipObserver$SubjectWork.open` @AccessFlag FINAL;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowSkipObserver$SubjectWork.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowSkipObserver$SubjectWork` v0 @kind this, `io.reactivex.subjects.UnicastSubject` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowSkipObserver$SubjectWork;.<init>:(Lio/reactivex/subjects/UnicastSubject;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L434a8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L434a92.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowSkipObserver$SubjectWork.w` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L434a96.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowSkipObserver$SubjectWork.open` @type ^`boolean` := v2 @kind boolean;
  #L434a9a.  return @kind void;
}
