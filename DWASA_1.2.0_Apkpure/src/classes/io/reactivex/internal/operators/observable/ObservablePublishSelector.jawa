record `io.reactivex.internal.operators.observable.ObservablePublishSelector` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservablePublishSelector.selector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublishSelector` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42aad8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42aade.  v0.`io.reactivex.internal.operators.observable.ObservablePublishSelector.selector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42aae2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservablePublishSelector` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L42aaf4.  call temp:= `create`() @signature `Lio/reactivex/subjects/PublishSubject;.create:()Lio/reactivex/subjects/PublishSubject;` @kind static;
  #L42aafa.  v0:= temp @kind object;
  #L42aafc.  v1:= v3.`io.reactivex.internal.operators.observable.ObservablePublishSelector.selector` @type ^`io.reactivex.functions.Function` @kind object;
  #L42ab00.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42ab06.  v1:= temp @kind object;
  #L42ab08.  v2:= "The selector returned a null ObservableSource" @kind object;
  #L42ab0c.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42ab12.  v1:= temp @kind object;
  #L42ab14.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L42ab18.  v2:= new `io.reactivex.internal.operators.observable.ObservablePublishSelector$TargetObserver`;
  #L42ab1c.  call `<init>`(v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$TargetObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L42ab22.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42ab28.  v4:= v3.`io.reactivex.internal.operators.observable.ObservablePublishSelector.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42ab2c.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublishSelector$SourceObserver`;
  #L42ab30.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$SourceObserver;.<init>:(Lio/reactivex/subjects/PublishSubject;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L42ab36.  call `subscribe`(v4, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42ab3c.  return @kind void;
  #L42ab3e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42ab40.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42ab46.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L42ab4c.  return @kind void;
  catch `java.lang.Throwable` @[L42aafc..L42ab18] goto L42ab3e;
}
