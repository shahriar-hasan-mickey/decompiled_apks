record `io.reactivex.internal.operators.observable.ObservableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` `io.reactivex.internal.operators.observable.ObservableRefCount.connection` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableRefCount.n` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableRefCount.scheduler` @AccessFlag FINAL;
  `io.reactivex.observables.ConnectableObservable` `io.reactivex.internal.operators.observable.ObservableRefCount.source` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRefCount.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableRefCount.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.observables.ConnectableObservable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42b648.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42b64c.  call temp:= `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @kind static;
  #L42b652.  v6:= temp @kind object;
  #L42b654.  v2:= 1I;
  #L42b656.  v3:= 0L;
  #L42b65a.  v0:= v7 @kind object;
  #L42b65c.  v1:= v8 @kind object;
  #L42b65e.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L42b664.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount` v0 @kind this, `io.reactivex.observables.ConnectableObservable` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b678.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L42b67e.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` := v1 @kind object;
  #L42b682.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.n` @type ^`int` := v2;
  #L42b686.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.timeout` @type ^`long` := v3 @kind wide;
  #L42b68a.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L42b68e.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.scheduler` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L42b692.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.cancel:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b6a4.  @monitorenter v5
  #L42b6a6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b6aa.  if v0 == 0 then goto L42b722;
  #L42b6ae.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b6b2.  if v0 == v6 then goto L42b6b8;
  #L42b6b6.  goto L42b722;
  #L42b6b8.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L42b6bc.  v2:= 1L;
  #L42b6c0.  v0:= v0 - v2 @kind long;
  #L42b6c2.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` := v0 @kind wide;
  #L42b6c6.  v2:= 0L;
  #L42b6ca.  v4:= lcmp(v0, v2);
  #L42b6ce.  if v4 != 0 then goto L42b71e;
  #L42b6d2.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.connected` @type ^`boolean` @kind boolean;
  #L42b6d6.  if v0 != 0 then goto L42b6dc;
  #L42b6da.  goto L42b71e;
  #L42b6dc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.timeout` @type ^`long` @kind wide;
  #L42b6e0.  v4:= lcmp(v0, v2);
  #L42b6e4.  if v4 != 0 then goto L42b6f2;
  #L42b6e8.  call `timeout`(v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.timeout:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L42b6ee.  @monitorexit v5
  #L42b6f0.  return @kind void;
  #L42b6f2.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L42b6f6.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L42b6fc.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42b700.  @monitorexit v5
  #L42b702.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42b706.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.timeout` @type ^`long` @kind wide;
  #L42b70a.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42b70e.  call temp:= `scheduleDirect`(v1, v6, v2, v4) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42b714.  v6:= temp @kind object;
  #L42b716.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42b71c.  return @kind void;
  #L42b71e.  @monitorexit v5
  #L42b720.  return @kind void;
  #L42b722.  @monitorexit v5
  #L42b724.  return @kind void;
  #L42b726.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b728.  @monitorexit v5
  #L42b72a.  throw v6;
  catch `java.lang.Throwable` @[L42b6a6..L42b702] goto L42b726;
  catch `java.lang.Throwable` @[L42b71e..L42b72a] goto L42b726;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.Observer` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42b750.  @monitorenter v7
  #L42b752.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b756.  if v0 != 0 then goto L42b768;
  #L42b75a.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection`;
  #L42b75e.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;)V` @kind direct;
  #L42b764.  v7.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` := v0 @kind object;
  #L42b768.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L42b76c.  v3:= 0L;
  #L42b770.  v5:= lcmp(v1, v3);
  #L42b774.  if v5 != 0 then goto L42b78a;
  #L42b778.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b77c.  if v3 == 0 then goto L42b78a;
  #L42b780.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b784.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b78a.  v3:= 1L;
  #L42b78e.  v1:= v1 + v3 @kind long;
  #L42b790.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` := v1 @kind wide;
  #L42b794.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.connected` @type ^`boolean` @kind boolean;
  #L42b798.  v4:= 1I;
  #L42b79a.  if v3 != 0 then goto L42b7b2;
  #L42b79e.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.n` @type ^`int`;
  #L42b7a2.  v5:= (`long`) v3 @kind i2l;
  #L42b7a4.  v3:= lcmp(v1, v5);
  #L42b7a8.  if v3 != 0 then goto L42b7b2;
  #L42b7ac.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.connected` @type ^`boolean` := v4 @kind boolean;
  #L42b7b0.  goto L42b7b4;
  #L42b7b2.  v4:= 0I;
  #L42b7b4.  @monitorexit v7
  #L42b7b6.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b7ba.  v2:= new `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver`;
  #L42b7be.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind direct;
  #L42b7c4.  call `subscribe`(v1, v2) @signature `Lio/reactivex/observables/ConnectableObservable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L42b7ca.  if v4 == 0 then goto L42b7d8;
  #L42b7ce.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b7d2.  call `connect`(v8, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L42b7d8.  return @kind void;
  #L42b7da.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b7dc.  @monitorexit v7
  #L42b7de.  throw v8;
  catch `java.lang.Throwable` @[L42b752..L42b7b6] goto L42b7da;
  catch `java.lang.Throwable` @[L42b7dc..L42b7de] goto L42b7da;
}
procedure `void` `terminated`(`io.reactivex.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.terminated:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b804.  @monitorenter v5
  #L42b806.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b80a.  if v0 == 0 then goto L42b82e;
  #L42b80e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b812.  if v0 != v6 then goto L42b82e;
  #L42b816.  v0:= 0I;
  #L42b818.  v5.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` := v0 @kind object;
  #L42b81c.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b820.  if v0 == 0 then goto L42b82e;
  #L42b824.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b828.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b82e.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L42b832.  v2:= 1L;
  #L42b836.  v0:= v0 - v2 @kind long;
  #L42b838.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` := v0 @kind wide;
  #L42b83c.  v2:= 0L;
  #L42b840.  v4:= lcmp(v0, v2);
  #L42b844.  if v4 != 0 then goto L42b88a;
  #L42b848.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b84c.  v0:= instanceof @variable v0 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L42b850.  if v0 == 0 then goto L42b864;
  #L42b854.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b858.  v6:= (`io.reactivex.disposables.Disposable`) v6 @kind object;
  #L42b85c.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b862.  goto L42b88a;
  #L42b864.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b868.  v0:= instanceof @variable v0 @type ^`io.reactivex.internal.disposables.ResettableConnectable` @kind boolean;
  #L42b86c.  if v0 == 0 then goto L42b88a;
  #L42b870.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b874.  v0:= (`io.reactivex.internal.disposables.ResettableConnectable`) v0 @kind object;
  #L42b878.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b87e.  v6:= temp @kind object;
  #L42b880.  v6:= (`io.reactivex.disposables.Disposable`) v6 @kind object;
  #L42b884.  call `resetIf`(v0, v6) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b88a.  @monitorexit v5
  #L42b88c.  return @kind void;
  #L42b88e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b890.  @monitorexit v5
  #L42b892.  throw v6;
  catch `java.lang.Throwable` @[L42b806..L42b892] goto L42b88e;
}
procedure `void` `timeout`(`io.reactivex.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.timeout:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b8b0.  @monitorenter v5
  #L42b8b2.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L42b8b6.  v2:= 0L;
  #L42b8ba.  v4:= lcmp(v0, v2);
  #L42b8be.  if v4 != 0 then goto L42b918;
  #L42b8c2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b8c6.  if v6 != v0 then goto L42b918;
  #L42b8ca.  v0:= 0I;
  #L42b8cc.  v5.`io.reactivex.internal.operators.observable.ObservableRefCount.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` := v0 @kind object;
  #L42b8d0.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b8d6.  v0:= temp @kind object;
  #L42b8d8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42b8dc.  call temp:= `dispose`(v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42b8e2.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b8e6.  v6:= instanceof @variable v6 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L42b8ea.  if v6 == 0 then goto L42b8fe;
  #L42b8ee.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b8f2.  v6:= (`io.reactivex.disposables.Disposable`) v6 @kind object;
  #L42b8f6.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b8fc.  goto L42b918;
  #L42b8fe.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b902.  v6:= instanceof @variable v6 @type ^`io.reactivex.internal.disposables.ResettableConnectable` @kind boolean;
  #L42b906.  if v6 == 0 then goto L42b918;
  #L42b90a.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.source` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L42b90e.  v6:= (`io.reactivex.internal.disposables.ResettableConnectable`) v6 @kind object;
  #L42b912.  call `resetIf`(v6, v0) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b918.  @monitorexit v5
  #L42b91a.  return @kind void;
  #L42b91c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b91e.  @monitorexit v5
  #L42b920.  throw v6;
  catch `java.lang.Throwable` @[L42b8b2..L42b920] goto L42b91c;
}
