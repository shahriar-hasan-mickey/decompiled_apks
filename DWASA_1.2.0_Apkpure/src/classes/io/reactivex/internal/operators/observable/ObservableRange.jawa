record `io.reactivex.internal.operators.observable.ObservableRange` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableRange.end` @AccessFlag PRIVATE_FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableRange.start` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRange` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42b048.  call `<init>`(v2) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L42b04e.  v2.`io.reactivex.internal.operators.observable.ObservableRange.start` @type ^`int` := v3;
  #L42b052.  v0:= (`long`) v3 @kind i2l;
  #L42b054.  v3:= (`long`) v4 @kind i2l;
  #L42b056.  v0:= v0 + v3 @kind long;
  #L42b058.  v2.`io.reactivex.internal.operators.observable.ObservableRange.end` @type ^`long` := v0 @kind wide;
  #L42b05c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableRange` v7 @kind this, `io.reactivex.Observer` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRange;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42b070.  v6:= new `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable`;
  #L42b074.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange.start` @type ^`int`;
  #L42b078.  v2:= (`long`) v0 @kind i2l;
  #L42b07a.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableRange.end` @type ^`long` @kind wide;
  #L42b07e.  v0:= v6 @kind object;
  #L42b080.  v1:= v8 @kind object;
  #L42b082.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.<init>:(Lio/reactivex/Observer;JJ)V` @kind direct;
  #L42b088.  call `onSubscribe`(v8, v6) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b08e.  call `run`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.run:()V` @kind virtual;
  #L42b094.  return @kind void;
}
