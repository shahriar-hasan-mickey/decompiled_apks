record `io.reactivex.internal.operators.observable.ObservableCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCount` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCount;.<init>:(Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L421680.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L421686.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableCount` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCount;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421698.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCount.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42169c.  v1:= new `io.reactivex.internal.operators.observable.ObservableCount$CountObserver`;
  #L4216a0.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCount$CountObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L4216a6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4216ac.  return @kind void;
}
