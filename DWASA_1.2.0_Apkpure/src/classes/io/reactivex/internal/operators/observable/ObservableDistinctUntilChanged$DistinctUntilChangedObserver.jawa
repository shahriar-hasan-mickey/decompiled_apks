record `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.comparer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.hasValue` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.keySelector` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.last` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$DistinctUntilChangedObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L422ca8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L422cae.  v0.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L422cb2.  v0.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.comparer` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L422cb6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$DistinctUntilChangedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L422cc8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.done` @type ^`boolean` @kind boolean;
  #L422ccc.  if v0 == 0 then goto L422cd2;
  #L422cd0.  return @kind void;
  #L422cd2.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.sourceMode` @type ^`int`;
  #L422cd6.  if v0 == 0 then goto L422ce6;
  #L422cda.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422cde.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422ce4.  return @kind void;
  #L422ce6.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L422cea.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L422cf0.  v0:= temp @kind object;
  #L422cf2.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.hasValue` @type ^`boolean` @kind boolean;
  #L422cf6.  if v1 == 0 then goto L422d14;
  #L422cfa.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L422cfe.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.last` @type ^`java.lang.Object` @kind object;
  #L422d02.  call temp:= `test`(v1, v2, v0) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L422d08.  v1:= temp;
  #L422d0a.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.last` @type ^`java.lang.Object` := v0 @kind object;
  #L422d0e.  if v1 == 0 then goto L422d1e;
  #L422d12.  return @kind void;
  #L422d14.  v1:= 1I;
  #L422d16.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.hasValue` @type ^`boolean` := v1 @kind boolean;
  #L422d1a.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.last` @type ^`java.lang.Object` := v0 @kind object;
  #L422d1e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422d22.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422d28.  return @kind void;
  #L422d2a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L422d2c.  call `fail`(v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$DistinctUntilChangedObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L422d32.  return @kind void;
  catch `java.lang.Throwable` @[L422ce6..L422d1e] goto L422d2a;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$DistinctUntilChangedObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L422c44.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L422c48.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.poll:()Ljava/lang/Object;` @kind interface;
  #L422c4e.  v0:= temp @kind object;
  #L422c50.  if v0 != 0 then goto L422c58;
  #L422c54.  v0:= 0I;
  #L422c56.  return v0 @kind object;
  #L422c58.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L422c5c.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L422c62.  v1:= temp @kind object;
  #L422c64.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.hasValue` @type ^`boolean` @kind boolean;
  #L422c68.  if v2 != 0 then goto L422c78;
  #L422c6c.  v2:= 1I;
  #L422c6e.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.hasValue` @type ^`boolean` := v2 @kind boolean;
  #L422c72.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.last` @type ^`java.lang.Object` := v1 @kind object;
  #L422c76.  return v0 @kind object;
  #L422c78.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L422c7c.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.last` @type ^`java.lang.Object` @kind object;
  #L422c80.  call temp:= `test`(v2, v3, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L422c86.  v2:= temp;
  #L422c88.  if v2 != 0 then goto L422c92;
  #L422c8c.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.last` @type ^`java.lang.Object` := v1 @kind object;
  #L422c90.  return v0 @kind object;
  #L422c92.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.last` @type ^`java.lang.Object` := v1 @kind object;
  #L422c96.  goto L422c44;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$DistinctUntilChangedObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L422c28.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$DistinctUntilChangedObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L422c2e.  v1:= temp;
  #L422c30.  return v1;
}
