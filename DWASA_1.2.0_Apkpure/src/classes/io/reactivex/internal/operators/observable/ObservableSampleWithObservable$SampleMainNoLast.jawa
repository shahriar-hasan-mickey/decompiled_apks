record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind class {
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainNoLast;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42da50.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42da56.  return @kind void;
}
procedure `void` `completeMain`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainNoLast;.completeMain:()V` @AccessFlag  {
    temp;
    v0;

  #L42da68.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42da6c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42da72.  return @kind void;
}
procedure `void` `completeOther`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainNoLast;.completeOther:()V` @AccessFlag  {
    temp;
    v0;

  #L42da84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42da88.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42da8e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainNoLast;.run:()V` @AccessFlag  {
    temp;

  #L42daa0.  call `emit`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainNoLast;.emit:()V` @kind virtual;
  #L42daa6.  return @kind void;
}
