record `io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.reducer` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceSeedSingle$ReduceSeedObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42b28c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42b292.  v0.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L42b296.  v0.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L42b29a.  v0.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.reducer` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L42b29e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceSeedSingle$ReduceSeedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b2b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b2b4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b2ba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceSeedSingle$ReduceSeedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b26c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b270.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42b276.  v0:= temp;
  #L42b278.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceSeedSingle$ReduceSeedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b2cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.value` @type ^`java.lang.Object` @kind object;
  #L42b2d0.  if v0 == 0 then goto L42b2e4;
  #L42b2d4.  v1:= 0I;
  #L42b2d6.  v2.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L42b2da.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42b2de.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42b2e4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceSeedSingle$ReduceSeedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b2f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.value` @type ^`java.lang.Object` @kind object;
  #L42b2fc.  if v0 == 0 then goto L42b312;
  #L42b300.  v0:= 0I;
  #L42b302.  v1.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.value` @type ^`java.lang.Object` := v0 @kind object;
  #L42b306.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42b30a.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b310.  goto L42b318;
  #L42b312.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42b318.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceSeedSingle$ReduceSeedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b32c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.value` @type ^`java.lang.Object` @kind object;
  #L42b330.  if v0 == 0 then goto L42b36a;
  #L42b334.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.reducer` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L42b338.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42b33e.  v3:= temp @kind object;
  #L42b340.  v0:= "The reducer returned a null value" @kind object;
  #L42b344.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42b34a.  v3:= temp @kind object;
  #L42b34c.  v2.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L42b350.  goto L42b36a;
  #L42b352.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b354.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42b35a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b35e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b364.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceSeedSingle$ReduceSeedObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42b36a.  return @kind void;
  catch `java.lang.Throwable` @[L42b334..L42b350] goto L42b352;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceSeedSingle$ReduceSeedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b388.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b38c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b392.  v0:= temp;
  #L42b394.  if v0 == 0 then goto L42b3a6;
  #L42b398.  v1.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42b39c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42b3a0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b3a6.  return @kind void;
}
