record `io.reactivex.internal.operators.observable.ObservableConcatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap.bufferSize` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.observable.ObservableConcatMap.delayErrors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMap.mapper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L420f24.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L420f2a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L420f2e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap.delayErrors` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L420f32.  v1:= 8I;
  #L420f36.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L420f3c.  v1:= temp;
  #L420f3e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap.bufferSize` @type ^`int` := v1;
  #L420f42.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableConcatMap` v6 @kind this, `io.reactivex.Observer` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L420f54.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L420f58.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L420f5c.  call temp:= `tryScalarXMapSubscribe`(v0, v7, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.tryScalarXMapSubscribe:(Lio/reactivex/ObservableSource;Lio/reactivex/Observer;Lio/reactivex/functions/Function;)Z` @kind static;
  #L420f62.  v0:= temp;
  #L420f64.  if v0 == 0 then goto L420f6a;
  #L420f68.  return @kind void;
  #L420f6a.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.delayErrors` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420f6e.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420f72.  if v0 != v1 then goto L420f9e;
  #L420f76.  v0:= new `io.reactivex.observers.SerializedObserver`;
  #L420f7a.  call `<init>`(v0, v7) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L420f80.  v7:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L420f84.  v1:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver`;
  #L420f88.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L420f8c.  v3:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.bufferSize` @type ^`int`;
  #L420f90.  call `<init>`(v1, v0, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L420f96.  call `subscribe`(v7, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L420f9c.  goto L420fcc;
  #L420f9e.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L420fa2.  v1:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver`;
  #L420fa6.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L420faa.  v3:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.bufferSize` @type ^`int`;
  #L420fae.  v4:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.delayErrors` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420fb2.  v5:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420fb6.  if v4 != v5 then goto L420fbe;
  #L420fba.  v4:= 1I;
  #L420fbc.  goto L420fc0;
  #L420fbe.  v4:= 0I;
  #L420fc0.  call `<init>`(v1, v7, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L420fc6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L420fcc.  return @kind void;
}
