record `io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$DetachObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L422958.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42295e.  v0.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L422962.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$DetachObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L422974.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L422978.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L42297c.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L422980.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L422986.  v1:= temp @kind object;
  #L422988.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42298c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L422992.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$DetachObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422938.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42293c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L422942.  v0:= temp;
  #L422944.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$DetachObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4229a4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4229a8.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L4229ac.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L4229b0.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L4229b6.  v1:= temp @kind object;
  #L4229b8.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4229bc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4229c2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$DetachObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4229d4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4229d8.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L4229dc.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L4229e0.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L4229e6.  v1:= temp @kind object;
  #L4229e8.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4229ec.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4229f2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$DetachObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422a04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422a08.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422a0e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$DetachObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422a20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L422a24.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L422a2a.  v0:= temp;
  #L422a2c.  if v0 == 0 then goto L422a3e;
  #L422a30.  v1.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L422a34.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L422a38.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L422a3e.  return @kind void;
}
