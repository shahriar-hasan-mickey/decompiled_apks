record `io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` @kind class @AccessFlag FINAL extends `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] `io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;.<init>:(Lio/reactivex/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41c994.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41c99a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L41c99e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41c9a4.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L41c9a8.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L41c9ac.  v2:= new `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[v3];
  #L41c9b0.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] := v2 @kind object;
  #L41c9b4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41c9c8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c9cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L41c9d2.  v0:= temp;
  #L41c9d4.  v1:= -1I;
  #L41c9d6.  if v0 == v1 then goto L41ca00;
  #L41c9da.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c9de.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L41c9e4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] @kind object;
  #L41c9e8.  v1:= length @variable v0;
  #L41c9ea.  v2:= 0I;
  #L41c9ec.  if v2 >= v1 then goto L41ca00;
  #L41c9f0.  v3:= v0[v2] @kind object;
  #L41c9f4.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.dispose:()V` @kind virtual;
  #L41c9fa.  v2:= v2 + 1;
  #L41c9fe.  goto L41c9ec;
  #L41ca00.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c904.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c908.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L41c90e.  v0:= temp;
  #L41c910.  v1:= -1I;
  #L41c912.  if v0 != v1 then goto L41c91a;
  #L41c916.  v0:= 1I;
  #L41c918.  goto L41c91c;
  #L41c91a.  v0:= 0I;
  #L41c91c.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` v7 @kind this, `io.reactivex.ObservableSource`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;.subscribe:([Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41ca14.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] @kind object;
  #L41ca18.  v1:= length @variable v0;
  #L41ca1a.  v2:= 0I;
  #L41ca1c.  v3:= 0I;
  #L41ca1e.  if v3 >= v1 then goto L41ca3c;
  #L41ca22.  v4:= new `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`;
  #L41ca26.  v5:= v3 + 1;
  #L41ca2a.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ca2e.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;ILio/reactivex/Observer;)V` @kind direct;
  #L41ca34.  v0[v3]:= v4 @kind object;
  #L41ca38.  v3:= v5;
  #L41ca3a.  goto L41ca1e;
  #L41ca3c.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41ca40.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L41ca46.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ca4a.  call `onSubscribe`(v3, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41ca50.  if v2 >= v1 then goto L41ca7a;
  #L41ca54.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41ca58.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L41ca5e.  v3:= temp;
  #L41ca60.  if v3 == 0 then goto L41ca66;
  #L41ca64.  return @kind void;
  #L41ca66.  v3:= v8[v2] @kind object;
  #L41ca6a.  v4:= v0[v2] @kind object;
  #L41ca6e.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41ca74.  v2:= v2 + 1;
  #L41ca78.  goto L41ca50;
  #L41ca7a.  return @kind void;
}
procedure `boolean` `win`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` v5 @kind this, `int` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;.win:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41c930.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c934.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L41c93a.  v0:= temp;
  #L41c93c.  v1:= 1I;
  #L41c93e.  v2:= 0I;
  #L41c940.  if v0 != 0 then goto L41c978;
  #L41c944.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c948.  call temp:= `compareAndSet`(v0, v2, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L41c94e.  v0:= temp;
  #L41c950.  if v0 == 0 then goto L41c976;
  #L41c954.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] @kind object;
  #L41c958.  v3:= length @variable v0;
  #L41c95a.  if v2 >= v3 then goto L41c974;
  #L41c95e.  v4:= v2 + 1;
  #L41c962.  if v4 == v6 then goto L41c970;
  #L41c966.  v2:= v0[v2] @kind object;
  #L41c96a.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.dispose:()V` @kind virtual;
  #L41c970.  v2:= v4;
  #L41c972.  goto L41c95a;
  #L41c974.  return v1;
  #L41c976.  return v2;
  #L41c978.  if v0 != v6 then goto L41c97e;
  #L41c97c.  goto L41c980;
  #L41c97e.  v1:= 0I;
  #L41c980.  return v1;
}
