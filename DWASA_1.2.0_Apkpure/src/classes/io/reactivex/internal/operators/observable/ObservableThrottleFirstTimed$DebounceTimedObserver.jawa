record `io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.gate` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43101c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L431022.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L431026.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.timeout` @type ^`long` := v2 @kind wide;
  #L43102a.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L43102e.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L431032.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431044.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L431048.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43104e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L431052.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L431058.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430ffc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L431000.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/Scheduler$Worker;.isDisposed:()Z` @kind virtual;
  #L431006.  v0:= temp;
  #L431008.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43106c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.done` @type ^`boolean` @kind boolean;
  #L431070.  if v0 != 0 then goto L43108e;
  #L431074.  v0:= 1I;
  #L431076.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43107a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43107e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L431084.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L431088.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L43108e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4310a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.done` @type ^`boolean` @kind boolean;
  #L4310a4.  if v0 == 0 then goto L4310b0;
  #L4310a8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4310ae.  goto L4310ca;
  #L4310b0.  v0:= 1I;
  #L4310b2.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4310b6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4310ba.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4310c0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4310c4.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4310ca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4310dc.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.gate` @type ^`boolean` @kind boolean;
  #L4310e0.  if v0 != 0 then goto L43112c;
  #L4310e4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.done` @type ^`boolean` @kind boolean;
  #L4310e8.  if v0 != 0 then goto L43112c;
  #L4310ec.  v0:= 1I;
  #L4310ee.  v3.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.gate` @type ^`boolean` := v0 @kind boolean;
  #L4310f2.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4310f6.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4310fc.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L431102.  v4:= temp @kind object;
  #L431104.  v4:= (`io.reactivex.disposables.Disposable`) v4 @kind object;
  #L431108.  if v4 == 0 then goto L431112;
  #L43110c.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L431112.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L431116.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.timeout` @type ^`long` @kind wide;
  #L43111a.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L43111e.  call temp:= `schedule`(v4, v3, v0, v2) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L431124.  v4:= temp @kind object;
  #L431126.  call temp:= `replace`(v3, v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43112c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431140.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L431144.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43114a.  v0:= temp;
  #L43114c.  if v0 == 0 then goto L43115e;
  #L431150.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L431154.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431158.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43115e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleFirstTimed$DebounceTimedObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431170.  v0:= 0I;
  #L431172.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver.gate` @type ^`boolean` := v0 @kind boolean;
  #L431176.  return @kind void;
}
