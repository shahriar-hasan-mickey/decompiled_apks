record `io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$PublisherSubscriber;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L426128.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42612e.  v0.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L426132.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$PublisherSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426144.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L426148.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42614e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L426152.  v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L426156.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$PublisherSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L426104.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L426108.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L42610c.  if v0 != v1 then goto L426114;
  #L426110.  v0:= 1I;
  #L426112.  goto L426116;
  #L426114.  v0:= 0I;
  #L426116.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$PublisherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426168.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42616c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L426172.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$PublisherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426184.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L426188.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42618e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$PublisherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4261a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4261a4.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4261aa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$PublisherSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4261bc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4261c0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4261c6.  v0:= temp;
  #L4261c8.  if v0 == 0 then goto L4261ea;
  #L4261cc.  v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4261d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4261d4.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4261da.  v0:= 9223372036854775807L;
  #L4261e4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4261ea.  return @kind void;
}
