record `io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.iterator` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.upstream` @AccessFlag ;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/Iterator;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L435c80.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L435c86.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L435c8a.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.iterator` @type ^`java.util.Iterator` := v2 @kind object;
  #L435c8e.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.zipper` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L435c92.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435ca4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435ca8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L435cae.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.error:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L435cc0.  v0:= 1I;
  #L435cc2.  v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L435cc6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435cca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L435cd0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435cd4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435cda.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435c60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435c64.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L435c6a.  v0:= temp;
  #L435c6c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435cec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.done` @type ^`boolean` @kind boolean;
  #L435cf0.  if v0 == 0 then goto L435cf6;
  #L435cf4.  return @kind void;
  #L435cf6.  v0:= 1I;
  #L435cf8.  v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L435cfc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435d00.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L435d06.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435d18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.done` @type ^`boolean` @kind boolean;
  #L435d1c.  if v0 == 0 then goto L435d28;
  #L435d20.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L435d26.  return @kind void;
  #L435d28.  v0:= 1I;
  #L435d2a.  v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L435d2e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435d32.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435d38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L435d4c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.done` @type ^`boolean` @kind boolean;
  #L435d50.  if v0 == 0 then goto L435d56;
  #L435d54.  return @kind void;
  #L435d56.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.iterator` @type ^`java.util.Iterator` @kind object;
  #L435d5a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L435d60.  v0:= temp @kind object;
  #L435d62.  v1:= "The iterator returned a null value" @kind object;
  #L435d66.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L435d6c.  v0:= temp @kind object;
  #L435d6e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.zipper` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L435d72.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L435d78.  v3:= temp @kind object;
  #L435d7a.  v0:= "The zipper function returned a null value" @kind object;
  #L435d7e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L435d84.  v3:= temp @kind object;
  #L435d86.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435d8a.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L435d90.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.iterator` @type ^`java.util.Iterator` @kind object;
  #L435d94.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L435d9a.  v3:= temp;
  #L435d9c.  if v3 != 0 then goto L435dba;
  #L435da0.  v3:= 1I;
  #L435da2.  v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.done` @type ^`boolean` := v3 @kind boolean;
  #L435da6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435daa.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L435db0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435db4.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L435dba.  return @kind void;
  #L435dbc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435dbe.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435dc4.  call `error`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L435dca.  return @kind void;
  #L435dcc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435dce.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435dd4.  call `error`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L435dda.  return @kind void;
  #L435ddc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435dde.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435de4.  call `error`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L435dea.  return @kind void;
  catch `java.lang.Throwable` @[L435d56..L435d6e] goto L435ddc;
  catch `java.lang.Throwable` @[L435d6e..L435d86] goto L435dcc;
  catch `java.lang.Throwable` @[L435d90..L435d9c] goto L435dbc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435e1c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435e20.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L435e26.  v0:= temp;
  #L435e28.  if v0 == 0 then goto L435e3a;
  #L435e2c.  v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L435e30.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435e34.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L435e3a.  return @kind void;
}
