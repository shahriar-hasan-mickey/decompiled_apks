record `io.reactivex.internal.operators.observable.ObservableFromFuture` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `java.util.concurrent.Future` `io.reactivex.internal.operators.observable.ObservableFromFuture.future` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableFromFuture.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableFromFuture.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromFuture` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L425df0.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L425df6.  v0.`io.reactivex.internal.operators.observable.ObservableFromFuture.future` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L425dfa.  v0.`io.reactivex.internal.operators.observable.ObservableFromFuture.timeout` @type ^`long` := v2 @kind wide;
  #L425dfe.  v0.`io.reactivex.internal.operators.observable.ObservableFromFuture.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L425e02.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableFromFuture` v5 @kind this, `io.reactivex.Observer` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromFuture;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L425e14.  v0:= new `io.reactivex.internal.observers.DeferredScalarDisposable`;
  #L425e18.  call `<init>`(v0, v6) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L425e1e.  call `onSubscribe`(v6, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L425e24.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L425e2a.  v1:= temp;
  #L425e2c.  if v1 != 0 then goto L425e88;
  #L425e30.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableFromFuture.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L425e34.  if v1 == 0 then goto L425e4e;
  #L425e38.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableFromFuture.future` @type ^`java.util.concurrent.Future` @kind object;
  #L425e3c.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableFromFuture.timeout` @type ^`long` @kind wide;
  #L425e40.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableFromFuture.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L425e44.  call temp:= `get`(v1, v2, v4) @signature `Ljava/util/concurrent/Future;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L425e4a.  v1:= temp @kind object;
  #L425e4c.  goto L425e5a;
  #L425e4e.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableFromFuture.future` @type ^`java.util.concurrent.Future` @kind object;
  #L425e52.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L425e58.  v1:= temp @kind object;
  #L425e5a.  v2:= "Future returned null" @kind object;
  #L425e5e.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L425e64.  v6:= temp @kind object;
  #L425e66.  call `complete`(v0, v6) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L425e6c.  goto L425e88;
  #L425e6e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L425e70.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L425e76.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L425e7c.  v0:= temp;
  #L425e7e.  if v0 != 0 then goto L425e88;
  #L425e82.  call `onError`(v6, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425e88.  return @kind void;
  catch `java.lang.Throwable` @[L425e30..L425e66] goto L425e6e;
}
