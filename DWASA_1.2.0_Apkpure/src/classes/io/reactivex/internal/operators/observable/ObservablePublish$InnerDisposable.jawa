record `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42a584.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42a58a.  v0.`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42a58e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a5a0.  call temp:= `getAndSet`(v1, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42a5a6.  v0:= temp @kind object;
  #L42a5a8.  if v0 == 0 then goto L42a5ba;
  #L42a5ac.  if v0 == v1 then goto L42a5ba;
  #L42a5b0.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver`) v0 @kind object;
  #L42a5b4.  call `remove`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.remove:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)V` @kind virtual;
  #L42a5ba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a560.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a566.  v0:= temp @kind object;
  #L42a568.  if v0 != v1 then goto L42a570;
  #L42a56c.  v0:= 1I;
  #L42a56e.  goto L42a572;
  #L42a570.  v0:= 0I;
  #L42a572.  return v0;
}
procedure `void` `setParent`(`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v1 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.setParent:(Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;)V` @AccessFlag  {
    temp;
    v0;

  #L42a5cc.  v0:= 0I;
  #L42a5ce.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a5d4.  v0:= temp;
  #L42a5d6.  if v0 != 0 then goto L42a5e0;
  #L42a5da.  call `remove`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.remove:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)V` @kind virtual;
  #L42a5e0.  return @kind void;
}
