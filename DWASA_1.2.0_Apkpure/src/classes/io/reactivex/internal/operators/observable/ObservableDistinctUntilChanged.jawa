record `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged.comparer` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged.keySelector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L422d50.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L422d56.  v0.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L422d5a.  v0.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged.comparer` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L422d5e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L422d70.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L422d74.  v1:= new `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver`;
  #L422d78.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L422d7c.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L422d80.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$DistinctUntilChangedObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L422d86.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L422d8c.  return @kind void;
}
