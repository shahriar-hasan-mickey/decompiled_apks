record `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.combiner` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4350b8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4350be.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4350c2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4350c8.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4350cc.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4350d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4350d6.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4350da.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L4350de.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.combiner` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L4350e2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4350f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4350f8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4350fe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435102.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L435108.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43506c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435070.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435076.  v0:= temp @kind object;
  #L435078.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43507c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L435082.  v0:= temp;
  #L435084.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43511c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435120.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L435126.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43512a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L435130.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435144.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435148.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43514e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435152.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435158.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43516c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L435172.  v0:= temp @kind object;
  #L435174.  if v0 == 0 then goto L4351b4;
  #L435178.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.combiner` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43517c.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L435182.  v3:= temp @kind object;
  #L435184.  v0:= "The combiner returned a null value" @kind object;
  #L435188.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43518e.  v3:= temp @kind object;
  #L435190.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L435194.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43519a.  goto L4351b4;
  #L43519c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43519e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4351a4.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.dispose:()V` @kind virtual;
  #L4351aa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4351ae.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4351b4.  return @kind void;
  catch `java.lang.Throwable` @[L435178..L435190] goto L43519c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4351d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4351d8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4351de.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4351f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4351f4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4351fa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4351fe.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435204.  return @kind void;
}
procedure `boolean` `setOther`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.setOther:(Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435098.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43509c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4350a2.  v2:= temp;
  #L4350a4.  return v2;
}
