record `io.reactivex.internal.operators.observable.ObservableZip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableZip.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip.delayError` @AccessFlag FINAL;
  `io.reactivex.ObservableSource`[] `io.reactivex.internal.operators.observable.ObservableZip.sources` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.observable.ObservableZip.sourcesIterable` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableZip.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip` v0 @kind this, `io.reactivex.ObservableSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip;.<init>:([Lio/reactivex/ObservableSource;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L435f04.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L435f0a.  v0.`io.reactivex.internal.operators.observable.ObservableZip.sources` @type ^`io.reactivex.ObservableSource`[] := v1 @kind object;
  #L435f0e.  v0.`io.reactivex.internal.operators.observable.ObservableZip.sourcesIterable` @type ^`java.lang.Iterable` := v2 @kind object;
  #L435f12.  v0.`io.reactivex.internal.operators.observable.ObservableZip.zipper` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L435f16.  v0.`io.reactivex.internal.operators.observable.ObservableZip.bufferSize` @type ^`int` := v4;
  #L435f1a.  v0.`io.reactivex.internal.operators.observable.ObservableZip.delayError` @type ^`boolean` := v5 @kind boolean;
  #L435f1e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableZip` v6 @kind this, `io.reactivex.Observer` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L435f30.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableZip.sources` @type ^`io.reactivex.ObservableSource`[] @kind object;
  #L435f34.  if v0 != 0 then goto L435f8c;
  #L435f38.  v0:= 8I;
  #L435f3c.  v0:= new `io.reactivex.Observable`[v0];
  #L435f40.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip.sourcesIterable` @type ^`java.lang.Iterable` @kind object;
  #L435f44.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L435f4a.  v1:= temp @kind object;
  #L435f4c.  v2:= 0I;
  #L435f4e.  v3:= 0I;
  #L435f50.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L435f56.  v4:= temp;
  #L435f58.  if v4 == 0 then goto L435f8e;
  #L435f5c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L435f62.  v4:= temp @kind object;
  #L435f64.  v4:= (`io.reactivex.ObservableSource`) v4 @kind object;
  #L435f68.  v5:= length @variable v0;
  #L435f6a.  if v3 != v5 then goto L435f80;
  #L435f6e.  v5:= v3 ^> 2;
  #L435f72.  v5:= v5 + v3 @kind int;
  #L435f74.  v5:= new `io.reactivex.ObservableSource`[v5];
  #L435f78.  call `arraycopy`(v0, v2, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L435f7e.  v0:= v5 @kind object;
  #L435f80.  v5:= v3 + 1;
  #L435f84.  v0[v3]:= v4 @kind object;
  #L435f88.  v3:= v5;
  #L435f8a.  goto L435f50;
  #L435f8c.  v3:= length @variable v0;
  #L435f8e.  if v3 != 0 then goto L435f9a;
  #L435f92.  call `complete`(v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L435f98.  return @kind void;
  #L435f9a.  v1:= new `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator`;
  #L435f9e.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableZip.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L435fa2.  v4:= v6.`io.reactivex.internal.operators.observable.ObservableZip.delayError` @type ^`boolean` @kind boolean;
  #L435fa6.  call `<init>`(v1, v7, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L435fac.  v7:= v6.`io.reactivex.internal.operators.observable.ObservableZip.bufferSize` @type ^`int`;
  #L435fb0.  call `subscribe`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.subscribe:([Lio/reactivex/ObservableSource;I)V` @kind virtual;
  #L435fb6.  return @kind void;
}
