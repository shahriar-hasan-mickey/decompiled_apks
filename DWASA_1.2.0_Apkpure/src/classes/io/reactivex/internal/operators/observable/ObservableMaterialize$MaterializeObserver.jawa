record `io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize$MaterializeObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L429100.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L429106.  v0.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42910a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize$MaterializeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42911c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L429120.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L429126.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize$MaterializeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4290e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4290e4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4290ea.  v0:= temp;
  #L4290ec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize$MaterializeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429138.  call temp:= `createOnComplete`() @signature `Lio/reactivex/Notification;.createOnComplete:()Lio/reactivex/Notification;` @kind static;
  #L42913e.  v0:= temp @kind object;
  #L429140.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429144.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42914a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42914e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L429154.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize$MaterializeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429168.  call temp:= `createOnError`(v2) @signature `Lio/reactivex/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/Notification;` @kind static;
  #L42916e.  v2:= temp @kind object;
  #L429170.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429174.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42917a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42917e.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L429184.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize$MaterializeObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429198.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42919c.  call temp:= `createOnNext`(v2) @signature `Lio/reactivex/Notification;.createOnNext:(Ljava/lang/Object;)Lio/reactivex/Notification;` @kind static;
  #L4291a2.  v2:= temp @kind object;
  #L4291a4.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4291aa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize$MaterializeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4291bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4291c0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4291c6.  v0:= temp;
  #L4291c8.  if v0 == 0 then goto L4291da;
  #L4291cc.  v1.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4291d0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4291d4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4291da.  return @kind void;
}
