record `io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class, `java.util.Iterator` @kind interface {
  `io.reactivex.Notification` `io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @AccessFlag ;
  `java.util.concurrent.Semaphore` `io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.notify` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.value` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41bf10.  call `<init>`(v2) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L41bf16.  v0:= new `java.util.concurrent.Semaphore`;
  #L41bf1a.  v1:= 0I;
  #L41bf1c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L41bf22.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.notify` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L41bf26.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41bf2a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41bf30.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L41bf34.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41be0c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L41be10.  if v0 == 0 then goto L41be38;
  #L41be14.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L41be1a.  v0:= temp;
  #L41be1c.  if v0 != 0 then goto L41be22;
  #L41be20.  goto L41be38;
  #L41be22.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L41be26.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L41be2c.  v0:= temp @kind object;
  #L41be2e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41be34.  v0:= temp @kind object;
  #L41be36.  throw v0;
  #L41be38.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L41be3c.  if v0 != 0 then goto L41bea4;
  #L41be40.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L41be46.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.notify` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L41be4a.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L41be50.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41be54.  v1:= 0I;
  #L41be56.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41be5c.  v0:= temp @kind object;
  #L41be5e.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L41be62.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @type ^`io.reactivex.Notification` := v0 @kind object;
  #L41be66.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L41be6c.  v1:= temp;
  #L41be6e.  if v1 != 0 then goto L41be74;
  #L41be72.  goto L41bea4;
  #L41be74.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L41be7a.  v0:= temp @kind object;
  #L41be7c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41be82.  v0:= temp @kind object;
  #L41be84.  throw v0;
  #L41be86.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L41be88.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.dispose:()V` @kind virtual;
  #L41be8e.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/Notification;` @kind static;
  #L41be94.  v1:= temp @kind object;
  #L41be96.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L41be9a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41bea0.  v0:= temp @kind object;
  #L41bea2.  throw v0;
  #L41bea4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L41bea8.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L41beae.  v0:= temp;
  #L41beb0.  return v0;
  catch `java.lang.InterruptedException` @[L41be40..L41be50] goto L41be86;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41bed4.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.hasNext:()Z` @kind virtual;
  #L41beda.  v0:= temp;
  #L41bedc.  if v0 == 0 then goto L41bef4;
  #L41bee0.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L41bee4.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L41beea.  v0:= temp @kind object;
  #L41beec.  v1:= 0I;
  #L41beee.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.iteratorNotification` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L41bef2.  return v0 @kind object;
  #L41bef4.  v0:= new `java.util.NoSuchElementException`;
  #L41bef8.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L41befe.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L41bf48.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L41bf5c.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41bf62.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.onNext:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bf74.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41bf78.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41bf7e.  v2:= temp @kind object;
  #L41bf80.  if v2 != 0 then goto L41bf88;
  #L41bf84.  v2:= 1I;
  #L41bf86.  goto L41bf8a;
  #L41bf88.  v2:= 0I;
  #L41bf8a.  if v2 == 0 then goto L41bf98;
  #L41bf8e.  v2:= v1.`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator.notify` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L41bf92.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L41bf98.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L41bfac.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L41bfb0.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.onNext:(Lio/reactivex/Notification;)V` @kind virtual;
  #L41bfb6.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$BlockingObservableLatestIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$BlockingObservableLatestIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41bfc8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L41bfcc.  v1:= "Read-only iterator." @kind object;
  #L41bfd0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41bfd6.  throw v0;
}
