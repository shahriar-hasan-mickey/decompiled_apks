record `io.reactivex.internal.operators.observable.ObservableFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class, `java.util.concurrent.Callable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableFromCallable.callable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L425d54.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L425d5a.  v0.`io.reactivex.internal.operators.observable.ObservableFromCallable.callable` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L425d5e.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.observable.ObservableFromCallable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromCallable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L425d28.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromCallable.callable` @type ^`java.util.concurrent.Callable` @kind object;
  #L425d2c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L425d32.  v0:= temp @kind object;
  #L425d34.  v1:= "The callable returned a null value" @kind object;
  #L425d38.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L425d3e.  v0:= temp @kind object;
  #L425d40.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableFromCallable` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromCallable;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L425d70.  v0:= new `io.reactivex.internal.observers.DeferredScalarDisposable`;
  #L425d74.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L425d7a.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L425d80.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L425d86.  v1:= temp;
  #L425d88.  if v1 == 0 then goto L425d8e;
  #L425d8c.  return @kind void;
  #L425d8e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFromCallable.callable` @type ^`java.util.concurrent.Callable` @kind object;
  #L425d92.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L425d98.  v1:= temp @kind object;
  #L425d9a.  v2:= "Callable returned null" @kind object;
  #L425d9e.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L425da4.  v4:= temp @kind object;
  #L425da6.  call `complete`(v0, v4) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L425dac.  return @kind void;
  #L425dae.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L425db0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L425db6.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L425dbc.  v0:= temp;
  #L425dbe.  if v0 != 0 then goto L425dca;
  #L425dc2.  call `onError`(v4, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425dc8.  goto L425dd0;
  #L425dca.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L425dd0.  return @kind void;
  catch `java.lang.Throwable` @[L425d8e..L425da6] goto L425dae;
}
