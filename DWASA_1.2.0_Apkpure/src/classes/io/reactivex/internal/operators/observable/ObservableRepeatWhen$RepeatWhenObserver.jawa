record `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.active` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @AccessFlag FINAL;
  `io.reactivex.subjects.Subject` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.signaller` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.source` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.Subject` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/Subject;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42bc70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42bc76.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42bc7a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.signaller` @type ^`io.reactivex.subjects.Subject` := v2 @kind object;
  #L42bc7e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.source` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L42bc82.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42bc86.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42bc8c.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L42bc90.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42bc94.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L42bc9a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L42bc9e.  v1:= new `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver`;
  #L42bca2.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;)V` @kind direct;
  #L42bca8.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` := v1 @kind object;
  #L42bcac.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42bcb0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42bcb6.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42bcba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bccc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bcd0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42bcd6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L42bcda.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42bce0.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42bcf4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bcf8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42bcfe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42bd02.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42bd06.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L42bd0c.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42bd20.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bd24.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42bd2a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42bd2e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42bd32.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L42bd38.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerNext:()V` @AccessFlag  {
    temp;

  #L42bd4c.  call `subscribeNext`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.subscribeNext:()V` @kind virtual;
  #L42bd52.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bc44.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bc48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42bc4e.  v0:= temp @kind object;
  #L42bc50.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42bc54.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42bc5a.  v0:= temp;
  #L42bc5c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42bd64.  v0:= 0I;
  #L42bd66.  v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L42bd6a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.signaller` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L42bd6e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42bd74.  v0:= temp @kind object;
  #L42bd76.  call `onNext`(v1, v0) @signature `Lio/reactivex/subjects/Subject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L42bd7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42bd90.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L42bd94.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42bd9a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42bd9e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42bda2.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L42bda8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42bdbc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42bdc0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42bdc4.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L42bdca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bddc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bde0.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42bde6.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;

  #L42bdf8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42bdfc.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42be02.  v0:= temp;
  #L42be04.  if v0 != 0 then goto L42be3e;
  #L42be08.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.isDisposed:()Z` @kind virtual;
  #L42be0e.  v0:= temp;
  #L42be10.  if v0 == 0 then goto L42be16;
  #L42be14.  return @kind void;
  #L42be16.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.active` @type ^`boolean` @kind boolean;
  #L42be1a.  if v0 != 0 then goto L42be2e;
  #L42be1e.  v0:= 1I;
  #L42be20.  v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L42be24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42be28.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42be2e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42be32.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42be38.  v0:= temp;
  #L42be3a.  if v0 != 0 then goto L42be08;
  #L42be3e.  return @kind void;
}
