record `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe;.<init>:(Lio/reactivex/Observable;Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L429860.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L429866.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe.other` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L42986a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L42987c.  v0:= new `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver`;
  #L429880.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L429886.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42988c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L429890.  call `subscribe`(v2, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L429896.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe.other` @type ^`io.reactivex.MaybeSource` @kind object;
  #L42989a.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver` @kind object;
  #L42989e.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4298a4.  return @kind void;
}
