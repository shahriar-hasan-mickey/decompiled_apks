record `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L430aac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L430ab2.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L430ab6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L430aba.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L430ac0.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L430ac4.  v1:= new `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver`;
  #L430ac8.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;)V` @kind direct;
  #L430ace.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` := v1 @kind object;
  #L430ad2.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L430ad6.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L430adc.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L430ae0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430af4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L430af8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430afe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` @kind object;
  #L430b02.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430b08.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430a80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L430a84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L430a8a.  v0:= temp @kind object;
  #L430a8c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L430a90.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L430a96.  v0:= temp;
  #L430a98.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430b1c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` @kind object;
  #L430b20.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430b26.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430b2a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L430b2e.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L430b34.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430b48.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` @kind object;
  #L430b4c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430b52.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430b56.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L430b5a.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L430b60.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430b74.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430b78.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L430b7c.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L430b82.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430b94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L430b98.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L430b9e.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L430bb0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L430bb4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430bba.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430bbe.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L430bc2.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L430bc8.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L430bdc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L430be0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430be6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430bea.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L430bee.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L430bf4.  return @kind void;
}
