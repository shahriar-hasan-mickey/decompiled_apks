record `io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.lastTime` @AccessFlag ;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$TimeIntervalObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4314e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4314e6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4314ea.  v0.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.scheduler` @type ^`io.reactivex.Scheduler` := v3 @kind object;
  #L4314ee.  v0.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L4314f2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$TimeIntervalObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431504.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L431508.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43150e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$TimeIntervalObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4314c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4314c4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4314ca.  v0:= temp;
  #L4314cc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$TimeIntervalObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431520.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431524.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43152a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$TimeIntervalObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43153c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431540.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431546.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$TimeIntervalObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L431558.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L43155c.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L431560.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L431566.  v0:= temp @kind wide;
  #L431568.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.lastTime` @type ^`long` @kind wide;
  #L43156c.  v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.lastTime` @type ^`long` := v0 @kind wide;
  #L431570.  v0:= v0 - v2 @kind long;
  #L431572.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L431576.  v3:= new `io.reactivex.schedulers.Timed`;
  #L43157a.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L43157e.  call `<init>`(v3, v6, v0, v4) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L431584.  call `onNext`(v2, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43158a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$TimeIntervalObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43159c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4315a0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4315a6.  v0:= temp;
  #L4315a8.  if v0 == 0 then goto L4315ce;
  #L4315ac.  v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L4315b0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L4315b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4315b8.  call temp:= `now`(v3, v0) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4315be.  v0:= temp @kind wide;
  #L4315c0.  v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.lastTime` @type ^`long` := v0 @kind wide;
  #L4315c4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4315c8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4315ce.  return @kind void;
}
