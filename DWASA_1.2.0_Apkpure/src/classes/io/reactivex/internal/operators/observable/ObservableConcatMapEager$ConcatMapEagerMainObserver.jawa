record `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.observers.InnerQueuedObserverSupport` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.internal.observers.InnerQueuedObserver` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.maxConcurrency` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.observers` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.sourceMode` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L420950.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L420956.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42095a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42095e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.maxConcurrency` @type ^`int` := v3;
  #L420962.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.prefetch` @type ^`int` := v4;
  #L420966.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v5 @kind object;
  #L42096a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42096e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L420974.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L420978.  v1:= new `java.util.ArrayDeque`;
  #L42097c.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L420982.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.observers` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L420986.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420998.  v0:= 1I;
  #L42099a.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42099e.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.getAndIncrement:()I` @kind virtual;
  #L4209a4.  v0:= temp;
  #L4209a6.  if v0 != 0 then goto L4209ba;
  #L4209aa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4209ae.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4209b4.  call `disposeAll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L4209ba.  return @kind void;
}
procedure `void` `disposeAll`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @AccessFlag  {
    temp;
    v0;

  #L4209cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` @kind object;
  #L4209d0.  if v0 == 0 then goto L4209da;
  #L4209d4.  call `dispose`(v0) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L4209da.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.observers` @type ^`java.util.ArrayDeque` @kind object;
  #L4209de.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4209e4.  v0:= temp @kind object;
  #L4209e6.  v0:= (`io.reactivex.internal.observers.InnerQueuedObserver`) v0 @kind object;
  #L4209ea.  if v0 != 0 then goto L4209f0;
  #L4209ee.  return @kind void;
  #L4209f0.  call `dispose`(v0) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L4209f6.  goto L4209da;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v13 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L420a08.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.getAndIncrement:()I` @kind virtual;
  #L420a0e.  v0:= temp;
  #L420a10.  if v0 == 0 then goto L420a16;
  #L420a14.  return @kind void;
  #L420a16.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L420a1a.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.observers` @type ^`java.util.ArrayDeque` @kind object;
  #L420a1e.  v2:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420a22.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420a26.  v4:= 1I;
  #L420a28.  v5:= 1I;
  #L420a2a.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int`;
  #L420a2e.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.maxConcurrency` @type ^`int`;
  #L420a32.  if v6 == v7 then goto L420b0e;
  #L420a36.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L420a3a.  if v7 == 0 then goto L420a4c;
  #L420a3e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420a44.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420a4a.  return @kind void;
  #L420a4c.  v7:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420a50.  if v3 != v7 then goto L420a88;
  #L420a54.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420a58.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L420a5e.  v7:= temp @kind object;
  #L420a60.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L420a64.  if v7 == 0 then goto L420a88;
  #L420a68.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420a6e.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420a74.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420a78.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420a7e.  v0:= temp @kind object;
  #L420a80.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420a86.  return @kind void;
  #L420a88.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L420a8e.  v7:= temp @kind object;
  #L420a90.  if v7 != 0 then goto L420a96;
  #L420a94.  goto L420b0e;
  #L420a96.  v8:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L420a9a.  call temp:= `apply`(v8, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L420aa0.  v7:= temp @kind object;
  #L420aa2.  v8:= "The mapper returned a null ObservableSource" @kind object;
  #L420aa6.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L420aac.  v7:= temp @kind object;
  #L420aae.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L420ab2.  v8:= new `io.reactivex.internal.observers.InnerQueuedObserver`;
  #L420ab6.  v9:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.prefetch` @type ^`int`;
  #L420aba.  call `<init>`(v8, v13, v9) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.<init>:(Lio/reactivex/internal/observers/InnerQueuedObserverSupport;I)V` @kind direct;
  #L420ac0.  call temp:= `offer`(v1, v8) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L420ac6.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L420acc.  v6:= v6 + 1;
  #L420ad0.  goto L420a2e;
  #L420ad2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420ad4.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L420ada.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L420ade.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L420ae4.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420aea.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420af0.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420af4.  call temp:= `addThrowable`(v0, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L420afa.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420afe.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420b04.  v0:= temp @kind object;
  #L420b06.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420b0c.  return @kind void;
  #L420b0e.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int` := v6;
  #L420b12.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L420b16.  if v6 == 0 then goto L420b28;
  #L420b1a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420b20.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420b26.  return @kind void;
  #L420b28.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420b2c.  if v3 != v6 then goto L420b64;
  #L420b30.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420b34.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L420b3a.  v6:= temp @kind object;
  #L420b3c.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L420b40.  if v6 == 0 then goto L420b64;
  #L420b44.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420b4a.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420b50.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420b54.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420b5a.  v0:= temp @kind object;
  #L420b5c.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420b62.  return @kind void;
  #L420b64.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` @kind object;
  #L420b68.  v7:= 0I;
  #L420b6a.  if v6 != 0 then goto L420c12;
  #L420b6e.  v6:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420b72.  if v3 != v6 then goto L420baa;
  #L420b76.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420b7a.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L420b80.  v6:= temp @kind object;
  #L420b82.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L420b86.  if v6 == 0 then goto L420baa;
  #L420b8a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420b90.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420b96.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420b9a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420ba0.  v0:= temp @kind object;
  #L420ba2.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420ba8.  return @kind void;
  #L420baa.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @type ^`boolean` @kind boolean;
  #L420bae.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L420bb4.  v8:= temp @kind object;
  #L420bb6.  v8:= (`io.reactivex.internal.observers.InnerQueuedObserver`) v8 @kind object;
  #L420bba.  if v8 != 0 then goto L420bc2;
  #L420bbe.  v9:= 1I;
  #L420bc0.  goto L420bc4;
  #L420bc2.  v9:= 0I;
  #L420bc4.  if v6 == 0 then goto L420c08;
  #L420bc8.  if v9 == 0 then goto L420c08;
  #L420bcc.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420bd0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L420bd6.  v1:= temp @kind object;
  #L420bd8.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L420bdc.  if v1 == 0 then goto L420c00;
  #L420be0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420be6.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420bec.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420bf0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420bf6.  v0:= temp @kind object;
  #L420bf8.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420bfe.  goto L420c06;
  #L420c00.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L420c06.  return @kind void;
  #L420c08.  if v9 != 0 then goto L420c10;
  #L420c0c.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v8 @kind object;
  #L420c10.  v6:= v8 @kind object;
  #L420c12.  if v6 == 0 then goto L420cd8;
  #L420c16.  call temp:= `queue`(v6) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L420c1c.  v8:= temp @kind object;
  #L420c1e.  v9:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L420c22.  if v9 == 0 then goto L420c34;
  #L420c26.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420c2c.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420c32.  return @kind void;
  #L420c34.  call temp:= `isDone`(v6) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.isDone:()Z` @kind virtual;
  #L420c3a.  v9:= temp;
  #L420c3c.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420c40.  if v3 != v10 then goto L420c78;
  #L420c44.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420c48.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L420c4e.  v10:= temp @kind object;
  #L420c50.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L420c54.  if v10 == 0 then goto L420c78;
  #L420c58.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420c5e.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L420c64.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420c68.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L420c6e.  v0:= temp @kind object;
  #L420c70.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420c76.  return @kind void;
  #L420c78.  v10:= 0I;
  #L420c7a.  call temp:= `poll`(v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L420c80.  v11:= temp @kind object;
  #L420c82.  if v11 != 0 then goto L420c8a;
  #L420c86.  v12:= 1I;
  #L420c88.  goto L420c8c;
  #L420c8a.  v12:= 0I;
  #L420c8c.  if v9 == 0 then goto L420ca6;
  #L420c90.  if v12 == 0 then goto L420ca6;
  #L420c94.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L420c98.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int`;
  #L420c9c.  v6:= v6 - v4 @kind int;
  #L420c9e.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int` := v6;
  #L420ca2.  goto L420a2a;
  #L420ca6.  if v12 == 0 then goto L420cac;
  #L420caa.  goto L420cd8;
  #L420cac.  call `onNext`(v2, v11) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L420cb2.  goto L420c1e;
  #L420cb4.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420cb6.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L420cbc.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420cc0.  call temp:= `addThrowable`(v7, v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L420cc6.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L420cca.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int`;
  #L420cce.  v6:= v6 - v4 @kind int;
  #L420cd0.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int` := v6;
  #L420cd4.  goto L420a2a;
  #L420cd8.  v5:= -v5 @kind int;
  #L420cda.  call temp:= `addAndGet`(v13, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.addAndGet:(I)I` @kind virtual;
  #L420ce0.  v5:= temp;
  #L420ce2.  if v5 != 0 then goto L420a2a;
  #L420ce6.  return @kind void;
  catch `java.lang.Throwable` @[L420a88..L420ab2] goto L420ad2;
  catch `java.lang.Throwable` @[L420c7a..L420c82] goto L420cb4;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v0 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.innerComplete:(Lio/reactivex/internal/observers/InnerQueuedObserver;)V` @AccessFlag PUBLIC {
    temp;

  #L420d10.  call `setDone`(v1) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L420d16.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L420d1c.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.innerError:(Lio/reactivex/internal/observers/InnerQueuedObserver;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420d30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420d34.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L420d3a.  v0:= temp;
  #L420d3c.  if v0 == 0 then goto L420d64;
  #L420d40.  v3:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420d44.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L420d48.  if v3 != v0 then goto L420d56;
  #L420d4c.  v3:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L420d50.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L420d56.  call `setDone`(v2) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L420d5c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L420d62.  goto L420d6a;
  #L420d64.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L420d6a.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v0 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.innerNext:(Lio/reactivex/internal/observers/InnerQueuedObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L420d7c.  call temp:= `queue`(v1) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L420d82.  v1:= temp @kind object;
  #L420d84.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L420d8a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L420d90.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420938.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42093c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420da4.  v0:= 1I;
  #L420da6.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L420daa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L420db0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420dc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L420dc8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L420dce.  v0:= temp;
  #L420dd0.  if v0 == 0 then goto L420de2;
  #L420dd4.  v2:= 1I;
  #L420dd6.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L420dda.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L420de0.  goto L420de8;
  #L420de2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L420de8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420dfc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.sourceMode` @type ^`int`;
  #L420e00.  if v0 != 0 then goto L420e0e;
  #L420e04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L420e08.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L420e0e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L420e14.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L420e28.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L420e2c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L420e32.  v0:= temp;
  #L420e34.  if v0 == 0 then goto L420eac;
  #L420e38.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L420e3c.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L420e40.  if v0 == 0 then goto L420e90;
  #L420e44.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L420e48.  v0:= 3I;
  #L420e4a.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.requestFusion:(I)I` @kind interface;
  #L420e50.  v0:= temp;
  #L420e52.  v1:= 1I;
  #L420e54.  if v0 != v1 then goto L420e76;
  #L420e58.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.sourceMode` @type ^`int` := v0;
  #L420e5c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L420e60.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L420e64.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420e68.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L420e6e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L420e74.  return @kind void;
  #L420e76.  v1:= 2I;
  #L420e78.  if v0 != v1 then goto L420e90;
  #L420e7c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.sourceMode` @type ^`int` := v0;
  #L420e80.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L420e84.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420e88.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L420e8e.  return @kind void;
  #L420e90.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L420e94.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.prefetch` @type ^`int`;
  #L420e98.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L420e9e.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L420ea2.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420ea6.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L420eac.  return @kind void;
}
