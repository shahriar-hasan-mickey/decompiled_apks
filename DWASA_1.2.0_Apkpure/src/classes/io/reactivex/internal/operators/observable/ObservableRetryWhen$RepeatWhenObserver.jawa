record `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.active` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.inner` @AccessFlag FINAL;
  `io.reactivex.subjects.Subject` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.signaller` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.source` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.Subject` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/Subject;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d404.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42d40a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42d40e.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.signaller` @type ^`io.reactivex.subjects.Subject` := v2 @kind object;
  #L42d412.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.source` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L42d416.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42d41a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42d420.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L42d424.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42d428.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L42d42e.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L42d432.  v1:= new `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver`;
  #L42d436.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;)V` @kind direct;
  #L42d43c.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` := v1 @kind object;
  #L42d440.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42d444.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42d44a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42d44e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d460.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42d464.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d46a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L42d46e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d474.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42d488.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42d48c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d492.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d496.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42d49a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L42d4a0.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42d4b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42d4b8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d4be.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d4c2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42d4c6.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L42d4cc.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerNext:()V` @AccessFlag  {
    temp;

  #L42d4e0.  call `subscribeNext`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.subscribeNext:()V` @kind virtual;
  #L42d4e6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d3d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42d3dc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42d3e2.  v0:= temp @kind object;
  #L42d3e4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42d3e8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d3ee.  v0:= temp;
  #L42d3f0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d4f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L42d4fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d502.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d506.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42d50a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L42d510.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d524.  v0:= 0I;
  #L42d526.  v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L42d52a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.signaller` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L42d52e.  call `onNext`(v0, v2) @signature `Lio/reactivex/subjects/Subject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L42d534.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d548.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42d54c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42d550.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L42d556.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d568.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42d56c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d572.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;

  #L42d584.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42d588.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42d58e.  v0:= temp;
  #L42d590.  if v0 != 0 then goto L42d5ca;
  #L42d594.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.isDisposed:()Z` @kind virtual;
  #L42d59a.  v0:= temp;
  #L42d59c.  if v0 == 0 then goto L42d5a2;
  #L42d5a0.  return @kind void;
  #L42d5a2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.active` @type ^`boolean` @kind boolean;
  #L42d5a6.  if v0 != 0 then goto L42d5ba;
  #L42d5aa.  v0:= 1I;
  #L42d5ac.  v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L42d5b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42d5b4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42d5ba.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42d5be.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42d5c4.  v0:= temp;
  #L42d5c6.  if v0 != 0 then goto L42d594;
  #L42d5ca.  return @kind void;
}
