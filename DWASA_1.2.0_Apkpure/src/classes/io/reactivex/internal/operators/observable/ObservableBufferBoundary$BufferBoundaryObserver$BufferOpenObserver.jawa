record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41d614.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41d61a.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` := v1 @kind object;
  #L41d61e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L41d630.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41d636.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41d5ec.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L41d5f2.  v0:= temp @kind object;
  #L41d5f4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41d5f8.  if v0 != v1 then goto L41d600;
  #L41d5fc.  v0:= 1I;
  #L41d5fe.  goto L41d602;
  #L41d600.  v0:= 0I;
  #L41d602.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d648.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41d64c.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41d652.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L41d656.  call `openComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.openComplete:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;)V` @kind virtual;
  #L41d65c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d670.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41d674.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41d67a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L41d67e.  call `boundaryError`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.boundaryError:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @kind virtual;
  #L41d684.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41d698.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L41d69c.  call `open`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.open:(Ljava/lang/Object;)V` @kind virtual;
  #L41d6a2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L41d6b4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41d6ba.  return @kind void;
}
