record `io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.count` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.defaultValue` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.index` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `long` v2 , `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtSingle$ElementAtObserver;.<init>:(Lio/reactivex/SingleObserver;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42376c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L423772.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L423776.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.index` @type ^`long` := v2 @kind wide;
  #L42377a.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.defaultValue` @type ^`java.lang.Object` := v4 @kind object;
  #L42377e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtSingle$ElementAtObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423790.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L423794.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42379a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtSingle$ElementAtObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42374c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L423750.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L423756.  v0:= temp;
  #L423758.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtSingle$ElementAtObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4237ac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.done` @type ^`boolean` @kind boolean;
  #L4237b0.  if v0 != 0 then goto L4237e2;
  #L4237b4.  v0:= 1I;
  #L4237b6.  v2.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4237ba.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.defaultValue` @type ^`java.lang.Object` @kind object;
  #L4237be.  if v0 == 0 then goto L4237ce;
  #L4237c2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4237c6.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4237cc.  goto L4237e2;
  #L4237ce.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4237d2.  v1:= new `java.util.NoSuchElementException`;
  #L4237d6.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4237dc.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4237e2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtSingle$ElementAtObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4237f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.done` @type ^`boolean` @kind boolean;
  #L4237f8.  if v0 == 0 then goto L423804;
  #L4237fc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L423802.  return @kind void;
  #L423804.  v0:= 1I;
  #L423806.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42380a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42380e.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L423814.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtSingle$ElementAtObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L423828.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.done` @type ^`boolean` @kind boolean;
  #L42382c.  if v0 == 0 then goto L423832;
  #L423830.  return @kind void;
  #L423832.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.count` @type ^`long` @kind wide;
  #L423836.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.index` @type ^`long` @kind wide;
  #L42383a.  v4:= lcmp(v0, v2);
  #L42383e.  if v4 != 0 then goto L42385e;
  #L423842.  v0:= 1I;
  #L423844.  v5.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L423848.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42384c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L423852.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L423856.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42385c.  return @kind void;
  #L42385e.  v2:= 1L;
  #L423862.  v0:= v0 + v2 @kind long;
  #L423864.  v5.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.count` @type ^`long` := v0 @kind wide;
  #L423868.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtSingle$ElementAtObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42387c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L423880.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L423886.  v0:= temp;
  #L423888.  if v0 == 0 then goto L42389a;
  #L42388c.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L423890.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L423894.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42389a.  return @kind void;
}
