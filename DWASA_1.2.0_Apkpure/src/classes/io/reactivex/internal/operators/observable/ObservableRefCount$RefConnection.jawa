record `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.functions.Consumer` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.connected` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableRefCount` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.parent` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42b490.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42b496.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` := v1 @kind object;
  #L42b49a.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.accept:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42b4ac.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b4b2.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42b4c4.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L42b4c8.  call `accept`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.accept:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L42b4ce.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b4e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L42b4e4.  call `timeout`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.timeout:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L42b4ea.  return @kind void;
}
