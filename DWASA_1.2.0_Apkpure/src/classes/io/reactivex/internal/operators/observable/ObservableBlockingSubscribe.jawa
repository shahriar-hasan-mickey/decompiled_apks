record `io.reactivex.internal.operators.observable.ObservableBlockingSubscribe` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBlockingSubscribe` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBlockingSubscribe;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41d0f0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41d0f6.  v0:= new `java.lang.IllegalStateException`;
  #L41d0fa.  v1:= "No instances!" @kind object;
  #L41d0fe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41d104.  throw v0;
}
procedure `void` `subscribe`(`io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41d118.  v0:= new `io.reactivex.internal.util.BlockingIgnoringReceiver`;
  #L41d11c.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/BlockingIgnoringReceiver;.<init>:()V` @kind direct;
  #L41d122.  v1:= new `io.reactivex.internal.observers.LambdaObserver`;
  #L41d126.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41d12c.  v2:= temp @kind object;
  #L41d12e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41d134.  v3:= temp @kind object;
  #L41d136.  call `<init>`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L41d13c.  call `subscribe`(v4, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41d142.  call `awaitForComplete`(v0, v1) @signature `Lio/reactivex/internal/util/BlockingHelper;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lio/reactivex/disposables/Disposable;)V` @kind static;
  #L41d148.  v4:= v0.`io.reactivex.internal.util.BlockingIgnoringReceiver.error` @type ^`java.lang.Throwable` @kind object;
  #L41d14c.  if v4 != 0 then goto L41d152;
  #L41d150.  return @kind void;
  #L41d152.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41d158.  v4:= temp @kind object;
  #L41d15a.  throw v4;
}
procedure `void` `subscribe`(`io.reactivex.ObservableSource` v4 @kind object, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/ObservableSource;Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41d16c.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L41d170.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L41d176.  v1:= new `io.reactivex.internal.observers.BlockingObserver`;
  #L41d17a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/observers/BlockingObserver;.<init>:(Ljava/util/Queue;)V` @kind direct;
  #L41d180.  call `onSubscribe`(v5, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41d186.  call `subscribe`(v4, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41d18c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/BlockingObserver;.isDisposed:()Z` @kind virtual;
  #L41d192.  v2:= temp;
  #L41d194.  if v2 == 0 then goto L41d19a;
  #L41d198.  goto L41d1e0;
  #L41d19a.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41d1a0.  v2:= temp @kind object;
  #L41d1a2.  if v2 != 0 then goto L41d1c0;
  #L41d1a6.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L41d1ac.  v2:= temp @kind object;
  #L41d1ae.  goto L41d1c0;
  #L41d1b0.  v4:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L41d1b2.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/BlockingObserver;.dispose:()V` @kind virtual;
  #L41d1b8.  call `onError`(v5, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41d1be.  return @kind void;
  #L41d1c0.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/BlockingObserver;.isDisposed:()Z` @kind virtual;
  #L41d1c6.  v3:= temp;
  #L41d1c8.  if v3 != 0 then goto L41d1e0;
  #L41d1cc.  v3:= `@@io.reactivex.internal.observers.BlockingObserver.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L41d1d0.  if v4 == v3 then goto L41d1e0;
  #L41d1d4.  call temp:= `acceptFull`(v2, v5) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L41d1da.  v2:= temp;
  #L41d1dc.  if v2 == 0 then goto L41d18c;
  #L41d1e0.  return @kind void;
  catch `java.lang.InterruptedException` @[L41d1a6..L41d1ae] goto L41d1b0;
}
procedure `void` `subscribe`(`io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41d204.  v0:= "onNext is null" @kind object;
  #L41d208.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d20e.  v0:= "onError is null" @kind object;
  #L41d212.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d218.  v0:= "onComplete is null" @kind object;
  #L41d21c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d222.  v0:= new `io.reactivex.internal.observers.LambdaObserver`;
  #L41d226.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41d22c.  v1:= temp @kind object;
  #L41d22e.  call `<init>`(v0, v3, v4, v5, v1) @signature `Lio/reactivex/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L41d234.  call `subscribe`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/ObservableSource;Lio/reactivex/Observer;)V` @kind static;
  #L41d23a.  return @kind void;
}
