record `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.parent` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.queue` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42eb74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42eb7a.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` := v1 @kind object;
  #L42eb7e.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.index` @type ^`int` := v2;
  #L42eb82.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L42eb86.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L42eb8c.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L42eb90.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42eba4.  v0:= 1I;
  #L42eba6.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42ebaa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind object;
  #L42ebae.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.drain:()V` @kind virtual;
  #L42ebb4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L42ebc8.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L42ebcc.  v1:= 1I;
  #L42ebce.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L42ebd2.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind object;
  #L42ebd6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.drain:()V` @kind virtual;
  #L42ebdc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ebf0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42ebf4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L42ebfa.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind object;
  #L42ebfe.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.drain:()V` @kind virtual;
  #L42ec04.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ec18.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind object;
  #L42ec1c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver.index` @type ^`int`;
  #L42ec20.  call temp:= `setDisposable`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.setDisposable:(Lio/reactivex/disposables/Disposable;I)Z` @kind virtual;
  #L42ec26.  return @kind void;
}
