record `io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.notSkipping` @AccessFlag ;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.predicate` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$SkipWhileObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f7fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42f802.  v0.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42f806.  v0.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L42f80a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$SkipWhileObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f81c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f820.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42f826.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$SkipWhileObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f7dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f7e0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42f7e6.  v0:= temp;
  #L42f7e8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$SkipWhileObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f838.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f83c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42f842.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$SkipWhileObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f854.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f858.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f85e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$SkipWhileObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f870.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.notSkipping` @type ^`boolean` @kind boolean;
  #L42f874.  if v0 == 0 then goto L42f884;
  #L42f878.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f87c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42f882.  goto L42f8a4;
  #L42f884.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L42f888.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L42f88e.  v0:= temp;
  #L42f890.  if v0 != 0 then goto L42f8a4;
  #L42f894.  v0:= 1I;
  #L42f896.  v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.notSkipping` @type ^`boolean` := v0 @kind boolean;
  #L42f89a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f89e.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42f8a4.  return @kind void;
  #L42f8a6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42f8a8.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42f8ae.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f8b2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42f8b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f8bc.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f8c2.  return @kind void;
  catch `java.lang.Throwable` @[L42f884..L42f890] goto L42f8a6;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$SkipWhileObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f8e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f8e4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f8ea.  v0:= temp;
  #L42f8ec.  if v0 == 0 then goto L42f8fe;
  #L42f8f0.  v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42f8f4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42f8f8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42f8fe.  return @kind void;
}
