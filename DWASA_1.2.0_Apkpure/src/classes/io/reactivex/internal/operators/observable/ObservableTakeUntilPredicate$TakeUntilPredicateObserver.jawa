record `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.predicate` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$TakeUntilPredicateObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L430c28.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L430c2e.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L430c32.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L430c36.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$TakeUntilPredicateObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430c48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430c4c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430c52.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$TakeUntilPredicateObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430c08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430c0c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L430c12.  v0:= temp;
  #L430c14.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$TakeUntilPredicateObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430c64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.done` @type ^`boolean` @kind boolean;
  #L430c68.  if v0 != 0 then goto L430c7c;
  #L430c6c.  v0:= 1I;
  #L430c6e.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L430c72.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430c76.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L430c7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$TakeUntilPredicateObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430c90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.done` @type ^`boolean` @kind boolean;
  #L430c94.  if v0 != 0 then goto L430caa;
  #L430c98.  v0:= 1I;
  #L430c9a.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L430c9e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430ca2.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430ca8.  goto L430cb0;
  #L430caa.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L430cb0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$TakeUntilPredicateObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430cc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.done` @type ^`boolean` @kind boolean;
  #L430cc8.  if v0 != 0 then goto L430d1a;
  #L430ccc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430cd0.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L430cd6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L430cda.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L430ce0.  v2:= temp;
  #L430ce2.  if v2 == 0 then goto L430d1a;
  #L430ce6.  v2:= 1I;
  #L430ce8.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L430cec.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430cf0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430cf6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430cfa.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L430d00.  goto L430d1a;
  #L430d02.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L430d04.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L430d0a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430d0e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430d14.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$TakeUntilPredicateObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L430d1a.  return @kind void;
  catch `java.lang.Throwable` @[L430cd6..L430ce2] goto L430d02;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$TakeUntilPredicateObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430d38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430d3c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L430d42.  v0:= temp;
  #L430d44.  if v0 == 0 then goto L430d56;
  #L430d48.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L430d4c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L430d50.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L430d56.  return @kind void;
}
