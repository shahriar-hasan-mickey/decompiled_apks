record `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.bufferSize` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.delayError` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.keySelector` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.valueSelector` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.NULL_KEY` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42650c.  v0:= new `java.lang.Object`;
  #L426510.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L426516.  `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.NULL_KEY` @type ^`java.lang.Object` := v0 @kind object;
  #L42651a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42652c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L426532.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L426536.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42653c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L426540.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L426544.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.keySelector` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L426548.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.valueSelector` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L42654c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.bufferSize` @type ^`int` := v5;
  #L426550.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.delayError` @type ^`boolean` := v6 @kind boolean;
  #L426554.  v2:= new `java.util.concurrent.ConcurrentHashMap`;
  #L426558.  call `<init>`(v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L42655e.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` := v2 @kind object;
  #L426562.  v2:= 1I;
  #L426564.  call `lazySet`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.lazySet:(I)V` @kind virtual;
  #L42656a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42657c.  if v2 == 0 then goto L426582;
  #L426580.  goto L426586;
  #L426582.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L426586.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L42658a.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L426590.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.decrementAndGet:()I` @kind virtual;
  #L426596.  v2:= temp;
  #L426598.  if v2 != 0 then goto L4265a6;
  #L42659c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4265a0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4265a6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4265b8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4265bc.  v1:= 0I;
  #L4265be.  v2:= 1I;
  #L4265c0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4265c6.  v0:= temp;
  #L4265c8.  if v0 == 0 then goto L4265e2;
  #L4265cc.  call temp:= `decrementAndGet`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.decrementAndGet:()I` @kind virtual;
  #L4265d2.  v0:= temp;
  #L4265d4.  if v0 != 0 then goto L4265e2;
  #L4265d8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4265dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4265e2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4264ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4264f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4264f6.  v0:= temp;
  #L4264f8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4265f4.  v0:= new `java.util.ArrayList`;
  #L4265f8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L4265fc.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L426602.  v1:= temp @kind object;
  #L426604.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L42660a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L42660e.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L426614.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42661a.  v0:= temp @kind object;
  #L42661c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426622.  v1:= temp;
  #L426624.  if v1 == 0 then goto L42663c;
  #L426628.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42662e.  v1:= temp @kind object;
  #L426630.  v1:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupedUnicast`) v1 @kind object;
  #L426634.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupedUnicast;.onComplete:()V` @kind virtual;
  #L42663a.  goto L42661c;
  #L42663c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L426640.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L426646.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L426658.  v0:= new `java.util.ArrayList`;
  #L42665c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L426660.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L426666.  v1:= temp @kind object;
  #L426668.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L42666e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L426672.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L426678.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42667e.  v0:= temp @kind object;
  #L426680.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426686.  v1:= temp;
  #L426688.  if v1 == 0 then goto L4266a0;
  #L42668c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426692.  v1:= temp @kind object;
  #L426694.  v1:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupedUnicast`) v1 @kind object;
  #L426698.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupedUnicast;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42669e.  goto L426680;
  #L4266a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4266a4.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4266aa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4266bc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L4266c0.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4266c6.  v0:= temp @kind object;
  #L4266c8.  if v0 == 0 then goto L4266d0;
  #L4266cc.  v1:= v0 @kind object;
  #L4266ce.  goto L4266d4;
  #L4266d0.  v1:= `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L4266d4.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L4266d8.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4266de.  v2:= temp @kind object;
  #L4266e0.  v2:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupedUnicast`) v2 @kind object;
  #L4266e4.  if v2 != 0 then goto L426724;
  #L4266e8.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4266ec.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4266f2.  v2:= temp;
  #L4266f4.  if v2 == 0 then goto L4266fa;
  #L4266f8.  return @kind void;
  #L4266fa.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.bufferSize` @type ^`int`;
  #L4266fe.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.delayError` @type ^`boolean` @kind boolean;
  #L426702.  call temp:= `createWith`(v0, v2, v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupedUnicast;.createWith:(Ljava/lang/Object;ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;Z)Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupedUnicast;` @kind static;
  #L426708.  v2:= temp @kind object;
  #L42670a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L42670e.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L426714.  call temp:= `getAndIncrement`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.getAndIncrement:()I` @kind virtual;
  #L42671a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42671e.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L426724.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.valueSelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L426728.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42672e.  v5:= temp @kind object;
  #L426730.  v0:= "The value supplied is null" @kind object;
  #L426734.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42673a.  v5:= temp @kind object;
  #L42673c.  call `onNext`(v2, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupedUnicast;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L426742.  return @kind void;
  #L426744.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L426746.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42674c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L426750.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L426756.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42675c.  return @kind void;
  #L42675e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L426760.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L426766.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42676a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L426770.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L426776.  return @kind void;
  catch `java.lang.Throwable` @[L4266bc..L4266c8] goto L42675e;
  catch `java.lang.Throwable` @[L426724..L42673c] goto L426744;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4267a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4267a4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4267aa.  v0:= temp;
  #L4267ac.  if v0 == 0 then goto L4267be;
  #L4267b0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4267b4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4267b8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4267be.  return @kind void;
}
