record `io.reactivex.internal.operators.observable.ObservableZipIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.observable.ObservableZipIterable.other` @AccessFlag FINAL;
  `io.reactivex.Observable` `io.reactivex.internal.operators.observable.ObservableZipIterable.source` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableZipIterable.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZipIterable` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable;.<init>:(Lio/reactivex/Observable;Ljava/lang/Iterable;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L435e4c.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L435e52.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable.source` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L435e56.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable.other` @type ^`java.lang.Iterable` := v2 @kind object;
  #L435e5a.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable.zipper` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L435e5e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableZipIterable` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L435e70.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZipIterable.other` @type ^`java.lang.Iterable` @kind object;
  #L435e74.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L435e7a.  v0:= temp @kind object;
  #L435e7c.  v1:= "The iterator returned by other is null" @kind object;
  #L435e80.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L435e86.  v0:= temp @kind object;
  #L435e88.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L435e8c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L435e92.  v1:= temp;
  #L435e94.  if v1 != 0 then goto L435ea0;
  #L435e98.  call `complete`(v5) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L435e9e.  return @kind void;
  #L435ea0.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableZipIterable.source` @type ^`io.reactivex.Observable` @kind object;
  #L435ea4.  v2:= new `io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableObserver`;
  #L435ea8.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableZipIterable.zipper` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L435eac.  call `<init>`(v2, v5, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$ZipIterableObserver;.<init>:(Lio/reactivex/Observer;Ljava/util/Iterator;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L435eb2.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L435eb8.  return @kind void;
  #L435eba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435ebc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435ec2.  call `error`(v0, v5) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L435ec8.  return @kind void;
  #L435eca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435ecc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435ed2.  call `error`(v0, v5) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L435ed8.  return @kind void;
  catch `java.lang.Throwable` @[L435e70..L435e8c] goto L435eca;
  catch `java.lang.Throwable` @[L435e8c..L435e94] goto L435eba;
}
