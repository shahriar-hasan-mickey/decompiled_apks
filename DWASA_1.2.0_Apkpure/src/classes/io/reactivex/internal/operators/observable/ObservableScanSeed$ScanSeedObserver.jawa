record `io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.accumulator` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$ScanSeedObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42e29c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42e2a2.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42e2a6.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.accumulator` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L42e2aa.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L42e2ae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$ScanSeedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e2c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e2c4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42e2ca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$ScanSeedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e27c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e280.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42e286.  v0:= temp;
  #L42e288.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$ScanSeedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e2dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.done` @type ^`boolean` @kind boolean;
  #L42e2e0.  if v0 == 0 then goto L42e2e6;
  #L42e2e4.  return @kind void;
  #L42e2e6.  v0:= 1I;
  #L42e2e8.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42e2ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e2f0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42e2f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$ScanSeedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e308.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.done` @type ^`boolean` @kind boolean;
  #L42e30c.  if v0 == 0 then goto L42e318;
  #L42e310.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42e316.  return @kind void;
  #L42e318.  v0:= 1I;
  #L42e31a.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42e31e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e322.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e328.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$ScanSeedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e33c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.done` @type ^`boolean` @kind boolean;
  #L42e340.  if v0 == 0 then goto L42e346;
  #L42e344.  return @kind void;
  #L42e346.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.value` @type ^`java.lang.Object` @kind object;
  #L42e34a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.accumulator` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L42e34e.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42e354.  v3:= temp @kind object;
  #L42e356.  v0:= "The accumulator returned a null value" @kind object;
  #L42e35a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42e360.  v3:= temp @kind object;
  #L42e362.  v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L42e366.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e36a.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42e370.  return @kind void;
  #L42e372.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42e374.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42e37a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e37e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42e384.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$ScanSeedObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42e38a.  return @kind void;
  catch `java.lang.Throwable` @[L42e34a..L42e362] goto L42e372;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$ScanSeedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e3a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e3ac.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42e3b2.  v0:= temp;
  #L42e3b4.  if v0 == 0 then goto L42e3d4;
  #L42e3b8.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42e3bc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e3c0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42e3c6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42e3ca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedObserver.value` @type ^`java.lang.Object` @kind object;
  #L42e3ce.  call `onNext`(v2, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42e3d4.  return @kind void;
}
