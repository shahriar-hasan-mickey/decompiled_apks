record `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.ObservableEmitter` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @AccessFlag VOLATILE;
  `io.reactivex.ObservableEmitter` `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.error` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.ObservableEmitter` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.<init>:(Lio/reactivex/ObservableEmitter;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42197c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L421982.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` := v2 @kind object;
  #L421986.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42198a.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L421990.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L421994.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L421998.  v0:= 16I;
  #L42199c.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4219a2.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4219a6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L4219b8.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.getAndIncrement:()I` @kind virtual;
  #L4219be.  v0:= temp;
  #L4219c0.  if v0 != 0 then goto L4219ca;
  #L4219c4.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drainLoop:()V` @kind virtual;
  #L4219ca.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4219dc.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4219e0.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4219e4.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4219e8.  v3:= 1I;
  #L4219ea.  v4:= 1I;
  #L4219ec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4219f2.  v5:= temp;
  #L4219f4.  if v5 == 0 then goto L421a00;
  #L4219f8.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4219fe.  return @kind void;
  #L421a00.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L421a06.  v5:= temp @kind object;
  #L421a08.  if v5 == 0 then goto L421a22;
  #L421a0c.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L421a12.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L421a18.  v1:= temp @kind object;
  #L421a1a.  call `onError`(v0, v1) @signature `Lio/reactivex/ObservableEmitter;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421a20.  return @kind void;
  #L421a22.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L421a26.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L421a2c.  v6:= temp @kind object;
  #L421a2e.  if v6 != 0 then goto L421a36;
  #L421a32.  v7:= 1I;
  #L421a34.  goto L421a38;
  #L421a36.  v7:= 0I;
  #L421a38.  if v5 == 0 then goto L421a48;
  #L421a3c.  if v7 == 0 then goto L421a48;
  #L421a40.  call `onComplete`(v0) @signature `Lio/reactivex/ObservableEmitter;.onComplete:()V` @kind interface;
  #L421a46.  return @kind void;
  #L421a48.  if v7 == 0 then goto L421a5c;
  #L421a4c.  v4:= -v4 @kind int;
  #L421a4e.  call temp:= `addAndGet`(v8, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.addAndGet:(I)I` @kind virtual;
  #L421a54.  v4:= temp;
  #L421a56.  if v4 != 0 then goto L4219ec;
  #L421a5a.  return @kind void;
  #L421a5c.  call `onNext`(v0, v6) @signature `Lio/reactivex/ObservableEmitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L421a62.  goto L4219ec;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4218c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4218cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4218d2.  v0:= temp;
  #L4218d4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421a74.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L421a78.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L421a7e.  v0:= temp;
  #L421a80.  if v0 != 0 then goto L421a9a;
  #L421a84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L421a88.  if v0 == 0 then goto L421a8e;
  #L421a8c.  goto L421a9a;
  #L421a8e.  v0:= 1I;
  #L421a90.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L421a94.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drain:()V` @kind virtual;
  #L421a9a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421aac.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L421ab2.  v0:= temp;
  #L421ab4.  if v0 != 0 then goto L421abe;
  #L421ab8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L421abe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421ad0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L421ad4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L421ada.  v0:= temp;
  #L421adc.  if v0 != 0 then goto L421b62;
  #L421ae0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L421ae4.  if v0 == 0 then goto L421aea;
  #L421ae8.  goto L421b62;
  #L421aea.  if v3 != 0 then goto L421b04;
  #L421aee.  v3:= new `java.lang.NullPointerException`;
  #L421af2.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L421af6.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L421afc.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L421b02.  return @kind void;
  #L421b04.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.get:()I` @kind virtual;
  #L421b0a.  v0:= temp;
  #L421b0c.  if v0 != 0 then goto L421b38;
  #L421b10.  v0:= 0I;
  #L421b12.  v1:= 1I;
  #L421b14.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.compareAndSet:(II)Z` @kind virtual;
  #L421b1a.  v0:= temp;
  #L421b1c.  if v0 == 0 then goto L421b38;
  #L421b20.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L421b24.  call `onNext`(v0, v3) @signature `Lio/reactivex/ObservableEmitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L421b2a.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.decrementAndGet:()I` @kind virtual;
  #L421b30.  v3:= temp;
  #L421b32.  if v3 != 0 then goto L421b54;
  #L421b36.  return @kind void;
  #L421b38.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L421b3c.  @monitorenter v0
  #L421b3e.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L421b44.  @monitorexit v0
  #L421b46.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.getAndIncrement:()I` @kind virtual;
  #L421b4c.  v3:= temp;
  #L421b4e.  if v3 == 0 then goto L421b54;
  #L421b52.  return @kind void;
  #L421b54.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drainLoop:()V` @kind virtual;
  #L421b5a.  return @kind void;
  #L421b5c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L421b5e.  @monitorexit v0
  #L421b60.  throw v3;
  #L421b62.  return @kind void;
  catch `java.lang.Throwable` @[L421b3e..L421b46] goto L421b5c;
  catch `java.lang.Throwable` @[L421b5e..L421b60] goto L421b5c;
}
procedure `io.reactivex.ObservableEmitter` `serialize`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.serialize:()Lio/reactivex/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L421948.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421b88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L421b8c.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/ObservableEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @kind interface;
  #L421b92.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421ba4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L421ba8.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/ObservableEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L421bae.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42195c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L421960.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L421966.  v0:= temp @kind object;
  #L421968.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4218e8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4218ec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4218f2.  v0:= temp;
  #L4218f4.  v1:= 0I;
  #L4218f6.  if v0 != 0 then goto L421934;
  #L4218fa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L4218fe.  if v0 == 0 then goto L421904;
  #L421902.  goto L421934;
  #L421904.  if v3 != 0 then goto L421916;
  #L421908.  v3:= new `java.lang.NullPointerException`;
  #L42190c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L421910.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L421916.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42191a.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L421920.  v3:= temp;
  #L421922.  if v3 == 0 then goto L421934;
  #L421926.  v3:= 1I;
  #L421928.  v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` := v3 @kind boolean;
  #L42192c.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drain:()V` @kind virtual;
  #L421932.  return v3;
  #L421934.  return v1;
}
