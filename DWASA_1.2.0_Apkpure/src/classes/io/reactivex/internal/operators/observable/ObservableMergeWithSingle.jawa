record `io.reactivex.internal.operators.observable.ObservableMergeWithSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle;.<init>:(Lio/reactivex/Observable;Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L429c5c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L429c62.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle.other` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L429c66.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L429c78.  v0:= new `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver`;
  #L429c7c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L429c82.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L429c88.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L429c8c.  call `subscribe`(v2, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L429c92.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle.other` @type ^`io.reactivex.SingleSource` @kind object;
  #L429c96.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver` @kind object;
  #L429c9a.  call `subscribe`(v2, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L429ca0.  return @kind void;
}
