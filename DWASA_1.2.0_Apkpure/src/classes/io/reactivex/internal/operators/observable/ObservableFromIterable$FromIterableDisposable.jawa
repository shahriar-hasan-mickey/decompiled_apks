record `io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.checkNext` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.fusionMode` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.it` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.<init>:(Lio/reactivex/Observer;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L425f58.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L425f5e.  v0.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L425f62.  v0.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.it` @type ^`java.util.Iterator` := v2 @kind object;
  #L425f66.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425f78.  v0:= 1I;
  #L425f7a.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.done` @type ^`boolean` := v0 @kind boolean;
  #L425f7e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425f90.  v0:= 1I;
  #L425f92.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.disposed` @type ^`boolean` := v0 @kind boolean;
  #L425f96.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425ea8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.disposed` @type ^`boolean` @kind boolean;
  #L425eac.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425ec0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.done` @type ^`boolean` @kind boolean;
  #L425ec4.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L425efc.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.done` @type ^`boolean` @kind boolean;
  #L425f00.  v1:= 0I;
  #L425f02.  if v0 == 0 then goto L425f08;
  #L425f06.  return v1 @kind object;
  #L425f08.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.checkNext` @type ^`boolean` @kind boolean;
  #L425f0c.  v2:= 1I;
  #L425f0e.  if v0 == 0 then goto L425f28;
  #L425f12.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.it` @type ^`java.util.Iterator` @kind object;
  #L425f16.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L425f1c.  v0:= temp;
  #L425f1e.  if v0 != 0 then goto L425f2c;
  #L425f22.  v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.done` @type ^`boolean` := v2 @kind boolean;
  #L425f26.  return v1 @kind object;
  #L425f28.  v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.checkNext` @type ^`boolean` := v2 @kind boolean;
  #L425f2c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.it` @type ^`java.util.Iterator` @kind object;
  #L425f30.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L425f36.  v0:= temp @kind object;
  #L425f38.  v1:= "The iterator returned a null value" @kind object;
  #L425f3c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L425f42.  v0:= temp @kind object;
  #L425f44.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425ed8.  v0:= 1I;
  #L425eda.  v2:= v2 ^& v0 @kind int;
  #L425edc.  if v2 == 0 then goto L425ee6;
  #L425ee0.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.fusionMode` @type ^`boolean` := v0 @kind boolean;
  #L425ee4.  return v0;
  #L425ee6.  v2:= 0I;
  #L425ee8.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L425fa8.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.isDisposed:()Z` @kind virtual;
  #L425fae.  v0:= temp;
  #L425fb0.  if v0 == 0 then goto L425fb6;
  #L425fb4.  return @kind void;
  #L425fb6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.it` @type ^`java.util.Iterator` @kind object;
  #L425fba.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L425fc0.  v0:= temp @kind object;
  #L425fc2.  v1:= "The iterator returned a null value" @kind object;
  #L425fc6.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L425fcc.  v0:= temp @kind object;
  #L425fce.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L425fd2.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L425fd8.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.isDisposed:()Z` @kind virtual;
  #L425fde.  v0:= temp;
  #L425fe0.  if v0 == 0 then goto L425fe6;
  #L425fe4.  return @kind void;
  #L425fe6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.it` @type ^`java.util.Iterator` @kind object;
  #L425fea.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L425ff0.  v0:= temp;
  #L425ff2.  if v0 != 0 then goto L425fa8;
  #L425ff6.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$FromIterableDisposable;.isDisposed:()Z` @kind virtual;
  #L425ffc.  v0:= temp;
  #L425ffe.  if v0 != 0 then goto L42600c;
  #L426002.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L426006.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42600c.  return @kind void;
  #L42600e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L426010.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L426016.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42601a.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L426020.  return @kind void;
  #L426022.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L426024.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42602a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42602e.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L426034.  return @kind void;
  catch `java.lang.Throwable` @[L425fb6..L425fce] goto L426022;
  catch `java.lang.Throwable` @[L425fe6..L425ff2] goto L42600e;
}
