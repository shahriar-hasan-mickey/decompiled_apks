record `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.Observer` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.outputFused` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.sourceMode` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L429e24.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L429e2a.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L429e2e.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L429e32.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.delayError` @type ^`boolean` := v3 @kind boolean;
  #L429e36.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.bufferSize` @type ^`int` := v4;
  #L429e3a.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.checkTerminated:(ZZLio/reactivex/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L429d08.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` @kind boolean;
  #L429d0c.  v1:= 1I;
  #L429d0e.  if v0 == 0 then goto L429d1e;
  #L429d12.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L429d16.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L429d1c.  return v1;
  #L429d1e.  if v3 == 0 then goto L429d92;
  #L429d22.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L429d26.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.delayError` @type ^`boolean` @kind boolean;
  #L429d2a.  if v0 == 0 then goto L429d54;
  #L429d2e.  if v4 == 0 then goto L429d92;
  #L429d32.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v1 @kind boolean;
  #L429d36.  if v3 == 0 then goto L429d42;
  #L429d3a.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429d40.  goto L429d48;
  #L429d42.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L429d48.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L429d4c.  call `dispose`(v3) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L429d52.  return v1;
  #L429d54.  if v3 == 0 then goto L429d78;
  #L429d58.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v1 @kind boolean;
  #L429d5c.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L429d60.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L429d66.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429d6c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L429d70.  call `dispose`(v3) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L429d76.  return v1;
  #L429d78.  if v4 == 0 then goto L429d92;
  #L429d7c.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v1 @kind boolean;
  #L429d80.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L429d86.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L429d8a.  call `dispose`(v3) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L429d90.  return v1;
  #L429d92.  v3:= 0I;
  #L429d94.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429e4c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L429e50.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L429e56.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429e68.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` @kind boolean;
  #L429e6c.  if v0 != 0 then goto L429ea0;
  #L429e70.  v0:= 1I;
  #L429e72.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L429e76.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L429e7a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L429e80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L429e84.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L429e8a.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.getAndIncrement:()I` @kind virtual;
  #L429e90.  v0:= temp;
  #L429e92.  if v0 != 0 then goto L429ea0;
  #L429e96.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L429e9a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L429ea0.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L429eb4.  v0:= 1I;
  #L429eb6.  v1:= 1I;
  #L429eb8.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` @kind boolean;
  #L429ebc.  if v2 == 0 then goto L429ec2;
  #L429ec0.  return @kind void;
  #L429ec2.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L429ec6.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L429eca.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.delayError` @type ^`boolean` @kind boolean;
  #L429ece.  if v4 != 0 then goto L429ef4;
  #L429ed2.  if v2 == 0 then goto L429ef4;
  #L429ed6.  if v3 == 0 then goto L429ef4;
  #L429eda.  v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L429ede.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429ee2.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429ee8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L429eec.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L429ef2.  return @kind void;
  #L429ef4.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429ef8.  v4:= 0I;
  #L429efa.  call `onNext`(v3, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429f00.  if v2 == 0 then goto L429f32;
  #L429f04.  v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L429f08.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L429f0c.  if v0 == 0 then goto L429f1c;
  #L429f10.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429f14.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429f1a.  goto L429f26;
  #L429f1c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429f20.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L429f26.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L429f2a.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L429f30.  return @kind void;
  #L429f32.  v1:= -v1 @kind int;
  #L429f34.  call temp:= `addAndGet`(v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.addAndGet:(I)I` @kind virtual;
  #L429f3a.  v1:= temp;
  #L429f3c.  if v1 != 0 then goto L429eb8;
  #L429f40.  return @kind void;
}
procedure `void` `drainNormal`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L429f54.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L429f58.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L429f5c.  v2:= 1I;
  #L429f5e.  v3:= 1I;
  #L429f60.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L429f64.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L429f6a.  v5:= temp;
  #L429f6c.  call temp:= `checkTerminated`(v7, v4, v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.checkTerminated:(ZZLio/reactivex/Observer;)Z` @kind virtual;
  #L429f72.  v4:= temp;
  #L429f74.  if v4 == 0 then goto L429f7a;
  #L429f78.  return @kind void;
  #L429f7a.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L429f7e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L429f84.  v5:= temp @kind object;
  #L429f86.  if v5 != 0 then goto L429f8e;
  #L429f8a.  v6:= 1I;
  #L429f8c.  goto L429f90;
  #L429f8e.  v6:= 0I;
  #L429f90.  call temp:= `checkTerminated`(v7, v4, v6, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.checkTerminated:(ZZLio/reactivex/Observer;)Z` @kind virtual;
  #L429f96.  v4:= temp;
  #L429f98.  if v4 == 0 then goto L429f9e;
  #L429f9c.  return @kind void;
  #L429f9e.  if v6 == 0 then goto L429fb2;
  #L429fa2.  v3:= -v3 @kind int;
  #L429fa4.  call temp:= `addAndGet`(v7, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.addAndGet:(I)I` @kind virtual;
  #L429faa.  v3:= temp;
  #L429fac.  if v3 != 0 then goto L429f60;
  #L429fb0.  return @kind void;
  #L429fb2.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429fb8.  goto L429f7a;
  #L429fba.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429fbc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L429fc2.  v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v2 @kind boolean;
  #L429fc6.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L429fca.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L429fd0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L429fd6.  call `onError`(v1, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429fdc.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L429fe0.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L429fe6.  return @kind void;
  catch `java.lang.Throwable` @[L429f7e..L429f86] goto L429fba;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429da8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` @kind boolean;
  #L429dac.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429dc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L429dc4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L429dca.  v0:= temp;
  #L429dcc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a004.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L42a008.  if v0 == 0 then goto L42a00e;
  #L42a00c.  return @kind void;
  #L42a00e.  v0:= 1I;
  #L42a010.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42a014.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @kind virtual;
  #L42a01a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a02c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L42a030.  if v0 == 0 then goto L42a03c;
  #L42a034.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a03a.  return @kind void;
  #L42a03c.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L42a040.  v2:= 1I;
  #L42a042.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L42a046.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @kind virtual;
  #L42a04c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a060.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L42a064.  if v0 == 0 then goto L42a06a;
  #L42a068.  return @kind void;
  #L42a06a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.sourceMode` @type ^`int`;
  #L42a06e.  v1:= 2I;
  #L42a070.  if v0 == v1 then goto L42a07e;
  #L42a074.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42a078.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42a07e.  call `schedule`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @kind virtual;
  #L42a084.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a098.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42a09c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42a0a2.  v0:= temp;
  #L42a0a4.  if v0 == 0 then goto L42a11c;
  #L42a0a8.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L42a0ac.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L42a0b0.  if v0 == 0 then goto L42a100;
  #L42a0b4.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L42a0b8.  v0:= 7I;
  #L42a0ba.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.requestFusion:(I)I` @kind interface;
  #L42a0c0.  v0:= temp;
  #L42a0c2.  v1:= 1I;
  #L42a0c4.  if v0 != v1 then goto L42a0e6;
  #L42a0c8.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.sourceMode` @type ^`int` := v0;
  #L42a0cc.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L42a0d0.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L42a0d4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a0d8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42a0de.  call `schedule`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @kind virtual;
  #L42a0e4.  return @kind void;
  #L42a0e6.  v1:= 2I;
  #L42a0e8.  if v0 != v1 then goto L42a100;
  #L42a0ec.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.sourceMode` @type ^`int` := v0;
  #L42a0f0.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L42a0f4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a0f8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42a0fe.  return @kind void;
  #L42a100.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L42a104.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.bufferSize` @type ^`int`;
  #L42a108.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L42a10e.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L42a112.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a116.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42a11c.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429e04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L429e08.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L429e0e.  v0:= temp @kind object;
  #L429e10.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429de0.  v0:= 2I;
  #L429de2.  v2:= v2 ^& v0 @kind int;
  #L429de4.  if v2 == 0 then goto L429df0;
  #L429de8.  v2:= 1I;
  #L429dea.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L429dee.  return v0;
  #L429df0.  v2:= 0I;
  #L429df2.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a130.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.outputFused` @type ^`boolean` @kind boolean;
  #L42a134.  if v0 == 0 then goto L42a140;
  #L42a138.  call `drainFused`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.drainFused:()V` @kind virtual;
  #L42a13e.  goto L42a146;
  #L42a140.  call `drainNormal`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.drainNormal:()V` @kind virtual;
  #L42a146.  return @kind void;
}
procedure `void` `schedule`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @AccessFlag  {
    temp;
    v0;

  #L42a158.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.getAndIncrement:()I` @kind virtual;
  #L42a15e.  v0:= temp;
  #L42a160.  if v0 != 0 then goto L42a16e;
  #L42a164.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L42a168.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42a16e.  return @kind void;
}
