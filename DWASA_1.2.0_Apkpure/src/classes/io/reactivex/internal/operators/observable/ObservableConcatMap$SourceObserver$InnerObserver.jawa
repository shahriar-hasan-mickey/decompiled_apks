record `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4205a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4205a6.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4205aa.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` := v2 @kind object;
  #L4205ae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.dispose:()V` @AccessFlag  {
    temp;

  #L4205c0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4205c6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4205d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` @kind object;
  #L4205dc.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.innerComplete:()V` @kind virtual;
  #L4205e2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4205f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` @kind object;
  #L4205f8.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @kind virtual;
  #L4205fe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420602.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420608.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42061c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L420620.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L420626.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L420638.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42063e.  return @kind void;
}
