record `io.reactivex.internal.operators.observable.ObservablePublish$PublishSource` @kind class @AccessFlag FINAL extends `io.reactivex.ObservableSource` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$PublishSource.curr` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishSource` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishSource;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42a8c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42a8c6.  v0.`io.reactivex.internal.operators.observable.ObservablePublish$PublishSource.curr` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42a8ca.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservablePublish$PublishSource` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishSource;.subscribe:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42a8dc.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`;
  #L42a8e0.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L42a8e6.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42a8ec.  v4:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$PublishSource.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a8f0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a8f6.  v4:= temp @kind object;
  #L42a8f8.  v4:= (`io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver`) v4 @kind object;
  #L42a8fc.  if v4 == 0 then goto L42a90c;
  #L42a900.  call temp:= `isDisposed`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.isDisposed:()Z` @kind virtual;
  #L42a906.  v1:= temp;
  #L42a908.  if v1 == 0 then goto L42a92e;
  #L42a90c.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$PublishObserver`;
  #L42a910.  v2:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$PublishSource.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a914.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L42a91a.  v2:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$PublishSource.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a91e.  call temp:= `compareAndSet`(v2, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a924.  v4:= temp;
  #L42a926.  if v4 != 0 then goto L42a92c;
  #L42a92a.  goto L42a8ec;
  #L42a92c.  v4:= v1 @kind object;
  #L42a92e.  call temp:= `add`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;.add:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)Z` @kind virtual;
  #L42a934.  v1:= temp;
  #L42a936.  if v1 == 0 then goto L42a8ec;
  #L42a93a.  call `setParent`(v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.setParent:(Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver;)V` @kind virtual;
  #L42a940.  return @kind void;
}
