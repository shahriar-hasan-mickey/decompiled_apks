record `io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.inMaybe` @AccessFlag ;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.other` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42115c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L421162.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L421166.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.other` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L42116a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42117c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L421182.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421134.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L42113a.  v0:= temp @kind object;
  #L42113c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L421140.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L421146.  v0:= temp;
  #L421148.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421194.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.inMaybe` @type ^`boolean` @kind boolean;
  #L421198.  if v0 == 0 then goto L4211a8;
  #L42119c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4211a0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4211a6.  goto L4211c4;
  #L4211a8.  v0:= 1I;
  #L4211aa.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.inMaybe` @type ^`boolean` := v0 @kind boolean;
  #L4211ae.  v0:= 0I;
  #L4211b0.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4211b6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.other` @type ^`io.reactivex.MaybeSource` @kind object;
  #L4211ba.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.other` @type ^`io.reactivex.MaybeSource` := v0 @kind object;
  #L4211be.  call `subscribe`(v1, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4211c4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4211d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4211dc.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4211e2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4211f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4211f8.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4211fe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L421210.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L421216.  v1:= temp;
  #L421218.  if v1 == 0 then goto L42122e;
  #L42121c.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.inMaybe` @type ^`boolean` @kind boolean;
  #L421220.  if v1 != 0 then goto L42122e;
  #L421224.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L421228.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42122e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$ConcatWithObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421240.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L421244.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42124a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42124e.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L421254.  return @kind void;
}
