record `io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.collection` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$ToListObserver;.<init>:(Lio/reactivex/SingleObserver;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L432680.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L432686.  v0.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43268a.  v0.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.collection` @type ^`java.util.Collection` := v2 @kind object;
  #L43268e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$ToListObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4326a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4326a4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4326aa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$ToListObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432660.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432664.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43266a.  v0:= temp;
  #L43266c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$ToListObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4326bc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.collection` @type ^`java.util.Collection` @kind object;
  #L4326c0.  v1:= 0I;
  #L4326c2.  v2.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.collection` @type ^`java.util.Collection` := v1 @kind object;
  #L4326c6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4326ca.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4326d0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$ToListObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4326e4.  v0:= 0I;
  #L4326e6.  v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.collection` @type ^`java.util.Collection` := v0 @kind object;
  #L4326ea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4326ee.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4326f4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$ToListObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432708.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.collection` @type ^`java.util.Collection` @kind object;
  #L43270c.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L432712.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$ToListObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432724.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432728.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43272e.  v0:= temp;
  #L432730.  if v0 == 0 then goto L432742;
  #L432734.  v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L432738.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$ToListObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43273c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L432742.  return @kind void;
}
