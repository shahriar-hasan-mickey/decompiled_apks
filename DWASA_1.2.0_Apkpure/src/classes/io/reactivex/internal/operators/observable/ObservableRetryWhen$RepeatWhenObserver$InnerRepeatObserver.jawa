record `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d350.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` := v1 @kind object;
  #L42d354.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42d35a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d36c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` @kind object;
  #L42d370.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerComplete:()V` @kind virtual;
  #L42d376.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d388.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` @kind object;
  #L42d38c.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42d392.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42d3a4.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` @kind object;
  #L42d3a8.  call `innerNext`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerNext:()V` @kind virtual;
  #L42d3ae.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42d3c0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d3c6.  return @kind void;
}
