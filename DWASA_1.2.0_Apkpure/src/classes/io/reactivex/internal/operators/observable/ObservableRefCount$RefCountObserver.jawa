record `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount` `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableRefCount` v2 @kind object, `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42b51c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42b522.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42b526.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` := v2 @kind object;
  #L42b52a.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` := v3 @kind object;
  #L42b52e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b540.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b544.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b54a.  v0:= 0I;
  #L42b54c.  v1:= 1I;
  #L42b54e.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42b554.  v0:= temp;
  #L42b556.  if v0 == 0 then goto L42b568;
  #L42b55a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L42b55e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b562.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.cancel:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L42b568.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b4fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b500.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42b506.  v0:= temp;
  #L42b508.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b57c.  v0:= 0I;
  #L42b57e.  v1:= 1I;
  #L42b580.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42b586.  v0:= temp;
  #L42b588.  if v0 == 0 then goto L42b5a4;
  #L42b58c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L42b590.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b594.  call `terminated`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.terminated:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L42b59a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b59e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42b5a4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b5b8.  v0:= 0I;
  #L42b5ba.  v1:= 1I;
  #L42b5bc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42b5c2.  v0:= temp;
  #L42b5c4.  if v0 == 0 then goto L42b5e2;
  #L42b5c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L42b5cc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L42b5d0.  call `terminated`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.terminated:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L42b5d6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b5da.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b5e0.  goto L42b5e8;
  #L42b5e2.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42b5e8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b5fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b600.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42b606.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b618.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b61c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b622.  v0:= temp;
  #L42b624.  if v0 == 0 then goto L42b636;
  #L42b628.  v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42b62c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b630.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b636.  return @kind void;
}
