record `io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.count` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L428048.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42804e.  v0.`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L428052.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L428064.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42806a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428020.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L428026.  v0:= temp @kind object;
  #L428028.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42802c.  if v0 != v1 then goto L428034;
  #L428030.  v0:= 1I;
  #L428032.  goto L428036;
  #L428034.  v0:= 0I;
  #L428036.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42807c.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L428082.  v0:= temp @kind object;
  #L428084.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428088.  if v0 == v1 then goto L4280ac;
  #L42808c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L428090.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.count` @type ^`long` @kind wide;
  #L428094.  v3:= 1L;
  #L428098.  v3:= v3 + v1 @kind long;
  #L42809a.  v5.`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.count` @type ^`long` := v3 @kind wide;
  #L42809e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4280a4.  v1:= temp @kind object;
  #L4280a6.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4280ac.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$IntervalObserver;.setResource:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4280c0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4280c6.  return @kind void;
}
