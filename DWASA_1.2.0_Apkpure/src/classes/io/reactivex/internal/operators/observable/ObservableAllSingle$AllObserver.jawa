record `io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.predicate` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$AllObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41c6f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41c6fe.  v0.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L41c702.  v0.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L41c706.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$AllObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c718.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c71c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41c722.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$AllObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c6d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c6dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41c6e2.  v0:= temp;
  #L41c6e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$AllObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c734.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.done` @type ^`boolean` @kind boolean;
  #L41c738.  if v0 == 0 then goto L41c73e;
  #L41c73c.  return @kind void;
  #L41c73e.  v0:= 1I;
  #L41c740.  v2.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41c744.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41c748.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L41c74e.  v0:= temp @kind object;
  #L41c750.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41c756.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$AllObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c768.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.done` @type ^`boolean` @kind boolean;
  #L41c76c.  if v0 == 0 then goto L41c778;
  #L41c770.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41c776.  return @kind void;
  #L41c778.  v0:= 1I;
  #L41c77a.  v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41c77e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41c782.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41c788.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$AllObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c79c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.done` @type ^`boolean` @kind boolean;
  #L41c7a0.  if v0 == 0 then goto L41c7a6;
  #L41c7a4.  return @kind void;
  #L41c7a6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L41c7aa.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L41c7b0.  v2:= temp;
  #L41c7b2.  if v2 != 0 then goto L41c7da;
  #L41c7b6.  v2:= 1I;
  #L41c7b8.  v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41c7bc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c7c0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41c7c6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41c7ca.  v0:= 0I;
  #L41c7cc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L41c7d2.  v0:= temp @kind object;
  #L41c7d4.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41c7da.  return @kind void;
  #L41c7dc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41c7de.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41c7e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c7e8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41c7ee.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$AllObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41c7f4.  return @kind void;
  catch `java.lang.Throwable` @[L41c7a6..L41c7b2] goto L41c7dc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$AllObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c814.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41c818.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41c81e.  v0:= temp;
  #L41c820.  if v0 == 0 then goto L41c832;
  #L41c824.  v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41c828.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAllSingle$AllObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41c82c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41c832.  return @kind void;
}
