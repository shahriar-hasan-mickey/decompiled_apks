record `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` v1 @kind object, `int` v2 , `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;ILio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41ca8c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41ca92.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` := v1 @kind object;
  #L41ca96.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @type ^`int` := v2;
  #L41ca9a.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.Observer` := v3 @kind object;
  #L41ca9e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L41cab0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41cab6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41cac8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` @kind boolean;
  #L41cacc.  if v0 == 0 then goto L41cadc;
  #L41cad0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cad4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41cada.  goto L41cb00;
  #L41cadc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` @kind object;
  #L41cae0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @type ^`int`;
  #L41cae4.  call temp:= `win`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;.win:(I)Z` @kind virtual;
  #L41caea.  v0:= temp;
  #L41caec.  if v0 == 0 then goto L41cb00;
  #L41caf0.  v0:= 1I;
  #L41caf2.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` := v0 @kind boolean;
  #L41caf6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cafa.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41cb00.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41cb14.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` @kind boolean;
  #L41cb18.  if v0 == 0 then goto L41cb28;
  #L41cb1c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cb20.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41cb26.  goto L41cb54;
  #L41cb28.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` @kind object;
  #L41cb2c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @type ^`int`;
  #L41cb30.  call temp:= `win`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;.win:(I)Z` @kind virtual;
  #L41cb36.  v0:= temp;
  #L41cb38.  if v0 == 0 then goto L41cb4e;
  #L41cb3c.  v0:= 1I;
  #L41cb3e.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` := v0 @kind boolean;
  #L41cb42.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cb46.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41cb4c.  goto L41cb54;
  #L41cb4e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41cb54.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41cb68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` @kind boolean;
  #L41cb6c.  if v0 == 0 then goto L41cb7c;
  #L41cb70.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cb74.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41cb7a.  goto L41cbb4;
  #L41cb7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator` @kind object;
  #L41cb80.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @type ^`int`;
  #L41cb84.  call temp:= `win`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator;.win:(I)Z` @kind virtual;
  #L41cb8a.  v0:= temp;
  #L41cb8c.  if v0 == 0 then goto L41cba2;
  #L41cb90.  v0:= 1I;
  #L41cb92.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` := v0 @kind boolean;
  #L41cb96.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41cb9a.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41cba0.  goto L41cbb4;
  #L41cba2.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L41cba8.  v3:= temp @kind object;
  #L41cbaa.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L41cbae.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41cbb4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L41cbc8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41cbce.  return @kind void;
}
