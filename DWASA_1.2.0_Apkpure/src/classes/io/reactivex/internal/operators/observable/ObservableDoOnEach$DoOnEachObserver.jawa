record `io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.done` @AccessFlag ;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onAfterTerminate` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onComplete` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onError` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onNext` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L423178.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42317e.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L423182.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L423186.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onError` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L42318a.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onComplete` @type ^`io.reactivex.functions.Action` := v4 @kind object;
  #L42318e.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onAfterTerminate` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L423192.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4231a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4231a8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4231ae.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423158.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42315c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L423162.  v0:= temp;
  #L423164.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4231c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.done` @type ^`boolean` @kind boolean;
  #L4231c4.  if v0 == 0 then goto L4231ca;
  #L4231c8.  return @kind void;
  #L4231ca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L4231ce.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4231d4.  v0:= 1I;
  #L4231d6.  v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4231da.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4231de.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4231e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L4231e8.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4231ee.  goto L4231fe;
  #L4231f0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4231f2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4231f8.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4231fe.  return @kind void;
  #L423200.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L423202.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L423208.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42320e.  return @kind void;
  catch `java.lang.Throwable` @[L4231ca..L4231d4] goto L423200;
  catch `java.lang.Throwable` @[L4231e4..L4231ee] goto L4231f0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L423238.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.done` @type ^`boolean` @kind boolean;
  #L42323c.  if v0 == 0 then goto L423248;
  #L423240.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L423246.  return @kind void;
  #L423248.  v0:= 1I;
  #L42324a.  v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42324e.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L423252.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L423258.  goto L42327e;
  #L42325a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42325c.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L423262.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L423266.  v3:= 2I;
  #L423268.  v3:= new `java.lang.Throwable`[v3];
  #L42326c.  v4:= 0I;
  #L42326e.  v3[v4]:= v6 @kind object;
  #L423272.  v3[v0]:= v1 @kind object;
  #L423276.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42327c.  v6:= v2 @kind object;
  #L42327e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L423282.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L423288.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L42328c.  call `run`(v6) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L423292.  goto L4232a2;
  #L423294.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L423296.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42329c.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4232a2.  return @kind void;
  catch `java.lang.Throwable` @[L42324e..L423258] goto L42325a;
  catch `java.lang.Throwable` @[L423288..L423292] goto L423294;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4232cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.done` @type ^`boolean` @kind boolean;
  #L4232d0.  if v0 == 0 then goto L4232d6;
  #L4232d4.  return @kind void;
  #L4232d6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4232da.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4232e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4232e4.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4232ea.  return @kind void;
  #L4232ec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4232ee.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4232f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4232f8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4232fe.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L423304.  return @kind void;
  catch `java.lang.Throwable` @[L4232d6..L4232e0] goto L4232ec;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$DoOnEachObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423324.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L423328.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42332e.  v0:= temp;
  #L423330.  if v0 == 0 then goto L423342;
  #L423334.  v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L423338.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42333c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L423342.  return @kind void;
}
