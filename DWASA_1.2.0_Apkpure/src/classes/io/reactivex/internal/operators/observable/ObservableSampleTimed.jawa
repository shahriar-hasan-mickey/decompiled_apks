record `io.reactivex.internal.operators.observable.ObservableSampleTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSampleTimed.emitLast` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSampleTimed.period` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableSampleTimed.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableSampleTimed.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleTimed` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed;.<init>:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d8d8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L42d8de.  v0.`io.reactivex.internal.operators.observable.ObservableSampleTimed.period` @type ^`long` := v2 @kind wide;
  #L42d8e2.  v0.`io.reactivex.internal.operators.observable.ObservableSampleTimed.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L42d8e6.  v0.`io.reactivex.internal.operators.observable.ObservableSampleTimed.scheduler` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L42d8ea.  v0.`io.reactivex.internal.operators.observable.ObservableSampleTimed.emitLast` @type ^`boolean` := v6 @kind boolean;
  #L42d8ee.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSampleTimed` v7 @kind this, `io.reactivex.Observer` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42d900.  v1:= new `io.reactivex.observers.SerializedObserver`;
  #L42d904.  call `<init>`(v1, v8) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L42d90a.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.emitLast` @type ^`boolean` @kind boolean;
  #L42d90e.  if v8 == 0 then goto L42d936;
  #L42d912.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42d916.  v6:= new `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast`;
  #L42d91a.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.period` @type ^`long` @kind wide;
  #L42d91e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42d922.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42d926.  v0:= v6 @kind object;
  #L42d928.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L42d92e.  call `subscribe`(v8, v6) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42d934.  goto L42d958;
  #L42d936.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L42d93a.  v6:= new `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedNoLast`;
  #L42d93e.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.period` @type ^`long` @kind wide;
  #L42d942.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42d946.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L42d94a.  v0:= v6 @kind object;
  #L42d94c.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedNoLast;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L42d952.  call `subscribe`(v8, v6) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L42d958.  return @kind void;
}
