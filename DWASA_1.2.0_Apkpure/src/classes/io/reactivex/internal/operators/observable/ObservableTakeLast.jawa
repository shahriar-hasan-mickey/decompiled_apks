record `io.reactivex.internal.operators.observable.ObservableTakeLast` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.AbstractObservableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableTakeLast.count` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeLast` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast;.<init>:(Lio/reactivex/ObservableSource;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4309a8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L4309ae.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLast.count` @type ^`int` := v2;
  #L4309b2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableTakeLast` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4309c4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTakeLast.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4309c8.  v1:= new `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver`;
  #L4309cc.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableTakeLast.count` @type ^`int`;
  #L4309d0.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.<init>:(Lio/reactivex/Observer;I)V` @kind direct;
  #L4309d6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4309dc.  return @kind void;
}
