record `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.child` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.done` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.serial` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther` `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther` v1 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v2 @kind object, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$DelayObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4225c8.  v0.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther` := v1 @kind object;
  #L4225cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4225d2.  v0.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L4225d6.  v0.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.child` @type ^`io.reactivex.Observer` := v3 @kind object;
  #L4225da.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$DelayObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4225ec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.done` @type ^`boolean` @kind boolean;
  #L4225f0.  if v0 == 0 then goto L4225f6;
  #L4225f4.  return @kind void;
  #L4225f6.  v0:= 1I;
  #L4225f8.  v2.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4225fc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther` @kind object;
  #L422600.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther.main` @type ^`io.reactivex.ObservableSource` @kind object;
  #L422604.  v1:= new `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver$OnComplete`;
  #L422608.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$DelayObserver$OnComplete;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$DelayObserver;)V` @kind direct;
  #L42260e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L422614.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$DelayObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422628.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.done` @type ^`boolean` @kind boolean;
  #L42262c.  if v0 == 0 then goto L422638;
  #L422630.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L422636.  return @kind void;
  #L422638.  v0:= 1I;
  #L42263a.  v1.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42263e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.child` @type ^`io.reactivex.Observer` @kind object;
  #L422642.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L422648.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$DelayObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42265c.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$DelayObserver;.onComplete:()V` @kind virtual;
  #L422662.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$DelayObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422674.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L422678.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42267e.  return @kind void;
}
