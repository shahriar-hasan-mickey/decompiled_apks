record `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v0 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.<init>:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eb120.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver.this$0` @type ^`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` := v1 @kind object;
  #L3eb124.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3eb12a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3eb13c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3eb142.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb0f8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L3eb0fe.  v0:= temp @kind object;
  #L3eb100.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3eb104.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3eb10a.  v0:= temp;
  #L3eb10c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb154.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver.this$0` @type ^`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` @kind object;
  #L3eb158.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.innerComplete:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;)V` @kind virtual;
  #L3eb15e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb170.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver.this$0` @type ^`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` @kind object;
  #L3eb174.  call `innerError`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.innerError:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;Ljava/lang/Throwable;)V` @kind virtual;
  #L3eb17a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L3eb18c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3eb192.  return @kind void;
}
