record `io.reactivex.internal.operators.completable.CompletableToFlowable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.completable.CompletableToFlowable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableToFlowable` v0 @kind this, `io.reactivex.CompletableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableToFlowable;.<init>:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ec984.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L3ec98a.  v0.`io.reactivex.internal.operators.completable.CompletableToFlowable.source` @type ^`io.reactivex.CompletableSource` := v1 @kind object;
  #L3ec98e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableToFlowable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableToFlowable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ec9a0.  v0:= new `io.reactivex.internal.observers.SubscriberCompletableObserver`;
  #L3ec9a4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/observers/SubscriberCompletableObserver;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3ec9aa.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableToFlowable.source` @type ^`io.reactivex.CompletableSource` @kind object;
  #L3ec9ae.  call `subscribe`(v2, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3ec9b4.  return @kind void;
}
