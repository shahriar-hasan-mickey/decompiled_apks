record `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableCache` `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` v0 @kind this, `io.reactivex.internal.operators.completable.CompletableCache` v1 @kind object, `io.reactivex.CompletableObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.<init>:(Lio/reactivex/internal/operators/completable/CompletableCache;Lio/reactivex/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e966c.  v0.`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.this$0` @type ^`io.reactivex.internal.operators.completable.CompletableCache` := v1 @kind object;
  #L3e9670.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3e9676.  v0.`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.downstream` @type ^`io.reactivex.CompletableObserver` := v2 @kind object;
  #L3e967a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e968c.  v0:= 0I;
  #L3e968e.  v1:= 1I;
  #L3e9690.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3e9696.  v0:= temp;
  #L3e9698.  if v0 == 0 then goto L3e96a6;
  #L3e969c.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.this$0` @type ^`io.reactivex.internal.operators.completable.CompletableCache` @kind object;
  #L3e96a0.  call `remove`(v0, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.remove:(Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;)V` @kind virtual;
  #L3e96a6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9650.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.get:()Z` @kind virtual;
  #L3e9656.  v0:= temp;
  #L3e9658.  return v0;
}
