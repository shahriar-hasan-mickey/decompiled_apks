record `io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.index` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.sd` @AccessFlag FINAL;
  `io.reactivex.CompletableSource`[] `io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.CompletableSource`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$ConcatInnerObserver;.<init>:(Lio/reactivex/CompletableObserver;[Lio/reactivex/CompletableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e9d34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3e9d3a.  v0.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L3e9d3e.  v0.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.sources` @type ^`io.reactivex.CompletableSource`[] := v2 @kind object;
  #L3e9d42.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L3e9d46.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L3e9d4c.  v0.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L3e9d50.  return @kind void;
}
procedure `void` `next`(`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$ConcatInnerObserver;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3e9d64.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3e9d68.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L3e9d6e.  v0:= temp;
  #L3e9d70.  if v0 == 0 then goto L3e9d76;
  #L3e9d74.  return @kind void;
  #L3e9d76.  call temp:= `getAndIncrement`(v3) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$ConcatInnerObserver;.getAndIncrement:()I` @kind virtual;
  #L3e9d7c.  v0:= temp;
  #L3e9d7e.  if v0 == 0 then goto L3e9d84;
  #L3e9d82.  return @kind void;
  #L3e9d84.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.sources` @type ^`io.reactivex.CompletableSource`[] @kind object;
  #L3e9d88.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3e9d8c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L3e9d92.  v1:= temp;
  #L3e9d94.  if v1 == 0 then goto L3e9d9a;
  #L3e9d98.  return @kind void;
  #L3e9d9a.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.index` @type ^`int`;
  #L3e9d9e.  v2:= v1 + 1;
  #L3e9da2.  v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.index` @type ^`int` := v2;
  #L3e9da6.  v2:= length @variable v0;
  #L3e9da8.  if v1 != v2 then goto L3e9db8;
  #L3e9dac.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9db0.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3e9db6.  return @kind void;
  #L3e9db8.  v1:= v0[v1] @kind object;
  #L3e9dbc.  call `subscribe`(v1, v3) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3e9dc2.  call temp:= `decrementAndGet`(v3) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$ConcatInnerObserver;.decrementAndGet:()I` @kind virtual;
  #L3e9dc8.  v1:= temp;
  #L3e9dca.  if v1 != 0 then goto L3e9d88;
  #L3e9dce.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$ConcatInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L3e9de0.  call `next`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$ConcatInnerObserver;.next:()V` @kind virtual;
  #L3e9de6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$ConcatInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9df8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9dfc.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e9e02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$ConcatInnerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9e14.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3e9e18.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3e9e1e.  return @kind void;
}
