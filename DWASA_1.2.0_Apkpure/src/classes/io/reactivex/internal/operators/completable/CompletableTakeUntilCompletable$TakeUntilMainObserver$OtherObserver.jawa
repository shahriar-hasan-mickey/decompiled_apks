record `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` v0 @kind this, `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ec3ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ec3b2.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` := v1 @kind object;
  #L3ec3b6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec3c8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` @kind object;
  #L3ec3cc.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.innerComplete:()V` @kind virtual;
  #L3ec3d2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec3e4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` @kind object;
  #L3ec3e8.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ec3ee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L3ec400.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3ec406.  return @kind void;
}
