record `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable.other` @AccessFlag FINAL;
  `io.reactivex.Completable` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable` v0 @kind this, `io.reactivex.Completable` v1 @kind object, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable;.<init>:(Lio/reactivex/Completable;Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ec5b8.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L3ec5be.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable.source` @type ^`io.reactivex.Completable` := v1 @kind object;
  #L3ec5c2.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable.other` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L3ec5c6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3ec5d8.  v0:= new `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver`;
  #L3ec5dc.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.<init>:(Lio/reactivex/CompletableObserver;)V` @kind direct;
  #L3ec5e2.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3ec5e8.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable.other` @type ^`io.reactivex.CompletableSource` @kind object;
  #L3ec5ec.  v1:= v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` @kind object;
  #L3ec5f0.  call `subscribe`(v3, v1) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3ec5f6.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable.source` @type ^`io.reactivex.Completable` @kind object;
  #L3ec5fa.  call `subscribe`(v3, v0) @signature `Lio/reactivex/Completable;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind virtual;
  #L3ec600.  return @kind void;
}
