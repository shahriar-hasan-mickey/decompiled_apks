record `io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.<init>:(Lio/reactivex/CompletableObserver;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e9e7c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3e9e82.  v0.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L3e9e86.  v0.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sources` @type ^`java.util.Iterator` := v2 @kind object;
  #L3e9e8a.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L3e9e8e.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L3e9e94.  v0.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L3e9e98.  return @kind void;
}
procedure `void` `next`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3e9eac.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3e9eb0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L3e9eb6.  v0:= temp;
  #L3e9eb8.  if v0 == 0 then goto L3e9ebe;
  #L3e9ebc.  return @kind void;
  #L3e9ebe.  call temp:= `getAndIncrement`(v3) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.getAndIncrement:()I` @kind virtual;
  #L3e9ec4.  v0:= temp;
  #L3e9ec6.  if v0 == 0 then goto L3e9ecc;
  #L3e9eca.  return @kind void;
  #L3e9ecc.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sources` @type ^`java.util.Iterator` @kind object;
  #L3e9ed0.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3e9ed4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L3e9eda.  v1:= temp;
  #L3e9edc.  if v1 == 0 then goto L3e9ee2;
  #L3e9ee0.  return @kind void;
  #L3e9ee2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e9ee8.  v1:= temp;
  #L3e9eea.  if v1 != 0 then goto L3e9efa;
  #L3e9eee.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9ef2.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3e9ef8.  return @kind void;
  #L3e9efa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e9f00.  v1:= temp @kind object;
  #L3e9f02.  v2:= "The CompletableSource returned is null" @kind object;
  #L3e9f06.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3e9f0c.  v1:= temp @kind object;
  #L3e9f0e.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L3e9f12.  call `subscribe`(v1, v3) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3e9f18.  call temp:= `decrementAndGet`(v3) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.decrementAndGet:()I` @kind virtual;
  #L3e9f1e.  v1:= temp;
  #L3e9f20.  if v1 != 0 then goto L3e9ed0;
  #L3e9f24.  return @kind void;
  #L3e9f26.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e9f28.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3e9f2e.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9f32.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e9f38.  return @kind void;
  #L3e9f3a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e9f3c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3e9f42.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9f46.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e9f4c.  return @kind void;
  catch `java.lang.Throwable` @[L3e9ee2..L3e9eea] goto L3e9f3a;
  catch `java.lang.Throwable` @[L3e9efa..L3e9f12] goto L3e9f26;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L3e9f78.  call `next`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.next:()V` @kind virtual;
  #L3e9f7e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9f90.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9f94.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e9f9a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9fac.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3e9fb0.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3e9fb6.  return @kind void;
}
