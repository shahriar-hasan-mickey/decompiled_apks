record `io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError` @kind class @AccessFlag FINAL extends `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.downstream` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.completable.CompletableOnErrorComplete` `io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError` v0 @kind this, `io.reactivex.internal.operators.completable.CompletableOnErrorComplete` v1 @kind object, `io.reactivex.CompletableObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableOnErrorComplete$OnError;.<init>:(Lio/reactivex/internal/operators/completable/CompletableOnErrorComplete;Lio/reactivex/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ebd64.  v0.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.this$0` @type ^`io.reactivex.internal.operators.completable.CompletableOnErrorComplete` := v1 @kind object;
  #L3ebd68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ebd6e.  v0.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.downstream` @type ^`io.reactivex.CompletableObserver` := v2 @kind object;
  #L3ebd72.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableOnErrorComplete$OnError;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ebd84.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ebd88.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3ebd8e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableOnErrorComplete$OnError;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ebda0.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.this$0` @type ^`io.reactivex.internal.operators.completable.CompletableOnErrorComplete` @kind object;
  #L3ebda4.  v0:= v0.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3ebda8.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L3ebdae.  v0:= temp;
  #L3ebdb0.  if v0 == 0 then goto L3ebdc0;
  #L3ebdb4.  v6:= v5.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ebdb8.  call `onComplete`(v6) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3ebdbe.  goto L3ebdca;
  #L3ebdc0.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ebdc4.  call `onError`(v0, v6) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ebdca.  return @kind void;
  #L3ebdcc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ebdce.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ebdd4.  v1:= v5.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ebdd8.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L3ebddc.  v3:= 2I;
  #L3ebdde.  v3:= new `java.lang.Throwable`[v3];
  #L3ebde2.  v4:= 0I;
  #L3ebde4.  v3[v4]:= v6 @kind object;
  #L3ebde8.  v6:= 1I;
  #L3ebdea.  v3[v6]:= v0 @kind object;
  #L3ebdee.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L3ebdf4.  call `onError`(v1, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ebdfa.  return @kind void;
  catch `java.lang.Throwable` @[L3ebda0..L3ebdb0] goto L3ebdcc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableOnErrorComplete$OnError;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ebe18.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableOnErrorComplete$OnError.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ebe1c.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3ebe22.  return @kind void;
}
