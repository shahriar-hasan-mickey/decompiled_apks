record `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.delayErrors` @AccessFlag FINAL;
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.<init>:(Lio/reactivex/CompletableObserver;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eb1c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3eb1ca.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L3eb1ce.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @type ^`int` := v2;
  #L3eb1d2.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L3eb1d6.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L3eb1da.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L3eb1e0.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L3eb1e4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3eb1e8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3eb1ee.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L3eb1f2.  v1:= 1I;
  #L3eb1f4.  call `lazySet`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.lazySet:(I)V` @kind virtual;
  #L3eb1fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb20c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eb210.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3eb216.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb21a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3eb220.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.innerComplete:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3eb234.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb238.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3eb23e.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3eb244.  v3:= temp;
  #L3eb246.  if v3 != 0 then goto L3eb276;
  #L3eb24a.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb24e.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3eb254.  v3:= temp @kind object;
  #L3eb256.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L3eb25a.  if v3 == 0 then goto L3eb26a;
  #L3eb25e.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb262.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eb268.  goto L3eb292;
  #L3eb26a.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb26e.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3eb274.  goto L3eb292;
  #L3eb276.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @type ^`int`;
  #L3eb27a.  v0:= 2147483647I;
  #L3eb280.  if v3 == v0 then goto L3eb292;
  #L3eb284.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eb288.  v0:= 1L;
  #L3eb28c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eb292.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.innerError:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3eb2a4.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb2a8.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3eb2ae.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3eb2b2.  if v3 != 0 then goto L3eb308;
  #L3eb2b6.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eb2ba.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3eb2c0.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb2c4.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3eb2ca.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb2ce.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3eb2d4.  v3:= temp;
  #L3eb2d6.  if v3 == 0 then goto L3eb300;
  #L3eb2da.  v3:= 0I;
  #L3eb2dc.  call temp:= `getAndSet`(v2, v3) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.getAndSet:(I)I` @kind virtual;
  #L3eb2e2.  v3:= temp;
  #L3eb2e4.  if v3 <= 0 then goto L3eb360;
  #L3eb2e8.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb2ec.  v4:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb2f0.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3eb2f6.  v4:= temp @kind object;
  #L3eb2f8.  call `onError`(v3, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eb2fe.  goto L3eb360;
  #L3eb300.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eb306.  goto L3eb360;
  #L3eb308.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb30c.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3eb312.  v3:= temp;
  #L3eb314.  if v3 == 0 then goto L3eb35a;
  #L3eb318.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3eb31e.  v3:= temp;
  #L3eb320.  if v3 != 0 then goto L3eb33c;
  #L3eb324.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb328.  v4:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb32c.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3eb332.  v4:= temp @kind object;
  #L3eb334.  call `onError`(v3, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eb33a.  goto L3eb360;
  #L3eb33c.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @type ^`int`;
  #L3eb340.  v4:= 2147483647I;
  #L3eb346.  if v3 == v4 then goto L3eb360;
  #L3eb34a.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eb34e.  v0:= 1L;
  #L3eb352.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eb358.  goto L3eb360;
  #L3eb35a.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eb360.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb1a4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb1a8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L3eb1ae.  v0:= temp;
  #L3eb1b0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eb374.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3eb37a.  v0:= temp;
  #L3eb37c.  if v0 != 0 then goto L3eb3b6;
  #L3eb380.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb384.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3eb38a.  v0:= temp @kind object;
  #L3eb38c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L3eb390.  if v0 == 0 then goto L3eb3ac;
  #L3eb394.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb398.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb39c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3eb3a2.  v1:= temp @kind object;
  #L3eb3a4.  call `onError`(v0, v1) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eb3aa.  goto L3eb3b6;
  #L3eb3ac.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb3b0.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3eb3b6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb3c8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3eb3cc.  if v0 != 0 then goto L3eb418;
  #L3eb3d0.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb3d4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3eb3da.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb3de.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3eb3e4.  v0:= temp;
  #L3eb3e6.  if v0 == 0 then goto L3eb410;
  #L3eb3ea.  v2:= 0I;
  #L3eb3ec.  call temp:= `getAndSet`(v1, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.getAndSet:(I)I` @kind virtual;
  #L3eb3f2.  v2:= temp;
  #L3eb3f4.  if v2 <= 0 then goto L3eb452;
  #L3eb3f8.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb3fc.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb400.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3eb406.  v0:= temp @kind object;
  #L3eb408.  call `onError`(v2, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eb40e.  goto L3eb452;
  #L3eb410.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eb416.  goto L3eb452;
  #L3eb418.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb41c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3eb422.  v0:= temp;
  #L3eb424.  if v0 == 0 then goto L3eb44c;
  #L3eb428.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3eb42e.  v2:= temp;
  #L3eb430.  if v2 != 0 then goto L3eb452;
  #L3eb434.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb438.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3eb43c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3eb442.  v0:= temp @kind object;
  #L3eb444.  call `onError`(v2, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eb44a.  goto L3eb452;
  #L3eb44c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eb452.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this, `io.reactivex.CompletableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onNext:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eb464.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3eb46a.  v0:= new `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver`;
  #L3eb46e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.<init>:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;)V` @kind direct;
  #L3eb474.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb478.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3eb47e.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3eb484.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3eb498.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L3eb49c.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onNext:(Lio/reactivex/CompletableSource;)V` @kind virtual;
  #L3eb4a2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eb4b4.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eb4b8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3eb4be.  v0:= temp;
  #L3eb4c0.  if v0 == 0 then goto L3eb4fa;
  #L3eb4c4.  v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3eb4c8.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb4cc.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3eb4d2.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @type ^`int`;
  #L3eb4d6.  v1:= 2147483647I;
  #L3eb4dc.  if v0 != v1 then goto L3eb4f2;
  #L3eb4e0.  v0:= 9223372036854775807L;
  #L3eb4ea.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eb4f0.  goto L3eb4fa;
  #L3eb4f2.  v0:= (`long`) v0 @kind i2l;
  #L3eb4f4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eb4fa.  return @kind void;
}
