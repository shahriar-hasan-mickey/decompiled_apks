record `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @AccessFlag FINAL;
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.<init>:(Lio/reactivex/CompletableObserver;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ecc80.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3ecc86.  v0.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L3ecc8a.  v0.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L3ecc8e.  v0.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` := v4 @kind boolean;
  #L3ecc92.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecca4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3ecca8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3eccae.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3eccb2.  v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L3eccb6.  call `disposeResourceAfter`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L3eccbc.  return @kind void;
}
procedure `void` `disposeResourceAfter`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.disposeResourceAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3eccd0.  call temp:= `getAndSet`(v2, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3eccd6.  v0:= temp @kind object;
  #L3eccd8.  if v0 == v2 then goto L3eccf6;
  #L3eccdc.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3ecce0.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3ecce6.  goto L3eccf6;
  #L3ecce8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eccea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3eccf0.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eccf6.  return @kind void;
  catch `java.lang.Throwable` @[L3eccdc..L3ecce6] goto L3ecce8;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecc60.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3ecc64.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L3ecc6a.  v0:= temp;
  #L3ecc6c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecd14.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3ecd18.  v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L3ecd1c.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L3ecd20.  if v0 == 0 then goto L3ecd50;
  #L3ecd24.  call temp:= `getAndSet`(v2, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ecd2a.  v0:= temp @kind object;
  #L3ecd2c.  if v0 == v2 then goto L3ecd4e;
  #L3ecd30.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3ecd34.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3ecd3a.  goto L3ecd50;
  #L3ecd3c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecd3e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ecd44.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ecd48.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ecd4e.  return @kind void;
  #L3ecd50.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ecd54.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3ecd5a.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L3ecd5e.  if v0 != 0 then goto L3ecd68;
  #L3ecd62.  call `disposeResourceAfter`(v2) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L3ecd68.  return @kind void;
  catch `java.lang.Throwable` @[L3ecd30..L3ecd3a] goto L3ecd3c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ecd88.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3ecd8c.  v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L3ecd90.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L3ecd94.  if v0 == 0 then goto L3ecdda;
  #L3ecd98.  call temp:= `getAndSet`(v4, v4) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ecd9e.  v0:= temp @kind object;
  #L3ecda0.  if v0 == v4 then goto L3ecdd8;
  #L3ecda4.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3ecda8.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3ecdae.  goto L3ecdda;
  #L3ecdb0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecdb2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ecdb8.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L3ecdbc.  v2:= 2I;
  #L3ecdbe.  v2:= new `java.lang.Throwable`[v2];
  #L3ecdc2.  v3:= 0I;
  #L3ecdc4.  v2[v3]:= v5 @kind object;
  #L3ecdc8.  v5:= 1I;
  #L3ecdca.  v2[v5]:= v0 @kind object;
  #L3ecdce.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L3ecdd4.  v5:= v1 @kind object;
  #L3ecdd6.  goto L3ecdda;
  #L3ecdd8.  return @kind void;
  #L3ecdda.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ecdde.  call `onError`(v0, v5) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ecde4.  v5:= v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L3ecde8.  if v5 != 0 then goto L3ecdf2;
  #L3ecdec.  call `disposeResourceAfter`(v4) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L3ecdf2.  return @kind void;
  catch `java.lang.Throwable` @[L3ecda4..L3ecdae] goto L3ecdb0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ece10.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3ece14.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3ece1a.  v0:= temp;
  #L3ece1c.  if v0 == 0 then goto L3ece2e;
  #L3ece20.  v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L3ece24.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ece28.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3ece2e.  return @kind void;
}
