record `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.active` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.done` @AccessFlag VOLATILE;
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.limit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.<init>:(Lio/reactivex/CompletableObserver;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e99bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3e99c2.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L3e99c6.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @type ^`int` := v2;
  #L3e99ca.  v1:= new `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver`;
  #L3e99ce.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver;.<init>:(Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;)V` @kind direct;
  #L3e99d4.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` := v1 @kind object;
  #L3e99d8.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3e99dc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3e99e2.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L3e99e6.  v1:= v2 ^> 2;
  #L3e99ea.  v2:= v2 - v1 @kind int;
  #L3e99ec.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.limit` @type ^`int` := v2;
  #L3e99f0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9a04.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3e9a08.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3e9a0e.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` @kind object;
  #L3e9a12.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3e9a18.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e9a2c.  call temp:= `getAndIncrement`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3e9a32.  v0:= temp;
  #L3e9a34.  if v0 == 0 then goto L3e9a3a;
  #L3e9a38.  return @kind void;
  #L3e9a3a.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.isDisposed:()Z` @kind virtual;
  #L3e9a40.  v0:= temp;
  #L3e9a42.  if v0 == 0 then goto L3e9a48;
  #L3e9a46.  return @kind void;
  #L3e9a48.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.active` @type ^`boolean` @kind boolean;
  #L3e9a4c.  if v0 != 0 then goto L3e9ac0;
  #L3e9a50.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.done` @type ^`boolean` @kind boolean;
  #L3e9a54.  v1:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3e9a58.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3e9a5e.  v1:= temp @kind object;
  #L3e9a60.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L3e9a64.  v2:= 0I;
  #L3e9a66.  v3:= 1I;
  #L3e9a68.  if v1 != 0 then goto L3e9a70;
  #L3e9a6c.  v4:= 1I;
  #L3e9a6e.  goto L3e9a72;
  #L3e9a70.  v4:= 0I;
  #L3e9a72.  if v0 == 0 then goto L3e9a96;
  #L3e9a76.  if v4 == 0 then goto L3e9a96;
  #L3e9a7a.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3e9a7e.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3e9a84.  v0:= temp;
  #L3e9a86.  if v0 == 0 then goto L3e9a94;
  #L3e9a8a.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9a8e.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3e9a94.  return @kind void;
  #L3e9a96.  if v4 != 0 then goto L3e9ac0;
  #L3e9a9a.  v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.active` @type ^`boolean` := v3 @kind boolean;
  #L3e9a9e.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` @kind object;
  #L3e9aa2.  call `subscribe`(v1, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3e9aa8.  call `request`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.request:()V` @kind virtual;
  #L3e9aae.  goto L3e9ac0;
  #L3e9ab0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e9ab2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3e9ab8.  call `innerError`(v5, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3e9abe.  return @kind void;
  #L3e9ac0.  call temp:= `decrementAndGet`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3e9ac6.  v0:= temp;
  #L3e9ac8.  if v0 != 0 then goto L3e9a3a;
  #L3e9acc.  return @kind void;
  catch `java.lang.Throwable` @[L3e9a54..L3e9a64] goto L3e9ab0;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L3e9aec.  v0:= 0I;
  #L3e9aee.  v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.active` @type ^`boolean` := v0 @kind boolean;
  #L3e9af2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @kind virtual;
  #L3e9af8.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3e9b0c.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3e9b10.  v1:= 0I;
  #L3e9b12.  v2:= 1I;
  #L3e9b14.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3e9b1a.  v0:= temp;
  #L3e9b1c.  if v0 == 0 then goto L3e9b36;
  #L3e9b20.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3e9b24.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3e9b2a.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9b2e.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e9b34.  goto L3e9b3c;
  #L3e9b36.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3e9b3c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9990.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` @kind object;
  #L3e9994.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e999a.  v0:= temp @kind object;
  #L3e999c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3e99a0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3e99a6.  v0:= temp;
  #L3e99a8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9b50.  v0:= 1I;
  #L3e9b52.  v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3e9b56.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @kind virtual;
  #L3e9b5c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e9b70.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3e9b74.  v1:= 0I;
  #L3e9b76.  v2:= 1I;
  #L3e9b78.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3e9b7e.  v0:= temp;
  #L3e9b80.  if v0 == 0 then goto L3e9b9a;
  #L3e9b84.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` @kind object;
  #L3e9b88.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3e9b8e.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9b92.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e9b98.  goto L3e9ba0;
  #L3e9b9a.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3e9ba0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onNext:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9bb4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @type ^`int`;
  #L3e9bb8.  if v0 != 0 then goto L3e9bde;
  #L3e9bbc.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3e9bc0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3e9bc6.  v2:= temp;
  #L3e9bc8.  if v2 != 0 then goto L3e9bde;
  #L3e9bcc.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3e9bd0.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L3e9bd6.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3e9bdc.  return @kind void;
  #L3e9bde.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @kind virtual;
  #L3e9be4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3e9bf8.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L3e9bfc.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onNext:(Lio/reactivex/CompletableSource;)V` @kind virtual;
  #L3e9c02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v6 @kind this, `org.reactivestreams.Subscription` v7 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3e9c14.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3e9c18.  call temp:= `validate`(v0, v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3e9c1e.  v0:= temp;
  #L3e9c20.  if v0 == 0 then goto L3e9cde;
  #L3e9c24.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v7 @kind object;
  #L3e9c28.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @type ^`int`;
  #L3e9c2c.  v1:= 2147483647I;
  #L3e9c32.  if v0 != v1 then goto L3e9c42;
  #L3e9c36.  v2:= 9223372036854775807L;
  #L3e9c40.  goto L3e9c44;
  #L3e9c42.  v2:= (`long`) v0 @kind i2l;
  #L3e9c44.  v0:= instanceof @variable v7 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L3e9c48.  if v0 == 0 then goto L3e9ca0;
  #L3e9c4c.  v0:= v7 @kind object;
  #L3e9c4e.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L3e9c52.  v4:= 3I;
  #L3e9c54.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L3e9c5a.  v4:= temp;
  #L3e9c5c.  v5:= 1I;
  #L3e9c5e.  if v4 != v5 then goto L3e9c80;
  #L3e9c62.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @type ^`int` := v4;
  #L3e9c66.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3e9c6a.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.done` @type ^`boolean` := v5 @kind boolean;
  #L3e9c6e.  v7:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9c72.  call `onSubscribe`(v7, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3e9c78.  call `drain`(v6) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @kind virtual;
  #L3e9c7e.  return @kind void;
  #L3e9c80.  v5:= 2I;
  #L3e9c82.  if v4 != v5 then goto L3e9ca0;
  #L3e9c86.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @type ^`int` := v4;
  #L3e9c8a.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3e9c8e.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9c92.  call `onSubscribe`(v0, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3e9c98.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3e9c9e.  return @kind void;
  #L3e9ca0.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @type ^`int`;
  #L3e9ca4.  if v0 != v1 then goto L3e9cc0;
  #L3e9ca8.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3e9cac.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3e9cb2.  v1:= temp;
  #L3e9cb4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3e9cba.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3e9cbe.  goto L3e9cce;
  #L3e9cc0.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3e9cc4.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3e9cca.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v1 @kind object;
  #L3e9cce.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e9cd2.  call `onSubscribe`(v0, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3e9cd8.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3e9cde.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.request:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e9cf0.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @type ^`int`;
  #L3e9cf4.  v1:= 1I;
  #L3e9cf6.  if v0 == v1 then goto L3e9d20;
  #L3e9cfa.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.consumed` @type ^`int`;
  #L3e9cfe.  v0:= v0 + v1 @kind int;
  #L3e9d00.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.limit` @type ^`int`;
  #L3e9d04.  if v0 != v1 then goto L3e9d1c;
  #L3e9d08.  v1:= 0I;
  #L3e9d0a.  v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.consumed` @type ^`int` := v1;
  #L3e9d0e.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3e9d12.  v2:= (`long`) v0 @kind i2l;
  #L3e9d14.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3e9d1a.  goto L3e9d20;
  #L3e9d1c.  v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.consumed` @type ^`int` := v0;
  #L3e9d20.  return @kind void;
}
