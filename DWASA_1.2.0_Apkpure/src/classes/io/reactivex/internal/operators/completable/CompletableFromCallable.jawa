record `io.reactivex.internal.operators.completable.CompletableFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.completable.CompletableFromCallable.callable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3eab90.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L3eab96.  v0.`io.reactivex.internal.operators.completable.CompletableFromCallable.callable` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L3eab9a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableFromCallable` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableFromCallable;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3eabac.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L3eabb2.  v0:= temp @kind object;
  #L3eabb4.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3eabba.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableFromCallable.callable` @type ^`java.util.concurrent.Callable` @kind object;
  #L3eabbe.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3eabc4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L3eabca.  v0:= temp;
  #L3eabcc.  if v0 != 0 then goto L3eabd6;
  #L3eabd0.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3eabd6.  return @kind void;
  #L3eabd8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eabda.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3eabe0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L3eabe6.  v0:= temp;
  #L3eabe8.  if v0 != 0 then goto L3eabf4;
  #L3eabec.  call `onError`(v3, v1) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eabf2.  goto L3eabfa;
  #L3eabf4.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eabfa.  return @kind void;
  catch `java.lang.Throwable` @[L3eabba..L3eabc4] goto L3eabd8;
}
