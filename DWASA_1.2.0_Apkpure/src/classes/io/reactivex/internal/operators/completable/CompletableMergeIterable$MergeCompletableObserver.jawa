record `io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.set` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.disposables.CompositeDisposable` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/disposables/CompositeDisposable;Ljava/util/concurrent/atomic/AtomicInteger;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eb978.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3eb97e.  v0.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L3eb982.  v0.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L3eb986.  v0.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v3 @kind object;
  #L3eb98a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eb99c.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3eb9a0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3eb9a6.  v0:= temp;
  #L3eb9a8.  if v0 != 0 then goto L3eb9c6;
  #L3eb9ac.  v0:= 0I;
  #L3eb9ae.  v1:= 1I;
  #L3eb9b0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3eb9b6.  v0:= temp;
  #L3eb9b8.  if v0 == 0 then goto L3eb9c6;
  #L3eb9bc.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb9c0.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3eb9c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eb9d8.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb9dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3eb9e2.  v0:= 0I;
  #L3eb9e4.  v1:= 1I;
  #L3eb9e6.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3eb9ec.  v0:= temp;
  #L3eb9ee.  if v0 == 0 then goto L3eb9fe;
  #L3eb9f2.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb9f6.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eb9fc.  goto L3eba04;
  #L3eb9fe.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eba04.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eba18.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eba1c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3eba22.  return @kind void;
}
