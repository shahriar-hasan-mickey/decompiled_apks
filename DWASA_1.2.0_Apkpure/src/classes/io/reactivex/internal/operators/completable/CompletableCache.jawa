record `io.reactivex.internal.operators.completable.CompletableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `java.lang.Throwable` `io.reactivex.internal.operators.completable.CompletableCache.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.completable.CompletableCache.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableCache.once` @AccessFlag FINAL;
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.completable.CompletableCache.source` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] `@@io.reactivex.internal.operators.completable.CompletableCache.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] `@@io.reactivex.internal.operators.completable.CompletableCache.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e970c.  v0:= 0I;
  #L3e970e.  v1:= new `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[v0];
  #L3e9712.  `@@io.reactivex.internal.operators.completable.CompletableCache.EMPTY` @type ^`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] := v1 @kind object;
  #L3e9716.  v0:= new `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[v0];
  #L3e971a.  `@@io.reactivex.internal.operators.completable.CompletableCache.TERMINATED` @type ^`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] := v0 @kind object;
  #L3e971e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableCache` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.<init>:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e9730.  call `<init>`(v1) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L3e9736.  v1.`io.reactivex.internal.operators.completable.CompletableCache.source` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L3e973a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3e973e.  v0:= `@@io.reactivex.internal.operators.completable.CompletableCache.EMPTY` @type ^`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] @kind object;
  #L3e9742.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3e9748.  v1.`io.reactivex.internal.operators.completable.CompletableCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3e974c.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3e9750.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3e9756.  v1.`io.reactivex.internal.operators.completable.CompletableCache.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L3e975a.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.completable.CompletableCache` v4 @kind this, `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` v5 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.add:(Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e96b8.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e96bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e96c2.  v0:= temp @kind object;
  #L3e96c4.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[]) v0 @kind object;
  #L3e96c8.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.TERMINATED` @type ^`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] @kind object;
  #L3e96cc.  v2:= 0I;
  #L3e96ce.  if v0 != v1 then goto L3e96d4;
  #L3e96d2.  return v2;
  #L3e96d4.  v1:= length @variable v0;
  #L3e96d6.  v3:= v1 + 1;
  #L3e96da.  v3:= new `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[v3];
  #L3e96de.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e96e4.  v3[v1]:= v5 @kind object;
  #L3e96e8.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e96ec.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3e96f2.  v0:= temp;
  #L3e96f4.  if v0 == 0 then goto L3e96b8;
  #L3e96f8.  v5:= 1I;
  #L3e96fa.  return v5;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableCache` v5 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e976c.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e9770.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.TERMINATED` @type ^`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] @kind object;
  #L3e9774.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e977a.  v0:= temp @kind object;
  #L3e977c.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[]) v0 @kind object;
  #L3e9780.  v1:= length @variable v0;
  #L3e9782.  v2:= 0I;
  #L3e9784.  if v2 >= v1 then goto L3e97a8;
  #L3e9788.  v3:= v0[v2] @kind object;
  #L3e978c.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.get:()Z` @kind virtual;
  #L3e9792.  v4:= temp;
  #L3e9794.  if v4 != 0 then goto L3e97a2;
  #L3e9798.  v3:= v3.`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e979c.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3e97a2.  v2:= v2 + 1;
  #L3e97a6.  goto L3e9784;
  #L3e97a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e97bc.  v5.`io.reactivex.internal.operators.completable.CompletableCache.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L3e97c0.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e97c4.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.TERMINATED` @type ^`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] @kind object;
  #L3e97c8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e97ce.  v0:= temp @kind object;
  #L3e97d0.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[]) v0 @kind object;
  #L3e97d4.  v1:= length @variable v0;
  #L3e97d6.  v2:= 0I;
  #L3e97d8.  if v2 >= v1 then goto L3e97fc;
  #L3e97dc.  v3:= v0[v2] @kind object;
  #L3e97e0.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.get:()Z` @kind virtual;
  #L3e97e6.  v4:= temp;
  #L3e97e8.  if v4 != 0 then goto L3e97f6;
  #L3e97ec.  v3:= v3.`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3e97f0.  call `onError`(v3, v6) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e97f6.  v2:= v2 + 1;
  #L3e97fa.  goto L3e97d8;
  #L3e97fc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L3e9810.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.completable.CompletableCache` v6 @kind this, `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` v7 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.remove:(Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3e9824.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e9828.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3e982e.  v0:= temp @kind object;
  #L3e9830.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[]) v0 @kind object;
  #L3e9834.  v1:= length @variable v0;
  #L3e9836.  if v1 != 0 then goto L3e983c;
  #L3e983a.  return @kind void;
  #L3e983c.  v2:= -1I;
  #L3e983e.  v3:= 0I;
  #L3e9840.  v4:= 0I;
  #L3e9842.  if v4 >= v1 then goto L3e9858;
  #L3e9846.  v5:= v0[v4] @kind object;
  #L3e984a.  if v5 != v7 then goto L3e9852;
  #L3e984e.  v2:= v4;
  #L3e9850.  goto L3e9858;
  #L3e9852.  v4:= v4 + 1;
  #L3e9856.  goto L3e9842;
  #L3e9858.  if v2 >= 0 then goto L3e985e;
  #L3e985c.  return @kind void;
  #L3e985e.  v4:= 1I;
  #L3e9860.  if v1 != v4 then goto L3e986a;
  #L3e9864.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.EMPTY` @type ^`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[] @kind object;
  #L3e9868.  goto L3e9888;
  #L3e986a.  v5:= v1 + -1;
  #L3e986e.  v5:= new `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`[v5];
  #L3e9872.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e9878.  v3:= v2 + 1;
  #L3e987c.  v1:= v1 - v2 @kind int;
  #L3e987e.  v1:= v1 - v4 @kind int;
  #L3e9880.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e9886.  v1:= v5 @kind object;
  #L3e9888.  v2:= v6.`io.reactivex.internal.operators.completable.CompletableCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3e988c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3e9892.  v0:= temp;
  #L3e9894.  if v0 == 0 then goto L3e9824;
  #L3e9898.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableCache` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3e98ac.  v0:= new `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache`;
  #L3e98b0.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.<init>:(Lio/reactivex/internal/operators/completable/CompletableCache;Lio/reactivex/CompletableObserver;)V` @kind direct;
  #L3e98b6.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3e98bc.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.add:(Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;)Z` @kind virtual;
  #L3e98c2.  v1:= temp;
  #L3e98c4.  if v1 == 0 then goto L3e98fa;
  #L3e98c8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.isDisposed:()Z` @kind virtual;
  #L3e98ce.  v3:= temp;
  #L3e98d0.  if v3 == 0 then goto L3e98da;
  #L3e98d4.  call `remove`(v2, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.remove:(Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;)V` @kind virtual;
  #L3e98da.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableCache.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3e98de.  v0:= 0I;
  #L3e98e0.  v1:= 1I;
  #L3e98e2.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3e98e8.  v3:= temp;
  #L3e98ea.  if v3 == 0 then goto L3e9910;
  #L3e98ee.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableCache.source` @type ^`io.reactivex.CompletableSource` @kind object;
  #L3e98f2.  call `subscribe`(v3, v2) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3e98f8.  goto L3e9910;
  #L3e98fa.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableCache.error` @type ^`java.lang.Throwable` @kind object;
  #L3e98fe.  if v0 == 0 then goto L3e990a;
  #L3e9902.  call `onError`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3e9908.  goto L3e9910;
  #L3e990a.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3e9910.  return @kind void;
}
