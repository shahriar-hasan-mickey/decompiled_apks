record `io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.once` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.set` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v2 @kind object, `io.reactivex.disposables.CompositeDisposable` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.<init>:(Lio/reactivex/CompletableObserver;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/disposables/CompositeDisposable;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eb50c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3eb512.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L3eb516.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L3eb51a.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v3 @kind object;
  #L3eb51e.  call `lazySet`(v0, v4) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.lazySet:(I)V` @kind virtual;
  #L3eb524.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eb538.  call temp:= `decrementAndGet`(v3) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.decrementAndGet:()I` @kind virtual;
  #L3eb53e.  v0:= temp;
  #L3eb540.  if v0 != 0 then goto L3eb562;
  #L3eb544.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3eb548.  v1:= 0I;
  #L3eb54a.  v2:= 1I;
  #L3eb54c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3eb552.  v0:= temp;
  #L3eb554.  if v0 == 0 then goto L3eb562;
  #L3eb558.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb55c.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3eb562.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eb574.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb578.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3eb57e.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3eb582.  v1:= 0I;
  #L3eb584.  v2:= 1I;
  #L3eb586.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3eb58c.  v0:= temp;
  #L3eb58e.  if v0 == 0 then goto L3eb59e;
  #L3eb592.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3eb596.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eb59c.  goto L3eb5a4;
  #L3eb59e.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eb5a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb5b8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3eb5bc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3eb5c2.  return @kind void;
}
