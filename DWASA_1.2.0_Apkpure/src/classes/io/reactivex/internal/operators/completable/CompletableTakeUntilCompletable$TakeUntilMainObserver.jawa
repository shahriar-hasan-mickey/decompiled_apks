record `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.<init>:(Lio/reactivex/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ec438.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ec43e.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L3ec442.  v1:= new `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver`;
  #L3ec446.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;)V` @kind direct;
  #L3ec44c.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` := v1 @kind object;
  #L3ec450.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3ec454.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3ec45a.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L3ec45e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ec470.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3ec474.  v1:= 0I;
  #L3ec476.  v2:= 1I;
  #L3ec478.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3ec47e.  v0:= temp;
  #L3ec480.  if v0 == 0 then goto L3ec494;
  #L3ec484.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ec48a.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` @kind object;
  #L3ec48e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ec494.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3ec4a8.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3ec4ac.  v1:= 0I;
  #L3ec4ae.  v2:= 1I;
  #L3ec4b0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3ec4b6.  v0:= temp;
  #L3ec4b8.  if v0 == 0 then goto L3ec4cc;
  #L3ec4bc.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ec4c2.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ec4c6.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3ec4cc.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3ec4e0.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3ec4e4.  v1:= 0I;
  #L3ec4e6.  v2:= 1I;
  #L3ec4e8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3ec4ee.  v0:= temp;
  #L3ec4f0.  if v0 == 0 then goto L3ec506;
  #L3ec4f4.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ec4fa.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ec4fe.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ec504.  goto L3ec50c;
  #L3ec506.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ec50c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec418.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3ec41c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3ec422.  v0:= temp;
  #L3ec424.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ec520.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3ec524.  v1:= 0I;
  #L3ec526.  v2:= 1I;
  #L3ec528.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3ec52e.  v0:= temp;
  #L3ec530.  if v0 == 0 then goto L3ec548;
  #L3ec534.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` @kind object;
  #L3ec538.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ec53e.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ec542.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L3ec548.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ec55c.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3ec560.  v1:= 0I;
  #L3ec562.  v2:= 1I;
  #L3ec564.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3ec56a.  v0:= temp;
  #L3ec56c.  if v0 == 0 then goto L3ec586;
  #L3ec570.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` @kind object;
  #L3ec574.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ec57a.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L3ec57e.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ec584.  goto L3ec58c;
  #L3ec586.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ec58c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L3ec5a0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3ec5a6.  return @kind void;
}
