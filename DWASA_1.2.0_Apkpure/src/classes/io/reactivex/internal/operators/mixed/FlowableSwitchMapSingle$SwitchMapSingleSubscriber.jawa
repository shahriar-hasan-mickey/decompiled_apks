record `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L419670.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`;
  #L419674.  v1:= 0I;
  #L419676.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;)V` @kind direct;
  #L41967c.  `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` := v0 @kind object;
  #L419680.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L419694.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41969a.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41969e.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4196a2.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L4196a6.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4196aa.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4196b0.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L4196b4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4196b8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4196be.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4196c2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4196c6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4196cc.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4196d0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4196e4.  v0:= 1I;
  #L4196e6.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4196ea.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4196ee.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4196f4.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.disposeInner:()V` @kind virtual;
  #L4196fa.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41970c.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419710.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` @kind object;
  #L419714.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41971a.  v0:= temp @kind object;
  #L41971c.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`) v0 @kind object;
  #L419720.  if v0 == 0 then goto L419732;
  #L419724.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` @kind object;
  #L419728.  if v0 == v1 then goto L419732;
  #L41972c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;.dispose:()V` @kind virtual;
  #L419732.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L419744.  call temp:= `getAndIncrement`(v12) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.getAndIncrement:()I` @kind virtual;
  #L41974a.  v0:= temp;
  #L41974c.  if v0 == 0 then goto L419752;
  #L419750.  return @kind void;
  #L419752.  v0:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L419756.  v1:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41975a.  v2:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41975e.  v3:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L419762.  v4:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.emitted` @type ^`long` @kind wide;
  #L419766.  v6:= 1I;
  #L419768.  v7:= 1I;
  #L41976a.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L41976e.  if v8 == 0 then goto L419774;
  #L419772.  return @kind void;
  #L419774.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L41977a.  v8:= temp @kind object;
  #L41977c.  if v8 == 0 then goto L419798;
  #L419780.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L419784.  if v8 != 0 then goto L419798;
  #L419788.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41978e.  v1:= temp @kind object;
  #L419790.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L419796.  return @kind void;
  #L419798.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.done` @type ^`boolean` @kind boolean;
  #L41979c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4197a2.  v9:= temp @kind object;
  #L4197a4.  v9:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`) v9 @kind object;
  #L4197a8.  if v9 != 0 then goto L4197b0;
  #L4197ac.  v10:= 1I;
  #L4197ae.  goto L4197b2;
  #L4197b0.  v10:= 0I;
  #L4197b2.  if v8 == 0 then goto L4197d6;
  #L4197b6.  if v10 == 0 then goto L4197d6;
  #L4197ba.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4197c0.  v1:= temp @kind object;
  #L4197c2.  if v1 == 0 then goto L4197ce;
  #L4197c6.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4197cc.  goto L4197d4;
  #L4197ce.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4197d4.  return @kind void;
  #L4197d6.  if v10 != 0 then goto L41980e;
  #L4197da.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver.item` @type ^`java.lang.Object` @kind object;
  #L4197de.  if v8 == 0 then goto L41980e;
  #L4197e2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4197e8.  v10:= temp @kind wide;
  #L4197ea.  v8:= lcmp(v4, v10);
  #L4197ee.  if v8 != 0 then goto L4197f4;
  #L4197f2.  goto L41980e;
  #L4197f4.  v8:= 0I;
  #L4197f6.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4197fc.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver.item` @type ^`java.lang.Object` @kind object;
  #L419800.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L419806.  v8:= 1L;
  #L41980a.  v4:= v4 + v8 @kind long;
  #L41980c.  goto L41976a;
  #L41980e.  v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.emitted` @type ^`long` := v4 @kind wide;
  #L419812.  v7:= -v7 @kind int;
  #L419814.  call temp:= `addAndGet`(v12, v7) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.addAndGet:(I)I` @kind virtual;
  #L41981a.  v7:= temp;
  #L41981c.  if v7 != 0 then goto L41976a;
  #L419820.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.innerError:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L419834.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419838.  v1:= 0I;
  #L41983a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L419840.  v3:= temp;
  #L419842.  if v3 == 0 then goto L419876;
  #L419846.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41984a.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L419850.  v3:= temp;
  #L419852.  if v3 == 0 then goto L419876;
  #L419856.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L41985a.  if v3 != 0 then goto L41986e;
  #L41985e.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L419862.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L419868.  call `disposeInner`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.disposeInner:()V` @kind virtual;
  #L41986e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @kind virtual;
  #L419874.  return @kind void;
  #L419876.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41987c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419890.  v0:= 1I;
  #L419892.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L419896.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @kind virtual;
  #L41989c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4198b0.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4198b4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4198ba.  v0:= temp;
  #L4198bc.  if v0 == 0 then goto L4198dc;
  #L4198c0.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L4198c4.  if v2 != 0 then goto L4198ce;
  #L4198c8.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.disposeInner:()V` @kind virtual;
  #L4198ce.  v2:= 1I;
  #L4198d0.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L4198d4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @kind virtual;
  #L4198da.  goto L4198e2;
  #L4198dc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4198e2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4198f4.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4198f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4198fe.  v0:= temp @kind object;
  #L419900.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`) v0 @kind object;
  #L419904.  if v0 == 0 then goto L41990e;
  #L419908.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;.dispose:()V` @kind virtual;
  #L41990e.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L419912.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419918.  v4:= temp @kind object;
  #L41991a.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L41991e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419924.  v4:= temp @kind object;
  #L419926.  v4:= (`io.reactivex.SingleSource`) v4 @kind object;
  #L41992a.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`;
  #L41992e.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;)V` @kind direct;
  #L419934.  v1:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419938.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41993e.  v1:= temp @kind object;
  #L419940.  v1:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`) v1 @kind object;
  #L419944.  v2:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` @kind object;
  #L419948.  if v1 != v2 then goto L41994e;
  #L41994c.  goto L419964;
  #L41994e.  v2:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419952.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L419958.  v1:= temp;
  #L41995a.  if v1 == 0 then goto L419934;
  #L41995e.  call `subscribe`(v4, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L419964.  return @kind void;
  #L419966.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L419968.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41996e.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L419972.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L419978.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41997c.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` @kind object;
  #L419980.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L419986.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41998c.  return @kind void;
  catch `java.lang.Throwable` @[L41990e..L41992a] goto L419966;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4199ac.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4199b0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4199b6.  v0:= temp;
  #L4199b8.  if v0 == 0 then goto L4199da;
  #L4199bc.  v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4199c0.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4199c4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4199ca.  v0:= 9223372036854775807L;
  #L4199d4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4199da.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4199ec.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4199f0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4199f6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @kind virtual;
  #L4199fc.  return @kind void;
}
