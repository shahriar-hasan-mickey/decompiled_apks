record `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @AccessFlag VOLATILE;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.STATE_ACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.STATE_INACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.STATE_RESULT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41a774.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41a77a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41a77e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41a782.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L41a786.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L41a78a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L41a790.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41a794.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver`;
  #L41a798.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;)V` @kind direct;
  #L41a79e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` := v1 @kind object;
  #L41a7a2.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L41a7a6.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L41a7ac.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L41a7b0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a7c4.  v0:= 1I;
  #L41a7c6.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41a7ca.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a7ce.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a7d4.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` @kind object;
  #L41a7d8.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver;.dispose:()V` @kind virtual;
  #L41a7de.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.getAndIncrement:()I` @kind virtual;
  #L41a7e4.  v0:= temp;
  #L41a7e6.  if v0 != 0 then goto L41a7fa;
  #L41a7ea.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41a7ee.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41a7f4.  v0:= 0I;
  #L41a7f6.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v0 @kind object;
  #L41a7fa.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L41a80c.  call temp:= `getAndIncrement`(v10) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.getAndIncrement:()I` @kind virtual;
  #L41a812.  v0:= temp;
  #L41a814.  if v0 == 0 then goto L41a81a;
  #L41a818.  return @kind void;
  #L41a81a.  v0:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41a81e.  v1:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a822.  v2:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41a826.  v3:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a82a.  v4:= 1I;
  #L41a82c.  v5:= 1I;
  #L41a82e.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41a832.  v7:= 0I;
  #L41a834.  if v6 == 0 then goto L41a846;
  #L41a838.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41a83e.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L41a842.  goto L41a93c;
  #L41a846.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int`;
  #L41a84a.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L41a850.  v8:= temp @kind object;
  #L41a852.  if v8 == 0 then goto L41a884;
  #L41a856.  v8:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a85a.  if v1 == v8 then goto L41a86a;
  #L41a85e.  v8:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a862.  if v1 != v8 then goto L41a884;
  #L41a866.  if v6 != 0 then goto L41a884;
  #L41a86a.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41a870.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L41a874.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41a87a.  v1:= temp @kind object;
  #L41a87c.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a882.  return @kind void;
  #L41a884.  v8:= 0I;
  #L41a886.  if v6 != 0 then goto L41a920;
  #L41a88a.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.done` @type ^`boolean` @kind boolean;
  #L41a88e.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41a894.  v7:= temp @kind object;
  #L41a896.  if v7 != 0 then goto L41a89c;
  #L41a89a.  v8:= 1I;
  #L41a89c.  if v6 == 0 then goto L41a8c0;
  #L41a8a0.  if v8 == 0 then goto L41a8c0;
  #L41a8a4.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41a8aa.  v1:= temp @kind object;
  #L41a8ac.  if v1 != 0 then goto L41a8b8;
  #L41a8b0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41a8b6.  goto L41a8be;
  #L41a8b8.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a8be.  return @kind void;
  #L41a8c0.  if v8 == 0 then goto L41a8c6;
  #L41a8c4.  goto L41a93c;
  #L41a8c6.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41a8ca.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41a8d0.  v6:= temp @kind object;
  #L41a8d2.  v7:= "The mapper returned a null SingleSource" @kind object;
  #L41a8d6.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a8dc.  v6:= temp @kind object;
  #L41a8de.  v6:= (`io.reactivex.SingleSource`) v6 @kind object;
  #L41a8e2.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int` := v4;
  #L41a8e6.  v7:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` @kind object;
  #L41a8ea.  call `subscribe`(v6, v7) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L41a8f0.  goto L41a93c;
  #L41a8f2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41a8f4.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41a8fa.  v4:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a8fe.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a904.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41a90a.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41a910.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41a916.  v1:= temp @kind object;
  #L41a918.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a91e.  return @kind void;
  #L41a920.  v9:= 2I;
  #L41a922.  if v6 != v9 then goto L41a93c;
  #L41a926.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` @kind object;
  #L41a92a.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L41a92e.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41a934.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int` := v8;
  #L41a938.  goto L41a82e;
  #L41a93c.  v5:= -v5 @kind int;
  #L41a93e.  call temp:= `addAndGet`(v10, v5) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.addAndGet:(I)I` @kind virtual;
  #L41a944.  v5:= temp;
  #L41a946.  if v5 != 0 then goto L41a82e;
  #L41a94a.  return @kind void;
  catch `java.lang.Throwable` @[L41a8c6..L41a8e2] goto L41a8f2;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L41a968.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a96c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41a972.  v0:= temp;
  #L41a974.  if v0 == 0 then goto L41a99c;
  #L41a978.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a97c.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a980.  if v2 == v0 then goto L41a98e;
  #L41a984.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a988.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a98e.  v2:= 0I;
  #L41a990.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int` := v2;
  #L41a994.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L41a99a.  goto L41a9a2;
  #L41a99c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41a9a2.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.innerSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L41a9b4.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v1 @kind object;
  #L41a9b8.  v1:= 2I;
  #L41a9ba.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int` := v1;
  #L41a9be.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L41a9c4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a75c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41a760.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a9d8.  v0:= 1I;
  #L41a9da.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41a9de.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L41a9e4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a9f8.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a9fc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41aa02.  v0:= temp;
  #L41aa04.  if v0 == 0 then goto L41aa2c;
  #L41aa08.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41aa0c.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41aa10.  if v2 != v0 then goto L41aa1e;
  #L41aa14.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` @kind object;
  #L41aa18.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver;.dispose:()V` @kind virtual;
  #L41aa1e.  v2:= 1I;
  #L41aa20.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41aa24.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L41aa2a.  goto L41aa32;
  #L41aa2c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41aa32.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41aa44.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41aa48.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41aa4e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L41aa54.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41aa68.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41aa6c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41aa72.  v0:= temp;
  #L41aa74.  if v0 == 0 then goto L41aa86;
  #L41aa78.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41aa7c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41aa80.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41aa86.  return @kind void;
}
