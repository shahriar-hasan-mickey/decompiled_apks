record `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.errorMode` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.prefetch` @AccessFlag FINAL;
  `io.reactivex.Observable` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle;.<init>:(Lio/reactivex/Observable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41aa98.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L41aa9e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.source` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L41aaa2.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41aaa6.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L41aaaa.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.prefetch` @type ^`int` := v4;
  #L41aaae.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle` v5 @kind this, `io.reactivex.Observer` v6 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41aac0.  v0:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.source` @type ^`io.reactivex.Observable` @kind object;
  #L41aac4.  v1:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41aac8.  call temp:= `tryAsSingle`(v0, v1, v6) @signature `Lio/reactivex/internal/operators/mixed/ScalarXMapZHelper;.tryAsSingle:(Ljava/lang/Object;Lio/reactivex/functions/Function;Lio/reactivex/Observer;)Z` @kind static;
  #L41aace.  v0:= temp;
  #L41aad0.  if v0 != 0 then goto L41aaf4;
  #L41aad4.  v0:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.source` @type ^`io.reactivex.Observable` @kind object;
  #L41aad8.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver`;
  #L41aadc.  v2:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41aae0.  v3:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.prefetch` @type ^`int`;
  #L41aae4.  v4:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41aae8.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L41aaee.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L41aaf4.  return @kind void;
}
