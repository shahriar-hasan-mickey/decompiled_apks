record `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.requested` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.STATE_ACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.STATE_INACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.STATE_RESULT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4188c8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4188ce.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4188d2.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4188d6.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.prefetch` @type ^`int` := v3;
  #L4188da.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L4188de.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4188e2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4188e8.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4188ec.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4188f0.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4188f6.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L4188fa.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver`;
  #L4188fe.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;)V` @kind direct;
  #L418904.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` := v1 @kind object;
  #L418908.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L41890c.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L418912.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L418916.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418928.  v0:= 1I;
  #L41892a.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41892e.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418932.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L418938.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` @kind object;
  #L41893c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver;.dispose:()V` @kind virtual;
  #L418942.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.getAndIncrement:()I` @kind virtual;
  #L418948.  v0:= temp;
  #L41894a.  if v0 != 0 then goto L41895e;
  #L41894e.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L418952.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L418958.  v0:= 0I;
  #L41895a.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v0 @kind object;
  #L41895e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v15 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L418970.  call temp:= `getAndIncrement`(v15) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.getAndIncrement:()I` @kind virtual;
  #L418976.  v0:= temp;
  #L418978.  if v0 == 0 then goto L41897e;
  #L41897c.  return @kind void;
  #L41897e.  v0:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L418982.  v1:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418986.  v2:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41898a.  v3:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41898e.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L418992.  v5:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.prefetch` @type ^`int`;
  #L418996.  v6:= v5 ^> 1;
  #L41899a.  v5:= v5 - v6 @kind int;
  #L41899c.  v6:= 1I;
  #L41899e.  v7:= 1I;
  #L4189a0.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4189a4.  v9:= 0I;
  #L4189a6.  if v8 == 0 then goto L4189b8;
  #L4189aa.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4189b0.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L4189b4.  goto L418af0;
  #L4189b8.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int`;
  #L4189bc.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L4189c2.  v10:= temp @kind object;
  #L4189c4.  if v10 == 0 then goto L4189f6;
  #L4189c8.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4189cc.  if v1 == v10 then goto L4189dc;
  #L4189d0.  v10:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4189d4.  if v1 != v10 then goto L4189f6;
  #L4189d8.  if v8 != 0 then goto L4189f6;
  #L4189dc.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4189e2.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L4189e6.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4189ec.  v1:= temp @kind object;
  #L4189ee.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4189f4.  return @kind void;
  #L4189f6.  v10:= 0I;
  #L4189f8.  if v8 != 0 then goto L418ab6;
  #L4189fc.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.done` @type ^`boolean` @kind boolean;
  #L418a00.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L418a06.  v9:= temp @kind object;
  #L418a08.  if v9 != 0 then goto L418a10;
  #L418a0c.  v11:= 1I;
  #L418a0e.  goto L418a12;
  #L418a10.  v11:= 0I;
  #L418a12.  if v8 == 0 then goto L418a36;
  #L418a16.  if v11 == 0 then goto L418a36;
  #L418a1a.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L418a20.  v1:= temp @kind object;
  #L418a22.  if v1 != 0 then goto L418a2e;
  #L418a26.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L418a2c.  goto L418a34;
  #L418a2e.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L418a34.  return @kind void;
  #L418a36.  if v11 == 0 then goto L418a3c;
  #L418a3a.  goto L418af0;
  #L418a3c.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.consumed` @type ^`int`;
  #L418a40.  v8:= v8 + v6 @kind int;
  #L418a42.  if v8 != v5 then goto L418a58;
  #L418a46.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.consumed` @type ^`int` := v10;
  #L418a4a.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418a4e.  v10:= (`long`) v5 @kind i2l;
  #L418a50.  call `request`(v8, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L418a56.  goto L418a5c;
  #L418a58.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.consumed` @type ^`int` := v8;
  #L418a5c.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L418a60.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L418a66.  v8:= temp @kind object;
  #L418a68.  v9:= "The mapper returned a null SingleSource" @kind object;
  #L418a6c.  call temp:= `requireNonNull`(v8, v9) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418a72.  v8:= temp @kind object;
  #L418a74.  v8:= (`io.reactivex.SingleSource`) v8 @kind object;
  #L418a78.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int` := v6;
  #L418a7c.  v9:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` @kind object;
  #L418a80.  call `subscribe`(v8, v9) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L418a86.  goto L418af0;
  #L418a88.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L418a8a.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L418a90.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418a94.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L418a9a.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L418aa0.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L418aa6.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L418aac.  v1:= temp @kind object;
  #L418aae.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L418ab4.  return @kind void;
  #L418ab6.  v11:= 2I;
  #L418ab8.  if v8 != v11 then goto L418af0;
  #L418abc.  v11:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.emitted` @type ^`long` @kind wide;
  #L418ac0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L418ac6.  v13:= temp @kind wide;
  #L418ac8.  v8:= lcmp(v11, v13);
  #L418acc.  if v8 == 0 then goto L418af0;
  #L418ad0.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` @kind object;
  #L418ad4.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L418ad8.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L418ade.  v8:= 1L;
  #L418ae2.  v11:= v11 + v8 @kind long;
  #L418ae4.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.emitted` @type ^`long` := v11 @kind wide;
  #L418ae8.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int` := v10;
  #L418aec.  goto L4189a0;
  #L418af0.  v7:= -v7 @kind int;
  #L418af2.  call temp:= `addAndGet`(v15, v7) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.addAndGet:(I)I` @kind virtual;
  #L418af8.  v7:= temp;
  #L418afa.  if v7 != 0 then goto L4189a0;
  #L418afe.  return @kind void;
  catch `java.lang.Throwable` @[L418a5c..L418a78] goto L418a88;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L418b1c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L418b20.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L418b26.  v0:= temp;
  #L418b28.  if v0 == 0 then goto L418b50;
  #L418b2c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418b30.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418b34.  if v2 == v0 then goto L418b42;
  #L418b38.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418b3c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L418b42.  v2:= 0I;
  #L418b44.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int` := v2;
  #L418b48.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L418b4e.  goto L418b56;
  #L418b50.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L418b56.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.innerSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L418b68.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v1 @kind object;
  #L418b6c.  v1:= 2I;
  #L418b6e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int` := v1;
  #L418b72.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L418b78.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418b8c.  v0:= 1I;
  #L418b8e.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L418b92.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L418b98.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418bac.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L418bb0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L418bb6.  v0:= temp;
  #L418bb8.  if v0 == 0 then goto L418be0;
  #L418bbc.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418bc0.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418bc4.  if v2 != v0 then goto L418bd2;
  #L418bc8.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` @kind object;
  #L418bcc.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver;.dispose:()V` @kind virtual;
  #L418bd2.  v2:= 1I;
  #L418bd4.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L418bd8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L418bde.  goto L418be6;
  #L418be0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L418be6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418bf8.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L418bfc.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L418c02.  v2:= temp;
  #L418c04.  if v2 != 0 then goto L418c28;
  #L418c08.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418c0c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L418c12.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L418c16.  v0:= "queue full?!" @kind object;
  #L418c1a.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L418c20.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L418c26.  return @kind void;
  #L418c28.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L418c2e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L418c40.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418c44.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L418c4a.  v0:= temp;
  #L418c4c.  if v0 == 0 then goto L418c6a;
  #L418c50.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L418c54.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L418c58.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L418c5e.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.prefetch` @type ^`int`;
  #L418c62.  v0:= (`long`) v0 @kind i2l;
  #L418c64.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L418c6a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418c7c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L418c80.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L418c86.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L418c8c.  return @kind void;
}
