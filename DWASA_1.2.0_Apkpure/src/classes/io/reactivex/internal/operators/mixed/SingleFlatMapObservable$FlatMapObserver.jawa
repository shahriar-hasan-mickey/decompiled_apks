record `io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41b9d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41b9d6.  v0.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41b9da.  v0.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41b9de.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L41b9f0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41b9f6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b9a8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b9ae.  v0:= temp @kind object;
  #L41b9b0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L41b9b4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41b9ba.  v0:= temp;
  #L41b9bc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ba08.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ba0c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41ba12.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ba24.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ba28.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ba2e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ba40.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41ba44.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41ba4a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L41ba5c.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41ba62.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ba74.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41ba78.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41ba7e.  v2:= temp @kind object;
  #L41ba80.  v0:= "The mapper returned a null Publisher" @kind object;
  #L41ba84.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ba8a.  v2:= temp @kind object;
  #L41ba8c.  v2:= (`io.reactivex.ObservableSource`) v2 @kind object;
  #L41ba90.  call `subscribe`(v2, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L41ba96.  return @kind void;
  #L41ba98.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ba9a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41baa0.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41baa4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41baaa.  return @kind void;
  catch `java.lang.Throwable` @[L41ba74..L41ba90] goto L41ba98;
}
