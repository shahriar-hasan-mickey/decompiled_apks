record `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L417f18.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L417f1e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L417f22.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L417f26.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L417f2a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int` := v4;
  #L417f2e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L417f32.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L417f38.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L417f3c.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver`;
  #L417f40.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;)V` @kind direct;
  #L417f46.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` := v1 @kind object;
  #L417f4a.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L417f4e.  call `<init>`(v1, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L417f54.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L417f58.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417f6c.  v0:= 1I;
  #L417f6e.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L417f72.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L417f76.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L417f7c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L417f80.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.dispose:()V` @kind virtual;
  #L417f86.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.getAndIncrement:()I` @kind virtual;
  #L417f8c.  v0:= temp;
  #L417f8e.  if v0 != 0 then goto L417f9c;
  #L417f92.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L417f96.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L417f9c.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v6 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L417fb0.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.getAndIncrement:()I` @kind virtual;
  #L417fb6.  v0:= temp;
  #L417fb8.  if v0 == 0 then goto L417fbe;
  #L417fbc.  return @kind void;
  #L417fbe.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` @kind boolean;
  #L417fc2.  if v0 == 0 then goto L417fd2;
  #L417fc6.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L417fca.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L417fd0.  return @kind void;
  #L417fd2.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` @kind boolean;
  #L417fd6.  if v0 != 0 then goto L4180fe;
  #L417fda.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L417fde.  v1:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L417fe2.  if v0 != v1 then goto L418018;
  #L417fe6.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L417fea.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L417ff0.  v0:= temp @kind object;
  #L417ff2.  if v0 == 0 then goto L418018;
  #L417ff6.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L417ffa.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L418000.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L418004.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41800a.  v0:= temp @kind object;
  #L41800c.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L418010.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L418016.  return @kind void;
  #L418018.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` @kind boolean;
  #L41801c.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L418020.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L418026.  v1:= temp @kind object;
  #L418028.  v2:= 0I;
  #L41802a.  v3:= 1I;
  #L41802c.  if v1 != 0 then goto L418034;
  #L418030.  v4:= 1I;
  #L418032.  goto L418036;
  #L418034.  v4:= 0I;
  #L418036.  if v0 == 0 then goto L418066;
  #L41803a.  if v4 == 0 then goto L418066;
  #L41803e.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L418042.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L418048.  v0:= temp @kind object;
  #L41804a.  if v0 == 0 then goto L41805a;
  #L41804e.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L418052.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L418058.  goto L418064;
  #L41805a.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41805e.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L418064.  return @kind void;
  #L418066.  if v4 != 0 then goto L4180fe;
  #L41806a.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int`;
  #L41806e.  v4:= v0 ^> 1;
  #L418072.  v0:= v0 - v4 @kind int;
  #L418074.  v4:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.consumed` @type ^`int`;
  #L418078.  v4:= v4 + v3 @kind int;
  #L41807a.  if v4 != v0 then goto L418090;
  #L41807e.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.consumed` @type ^`int` := v2;
  #L418082.  v2:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418086.  v4:= (`long`) v0 @kind i2l;
  #L418088.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41808e.  goto L418094;
  #L418090.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.consumed` @type ^`int` := v4;
  #L418094.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L418098.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41809e.  v0:= temp @kind object;
  #L4180a0.  v1:= "The mapper returned a null CompletableSource" @kind object;
  #L4180a4.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4180aa.  v0:= temp @kind object;
  #L4180ac.  v0:= (`io.reactivex.CompletableSource`) v0 @kind object;
  #L4180b0.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v3 @kind boolean;
  #L4180b4.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L4180b8.  call `subscribe`(v0, v1) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L4180be.  goto L4180fe;
  #L4180c0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4180c2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4180c8.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4180cc.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4180d2.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4180d6.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4180dc.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4180e0.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4180e6.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4180ea.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4180f0.  v0:= temp @kind object;
  #L4180f2.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4180f6.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4180fc.  return @kind void;
  #L4180fe.  call temp:= `decrementAndGet`(v6) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.decrementAndGet:()I` @kind virtual;
  #L418104.  v0:= temp;
  #L418106.  if v0 != 0 then goto L417fbe;
  #L41810a.  return @kind void;
  catch `java.lang.Throwable` @[L418094..L4180b0] goto L4180c0;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L418128.  v0:= 0I;
  #L41812a.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L41812e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L418134.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L418148.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41814c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L418152.  v0:= temp;
  #L418154.  if v0 == 0 then goto L4181b2;
  #L418158.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41815c.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418160.  if v2 != v0 then goto L4181a4;
  #L418164.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418168.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41816e.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L418172.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L418178.  v2:= temp @kind object;
  #L41817a.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L41817e.  if v2 == v0 then goto L41818c;
  #L418182.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L418186.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41818c.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.getAndIncrement:()I` @kind virtual;
  #L418192.  v2:= temp;
  #L418194.  if v2 != 0 then goto L4181b8;
  #L418198.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41819c.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4181a2.  goto L4181b8;
  #L4181a4.  v2:= 0I;
  #L4181a6.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v2 @kind boolean;
  #L4181aa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L4181b0.  goto L4181b8;
  #L4181b2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4181b8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417f00.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` @kind boolean;
  #L417f04.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4181cc.  v0:= 1I;
  #L4181ce.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4181d2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L4181d8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4181ec.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4181f0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4181f6.  v0:= temp;
  #L4181f8.  if v0 == 0 then goto L418256;
  #L4181fc.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418200.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418204.  if v2 != v0 then goto L418248;
  #L418208.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L41820c.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.dispose:()V` @kind virtual;
  #L418212.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L418216.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41821c.  v2:= temp @kind object;
  #L41821e.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L418222.  if v2 == v0 then goto L418230;
  #L418226.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41822a.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L418230.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.getAndIncrement:()I` @kind virtual;
  #L418236.  v2:= temp;
  #L418238.  if v2 != 0 then goto L41825c;
  #L41823c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L418240.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L418246.  goto L41825c;
  #L418248.  v2:= 1I;
  #L41824a.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41824e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L418254.  goto L41825c;
  #L418256.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41825c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418270.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L418274.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41827a.  v2:= temp;
  #L41827c.  if v2 == 0 then goto L418288;
  #L418280.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L418286.  goto L4182a6;
  #L418288.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41828c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L418292.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L418296.  v0:= "Queue full?!" @kind object;
  #L41829a.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4182a0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4182a6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4182b8.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4182bc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4182c2.  v0:= temp;
  #L4182c4.  if v0 == 0 then goto L4182e2;
  #L4182c8.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4182cc.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4182d0.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4182d6.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int`;
  #L4182da.  v0:= (`long`) v0 @kind i2l;
  #L4182dc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4182e2.  return @kind void;
}
