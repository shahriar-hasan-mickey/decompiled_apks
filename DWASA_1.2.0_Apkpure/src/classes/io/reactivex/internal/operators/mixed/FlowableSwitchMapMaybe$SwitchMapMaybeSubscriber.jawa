record `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4191c8.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`;
  #L4191cc.  v1:= 0I;
  #L4191ce.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;)V` @kind direct;
  #L4191d4.  `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` := v0 @kind object;
  #L4191d8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4191ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4191f2.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4191f6.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4191fa.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L4191fe.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L419202.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L419208.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41920c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L419210.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L419216.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L41921a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41921e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L419224.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L419228.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41923c.  v0:= 1I;
  #L41923e.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L419242.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L419246.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41924c.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.disposeInner:()V` @kind virtual;
  #L419252.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L419264.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419268.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` @kind object;
  #L41926c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L419272.  v0:= temp @kind object;
  #L419274.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`) v0 @kind object;
  #L419278.  if v0 == 0 then goto L41928a;
  #L41927c.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` @kind object;
  #L419280.  if v0 == v1 then goto L41928a;
  #L419284.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;.dispose:()V` @kind virtual;
  #L41928a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L41929c.  call temp:= `getAndIncrement`(v12) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L4192a2.  v0:= temp;
  #L4192a4.  if v0 == 0 then goto L4192aa;
  #L4192a8.  return @kind void;
  #L4192aa.  v0:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4192ae.  v1:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4192b2.  v2:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4192b6.  v3:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4192ba.  v4:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.emitted` @type ^`long` @kind wide;
  #L4192be.  v6:= 1I;
  #L4192c0.  v7:= 1I;
  #L4192c2.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4192c6.  if v8 == 0 then goto L4192cc;
  #L4192ca.  return @kind void;
  #L4192cc.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L4192d2.  v8:= temp @kind object;
  #L4192d4.  if v8 == 0 then goto L4192f0;
  #L4192d8.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L4192dc.  if v8 != 0 then goto L4192f0;
  #L4192e0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4192e6.  v1:= temp @kind object;
  #L4192e8.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4192ee.  return @kind void;
  #L4192f0.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.done` @type ^`boolean` @kind boolean;
  #L4192f4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4192fa.  v9:= temp @kind object;
  #L4192fc.  v9:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`) v9 @kind object;
  #L419300.  if v9 != 0 then goto L419308;
  #L419304.  v10:= 1I;
  #L419306.  goto L41930a;
  #L419308.  v10:= 0I;
  #L41930a.  if v8 == 0 then goto L41932e;
  #L41930e.  if v10 == 0 then goto L41932e;
  #L419312.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L419318.  v1:= temp @kind object;
  #L41931a.  if v1 == 0 then goto L419326;
  #L41931e.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L419324.  goto L41932c;
  #L419326.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41932c.  return @kind void;
  #L41932e.  if v10 != 0 then goto L419366;
  #L419332.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver.item` @type ^`java.lang.Object` @kind object;
  #L419336.  if v8 == 0 then goto L419366;
  #L41933a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L419340.  v10:= temp @kind wide;
  #L419342.  v8:= lcmp(v4, v10);
  #L419346.  if v8 != 0 then goto L41934c;
  #L41934a.  goto L419366;
  #L41934c.  v8:= 0I;
  #L41934e.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L419354.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver.item` @type ^`java.lang.Object` @kind object;
  #L419358.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41935e.  v8:= 1L;
  #L419362.  v4:= v4 + v8 @kind long;
  #L419364.  goto L4192c2;
  #L419366.  v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.emitted` @type ^`long` := v4 @kind wide;
  #L41936a.  v7:= -v7 @kind int;
  #L41936c.  call temp:= `addAndGet`(v12, v7) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.addAndGet:(I)I` @kind virtual;
  #L419372.  v7:= temp;
  #L419374.  if v7 != 0 then goto L4192c2;
  #L419378.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.innerComplete:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41938c.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419390.  v1:= 0I;
  #L419392.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L419398.  v3:= temp;
  #L41939a.  if v3 == 0 then goto L4193a4;
  #L41939e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L4193a4.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.innerError:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4193b8.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4193bc.  v1:= 0I;
  #L4193be.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4193c4.  v3:= temp;
  #L4193c6.  if v3 == 0 then goto L4193fa;
  #L4193ca.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4193ce.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4193d4.  v3:= temp;
  #L4193d6.  if v3 == 0 then goto L4193fa;
  #L4193da.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L4193de.  if v3 != 0 then goto L4193f2;
  #L4193e2.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4193e6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4193ec.  call `disposeInner`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.disposeInner:()V` @kind virtual;
  #L4193f2.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L4193f8.  return @kind void;
  #L4193fa.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L419400.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419414.  v0:= 1I;
  #L419416.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L41941a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L419420.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419434.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L419438.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41943e.  v0:= temp;
  #L419440.  if v0 == 0 then goto L419460;
  #L419444.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L419448.  if v2 != 0 then goto L419452;
  #L41944c.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.disposeInner:()V` @kind virtual;
  #L419452.  v2:= 1I;
  #L419454.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L419458.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L41945e.  goto L419466;
  #L419460.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L419466.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L419478.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41947c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L419482.  v0:= temp @kind object;
  #L419484.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`) v0 @kind object;
  #L419488.  if v0 == 0 then goto L419492;
  #L41948c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;.dispose:()V` @kind virtual;
  #L419492.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L419496.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41949c.  v4:= temp @kind object;
  #L41949e.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4194a2.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4194a8.  v4:= temp @kind object;
  #L4194aa.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L4194ae.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`;
  #L4194b2.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;)V` @kind direct;
  #L4194b8.  v1:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4194bc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4194c2.  v1:= temp @kind object;
  #L4194c4.  v1:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`) v1 @kind object;
  #L4194c8.  v2:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` @kind object;
  #L4194cc.  if v1 != v2 then goto L4194d2;
  #L4194d0.  goto L4194e8;
  #L4194d2.  v2:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4194d6.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4194dc.  v1:= temp;
  #L4194de.  if v1 == 0 then goto L4194b8;
  #L4194e2.  call `subscribe`(v4, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4194e8.  return @kind void;
  #L4194ea.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4194ec.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4194f2.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4194f6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4194fc.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419500.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` @kind object;
  #L419504.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41950a.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L419510.  return @kind void;
  catch `java.lang.Throwable` @[L419492..L4194ae] goto L4194ea;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L419530.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L419534.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41953a.  v0:= temp;
  #L41953c.  if v0 == 0 then goto L41955e;
  #L419540.  v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L419544.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L419548.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41954e.  v0:= 9223372036854775807L;
  #L419558.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41955e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419570.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L419574.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41957a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L419580.  return @kind void;
}
