record `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41aff0.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`;
  #L41aff4.  v1:= 0I;
  #L41aff6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;)V` @kind direct;
  #L41affc.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` := v0 @kind object;
  #L41b000.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41b014.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41b01a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41b01e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41b022.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L41b026.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L41b02a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L41b030.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41b034.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41b038.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41b03e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41b042.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b054.  v0:= 1I;
  #L41b056.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41b05a.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41b05e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41b064.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.disposeInner:()V` @kind virtual;
  #L41b06a.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41b07c.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b080.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` @kind object;
  #L41b084.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41b08a.  v0:= temp @kind object;
  #L41b08c.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`) v0 @kind object;
  #L41b090.  if v0 == 0 then goto L41b0a2;
  #L41b094.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` @kind object;
  #L41b098.  if v0 == v1 then goto L41b0a2;
  #L41b09c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;.dispose:()V` @kind virtual;
  #L41b0a2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L41b0b4.  call temp:= `getAndIncrement`(v8) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.getAndIncrement:()I` @kind virtual;
  #L41b0ba.  v0:= temp;
  #L41b0bc.  if v0 == 0 then goto L41b0c2;
  #L41b0c0.  return @kind void;
  #L41b0c2.  v0:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41b0c6.  v1:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41b0ca.  v2:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b0ce.  v3:= 1I;
  #L41b0d0.  v4:= 1I;
  #L41b0d2.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41b0d6.  if v5 == 0 then goto L41b0dc;
  #L41b0da.  return @kind void;
  #L41b0dc.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b0e2.  v5:= temp @kind object;
  #L41b0e4.  if v5 == 0 then goto L41b100;
  #L41b0e8.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L41b0ec.  if v5 != 0 then goto L41b100;
  #L41b0f0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41b0f6.  v1:= temp @kind object;
  #L41b0f8.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41b0fe.  return @kind void;
  #L41b100.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.done` @type ^`boolean` @kind boolean;
  #L41b104.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b10a.  v6:= temp @kind object;
  #L41b10c.  v6:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`) v6 @kind object;
  #L41b110.  if v6 != 0 then goto L41b118;
  #L41b114.  v7:= 1I;
  #L41b116.  goto L41b11a;
  #L41b118.  v7:= 0I;
  #L41b11a.  if v5 == 0 then goto L41b13e;
  #L41b11e.  if v7 == 0 then goto L41b13e;
  #L41b122.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41b128.  v1:= temp @kind object;
  #L41b12a.  if v1 == 0 then goto L41b136;
  #L41b12e.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41b134.  goto L41b13c;
  #L41b136.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41b13c.  return @kind void;
  #L41b13e.  if v7 != 0 then goto L41b160;
  #L41b142.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver.item` @type ^`java.lang.Object` @kind object;
  #L41b146.  if v5 != 0 then goto L41b14c;
  #L41b14a.  goto L41b160;
  #L41b14c.  v5:= 0I;
  #L41b14e.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41b154.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver.item` @type ^`java.lang.Object` @kind object;
  #L41b158.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41b15e.  goto L41b0d2;
  #L41b160.  v4:= -v4 @kind int;
  #L41b162.  call temp:= `addAndGet`(v8, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.addAndGet:(I)I` @kind virtual;
  #L41b168.  v4:= temp;
  #L41b16a.  if v4 != 0 then goto L41b0d2;
  #L41b16e.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.innerComplete:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41b180.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b184.  v1:= 0I;
  #L41b186.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41b18c.  v3:= temp;
  #L41b18e.  if v3 == 0 then goto L41b198;
  #L41b192.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41b198.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.innerError:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41b1ac.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b1b0.  v1:= 0I;
  #L41b1b2.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41b1b8.  v3:= temp;
  #L41b1ba.  if v3 == 0 then goto L41b1ee;
  #L41b1be.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41b1c2.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41b1c8.  v3:= temp;
  #L41b1ca.  if v3 == 0 then goto L41b1ee;
  #L41b1ce.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L41b1d2.  if v3 != 0 then goto L41b1e6;
  #L41b1d6.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41b1da.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41b1e0.  call `disposeInner`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.disposeInner:()V` @kind virtual;
  #L41b1e6.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41b1ec.  return @kind void;
  #L41b1ee.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41b1f4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41afd8.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41afdc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b208.  v0:= 1I;
  #L41b20a.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41b20e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41b214.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b228.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41b22c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41b232.  v0:= temp;
  #L41b234.  if v0 == 0 then goto L41b254;
  #L41b238.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L41b23c.  if v2 != 0 then goto L41b246;
  #L41b240.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.disposeInner:()V` @kind virtual;
  #L41b246.  v2:= 1I;
  #L41b248.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41b24c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41b252.  goto L41b25a;
  #L41b254.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41b25a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41b26c.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b270.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b276.  v0:= temp @kind object;
  #L41b278.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`) v0 @kind object;
  #L41b27c.  if v0 == 0 then goto L41b286;
  #L41b280.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;.dispose:()V` @kind virtual;
  #L41b286.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41b28a.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41b290.  v4:= temp @kind object;
  #L41b292.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L41b296.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b29c.  v4:= temp @kind object;
  #L41b29e.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L41b2a2.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`;
  #L41b2a6.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;)V` @kind direct;
  #L41b2ac.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b2b0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b2b6.  v1:= temp @kind object;
  #L41b2b8.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`) v1 @kind object;
  #L41b2bc.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` @kind object;
  #L41b2c0.  if v1 != v2 then goto L41b2c6;
  #L41b2c4.  goto L41b2dc;
  #L41b2c6.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b2ca.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41b2d0.  v1:= temp;
  #L41b2d2.  if v1 == 0 then goto L41b2ac;
  #L41b2d6.  call `subscribe`(v4, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L41b2dc.  return @kind void;
  #L41b2de.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b2e0.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41b2e6.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41b2ea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41b2f0.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b2f4.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` @kind object;
  #L41b2f8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41b2fe.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41b304.  return @kind void;
  catch `java.lang.Throwable` @[L41b286..L41b2a2] goto L41b2de;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b324.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41b328.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41b32e.  v0:= temp;
  #L41b330.  if v0 == 0 then goto L41b342;
  #L41b334.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41b338.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41b33c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41b342.  return @kind void;
}
