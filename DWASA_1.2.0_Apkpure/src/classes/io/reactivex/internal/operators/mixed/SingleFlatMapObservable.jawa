record `io.reactivex.internal.operators.mixed.SingleFlatMapObservable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.SingleFlatMapObservable.mapper` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.mixed.SingleFlatMapObservable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable;.<init>:(Lio/reactivex/SingleSource;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41bac8.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L41bace.  v0.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable.source` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L41bad2.  v0.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41bad6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L41bae8.  v0:= new `io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver`;
  #L41baec.  v1:= v2.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41baf0.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41baf6.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41bafc.  v3:= v2.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L41bb00.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L41bb06.  return @kind void;
}
