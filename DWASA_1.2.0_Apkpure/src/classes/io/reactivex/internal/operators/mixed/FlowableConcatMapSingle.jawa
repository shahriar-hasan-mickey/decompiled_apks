record `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.errorMode` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.prefetch` @AccessFlag FINAL;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L418ca0.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L418ca6.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.source` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L418caa.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L418cae.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L418cb2.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.prefetch` @type ^`int` := v4;
  #L418cb6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L418cc8.  v0:= v5.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L418ccc.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber`;
  #L418cd0.  v2:= v5.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L418cd4.  v3:= v5.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.prefetch` @type ^`int`;
  #L418cd8.  v4:= v5.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418cdc.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L418ce2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L418ce8.  return @kind void;
}
