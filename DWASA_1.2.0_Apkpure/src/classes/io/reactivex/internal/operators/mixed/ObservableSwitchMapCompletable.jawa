record `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.delayErrors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.mapper` @AccessFlag FINAL;
  `io.reactivex.Observable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable;.<init>:(Lio/reactivex/Observable;Lio/reactivex/functions/Function;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41aecc.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L41aed2.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.source` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L41aed6.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41aeda.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L41aede.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable` v4 @kind this, `io.reactivex.CompletableObserver` v5 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41aef0.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.source` @type ^`io.reactivex.Observable` @kind object;
  #L41aef4.  v1:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41aef8.  call temp:= `tryAsCompletable`(v0, v1, v5) @signature `Lio/reactivex/internal/operators/mixed/ScalarXMapZHelper;.tryAsCompletable:(Ljava/lang/Object;Lio/reactivex/functions/Function;Lio/reactivex/CompletableObserver;)Z` @kind static;
  #L41aefe.  v0:= temp;
  #L41af00.  if v0 != 0 then goto L41af20;
  #L41af04.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.source` @type ^`io.reactivex.Observable` @kind object;
  #L41af08.  v1:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver`;
  #L41af0c.  v2:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41af10.  v3:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable.delayErrors` @type ^`boolean` @kind boolean;
  #L41af14.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L41af1a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L41af20.  return @kind void;
}
