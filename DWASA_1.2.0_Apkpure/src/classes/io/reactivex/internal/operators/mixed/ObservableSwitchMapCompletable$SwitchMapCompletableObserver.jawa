record `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41abb8.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver`;
  #L41abbc.  v1:= 0I;
  #L41abbe.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;)V` @kind direct;
  #L41abc4.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` := v0 @kind object;
  #L41abc8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41abdc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41abe2.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L41abe6.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41abea.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L41abee.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L41abf2.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L41abf8.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41abfc.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41ac00.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41ac06.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41ac0a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ac1c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41ac20.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ac26.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.disposeInner:()V` @kind virtual;
  #L41ac2c.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41ac40.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ac44.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` @kind object;
  #L41ac48.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41ac4e.  v0:= temp @kind object;
  #L41ac50.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver`) v0 @kind object;
  #L41ac54.  if v0 == 0 then goto L41ac66;
  #L41ac58.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` @kind object;
  #L41ac5c.  if v0 == v1 then goto L41ac66;
  #L41ac60.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;.dispose:()V` @kind virtual;
  #L41ac66.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.innerComplete:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41ac78.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ac7c.  v1:= 0I;
  #L41ac7e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41ac84.  v3:= temp;
  #L41ac86.  if v3 == 0 then goto L41acb8;
  #L41ac8a.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.done` @type ^`boolean` @kind boolean;
  #L41ac8e.  if v3 == 0 then goto L41acb8;
  #L41ac92.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41ac96.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41ac9c.  v3:= temp @kind object;
  #L41ac9e.  if v3 != 0 then goto L41acae;
  #L41aca2.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41aca6.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L41acac.  goto L41acb8;
  #L41acae.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41acb2.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41acb8.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.innerError:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41accc.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41acd0.  v1:= 0I;
  #L41acd2.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41acd8.  v3:= temp;
  #L41acda.  if v3 == 0 then goto L41ad3c;
  #L41acde.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41ace2.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41ace8.  v3:= temp;
  #L41acea.  if v3 == 0 then goto L41ad3c;
  #L41acee.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L41acf2.  if v3 == 0 then goto L41ad16;
  #L41acf6.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.done` @type ^`boolean` @kind boolean;
  #L41acfa.  if v3 == 0 then goto L41ad3a;
  #L41acfe.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41ad02.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41ad08.  v3:= temp @kind object;
  #L41ad0a.  v4:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41ad0e.  call `onError`(v4, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ad14.  goto L41ad3a;
  #L41ad16.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.dispose:()V` @kind virtual;
  #L41ad1c.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41ad20.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41ad26.  v3:= temp @kind object;
  #L41ad28.  v4:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L41ad2c.  if v3 == v4 then goto L41ad3a;
  #L41ad30.  v4:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41ad34.  call `onError`(v4, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ad3a.  return @kind void;
  #L41ad3c.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41ad42.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41ab8c.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ab90.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41ab96.  v0:= temp @kind object;
  #L41ab98.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` @kind object;
  #L41ab9c.  if v0 != v1 then goto L41aba4;
  #L41aba0.  v0:= 1I;
  #L41aba2.  goto L41aba6;
  #L41aba4.  v0:= 0I;
  #L41aba6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41ad54.  v0:= 1I;
  #L41ad56.  v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41ad5a.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ad5e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41ad64.  v0:= temp @kind object;
  #L41ad66.  if v0 != 0 then goto L41ad90;
  #L41ad6a.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41ad6e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41ad74.  v0:= temp @kind object;
  #L41ad76.  if v0 != 0 then goto L41ad86;
  #L41ad7a.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41ad7e.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L41ad84.  goto L41ad90;
  #L41ad86.  v1:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41ad8a.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ad90.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ada4.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41ada8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41adae.  v0:= temp;
  #L41adb0.  if v0 == 0 then goto L41adea;
  #L41adb4.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L41adb8.  if v2 == 0 then goto L41adc4;
  #L41adbc.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onComplete:()V` @kind virtual;
  #L41adc2.  goto L41adf0;
  #L41adc4.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.disposeInner:()V` @kind virtual;
  #L41adca.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41adce.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41add4.  v2:= temp @kind object;
  #L41add6.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L41adda.  if v2 == v0 then goto L41adf0;
  #L41adde.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41ade2.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ade8.  goto L41adf0;
  #L41adea.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41adf0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41ae04.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41ae08.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41ae0e.  v4:= temp @kind object;
  #L41ae10.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L41ae14.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ae1a.  v4:= temp @kind object;
  #L41ae1c.  v4:= (`io.reactivex.CompletableSource`) v4 @kind object;
  #L41ae20.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver`;
  #L41ae24.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;)V` @kind direct;
  #L41ae2a.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ae2e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41ae34.  v1:= temp @kind object;
  #L41ae36.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver`) v1 @kind object;
  #L41ae3a.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` @kind object;
  #L41ae3e.  if v1 != v2 then goto L41ae44;
  #L41ae42.  goto L41ae64;
  #L41ae44.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ae48.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41ae4e.  v2:= temp;
  #L41ae50.  if v2 == 0 then goto L41ae2a;
  #L41ae54.  if v1 == 0 then goto L41ae5e;
  #L41ae58.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;.dispose:()V` @kind virtual;
  #L41ae5e.  call `subscribe`(v4, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L41ae64.  return @kind void;
  #L41ae66.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ae68.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41ae6e.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41ae72.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ae78.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41ae7e.  return @kind void;
  catch `java.lang.Throwable` @[L41ae04..L41ae20] goto L41ae66;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ae9c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41aea0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41aea6.  v0:= temp;
  #L41aea8.  if v0 == 0 then goto L41aeba;
  #L41aeac.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41aeb0.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41aeb4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41aeba.  return @kind void;
}
