record `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @AccessFlag VOLATILE;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.STATE_ACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.STATE_INACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.STATE_RESULT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41a324.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41a32a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41a32e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41a332.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L41a336.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L41a33a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L41a340.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41a344.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver`;
  #L41a348.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;)V` @kind direct;
  #L41a34e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` := v1 @kind object;
  #L41a352.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L41a356.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L41a35c.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L41a360.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a374.  v0:= 1I;
  #L41a376.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41a37a.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a37e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a384.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` @kind object;
  #L41a388.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver;.dispose:()V` @kind virtual;
  #L41a38e.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.getAndIncrement:()I` @kind virtual;
  #L41a394.  v0:= temp;
  #L41a396.  if v0 != 0 then goto L41a3aa;
  #L41a39a.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41a39e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41a3a4.  v0:= 0I;
  #L41a3a6.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v0 @kind object;
  #L41a3aa.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L41a3bc.  call temp:= `getAndIncrement`(v10) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.getAndIncrement:()I` @kind virtual;
  #L41a3c2.  v0:= temp;
  #L41a3c4.  if v0 == 0 then goto L41a3ca;
  #L41a3c8.  return @kind void;
  #L41a3ca.  v0:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41a3ce.  v1:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a3d2.  v2:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41a3d6.  v3:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a3da.  v4:= 1I;
  #L41a3dc.  v5:= 1I;
  #L41a3de.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41a3e2.  v7:= 0I;
  #L41a3e4.  if v6 == 0 then goto L41a3f6;
  #L41a3e8.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41a3ee.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L41a3f2.  goto L41a4ec;
  #L41a3f6.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int`;
  #L41a3fa.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L41a400.  v8:= temp @kind object;
  #L41a402.  if v8 == 0 then goto L41a434;
  #L41a406.  v8:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a40a.  if v1 == v8 then goto L41a41a;
  #L41a40e.  v8:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a412.  if v1 != v8 then goto L41a434;
  #L41a416.  if v6 != 0 then goto L41a434;
  #L41a41a.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41a420.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L41a424.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41a42a.  v1:= temp @kind object;
  #L41a42c.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a432.  return @kind void;
  #L41a434.  v8:= 0I;
  #L41a436.  if v6 != 0 then goto L41a4d0;
  #L41a43a.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.done` @type ^`boolean` @kind boolean;
  #L41a43e.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41a444.  v7:= temp @kind object;
  #L41a446.  if v7 != 0 then goto L41a44c;
  #L41a44a.  v8:= 1I;
  #L41a44c.  if v6 == 0 then goto L41a470;
  #L41a450.  if v8 == 0 then goto L41a470;
  #L41a454.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41a45a.  v1:= temp @kind object;
  #L41a45c.  if v1 != 0 then goto L41a468;
  #L41a460.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41a466.  goto L41a46e;
  #L41a468.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a46e.  return @kind void;
  #L41a470.  if v8 == 0 then goto L41a476;
  #L41a474.  goto L41a4ec;
  #L41a476.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41a47a.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41a480.  v6:= temp @kind object;
  #L41a482.  v7:= "The mapper returned a null MaybeSource" @kind object;
  #L41a486.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a48c.  v6:= temp @kind object;
  #L41a48e.  v6:= (`io.reactivex.MaybeSource`) v6 @kind object;
  #L41a492.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v4;
  #L41a496.  v7:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` @kind object;
  #L41a49a.  call `subscribe`(v6, v7) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L41a4a0.  goto L41a4ec;
  #L41a4a2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41a4a4.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41a4aa.  v4:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a4ae.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a4b4.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41a4ba.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41a4c0.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41a4c6.  v1:= temp @kind object;
  #L41a4c8.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a4ce.  return @kind void;
  #L41a4d0.  v9:= 2I;
  #L41a4d2.  if v6 != v9 then goto L41a4ec;
  #L41a4d6.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` @kind object;
  #L41a4da.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L41a4de.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41a4e4.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v8;
  #L41a4e8.  goto L41a3de;
  #L41a4ec.  v5:= -v5 @kind int;
  #L41a4ee.  call temp:= `addAndGet`(v10, v5) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.addAndGet:(I)I` @kind virtual;
  #L41a4f4.  v5:= temp;
  #L41a4f6.  if v5 != 0 then goto L41a3de;
  #L41a4fa.  return @kind void;
  catch `java.lang.Throwable` @[L41a476..L41a492] goto L41a4a2;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L41a518.  v0:= 0I;
  #L41a51a.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v0;
  #L41a51e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41a524.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L41a538.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a53c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41a542.  v0:= temp;
  #L41a544.  if v0 == 0 then goto L41a56c;
  #L41a548.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a54c.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a550.  if v2 == v0 then goto L41a55e;
  #L41a554.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a558.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a55e.  v2:= 0I;
  #L41a560.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v2;
  #L41a564.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41a56a.  goto L41a572;
  #L41a56c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41a572.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.innerSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L41a584.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v1 @kind object;
  #L41a588.  v1:= 2I;
  #L41a58a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v1;
  #L41a58e.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41a594.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a30c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41a310.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a5a8.  v0:= 1I;
  #L41a5aa.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41a5ae.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41a5b4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a5c8.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a5cc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41a5d2.  v0:= temp;
  #L41a5d4.  if v0 == 0 then goto L41a5fc;
  #L41a5d8.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a5dc.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a5e0.  if v2 != v0 then goto L41a5ee;
  #L41a5e4.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` @kind object;
  #L41a5e8.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver;.dispose:()V` @kind virtual;
  #L41a5ee.  v2:= 1I;
  #L41a5f0.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41a5f4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41a5fa.  goto L41a602;
  #L41a5fc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41a602.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a614.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41a618.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41a61e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L41a624.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a638.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a63c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41a642.  v0:= temp;
  #L41a644.  if v0 == 0 then goto L41a656;
  #L41a648.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41a64c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41a650.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41a656.  return @kind void;
}
