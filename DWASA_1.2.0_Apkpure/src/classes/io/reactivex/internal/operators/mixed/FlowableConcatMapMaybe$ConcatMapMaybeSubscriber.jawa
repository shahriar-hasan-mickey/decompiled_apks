record `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.requested` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.STATE_ACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.STATE_INACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.STATE_RESULT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4183f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4183f6.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4183fa.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4183fe.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.prefetch` @type ^`int` := v3;
  #L418402.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L418406.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41840a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L418410.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L418414.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L418418.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L41841e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L418422.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver`;
  #L418426.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;)V` @kind direct;
  #L41842c.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` := v1 @kind object;
  #L418430.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L418434.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L41843a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L41843e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418450.  v0:= 1I;
  #L418452.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L418456.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41845a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L418460.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` @kind object;
  #L418464.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver;.dispose:()V` @kind virtual;
  #L41846a.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L418470.  v0:= temp;
  #L418472.  if v0 != 0 then goto L418486;
  #L418476.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41847a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L418480.  v0:= 0I;
  #L418482.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v0 @kind object;
  #L418486.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v15 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L418498.  call temp:= `getAndIncrement`(v15) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L41849e.  v0:= temp;
  #L4184a0.  if v0 == 0 then goto L4184a6;
  #L4184a4.  return @kind void;
  #L4184a6.  v0:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4184aa.  v1:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4184ae.  v2:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4184b2.  v3:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4184b6.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4184ba.  v5:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.prefetch` @type ^`int`;
  #L4184be.  v6:= v5 ^> 1;
  #L4184c2.  v5:= v5 - v6 @kind int;
  #L4184c4.  v6:= 1I;
  #L4184c6.  v7:= 1I;
  #L4184c8.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4184cc.  v9:= 0I;
  #L4184ce.  if v8 == 0 then goto L4184e0;
  #L4184d2.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4184d8.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L4184dc.  goto L418618;
  #L4184e0.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int`;
  #L4184e4.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L4184ea.  v10:= temp @kind object;
  #L4184ec.  if v10 == 0 then goto L41851e;
  #L4184f0.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4184f4.  if v1 == v10 then goto L418504;
  #L4184f8.  v10:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4184fc.  if v1 != v10 then goto L41851e;
  #L418500.  if v8 != 0 then goto L41851e;
  #L418504.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L41850a.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L41850e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L418514.  v1:= temp @kind object;
  #L418516.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41851c.  return @kind void;
  #L41851e.  v10:= 0I;
  #L418520.  if v8 != 0 then goto L4185de;
  #L418524.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.done` @type ^`boolean` @kind boolean;
  #L418528.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41852e.  v9:= temp @kind object;
  #L418530.  if v9 != 0 then goto L418538;
  #L418534.  v11:= 1I;
  #L418536.  goto L41853a;
  #L418538.  v11:= 0I;
  #L41853a.  if v8 == 0 then goto L41855e;
  #L41853e.  if v11 == 0 then goto L41855e;
  #L418542.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L418548.  v1:= temp @kind object;
  #L41854a.  if v1 != 0 then goto L418556;
  #L41854e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L418554.  goto L41855c;
  #L418556.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41855c.  return @kind void;
  #L41855e.  if v11 == 0 then goto L418564;
  #L418562.  goto L418618;
  #L418564.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.consumed` @type ^`int`;
  #L418568.  v8:= v8 + v6 @kind int;
  #L41856a.  if v8 != v5 then goto L418580;
  #L41856e.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.consumed` @type ^`int` := v10;
  #L418572.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418576.  v10:= (`long`) v5 @kind i2l;
  #L418578.  call `request`(v8, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41857e.  goto L418584;
  #L418580.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.consumed` @type ^`int` := v8;
  #L418584.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L418588.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41858e.  v8:= temp @kind object;
  #L418590.  v9:= "The mapper returned a null MaybeSource" @kind object;
  #L418594.  call temp:= `requireNonNull`(v8, v9) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41859a.  v8:= temp @kind object;
  #L41859c.  v8:= (`io.reactivex.MaybeSource`) v8 @kind object;
  #L4185a0.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v6;
  #L4185a4.  v9:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` @kind object;
  #L4185a8.  call `subscribe`(v8, v9) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4185ae.  goto L418618;
  #L4185b0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4185b2.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4185b8.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4185bc.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4185c2.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4185c8.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4185ce.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4185d4.  v1:= temp @kind object;
  #L4185d6.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4185dc.  return @kind void;
  #L4185de.  v11:= 2I;
  #L4185e0.  if v8 != v11 then goto L418618;
  #L4185e4.  v11:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.emitted` @type ^`long` @kind wide;
  #L4185e8.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4185ee.  v13:= temp @kind wide;
  #L4185f0.  v8:= lcmp(v11, v13);
  #L4185f4.  if v8 == 0 then goto L418618;
  #L4185f8.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` @kind object;
  #L4185fc.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L418600.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L418606.  v8:= 1L;
  #L41860a.  v11:= v11 + v8 @kind long;
  #L41860c.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.emitted` @type ^`long` := v11 @kind wide;
  #L418610.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v10;
  #L418614.  goto L4184c8;
  #L418618.  v7:= -v7 @kind int;
  #L41861a.  call temp:= `addAndGet`(v15, v7) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.addAndGet:(I)I` @kind virtual;
  #L418620.  v7:= temp;
  #L418622.  if v7 != 0 then goto L4184c8;
  #L418626.  return @kind void;
  catch `java.lang.Throwable` @[L418584..L4185a0] goto L4185b0;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L418644.  v0:= 0I;
  #L418646.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v0;
  #L41864a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L418650.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L418664.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L418668.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41866e.  v0:= temp;
  #L418670.  if v0 == 0 then goto L418698;
  #L418674.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418678.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41867c.  if v2 == v0 then goto L41868a;
  #L418680.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418684.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41868a.  v2:= 0I;
  #L41868c.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v2;
  #L418690.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L418696.  goto L41869e;
  #L418698.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41869e.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.innerSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4186b0.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v1 @kind object;
  #L4186b4.  v1:= 2I;
  #L4186b6.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v1;
  #L4186ba.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L4186c0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4186d4.  v0:= 1I;
  #L4186d6.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4186da.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L4186e0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4186f4.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4186f8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4186fe.  v0:= temp;
  #L418700.  if v0 == 0 then goto L418728;
  #L418704.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L418708.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41870c.  if v2 != v0 then goto L41871a;
  #L418710.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` @kind object;
  #L418714.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver;.dispose:()V` @kind virtual;
  #L41871a.  v2:= 1I;
  #L41871c.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L418720.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L418726.  goto L41872e;
  #L418728.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41872e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418740.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L418744.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41874a.  v2:= temp;
  #L41874c.  if v2 != 0 then goto L418770;
  #L418750.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L418754.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41875a.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L41875e.  v0:= "queue full?!" @kind object;
  #L418762.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L418768.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41876e.  return @kind void;
  #L418770.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L418776.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L418788.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41878c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L418792.  v0:= temp;
  #L418794.  if v0 == 0 then goto L4187b2;
  #L418798.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L41879c.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4187a0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4187a6.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.prefetch` @type ^`int`;
  #L4187aa.  v0:= (`long`) v0 @kind i2l;
  #L4187ac.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4187b2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4187c4.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4187c8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4187ce.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L4187d4.  return @kind void;
}
