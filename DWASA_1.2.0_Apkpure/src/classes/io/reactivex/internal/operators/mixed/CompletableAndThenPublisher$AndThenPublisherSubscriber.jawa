record `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.CompletableObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.other` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$AndThenPublisherSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L417d08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L417d0e.  v0.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L417d12.  v0.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.other` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L417d16.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L417d1a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L417d20.  v0.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L417d24.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$AndThenPublisherSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417d38.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L417d3c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L417d42.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L417d48.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$AndThenPublisherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L417d5c.  v0:= v2.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.other` @type ^`org.reactivestreams.Publisher` @kind object;
  #L417d60.  if v0 != 0 then goto L417d70;
  #L417d64.  v0:= v2.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L417d68.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L417d6e.  goto L417d7c;
  #L417d70.  v1:= 0I;
  #L417d72.  v2.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.other` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L417d76.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L417d7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$AndThenPublisherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417d90.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L417d94.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L417d9a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$AndThenPublisherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417dac.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L417db0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L417db6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$AndThenPublisherSubscriber;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417dc8.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L417dcc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L417dd2.  v0:= temp;
  #L417dd4.  if v0 == 0 then goto L417de6;
  #L417dd8.  v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L417ddc.  v2:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L417de0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L417de6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$AndThenPublisherSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417df8.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L417dfc.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L417e02.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$AndThenPublisherSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417e14.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L417e18.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L417e1e.  return @kind void;
}
