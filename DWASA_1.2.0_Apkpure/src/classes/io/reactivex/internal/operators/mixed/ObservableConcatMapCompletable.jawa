record `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.errorMode` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.prefetch` @AccessFlag FINAL;
  `io.reactivex.Observable` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable;.<init>:(Lio/reactivex/Observable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41a1fc.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L41a202.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.source` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L41a206.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41a20a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L41a20e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.prefetch` @type ^`int` := v4;
  #L41a212.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable` v5 @kind this, `io.reactivex.CompletableObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41a224.  v0:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.source` @type ^`io.reactivex.Observable` @kind object;
  #L41a228.  v1:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41a22c.  call temp:= `tryAsCompletable`(v0, v1, v6) @signature `Lio/reactivex/internal/operators/mixed/ScalarXMapZHelper;.tryAsCompletable:(Ljava/lang/Object;Lio/reactivex/functions/Function;Lio/reactivex/CompletableObserver;)Z` @kind static;
  #L41a232.  v0:= temp;
  #L41a234.  if v0 != 0 then goto L41a258;
  #L41a238.  v0:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.source` @type ^`io.reactivex.Observable` @kind object;
  #L41a23c.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver`;
  #L41a240.  v2:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41a244.  v3:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a248.  v4:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable.prefetch` @type ^`int`;
  #L41a24c.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L41a252.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L41a258.  return @kind void;
}
