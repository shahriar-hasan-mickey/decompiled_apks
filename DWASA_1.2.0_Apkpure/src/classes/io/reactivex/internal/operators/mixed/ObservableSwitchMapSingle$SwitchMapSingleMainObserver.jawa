record `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41b45c.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`;
  #L41b460.  v1:= 0I;
  #L41b462.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;)V` @kind direct;
  #L41b468.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` := v0 @kind object;
  #L41b46c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41b480.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41b486.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L41b48a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41b48e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L41b492.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L41b496.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L41b49c.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41b4a0.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41b4a4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41b4aa.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41b4ae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b4c0.  v0:= 1I;
  #L41b4c2.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41b4c6.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41b4ca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41b4d0.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.disposeInner:()V` @kind virtual;
  #L41b4d6.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41b4e8.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b4ec.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` @kind object;
  #L41b4f0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41b4f6.  v0:= temp @kind object;
  #L41b4f8.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`) v0 @kind object;
  #L41b4fc.  if v0 == 0 then goto L41b50e;
  #L41b500.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` @kind object;
  #L41b504.  if v0 == v1 then goto L41b50e;
  #L41b508.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;.dispose:()V` @kind virtual;
  #L41b50e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L41b520.  call temp:= `getAndIncrement`(v8) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.getAndIncrement:()I` @kind virtual;
  #L41b526.  v0:= temp;
  #L41b528.  if v0 == 0 then goto L41b52e;
  #L41b52c.  return @kind void;
  #L41b52e.  v0:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41b532.  v1:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41b536.  v2:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b53a.  v3:= 1I;
  #L41b53c.  v4:= 1I;
  #L41b53e.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41b542.  if v5 == 0 then goto L41b548;
  #L41b546.  return @kind void;
  #L41b548.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b54e.  v5:= temp @kind object;
  #L41b550.  if v5 == 0 then goto L41b56c;
  #L41b554.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L41b558.  if v5 != 0 then goto L41b56c;
  #L41b55c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41b562.  v1:= temp @kind object;
  #L41b564.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41b56a.  return @kind void;
  #L41b56c.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.done` @type ^`boolean` @kind boolean;
  #L41b570.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b576.  v6:= temp @kind object;
  #L41b578.  v6:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`) v6 @kind object;
  #L41b57c.  if v6 != 0 then goto L41b584;
  #L41b580.  v7:= 1I;
  #L41b582.  goto L41b586;
  #L41b584.  v7:= 0I;
  #L41b586.  if v5 == 0 then goto L41b5aa;
  #L41b58a.  if v7 == 0 then goto L41b5aa;
  #L41b58e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41b594.  v1:= temp @kind object;
  #L41b596.  if v1 == 0 then goto L41b5a2;
  #L41b59a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41b5a0.  goto L41b5a8;
  #L41b5a2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41b5a8.  return @kind void;
  #L41b5aa.  if v7 != 0 then goto L41b5cc;
  #L41b5ae.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver.item` @type ^`java.lang.Object` @kind object;
  #L41b5b2.  if v5 != 0 then goto L41b5b8;
  #L41b5b6.  goto L41b5cc;
  #L41b5b8.  v5:= 0I;
  #L41b5ba.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41b5c0.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver.item` @type ^`java.lang.Object` @kind object;
  #L41b5c4.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41b5ca.  goto L41b53e;
  #L41b5cc.  v4:= -v4 @kind int;
  #L41b5ce.  call temp:= `addAndGet`(v8, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.addAndGet:(I)I` @kind virtual;
  #L41b5d4.  v4:= temp;
  #L41b5d6.  if v4 != 0 then goto L41b53e;
  #L41b5da.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.innerError:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41b5ec.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b5f0.  v1:= 0I;
  #L41b5f2.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41b5f8.  v3:= temp;
  #L41b5fa.  if v3 == 0 then goto L41b62e;
  #L41b5fe.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41b602.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41b608.  v3:= temp;
  #L41b60a.  if v3 == 0 then goto L41b62e;
  #L41b60e.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L41b612.  if v3 != 0 then goto L41b626;
  #L41b616.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41b61a.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41b620.  call `disposeInner`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.disposeInner:()V` @kind virtual;
  #L41b626.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.drain:()V` @kind virtual;
  #L41b62c.  return @kind void;
  #L41b62e.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41b634.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b444.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L41b448.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b648.  v0:= 1I;
  #L41b64a.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41b64e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.drain:()V` @kind virtual;
  #L41b654.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b668.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41b66c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41b672.  v0:= temp;
  #L41b674.  if v0 == 0 then goto L41b694;
  #L41b678.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L41b67c.  if v2 != 0 then goto L41b686;
  #L41b680.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.disposeInner:()V` @kind virtual;
  #L41b686.  v2:= 1I;
  #L41b688.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L41b68c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.drain:()V` @kind virtual;
  #L41b692.  goto L41b69a;
  #L41b694.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41b69a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41b6ac.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b6b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b6b6.  v0:= temp @kind object;
  #L41b6b8.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`) v0 @kind object;
  #L41b6bc.  if v0 == 0 then goto L41b6c6;
  #L41b6c0.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;.dispose:()V` @kind virtual;
  #L41b6c6.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41b6ca.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41b6d0.  v4:= temp @kind object;
  #L41b6d2.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L41b6d6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b6dc.  v4:= temp @kind object;
  #L41b6de.  v4:= (`io.reactivex.SingleSource`) v4 @kind object;
  #L41b6e2.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`;
  #L41b6e6.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;)V` @kind direct;
  #L41b6ec.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b6f0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41b6f6.  v1:= temp @kind object;
  #L41b6f8.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`) v1 @kind object;
  #L41b6fc.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` @kind object;
  #L41b700.  if v1 != v2 then goto L41b706;
  #L41b704.  goto L41b71c;
  #L41b706.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b70a.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41b710.  v1:= temp;
  #L41b712.  if v1 == 0 then goto L41b6ec;
  #L41b716.  call `subscribe`(v4, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L41b71c.  return @kind void;
  #L41b71e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b720.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41b726.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41b72a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41b730.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41b734.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` @kind object;
  #L41b738.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41b73e.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41b744.  return @kind void;
  catch `java.lang.Throwable` @[L41b6c6..L41b6e2] goto L41b71e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b764.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41b768.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41b76e.  v0:= temp;
  #L41b770.  if v0 == 0 then goto L41b782;
  #L41b774.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41b778.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L41b77c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41b782.  return @kind void;
}
