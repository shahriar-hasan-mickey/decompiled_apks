record `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.delayErrors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.mapper` @AccessFlag FINAL;
  `io.reactivex.Observable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle;.<init>:(Lio/reactivex/Observable;Lio/reactivex/functions/Function;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41b794.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L41b79a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.source` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L41b79e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41b7a2.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L41b7a6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41b7b8.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.source` @type ^`io.reactivex.Observable` @kind object;
  #L41b7bc.  v1:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41b7c0.  call temp:= `tryAsSingle`(v0, v1, v5) @signature `Lio/reactivex/internal/operators/mixed/ScalarXMapZHelper;.tryAsSingle:(Ljava/lang/Object;Lio/reactivex/functions/Function;Lio/reactivex/Observer;)Z` @kind static;
  #L41b7c6.  v0:= temp;
  #L41b7c8.  if v0 != 0 then goto L41b7e8;
  #L41b7cc.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.source` @type ^`io.reactivex.Observable` @kind object;
  #L41b7d0.  v1:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver`;
  #L41b7d4.  v2:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41b7d8.  v3:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.delayErrors` @type ^`boolean` @kind boolean;
  #L41b7dc.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L41b7e2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L41b7e8.  return @kind void;
}
