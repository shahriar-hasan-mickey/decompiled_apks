record `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L419e20.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L419e26.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L419e2a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L419e2e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L419e32.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int` := v4;
  #L419e36.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L419e3a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L419e40.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L419e44.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver`;
  #L419e48.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;)V` @kind direct;
  #L419e4e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` := v1 @kind object;
  #L419e52.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419e64.  v0:= 1I;
  #L419e66.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L419e6a.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L419e6e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L419e74.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L419e78.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.dispose:()V` @kind virtual;
  #L419e7e.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.getAndIncrement:()I` @kind virtual;
  #L419e84.  v0:= temp;
  #L419e86.  if v0 != 0 then goto L419e94;
  #L419e8a.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L419e8e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L419e94.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v6 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L419ea8.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.getAndIncrement:()I` @kind virtual;
  #L419eae.  v0:= temp;
  #L419eb0.  if v0 == 0 then goto L419eb6;
  #L419eb4.  return @kind void;
  #L419eb6.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L419eba.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L419ebe.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` @kind boolean;
  #L419ec2.  if v2 == 0 then goto L419ed2;
  #L419ec6.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L419eca.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L419ed0.  return @kind void;
  #L419ed2.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` @kind boolean;
  #L419ed6.  if v2 != 0 then goto L419fc8;
  #L419eda.  v2:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L419ede.  v3:= 1I;
  #L419ee0.  if v1 != v2 then goto L419f12;
  #L419ee4.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L419eea.  v2:= temp @kind object;
  #L419eec.  if v2 == 0 then goto L419f12;
  #L419ef0.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v3 @kind boolean;
  #L419ef4.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L419ef8.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L419efe.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L419f04.  v0:= temp @kind object;
  #L419f06.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L419f0a.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L419f10.  return @kind void;
  #L419f12.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` @kind boolean;
  #L419f16.  v4:= 0I;
  #L419f18.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L419f1c.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L419f22.  v5:= temp @kind object;
  #L419f24.  if v5 == 0 then goto L419f48;
  #L419f28.  v4:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L419f2c.  call temp:= `apply`(v4, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419f32.  v4:= temp @kind object;
  #L419f34.  v5:= "The mapper returned a null CompletableSource" @kind object;
  #L419f38.  call temp:= `requireNonNull`(v4, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f3e.  v4:= temp @kind object;
  #L419f40.  v4:= (`io.reactivex.CompletableSource`) v4 @kind object;
  #L419f44.  v5:= 0I;
  #L419f46.  goto L419f4a;
  #L419f48.  v5:= 1I;
  #L419f4a.  if v2 == 0 then goto L419f7a;
  #L419f4e.  if v5 == 0 then goto L419f7a;
  #L419f52.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v3 @kind boolean;
  #L419f56.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L419f5c.  v0:= temp @kind object;
  #L419f5e.  if v0 == 0 then goto L419f6e;
  #L419f62.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L419f66.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L419f6c.  goto L419f78;
  #L419f6e.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L419f72.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L419f78.  return @kind void;
  #L419f7a.  if v5 != 0 then goto L419fc8;
  #L419f7e.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v3 @kind boolean;
  #L419f82.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L419f86.  call `subscribe`(v4, v2) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L419f8c.  goto L419fc8;
  #L419f8e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L419f90.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L419f96.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v3 @kind boolean;
  #L419f9a.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L419f9e.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L419fa4.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L419fa8.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L419fae.  call temp:= `addThrowable`(v0, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L419fb4.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L419fba.  v0:= temp @kind object;
  #L419fbc.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L419fc0.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L419fc6.  return @kind void;
  #L419fc8.  call temp:= `decrementAndGet`(v6) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.decrementAndGet:()I` @kind virtual;
  #L419fce.  v2:= temp;
  #L419fd0.  if v2 != 0 then goto L419ebe;
  #L419fd4.  return @kind void;
  catch `java.lang.Throwable` @[L419f18..L419f44] goto L419f8e;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L419ff4.  v0:= 0I;
  #L419ff6.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L419ffa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L41a000.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L41a014.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a018.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41a01e.  v0:= temp;
  #L41a020.  if v0 == 0 then goto L41a084;
  #L41a024.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a028.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a02c.  if v2 != v0 then goto L41a076;
  #L41a030.  v2:= 1I;
  #L41a032.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v2 @kind boolean;
  #L41a036.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a03a.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a040.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a044.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41a04a.  v2:= temp @kind object;
  #L41a04c.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L41a050.  if v2 == v0 then goto L41a05e;
  #L41a054.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41a058.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a05e.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.getAndIncrement:()I` @kind virtual;
  #L41a064.  v2:= temp;
  #L41a066.  if v2 != 0 then goto L41a08a;
  #L41a06a.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a06e.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41a074.  goto L41a08a;
  #L41a076.  v2:= 0I;
  #L41a078.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v2 @kind boolean;
  #L41a07c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L41a082.  goto L41a08a;
  #L41a084.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41a08a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419e08.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` @kind boolean;
  #L419e0c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a09c.  v0:= 1I;
  #L41a09e.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L41a0a2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L41a0a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41a0bc.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a0c0.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41a0c6.  v0:= temp;
  #L41a0c8.  if v0 == 0 then goto L41a12a;
  #L41a0cc.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a0d0.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41a0d4.  v1:= 1I;
  #L41a0d6.  if v3 != v0 then goto L41a11e;
  #L41a0da.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v1 @kind boolean;
  #L41a0de.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L41a0e2.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.dispose:()V` @kind virtual;
  #L41a0e8.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41a0ec.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41a0f2.  v3:= temp @kind object;
  #L41a0f4.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L41a0f8.  if v3 == v0 then goto L41a106;
  #L41a0fc.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41a100.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a106.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.getAndIncrement:()I` @kind virtual;
  #L41a10c.  v3:= temp;
  #L41a10e.  if v3 != 0 then goto L41a130;
  #L41a112.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a116.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41a11c.  goto L41a130;
  #L41a11e.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L41a122.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L41a128.  goto L41a130;
  #L41a12a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41a130.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a144.  if v2 == 0 then goto L41a152;
  #L41a148.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a14c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41a152.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L41a158.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41a16c.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41a170.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41a176.  v0:= temp;
  #L41a178.  if v0 == 0 then goto L41a1e8;
  #L41a17c.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L41a180.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L41a184.  if v0 == 0 then goto L41a1cc;
  #L41a188.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L41a18c.  v0:= 3I;
  #L41a18e.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueDisposable;.requestFusion:(I)I` @kind interface;
  #L41a194.  v0:= temp;
  #L41a196.  v1:= 1I;
  #L41a198.  if v0 != v1 then goto L41a1b6;
  #L41a19c.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L41a1a0.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L41a1a4.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41a1a8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41a1ae.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L41a1b4.  return @kind void;
  #L41a1b6.  v1:= 2I;
  #L41a1b8.  if v0 != v1 then goto L41a1cc;
  #L41a1bc.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L41a1c0.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41a1c4.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41a1ca.  return @kind void;
  #L41a1cc.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L41a1d0.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int`;
  #L41a1d4.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L41a1da.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L41a1de.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41a1e2.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41a1e8.  return @kind void;
}
