record `io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.defaultValue` @AccessFlag FINAL;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$ToSingleMaybeSubscriber;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L417050.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L417056.  v0.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L41705a.  v0.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.defaultValue` @type ^`java.lang.Object` := v2 @kind object;
  #L41705e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$ToSingleMaybeSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417070.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L417074.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41707a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41707e.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L417082.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$ToSingleMaybeSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417030.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L417034.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41703a.  v0:= temp;
  #L41703c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$ToSingleMaybeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L417094.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L417098.  v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L41709c.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.defaultValue` @type ^`java.lang.Object` @kind object;
  #L4170a0.  if v0 == 0 then goto L4170b0;
  #L4170a4.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4170a8.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4170ae.  goto L4170c8;
  #L4170b0.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4170b4.  v1:= new `java.util.NoSuchElementException`;
  #L4170b8.  v2:= "The MaybeSource is empty" @kind object;
  #L4170bc.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4170c2.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4170c8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$ToSingleMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4170dc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4170e0.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4170e4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4170e8.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4170ee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$ToSingleMaybeSubscriber;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417100.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L417104.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41710a.  v0:= temp;
  #L41710c.  if v0 == 0 then goto L41711e;
  #L417110.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L417114.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L417118.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41711e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$ToSingleMaybeSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417130.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L417134.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L417138.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41713c.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L417142.  return @kind void;
}
