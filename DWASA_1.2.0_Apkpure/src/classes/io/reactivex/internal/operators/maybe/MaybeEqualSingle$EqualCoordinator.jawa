record `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.isEqual` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.SingleObserver` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L412200.  v0:= 2I;
  #L412202.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L412208.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L41220c.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.isEqual` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L412210.  v2:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver`;
  #L412214.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;)V` @kind direct;
  #L41221a.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` := v2 @kind object;
  #L41221e.  v2:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver`;
  #L412222.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;)V` @kind direct;
  #L412228.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` := v2 @kind object;
  #L41222c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412240.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L412244.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @kind virtual;
  #L41224a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L41224e.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @kind virtual;
  #L412254.  return @kind void;
}
procedure `void` `done`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.done:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L412268.  call temp:= `decrementAndGet`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.decrementAndGet:()I` @kind virtual;
  #L41226e.  v0:= temp;
  #L412270.  if v0 != 0 then goto L4122e0;
  #L412274.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L412278.  v0:= v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.value` @type ^`java.lang.Object` @kind object;
  #L41227c.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L412280.  v1:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.value` @type ^`java.lang.Object` @kind object;
  #L412284.  if v0 == 0 then goto L4122c0;
  #L412288.  if v1 == 0 then goto L4122c0;
  #L41228c.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.isEqual` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L412290.  call temp:= `test`(v2, v0, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L412296.  v0:= temp;
  #L412298.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41229c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4122a2.  v0:= temp @kind object;
  #L4122a4.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4122aa.  goto L4122e0;
  #L4122ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4122ae.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4122b4.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4122b8.  call `onError`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4122be.  return @kind void;
  #L4122c0.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4122c4.  if v0 != 0 then goto L4122d0;
  #L4122c8.  if v1 != 0 then goto L4122d0;
  #L4122cc.  v0:= 1I;
  #L4122ce.  goto L4122d2;
  #L4122d0.  v0:= 0I;
  #L4122d2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4122d8.  v0:= temp @kind object;
  #L4122da.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4122e0.  return @kind void;
  catch `java.lang.Throwable` @[L41228c..L412298] goto L4122ac;
}
procedure `void` `error`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.error:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L412300.  v0:= 0I;
  #L412302.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.getAndSet:(I)I` @kind virtual;
  #L412308.  v0:= temp;
  #L41230a.  if v0 <= 0 then goto L412334;
  #L41230e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L412312.  if v2 != v0 then goto L412322;
  #L412316.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L41231a.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @kind virtual;
  #L412320.  goto L412328;
  #L412322.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @kind virtual;
  #L412328.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41232c.  call `onError`(v2, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412332.  goto L41233a;
  #L412334.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41233a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4121d4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L4121d8.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L4121de.  v0:= temp @kind object;
  #L4121e0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4121e4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4121ea.  v0:= temp;
  #L4121ec.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.subscribe:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @AccessFlag  {
    temp;
    v0;

  #L41234c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L412350.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L412356.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L41235a.  call `subscribe`(v3, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L412360.  return @kind void;
}
