record `io.reactivex.internal.operators.maybe.MaybeFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `java.util.concurrent.Callable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.maybe.MaybeFromCallable.callable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L413c0c.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L413c12.  v0.`io.reactivex.internal.operators.maybe.MaybeFromCallable.callable` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L413c16.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.maybe.MaybeFromCallable` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCallable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413bec.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromCallable.callable` @type ^`java.util.concurrent.Callable` @kind object;
  #L413bf0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L413bf6.  v0:= temp @kind object;
  #L413bf8.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeFromCallable` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCallable;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L413c28.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L413c2e.  v0:= temp @kind object;
  #L413c30.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L413c36.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L413c3c.  v1:= temp;
  #L413c3e.  if v1 != 0 then goto L413c90;
  #L413c42.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFromCallable.callable` @type ^`java.util.concurrent.Callable` @kind object;
  #L413c46.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L413c4c.  v1:= temp @kind object;
  #L413c4e.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L413c54.  v0:= temp;
  #L413c56.  if v0 != 0 then goto L413c90;
  #L413c5a.  if v1 != 0 then goto L413c66;
  #L413c5e.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L413c64.  goto L413c90;
  #L413c66.  call `onSuccess`(v3, v1) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L413c6c.  goto L413c90;
  #L413c6e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L413c70.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L413c76.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L413c7c.  v0:= temp;
  #L413c7e.  if v0 != 0 then goto L413c8a;
  #L413c82.  call `onError`(v3, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L413c88.  goto L413c90;
  #L413c8a.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L413c90.  return @kind void;
  catch `java.lang.Throwable` @[L413c42..L413c4e] goto L413c6e;
}
