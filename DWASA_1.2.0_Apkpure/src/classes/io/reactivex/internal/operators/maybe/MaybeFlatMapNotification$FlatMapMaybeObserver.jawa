record `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onCompleteSupplier` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onErrorMapper` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onSuccessMapper` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L413320.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L413326.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L41332a.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onSuccessMapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41332e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onErrorMapper` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L413332.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onCompleteSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L413336.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413348.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41334e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L413352.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L413358.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4132f8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L4132fe.  v0:= temp @kind object;
  #L413300.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L413304.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41330a.  v0:= temp;
  #L41330c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41336c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onCompleteSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L413370.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L413376.  v0:= temp @kind object;
  #L413378.  v1:= "The onCompleteSupplier returned a null MaybeSource" @kind object;
  #L41337c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L413382.  v0:= temp @kind object;
  #L413384.  v0:= (`io.reactivex.MaybeSource`) v0 @kind object;
  #L413388.  v1:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver$InnerObserver`;
  #L41338c.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;)V` @kind direct;
  #L413392.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L413398.  return @kind void;
  #L41339a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L41339c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4133a2.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4133a6.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4133ac.  return @kind void;
  catch `java.lang.Exception` @[L41336c..L413388] goto L41339a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4133d0.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onErrorMapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L4133d4.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4133da.  v0:= temp @kind object;
  #L4133dc.  v1:= "The onErrorMapper returned a null MaybeSource" @kind object;
  #L4133e0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4133e6.  v0:= temp @kind object;
  #L4133e8.  v0:= (`io.reactivex.MaybeSource`) v0 @kind object;
  #L4133ec.  v6:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver$InnerObserver`;
  #L4133f0.  call `<init>`(v6, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;)V` @kind direct;
  #L4133f6.  call `subscribe`(v0, v6) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4133fc.  return @kind void;
  #L4133fe.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L413400.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L413406.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41340a.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L41340e.  v3:= 2I;
  #L413410.  v3:= new `java.lang.Throwable`[v3];
  #L413414.  v4:= 0I;
  #L413416.  v3[v4]:= v6 @kind object;
  #L41341a.  v6:= 1I;
  #L41341c.  v3[v6]:= v0 @kind object;
  #L413420.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L413426.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41342c.  return @kind void;
  catch `java.lang.Exception` @[L4133d0..L4133ec] goto L4133fe;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413450.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L413454.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41345a.  v0:= temp;
  #L41345c.  if v0 == 0 then goto L41346e;
  #L413460.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L413464.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413468.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41346e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413480.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onSuccessMapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L413484.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41348a.  v2:= temp @kind object;
  #L41348c.  v0:= "The onSuccessMapper returned a null MaybeSource" @kind object;
  #L413490.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L413496.  v2:= temp @kind object;
  #L413498.  v2:= (`io.reactivex.MaybeSource`) v2 @kind object;
  #L41349c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver$InnerObserver`;
  #L4134a0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;)V` @kind direct;
  #L4134a6.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4134ac.  return @kind void;
  #L4134ae.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L4134b0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4134b6.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4134ba.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4134c0.  return @kind void;
  catch `java.lang.Exception` @[L413480..L41349c] goto L4134ae;
}
