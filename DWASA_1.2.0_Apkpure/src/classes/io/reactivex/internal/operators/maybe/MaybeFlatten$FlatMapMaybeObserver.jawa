record `io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4139d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4139da.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4139de.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4139e2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4139f4.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4139fa.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4139fe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L413a04.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4139ac.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L4139b2.  v0:= temp @kind object;
  #L4139b4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4139b8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4139be.  v0:= temp;
  #L4139c0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413a18.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413a1c.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L413a22.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413a34.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413a38.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L413a3e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413a50.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L413a54.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L413a5a.  v0:= temp;
  #L413a5c.  if v0 == 0 then goto L413a6e;
  #L413a60.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L413a64.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413a68.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L413a6e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413a80.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L413a84.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L413a8a.  v2:= temp @kind object;
  #L413a8c.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L413a90.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L413a96.  v2:= temp @kind object;
  #L413a98.  v2:= (`io.reactivex.MaybeSource`) v2 @kind object;
  #L413a9c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;.isDisposed:()Z` @kind virtual;
  #L413aa2.  v0:= temp;
  #L413aa4.  if v0 != 0 then goto L413ab8;
  #L413aa8.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver$InnerObserver`;
  #L413aac.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;)V` @kind direct;
  #L413ab2.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L413ab8.  return @kind void;
  #L413aba.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L413abc.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L413ac2.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413ac6.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L413acc.  return @kind void;
  catch `java.lang.Exception` @[L413a80..L413a9c] goto L413aba;
}
