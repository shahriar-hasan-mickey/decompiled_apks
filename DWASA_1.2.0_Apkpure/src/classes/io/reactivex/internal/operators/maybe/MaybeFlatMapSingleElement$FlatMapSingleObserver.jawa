record `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapSingleObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L413808.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41380e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver.parent` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L413812.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L413816.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413828.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41382c.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L413832.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413844.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver.parent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L413848.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41384e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413860.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413864.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41386a.  return @kind void;
}
