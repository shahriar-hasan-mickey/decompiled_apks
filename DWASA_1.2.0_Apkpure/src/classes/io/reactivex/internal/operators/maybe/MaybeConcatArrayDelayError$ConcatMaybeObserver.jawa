record `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.index` @AccessFlag ;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.produced` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.requested` @AccessFlag FINAL;
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.<init>:(Lorg/reactivestreams/Subscriber;[Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L410710.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L410716.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41071a.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.sources` @type ^`io.reactivex.MaybeSource`[] := v2 @kind object;
  #L41071e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L410722.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L410728.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L41072c.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L410730.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L410736.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L41073a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41073e.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L410742.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L410748.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41074c.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L410750.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L410756.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41075a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41076c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L410770.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L410776.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L410788.  call temp:= `getAndIncrement`(v11) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.getAndIncrement:()I` @kind virtual;
  #L41078e.  v0:= temp;
  #L410790.  if v0 == 0 then goto L410796;
  #L410794.  return @kind void;
  #L410796.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41079a.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41079e.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4107a2.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4107a8.  v3:= temp;
  #L4107aa.  v4:= 0I;
  #L4107ac.  if v3 == 0 then goto L4107b8;
  #L4107b0.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4107b6.  return @kind void;
  #L4107b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4107be.  v3:= temp @kind object;
  #L4107c0.  if v3 == 0 then goto L41086a;
  #L4107c4.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L4107c8.  v6:= 1I;
  #L4107ca.  if v3 == v5 then goto L410804;
  #L4107ce.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.produced` @type ^`long` @kind wide;
  #L4107d2.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4107d6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4107dc.  v9:= temp @kind wide;
  #L4107de.  v5:= lcmp(v7, v9);
  #L4107e2.  if v5 == 0 then goto L4107fe;
  #L4107e6.  v9:= 1L;
  #L4107ea.  v7:= v7 + v9 @kind long;
  #L4107ec.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.produced` @type ^`long` := v7 @kind wide;
  #L4107f0.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4107f6.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4107fc.  goto L41080a;
  #L4107fe.  v3:= 0I;
  #L410800.  v6:= 0I;
  #L410802.  goto L41080a;
  #L410804.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41080a.  if v6 == 0 then goto L41086a;
  #L41080e.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L410814.  v3:= temp;
  #L410816.  if v3 != 0 then goto L41086a;
  #L41081a.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.index` @type ^`int`;
  #L41081e.  v4:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.sources` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L410822.  v5:= length @variable v4;
  #L410824.  if v3 != v5 then goto L410858;
  #L410828.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41082c.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L410832.  v0:= temp @kind object;
  #L410834.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L410838.  if v0 == 0 then goto L410850;
  #L41083c.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L410840.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L410846.  v0:= temp @kind object;
  #L410848.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41084e.  goto L410856;
  #L410850.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L410856.  return @kind void;
  #L410858.  v5:= v3 + 1;
  #L41085c.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.index` @type ^`int` := v5;
  #L410860.  v3:= v4[v3] @kind object;
  #L410864.  call `subscribe`(v3, v11) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L41086a.  call temp:= `decrementAndGet`(v11) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.decrementAndGet:()I` @kind virtual;
  #L410870.  v3:= temp;
  #L410872.  if v3 != 0 then goto L4107a2;
  #L410876.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L410888.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41088c.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L410890.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L410896.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L41089c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4108b0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4108b4.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L4108b8.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4108be.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4108c2.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4108c8.  v0:= temp;
  #L4108ca.  if v0 == 0 then goto L4108d6;
  #L4108ce.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L4108d4.  goto L4108dc;
  #L4108d6.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4108dc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4108f0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4108f4.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4108fa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41090c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410910.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L410916.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L41091c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410930.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L410936.  v0:= temp;
  #L410938.  if v0 == 0 then goto L41094c;
  #L41093c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L410940.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L410946.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L41094c.  return @kind void;
}
