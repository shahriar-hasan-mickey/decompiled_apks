record `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.produced` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.requested` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4109f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4109f6.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4109fa.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.sources` @type ^`java.util.Iterator` := v2 @kind object;
  #L4109fe.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L410a02.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L410a08.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L410a0c.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L410a10.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L410a16.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L410a1a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L410a1e.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L410a22.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L410a28.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L410a2c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410a40.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L410a44.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L410a4a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L410a5c.  call temp:= `getAndIncrement`(v11) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.getAndIncrement:()I` @kind virtual;
  #L410a62.  v0:= temp;
  #L410a64.  if v0 == 0 then goto L410a6a;
  #L410a68.  return @kind void;
  #L410a6a.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410a6e.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410a72.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L410a76.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L410a7c.  v3:= temp;
  #L410a7e.  v4:= 0I;
  #L410a80.  if v3 == 0 then goto L410a8c;
  #L410a84.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L410a8a.  return @kind void;
  #L410a8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L410a92.  v3:= temp @kind object;
  #L410a94.  if v3 == 0 then goto L410b4a;
  #L410a98.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L410a9c.  v6:= 1I;
  #L410a9e.  if v3 == v5 then goto L410ad8;
  #L410aa2.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.produced` @type ^`long` @kind wide;
  #L410aa6.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L410aaa.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L410ab0.  v9:= temp @kind wide;
  #L410ab2.  v5:= lcmp(v7, v9);
  #L410ab6.  if v5 == 0 then goto L410ad2;
  #L410aba.  v9:= 1L;
  #L410abe.  v7:= v7 + v9 @kind long;
  #L410ac0.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.produced` @type ^`long` := v7 @kind wide;
  #L410ac4.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L410aca.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L410ad0.  goto L410ade;
  #L410ad2.  v3:= 0I;
  #L410ad4.  v6:= 0I;
  #L410ad6.  goto L410ade;
  #L410ad8.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L410ade.  if v6 == 0 then goto L410b4a;
  #L410ae2.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L410ae8.  v3:= temp;
  #L410aea.  if v3 != 0 then goto L410b4a;
  #L410aee.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.sources` @type ^`java.util.Iterator` @kind object;
  #L410af2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L410af8.  v3:= temp;
  #L410afa.  if v3 == 0 then goto L410b32;
  #L410afe.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.sources` @type ^`java.util.Iterator` @kind object;
  #L410b02.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L410b08.  v3:= temp @kind object;
  #L410b0a.  v4:= "The source Iterator returned a null MaybeSource" @kind object;
  #L410b0e.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L410b14.  v3:= temp @kind object;
  #L410b16.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L410b1a.  call `subscribe`(v3, v11) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L410b20.  goto L410b4a;
  #L410b22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L410b24.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L410b2a.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410b30.  return @kind void;
  #L410b32.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L410b38.  goto L410b4a;
  #L410b3a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L410b3c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L410b42.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410b48.  return @kind void;
  #L410b4a.  call temp:= `decrementAndGet`(v11) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.decrementAndGet:()I` @kind virtual;
  #L410b50.  v3:= temp;
  #L410b52.  if v3 != 0 then goto L410a76;
  #L410b56.  return @kind void;
  catch `java.lang.Throwable` @[L410aee..L410afa] goto L410b3a;
  catch `java.lang.Throwable` @[L410afe..L410b1a] goto L410b22;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L410b80.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410b84.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L410b88.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L410b8e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L410b94.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410ba8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410bac.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410bb2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410bc4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L410bc8.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L410bce.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410be0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410be4.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L410bea.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L410bf0.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410c04.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L410c0a.  v0:= temp;
  #L410c0c.  if v0 == 0 then goto L410c20;
  #L410c10.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L410c14.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L410c1a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L410c20.  return @kind void;
}
