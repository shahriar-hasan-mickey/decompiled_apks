record `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `boolean` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.consumed` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.outputFused` @AccessFlag ;
  `io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L414ad8.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L414ade.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L414ae2.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @type ^`int` := v2;
  #L414ae6.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L414aea.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L414af0.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L414af4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L414af8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L414afe.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L414b02.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L414b06.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L414b0c.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L414b10.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` := v3 @kind object;
  #L414b14.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414b28.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L414b2c.  if v0 != 0 then goto L414b56;
  #L414b30.  v0:= 1I;
  #L414b32.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L414b36.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L414b3a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L414b40.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.getAndIncrement:()I` @kind virtual;
  #L414b46.  v0:= temp;
  #L414b48.  if v0 != 0 then goto L414b56;
  #L414b4c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414b50.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.clear:()V` @kind interface;
  #L414b56.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414b68.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414b6c.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.clear:()V` @kind interface;
  #L414b72.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L414b84.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.getAndIncrement:()I` @kind virtual;
  #L414b8a.  v0:= temp;
  #L414b8c.  if v0 == 0 then goto L414b92;
  #L414b90.  return @kind void;
  #L414b92.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.outputFused` @type ^`boolean` @kind boolean;
  #L414b96.  if v0 == 0 then goto L414ba2;
  #L414b9a.  call `drainFused`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drainFused:()V` @kind virtual;
  #L414ba0.  goto L414ba8;
  #L414ba2.  call `drainNormal`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drainNormal:()V` @kind virtual;
  #L414ba8.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v6 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L414bbc.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L414bc0.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414bc4.  v2:= 1I;
  #L414bc6.  v3:= 1I;
  #L414bc8.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L414bcc.  if v4 == 0 then goto L414bd8;
  #L414bd0.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.clear:()V` @kind interface;
  #L414bd6.  return @kind void;
  #L414bd8.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414bdc.  call temp:= `get`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L414be2.  v4:= temp @kind object;
  #L414be4.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L414be8.  if v4 == 0 then goto L414bfa;
  #L414bec.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.clear:()V` @kind interface;
  #L414bf2.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L414bf8.  return @kind void;
  #L414bfa.  call temp:= `producerIndex`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.producerIndex:()I` @kind interface;
  #L414c00.  v4:= temp;
  #L414c02.  v5:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @type ^`int`;
  #L414c06.  if v4 != v5 then goto L414c0e;
  #L414c0a.  v4:= 1I;
  #L414c0c.  goto L414c10;
  #L414c0e.  v4:= 0I;
  #L414c10.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.isEmpty:()Z` @kind interface;
  #L414c16.  v5:= temp;
  #L414c18.  if v5 != 0 then goto L414c24;
  #L414c1c.  v5:= 0I;
  #L414c1e.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L414c24.  if v4 == 0 then goto L414c30;
  #L414c28.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L414c2e.  return @kind void;
  #L414c30.  v3:= -v3 @kind int;
  #L414c32.  call temp:= `addAndGet`(v6, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.addAndGet:(I)I` @kind virtual;
  #L414c38.  v3:= temp;
  #L414c3a.  if v3 != 0 then goto L414bc8;
  #L414c3e.  return @kind void;
}
procedure `void` `drainNormal`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v9 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L414c50.  v0:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L414c54.  v1:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414c58.  v2:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.consumed` @type ^`long` @kind wide;
  #L414c5c.  v4:= 1I;
  #L414c5e.  v5:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L414c62.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L414c68.  v5:= temp @kind wide;
  #L414c6a.  v7:= lcmp(v2, v5);
  #L414c6e.  if v7 == 0 then goto L414cec;
  #L414c72.  v7:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L414c76.  if v7 == 0 then goto L414c82;
  #L414c7a.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.clear:()V` @kind interface;
  #L414c80.  return @kind void;
  #L414c82.  v7:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414c86.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L414c8c.  v7:= temp @kind object;
  #L414c8e.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L414c92.  if v7 == 0 then goto L414cb0;
  #L414c96.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.clear:()V` @kind interface;
  #L414c9c.  v1:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414ca0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L414ca6.  v1:= temp @kind object;
  #L414ca8.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L414cae.  return @kind void;
  #L414cb0.  call temp:= `consumerIndex`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.consumerIndex:()I` @kind interface;
  #L414cb6.  v7:= temp;
  #L414cb8.  v8:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @type ^`int`;
  #L414cbc.  if v7 != v8 then goto L414cc8;
  #L414cc0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L414cc6.  return @kind void;
  #L414cc8.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.poll:()Ljava/lang/Object;` @kind interface;
  #L414cce.  v7:= temp @kind object;
  #L414cd0.  if v7 != 0 then goto L414cd6;
  #L414cd4.  goto L414cec;
  #L414cd6.  v8:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L414cda.  if v7 == v8 then goto L414c6a;
  #L414cde.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L414ce4.  v7:= 1L;
  #L414ce8.  v2:= v2 + v7 @kind long;
  #L414cea.  goto L414c6a;
  #L414cec.  v7:= lcmp(v2, v5);
  #L414cf0.  if v7 != 0 then goto L414d52;
  #L414cf4.  v5:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414cf8.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L414cfe.  v5:= temp @kind object;
  #L414d00.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L414d04.  if v5 == 0 then goto L414d22;
  #L414d08.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.clear:()V` @kind interface;
  #L414d0e.  v1:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414d12.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L414d18.  v1:= temp @kind object;
  #L414d1a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L414d20.  return @kind void;
  #L414d22.  call temp:= `peek`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.peek:()Ljava/lang/Object;` @kind interface;
  #L414d28.  v5:= temp @kind object;
  #L414d2a.  v6:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L414d2e.  if v5 != v6 then goto L414d3a;
  #L414d32.  call `drop`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.drop:()V` @kind interface;
  #L414d38.  goto L414d22;
  #L414d3a.  call temp:= `consumerIndex`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.consumerIndex:()I` @kind interface;
  #L414d40.  v5:= temp;
  #L414d42.  v6:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @type ^`int`;
  #L414d46.  if v5 != v6 then goto L414d52;
  #L414d4a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L414d50.  return @kind void;
  #L414d52.  v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.consumed` @type ^`long` := v2 @kind wide;
  #L414d56.  v4:= -v4 @kind int;
  #L414d58.  call temp:= `addAndGet`(v9, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.addAndGet:(I)I` @kind virtual;
  #L414d5e.  v4:= temp;
  #L414d60.  if v4 != 0 then goto L414c5e;
  #L414d64.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.isCancelled:()Z` @AccessFlag  {
    temp;
    v0;

  #L414a54.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L414a58.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414a6c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414a70.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.isEmpty:()Z` @kind interface;
  #L414a76.  v0:= temp;
  #L414a78.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414d78.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414d7c.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L414d80.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L414d86.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @kind virtual;
  #L414d8c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414da0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414da4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L414daa.  v0:= temp;
  #L414dac.  if v0 == 0 then goto L414dd0;
  #L414db0.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L414db4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L414dba.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414dbe.  v0:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L414dc2.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L414dc8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @kind virtual;
  #L414dce.  goto L414dd6;
  #L414dd0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L414dd6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414de8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L414dec.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L414df2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414e04.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414e08.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L414e0e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @kind virtual;
  #L414e14.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414ab0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind object;
  #L414ab4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex;.poll:()Ljava/lang/Object;` @kind interface;
  #L414aba.  v0:= temp @kind object;
  #L414abc.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L414ac0.  if v0 == v1 then goto L414ab0;
  #L414ac4.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414e28.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L414e2e.  v0:= temp;
  #L414e30.  if v0 == 0 then goto L414e44;
  #L414e34.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L414e38.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L414e3e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @kind virtual;
  #L414e44.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414a8c.  v0:= 2I;
  #L414a8e.  v2:= v2 ^& v0 @kind int;
  #L414a90.  if v2 == 0 then goto L414a9c;
  #L414a94.  v2:= 1I;
  #L414a96.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L414a9a.  return v0;
  #L414a9c.  v2:= 0I;
  #L414a9e.  return v2;
}
