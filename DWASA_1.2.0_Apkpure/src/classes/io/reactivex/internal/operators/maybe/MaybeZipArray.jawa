record `io.reactivex.internal.operators.maybe.MaybeZipArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeZipArray.sources` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeZipArray.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipArray` v0 @kind this, `io.reactivex.MaybeSource`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray;.<init>:([Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L417994.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L41799a.  v0.`io.reactivex.internal.operators.maybe.MaybeZipArray.sources` @type ^`io.reactivex.MaybeSource`[] := v1 @kind object;
  #L41799e.  v0.`io.reactivex.internal.operators.maybe.MaybeZipArray.zipper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4179a2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeZipArray` v5 @kind this, `io.reactivex.MaybeObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4179b4.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeZipArray.sources` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L4179b8.  v1:= length @variable v0;
  #L4179ba.  v2:= 0I;
  #L4179bc.  v3:= 1I;
  #L4179be.  if v1 != v3 then goto L4179e2;
  #L4179c2.  v0:= v0[v2] @kind object;
  #L4179c6.  v1:= new `io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver`;
  #L4179ca.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$SingletonArrayFunc`;
  #L4179ce.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$SingletonArrayFunc;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipArray;)V` @kind direct;
  #L4179d4.  call `<init>`(v1, v6, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$MapMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @kind direct;
  #L4179da.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4179e0.  return @kind void;
  #L4179e2.  v3:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator`;
  #L4179e6.  v4:= v5.`io.reactivex.internal.operators.maybe.MaybeZipArray.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L4179ea.  call `<init>`(v3, v6, v1, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.<init>:(Lio/reactivex/MaybeObserver;ILio/reactivex/functions/Function;)V` @kind direct;
  #L4179f0.  call `onSubscribe`(v6, v3) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4179f6.  if v2 >= v1 then goto L417a3a;
  #L4179fa.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.isDisposed:()Z` @kind virtual;
  #L417a00.  v6:= temp;
  #L417a02.  if v6 == 0 then goto L417a08;
  #L417a06.  return @kind void;
  #L417a08.  v6:= v0[v2] @kind object;
  #L417a0c.  if v6 != 0 then goto L417a26;
  #L417a10.  v6:= new `java.lang.NullPointerException`;
  #L417a14.  v0:= "One of the sources is null" @kind object;
  #L417a18.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417a1e.  call `innerError`(v3, v6, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerError:(Ljava/lang/Throwable;I)V` @kind virtual;
  #L417a24.  return @kind void;
  #L417a26.  v4:= v3.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] @kind object;
  #L417a2a.  v4:= v4[v2] @kind object;
  #L417a2e.  call `subscribe`(v6, v4) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L417a34.  v2:= v2 + 1;
  #L417a38.  goto L4179f6;
  #L417a3a.  return @kind void;
}
