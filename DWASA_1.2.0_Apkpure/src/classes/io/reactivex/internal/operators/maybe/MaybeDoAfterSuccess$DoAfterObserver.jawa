record `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.onAfterSuccess` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$DoAfterObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411cd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L411cd6.  v0.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411cda.  v0.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.onAfterSuccess` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L411cde.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$DoAfterObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411cf0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411cf4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L411cfa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$DoAfterObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411cb0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411cb4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L411cba.  v0:= temp;
  #L411cbc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$DoAfterObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411d0c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411d10.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L411d16.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$DoAfterObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411d28.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411d2c.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411d32.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$DoAfterObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411d44.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411d48.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L411d4e.  v0:= temp;
  #L411d50.  if v0 == 0 then goto L411d62;
  #L411d54.  v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L411d58.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411d5c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L411d62.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$DoAfterObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411d74.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411d78.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L411d7e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver.onAfterSuccess` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L411d82.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L411d88.  goto L411d98;
  #L411d8a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L411d8c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L411d92.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L411d98.  return @kind void;
  catch `java.lang.Throwable` @[L411d7e..L411d88] goto L411d8a;
}
