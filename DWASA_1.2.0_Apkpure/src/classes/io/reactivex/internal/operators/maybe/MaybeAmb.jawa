record `io.reactivex.internal.operators.maybe.MaybeAmb` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeAmb.sources` @AccessFlag PRIVATE_FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.maybe.MaybeAmb.sourcesIterable` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeAmb` v0 @kind this, `io.reactivex.MaybeSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/MaybeSource;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40ff30.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L40ff36.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb.sources` @type ^`io.reactivex.MaybeSource`[] := v1 @kind object;
  #L40ff3a.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb.sourcesIterable` @type ^`java.lang.Iterable` := v2 @kind object;
  #L40ff3e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeAmb` v6 @kind this, `io.reactivex.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40ff50.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeAmb.sources` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L40ff54.  v1:= 0I;
  #L40ff56.  if v0 != 0 then goto L40ffd6;
  #L40ff5a.  v0:= 8I;
  #L40ff5e.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L40ff62.  v2:= v6.`io.reactivex.internal.operators.maybe.MaybeAmb.sourcesIterable` @type ^`java.lang.Iterable` @kind object;
  #L40ff66.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40ff6c.  v2:= temp @kind object;
  #L40ff6e.  v3:= 0I;
  #L40ff70.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40ff76.  v4:= temp;
  #L40ff78.  if v4 == 0 then goto L40ffd8;
  #L40ff7c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40ff82.  v4:= temp @kind object;
  #L40ff84.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L40ff88.  if v4 != 0 then goto L40ffa2;
  #L40ff8c.  v0:= new `java.lang.NullPointerException`;
  #L40ff90.  v1:= "One of the sources is null" @kind object;
  #L40ff94.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40ff9a.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L40ffa0.  return @kind void;
  #L40ffa2.  v5:= length @variable v0;
  #L40ffa4.  if v3 != v5 then goto L40ffba;
  #L40ffa8.  v5:= v3 ^> 2;
  #L40ffac.  v5:= v5 + v3 @kind int;
  #L40ffae.  v5:= new `io.reactivex.MaybeSource`[v5];
  #L40ffb2.  call `arraycopy`(v0, v1, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40ffb8.  v0:= v5 @kind object;
  #L40ffba.  v5:= v3 + 1;
  #L40ffbe.  v0[v3]:= v4 @kind object;
  #L40ffc2.  v3:= v5;
  #L40ffc4.  goto L40ff70;
  #L40ffc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40ffc8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40ffce.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L40ffd4.  return @kind void;
  #L40ffd6.  v3:= length @variable v0;
  #L40ffd8.  v2:= new `io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver`;
  #L40ffdc.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L40ffe2.  call `onSubscribe`(v7, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L40ffe8.  if v1 >= v3 then goto L410024;
  #L40ffec.  v4:= v0[v1] @kind object;
  #L40fff0.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.isDisposed:()Z` @kind virtual;
  #L40fff6.  v5:= temp;
  #L40fff8.  if v5 == 0 then goto L40fffe;
  #L40fffc.  return @kind void;
  #L40fffe.  if v4 != 0 then goto L410018;
  #L410002.  v7:= new `java.lang.NullPointerException`;
  #L410006.  v0:= "One of the MaybeSources is null" @kind object;
  #L41000a.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L410010.  call `onError`(v2, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L410016.  return @kind void;
  #L410018.  call `subscribe`(v4, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L41001e.  v1:= v1 + 1;
  #L410022.  goto L40ffe8;
  #L410024.  if v3 != 0 then goto L41002e;
  #L410028.  call `onComplete`(v7) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L41002e.  return @kind void;
  catch `java.lang.Throwable` @[L40ff62..L40ffc2] goto L40ffc6;
}
