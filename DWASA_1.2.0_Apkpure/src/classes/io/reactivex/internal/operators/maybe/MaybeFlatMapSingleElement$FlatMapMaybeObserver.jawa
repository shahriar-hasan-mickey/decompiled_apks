record `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L413710.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L413716.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L41371a.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41371e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L413730.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L413736.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4136e8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L4136ee.  v0:= temp @kind object;
  #L4136f0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4136f4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4136fa.  v0:= temp;
  #L4136fc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413748.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41374c.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L413752.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413764.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413768.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41376e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L413780.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L413786.  v1:= temp;
  #L413788.  if v1 == 0 then goto L413796;
  #L41378c.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413790.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L413796.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4137a8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L4137ac.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4137b2.  v3:= temp @kind object;
  #L4137b4.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4137b8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4137be.  v3:= temp @kind object;
  #L4137c0.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L4137c4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapSingleObserver`;
  #L4137c8.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4137cc.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapSingleObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L4137d2.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L4137d8.  return @kind void;
  #L4137da.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4137dc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4137e2.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4137e8.  return @kind void;
  catch `java.lang.Throwable` @[L4137a8..L4137c4] goto L4137da;
}
