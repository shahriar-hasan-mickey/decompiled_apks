record `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.index` @AccessFlag ;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.produced` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.requested` @AccessFlag FINAL;
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.<init>:(Lorg/reactivestreams/Subscriber;[Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L410518.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41051e.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L410522.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.sources` @type ^`io.reactivex.MaybeSource`[] := v2 @kind object;
  #L410526.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41052a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L410530.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L410534.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L410538.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L41053e.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L410542.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L410546.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L41054a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L410550.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L410554.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410568.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L41056c.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L410572.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L410584.  call temp:= `getAndIncrement`(v11) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.getAndIncrement:()I` @kind virtual;
  #L41058a.  v0:= temp;
  #L41058c.  if v0 == 0 then goto L410592;
  #L410590.  return @kind void;
  #L410592.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410596.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41059a.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L41059e.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4105a4.  v3:= temp;
  #L4105a6.  v4:= 0I;
  #L4105a8.  if v3 == 0 then goto L4105b4;
  #L4105ac.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4105b2.  return @kind void;
  #L4105b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4105ba.  v3:= temp @kind object;
  #L4105bc.  if v3 == 0 then goto L41063e;
  #L4105c0.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L4105c4.  v6:= 1I;
  #L4105c6.  if v3 == v5 then goto L410600;
  #L4105ca.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.produced` @type ^`long` @kind wide;
  #L4105ce.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4105d2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4105d8.  v9:= temp @kind wide;
  #L4105da.  v5:= lcmp(v7, v9);
  #L4105de.  if v5 == 0 then goto L4105fa;
  #L4105e2.  v9:= 1L;
  #L4105e6.  v7:= v7 + v9 @kind long;
  #L4105e8.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.produced` @type ^`long` := v7 @kind wide;
  #L4105ec.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4105f2.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4105f8.  goto L410606;
  #L4105fa.  v3:= 0I;
  #L4105fc.  v6:= 0I;
  #L4105fe.  goto L410606;
  #L410600.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L410606.  if v6 == 0 then goto L41063e;
  #L41060a.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L410610.  v3:= temp;
  #L410612.  if v3 != 0 then goto L41063e;
  #L410616.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.index` @type ^`int`;
  #L41061a.  v4:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.sources` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L41061e.  v5:= length @variable v4;
  #L410620.  if v3 != v5 then goto L41062c;
  #L410624.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41062a.  return @kind void;
  #L41062c.  v5:= v3 + 1;
  #L410630.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.index` @type ^`int` := v5;
  #L410634.  v3:= v4[v3] @kind object;
  #L410638.  call `subscribe`(v3, v11) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L41063e.  call temp:= `decrementAndGet`(v11) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.decrementAndGet:()I` @kind virtual;
  #L410644.  v3:= temp;
  #L410646.  if v3 != 0 then goto L41059e;
  #L41064a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41065c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410660.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L410664.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41066a.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L410670.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410684.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410688.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41068e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4106a0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4106a4.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4106aa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4106bc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4106c0.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4106c6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L4106cc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4106e0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4106e6.  v0:= temp;
  #L4106e8.  if v0 == 0 then goto L4106fc;
  #L4106ec.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4106f0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4106f6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L4106fc.  return @kind void;
}
