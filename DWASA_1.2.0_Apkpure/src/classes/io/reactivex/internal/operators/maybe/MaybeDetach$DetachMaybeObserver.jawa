record `io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$DetachMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411b68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L411b6e.  v0.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411b72.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$DetachMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411b84.  v0:= 0I;
  #L411b86.  v1.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v0 @kind object;
  #L411b8a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411b8e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L411b94.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411b98.  v1.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L411b9c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$DetachMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411b48.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411b4c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L411b52.  v0:= temp;
  #L411b54.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$DetachMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411bb0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411bb4.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L411bb8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411bbc.  if v0 == 0 then goto L411bcc;
  #L411bc0.  v1:= 0I;
  #L411bc2.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411bc6.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L411bcc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$DetachMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411be0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411be4.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L411be8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411bec.  if v0 == 0 then goto L411bfc;
  #L411bf0.  v1:= 0I;
  #L411bf2.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411bf6.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411bfc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$DetachMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411c10.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411c14.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L411c1a.  v0:= temp;
  #L411c1c.  if v0 == 0 then goto L411c2e;
  #L411c20.  v1.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L411c24.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411c28.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L411c2e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$DetachMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411c40.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411c44.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L411c48.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411c4c.  if v0 == 0 then goto L411c5c;
  #L411c50.  v1:= 0I;
  #L411c52.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$DetachMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411c56.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L411c5c.  return @kind void;
}
