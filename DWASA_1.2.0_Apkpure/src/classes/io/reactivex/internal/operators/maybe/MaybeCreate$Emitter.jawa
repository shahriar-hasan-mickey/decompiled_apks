record `io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411094.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41109a.  v0.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L41109e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4110b0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4110b6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410fa4.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.get:()Ljava/lang/Object;` @kind virtual;
  #L410faa.  v0:= temp @kind object;
  #L410fac.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L410fb0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L410fb6.  v0:= temp;
  #L410fb8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4110c8.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.get:()Ljava/lang/Object;` @kind virtual;
  #L4110ce.  v0:= temp @kind object;
  #L4110d0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4110d4.  if v0 == v1 then goto L411114;
  #L4110d8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4110dc.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4110e2.  v0:= temp @kind object;
  #L4110e4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4110e8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4110ec.  if v0 == v1 then goto L411114;
  #L4110f0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4110f4.  call `onComplete`(v1) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4110fa.  if v0 == 0 then goto L411114;
  #L4110fe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L411104.  goto L411114;
  #L411106.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L411108.  if v0 == 0 then goto L411112;
  #L41110c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L411112.  throw v1;
  #L411114.  return @kind void;
  catch `java.lang.Throwable` @[L4110f0..L4110fa] goto L411106;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411134.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41113a.  v0:= temp;
  #L41113c.  if v0 != 0 then goto L411146;
  #L411140.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L411146.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L411158.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.get:()Ljava/lang/Object;` @kind virtual;
  #L41115e.  v0:= temp @kind object;
  #L411160.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411164.  if v0 == v1 then goto L4111c2;
  #L411168.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41116c.  call temp:= `getAndSet`(v3, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L411172.  v0:= temp @kind object;
  #L411174.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L411178.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41117c.  if v0 == v1 then goto L4111c2;
  #L411180.  if v4 != 0 then goto L41119e;
  #L411184.  v4:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411188.  v1:= new `java.lang.NullPointerException`;
  #L41118c.  v2:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L411190.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411196.  call `onError`(v4, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41119c.  goto L4111a8;
  #L41119e.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4111a2.  call `onSuccess`(v1, v4) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4111a8.  if v0 == 0 then goto L4111c2;
  #L4111ac.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4111b2.  goto L4111c2;
  #L4111b4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4111b6.  if v0 == 0 then goto L4111c0;
  #L4111ba.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4111c0.  throw v4;
  #L4111c2.  return @kind void;
  catch `java.lang.Throwable` @[L411184..L4111a8] goto L4111b4;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4111e0.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L4111e4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L4111ea.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4111f0.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L411204.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41120a.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41104c.  v0:= 2I;
  #L41104e.  v0:= new `java.lang.Object`[v0];
  #L411052.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L411058.  v1:= temp @kind object;
  #L41105a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L411060.  v1:= temp @kind object;
  #L411062.  v2:= 0I;
  #L411064.  v0[v2]:= v1 @kind object;
  #L411068.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L41106e.  v1:= temp @kind object;
  #L411070.  v2:= 1I;
  #L411072.  v0[v2]:= v1 @kind object;
  #L411076.  v1:= "%s{%s}" @kind object;
  #L41107a.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L411080.  v0:= temp @kind object;
  #L411082.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L410fcc.  if v3 != 0 then goto L410fde;
  #L410fd0.  v3:= new `java.lang.NullPointerException`;
  #L410fd4.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L410fd8.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L410fde.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.get:()Ljava/lang/Object;` @kind virtual;
  #L410fe4.  v0:= temp @kind object;
  #L410fe6.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L410fea.  if v0 == v1 then goto L41102c;
  #L410fee.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L410ff2.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L410ff8.  v0:= temp @kind object;
  #L410ffa.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L410ffe.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411002.  if v0 == v1 then goto L41102c;
  #L411006.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41100a.  call `onError`(v1, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411010.  if v0 == 0 then goto L41101a;
  #L411014.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41101a.  v3:= 1I;
  #L41101c.  return v3;
  #L41101e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L411020.  if v0 == 0 then goto L41102a;
  #L411024.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41102a.  throw v3;
  #L41102c.  v3:= 0I;
  #L41102e.  return v3;
  catch `java.lang.Throwable` @[L411006..L411010] goto L41101e;
}
