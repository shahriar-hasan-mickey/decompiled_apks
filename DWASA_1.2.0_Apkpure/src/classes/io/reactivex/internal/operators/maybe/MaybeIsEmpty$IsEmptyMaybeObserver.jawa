record `io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmpty$IsEmptyMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41448c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L414492.  v0.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L414496.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmpty$IsEmptyMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4144a8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4144ac.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4144b2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmpty$IsEmptyMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41446c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L414470.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L414476.  v0:= temp;
  #L414478.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmpty$IsEmptyMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4144c4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4144c8.  v1:= 1I;
  #L4144ca.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4144d0.  v1:= temp @kind object;
  #L4144d2.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4144d8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmpty$IsEmptyMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4144ec.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4144f0.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4144f6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmpty$IsEmptyMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414508.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41450c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L414512.  v0:= temp;
  #L414514.  if v0 == 0 then goto L414526;
  #L414518.  v1.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41451c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L414520.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L414526.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmpty$IsEmptyMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414538.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41453c.  v0:= 0I;
  #L41453e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L414544.  v0:= temp @kind object;
  #L414546.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41454c.  return @kind void;
}
