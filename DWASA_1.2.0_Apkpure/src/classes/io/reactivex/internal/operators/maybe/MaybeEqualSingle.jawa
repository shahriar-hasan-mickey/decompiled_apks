record `io.reactivex.internal.operators.maybe.MaybeEqualSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.maybe.MaybeEqualSingle.isEqual` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeEqualSingle.source1` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeEqualSingle.source2` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L412418.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L41241e.  v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.source1` @type ^`io.reactivex.MaybeSource` := v1 @kind object;
  #L412422.  v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.source2` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L412426.  v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.isEqual` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L41242a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L41243c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator`;
  #L412440.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.isEqual` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L412444.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L41244a.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L412450.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.source1` @type ^`io.reactivex.MaybeSource` @kind object;
  #L412454.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.source2` @type ^`io.reactivex.MaybeSource` @kind object;
  #L412458.  call `subscribe`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.subscribe:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind virtual;
  #L41245e.  return @kind void;
}
