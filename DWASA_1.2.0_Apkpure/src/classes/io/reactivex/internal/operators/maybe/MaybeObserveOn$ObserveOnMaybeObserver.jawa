record `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @AccessFlag ;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41512c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L415132.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L415136.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L41513a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L41514c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L415152.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415104.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L41510a.  v0:= temp @kind object;
  #L41510c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L415110.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L415116.  v0:= temp;
  #L415118.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415164.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L415168.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41516e.  v0:= temp @kind object;
  #L415170.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L415176.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L415188.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L41518c.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L415190.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L415196.  v1:= temp @kind object;
  #L415198.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41519e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4151b0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4151b6.  v1:= temp;
  #L4151b8.  if v1 == 0 then goto L4151c6;
  #L4151bc.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4151c0.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4151c6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4151d8.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4151dc.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L4151e0.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4151e6.  v1:= temp @kind object;
  #L4151e8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4151ee.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L415200.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L415204.  v1:= 0I;
  #L415206.  if v0 == 0 then goto L41521a;
  #L41520a.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L41520e.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L415212.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415218.  goto L41523c;
  #L41521a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` @kind object;
  #L41521e.  if v0 == 0 then goto L415232;
  #L415222.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L415226.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41522a.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L415230.  goto L41523c;
  #L415232.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L415236.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L41523c.  return @kind void;
}
