record `io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4119f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4119fe.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411a02.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.source` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L411a06.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L411a18.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L411a1e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4119d0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L4119d6.  v0:= temp @kind object;
  #L4119d8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4119dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4119e2.  v0:= temp;
  #L4119e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L411a30.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.source` @type ^`io.reactivex.MaybeSource` @kind object;
  #L411a34.  v1:= new `io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$DelayWithMainObserver`;
  #L411a38.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411a3c.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$DelayWithMainObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L411a42.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L411a48.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411a5c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411a60.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411a66.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L411a78.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L411a7e.  v1:= temp;
  #L411a80.  if v1 == 0 then goto L411a8e;
  #L411a84.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411a88.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L411a8e.  return @kind void;
}
