record `io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$FromSingleObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L413f90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L413f96.  v0.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L413f9a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$FromSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413fac.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L413fb0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L413fb6.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L413fba.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L413fbe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$FromSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413f70.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L413f74.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L413f7a.  v0:= temp;
  #L413f7c.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$FromSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413fd0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L413fd4.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L413fd8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L413fdc.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L413fe2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$FromSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413ff4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L413ff8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L413ffe.  v0:= temp;
  #L414000.  if v0 == 0 then goto L414012;
  #L414004.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L414008.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41400c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L414012.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$FromSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414024.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L414028.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L41402c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L414030.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L414036.  return @kind void;
}
