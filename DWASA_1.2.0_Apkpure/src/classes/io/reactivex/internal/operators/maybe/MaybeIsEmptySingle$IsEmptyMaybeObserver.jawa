record `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle$IsEmptyMaybeObserver;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L414580.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L414586.  v0.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L41458a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle$IsEmptyMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41459c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4145a0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4145a6.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4145aa.  v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4145ae.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle$IsEmptyMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414560.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L414564.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41456a.  v0:= temp;
  #L41456c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle$IsEmptyMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4145c0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4145c4.  v2.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4145c8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4145cc.  v1:= 1I;
  #L4145ce.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4145d4.  v1:= temp @kind object;
  #L4145d6.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4145dc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle$IsEmptyMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4145f0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4145f4.  v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4145f8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4145fc.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L414602.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle$IsEmptyMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414614.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L414618.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41461e.  v0:= temp;
  #L414620.  if v0 == 0 then goto L414632;
  #L414624.  v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L414628.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L41462c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L414632.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle$IsEmptyMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414644.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L414648.  v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L41464c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L414650.  v0:= 0I;
  #L414652.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L414658.  v0:= temp @kind object;
  #L41465a.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L414660.  return @kind void;
}
