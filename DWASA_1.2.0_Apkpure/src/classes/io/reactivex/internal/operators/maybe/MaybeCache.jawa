record `io.reactivex.internal.operators.maybe.MaybeCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeCache.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeCache.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeCache.source` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeCache.value` @AccessFlag ;
}
global `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] `@@io.reactivex.internal.operators.maybe.MaybeCache.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] `@@io.reactivex.internal.operators.maybe.MaybeCache.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41010c.  v0:= 0I;
  #L41010e.  v1:= new `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[v0];
  #L410112.  `@@io.reactivex.internal.operators.maybe.MaybeCache.EMPTY` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] := v1 @kind object;
  #L410116.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[v0];
  #L41011a.  `@@io.reactivex.internal.operators.maybe.MaybeCache.TERMINATED` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] := v0 @kind object;
  #L41011e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCache` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L410130.  call `<init>`(v1) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L410136.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41013a.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L410140.  v1.`io.reactivex.internal.operators.maybe.MaybeCache.source` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L410144.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L410148.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeCache.EMPTY` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] @kind object;
  #L41014c.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L410152.  v1.`io.reactivex.internal.operators.maybe.MaybeCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L410156.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.maybe.MaybeCache` v4 @kind this, `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.add:(Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4100b8.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4100bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4100c2.  v0:= temp @kind object;
  #L4100c4.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[]) v0 @kind object;
  #L4100c8.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.TERMINATED` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] @kind object;
  #L4100cc.  v2:= 0I;
  #L4100ce.  if v0 != v1 then goto L4100d4;
  #L4100d2.  return v2;
  #L4100d4.  v1:= length @variable v0;
  #L4100d6.  v3:= v1 + 1;
  #L4100da.  v3:= new `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[v3];
  #L4100de.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4100e4.  v3[v1]:= v5 @kind object;
  #L4100e8.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4100ec.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4100f2.  v0:= temp;
  #L4100f4.  if v0 == 0 then goto L4100b8;
  #L4100f8.  v5:= 1I;
  #L4100fa.  return v5;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L410168.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41016c.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.TERMINATED` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] @kind object;
  #L410170.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L410176.  v0:= temp @kind object;
  #L410178.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[]) v0 @kind object;
  #L41017c.  v1:= length @variable v0;
  #L41017e.  v2:= 0I;
  #L410180.  if v2 >= v1 then goto L4101a4;
  #L410184.  v3:= v0[v2] @kind object;
  #L410188.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.isDisposed:()Z` @kind virtual;
  #L41018e.  v4:= temp;
  #L410190.  if v4 != 0 then goto L41019e;
  #L410194.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L410198.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L41019e.  v2:= v2 + 1;
  #L4101a2.  goto L410180;
  #L4101a4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4101b8.  v5.`io.reactivex.internal.operators.maybe.MaybeCache.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L4101bc.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4101c0.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.TERMINATED` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] @kind object;
  #L4101c4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4101ca.  v0:= temp @kind object;
  #L4101cc.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[]) v0 @kind object;
  #L4101d0.  v1:= length @variable v0;
  #L4101d2.  v2:= 0I;
  #L4101d4.  if v2 >= v1 then goto L4101f8;
  #L4101d8.  v3:= v0[v2] @kind object;
  #L4101dc.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.isDisposed:()Z` @kind virtual;
  #L4101e2.  v4:= temp;
  #L4101e4.  if v4 != 0 then goto L4101f2;
  #L4101e8.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4101ec.  call `onError`(v3, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4101f2.  v2:= v2 + 1;
  #L4101f6.  goto L4101d4;
  #L4101f8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L41020c.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L410220.  v5.`io.reactivex.internal.operators.maybe.MaybeCache.value` @type ^`java.lang.Object` := v6 @kind object;
  #L410224.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410228.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.TERMINATED` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] @kind object;
  #L41022c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L410232.  v0:= temp @kind object;
  #L410234.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[]) v0 @kind object;
  #L410238.  v1:= length @variable v0;
  #L41023a.  v2:= 0I;
  #L41023c.  if v2 >= v1 then goto L410260;
  #L410240.  v3:= v0[v2] @kind object;
  #L410244.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.isDisposed:()Z` @kind virtual;
  #L41024a.  v4:= temp;
  #L41024c.  if v4 != 0 then goto L41025a;
  #L410250.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L410254.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41025a.  v2:= v2 + 1;
  #L41025e.  goto L41023c;
  #L410260.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.maybe.MaybeCache` v6 @kind this, `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.remove:(Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L410274.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410278.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41027e.  v0:= temp @kind object;
  #L410280.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[]) v0 @kind object;
  #L410284.  v1:= length @variable v0;
  #L410286.  if v1 != 0 then goto L41028c;
  #L41028a.  return @kind void;
  #L41028c.  v2:= -1I;
  #L41028e.  v3:= 0I;
  #L410290.  v4:= 0I;
  #L410292.  if v4 >= v1 then goto L4102a8;
  #L410296.  v5:= v0[v4] @kind object;
  #L41029a.  if v5 != v7 then goto L4102a2;
  #L41029e.  v2:= v4;
  #L4102a0.  goto L4102a8;
  #L4102a2.  v4:= v4 + 1;
  #L4102a6.  goto L410292;
  #L4102a8.  if v2 >= 0 then goto L4102ae;
  #L4102ac.  return @kind void;
  #L4102ae.  v4:= 1I;
  #L4102b0.  if v1 != v4 then goto L4102ba;
  #L4102b4.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.EMPTY` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[] @kind object;
  #L4102b8.  goto L4102d8;
  #L4102ba.  v5:= v1 + -1;
  #L4102be.  v5:= new `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`[v5];
  #L4102c2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4102c8.  v3:= v2 + 1;
  #L4102cc.  v1:= v1 - v2 @kind int;
  #L4102ce.  v1:= v1 - v4 @kind int;
  #L4102d0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4102d6.  v1:= v5 @kind object;
  #L4102d8.  v2:= v6.`io.reactivex.internal.operators.maybe.MaybeCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4102dc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4102e2.  v0:= temp;
  #L4102e4.  if v0 == 0 then goto L410274;
  #L4102e8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeCache` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4102fc.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable`;
  #L410300.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/internal/operators/maybe/MaybeCache;)V` @kind direct;
  #L410306.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41030c.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.add:(Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;)Z` @kind virtual;
  #L410312.  v1:= temp;
  #L410314.  if v1 == 0 then goto L41034a;
  #L410318.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.isDisposed:()Z` @kind virtual;
  #L41031e.  v3:= temp;
  #L410320.  if v3 == 0 then goto L41032c;
  #L410324.  call `remove`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.remove:(Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;)V` @kind virtual;
  #L41032a.  return @kind void;
  #L41032c.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.source` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410330.  v0:= 0I;
  #L410332.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L410338.  v3:= temp @kind object;
  #L41033a.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L41033e.  if v3 == 0 then goto L410348;
  #L410342.  call `subscribe`(v3, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L410348.  return @kind void;
  #L41034a.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.isDisposed:()Z` @kind virtual;
  #L410350.  v0:= temp;
  #L410352.  if v0 != 0 then goto L41037c;
  #L410356.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.error` @type ^`java.lang.Throwable` @kind object;
  #L41035a.  if v0 == 0 then goto L410366;
  #L41035e.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410364.  goto L41037c;
  #L410366.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.value` @type ^`java.lang.Object` @kind object;
  #L41036a.  if v0 == 0 then goto L410376;
  #L41036e.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L410374.  goto L41037c;
  #L410376.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L41037c.  return @kind void;
}
