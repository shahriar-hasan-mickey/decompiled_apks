record `io.reactivex.internal.operators.maybe.MaybeFromSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.internal.fuseable.HasUpstreamSingleSource` @kind interface {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.maybe.MaybeFromSingle.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromSingle` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle;.<init>:(Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L414060.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L414066.  v0.`io.reactivex.internal.operators.maybe.MaybeFromSingle.source` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L41406a.  return @kind void;
}
procedure `io.reactivex.SingleSource` `source`(`io.reactivex.internal.operators.maybe.MaybeFromSingle` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle;.source:()Lio/reactivex/SingleSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414048.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L41404c.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeFromSingle` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L41407c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFromSingle.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L414080.  v1:= new `io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver`;
  #L414084.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$FromSingleObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L41408a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L414090.  return @kind void;
}
