record `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.parent` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` v0 @kind this, `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L412374.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41237a.  v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` := v1 @kind object;
  #L41237e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L412390.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L412396.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4123a8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` @kind object;
  #L4123ac.  call `done`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.done:()V` @kind virtual;
  #L4123b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4123c4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` @kind object;
  #L4123c8.  call `error`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.error:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;Ljava/lang/Throwable;)V` @kind virtual;
  #L4123ce.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4123e0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4123e6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4123f8.  v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4123fc.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.parent` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` @kind object;
  #L412400.  call `done`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.done:()V` @kind virtual;
  #L412406.  return @kind void;
}
