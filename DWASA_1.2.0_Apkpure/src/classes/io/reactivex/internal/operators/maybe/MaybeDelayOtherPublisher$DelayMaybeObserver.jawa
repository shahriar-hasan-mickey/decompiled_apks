record `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.other` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.otherSource` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L411468.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41146e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber`;
  #L411472.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L411478.  v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.other` @type ^`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` := v0 @kind object;
  #L41147c.  v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.otherSource` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L411480.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411494.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411498.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41149e.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4114a2.  v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4114a6.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.other` @type ^`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` @kind object;
  #L4114aa.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4114b0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41143c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.other` @type ^`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` @kind object;
  #L411440.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L411446.  v0:= temp @kind object;
  #L411448.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L41144c.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L411452.  v0:= temp;
  #L411454.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4114c4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4114c8.  v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4114cc.  call `subscribeNext`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.subscribeNext:()V` @kind virtual;
  #L4114d2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4114e4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4114e8.  v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4114ec.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.other` @type ^`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` @kind object;
  #L4114f0.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4114f4.  call `subscribeNext`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.subscribeNext:()V` @kind virtual;
  #L4114fa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41150c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411510.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L411516.  v0:= temp;
  #L411518.  if v0 == 0 then goto L41152e;
  #L41151c.  v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L411520.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.other` @type ^`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` @kind object;
  #L411524.  v2:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411528.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41152e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411540.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411544.  v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L411548.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.other` @type ^`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` @kind object;
  #L41154c.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.value` @type ^`java.lang.Object` := v2 @kind object;
  #L411550.  call `subscribeNext`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.subscribeNext:()V` @kind virtual;
  #L411556.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$DelayMaybeObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L411568.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.otherSource` @type ^`org.reactivestreams.Publisher` @kind object;
  #L41156c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver.other` @type ^`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` @kind object;
  #L411570.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L411576.  return @kind void;
}
