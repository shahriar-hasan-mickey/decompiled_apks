record `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L413564.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41356a.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L41356e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L413572.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L413584.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41358a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41353c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L413542.  v0:= temp @kind object;
  #L413544.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L413548.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41354e.  v0:= temp;
  #L413550.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41359c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4135a0.  v1:= new `java.util.NoSuchElementException`;
  #L4135a4.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4135aa.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4135b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4135c4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4135c8.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4135ce.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4135e0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4135e6.  v1:= temp;
  #L4135e8.  if v1 == 0 then goto L4135f6;
  #L4135ec.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4135f0.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4135f6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L413608.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L41360c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L413612.  v3:= temp @kind object;
  #L413614.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L413618.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41361e.  v3:= temp @kind object;
  #L413620.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L413624.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.isDisposed:()Z` @kind virtual;
  #L41362a.  v0:= temp;
  #L41362c.  if v0 != 0 then goto L413644;
  #L413630.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapSingleObserver`;
  #L413634.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L413638.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapSingleObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/SingleObserver;)V` @kind direct;
  #L41363e.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L413644.  return @kind void;
  #L413646.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L413648.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41364e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L413654.  return @kind void;
  catch `java.lang.Throwable` @[L413608..L413624] goto L413646;
}
