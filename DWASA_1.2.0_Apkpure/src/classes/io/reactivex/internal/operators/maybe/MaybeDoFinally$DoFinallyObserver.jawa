record `io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.onFinally` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411e20.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L411e26.  v0.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411e2a.  v0.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.onFinally` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L411e2e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411e40.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411e44.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L411e4a.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @kind virtual;
  #L411e50.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411e00.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411e04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L411e0a.  v0:= temp;
  #L411e0c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411e64.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411e68.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L411e6e.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @kind virtual;
  #L411e74.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411e88.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411e8c.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411e92.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @kind virtual;
  #L411e98.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411eac.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411eb0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L411eb6.  v0:= temp;
  #L411eb8.  if v0 == 0 then goto L411eca;
  #L411ebc.  v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L411ec0.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411ec4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L411eca.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411edc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411ee0.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L411ee6.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @kind virtual;
  #L411eec.  return @kind void;
}
procedure `void` `runFinally`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L411f00.  v0:= 0I;
  #L411f02.  v1:= 1I;
  #L411f04.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.compareAndSet:(II)Z` @kind virtual;
  #L411f0a.  v0:= temp;
  #L411f0c.  if v0 == 0 then goto L411f2a;
  #L411f10.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.onFinally` @type ^`io.reactivex.functions.Action` @kind object;
  #L411f14.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L411f1a.  goto L411f2a;
  #L411f1c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L411f1e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L411f24.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L411f2a.  return @kind void;
  catch `java.lang.Throwable` @[L411f10..L411f1a] goto L411f1c;
}
