record `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @AccessFlag VOLATILE;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L412c48.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L412c4e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L412c52.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L412c56.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L412c5a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L412c60.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L412c64.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412c78.  v0:= 1I;
  #L412c7a.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L412c7e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L412c82.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L412c88.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L412c8c.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L412c90.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412ca4.  v0:= 0I;
  #L412ca6.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L412caa.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L412cbc.  call temp:= `getAndIncrement`(v11) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.getAndIncrement:()I` @kind virtual;
  #L412cc2.  v0:= temp;
  #L412cc4.  if v0 == 0 then goto L412cca;
  #L412cc8.  return @kind void;
  #L412cca.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412cce.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L412cd2.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @type ^`boolean` @kind boolean;
  #L412cd6.  if v2 == 0 then goto L412cee;
  #L412cda.  if v1 == 0 then goto L412cee;
  #L412cde.  v1:= 0I;
  #L412ce0.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L412ce6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L412cec.  return @kind void;
  #L412cee.  v2:= 1I;
  #L412cf0.  if v1 == 0 then goto L412da2;
  #L412cf4.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L412cf8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L412cfe.  v3:= temp @kind wide;
  #L412d00.  v5:= 9223372036854775807L;
  #L412d0a.  v7:= lcmp(v3, v5);
  #L412d0e.  if v7 != 0 then goto L412d1a;
  #L412d12.  call `fastPath`(v11, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.fastPath:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L412d18.  return @kind void;
  #L412d1a.  v5:= 0L;
  #L412d1e.  v7:= v5 @kind wide;
  #L412d20.  v9:= lcmp(v7, v3);
  #L412d24.  if v9 == 0 then goto L412d90;
  #L412d28.  v9:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L412d2c.  if v9 == 0 then goto L412d32;
  #L412d30.  return @kind void;
  #L412d32.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L412d38.  v9:= temp @kind object;
  #L412d3a.  v10:= "The iterator returned a null value" @kind object;
  #L412d3e.  call temp:= `requireNonNull`(v9, v10) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L412d44.  v9:= temp @kind object;
  #L412d46.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L412d4c.  v9:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L412d50.  if v9 == 0 then goto L412d56;
  #L412d54.  return @kind void;
  #L412d56.  v9:= 1L;
  #L412d5a.  v7:= v7 + v9 @kind long;
  #L412d5c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L412d62.  v9:= temp;
  #L412d64.  if v9 != 0 then goto L412d20;
  #L412d68.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L412d6e.  return @kind void;
  #L412d70.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412d72.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L412d78.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412d7e.  return @kind void;
  #L412d80.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412d82.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L412d88.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412d8e.  return @kind void;
  #L412d90.  v3:= lcmp(v7, v5);
  #L412d94.  if v3 == 0 then goto L412da2;
  #L412d98.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L412d9c.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L412da2.  v2:= -v2 @kind int;
  #L412da4.  call temp:= `addAndGet`(v11, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.addAndGet:(I)I` @kind virtual;
  #L412daa.  v2:= temp;
  #L412dac.  if v2 != 0 then goto L412db2;
  #L412db0.  return @kind void;
  #L412db2.  if v1 != 0 then goto L412cf0;
  #L412db6.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L412dba.  goto L412cf0;
  catch `java.lang.Throwable` @[L412d32..L412d46] goto L412d80;
  catch `java.lang.Throwable` @[L412d5c..L412d64] goto L412d70;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.fastPath:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L412de4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L412de8.  if v0 == 0 then goto L412dee;
  #L412dec.  return @kind void;
  #L412dee.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L412df4.  v0:= temp @kind object;
  #L412df6.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L412dfc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L412e00.  if v0 == 0 then goto L412e06;
  #L412e04.  return @kind void;
  #L412e06.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L412e0c.  v0:= temp;
  #L412e0e.  if v0 != 0 then goto L412de4;
  #L412e12.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L412e18.  return @kind void;
  #L412e1a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412e1c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L412e22.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412e28.  return @kind void;
  #L412e2a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412e2c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L412e32.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412e38.  return @kind void;
  catch `java.lang.Throwable` @[L412dee..L412df6] goto L412e2a;
  catch `java.lang.Throwable` @[L412e06..L412e0e] goto L412e1a;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412bc0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L412bc4.  if v0 != 0 then goto L412bcc;
  #L412bc8.  v0:= 1I;
  #L412bca.  goto L412bce;
  #L412bcc.  v0:= 0I;
  #L412bce.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412e64.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412e68.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L412e6e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412e80.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L412e84.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L412e88.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412e8c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412e92.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412ea4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L412ea8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L412eae.  v0:= temp;
  #L412eb0.  if v0 == 0 then goto L412ec2;
  #L412eb4.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L412eb8.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412ebc.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L412ec2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412ed4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L412ed8.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L412ede.  v2:= temp @kind object;
  #L412ee0.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L412ee4.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L412eea.  v2:= temp @kind object;
  #L412eec.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L412ef2.  v0:= temp;
  #L412ef4.  if v0 != 0 then goto L412f04;
  #L412ef8.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412efc.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L412f02.  return @kind void;
  #L412f04.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v2 @kind object;
  #L412f08.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @kind virtual;
  #L412f0e.  return @kind void;
  #L412f10.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412f12.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L412f18.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412f1c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412f22.  return @kind void;
  catch `java.lang.Throwable` @[L412ed4..L412ef4] goto L412f10;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412c04.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L412c08.  v1:= 0I;
  #L412c0a.  if v0 == 0 then goto L412c34;
  #L412c0e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L412c14.  v2:= temp @kind object;
  #L412c16.  v3:= "The iterator returned a null value" @kind object;
  #L412c1a.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L412c20.  v2:= temp @kind object;
  #L412c22.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L412c28.  v0:= temp;
  #L412c2a.  if v0 != 0 then goto L412c32;
  #L412c2e.  v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L412c32.  return v2 @kind object;
  #L412c34.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412f40.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L412f46.  v0:= temp;
  #L412f48.  if v0 == 0 then goto L412f5c;
  #L412f4c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L412f50.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L412f56.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @kind virtual;
  #L412f5c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412be0.  v0:= 2I;
  #L412be2.  v2:= v2 ^& v0 @kind int;
  #L412be4.  if v2 == 0 then goto L412bf0;
  #L412be8.  v2:= 1I;
  #L412bea.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L412bee.  return v0;
  #L412bf0.  v2:= 0I;
  #L412bf2.  return v2;
}
