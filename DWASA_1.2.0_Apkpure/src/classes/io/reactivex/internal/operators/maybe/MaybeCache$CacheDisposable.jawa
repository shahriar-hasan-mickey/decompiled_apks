record `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.internal.operators.maybe.MaybeCache` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/internal/operators/maybe/MaybeCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L410070.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L410076.  v0.`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L41007a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41008c.  v0:= 0I;
  #L41008e.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L410094.  v0:= temp @kind object;
  #L410096.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache`) v0 @kind object;
  #L41009a.  if v0 == 0 then goto L4100a4;
  #L41009e.  call `remove`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.remove:(Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;)V` @kind virtual;
  #L4100a4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41004c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L410052.  v0:= temp @kind object;
  #L410054.  if v0 != 0 then goto L41005c;
  #L410058.  v0:= 1I;
  #L41005a.  goto L41005e;
  #L41005c.  v0:= 0I;
  #L41005e.  return v0;
}
