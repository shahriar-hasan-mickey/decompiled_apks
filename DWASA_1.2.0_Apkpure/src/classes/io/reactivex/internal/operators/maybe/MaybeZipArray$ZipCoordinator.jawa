record `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object, `int` v3 , `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.<init>:(Lio/reactivex/MaybeObserver;ILio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L417744.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L41774a.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L41774e.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L417752.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[v3];
  #L417756.  v4:= 0I;
  #L417758.  if v4 >= v3 then goto L417770;
  #L41775c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`;
  #L417760.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;I)V` @kind direct;
  #L417766.  v2[v4]:= v0 @kind object;
  #L41776a.  v4:= v4 + 1;
  #L41776e.  goto L417758;
  #L417770.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] := v2 @kind object;
  #L417774.  v2:= new `java.lang.Object`[v3];
  #L417778.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] := v2 @kind object;
  #L41777c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L417790.  v0:= 0I;
  #L417792.  call temp:= `getAndSet`(v4, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.getAndSet:(I)I` @kind virtual;
  #L417798.  v1:= temp;
  #L41779a.  if v1 <= 0 then goto L4177b8;
  #L41779e.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] @kind object;
  #L4177a2.  v2:= length @variable v1;
  #L4177a4.  if v0 >= v2 then goto L4177b8;
  #L4177a8.  v3:= v1[v0] @kind object;
  #L4177ac.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.dispose:()V` @kind virtual;
  #L4177b2.  v0:= v0 + 1;
  #L4177b6.  goto L4177a4;
  #L4177b8.  return @kind void;
}
procedure `void` `disposeExcept`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.disposeExcept:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4177cc.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] @kind object;
  #L4177d0.  v1:= length @variable v0;
  #L4177d2.  v2:= 0I;
  #L4177d4.  if v2 >= v5 then goto L4177e8;
  #L4177d8.  v3:= v0[v2] @kind object;
  #L4177dc.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.dispose:()V` @kind virtual;
  #L4177e2.  v2:= v2 + 1;
  #L4177e6.  goto L4177d4;
  #L4177e8.  v5:= v5 + 1;
  #L4177ec.  if v5 >= v1 then goto L4177fc;
  #L4177f0.  v2:= v0[v5] @kind object;
  #L4177f4.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.dispose:()V` @kind virtual;
  #L4177fa.  goto L4177e8;
  #L4177fc.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerComplete:(I)V` @AccessFlag  {
    temp;
    v0;

  #L417810.  v0:= 0I;
  #L417812.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.getAndSet:(I)I` @kind virtual;
  #L417818.  v0:= temp;
  #L41781a.  if v0 <= 0 then goto L41782e;
  #L41781e.  call `disposeExcept`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.disposeExcept:(I)V` @kind virtual;
  #L417824.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L417828.  call `onComplete`(v2) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L41782e.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerError:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L417840.  v0:= 0I;
  #L417842.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.getAndSet:(I)I` @kind virtual;
  #L417848.  v0:= temp;
  #L41784a.  if v0 <= 0 then goto L417860;
  #L41784e.  call `disposeExcept`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.disposeExcept:(I)V` @kind virtual;
  #L417854.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L417858.  call `onError`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41785e.  goto L417866;
  #L417860.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L417866.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerSuccess:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L417878.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L41787c.  v0[v3]:= v2 @kind object;
  #L417880.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.decrementAndGet:()I` @kind virtual;
  #L417886.  v2:= temp;
  #L417888.  if v2 != 0 then goto L4178c6;
  #L41788c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L417890.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L417894.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41789a.  v2:= temp @kind object;
  #L41789c.  v3:= "The zipper returned a null value" @kind object;
  #L4178a0.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4178a6.  v2:= temp @kind object;
  #L4178a8.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4178ac.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4178b2.  goto L4178c6;
  #L4178b4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4178b6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4178bc.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4178c0.  call `onError`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4178c6.  return @kind void;
  catch `java.lang.Throwable` @[L41788c..L4178a8] goto L4178b4;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417720.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.get:()I` @kind virtual;
  #L417726.  v0:= temp;
  #L417728.  if v0 > 0 then goto L417730;
  #L41772c.  v0:= 1I;
  #L41772e.  goto L417732;
  #L417730.  v0:= 0I;
  #L417732.  return v0;
}
