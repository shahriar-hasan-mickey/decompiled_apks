record `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @AccessFlag FINAL;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.<init>:(Lio/reactivex/MaybeObserver;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41736c.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L417372.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L417376.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L41737a.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` := v4 @kind boolean;
  #L41737e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417390.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L417394.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41739a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L41739e.  v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4173a2.  call `disposeResourceAfter`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L4173a8.  return @kind void;
}
procedure `void` `disposeResourceAfter`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4173bc.  call temp:= `getAndSet`(v2, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4173c2.  v0:= temp @kind object;
  #L4173c4.  if v0 == v2 then goto L4173e2;
  #L4173c8.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4173cc.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4173d2.  goto L4173e2;
  #L4173d4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4173d6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4173dc.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4173e2.  return @kind void;
  catch `java.lang.Throwable` @[L4173c8..L4173d2] goto L4173d4;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41734c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L417350.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L417356.  v0:= temp;
  #L417358.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L417400.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L417404.  v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L417408.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L41740c.  if v0 == 0 then goto L41743c;
  #L417410.  call temp:= `getAndSet`(v2, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L417416.  v0:= temp @kind object;
  #L417418.  if v0 == v2 then goto L41743a;
  #L41741c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L417420.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L417426.  goto L41743c;
  #L417428.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41742a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L417430.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L417434.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41743a.  return @kind void;
  #L41743c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L417440.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L417446.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L41744a.  if v0 != 0 then goto L417454;
  #L41744e.  call `disposeResourceAfter`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L417454.  return @kind void;
  catch `java.lang.Throwable` @[L41741c..L417426] goto L417428;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L417474.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L417478.  v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L41747c.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L417480.  if v0 == 0 then goto L4174c6;
  #L417484.  call temp:= `getAndSet`(v4, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41748a.  v0:= temp @kind object;
  #L41748c.  if v0 == v4 then goto L4174c4;
  #L417490.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L417494.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L41749a.  goto L4174c6;
  #L41749c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41749e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4174a4.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L4174a8.  v2:= 2I;
  #L4174aa.  v2:= new `java.lang.Throwable`[v2];
  #L4174ae.  v3:= 0I;
  #L4174b0.  v2[v3]:= v5 @kind object;
  #L4174b4.  v5:= 1I;
  #L4174b6.  v2[v5]:= v0 @kind object;
  #L4174ba.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4174c0.  v5:= v1 @kind object;
  #L4174c2.  goto L4174c6;
  #L4174c4.  return @kind void;
  #L4174c6.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4174ca.  call `onError`(v0, v5) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4174d0.  v5:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L4174d4.  if v5 != 0 then goto L4174de;
  #L4174d8.  call `disposeResourceAfter`(v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L4174de.  return @kind void;
  catch `java.lang.Throwable` @[L417490..L41749a] goto L41749c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4174fc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L417500.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L417506.  v0:= temp;
  #L417508.  if v0 == 0 then goto L41751a;
  #L41750c.  v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L417510.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L417514.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41751a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41752c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L417530.  v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L417534.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L417538.  if v0 == 0 then goto L417568;
  #L41753c.  call temp:= `getAndSet`(v2, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L417542.  v0:= temp @kind object;
  #L417544.  if v0 == v2 then goto L417566;
  #L417548.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41754c.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L417552.  goto L417568;
  #L417554.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417556.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41755c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L417560.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L417566.  return @kind void;
  #L417568.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41756c.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L417572.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L417576.  if v3 != 0 then goto L417580;
  #L41757a.  call `disposeResourceAfter`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L417580.  return @kind void;
  catch `java.lang.Throwable` @[L417548..L417552] goto L417554;
}
