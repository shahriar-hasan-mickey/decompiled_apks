record `io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.AbstractMaybeWithUpstream` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4118f8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L4118fe.  v0.`io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.other` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L411902.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher` v3 @kind this, `io.reactivex.MaybeObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L411914.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.other` @type ^`org.reactivestreams.Publisher` @kind object;
  #L411918.  v1:= new `io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$OtherSubscriber`;
  #L41191c.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.source` @type ^`io.reactivex.MaybeSource` @kind object;
  #L411920.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$OtherSubscriber;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L411926.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L41192c.  return @kind void;
}
