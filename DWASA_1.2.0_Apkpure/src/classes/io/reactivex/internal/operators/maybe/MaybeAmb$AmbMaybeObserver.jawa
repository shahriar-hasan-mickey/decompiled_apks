record `io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.set` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40fe0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40fe12.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L40fe16.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L40fe1a.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L40fe20.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L40fe24.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40fe38.  v0:= 0I;
  #L40fe3a.  v1:= 1I;
  #L40fe3c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40fe42.  v0:= temp;
  #L40fe44.  if v0 == 0 then goto L40fe52;
  #L40fe48.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40fe4c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40fe52.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fdf0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.get:()Z` @kind virtual;
  #L40fdf6.  v0:= temp;
  #L40fdf8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40fe64.  v0:= 0I;
  #L40fe66.  v1:= 1I;
  #L40fe68.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40fe6e.  v0:= temp;
  #L40fe70.  if v0 == 0 then goto L40fe88;
  #L40fe74.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40fe78.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40fe7e.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L40fe82.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L40fe88.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40fe9c.  v0:= 0I;
  #L40fe9e.  v1:= 1I;
  #L40fea0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40fea6.  v0:= temp;
  #L40fea8.  if v0 == 0 then goto L40fec2;
  #L40feac.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40feb0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40feb6.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L40feba.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40fec0.  goto L40fec8;
  #L40fec2.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40fec8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fedc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40fee0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40fee6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40fef8.  v0:= 0I;
  #L40fefa.  v1:= 1I;
  #L40fefc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$AmbMaybeObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40ff02.  v0:= temp;
  #L40ff04.  if v0 == 0 then goto L40ff1c;
  #L40ff08.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40ff0c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40ff12.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$AmbMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L40ff16.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40ff1c.  return @kind void;
}
