record `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @AccessFlag FINAL;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4154d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4154d6.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4154da.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4154de.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @type ^`boolean` := v3 @kind boolean;
  #L4154e2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4154f4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4154fa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4154a8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L4154ae.  v0:= temp @kind object;
  #L4154b0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4154b4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4154ba.  v0:= temp;
  #L4154bc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41550c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L415510.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L415516.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L415528.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @type ^`boolean` @kind boolean;
  #L41552c.  if v0 != 0 then goto L415544;
  #L415530.  v0:= instanceof @variable v6 @type ^`java.lang.Exception` @kind boolean;
  #L415534.  if v0 != 0 then goto L415544;
  #L415538.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41553c.  call `onError`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415542.  return @kind void;
  #L415544.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @type ^`io.reactivex.functions.Function` @kind object;
  #L415548.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41554e.  v0:= temp @kind object;
  #L415550.  v1:= "The resumeFunction returned a null MaybeSource" @kind object;
  #L415554.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41555a.  v0:= temp @kind object;
  #L41555c.  v0:= (`io.reactivex.MaybeSource`) v0 @kind object;
  #L415560.  v6:= 0I;
  #L415562.  call temp:= `replace`(v5, v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L415568.  v6:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver$NextMaybeObserver`;
  #L41556c.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L415570.  call `<init>`(v6, v1, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver$NextMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L415576.  call `subscribe`(v0, v6) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L41557c.  return @kind void;
  #L41557e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L415580.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L415586.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41558a.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L41558e.  v3:= 2I;
  #L415590.  v3:= new `java.lang.Throwable`[v3];
  #L415594.  v4:= 0I;
  #L415596.  v3[v4]:= v6 @kind object;
  #L41559a.  v6:= 1I;
  #L41559c.  v3[v6]:= v0 @kind object;
  #L4155a0.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4155a6.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4155ac.  return @kind void;
  catch `java.lang.Throwable` @[L415544..L415560] goto L41557e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4155cc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4155d2.  v1:= temp;
  #L4155d4.  if v1 == 0 then goto L4155e2;
  #L4155d8.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4155dc.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4155e2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4155f4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4155f8.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4155fe.  return @kind void;
}
