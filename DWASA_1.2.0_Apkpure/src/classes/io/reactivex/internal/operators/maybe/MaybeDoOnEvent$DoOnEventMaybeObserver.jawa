record `io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.onEvent` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.BiConsumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent$DoOnEventMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411fb0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L411fb6.  v0.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411fba.  v0.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.onEvent` @type ^`io.reactivex.functions.BiConsumer` := v2 @kind object;
  #L411fbe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent$DoOnEventMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411fd0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411fd4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L411fda.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411fde.  v1.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L411fe2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent$DoOnEventMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411f90.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L411f94.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L411f9a.  v0:= temp;
  #L411f9c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent$DoOnEventMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411ff4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L411ff8.  v2.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L411ffc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.onEvent` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L412000.  v1:= 0I;
  #L412002.  call `accept`(v0, v1, v1) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L412008.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41200c.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L412012.  return @kind void;
  #L412014.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412016.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41201c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L412020.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412026.  return @kind void;
  catch `java.lang.Throwable` @[L411ffc..L412008] goto L412014;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent$DoOnEventMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412044.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L412048.  v4.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L41204c.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.onEvent` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L412050.  v1:= 0I;
  #L412052.  call `accept`(v0, v1, v5) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L412058.  goto L412080;
  #L41205a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41205c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L412062.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L412066.  v2:= 2I;
  #L412068.  v2:= new `java.lang.Throwable`[v2];
  #L41206c.  v3:= 0I;
  #L41206e.  v2[v3]:= v5 @kind object;
  #L412072.  v5:= 1I;
  #L412074.  v2[v5]:= v0 @kind object;
  #L412078.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L41207e.  v5:= v1 @kind object;
  #L412080.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L412084.  call `onError`(v0, v5) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41208a.  return @kind void;
  catch `java.lang.Throwable` @[L41204c..L412058] goto L41205a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent$DoOnEventMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4120a8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4120ac.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4120b2.  v0:= temp;
  #L4120b4.  if v0 == 0 then goto L4120c6;
  #L4120b8.  v1.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4120bc.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4120c0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4120c6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent$DoOnEventMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4120d8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4120dc.  v2.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4120e0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.onEvent` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L4120e4.  v1:= 0I;
  #L4120e6.  call `accept`(v0, v3, v1) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L4120ec.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4120f0.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4120f6.  return @kind void;
  #L4120f8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4120fa.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L412100.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L412104.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41210a.  return @kind void;
  catch `java.lang.Throwable` @[L4120e0..L4120ec] goto L4120f8;
}
