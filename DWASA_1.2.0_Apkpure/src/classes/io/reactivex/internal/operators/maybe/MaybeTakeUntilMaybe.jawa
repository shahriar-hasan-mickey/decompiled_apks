record `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.AbstractMaybeWithUpstream` @kind class {
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L416248.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41624e.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe.other` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L416252.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L416264.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver`;
  #L416268.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L41626e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L416274.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe.other` @type ^`io.reactivex.MaybeSource` @kind object;
  #L416278.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver.other` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver$TakeUntilOtherMaybeObserver` @kind object;
  #L41627c.  call `subscribe`(v3, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L416282.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe.source` @type ^`io.reactivex.MaybeSource` @kind object;
  #L416286.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L41628c.  return @kind void;
}
