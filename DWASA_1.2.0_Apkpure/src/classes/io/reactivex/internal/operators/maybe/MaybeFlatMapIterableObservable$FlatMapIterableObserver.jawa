record `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.it` @AccessFlag VOLATILE;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.mapper` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41305c.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L413062.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L413066.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41306a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41307c.  v0:= 0I;
  #L41307e.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L413082.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413094.  v0:= 1I;
  #L413096.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L41309a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41309e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4130a4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4130a8.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4130ac.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412fbc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L412fc0.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412fd4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L412fd8.  if v0 != 0 then goto L412fe0;
  #L412fdc.  v0:= 1I;
  #L412fde.  goto L412fe2;
  #L412fe0.  v0:= 0I;
  #L412fe2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4130c0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4130c4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4130ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4130dc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4130e0.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4130e4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4130e8.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4130ee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413100.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L413104.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41310a.  v0:= temp;
  #L41310c.  if v0 == 0 then goto L41311e;
  #L413110.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L413114.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L413118.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41311e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L413130.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L413134.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L413138.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41313e.  v3:= temp @kind object;
  #L413140.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L413144.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L41314a.  v3:= temp @kind object;
  #L41314c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L413152.  v1:= temp;
  #L413154.  if v1 != 0 then goto L413160;
  #L413158.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41315e.  return @kind void;
  #L413160.  v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v3 @kind object;
  #L413164.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @type ^`boolean` @kind boolean;
  #L413168.  if v1 == 0 then goto L41317c;
  #L41316c.  v3:= 0I;
  #L41316e.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L413174.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L41317a.  return @kind void;
  #L41317c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L413180.  if v1 == 0 then goto L413186;
  #L413184.  return @kind void;
  #L413186.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41318c.  v1:= temp @kind object;
  #L41318e.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L413194.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L413198.  if v1 == 0 then goto L41319e;
  #L41319c.  return @kind void;
  #L41319e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4131a4.  v1:= temp;
  #L4131a6.  if v1 != 0 then goto L41317c;
  #L4131aa.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4131b0.  return @kind void;
  #L4131b2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4131b4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4131ba.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4131c0.  return @kind void;
  #L4131c2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4131c4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4131ca.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4131d0.  return @kind void;
  #L4131d2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4131d4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4131da.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4131e0.  return @kind void;
  catch `java.lang.Throwable` @[L413134..L413154] goto L4131d2;
  catch `java.lang.Throwable` @[L413186..L41318e] goto L4131c2;
  catch `java.lang.Throwable` @[L41319e..L4131a6] goto L4131b2;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L413018.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L41301c.  v1:= 0I;
  #L41301e.  if v0 == 0 then goto L413048;
  #L413022.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L413028.  v2:= temp @kind object;
  #L41302a.  v3:= "The iterator returned a null value" @kind object;
  #L41302e.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L413034.  v2:= temp @kind object;
  #L413036.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41303c.  v0:= temp;
  #L41303e.  if v0 != 0 then goto L413046;
  #L413042.  v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L413046.  return v2 @kind object;
  #L413048.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$FlatMapIterableObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412ff4.  v0:= 2I;
  #L412ff6.  v2:= v2 ^& v0 @kind int;
  #L412ff8.  if v2 == 0 then goto L413004;
  #L412ffc.  v2:= 1I;
  #L412ffe.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L413002.  return v0;
  #L413004.  v2:= 0I;
  #L413006.  return v2;
}
