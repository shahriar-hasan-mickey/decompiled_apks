record `io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.value` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains$ContainsMaybeObserver;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L410cd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L410cd6.  v0.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L410cda.  v0.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.value` @type ^`java.lang.Object` := v2 @kind object;
  #L410cde.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains$ContainsMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410cf0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L410cf4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L410cfa.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L410cfe.  v1.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L410d02.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains$ContainsMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410cb0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L410cb4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L410cba.  v0:= temp;
  #L410cbc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains$ContainsMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L410d14.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L410d18.  v2.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L410d1c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L410d20.  v1:= 0I;
  #L410d22.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L410d28.  v1:= temp @kind object;
  #L410d2a.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L410d30.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains$ContainsMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410d44.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L410d48.  v1.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L410d4c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L410d50.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410d56.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains$ContainsMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410d68.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L410d6c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L410d72.  v0:= temp;
  #L410d74.  if v0 == 0 then goto L410d86;
  #L410d78.  v1.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L410d7c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L410d80.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L410d86.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains$ContainsMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L410d98.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L410d9c.  v2.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L410da0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L410da4.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeContains$ContainsMaybeObserver.value` @type ^`java.lang.Object` @kind object;
  #L410da8.  call temp:= `equals`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L410dae.  v3:= temp;
  #L410db0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L410db6.  v3:= temp @kind object;
  #L410db8.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L410dbe.  return @kind void;
}
