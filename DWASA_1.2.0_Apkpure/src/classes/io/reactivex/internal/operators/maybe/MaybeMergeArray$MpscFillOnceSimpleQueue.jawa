record `io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex` @kind interface {
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L414f98.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L414f9e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L414fa2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L414fa8.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L414fac.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414fc0.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L414fc6.  v0:= temp @kind object;
  #L414fc8.  if v0 == 0 then goto L414fda;
  #L414fcc.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.isEmpty:()Z` @kind virtual;
  #L414fd2.  v0:= temp;
  #L414fd4.  if v0 != 0 then goto L414fda;
  #L414fd8.  goto L414fc0;
  #L414fda.  return @kind void;
}
procedure `int` `consumerIndex`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.consumerIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414edc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L414ee0.  return v0;
}
procedure `void` `drop`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.drop:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414fec.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L414ff0.  v1:= 0I;
  #L414ff2.  call `lazySet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L414ff8.  v0:= v0 + 1;
  #L414ffc.  v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int` := v0;
  #L415000.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414e58.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L414e5c.  call temp:= `producerIndex`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.producerIndex:()I` @kind virtual;
  #L414e62.  v1:= temp;
  #L414e64.  if v0 != v1 then goto L414e6c;
  #L414e68.  v0:= 1I;
  #L414e6a.  goto L414e6e;
  #L414e6c.  v0:= 0I;
  #L414e6e.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414e80.  v0:= "value is null" @kind object;
  #L414e84.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e8a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L414e8e.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L414e94.  v0:= temp;
  #L414e96.  call temp:= `length`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.length:()I` @kind virtual;
  #L414e9c.  v1:= temp;
  #L414e9e.  if v0 >= v1 then goto L414eac;
  #L414ea2.  call `lazySet`(v2, v0, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L414ea8.  v3:= 1I;
  #L414eaa.  return v3;
  #L414eac.  v3:= 0I;
  #L414eae.  return v3;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L414ec0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L414ec4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L414eca.  throw v1;
}
procedure `java.lang.Object` `peek`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414f14.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L414f18.  call temp:= `length`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.length:()I` @kind virtual;
  #L414f1e.  v1:= temp;
  #L414f20.  if v0 != v1 then goto L414f28;
  #L414f24.  v0:= 0I;
  #L414f26.  return v0 @kind object;
  #L414f28.  call temp:= `get`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L414f2e.  v0:= temp @kind object;
  #L414f30.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L414f44.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L414f48.  call temp:= `length`(v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.length:()I` @kind virtual;
  #L414f4e.  v1:= temp;
  #L414f50.  v2:= 0I;
  #L414f52.  if v0 != v1 then goto L414f58;
  #L414f56.  return v2 @kind object;
  #L414f58.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L414f5c.  call temp:= `get`(v4, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L414f62.  v3:= temp @kind object;
  #L414f64.  if v3 == 0 then goto L414f78;
  #L414f68.  v1:= v0 + 1;
  #L414f6c.  v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int` := v1;
  #L414f70.  call `lazySet`(v4, v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L414f76.  return v3 @kind object;
  #L414f78.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L414f7e.  v3:= temp;
  #L414f80.  if v3 != v0 then goto L414f5c;
  #L414f84.  return v2 @kind object;
}
procedure `int` `producerIndex`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.producerIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414ef4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L414ef8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L414efe.  v0:= temp;
  #L414f00.  return v0;
}
