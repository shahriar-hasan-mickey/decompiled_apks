record `io.reactivex.internal.operators.maybe.MaybeZipIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.maybe.MaybeZipIterable.sources` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeZipIterable.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L417aa4.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L417aaa.  v0.`io.reactivex.internal.operators.maybe.MaybeZipIterable.sources` @type ^`java.lang.Iterable` := v1 @kind object;
  #L417aae.  v0.`io.reactivex.internal.operators.maybe.MaybeZipIterable.zipper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L417ab2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeZipIterable` v6 @kind this, `io.reactivex.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L417ac4.  v0:= 8I;
  #L417ac8.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L417acc.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeZipIterable.sources` @type ^`java.lang.Iterable` @kind object;
  #L417ad0.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L417ad6.  v1:= temp @kind object;
  #L417ad8.  v2:= 0I;
  #L417ada.  v3:= v0 @kind object;
  #L417adc.  v0:= 0I;
  #L417ade.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L417ae4.  v4:= temp;
  #L417ae6.  if v4 == 0 then goto L417b34;
  #L417aea.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L417af0.  v4:= temp @kind object;
  #L417af2.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L417af6.  if v4 != 0 then goto L417b10;
  #L417afa.  v0:= new `java.lang.NullPointerException`;
  #L417afe.  v1:= "One of the sources is null" @kind object;
  #L417b02.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417b08.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L417b0e.  return @kind void;
  #L417b10.  v5:= length @variable v3;
  #L417b12.  if v0 != v5 then goto L417b28;
  #L417b16.  v5:= v0 ^> 2;
  #L417b1a.  v5:= v5 + v0 @kind int;
  #L417b1c.  call temp:= `copyOf`(v3, v5) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L417b22.  v3:= temp @kind object;
  #L417b24.  v3:= (`io.reactivex.MaybeSource`[]) v3 @kind object;
  #L417b28.  v5:= v0 + 1;
  #L417b2c.  v3[v0]:= v4 @kind object;
  #L417b30.  v0:= v5;
  #L417b32.  goto L417ade;
  #L417b34.  if v0 != 0 then goto L417b40;
  #L417b38.  call `complete`(v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/MaybeObserver;)V` @kind static;
  #L417b3e.  return @kind void;
  #L417b40.  v1:= 1I;
  #L417b42.  if v0 != v1 then goto L417b66;
  #L417b46.  v0:= v3[v2] @kind object;
  #L417b4a.  v1:= new `io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver`;
  #L417b4e.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipIterable$SingletonArrayFunc`;
  #L417b52.  call `<init>`(v2, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable$SingletonArrayFunc;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipIterable;)V` @kind direct;
  #L417b58.  call `<init>`(v1, v7, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$MapMaybeObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @kind direct;
  #L417b5e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L417b64.  return @kind void;
  #L417b66.  v1:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator`;
  #L417b6a.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeZipIterable.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L417b6e.  call `<init>`(v1, v7, v0, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.<init>:(Lio/reactivex/MaybeObserver;ILio/reactivex/functions/Function;)V` @kind direct;
  #L417b74.  call `onSubscribe`(v7, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L417b7a.  if v2 >= v0 then goto L417ba4;
  #L417b7e.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.isDisposed:()Z` @kind virtual;
  #L417b84.  v7:= temp;
  #L417b86.  if v7 == 0 then goto L417b8c;
  #L417b8a.  return @kind void;
  #L417b8c.  v7:= v3[v2] @kind object;
  #L417b90.  v4:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] @kind object;
  #L417b94.  v4:= v4[v2] @kind object;
  #L417b98.  call `subscribe`(v7, v4) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L417b9e.  v2:= v2 + 1;
  #L417ba2.  goto L417b7a;
  #L417ba4.  return @kind void;
  #L417ba6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417ba8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L417bae.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L417bb4.  return @kind void;
  catch `java.lang.Throwable` @[L417acc..L417b30] goto L417ba6;
}
