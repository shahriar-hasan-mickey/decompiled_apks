record `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.error` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411588.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41158e.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L411592.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4115a4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4115a8.  if v0 == 0 then goto L4115b8;
  #L4115ac.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4115b0.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4115b6.  goto L4115d6;
  #L4115b8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4115bc.  if v0 == 0 then goto L4115cc;
  #L4115c0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4115c4.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4115ca.  goto L4115d6;
  #L4115cc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4115d0.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4115d6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4115e8.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4115ec.  if v0 != 0 then goto L4115fc;
  #L4115f0.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4115f4.  call `onError`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4115fa.  goto L411622;
  #L4115fc.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L411600.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L411604.  v3:= 2I;
  #L411606.  v3:= new `java.lang.Throwable`[v3];
  #L41160a.  v4:= 0I;
  #L41160c.  v3[v4]:= v0 @kind object;
  #L411610.  v0:= 1I;
  #L411612.  v3[v0]:= v6 @kind object;
  #L411616.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L41161c.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411622.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411634.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L41163a.  v2:= temp @kind object;
  #L41163c.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L411640.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L411644.  if v2 == v0 then goto L41165e;
  #L411648.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L41164c.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L411652.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L411658.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.onComplete:()V` @kind virtual;
  #L41165e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411670.  v0:= 9223372036854775807L;
  #L41167a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L411680.  return @kind void;
}
