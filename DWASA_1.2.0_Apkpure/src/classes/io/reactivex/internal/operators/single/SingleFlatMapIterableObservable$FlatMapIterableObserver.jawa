record `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @AccessFlag VOLATILE;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.mapper` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43c6a8.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L43c6ae.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43c6b2.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43c6b6.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c6c8.  v0:= 0I;
  #L43c6ca.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L43c6ce.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c6e0.  v0:= 1I;
  #L43c6e2.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L43c6e6.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43c6ea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43c6f0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43c6f4.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43c6f8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c608.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43c60c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c620.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L43c624.  if v0 != 0 then goto L43c62c;
  #L43c628.  v0:= 1I;
  #L43c62a.  goto L43c62e;
  #L43c62c.  v0:= 0I;
  #L43c62e.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c70c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43c710.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43c714.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43c718.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c71e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c730.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43c734.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43c73a.  v0:= temp;
  #L43c73c.  if v0 == 0 then goto L43c74e;
  #L43c740.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43c744.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43c748.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43c74e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43c760.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43c764.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L43c768.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c76e.  v3:= temp @kind object;
  #L43c770.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L43c774.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43c77a.  v3:= temp @kind object;
  #L43c77c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c782.  v1:= temp;
  #L43c784.  if v1 != 0 then goto L43c790;
  #L43c788.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43c78e.  return @kind void;
  #L43c790.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @type ^`boolean` @kind boolean;
  #L43c794.  if v1 == 0 then goto L43c7ac;
  #L43c798.  v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v3 @kind object;
  #L43c79c.  v3:= 0I;
  #L43c79e.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c7a4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43c7aa.  return @kind void;
  #L43c7ac.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43c7b0.  if v1 == 0 then goto L43c7b6;
  #L43c7b4.  return @kind void;
  #L43c7b6.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c7bc.  v1:= temp @kind object;
  #L43c7be.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c7c4.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43c7c8.  if v1 == 0 then goto L43c7ce;
  #L43c7cc.  return @kind void;
  #L43c7ce.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c7d4.  v1:= temp;
  #L43c7d6.  if v1 != 0 then goto L43c7ac;
  #L43c7da.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43c7e0.  return @kind void;
  #L43c7e2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c7e4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c7ea.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c7f0.  return @kind void;
  #L43c7f2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c7f4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c7fa.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c800.  return @kind void;
  #L43c802.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c804.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c80a.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43c80e.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c814.  return @kind void;
  catch `java.lang.Throwable` @[L43c764..L43c784] goto L43c802;
  catch `java.lang.Throwable` @[L43c7b6..L43c7be] goto L43c7f2;
  catch `java.lang.Throwable` @[L43c7ce..L43c7d6] goto L43c7e2;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43c664.  v0:= v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L43c668.  v1:= 0I;
  #L43c66a.  if v0 == 0 then goto L43c694;
  #L43c66e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c674.  v2:= temp @kind object;
  #L43c676.  v3:= "The iterator returned a null value" @kind object;
  #L43c67a.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c680.  v2:= temp @kind object;
  #L43c682.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c688.  v0:= temp;
  #L43c68a.  if v0 != 0 then goto L43c692;
  #L43c68e.  v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L43c692.  return v2 @kind object;
  #L43c694.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c640.  v0:= 2I;
  #L43c642.  v2:= v2 ^& v0 @kind int;
  #L43c644.  if v2 == 0 then goto L43c650;
  #L43c648.  v2:= 1I;
  #L43c64a.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L43c64e.  return v0;
  #L43c650.  v2:= 0I;
  #L43c652.  return v2;
}
