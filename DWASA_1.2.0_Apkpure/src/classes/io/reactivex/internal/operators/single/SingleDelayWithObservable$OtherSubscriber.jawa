record `io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/SingleSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43ae48.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43ae4e.  v0.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43ae52.  v0.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.source` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L43ae56.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43ae68.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43ae6e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ae20.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ae26.  v0:= temp @kind object;
  #L43ae28.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43ae2c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43ae32.  v0:= temp;
  #L43ae34.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43ae80.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @type ^`boolean` @kind boolean;
  #L43ae84.  if v0 == 0 then goto L43ae8a;
  #L43ae88.  return @kind void;
  #L43ae8a.  v0:= 1I;
  #L43ae8c.  v3.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L43ae90.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L43ae94.  v1:= new `io.reactivex.internal.observers.ResumeSingleObserver`;
  #L43ae98.  v2:= v3.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43ae9c.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/observers/ResumeSingleObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/SingleObserver;)V` @kind direct;
  #L43aea2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43aea8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43aebc.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @type ^`boolean` @kind boolean;
  #L43aec0.  if v0 == 0 then goto L43aecc;
  #L43aec4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43aeca.  return @kind void;
  #L43aecc.  v0:= 1I;
  #L43aece.  v1.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L43aed2.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43aed6.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43aedc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L43aef0.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L43aef6.  v1:= temp @kind object;
  #L43aef8.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L43aefc.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43af02.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onComplete:()V` @kind virtual;
  #L43af08.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43af1c.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43af22.  v1:= temp;
  #L43af24.  if v1 == 0 then goto L43af32;
  #L43af28.  v1:= v0.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43af2c.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43af32.  return @kind void;
}
