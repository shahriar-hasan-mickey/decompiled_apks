record `io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterable` @kind class @AccessFlag FINAL extends `java.lang.Iterable` @kind interface {
  `java.lang.Iterable` `io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterable.sources` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d108.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43d10e.  v0.`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterable.sources` @type ^`java.lang.Iterable` := v1 @kind object;
  #L43d112.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterable` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterable;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d0e0.  v0:= new `io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator`;
  #L43d0e4.  v1:= v2.`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterable.sources` @type ^`java.lang.Iterable` @kind object;
  #L43d0e8.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43d0ee.  v1:= temp @kind object;
  #L43d0f0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterator;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L43d0f6.  return v0 @kind object;
}
