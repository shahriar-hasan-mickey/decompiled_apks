record `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @AccessFlag VOLATILE;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43c2b0.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L43c2b6.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43c2ba.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43c2be.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43c2c2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43c2c8.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L43c2cc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c2e0.  v0:= 1I;
  #L43c2e2.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L43c2e6.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43c2ea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43c2f0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43c2f4.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43c2f8.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c30c.  v0:= 0I;
  #L43c30e.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L43c312.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L43c324.  call temp:= `getAndIncrement`(v11) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.getAndIncrement:()I` @kind virtual;
  #L43c32a.  v0:= temp;
  #L43c32c.  if v0 == 0 then goto L43c332;
  #L43c330.  return @kind void;
  #L43c332.  v0:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c336.  v1:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L43c33a.  v2:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @type ^`boolean` @kind boolean;
  #L43c33e.  if v2 == 0 then goto L43c356;
  #L43c342.  if v1 == 0 then goto L43c356;
  #L43c346.  v1:= 0I;
  #L43c348.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c34e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43c354.  return @kind void;
  #L43c356.  v2:= 1I;
  #L43c358.  if v1 == 0 then goto L43c40a;
  #L43c35c.  v3:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c360.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43c366.  v3:= temp @kind wide;
  #L43c368.  v5:= 9223372036854775807L;
  #L43c372.  v7:= lcmp(v3, v5);
  #L43c376.  if v7 != 0 then goto L43c382;
  #L43c37a.  call `slowPath`(v11, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.slowPath:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L43c380.  return @kind void;
  #L43c382.  v5:= 0L;
  #L43c386.  v7:= v5 @kind wide;
  #L43c388.  v9:= lcmp(v7, v3);
  #L43c38c.  if v9 == 0 then goto L43c3f8;
  #L43c390.  v9:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43c394.  if v9 == 0 then goto L43c39a;
  #L43c398.  return @kind void;
  #L43c39a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c3a0.  v9:= temp @kind object;
  #L43c3a2.  v10:= "The iterator returned a null value" @kind object;
  #L43c3a6.  call temp:= `requireNonNull`(v9, v10) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c3ac.  v9:= temp @kind object;
  #L43c3ae.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c3b4.  v9:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43c3b8.  if v9 == 0 then goto L43c3be;
  #L43c3bc.  return @kind void;
  #L43c3be.  v9:= 1L;
  #L43c3c2.  v7:= v7 + v9 @kind long;
  #L43c3c4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c3ca.  v9:= temp;
  #L43c3cc.  if v9 != 0 then goto L43c388;
  #L43c3d0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43c3d6.  return @kind void;
  #L43c3d8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c3da.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c3e0.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c3e6.  return @kind void;
  #L43c3e8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c3ea.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c3f0.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c3f6.  return @kind void;
  #L43c3f8.  v3:= lcmp(v7, v5);
  #L43c3fc.  if v3 == 0 then goto L43c40a;
  #L43c400.  v3:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c404.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43c40a.  v2:= -v2 @kind int;
  #L43c40c.  call temp:= `addAndGet`(v11, v2) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.addAndGet:(I)I` @kind virtual;
  #L43c412.  v2:= temp;
  #L43c414.  if v2 != 0 then goto L43c41a;
  #L43c418.  return @kind void;
  #L43c41a.  if v1 != 0 then goto L43c358;
  #L43c41e.  v1:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L43c422.  goto L43c358;
  catch `java.lang.Throwable` @[L43c39a..L43c3ae] goto L43c3e8;
  catch `java.lang.Throwable` @[L43c3c4..L43c3cc] goto L43c3d8;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c228.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L43c22c.  if v0 != 0 then goto L43c234;
  #L43c230.  v0:= 1I;
  #L43c232.  goto L43c236;
  #L43c234.  v0:= 0I;
  #L43c236.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c44c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43c450.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43c454.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c458.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c45e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c470.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43c474.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43c47a.  v0:= temp;
  #L43c47c.  if v0 == 0 then goto L43c48e;
  #L43c480.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43c484.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c488.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43c48e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c4a0.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L43c4a4.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c4aa.  v2:= temp @kind object;
  #L43c4ac.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L43c4b0.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43c4b6.  v2:= temp @kind object;
  #L43c4b8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c4be.  v0:= temp;
  #L43c4c0.  if v0 != 0 then goto L43c4d0;
  #L43c4c4.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c4c8.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43c4ce.  return @kind void;
  #L43c4d0.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v2 @kind object;
  #L43c4d4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @kind virtual;
  #L43c4da.  return @kind void;
  #L43c4dc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c4de.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c4e4.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c4e8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c4ee.  return @kind void;
  catch `java.lang.Throwable` @[L43c4a0..L43c4c0] goto L43c4dc;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43c26c.  v0:= v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L43c270.  v1:= 0I;
  #L43c272.  if v0 == 0 then goto L43c29c;
  #L43c276.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c27c.  v2:= temp @kind object;
  #L43c27e.  v3:= "The iterator returned a null value" @kind object;
  #L43c282.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c288.  v2:= temp @kind object;
  #L43c28a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c290.  v0:= temp;
  #L43c292.  if v0 != 0 then goto L43c29a;
  #L43c296.  v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L43c29a.  return v2 @kind object;
  #L43c29c.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c50c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43c512.  v0:= temp;
  #L43c514.  if v0 == 0 then goto L43c528;
  #L43c518.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c51c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43c522.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @kind virtual;
  #L43c528.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c248.  v0:= 2I;
  #L43c24a.  v2:= v2 ^& v0 @kind int;
  #L43c24c.  if v2 == 0 then goto L43c258;
  #L43c250.  v2:= 1I;
  #L43c252.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L43c256.  return v0;
  #L43c258.  v2:= 0I;
  #L43c25a.  return v2;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.slowPath:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L43c53c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43c540.  if v0 == 0 then goto L43c546;
  #L43c544.  return @kind void;
  #L43c546.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c54c.  v0:= temp @kind object;
  #L43c54e.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c554.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43c558.  if v0 == 0 then goto L43c55e;
  #L43c55c.  return @kind void;
  #L43c55e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c564.  v0:= temp;
  #L43c566.  if v0 != 0 then goto L43c53c;
  #L43c56a.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43c570.  return @kind void;
  #L43c572.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c574.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c57a.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c580.  return @kind void;
  #L43c582.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c584.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c58a.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c590.  return @kind void;
  catch `java.lang.Throwable` @[L43c546..L43c54e] goto L43c582;
  catch `java.lang.Throwable` @[L43c55e..L43c566] goto L43c572;
}
