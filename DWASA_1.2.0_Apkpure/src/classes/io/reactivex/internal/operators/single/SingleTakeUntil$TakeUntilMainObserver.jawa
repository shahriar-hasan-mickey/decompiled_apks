record `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43db78.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43db7e.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43db82.  v1:= new `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber`;
  #L43db86.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.<init>:(Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;)V` @kind direct;
  #L43db8c.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` := v1 @kind object;
  #L43db90.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43dba4.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43dbaa.  v0:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` @kind object;
  #L43dbae.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.dispose:()V` @kind virtual;
  #L43dbb4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43db50.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43db56.  v0:= temp @kind object;
  #L43db58.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43db5c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43db62.  v0:= temp;
  #L43db64.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43dbc8.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` @kind object;
  #L43dbcc.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.dispose:()V` @kind virtual;
  #L43dbd2.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43dbd8.  v0:= temp @kind object;
  #L43dbda.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43dbde.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dbe2.  if v0 == v1 then goto L43dc0a;
  #L43dbe6.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dbea.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43dbf0.  v0:= temp @kind object;
  #L43dbf2.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43dbf6.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dbfa.  if v0 == v1 then goto L43dc0a;
  #L43dbfe.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43dc02.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dc08.  return @kind void;
  #L43dc0a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43dc10.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43dc24.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43dc2a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43dc3c.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` @kind object;
  #L43dc40.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.dispose:()V` @kind virtual;
  #L43dc46.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dc4a.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43dc50.  v0:= temp @kind object;
  #L43dc52.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43dc56.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dc5a.  if v0 == v1 then goto L43dc68;
  #L43dc5e.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43dc62.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43dc68.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43dc7c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43dc82.  v0:= temp @kind object;
  #L43dc84.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43dc88.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dc8c.  if v0 == v1 then goto L43dcbe;
  #L43dc90.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dc94.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43dc9a.  v0:= temp @kind object;
  #L43dc9c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43dca0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dca4.  if v0 == v1 then goto L43dcbe;
  #L43dca8.  if v0 == 0 then goto L43dcb2;
  #L43dcac.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43dcb2.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43dcb6.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dcbc.  return @kind void;
  #L43dcbe.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43dcc4.  return @kind void;
}
