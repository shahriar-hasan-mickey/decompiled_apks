record `io.reactivex.internal.operators.single.SingleDelayWithPublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.single.SingleDelayWithPublisher.other` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleDelayWithPublisher.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher;.<init>:(Lio/reactivex/SingleSource;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43b0d0.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L43b0d6.  v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher.source` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L43b0da.  v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher.other` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L43b0de.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L43b0f0.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher.other` @type ^`org.reactivestreams.Publisher` @kind object;
  #L43b0f4.  v1:= new `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber`;
  #L43b0f8.  v2:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L43b0fc.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/SingleSource;)V` @kind direct;
  #L43b102.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43b108.  return @kind void;
}
