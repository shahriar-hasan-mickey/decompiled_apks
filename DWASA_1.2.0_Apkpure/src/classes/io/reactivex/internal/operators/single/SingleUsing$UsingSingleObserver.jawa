record `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @AccessFlag FINAL;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 , `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;ZLio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43e50c.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L43e512.  v0.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43e516.  v0.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` := v3 @kind boolean;
  #L43e51a.  v0.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L43e51e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e530.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43e534.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43e53a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43e53e.  v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43e542.  call `disposeAfter`(v1) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.disposeAfter:()V` @kind virtual;
  #L43e548.  return @kind void;
}
procedure `void` `disposeAfter`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.disposeAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43e55c.  call temp:= `getAndSet`(v2, v2) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43e562.  v0:= temp @kind object;
  #L43e564.  if v0 == v2 then goto L43e582;
  #L43e568.  v1:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43e56c.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43e572.  goto L43e582;
  #L43e574.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e576.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43e57c.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43e582.  return @kind void;
  catch `java.lang.Throwable` @[L43e568..L43e572] goto L43e574;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e4ec.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43e4f0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43e4f6.  v0:= temp;
  #L43e4f8.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43e5a0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43e5a4.  v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43e5a8.  v0:= v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` @kind boolean;
  #L43e5ac.  if v0 == 0 then goto L43e5f2;
  #L43e5b0.  call temp:= `getAndSet`(v4, v4) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43e5b6.  v0:= temp @kind object;
  #L43e5b8.  if v0 == v4 then goto L43e5f0;
  #L43e5bc.  v1:= v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43e5c0.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43e5c6.  goto L43e5f2;
  #L43e5c8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e5ca.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43e5d0.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L43e5d4.  v2:= 2I;
  #L43e5d6.  v2:= new `java.lang.Throwable`[v2];
  #L43e5da.  v3:= 0I;
  #L43e5dc.  v2[v3]:= v5 @kind object;
  #L43e5e0.  v5:= 1I;
  #L43e5e2.  v2[v5]:= v0 @kind object;
  #L43e5e6.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L43e5ec.  v5:= v1 @kind object;
  #L43e5ee.  goto L43e5f2;
  #L43e5f0.  return @kind void;
  #L43e5f2.  v0:= v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43e5f6.  call `onError`(v0, v5) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e5fc.  v5:= v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` @kind boolean;
  #L43e600.  if v5 != 0 then goto L43e60a;
  #L43e604.  call `disposeAfter`(v4) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.disposeAfter:()V` @kind virtual;
  #L43e60a.  return @kind void;
  catch `java.lang.Throwable` @[L43e5bc..L43e5c6] goto L43e5c8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e628.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43e62c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43e632.  v0:= temp;
  #L43e634.  if v0 == 0 then goto L43e646;
  #L43e638.  v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43e63c.  v2:= v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43e640.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43e646.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43e658.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43e65c.  v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43e660.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` @kind boolean;
  #L43e664.  if v0 == 0 then goto L43e694;
  #L43e668.  call temp:= `getAndSet`(v2, v2) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43e66e.  v0:= temp @kind object;
  #L43e670.  if v0 == v2 then goto L43e692;
  #L43e674.  v1:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43e678.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43e67e.  goto L43e694;
  #L43e680.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e682.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43e688.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43e68c.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e692.  return @kind void;
  #L43e694.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43e698.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43e69e.  v3:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` @kind boolean;
  #L43e6a2.  if v3 != 0 then goto L43e6ac;
  #L43e6a6.  call `disposeAfter`(v2) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.disposeAfter:()V` @kind virtual;
  #L43e6ac.  return @kind void;
  catch `java.lang.Throwable` @[L43e674..L43e67e] goto L43e680;
}
