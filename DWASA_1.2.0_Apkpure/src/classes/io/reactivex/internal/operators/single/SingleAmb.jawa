record `io.reactivex.internal.operators.single.SingleAmb` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.SingleSource`[] `io.reactivex.internal.operators.single.SingleAmb.sources` @AccessFlag PRIVATE_FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.single.SingleAmb.sourcesIterable` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleAmb` v0 @kind this, `io.reactivex.SingleSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb;.<init>:([Lio/reactivex/SingleSource;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43a3b0.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L43a3b6.  v0.`io.reactivex.internal.operators.single.SingleAmb.sources` @type ^`io.reactivex.SingleSource`[] := v1 @kind object;
  #L43a3ba.  v0.`io.reactivex.internal.operators.single.SingleAmb.sourcesIterable` @type ^`java.lang.Iterable` := v2 @kind object;
  #L43a3be.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleAmb` v9 @kind this, `io.reactivex.SingleObserver` v10 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L43a3d0.  v0:= v9.`io.reactivex.internal.operators.single.SingleAmb.sources` @type ^`io.reactivex.SingleSource`[] @kind object;
  #L43a3d4.  v1:= "One of the sources is null" @kind object;
  #L43a3d8.  v2:= 0I;
  #L43a3da.  if v0 != 0 then goto L43a456;
  #L43a3de.  v0:= 8I;
  #L43a3e2.  v0:= new `io.reactivex.SingleSource`[v0];
  #L43a3e6.  v3:= v9.`io.reactivex.internal.operators.single.SingleAmb.sourcesIterable` @type ^`java.lang.Iterable` @kind object;
  #L43a3ea.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43a3f0.  v3:= temp @kind object;
  #L43a3f2.  v4:= 0I;
  #L43a3f4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43a3fa.  v5:= temp;
  #L43a3fc.  if v5 == 0 then goto L43a458;
  #L43a400.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43a406.  v5:= temp @kind object;
  #L43a408.  v5:= (`io.reactivex.SingleSource`) v5 @kind object;
  #L43a40c.  if v5 != 0 then goto L43a422;
  #L43a410.  v0:= new `java.lang.NullPointerException`;
  #L43a414.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a41a.  call `error`(v0, v10) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L43a420.  return @kind void;
  #L43a422.  v6:= length @variable v0;
  #L43a424.  if v4 != v6 then goto L43a43a;
  #L43a428.  v6:= v4 ^> 2;
  #L43a42c.  v6:= v6 + v4 @kind int;
  #L43a42e.  v6:= new `io.reactivex.SingleSource`[v6];
  #L43a432.  call `arraycopy`(v0, v2, v6, v2, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43a438.  v0:= v6 @kind object;
  #L43a43a.  v6:= v4 + 1;
  #L43a43e.  v0[v4]:= v5 @kind object;
  #L43a442.  v4:= v6;
  #L43a444.  goto L43a3f4;
  #L43a446.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43a448.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43a44e.  call `error`(v0, v10) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L43a454.  return @kind void;
  #L43a456.  v4:= length @variable v0;
  #L43a458.  v3:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43a45c.  call `<init>`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43a462.  v5:= new `io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver`;
  #L43a466.  call `<init>`(v5, v10, v3) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/disposables/CompositeDisposable;)V` @kind direct;
  #L43a46c.  call `onSubscribe`(v10, v3) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43a472.  v6:= 0I;
  #L43a474.  if v6 >= v4 then goto L43a4c8;
  #L43a478.  v7:= v0[v6] @kind object;
  #L43a47c.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.get:()Z` @kind virtual;
  #L43a482.  v8:= temp;
  #L43a484.  if v8 == 0 then goto L43a48a;
  #L43a488.  return @kind void;
  #L43a48a.  if v7 != 0 then goto L43a4bc;
  #L43a48e.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43a494.  v0:= new `java.lang.NullPointerException`;
  #L43a498.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a49e.  v1:= 1I;
  #L43a4a0.  call temp:= `compareAndSet`(v5, v2, v1) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43a4a6.  v1:= temp;
  #L43a4a8.  if v1 == 0 then goto L43a4b4;
  #L43a4ac.  call `onError`(v10, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a4b2.  goto L43a4ba;
  #L43a4b4.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43a4ba.  return @kind void;
  #L43a4bc.  call `subscribe`(v7, v5) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43a4c2.  v6:= v6 + 1;
  #L43a4c6.  goto L43a474;
  #L43a4c8.  return @kind void;
  catch `java.lang.Throwable` @[L43a3e6..L43a442] goto L43a446;
}
