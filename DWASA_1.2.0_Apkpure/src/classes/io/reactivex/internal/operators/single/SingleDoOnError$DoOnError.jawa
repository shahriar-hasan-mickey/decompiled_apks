record `io.reactivex.internal.operators.single.SingleDoOnError$DoOnError` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleDoOnError$DoOnError.downstream` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.single.SingleDoOnError` `io.reactivex.internal.operators.single.SingleDoOnError$DoOnError.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError` v0 @kind this, `io.reactivex.internal.operators.single.SingleDoOnError` v1 @kind object, `io.reactivex.SingleObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnError$DoOnError;.<init>:(Lio/reactivex/internal/operators/single/SingleDoOnError;Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b920.  v0.`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError.this$0` @type ^`io.reactivex.internal.operators.single.SingleDoOnError` := v1 @kind object;
  #L43b924.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43b92a.  v0.`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError.downstream` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L43b92e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnError$DoOnError;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43b940.  v0:= v4.`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError.this$0` @type ^`io.reactivex.internal.operators.single.SingleDoOnError` @kind object;
  #L43b944.  v0:= v0.`io.reactivex.internal.operators.single.SingleDoOnError.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43b948.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43b94e.  goto L43b976;
  #L43b950.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b952.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43b958.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L43b95c.  v2:= 2I;
  #L43b95e.  v2:= new `java.lang.Throwable`[v2];
  #L43b962.  v3:= 0I;
  #L43b964.  v2[v3]:= v5 @kind object;
  #L43b968.  v5:= 1I;
  #L43b96a.  v2[v5]:= v0 @kind object;
  #L43b96e.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L43b974.  v5:= v1 @kind object;
  #L43b976.  v0:= v4.`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b97a.  call `onError`(v0, v5) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b980.  return @kind void;
  catch `java.lang.Throwable` @[L43b940..L43b94e] goto L43b950;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnError$DoOnError;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b9a0.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b9a4.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43b9aa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnError$DoOnError;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b9bc.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnError$DoOnError.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b9c0.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43b9c6.  return @kind void;
}
