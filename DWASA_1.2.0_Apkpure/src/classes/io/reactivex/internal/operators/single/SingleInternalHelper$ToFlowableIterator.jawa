record `io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator.sit` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterator;.<init>:(Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d18c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43d192.  v0.`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator.sit` @type ^`java.util.Iterator` := v1 @kind object;
  #L43d196.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d124.  v0:= v1.`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator.sit` @type ^`java.util.Iterator` @kind object;
  #L43d128.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43d12e.  v0:= temp;
  #L43d130.  return v0;
}
procedure `io.reactivex.Flowable` `next`(`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterator;.next:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d144.  v0:= new `io.reactivex.internal.operators.single.SingleToFlowable`;
  #L43d148.  v1:= v2.`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator.sit` @type ^`java.util.Iterator` @kind object;
  #L43d14c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43d152.  v1:= temp @kind object;
  #L43d154.  v1:= (`io.reactivex.SingleSource`) v1 @kind object;
  #L43d158.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable;.<init>:(Lio/reactivex/SingleSource;)V` @kind direct;
  #L43d15e.  return v0 @kind object;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L43d170.  call temp:= `next`(v1) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterator;.next:()Lio/reactivex/Flowable;` @kind virtual;
  #L43d176.  v0:= temp @kind object;
  #L43d178.  return v0 @kind object;
}
procedure `void` `remove`(`io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleInternalHelper$ToFlowableIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d1a8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L43d1ac.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L43d1b2.  throw v0;
}
