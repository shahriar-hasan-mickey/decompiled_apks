record `io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$ToSingleObserver;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43cd2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43cd32.  v0.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43cd36.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$ToSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cd48.  v0:= 1I;
  #L43cd4a.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L43cd4e.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43cd52.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43cd58.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$ToSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cd14.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.disposed` @type ^`boolean` @kind boolean;
  #L43cd18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$ToSingleObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43cd6c.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.done` @type ^`boolean` @kind boolean;
  #L43cd70.  if v0 == 0 then goto L43cd76;
  #L43cd74.  return @kind void;
  #L43cd76.  v0:= 1I;
  #L43cd78.  v3.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43cd7c.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.value` @type ^`java.lang.Object` @kind object;
  #L43cd80.  v1:= 0I;
  #L43cd82.  v3.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L43cd86.  if v0 != 0 then goto L43cda4;
  #L43cd8a.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43cd8e.  v1:= new `java.util.NoSuchElementException`;
  #L43cd92.  v2:= "The source Publisher is empty" @kind object;
  #L43cd96.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43cd9c.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43cda2.  goto L43cdae;
  #L43cda4.  v1:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43cda8.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43cdae.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$ToSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cdc0.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.done` @type ^`boolean` @kind boolean;
  #L43cdc4.  if v0 == 0 then goto L43cdd0;
  #L43cdc8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43cdce.  return @kind void;
  #L43cdd0.  v0:= 1I;
  #L43cdd2.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43cdd6.  v0:= 0I;
  #L43cdd8.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.value` @type ^`java.lang.Object` := v0 @kind object;
  #L43cddc.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43cde0.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43cde6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$ToSingleObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43cdf8.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.done` @type ^`boolean` @kind boolean;
  #L43cdfc.  if v0 == 0 then goto L43ce02;
  #L43ce00.  return @kind void;
  #L43ce02.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.value` @type ^`java.lang.Object` @kind object;
  #L43ce06.  if v0 == 0 then goto L43ce3a;
  #L43ce0a.  v3:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43ce0e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43ce14.  v3:= 1I;
  #L43ce16.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.done` @type ^`boolean` := v3 @kind boolean;
  #L43ce1a.  v3:= 0I;
  #L43ce1c.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L43ce20.  v3:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43ce24.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L43ce28.  v1:= "Too many elements in the Publisher" @kind object;
  #L43ce2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43ce32.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ce38.  goto L43ce3e;
  #L43ce3a.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.value` @type ^`java.lang.Object` := v3 @kind object;
  #L43ce3e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$ToSingleObserver;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ce50.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43ce54.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43ce5a.  v0:= temp;
  #L43ce5c.  if v0 == 0 then goto L43ce7e;
  #L43ce60.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43ce64.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43ce68.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43ce6e.  v0:= 9223372036854775807L;
  #L43ce78.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43ce7e.  return @kind void;
}
