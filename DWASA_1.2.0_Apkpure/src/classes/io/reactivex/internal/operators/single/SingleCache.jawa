record `io.reactivex.internal.operators.single.SingleCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `java.lang.Throwable` `io.reactivex.internal.operators.single.SingleCache.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.single.SingleCache.observers` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleCache.source` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleCache.value` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.single.SingleCache.wip` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] `@@io.reactivex.internal.operators.single.SingleCache.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] `@@io.reactivex.internal.operators.single.SingleCache.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/single/SingleCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L43a5a4.  v0:= 0I;
  #L43a5a6.  v1:= new `io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[v0];
  #L43a5aa.  `@@io.reactivex.internal.operators.single.SingleCache.EMPTY` @type ^`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] := v1 @kind object;
  #L43a5ae.  v0:= new `io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[v0];
  #L43a5b2.  `@@io.reactivex.internal.operators.single.SingleCache.TERMINATED` @type ^`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] := v0 @kind object;
  #L43a5b6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleCache` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.<init>:(Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43a5c8.  call `<init>`(v1) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L43a5ce.  v1.`io.reactivex.internal.operators.single.SingleCache.source` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L43a5d2.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43a5d6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43a5dc.  v1.`io.reactivex.internal.operators.single.SingleCache.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L43a5e0.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43a5e4.  v0:= `@@io.reactivex.internal.operators.single.SingleCache.EMPTY` @type ^`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] @kind object;
  #L43a5e8.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L43a5ee.  v1.`io.reactivex.internal.operators.single.SingleCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L43a5f2.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.single.SingleCache` v4 @kind this, `io.reactivex.internal.operators.single.SingleCache$CacheDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.add:(Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43a550.  v0:= v4.`io.reactivex.internal.operators.single.SingleCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a554.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a55a.  v0:= temp @kind object;
  #L43a55c.  v0:= (`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[]) v0 @kind object;
  #L43a560.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.TERMINATED` @type ^`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] @kind object;
  #L43a564.  v2:= 0I;
  #L43a566.  if v0 != v1 then goto L43a56c;
  #L43a56a.  return v2;
  #L43a56c.  v1:= length @variable v0;
  #L43a56e.  v3:= v1 + 1;
  #L43a572.  v3:= new `io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[v3];
  #L43a576.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43a57c.  v3[v1]:= v5 @kind object;
  #L43a580.  v1:= v4.`io.reactivex.internal.operators.single.SingleCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a584.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43a58a.  v0:= temp;
  #L43a58c.  if v0 == 0 then goto L43a550;
  #L43a590.  v5:= 1I;
  #L43a592.  return v5;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43a604.  v5.`io.reactivex.internal.operators.single.SingleCache.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L43a608.  v0:= v5.`io.reactivex.internal.operators.single.SingleCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a60c.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.TERMINATED` @type ^`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] @kind object;
  #L43a610.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43a616.  v0:= temp @kind object;
  #L43a618.  v0:= (`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[]) v0 @kind object;
  #L43a61c.  v1:= length @variable v0;
  #L43a61e.  v2:= 0I;
  #L43a620.  if v2 >= v1 then goto L43a644;
  #L43a624.  v3:= v0[v2] @kind object;
  #L43a628.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;.isDisposed:()Z` @kind virtual;
  #L43a62e.  v4:= temp;
  #L43a630.  if v4 != 0 then goto L43a63e;
  #L43a634.  v3:= v3.`io.reactivex.internal.operators.single.SingleCache$CacheDisposable.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43a638.  call `onError`(v3, v6) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a63e.  v2:= v2 + 1;
  #L43a642.  goto L43a620;
  #L43a644.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43a658.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43a66c.  v5.`io.reactivex.internal.operators.single.SingleCache.value` @type ^`java.lang.Object` := v6 @kind object;
  #L43a670.  v0:= v5.`io.reactivex.internal.operators.single.SingleCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a674.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.TERMINATED` @type ^`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] @kind object;
  #L43a678.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43a67e.  v0:= temp @kind object;
  #L43a680.  v0:= (`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[]) v0 @kind object;
  #L43a684.  v1:= length @variable v0;
  #L43a686.  v2:= 0I;
  #L43a688.  if v2 >= v1 then goto L43a6ac;
  #L43a68c.  v3:= v0[v2] @kind object;
  #L43a690.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;.isDisposed:()Z` @kind virtual;
  #L43a696.  v4:= temp;
  #L43a698.  if v4 != 0 then goto L43a6a6;
  #L43a69c.  v3:= v3.`io.reactivex.internal.operators.single.SingleCache$CacheDisposable.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43a6a0.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43a6a6.  v2:= v2 + 1;
  #L43a6aa.  goto L43a688;
  #L43a6ac.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.single.SingleCache` v6 @kind this, `io.reactivex.internal.operators.single.SingleCache$CacheDisposable` v7 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.remove:(Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43a6c0.  v0:= v6.`io.reactivex.internal.operators.single.SingleCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a6c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a6ca.  v0:= temp @kind object;
  #L43a6cc.  v0:= (`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[]) v0 @kind object;
  #L43a6d0.  v1:= length @variable v0;
  #L43a6d2.  if v1 != 0 then goto L43a6d8;
  #L43a6d6.  return @kind void;
  #L43a6d8.  v2:= -1I;
  #L43a6da.  v3:= 0I;
  #L43a6dc.  v4:= 0I;
  #L43a6de.  if v4 >= v1 then goto L43a6f4;
  #L43a6e2.  v5:= v0[v4] @kind object;
  #L43a6e6.  if v5 != v7 then goto L43a6ee;
  #L43a6ea.  v2:= v4;
  #L43a6ec.  goto L43a6f4;
  #L43a6ee.  v4:= v4 + 1;
  #L43a6f2.  goto L43a6de;
  #L43a6f4.  if v2 >= 0 then goto L43a6fa;
  #L43a6f8.  return @kind void;
  #L43a6fa.  v4:= 1I;
  #L43a6fc.  if v1 != v4 then goto L43a706;
  #L43a700.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.EMPTY` @type ^`io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[] @kind object;
  #L43a704.  goto L43a724;
  #L43a706.  v5:= v1 + -1;
  #L43a70a.  v5:= new `io.reactivex.internal.operators.single.SingleCache$CacheDisposable`[v5];
  #L43a70e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43a714.  v3:= v2 + 1;
  #L43a718.  v1:= v1 - v2 @kind int;
  #L43a71a.  v1:= v1 - v4 @kind int;
  #L43a71c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43a722.  v1:= v5 @kind object;
  #L43a724.  v2:= v6.`io.reactivex.internal.operators.single.SingleCache.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a728.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43a72e.  v0:= temp;
  #L43a730.  if v0 == 0 then goto L43a6c0;
  #L43a734.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleCache` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L43a748.  v0:= new `io.reactivex.internal.operators.single.SingleCache$CacheDisposable`;
  #L43a74c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/internal/operators/single/SingleCache;)V` @kind direct;
  #L43a752.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43a758.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleCache;.add:(Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;)Z` @kind virtual;
  #L43a75e.  v1:= temp;
  #L43a760.  if v1 == 0 then goto L43a792;
  #L43a764.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;.isDisposed:()Z` @kind virtual;
  #L43a76a.  v3:= temp;
  #L43a76c.  if v3 == 0 then goto L43a776;
  #L43a770.  call `remove`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleCache;.remove:(Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;)V` @kind virtual;
  #L43a776.  v3:= v2.`io.reactivex.internal.operators.single.SingleCache.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a77a.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43a780.  v3:= temp;
  #L43a782.  if v3 != 0 then goto L43a790;
  #L43a786.  v3:= v2.`io.reactivex.internal.operators.single.SingleCache.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L43a78a.  call `subscribe`(v3, v2) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43a790.  return @kind void;
  #L43a792.  v0:= v2.`io.reactivex.internal.operators.single.SingleCache.error` @type ^`java.lang.Throwable` @kind object;
  #L43a796.  if v0 == 0 then goto L43a7a2;
  #L43a79a.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a7a0.  goto L43a7ac;
  #L43a7a2.  v0:= v2.`io.reactivex.internal.operators.single.SingleCache.value` @type ^`java.lang.Object` @kind object;
  #L43a7a6.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43a7ac.  return @kind void;
}
