record `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.values` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v1 @kind this, `io.reactivex.SingleObserver` v2 @kind object, `int` v3 , `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43e86c.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43e872.  v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L43e876.  v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.zipper` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L43e87a.  v2:= new `io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[v3];
  #L43e87e.  v4:= 0I;
  #L43e880.  if v4 >= v3 then goto L43e898;
  #L43e884.  v0:= new `io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`;
  #L43e888.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver;.<init>:(Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;I)V` @kind direct;
  #L43e88e.  v2[v4]:= v0 @kind object;
  #L43e892.  v4:= v4 + 1;
  #L43e896.  goto L43e880;
  #L43e898.  v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] := v2 @kind object;
  #L43e89c.  v2:= new `java.lang.Object`[v3];
  #L43e8a0.  v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] := v2 @kind object;
  #L43e8a4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43e8b8.  v0:= 0I;
  #L43e8ba.  call temp:= `getAndSet`(v4, v0) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.getAndSet:(I)I` @kind virtual;
  #L43e8c0.  v1:= temp;
  #L43e8c2.  if v1 <= 0 then goto L43e8e0;
  #L43e8c6.  v1:= v4.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] @kind object;
  #L43e8ca.  v2:= length @variable v1;
  #L43e8cc.  if v0 >= v2 then goto L43e8e0;
  #L43e8d0.  v3:= v1[v0] @kind object;
  #L43e8d4.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver;.dispose:()V` @kind virtual;
  #L43e8da.  v0:= v0 + 1;
  #L43e8de.  goto L43e8cc;
  #L43e8e0.  return @kind void;
}
procedure `void` `disposeExcept`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.disposeExcept:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43e8f4.  v0:= v4.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] @kind object;
  #L43e8f8.  v1:= length @variable v0;
  #L43e8fa.  v2:= 0I;
  #L43e8fc.  if v2 >= v5 then goto L43e910;
  #L43e900.  v3:= v0[v2] @kind object;
  #L43e904.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver;.dispose:()V` @kind virtual;
  #L43e90a.  v2:= v2 + 1;
  #L43e90e.  goto L43e8fc;
  #L43e910.  v5:= v5 + 1;
  #L43e914.  if v5 >= v1 then goto L43e924;
  #L43e918.  v2:= v0[v5] @kind object;
  #L43e91c.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver;.dispose:()V` @kind virtual;
  #L43e922.  goto L43e910;
  #L43e924.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.innerError:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L43e938.  v0:= 0I;
  #L43e93a.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.getAndSet:(I)I` @kind virtual;
  #L43e940.  v0:= temp;
  #L43e942.  if v0 <= 0 then goto L43e958;
  #L43e946.  call `disposeExcept`(v1, v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.disposeExcept:(I)V` @kind virtual;
  #L43e94c.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43e950.  call `onError`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e956.  goto L43e95e;
  #L43e958.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43e95e.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.innerSuccess:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L43e970.  v0:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L43e974.  v0[v3]:= v2 @kind object;
  #L43e978.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.decrementAndGet:()I` @kind virtual;
  #L43e97e.  v2:= temp;
  #L43e980.  if v2 != 0 then goto L43e9be;
  #L43e984.  v2:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L43e988.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L43e98c.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43e992.  v2:= temp @kind object;
  #L43e994.  v3:= "The zipper returned a null value" @kind object;
  #L43e998.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43e99e.  v2:= temp @kind object;
  #L43e9a0.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43e9a4.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43e9aa.  goto L43e9be;
  #L43e9ac.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e9ae.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43e9b4.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43e9b8.  call `onError`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e9be.  return @kind void;
  catch `java.lang.Throwable` @[L43e984..L43e9a0] goto L43e9ac;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e848.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.get:()I` @kind virtual;
  #L43e84e.  v0:= temp;
  #L43e850.  if v0 > 0 then goto L43e858;
  #L43e854.  v0:= 1I;
  #L43e856.  goto L43e85a;
  #L43e858.  v0:= 0I;
  #L43e85a.  return v0;
}
