record `io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43c0f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43c0fa.  v0.`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L43c0fe.  v0.`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43c102.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43c114.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43c11a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c0cc.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c0d2.  v0:= temp @kind object;
  #L43c0d4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43c0d8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43c0de.  v0:= temp;
  #L43c0e0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c12c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43c130.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L43c136.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c148.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43c14c.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c152.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43c164.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43c16a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c17c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L43c180.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c186.  v2:= temp @kind object;
  #L43c188.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L43c18c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c192.  v2:= temp @kind object;
  #L43c194.  v2:= (`io.reactivex.CompletableSource`) v2 @kind object;
  #L43c198.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.isDisposed:()Z` @kind virtual;
  #L43c19e.  v0:= temp;
  #L43c1a0.  if v0 != 0 then goto L43c1aa;
  #L43c1a4.  call `subscribe`(v2, v1) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L43c1aa.  return @kind void;
  #L43c1ac.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c1ae.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c1b4.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapCompletable$FlatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43c1ba.  return @kind void;
  catch `java.lang.Throwable` @[L43c17c..L43c198] goto L43c1ac;
}
