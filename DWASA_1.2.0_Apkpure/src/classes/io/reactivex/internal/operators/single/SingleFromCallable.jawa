record `io.reactivex.internal.operators.single.SingleFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.single.SingleFromCallable.callable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43cc70.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L43cc76.  v0.`io.reactivex.internal.operators.single.SingleFromCallable.callable` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L43cc7a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleFromCallable` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromCallable;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L43cc8c.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L43cc92.  v0:= temp @kind object;
  #L43cc94.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43cc9a.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43cca0.  v1:= temp;
  #L43cca2.  if v1 == 0 then goto L43cca8;
  #L43cca6.  return @kind void;
  #L43cca8.  v1:= v3.`io.reactivex.internal.operators.single.SingleFromCallable.callable` @type ^`java.util.concurrent.Callable` @kind object;
  #L43ccac.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43ccb2.  v1:= temp @kind object;
  #L43ccb4.  v2:= "The callable returned a null value" @kind object;
  #L43ccb8.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43ccbe.  v1:= temp @kind object;
  #L43ccc0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43ccc6.  v0:= temp;
  #L43ccc8.  if v0 != 0 then goto L43ccd2;
  #L43cccc.  call `onSuccess`(v4, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43ccd2.  return @kind void;
  #L43ccd4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43ccd6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ccdc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43cce2.  v0:= temp;
  #L43cce4.  if v0 != 0 then goto L43ccf0;
  #L43cce8.  call `onError`(v4, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ccee.  goto L43ccf6;
  #L43ccf0.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43ccf6.  return @kind void;
  catch `java.lang.Throwable` @[L43cca8..L43ccc0] goto L43ccd4;
}
