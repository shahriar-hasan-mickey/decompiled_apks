record `io.reactivex.internal.operators.single.SingleSubscribeOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.single.SingleSubscribeOn.scheduler` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleSubscribeOn.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleSubscribeOn` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn;.<init>:(Lio/reactivex/SingleSource;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43daf4.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L43dafa.  v0.`io.reactivex.internal.operators.single.SingleSubscribeOn.source` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L43dafe.  v0.`io.reactivex.internal.operators.single.SingleSubscribeOn.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L43db02.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleSubscribeOn` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L43db14.  v0:= new `io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver`;
  #L43db18.  v1:= v2.`io.reactivex.internal.operators.single.SingleSubscribeOn.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L43db1c.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn$SubscribeOnObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/SingleSource;)V` @kind direct;
  #L43db22.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43db28.  v3:= v2.`io.reactivex.internal.operators.single.SingleSubscribeOn.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L43db2c.  call temp:= `scheduleDirect`(v3, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L43db32.  v3:= temp @kind object;
  #L43db34.  v0:= v0.`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L43db38.  call temp:= `replace`(v0, v3) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43db3e.  return @kind void;
}
