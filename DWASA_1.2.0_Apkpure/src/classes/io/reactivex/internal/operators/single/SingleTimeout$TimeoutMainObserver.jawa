record `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.other` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v1 @kind this, `io.reactivex.SingleObserver` v2 @kind object, `io.reactivex.SingleSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/SingleSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43deb0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43deb6.  v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L43deba.  v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.other` @type ^`io.reactivex.SingleSource` := v3 @kind object;
  #L43debe.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43dec2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43dec8.  v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L43decc.  if v3 == 0 then goto L43dee0;
  #L43ded0.  v3:= new `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver`;
  #L43ded4.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver;.<init>:(Lio/reactivex/SingleObserver;)V` @kind direct;
  #L43deda.  v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @type ^`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` := v3 @kind object;
  #L43dede.  goto L43dee6;
  #L43dee0.  v2:= 0I;
  #L43dee2.  v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @type ^`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` := v2 @kind object;
  #L43dee6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43def8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43defe.  v0:= v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43df02.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43df08.  v0:= v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @type ^`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` @kind object;
  #L43df0c.  if v0 == 0 then goto L43df16;
  #L43df10.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43df16.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43de88.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43de8e.  v0:= temp @kind object;
  #L43de90.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43de94.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43de9a.  v0:= temp;
  #L43de9c.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43df28.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43df2e.  v0:= temp @kind object;
  #L43df30.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43df34.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43df38.  if v0 == v1 then goto L43df62;
  #L43df3c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43df40.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43df46.  v0:= temp;
  #L43df48.  if v0 == 0 then goto L43df62;
  #L43df4c.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43df50.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43df56.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43df5a.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43df60.  goto L43df68;
  #L43df62.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43df68.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43df7c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43df82.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43df94.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43df9a.  v0:= temp @kind object;
  #L43df9c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43dfa0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dfa4.  if v0 == v1 then goto L43dfcc;
  #L43dfa8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dfac.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43dfb2.  v0:= temp;
  #L43dfb4.  if v0 == 0 then goto L43dfcc;
  #L43dfb8.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43dfbc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43dfc2.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43dfc6.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43dfcc.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43dfe0.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43dfe6.  v0:= temp @kind object;
  #L43dfe8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43dfec.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dff0.  if v0 == v1 then goto L43e03c;
  #L43dff4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43dff8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43dffe.  v1:= temp;
  #L43e000.  if v1 == 0 then goto L43e03c;
  #L43e004.  if v0 == 0 then goto L43e00e;
  #L43e008.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43e00e.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.other` @type ^`io.reactivex.SingleSource` @kind object;
  #L43e012.  if v0 != 0 then goto L43e02c;
  #L43e016.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43e01a.  v1:= new `java.util.concurrent.TimeoutException`;
  #L43e01e.  call `<init>`(v1) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L43e024.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e02a.  goto L43e03c;
  #L43e02c.  v1:= 0I;
  #L43e02e.  v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.other` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L43e032.  v1:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @type ^`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` @kind object;
  #L43e036.  call `subscribe`(v0, v1) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43e03c.  return @kind void;
}
