record `io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.disposable` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43ca80.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43ca86.  v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43ca8a.  v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43ca8e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43ca92.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43ca98.  v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.parent` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43ca9c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cab0.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.disposable` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43cab4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43caba.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.parent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cabe.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43cac4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cad8.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43cadc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43cae2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43caf4.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43caf8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43cafe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cb10.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43cb14.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43cb1a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43cb2c.  v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.disposable` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L43cb30.  v1:= v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43cb34.  call `onSubscribe`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43cb3a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cb4c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.parent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cb50.  call temp:= `deferredSetOnce`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43cb56.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cb68.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L43cb6c.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43cb72.  v2:= temp @kind object;
  #L43cb74.  v0:= "the mapper returned a null Publisher" @kind object;
  #L43cb78.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43cb7e.  v2:= temp @kind object;
  #L43cb80.  v2:= (`org.reactivestreams.Publisher`) v2 @kind object;
  #L43cb84.  call `subscribe`(v2, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43cb8a.  return @kind void;
  #L43cb8c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43cb8e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43cb94.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43cb98.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43cb9e.  return @kind void;
  catch `java.lang.Throwable` @[L43cb68..L43cb84] goto L43cb8c;
}
procedure `void` `request`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$SingleFlatMapPublisherObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cbbc.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver.parent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cbc0.  call `deferredRequest`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L43cbc6.  return @kind void;
}
