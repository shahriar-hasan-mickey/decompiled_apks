record `io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b7f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43b7fe.  v0.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43b802.  call `lazySet`(v0, v2) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43b808.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b81c.  v0:= 0I;
  #L43b81e.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43b824.  v0:= temp @kind object;
  #L43b826.  v0:= (`io.reactivex.functions.Action`) v0 @kind object;
  #L43b82a.  if v0 == 0 then goto L43b84e;
  #L43b82e.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L43b834.  goto L43b844;
  #L43b836.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b838.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43b83e.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43b844.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43b848.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43b84e.  return @kind void;
  catch `java.lang.Throwable` @[L43b82e..L43b834] goto L43b836;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b7d8.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43b7dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43b7e2.  v0:= temp;
  #L43b7e4.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b86c.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b870.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b876.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b888.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43b88c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43b892.  v0:= temp;
  #L43b894.  if v0 == 0 then goto L43b8a6;
  #L43b898.  v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43b89c.  v2:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b8a0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43b8a6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b8b8.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b8bc.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43b8c2.  return @kind void;
}
