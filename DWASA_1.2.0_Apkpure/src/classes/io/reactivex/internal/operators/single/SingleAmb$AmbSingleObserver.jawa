record `io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.set` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.disposables.CompositeDisposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/disposables/CompositeDisposable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43a2fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43a302.  v0.`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43a306.  v0.`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L43a30a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a31c.  v0:= 0I;
  #L43a31e.  v1:= 1I;
  #L43a320.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43a326.  v0:= temp;
  #L43a328.  if v0 == 0 then goto L43a342;
  #L43a32c.  v0:= v2.`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a330.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43a336.  v0:= v2.`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43a33a.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a340.  goto L43a348;
  #L43a342.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43a348.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a35c.  v0:= v1.`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a360.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43a366.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a378.  v0:= 0I;
  #L43a37a.  v1:= 1I;
  #L43a37c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleAmb$AmbSingleObserver;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43a382.  v0:= temp;
  #L43a384.  if v0 == 0 then goto L43a39c;
  #L43a388.  v0:= v2.`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a38c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43a392.  v0:= v2.`io.reactivex.internal.operators.single.SingleAmb$AmbSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43a396.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43a39c.  return @kind void;
}
