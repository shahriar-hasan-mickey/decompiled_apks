record `io.reactivex.internal.operators.single.SingleCreate$Emitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleCreate$Emitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43a9b0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43a9b6.  v0.`io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43a9ba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43a9cc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43a9d2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a8c0.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a8c6.  v0:= temp @kind object;
  #L43a8c8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43a8cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43a8d2.  v0:= temp;
  #L43a8d4.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a9e4.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43a9ea.  v0:= temp;
  #L43a9ec.  if v0 != 0 then goto L43a9f6;
  #L43a9f0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43a9f6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43aa08.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.get:()Ljava/lang/Object;` @kind virtual;
  #L43aa0e.  v0:= temp @kind object;
  #L43aa10.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43aa14.  if v0 == v1 then goto L43aa72;
  #L43aa18.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43aa1c.  call temp:= `getAndSet`(v3, v0) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43aa22.  v0:= temp @kind object;
  #L43aa24.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43aa28.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43aa2c.  if v0 == v1 then goto L43aa72;
  #L43aa30.  if v4 != 0 then goto L43aa4e;
  #L43aa34.  v4:= v3.`io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43aa38.  v1:= new `java.lang.NullPointerException`;
  #L43aa3c.  v2:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L43aa40.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43aa46.  call `onError`(v4, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43aa4c.  goto L43aa58;
  #L43aa4e.  v1:= v3.`io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43aa52.  call `onSuccess`(v1, v4) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43aa58.  if v0 == 0 then goto L43aa72;
  #L43aa5c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43aa62.  goto L43aa72;
  #L43aa64.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43aa66.  if v0 == 0 then goto L43aa70;
  #L43aa6a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43aa70.  throw v4;
  #L43aa72.  return @kind void;
  catch `java.lang.Throwable` @[L43aa34..L43aa58] goto L43aa64;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43aa90.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L43aa94.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L43aa9a.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L43aaa0.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43aab4.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43aaba.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43a968.  v0:= 2I;
  #L43a96a.  v0:= new `java.lang.Object`[v0];
  #L43a96e.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43a974.  v1:= temp @kind object;
  #L43a976.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L43a97c.  v1:= temp @kind object;
  #L43a97e.  v2:= 0I;
  #L43a980.  v0[v2]:= v1 @kind object;
  #L43a984.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L43a98a.  v1:= temp @kind object;
  #L43a98c.  v2:= 1I;
  #L43a98e.  v0[v2]:= v1 @kind object;
  #L43a992.  v1:= "%s{%s}" @kind object;
  #L43a996.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43a99c.  v0:= temp @kind object;
  #L43a99e.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a8e8.  if v3 != 0 then goto L43a8fa;
  #L43a8ec.  v3:= new `java.lang.NullPointerException`;
  #L43a8f0.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L43a8f4.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a8fa.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a900.  v0:= temp @kind object;
  #L43a902.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43a906.  if v0 == v1 then goto L43a948;
  #L43a90a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43a90e.  call temp:= `getAndSet`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43a914.  v0:= temp @kind object;
  #L43a916.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43a91a.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43a91e.  if v0 == v1 then goto L43a948;
  #L43a922.  v1:= v2.`io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43a926.  call `onError`(v1, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a92c.  if v0 == 0 then goto L43a936;
  #L43a930.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43a936.  v3:= 1I;
  #L43a938.  return v3;
  #L43a93a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43a93c.  if v0 == 0 then goto L43a946;
  #L43a940.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43a946.  throw v3;
  #L43a948.  v3:= 0I;
  #L43a94a.  return v3;
  catch `java.lang.Throwable` @[L43a922..L43a92c] goto L43a93a;
}
