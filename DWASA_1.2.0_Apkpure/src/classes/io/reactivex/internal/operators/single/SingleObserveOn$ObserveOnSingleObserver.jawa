record `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.error` @AccessFlag ;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.scheduler` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d624.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43d62a.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43d62e.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L43d632.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43d644.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43d64a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d5fc.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43d602.  v0:= temp @kind object;
  #L43d604.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43d608.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43d60e.  v0:= temp;
  #L43d610.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L43d65c.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L43d660.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L43d664.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L43d66a.  v1:= temp @kind object;
  #L43d66c.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43d672.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43d684.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43d68a.  v1:= temp;
  #L43d68c.  if v1 == 0 then goto L43d69a;
  #L43d690.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43d694.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43d69a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L43d6ac.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L43d6b0.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L43d6b4.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L43d6ba.  v1:= temp @kind object;
  #L43d6bc.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43d6c2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d6d4.  v0:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L43d6d8.  if v0 == 0 then goto L43d6e8;
  #L43d6dc.  v1:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43d6e0.  call `onError`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43d6e6.  goto L43d6f6;
  #L43d6e8.  v0:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43d6ec.  v1:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.value` @type ^`java.lang.Object` @kind object;
  #L43d6f0.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43d6f6.  return @kind void;
}
