record `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.source` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/SingleSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43afb8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43afbe.  v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43afc2.  v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.source` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L43afc6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43afd8.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43afdc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43afe2.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43afe8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43af90.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L43af96.  v0:= temp @kind object;
  #L43af98.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43af9c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43afa2.  v0:= temp;
  #L43afa4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43affc.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @type ^`boolean` @kind boolean;
  #L43b000.  if v0 == 0 then goto L43b006;
  #L43b004.  return @kind void;
  #L43b006.  v0:= 1I;
  #L43b008.  v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L43b00c.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L43b010.  v1:= new `io.reactivex.internal.observers.ResumeSingleObserver`;
  #L43b014.  v2:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b018.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/observers/ResumeSingleObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/SingleObserver;)V` @kind direct;
  #L43b01e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43b024.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b038.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @type ^`boolean` @kind boolean;
  #L43b03c.  if v0 == 0 then goto L43b048;
  #L43b040.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43b046.  return @kind void;
  #L43b048.  v0:= 1I;
  #L43b04a.  v1.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L43b04e.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b052.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b058.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L43b06c.  v1:= v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b070.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43b076.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onComplete:()V` @kind virtual;
  #L43b07c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b090.  v0:= v2.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b094.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43b09a.  v0:= temp;
  #L43b09c.  if v0 == 0 then goto L43b0be;
  #L43b0a0.  v2.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43b0a4.  v0:= v2.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b0a8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43b0ae.  v0:= 9223372036854775807L;
  #L43b0b8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b0be.  return @kind void;
}
