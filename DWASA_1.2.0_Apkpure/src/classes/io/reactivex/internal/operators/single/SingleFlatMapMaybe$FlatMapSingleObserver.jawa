record `io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43c94c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43c952.  v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L43c956.  v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43c95a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43c96c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43c972.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c924.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c92a.  v0:= temp @kind object;
  #L43c92c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L43c930.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43c936.  v0:= temp;
  #L43c938.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c984.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43c988.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c98e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43c9a0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43c9a6.  v1:= temp;
  #L43c9a8.  if v1 == 0 then goto L43c9b6;
  #L43c9ac.  v1:= v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43c9b0.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43c9b6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43c9c8.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L43c9cc.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c9d2.  v3:= temp @kind object;
  #L43c9d4.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L43c9d8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c9de.  v3:= temp @kind object;
  #L43c9e0.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L43c9e4.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.isDisposed:()Z` @kind virtual;
  #L43c9ea.  v0:= temp;
  #L43c9ec.  if v0 != 0 then goto L43ca04;
  #L43c9f0.  v0:= new `io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapMaybeObserver`;
  #L43c9f4.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43c9f8.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapMaybeObserver;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L43c9fe.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L43ca04.  return @kind void;
  #L43ca06.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43ca08.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ca0e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43ca14.  return @kind void;
  catch `java.lang.Throwable` @[L43c9c8..L43c9e4] goto L43ca06;
}
