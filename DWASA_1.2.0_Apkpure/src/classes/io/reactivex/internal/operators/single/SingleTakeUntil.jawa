record `io.reactivex.internal.operators.single.SingleTakeUntil` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.single.SingleTakeUntil.other` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleTakeUntil.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil;.<init>:(Lio/reactivex/SingleSource;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43ddc0.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L43ddc6.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil.source` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L43ddca.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil.other` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L43ddce.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleTakeUntil` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L43dde0.  v0:= new `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver`;
  #L43dde4.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.<init>:(Lio/reactivex/SingleObserver;)V` @kind direct;
  #L43ddea.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43ddf0.  v3:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil.other` @type ^`org.reactivestreams.Publisher` @kind object;
  #L43ddf4.  v1:= v0.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` @kind object;
  #L43ddf8.  call `subscribe`(v3, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43ddfe.  v3:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil.source` @type ^`io.reactivex.SingleSource` @kind object;
  #L43de02.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43de08.  return @kind void;
}
