record `io.reactivex.internal.operators.single.SingleHide$HideSingleObserver` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleHide$HideSingleObserver;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43cf2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43cf32.  v0.`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43cf36.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleHide$HideSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cf48.  v0:= v1.`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43cf4c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43cf52.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleHide$HideSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cf0c.  v0:= v1.`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43cf10.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43cf16.  v0:= temp;
  #L43cf18.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleHide$HideSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cf64.  v0:= v1.`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43cf68.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43cf6e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleHide$HideSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cf80.  v0:= v1.`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43cf84.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43cf8a.  v0:= temp;
  #L43cf8c.  if v0 == 0 then goto L43cf9e;
  #L43cf90.  v1.`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43cf94.  v2:= v1.`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43cf98.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43cf9e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleHide$HideSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cfb0.  v0:= v1.`io.reactivex.internal.operators.single.SingleHide$HideSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43cfb4.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43cfba.  return @kind void;
}
