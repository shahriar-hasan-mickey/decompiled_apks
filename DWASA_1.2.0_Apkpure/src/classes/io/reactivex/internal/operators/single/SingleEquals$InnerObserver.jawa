record `io.reactivex.internal.operators.single.SingleEquals$InnerObserver` @kind class @AccessFlag  extends `io.reactivex.SingleObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.single.SingleEquals$InnerObserver.count` @AccessFlag FINAL;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleEquals$InnerObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.single.SingleEquals$InnerObserver.index` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.single.SingleEquals$InnerObserver.set` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.single.SingleEquals$InnerObserver.values` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleEquals$InnerObserver` v0 @kind this, `int` v1 , `io.reactivex.disposables.CompositeDisposable` v2 @kind object, `java.lang.Object`[] v3 @kind object, `io.reactivex.SingleObserver` v4 @kind object, `java.util.concurrent.atomic.AtomicInteger` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleEquals$InnerObserver;.<init>:(ILio/reactivex/disposables/CompositeDisposable;[Ljava/lang/Object;Lio/reactivex/SingleObserver;Ljava/util/concurrent/atomic/AtomicInteger;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43bd50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43bd56.  v0.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.index` @type ^`int` := v1;
  #L43bd5a.  v0.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L43bd5e.  v0.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.values` @type ^`java.lang.Object`[] := v3 @kind object;
  #L43bd62.  v0.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.downstream` @type ^`io.reactivex.SingleObserver` := v4 @kind object;
  #L43bd66.  v0.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.count` @type ^`java.util.concurrent.atomic.AtomicInteger` := v5 @kind object;
  #L43bd6a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleEquals$InnerObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleEquals$InnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43bd7c.  v0:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.count` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43bd80.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43bd86.  v0:= temp;
  #L43bd88.  v1:= 2I;
  #L43bd8a.  if v0 < v1 then goto L43bd96;
  #L43bd8e.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43bd94.  return @kind void;
  #L43bd96.  v2:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.count` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43bd9a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43bda0.  v0:= temp;
  #L43bda2.  if v0 == 0 then goto L43bd7c;
  #L43bda6.  v0:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43bdaa.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43bdb0.  v0:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43bdb4.  call `onError`(v0, v4) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43bdba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleEquals$InnerObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleEquals$InnerObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bdcc.  v0:= v1.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43bdd0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43bdd6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleEquals$InnerObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleEquals$InnerObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43bde8.  v0:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.values` @type ^`java.lang.Object`[] @kind object;
  #L43bdec.  v1:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.index` @type ^`int`;
  #L43bdf0.  v0[v1]:= v4 @kind object;
  #L43bdf4.  v4:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.count` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43bdf8.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L43bdfe.  v4:= temp;
  #L43be00.  v0:= 2I;
  #L43be02.  if v4 != v0 then goto L43be30;
  #L43be06.  v4:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43be0a.  v0:= v3.`io.reactivex.internal.operators.single.SingleEquals$InnerObserver.values` @type ^`java.lang.Object`[] @kind object;
  #L43be0e.  v1:= 0I;
  #L43be10.  v1:= v0[v1] @kind object;
  #L43be14.  v2:= 1I;
  #L43be16.  v0:= v0[v2] @kind object;
  #L43be1a.  call temp:= `equals`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L43be20.  v0:= temp;
  #L43be22.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43be28.  v0:= temp @kind object;
  #L43be2a.  call `onSuccess`(v4, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43be30.  return @kind void;
}
