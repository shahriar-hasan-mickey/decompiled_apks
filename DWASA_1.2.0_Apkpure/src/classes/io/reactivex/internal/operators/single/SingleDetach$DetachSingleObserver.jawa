record `io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.downstream` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDetach$DetachSingleObserver;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b2bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43b2c2.  v0.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43b2c6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDetach$DetachSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b2d8.  v0:= 0I;
  #L43b2da.  v1.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v0 @kind object;
  #L43b2de.  v0:= v1.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43b2e2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43b2e8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43b2ec.  v1.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43b2f0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDetach$DetachSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b29c.  v0:= v1.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43b2a0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43b2a6.  v0:= temp;
  #L43b2a8.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDetach$DetachSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b304.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43b308.  v2.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43b30c.  v0:= v2.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b310.  if v0 == 0 then goto L43b320;
  #L43b314.  v1:= 0I;
  #L43b316.  v2.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43b31a.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b320.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDetach$DetachSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b334.  v0:= v1.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43b338.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43b33e.  v0:= temp;
  #L43b340.  if v0 == 0 then goto L43b352;
  #L43b344.  v1.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43b348.  v2:= v1.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b34c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43b352.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDetach$DetachSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b364.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43b368.  v2.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L43b36c.  v0:= v2.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43b370.  if v0 == 0 then goto L43b380;
  #L43b374.  v1:= 0I;
  #L43b376.  v2.`io.reactivex.internal.operators.single.SingleDetach$DetachSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43b37a.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43b380.  return @kind void;
}
