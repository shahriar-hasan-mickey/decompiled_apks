record `io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.onSubscribe` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnSubscribe$DoOnSubscribeSingleObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43bb50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43bb56.  v0.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43bb5a.  v0.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.onSubscribe` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L43bb5e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnSubscribe$DoOnSubscribeSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bb70.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.done` @type ^`boolean` @kind boolean;
  #L43bb74.  if v0 == 0 then goto L43bb80;
  #L43bb78.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43bb7e.  return @kind void;
  #L43bb80.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43bb84.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43bb8a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnSubscribe$DoOnSubscribeSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43bb9c.  v0:= v2.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.onSubscribe` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43bba0.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43bba6.  v0:= v2.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43bbaa.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43bbb0.  return @kind void;
  #L43bbb2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43bbb4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43bbba.  v1:= 1I;
  #L43bbbc.  v2.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L43bbc0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43bbc6.  v3:= v2.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43bbca.  call `error`(v0, v3) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L43bbd0.  return @kind void;
  catch `java.lang.Throwable` @[L43bb9c..L43bba6] goto L43bbb2;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnSubscribe$DoOnSubscribeSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bbf0.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.done` @type ^`boolean` @kind boolean;
  #L43bbf4.  if v0 == 0 then goto L43bbfa;
  #L43bbf8.  return @kind void;
  #L43bbfa.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43bbfe.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43bc04.  return @kind void;
}
