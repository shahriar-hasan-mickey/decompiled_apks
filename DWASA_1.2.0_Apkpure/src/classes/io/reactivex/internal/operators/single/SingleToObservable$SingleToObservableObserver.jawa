record `io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43e2ac.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L43e2b2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e2c4.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.dispose:()V` @kind super;
  #L43e2ca.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43e2ce.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43e2d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L43e2e8.  call `error`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43e2ee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e300.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43e304.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43e30a.  v0:= temp;
  #L43e30c.  if v0 == 0 then goto L43e31e;
  #L43e310.  v1.`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43e314.  v2:= v1.`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L43e318.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43e31e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L43e330.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L43e336.  return @kind void;
}
