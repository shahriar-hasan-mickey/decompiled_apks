record `io.reactivex.internal.operators.single.SingleZipArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.SingleSource`[] `io.reactivex.internal.operators.single.SingleZipArray.sources` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleZipArray.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleZipArray` v0 @kind this, `io.reactivex.SingleSource`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray;.<init>:([Lio/reactivex/SingleSource;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43ea6c.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L43ea72.  v0.`io.reactivex.internal.operators.single.SingleZipArray.sources` @type ^`io.reactivex.SingleSource`[] := v1 @kind object;
  #L43ea76.  v0.`io.reactivex.internal.operators.single.SingleZipArray.zipper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43ea7a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleZipArray` v5 @kind this, `io.reactivex.SingleObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43ea8c.  v0:= v5.`io.reactivex.internal.operators.single.SingleZipArray.sources` @type ^`io.reactivex.SingleSource`[] @kind object;
  #L43ea90.  v1:= length @variable v0;
  #L43ea92.  v2:= 0I;
  #L43ea94.  v3:= 1I;
  #L43ea96.  if v1 != v3 then goto L43eaba;
  #L43ea9a.  v0:= v0[v2] @kind object;
  #L43ea9e.  v1:= new `io.reactivex.internal.operators.single.SingleMap$MapSingleObserver`;
  #L43eaa2.  v2:= new `io.reactivex.internal.operators.single.SingleZipArray$SingletonArrayFunc`;
  #L43eaa6.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$SingletonArrayFunc;.<init>:(Lio/reactivex/internal/operators/single/SingleZipArray;)V` @kind direct;
  #L43eaac.  call `<init>`(v1, v6, v2) @signature `Lio/reactivex/internal/operators/single/SingleMap$MapSingleObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Function;)V` @kind direct;
  #L43eab2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43eab8.  return @kind void;
  #L43eaba.  v3:= new `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator`;
  #L43eabe.  v4:= v5.`io.reactivex.internal.operators.single.SingleZipArray.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L43eac2.  call `<init>`(v3, v6, v1, v4) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/Function;)V` @kind direct;
  #L43eac8.  call `onSubscribe`(v6, v3) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43eace.  if v2 >= v1 then goto L43eb12;
  #L43ead2.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.isDisposed:()Z` @kind virtual;
  #L43ead8.  v6:= temp;
  #L43eada.  if v6 == 0 then goto L43eae0;
  #L43eade.  return @kind void;
  #L43eae0.  v6:= v0[v2] @kind object;
  #L43eae4.  if v6 != 0 then goto L43eafe;
  #L43eae8.  v6:= new `java.lang.NullPointerException`;
  #L43eaec.  v0:= "One of the sources is null" @kind object;
  #L43eaf0.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43eaf6.  call `innerError`(v3, v6, v2) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.innerError:(Ljava/lang/Throwable;I)V` @kind virtual;
  #L43eafc.  return @kind void;
  #L43eafe.  v4:= v3.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] @kind object;
  #L43eb02.  v4:= v4[v2] @kind object;
  #L43eb06.  call `subscribe`(v6, v4) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43eb0c.  v2:= v2 + 1;
  #L43eb10.  goto L43eace;
  #L43eb12.  return @kind void;
}
