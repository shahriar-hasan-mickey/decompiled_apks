record `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.limit` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.OTHER_STATE_CONSUMED_OR_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.OTHER_STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3fef68.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3fef6e.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L3fef72.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3fef76.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3fef7c.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3fef80.  v2:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver`;
  #L3fef84.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;)V` @kind direct;
  #L3fef8a.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver` := v2 @kind object;
  #L3fef8e.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3fef92.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3fef98.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L3fef9c.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3fefa0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3fefa6.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L3fefaa.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3fefb0.  v2:= temp;
  #L3fefb2.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.prefetch` @type ^`int` := v2;
  #L3fefb6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.prefetch` @type ^`int`;
  #L3fefba.  v0:= v2 ^> 2;
  #L3fefbe.  v2:= v2 - v0 @kind int;
  #L3fefc0.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.limit` @type ^`int` := v2;
  #L3fefc4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fefd8.  v0:= 1I;
  #L3fefda.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3fefde.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fefe2.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fefe8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver` @kind object;
  #L3fefec.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3feff2.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L3feff8.  v0:= temp;
  #L3feffa.  if v0 != 0 then goto L3ff008;
  #L3feffe.  v0:= 0I;
  #L3ff000.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L3ff004.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v0 @kind object;
  #L3ff008.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3ff01c.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L3ff022.  v0:= temp;
  #L3ff024.  if v0 != 0 then goto L3ff02e;
  #L3ff028.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L3ff02e.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L3ff040.  v0:= v18 @kind object;
  #L3ff044.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ff048.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L3ff04c.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int`;
  #L3ff050.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.limit` @type ^`int`;
  #L3ff054.  v6:= 1I;
  #L3ff056.  v7:= v2 @kind wide;
  #L3ff058.  v2:= 1I;
  #L3ff05a.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ff05e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3ff064.  v9:= temp @kind wide;
  #L3ff066.  v11:= 2I;
  #L3ff068.  v12:= 0I;
  #L3ff06a.  v13:= lcmp(v7, v9);
  #L3ff06e.  if v13 == 0 then goto L3ff144;
  #L3ff072.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.cancelled` @type ^`boolean` @kind boolean;
  #L3ff076.  if v13 == 0 then goto L3ff084;
  #L3ff07a.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff07e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff082.  return @kind void;
  #L3ff084.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff088.  call temp:= `get`(v13) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ff08e.  v13:= temp @kind object;
  #L3ff090.  if v13 == 0 then goto L3ff0b0;
  #L3ff094.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff098.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff09c.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff0a0.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3ff0a6.  v2:= temp @kind object;
  #L3ff0a8.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ff0ae.  return @kind void;
  #L3ff0b0.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int`;
  #L3ff0b4.  v14:= 1L;
  #L3ff0b8.  if v13 != v6 then goto L3ff0d2;
  #L3ff0bc.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` @kind object;
  #L3ff0c0.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff0c4.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v11;
  #L3ff0c8.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ff0ce.  v7:= v7 + v14 @kind long;
  #L3ff0d0.  goto L3ff066;
  #L3ff0d2.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L3ff0d6.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3ff0da.  if v6 == 0 then goto L3ff0e8;
  #L3ff0de.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3ff0e4.  v6:= temp @kind object;
  #L3ff0e6.  goto L3ff0ea;
  #L3ff0e8.  v6:= v12 @kind object;
  #L3ff0ea.  if v6 != 0 then goto L3ff0f4;
  #L3ff0ee.  v17:= 1I;
  #L3ff0f2.  goto L3ff0f8;
  #L3ff0f4.  v17:= 0I;
  #L3ff0f8.  if v3 == 0 then goto L3ff110;
  #L3ff0fc.  if v17 == 0 then goto L3ff110;
  #L3ff100.  if v13 != v11 then goto L3ff110;
  #L3ff104.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff108.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ff10e.  return @kind void;
  #L3ff110.  if v17 == 0 then goto L3ff116;
  #L3ff114.  goto L3ff144;
  #L3ff116.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ff11c.  v7:= v7 + v14 @kind long;
  #L3ff11e.  v4:= v4 + 1;
  #L3ff122.  if v4 != v5 then goto L3ff140;
  #L3ff126.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff12a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ff130.  v3:= temp @kind object;
  #L3ff132.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L3ff136.  v11:= (`long`) v5 @kind i2l;
  #L3ff138.  call `request`(v3, v11) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ff13e.  v4:= 0I;
  #L3ff140.  v6:= 1I;
  #L3ff142.  goto L3ff066;
  #L3ff144.  v3:= lcmp(v7, v9);
  #L3ff148.  if v3 != 0 then goto L3ff1ca;
  #L3ff14c.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.cancelled` @type ^`boolean` @kind boolean;
  #L3ff150.  if v3 == 0 then goto L3ff15e;
  #L3ff154.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff158.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff15c.  return @kind void;
  #L3ff15e.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff162.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ff168.  v3:= temp @kind object;
  #L3ff16a.  if v3 == 0 then goto L3ff18a;
  #L3ff16e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff172.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff176.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff17a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3ff180.  v2:= temp @kind object;
  #L3ff182.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ff188.  return @kind void;
  #L3ff18a.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L3ff18e.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3ff192.  if v6 == 0 then goto L3ff1aa;
  #L3ff196.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L3ff19c.  v6:= temp;
  #L3ff19e.  if v6 == 0 then goto L3ff1a4;
  #L3ff1a2.  goto L3ff1aa;
  #L3ff1a4.  v16:= 0I;
  #L3ff1a8.  goto L3ff1ae;
  #L3ff1aa.  v16:= 1I;
  #L3ff1ae.  if v3 == 0 then goto L3ff1ca;
  #L3ff1b2.  if v16 == 0 then goto L3ff1ca;
  #L3ff1b6.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int`;
  #L3ff1ba.  if v3 != v11 then goto L3ff1ca;
  #L3ff1be.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff1c2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ff1c8.  return @kind void;
  #L3ff1ca.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` := v7 @kind wide;
  #L3ff1ce.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int` := v4;
  #L3ff1d2.  v2:= -v2 @kind int;
  #L3ff1d4.  call temp:= `addAndGet`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.addAndGet:(I)I` @kind virtual;
  #L3ff1da.  v2:= temp;
  #L3ff1dc.  if v2 != 0 then goto L3ff1e2;
  #L3ff1e0.  return @kind void;
  #L3ff1e2.  v6:= 1I;
  #L3ff1e4.  goto L3ff05a;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `getOrCreateQueue`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fef38.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3fef3c.  if v0 != 0 then goto L3fef56;
  #L3fef40.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3fef44.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3fef4a.  v1:= temp;
  #L3fef4c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3fef52.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L3fef56.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff1f8.  v0:= 1I;
  #L3ff1fa.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L3ff1fe.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ff204.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff218.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff21c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3ff222.  v0:= temp;
  #L3ff224.  if v0 == 0 then goto L3ff23a;
  #L3ff228.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff22c.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ff232.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ff238.  goto L3ff240;
  #L3ff23a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ff240.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ff254.  v0:= 1I;
  #L3ff256.  v1:= 0I;
  #L3ff258.  call temp:= `compareAndSet`(v7, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.compareAndSet:(II)Z` @kind virtual;
  #L3ff25e.  v2:= temp;
  #L3ff260.  if v2 == 0 then goto L3ff2fc;
  #L3ff264.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L3ff268.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ff26c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3ff272.  v4:= temp @kind wide;
  #L3ff274.  v6:= lcmp(v4, v2);
  #L3ff278.  if v6 == 0 then goto L3ff2e0;
  #L3ff27c.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3ff280.  if v4 == 0 then goto L3ff29a;
  #L3ff284.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L3ff28a.  v5:= temp;
  #L3ff28c.  if v5 == 0 then goto L3ff292;
  #L3ff290.  goto L3ff29a;
  #L3ff292.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3ff298.  goto L3ff2ee;
  #L3ff29a.  v4:= 1L;
  #L3ff29e.  v2:= v2 + v4 @kind long;
  #L3ff2a0.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` := v2 @kind wide;
  #L3ff2a4.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ff2a8.  call `onNext`(v2, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ff2ae.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int`;
  #L3ff2b2.  v8:= v8 + v0 @kind int;
  #L3ff2b4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.limit` @type ^`int`;
  #L3ff2b8.  if v8 != v0 then goto L3ff2da;
  #L3ff2bc.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int` := v1;
  #L3ff2c0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff2c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ff2ca.  v0:= temp @kind object;
  #L3ff2cc.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L3ff2d0.  v1:= (`long`) v8 @kind i2l;
  #L3ff2d2.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ff2d8.  goto L3ff2ee;
  #L3ff2da.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int` := v8;
  #L3ff2de.  goto L3ff2ee;
  #L3ff2e0.  call temp:= `getOrCreateQueue`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L3ff2e6.  v0:= temp @kind object;
  #L3ff2e8.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3ff2ee.  call temp:= `decrementAndGet`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.decrementAndGet:()I` @kind virtual;
  #L3ff2f4.  v8:= temp;
  #L3ff2f6.  if v8 != 0 then goto L3ff318;
  #L3ff2fa.  return @kind void;
  #L3ff2fc.  call temp:= `getOrCreateQueue`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L3ff302.  v0:= temp @kind object;
  #L3ff304.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3ff30a.  call temp:= `getAndIncrement`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L3ff310.  v8:= temp;
  #L3ff312.  if v8 == 0 then goto L3ff318;
  #L3ff316.  return @kind void;
  #L3ff318.  call `drainLoop`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L3ff31e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ff330.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff334.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.prefetch` @type ^`int`;
  #L3ff338.  v1:= (`long`) v1 @kind i2l;
  #L3ff33a.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L3ff340.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L3ff354.  v0:= 2I;
  #L3ff356.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v0;
  #L3ff35a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ff360.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L3ff374.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff378.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3ff37e.  v0:= temp;
  #L3ff380.  if v0 == 0 then goto L3ff396;
  #L3ff384.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff388.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ff38e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ff394.  goto L3ff39c;
  #L3ff396.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ff39c.  return @kind void;
}
procedure `void` `otherSuccess`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ff3b0.  v0:= 1I;
  #L3ff3b2.  v1:= 0I;
  #L3ff3b4.  call temp:= `compareAndSet`(v6, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.compareAndSet:(II)Z` @kind virtual;
  #L3ff3ba.  v1:= temp;
  #L3ff3bc.  if v1 == 0 then goto L3ff40a;
  #L3ff3c0.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L3ff3c4.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ff3c8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3ff3ce.  v3:= temp @kind wide;
  #L3ff3d0.  v5:= lcmp(v3, v1);
  #L3ff3d4.  if v5 == 0 then goto L3ff3f4;
  #L3ff3d8.  v3:= 1L;
  #L3ff3dc.  v1:= v1 + v3 @kind long;
  #L3ff3de.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` := v1 @kind wide;
  #L3ff3e2.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ff3e6.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ff3ec.  v7:= 2I;
  #L3ff3ee.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v7;
  #L3ff3f2.  goto L3ff420;
  #L3ff3f4.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v7 @kind object;
  #L3ff3f8.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v0;
  #L3ff3fc.  call temp:= `decrementAndGet`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.decrementAndGet:()I` @kind virtual;
  #L3ff402.  v7:= temp;
  #L3ff404.  if v7 != 0 then goto L3ff420;
  #L3ff408.  return @kind void;
  #L3ff40a.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v7 @kind object;
  #L3ff40e.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v0;
  #L3ff412.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L3ff418.  v7:= temp;
  #L3ff41a.  if v7 == 0 then goto L3ff420;
  #L3ff41e.  return @kind void;
  #L3ff420.  call `drainLoop`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L3ff426.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff438.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ff43c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3ff442.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ff448.  return @kind void;
}
