record `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.remaining` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `io.reactivex.internal.subscriptions.SubscriptionArbiter` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L403c0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L403c12.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L403c16.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v4 @kind object;
  #L403c1a.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.source` @type ^`org.reactivestreams.Publisher` := v5 @kind object;
  #L403c1e.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L403c22.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L403c34.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.remaining` @type ^`long` @kind wide;
  #L403c38.  v2:= 9223372036854775807L;
  #L403c42.  v4:= lcmp(v0, v2);
  #L403c46.  if v4 == 0 then goto L403c56;
  #L403c4a.  v2:= 1L;
  #L403c4e.  v2:= v0 - v2 @kind long;
  #L403c52.  v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L403c56.  v2:= 0L;
  #L403c5a.  v4:= lcmp(v0, v2);
  #L403c5e.  if v4 == 0 then goto L403c6a;
  #L403c62.  call `subscribeNext`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.subscribeNext:()V` @kind virtual;
  #L403c68.  goto L403c74;
  #L403c6a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403c6e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L403c74.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403c88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403c8c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L403c92.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L403ca4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @type ^`long` @kind wide;
  #L403ca8.  v2:= 1L;
  #L403cac.  v0:= v0 + v2 @kind long;
  #L403cae.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L403cb2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403cb6.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L403cbc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403cd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L403cd4.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L403cda.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L403cec.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.getAndIncrement:()I` @kind virtual;
  #L403cf2.  v0:= temp;
  #L403cf4.  if v0 != 0 then goto L403d42;
  #L403cf8.  v0:= 1I;
  #L403cfa.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L403cfe.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L403d04.  v1:= temp;
  #L403d06.  if v1 == 0 then goto L403d0c;
  #L403d0a.  return @kind void;
  #L403d0c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @type ^`long` @kind wide;
  #L403d10.  v3:= 0L;
  #L403d14.  v5:= lcmp(v1, v3);
  #L403d18.  if v5 == 0 then goto L403d2a;
  #L403d1c.  v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L403d20.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L403d24.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L403d2a.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L403d2e.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L403d34.  v0:= -v0 @kind int;
  #L403d36.  call temp:= `addAndGet`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.addAndGet:(I)I` @kind virtual;
  #L403d3c.  v0:= temp;
  #L403d3e.  if v0 != 0 then goto L403cfa;
  #L403d42.  return @kind void;
}
