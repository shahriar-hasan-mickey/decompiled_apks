record `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onAfterTerminate` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onComplete` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onError` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onNext` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f6824.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f682a.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L3f682e.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onError` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L3f6832.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onComplete` @type ^`io.reactivex.functions.Action` := v4 @kind object;
  #L3f6836.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L3f683a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f684c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6850.  if v0 == 0 then goto L3f6856;
  #L3f6854.  return @kind void;
  #L3f6856.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f685a.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f6860.  v0:= 1I;
  #L3f6862.  v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f6866.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f686a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f6870.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6874.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f687a.  goto L3f688a;
  #L3f687c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f687e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6884.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f688a.  return @kind void;
  #L3f688c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f688e.  call `fail`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f6894.  return @kind void;
  catch `java.lang.Throwable` @[L3f6856..L3f6860] goto L3f688c;
  catch `java.lang.Throwable` @[L3f6870..L3f687a] goto L3f687c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f68c0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f68c4.  if v0 == 0 then goto L3f68d0;
  #L3f68c8.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f68ce.  return @kind void;
  #L3f68d0.  v0:= 1I;
  #L3f68d2.  v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f68d6.  v1:= 0I;
  #L3f68d8.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f68dc.  call `accept`(v2, v7) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f68e2.  goto L3f6910;
  #L3f68e4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f68e6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f68ec.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f68f0.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L3f68f4.  v5:= 2I;
  #L3f68f6.  v5:= new `java.lang.Throwable`[v5];
  #L3f68fa.  v5[v1]:= v7 @kind object;
  #L3f68fe.  v5[v0]:= v2 @kind object;
  #L3f6902.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L3f6908.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f690e.  v0:= 0I;
  #L3f6910.  if v0 == 0 then goto L3f691e;
  #L3f6914.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f6918.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f691e.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6922.  call `run`(v7) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f6928.  goto L3f6938;
  #L3f692a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f692c.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6932.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6938.  return @kind void;
  catch `java.lang.Throwable` @[L3f68d8..L3f68e2] goto L3f68e4;
  catch `java.lang.Throwable` @[L3f691e..L3f6928] goto L3f692a;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6964.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6968.  if v0 == 0 then goto L3f696e;
  #L3f696c.  return @kind void;
  #L3f696e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.sourceMode` @type ^`int`;
  #L3f6972.  if v0 == 0 then goto L3f6984;
  #L3f6976.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f697a.  v0:= 0I;
  #L3f697c.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f6982.  return @kind void;
  #L3f6984.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f6988.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f698e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f6992.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f6998.  return @kind void;
  #L3f699a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f699c.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f69a2.  return @kind void;
  catch `java.lang.Throwable` @[L3f6984..L3f698e] goto L3f699a;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f6714.  v0:= 0I;
  #L3f6716.  v1:= 2I;
  #L3f6718.  v2:= 1I;
  #L3f671a.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f671e.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f6724.  v3:= temp @kind object;
  #L3f6726.  if v3 == 0 then goto L3f6784;
  #L3f672a.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f672e.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f6734.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6738.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f673e.  goto L3f67a0;
  #L3f6740.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f6742.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6748.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f674c.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f6752.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L3f6758.  v0:= temp @kind object;
  #L3f675a.  throw v0;
  #L3f675c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f675e.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L3f6762.  v1:= new `java.lang.Throwable`[v1];
  #L3f6766.  v1[v0]:= v3 @kind object;
  #L3f676a.  v1[v2]:= v4 @kind object;
  #L3f676e.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L3f6774.  throw v5;
  #L3f6776.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f6778.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f677c.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f6782.  throw v0;
  #L3f6784.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.sourceMode` @type ^`int`;
  #L3f6788.  if v0 != v2 then goto L3f67a0;
  #L3f678c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6790.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f6796.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f679a.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f67a0.  return v3 @kind object;
  #L3f67a2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f67a4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f67aa.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f67ae.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f67b4.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L3f67ba.  v0:= temp @kind object;
  #L3f67bc.  throw v0;
  #L3f67be.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f67c0.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L3f67c4.  v1:= new `java.lang.Throwable`[v1];
  #L3f67c8.  v1[v0]:= v3 @kind object;
  #L3f67cc.  v1[v2]:= v4 @kind object;
  #L3f67d0.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L3f67d6.  throw v5;
  catch `java.lang.Throwable` @[L3f671a..L3f6726] goto L3f67a2;
  catch `java.lang.Throwable` @[L3f672a..L3f6734] goto L3f6740;
  catch `java.lang.Throwable` @[L3f6742..L3f6748] goto L3f6776;
  catch `java.lang.Throwable` @[L3f6748..L3f6752] goto L3f675c;
  catch `java.lang.Throwable` @[L3f6752..L3f6776] goto L3f6776;
  catch `java.lang.Throwable` @[L3f67aa..L3f67b4] goto L3f67be;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f66f8.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f66fe.  v1:= temp;
  #L3f6700.  return v1;
}
