record `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber.onAfterNext` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f5e90.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f5e96.  v0.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber.onAfterNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L3f5e9a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5eac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f5eb0.  if v0 == 0 then goto L3f5eb6;
  #L3f5eb4.  return @kind void;
  #L3f5eb6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f5eba.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f5ec0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber.sourceMode` @type ^`int`;
  #L3f5ec4.  if v0 != 0 then goto L3f5edc;
  #L3f5ec8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber.onAfterNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f5ecc.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f5ed2.  goto L3f5edc;
  #L3f5ed4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5ed6.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f5edc.  return @kind void;
  catch `java.lang.Throwable` @[L3f5ec8..L3f5ed2] goto L3f5ed4;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5e64.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f5e68.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f5e6e.  v0:= temp @kind object;
  #L3f5e70.  if v0 == 0 then goto L3f5e7e;
  #L3f5e74.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber.onAfterNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f5e78.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f5e7e.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f5e48.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f5e4e.  v1:= temp;
  #L3f5e50.  return v1;
}
