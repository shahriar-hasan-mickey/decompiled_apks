record `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.onFinally` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.qs` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.syncFused` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f6210.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L3f6216.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f621a.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.onFinally` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L3f621e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6230.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6234.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f623a.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.runFinally:()V` @kind virtual;
  #L3f6240.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6254.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f6258.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.clear:()V` @kind interface;
  #L3f625e.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6180.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f6184.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.isEmpty:()Z` @kind interface;
  #L3f618a.  v0:= temp;
  #L3f618c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6270.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f6274.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f627a.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.runFinally:()V` @kind virtual;
  #L3f6280.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6294.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f6298.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f629e.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.runFinally:()V` @kind virtual;
  #L3f62a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f62b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f62bc.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f62c2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f62d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f62d8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f62de.  v0:= temp;
  #L3f62e0.  if v0 == 0 then goto L3f6302;
  #L3f62e4.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3f62e8.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L3f62ec.  if v0 == 0 then goto L3f62f8;
  #L3f62f0.  v2:= (`io.reactivex.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L3f62f4.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L3f62f8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f62fc.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f6302.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f61e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f61e4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f61ea.  v0:= temp @kind object;
  #L3f61ec.  if v0 != 0 then goto L3f61fe;
  #L3f61f0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.syncFused` @type ^`boolean` @kind boolean;
  #L3f61f4.  if v1 == 0 then goto L3f61fe;
  #L3f61f8.  call `runFinally`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.runFinally:()V` @kind virtual;
  #L3f61fe.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6314.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6318.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f631e.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f61a0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f61a4.  v1:= 0I;
  #L3f61a6.  if v0 == 0 then goto L3f61ce;
  #L3f61aa.  v2:= v4 ^& 4;
  #L3f61ae.  if v2 != 0 then goto L3f61ce;
  #L3f61b2.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L3f61b8.  v4:= temp;
  #L3f61ba.  if v4 == 0 then goto L3f61cc;
  #L3f61be.  v0:= 1I;
  #L3f61c0.  if v4 != v0 then goto L3f61c6;
  #L3f61c4.  goto L3f61c8;
  #L3f61c6.  v0:= 0I;
  #L3f61c8.  v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.syncFused` @type ^`boolean` := v0 @kind boolean;
  #L3f61cc.  return v4;
  #L3f61ce.  return v1;
}
procedure `void` `runFinally`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.runFinally:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f6330.  v0:= 0I;
  #L3f6332.  v1:= 1I;
  #L3f6334.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.compareAndSet:(II)Z` @kind virtual;
  #L3f633a.  v0:= temp;
  #L3f633c.  if v0 == 0 then goto L3f635a;
  #L3f6340.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber.onFinally` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6344.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f634a.  goto L3f635a;
  #L3f634c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f634e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6354.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f635a.  return @kind void;
  catch `java.lang.Throwable` @[L3f6340..L3f634a] goto L3f634c;
}
