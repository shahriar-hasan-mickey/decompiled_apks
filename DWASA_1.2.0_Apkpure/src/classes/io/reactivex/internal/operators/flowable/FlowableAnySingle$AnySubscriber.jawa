record `io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.predicate` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$AnySubscriber;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ee404.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ee40a.  v0.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L3ee40e.  v0.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L3ee412.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$AnySubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee424.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee428.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee42e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ee432.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3ee436.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$AnySubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee3e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee3e4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ee3e8.  if v0 != v1 then goto L3ee3f0;
  #L3ee3ec.  v0:= 1I;
  #L3ee3ee.  goto L3ee3f2;
  #L3ee3f0.  v0:= 0I;
  #L3ee3f2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$AnySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee448.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee44c.  if v0 != 0 then goto L3ee472;
  #L3ee450.  v0:= 1I;
  #L3ee452.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ee456.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ee45a.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3ee45e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3ee462.  v1:= 0I;
  #L3ee464.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3ee46a.  v1:= temp @kind object;
  #L3ee46c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3ee472.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$AnySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee484.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee488.  if v0 == 0 then goto L3ee494;
  #L3ee48c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ee492.  return @kind void;
  #L3ee494.  v0:= 1I;
  #L3ee496.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ee49a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ee49e.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3ee4a2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3ee4a6.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ee4ac.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$AnySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee4c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee4c4.  if v0 == 0 then goto L3ee4ca;
  #L3ee4c8.  return @kind void;
  #L3ee4ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3ee4ce.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L3ee4d4.  v2:= temp;
  #L3ee4d6.  if v2 == 0 then goto L3ee504;
  #L3ee4da.  v2:= 1I;
  #L3ee4dc.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3ee4e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee4e4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee4ea.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ee4ee.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3ee4f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3ee4f6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3ee4fc.  v2:= temp @kind object;
  #L3ee4fe.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3ee504.  return @kind void;
  #L3ee506.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ee508.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ee50e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee512.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee518.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ee51c.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3ee520.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$AnySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ee526.  return @kind void;
  catch `java.lang.Throwable` @[L3ee4ca..L3ee4d6] goto L3ee506;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$AnySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee544.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee548.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3ee54e.  v0:= temp;
  #L3ee550.  if v0 == 0 then goto L3ee572;
  #L3ee554.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3ee558.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$AnySubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3ee55c.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3ee562.  v0:= 9223372036854775807L;
  #L3ee56c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ee572.  return @kind void;
}
