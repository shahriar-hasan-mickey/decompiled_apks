record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.bufferSize` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.count` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.maxSize` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.restartTimerOnMaxSize` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.scheduler` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.terminated` @AccessFlag VOLATILE;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timer` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.upstream` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.worker` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 , `long` v8 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40dad8.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40dadc.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40dae2.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40dae8.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L40daec.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L40daf2.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L40daf6.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timespan` @type ^`long` := v3 @kind wide;
  #L40dafa.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L40dafe.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L40db02.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.bufferSize` @type ^`int` := v7;
  #L40db06.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.maxSize` @type ^`long` := v8 @kind wide;
  #L40db0a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.restartTimerOnMaxSize` @type ^`boolean` := v10 @kind boolean;
  #L40db0e.  if v10 == 0 then goto L40db20;
  #L40db12.  call temp:= `createWorker`(v6) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L40db18.  v2:= temp @kind object;
  #L40db1a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L40db1e.  goto L40db26;
  #L40db20.  v2:= 0I;
  #L40db22.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L40db26.  return @kind void;
}
procedure `boolean` `access$000`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.access$000:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L40daa8.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40daac.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `access$100`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.access$100:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L40dac0.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40dac4.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40db38.  v0:= 1I;
  #L40db3a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40db3e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40db50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40db54.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40db5a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40db5e.  if v0 == 0 then goto L40db68;
  #L40db62.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40db68.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L40db7c.  v0:= v17 @kind object;
  #L40db80.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40db84.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40db88.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40db8c.  v5:= 1I;
  #L40db8e.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.terminated` @type ^`boolean` @kind boolean;
  #L40db92.  if v6 == 0 then goto L40dbae;
  #L40db96.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40db9a.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40dba0.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L40dba6.  call `dispose`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L40dbac.  return @kind void;
  #L40dbae.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.done` @type ^`boolean` @kind boolean;
  #L40dbb2.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40dbb8.  v7:= temp @kind object;
  #L40dbba.  if v7 != 0 then goto L40dbc2;
  #L40dbbe.  v8:= 1I;
  #L40dbc0.  goto L40dbc4;
  #L40dbc2.  v8:= 0I;
  #L40dbc4.  v9:= instanceof @variable v7 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder` @kind boolean;
  #L40dbc8.  v10:= 0I;
  #L40dbca.  if v6 == 0 then goto L40dbfe;
  #L40dbce.  if v8 != 0 then goto L40dbd6;
  #L40dbd2.  if v9 == 0 then goto L40dbfe;
  #L40dbd6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v10 @kind object;
  #L40dbda.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L40dbe0.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L40dbe4.  if v1 == 0 then goto L40dbf0;
  #L40dbe8.  call `onError`(v3, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40dbee.  goto L40dbf6;
  #L40dbf0.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40dbf6.  call `dispose`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L40dbfc.  return @kind void;
  #L40dbfe.  if v8 == 0 then goto L40dc12;
  #L40dc02.  v5:= -v5 @kind int;
  #L40dc04.  call temp:= `leave`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.leave:(I)I` @kind virtual;
  #L40dc0a.  v5:= temp;
  #L40dc0c.  if v5 != 0 then goto L40db8e;
  #L40dc10.  return @kind void;
  #L40dc12.  v11:= 9223372036854775807L;
  #L40dc1c.  v13:= 0L;
  #L40dc20.  v8:= v5;
  #L40dc22.  if v9 == 0 then goto L40dcc0;
  #L40dc26.  v7:= (`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder`) v7 @kind object;
  #L40dc2a.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L40dc2e.  if v9 != 0 then goto L40dc48;
  #L40dc32.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @type ^`long` @kind wide;
  #L40dc36.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder.index` @type ^`long` @kind wide;
  #L40dc3a.  v16:= lcmp(v4, v6);
  #L40dc3e.  if v16 != 0 then goto L40dc44;
  #L40dc42.  goto L40dc48;
  #L40dc44.  v5:= v8;
  #L40dc46.  goto L40db8e;
  #L40dc48.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40dc4e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.count` @type ^`long` := v13 @kind wide;
  #L40dc52.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.bufferSize` @type ^`int`;
  #L40dc56.  call temp:= `create`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40dc5c.  v3:= temp @kind object;
  #L40dc5e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v3 @kind object;
  #L40dc62.  call temp:= `requested`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.requested:()J` @kind virtual;
  #L40dc68.  v4:= temp @kind wide;
  #L40dc6a.  v6:= lcmp(v4, v13);
  #L40dc6e.  if v6 == 0 then goto L40dc8c;
  #L40dc72.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40dc78.  v6:= lcmp(v4, v11);
  #L40dc7c.  if v6 == 0 then goto L40dc44;
  #L40dc80.  v4:= 1L;
  #L40dc84.  call temp:= `produced`(v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.produced:(J)J` @kind virtual;
  #L40dc8a.  goto L40dc44;
  #L40dc8c.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v10 @kind object;
  #L40dc90.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40dc94.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L40dc9a.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40dc9e.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40dca4.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40dca8.  v3:= "Could not deliver first window due to lack of requests." @kind object;
  #L40dcac.  call `<init>`(v1, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40dcb2.  call `onError`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40dcb8.  call `dispose`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L40dcbe.  return @kind void;
  #L40dcc0.  call temp:= `getValue`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L40dcc6.  v4:= temp @kind object;
  #L40dcc8.  call `onNext`(v3, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40dcce.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.count` @type ^`long` @kind wide;
  #L40dcd2.  v6:= 1L;
  #L40dcd6.  v4:= v4 + v6 @kind long;
  #L40dcd8.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.maxSize` @type ^`long` @kind wide;
  #L40dcdc.  v15:= lcmp(v4, v9);
  #L40dce0.  if v15 < 0 then goto L40ddb6;
  #L40dce4.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @type ^`long` @kind wide;
  #L40dce8.  v4:= v4 + v6 @kind long;
  #L40dcea.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @type ^`long` := v4 @kind wide;
  #L40dcee.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.count` @type ^`long` := v13 @kind wide;
  #L40dcf2.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40dcf8.  call temp:= `requested`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.requested:()J` @kind virtual;
  #L40dcfe.  v3:= temp @kind wide;
  #L40dd00.  v5:= lcmp(v3, v13);
  #L40dd04.  if v5 == 0 then goto L40dd86;
  #L40dd08.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.bufferSize` @type ^`int`;
  #L40dd0c.  call temp:= `create`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40dd12.  v5:= temp @kind object;
  #L40dd14.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v5 @kind object;
  #L40dd18.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40dd1c.  call `onNext`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40dd22.  v6:= lcmp(v3, v11);
  #L40dd26.  if v6 == 0 then goto L40dd34;
  #L40dd2a.  v3:= 1L;
  #L40dd2e.  call temp:= `produced`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.produced:(J)J` @kind virtual;
  #L40dd34.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L40dd38.  if v3 == 0 then goto L40dd80;
  #L40dd3c.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40dd40.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40dd46.  v3:= temp @kind object;
  #L40dd48.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L40dd4c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40dd52.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40dd56.  v10:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder`;
  #L40dd5a.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @type ^`long` @kind wide;
  #L40dd5e.  call `<init>`(v10, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;)V` @kind direct;
  #L40dd64.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timespan` @type ^`long` @kind wide;
  #L40dd68.  v15:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40dd6c.  v11:= v13 @kind wide;
  #L40dd6e.  call temp:= `schedulePeriodically`(v9, v10, v11, v13, v15) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40dd74.  v3:= temp @kind object;
  #L40dd76.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40dd7a.  call temp:= `replace`(v4, v3) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40dd80.  v3:= v5 @kind object;
  #L40dd82.  goto L40dc44;
  #L40dd86.  v3:= 0I;
  #L40dd88.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v3 @kind object;
  #L40dd8c.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40dd90.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40dd96.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40dd9a.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40dd9e.  v3:= "Could not deliver window due to lack of requests" @kind object;
  #L40dda2.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40dda8.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ddae.  call `dispose`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L40ddb4.  return @kind void;
  #L40ddb6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.count` @type ^`long` := v4 @kind wide;
  #L40ddba.  goto L40dc44;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ddd0.  v0:= 1I;
  #L40ddd2.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40ddd6.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.enter:()Z` @kind virtual;
  #L40dddc.  v0:= temp;
  #L40ddde.  if v0 == 0 then goto L40dde8;
  #L40dde2.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.drainLoop:()V` @kind virtual;
  #L40dde8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ddec.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40ddf2.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L40ddf8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40de0c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L40de10.  v0:= 1I;
  #L40de12.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40de16.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.enter:()Z` @kind virtual;
  #L40de1c.  v0:= temp;
  #L40de1e.  if v0 == 0 then goto L40de28;
  #L40de22.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.drainLoop:()V` @kind virtual;
  #L40de28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40de2c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40de32.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L40de38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40de4c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.terminated` @type ^`boolean` @kind boolean;
  #L40de50.  if v0 == 0 then goto L40de56;
  #L40de54.  return @kind void;
  #L40de56.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.fastEnter:()Z` @kind virtual;
  #L40de5c.  v0:= temp;
  #L40de5e.  if v0 == 0 then goto L40df6e;
  #L40de62.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40de66.  call `onNext`(v0, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40de6c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.count` @type ^`long` @kind wide;
  #L40de70.  v3:= 1L;
  #L40de74.  v1:= v1 + v3 @kind long;
  #L40de76.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.maxSize` @type ^`long` @kind wide;
  #L40de7a.  v8:= lcmp(v1, v5);
  #L40de7e.  if v8 < 0 then goto L40df5a;
  #L40de82.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @type ^`long` @kind wide;
  #L40de86.  v1:= v1 + v3 @kind long;
  #L40de88.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @type ^`long` := v1 @kind wide;
  #L40de8c.  v1:= 0L;
  #L40de90.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.count` @type ^`long` := v1 @kind wide;
  #L40de94.  call `onComplete`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40de9a.  call temp:= `requested`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.requested:()J` @kind virtual;
  #L40dea0.  v5:= temp @kind wide;
  #L40dea2.  v8:= lcmp(v5, v1);
  #L40dea6.  if v8 == 0 then goto L40df2a;
  #L40deaa.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.bufferSize` @type ^`int`;
  #L40deae.  call temp:= `create`(v8) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40deb4.  v8:= temp @kind object;
  #L40deb6.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40deba.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40debe.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40dec4.  v0:= 9223372036854775807L;
  #L40dece.  v8:= lcmp(v5, v0);
  #L40ded2.  if v8 == 0 then goto L40dedc;
  #L40ded6.  call temp:= `produced`(v7, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.produced:(J)J` @kind virtual;
  #L40dedc.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L40dee0.  if v8 == 0 then goto L40df5e;
  #L40dee4.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40dee8.  call temp:= `get`(v8) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40deee.  v8:= temp @kind object;
  #L40def0.  v8:= (`io.reactivex.disposables.Disposable`) v8 @kind object;
  #L40def4.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40defa.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40defe.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder`;
  #L40df02.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @type ^`long` @kind wide;
  #L40df06.  call `<init>`(v1, v2, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;)V` @kind direct;
  #L40df0c.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timespan` @type ^`long` @kind wide;
  #L40df10.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40df14.  v2:= v4 @kind wide;
  #L40df16.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40df1c.  v8:= temp @kind object;
  #L40df1e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40df22.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40df28.  goto L40df5e;
  #L40df2a.  v8:= 0I;
  #L40df2c.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40df30.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40df34.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40df3a.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40df3e.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40df42.  v1:= "Could not deliver window due to lack of requests" @kind object;
  #L40df46.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40df4c.  call `onError`(v8, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40df52.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L40df58.  return @kind void;
  #L40df5a.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.count` @type ^`long` := v1 @kind wide;
  #L40df5e.  v8:= -1I;
  #L40df60.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.leave:(I)I` @kind virtual;
  #L40df66.  v8:= temp;
  #L40df68.  if v8 != 0 then goto L40df8e;
  #L40df6c.  return @kind void;
  #L40df6e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40df72.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L40df78.  v8:= temp @kind object;
  #L40df7a.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40df80.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.enter:()Z` @kind virtual;
  #L40df86.  v8:= temp;
  #L40df88.  if v8 != 0 then goto L40df8e;
  #L40df8c.  return @kind void;
  #L40df8e.  call `drainLoop`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.drainLoop:()V` @kind virtual;
  #L40df94.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v11 @kind this, `org.reactivestreams.Subscription` v12 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L40dfa8.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40dfac.  call temp:= `validate`(v0, v12) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40dfb2.  v0:= temp;
  #L40dfb4.  if v0 == 0 then goto L40e092;
  #L40dfb8.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v12 @kind object;
  #L40dfbc.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40dfc0.  call `onSubscribe`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40dfc6.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40dfca.  if v1 == 0 then goto L40dfd0;
  #L40dfce.  return @kind void;
  #L40dfd0.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.bufferSize` @type ^`int`;
  #L40dfd4.  call temp:= `create`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40dfda.  v1:= temp @kind object;
  #L40dfdc.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L40dfe0.  call temp:= `requested`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.requested:()J` @kind virtual;
  #L40dfe6.  v2:= temp @kind wide;
  #L40dfe8.  v4:= 0L;
  #L40dfec.  v6:= lcmp(v2, v4);
  #L40dff0.  if v6 == 0 then goto L40e072;
  #L40dff4.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40dffa.  v0:= 9223372036854775807L;
  #L40e004.  v4:= lcmp(v2, v0);
  #L40e008.  if v4 == 0 then goto L40e016;
  #L40e00c.  v2:= 1L;
  #L40e010.  call temp:= `produced`(v11, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.produced:(J)J` @kind virtual;
  #L40e016.  v5:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder`;
  #L40e01a.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.producerIndex` @type ^`long` @kind wide;
  #L40e01e.  call `<init>`(v5, v2, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;)V` @kind direct;
  #L40e024.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L40e028.  if v2 == 0 then goto L40e044;
  #L40e02c.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40e030.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timespan` @type ^`long` @kind wide;
  #L40e034.  v10:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40e038.  v6:= v8 @kind wide;
  #L40e03a.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40e040.  v2:= temp @kind object;
  #L40e042.  goto L40e05a;
  #L40e044.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40e048.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timespan` @type ^`long` @kind wide;
  #L40e04c.  v10:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40e050.  v6:= v8 @kind wide;
  #L40e052.  call temp:= `schedulePeriodicallyDirect`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40e058.  v2:= temp @kind object;
  #L40e05a.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40e05e.  call temp:= `replace`(v3, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40e064.  v2:= temp;
  #L40e066.  if v2 == 0 then goto L40e092;
  #L40e06a.  call `request`(v12, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40e070.  goto L40e092;
  #L40e072.  v1:= 1I;
  #L40e074.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L40e078.  call `cancel`(v12) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40e07e.  v12:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40e082.  v1:= "Could not deliver initial window due to lack of requests." @kind object;
  #L40e086.  call `<init>`(v12, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40e08c.  call `onError`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40e092.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40e0a4.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.requested:(J)V` @kind virtual;
  #L40e0aa.  return @kind void;
}
