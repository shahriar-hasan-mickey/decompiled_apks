record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L401224.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40122a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40122e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L401234.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L401238.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40123c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L401242.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L401246.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L40124a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40125c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L401260.  if v0 != 0 then goto L40128c;
  #L401264.  v0:= 1I;
  #L401266.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40126a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40126e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L401274.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40127a.  v0:= temp;
  #L40127c.  if v0 != 0 then goto L40128c;
  #L401280.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L401284.  v1:= 0I;
  #L401286.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40128c.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `java.util.concurrent.atomic.AtomicReference` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4011d4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4011d8.  v1:= 0I;
  #L4011da.  v2:= 1I;
  #L4011dc.  if v0 == 0 then goto L4011e8;
  #L4011e0.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4011e6.  return v2;
  #L4011e8.  if v4 == 0 then goto L40120e;
  #L4011ec.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4011f0.  if v4 == 0 then goto L401202;
  #L4011f4.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4011fa.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L401200.  return v2;
  #L401202.  if v5 == 0 then goto L40120e;
  #L401206.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40120c.  return v2;
  #L40120e.  v4:= 0I;
  #L401210.  return v4;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4012a0.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.getAndIncrement:()I` @kind virtual;
  #L4012a6.  v0:= temp;
  #L4012a8.  if v0 == 0 then goto L4012ae;
  #L4012ac.  return @kind void;
  #L4012ae.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4012b2.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4012b6.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4012ba.  v3:= 1I;
  #L4012bc.  v4:= 1I;
  #L4012be.  v5:= 0L;
  #L4012c2.  v7:= v5 @kind wide;
  #L4012c4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4012ca.  v9:= temp @kind wide;
  #L4012cc.  v11:= 0I;
  #L4012ce.  v12:= lcmp(v7, v9);
  #L4012d2.  if v12 == 0 then goto L401310;
  #L4012d6.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` @kind boolean;
  #L4012da.  v10:= 0I;
  #L4012dc.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4012e2.  v10:= temp @kind object;
  #L4012e4.  if v10 != 0 then goto L4012ec;
  #L4012e8.  v12:= 1I;
  #L4012ea.  goto L4012ee;
  #L4012ec.  v12:= 0I;
  #L4012ee.  call temp:= `checkTerminated`(v13, v9, v12, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L4012f4.  v9:= temp;
  #L4012f6.  if v9 == 0 then goto L4012fc;
  #L4012fa.  return @kind void;
  #L4012fc.  if v12 == 0 then goto L401302;
  #L401300.  goto L401310;
  #L401302.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L401308.  v9:= 1L;
  #L40130c.  v7:= v7 + v9 @kind long;
  #L40130e.  goto L4012c4;
  #L401310.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L401316.  v9:= temp @kind wide;
  #L401318.  v12:= lcmp(v7, v9);
  #L40131c.  if v12 != 0 then goto L401340;
  #L401320.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` @kind boolean;
  #L401324.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40132a.  v10:= temp @kind object;
  #L40132c.  if v10 != 0 then goto L401332;
  #L401330.  v11:= 1I;
  #L401332.  call temp:= `checkTerminated`(v13, v9, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L401338.  v9:= temp;
  #L40133a.  if v9 == 0 then goto L401340;
  #L40133e.  return @kind void;
  #L401340.  v9:= lcmp(v7, v5);
  #L401344.  if v9 == 0 then goto L40134e;
  #L401348.  call temp:= `produced`(v1, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40134e.  v4:= -v4 @kind int;
  #L401350.  call temp:= `addAndGet`(v13, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.addAndGet:(I)I` @kind virtual;
  #L401356.  v4:= temp;
  #L401358.  if v4 != 0 then goto L4012be;
  #L40135c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401370.  v0:= 1I;
  #L401372.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L401376.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @kind virtual;
  #L40137c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L401390.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L401394.  v1:= 1I;
  #L401396.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L40139a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @kind virtual;
  #L4013a0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4013b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4013b8.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4013be.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @kind virtual;
  #L4013c4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4013d8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4013dc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4013e2.  v0:= temp;
  #L4013e4.  if v0 == 0 then goto L401406;
  #L4013e8.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4013ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4013f0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4013f6.  v0:= 9223372036854775807L;
  #L401400.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L401406.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401418.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40141e.  v0:= temp;
  #L401420.  if v0 == 0 then goto L401434;
  #L401424.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L401428.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40142e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @kind virtual;
  #L401434.  return @kind void;
}
