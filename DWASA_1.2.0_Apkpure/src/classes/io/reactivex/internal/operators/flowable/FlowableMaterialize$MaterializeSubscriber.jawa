record `io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3feb44.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3feb4a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3feb5c.  call temp:= `createOnComplete`() @signature `Lio/reactivex/Notification;.createOnComplete:()Lio/reactivex/Notification;` @kind static;
  #L3feb62.  v0:= temp @kind object;
  #L3feb64.  call `complete`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3feb6a.  return @kind void;
}
procedure `void` `onDrop`(`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.onDrop:(Lio/reactivex/Notification;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3feb7c.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L3feb82.  v0:= temp;
  #L3feb84.  if v0 == 0 then goto L3feb96;
  #L3feb88.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L3feb8e.  v2:= temp @kind object;
  #L3feb90.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3feb96.  return @kind void;
}
procedure `void` `onDrop`(`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.onDrop:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L3feba8.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L3febac.  call `onDrop`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.onDrop:(Lio/reactivex/Notification;)V` @kind virtual;
  #L3febb2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L3febc4.  call temp:= `createOnError`(v1) @signature `Lio/reactivex/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/Notification;` @kind static;
  #L3febca.  v1:= temp @kind object;
  #L3febcc.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3febd2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize$MaterializeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3febe4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber.produced` @type ^`long` @kind wide;
  #L3febe8.  v2:= 1L;
  #L3febec.  v0:= v0 + v2 @kind long;
  #L3febee.  v4.`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L3febf2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableMaterialize$MaterializeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3febf6.  call temp:= `createOnNext`(v5) @signature `Lio/reactivex/Notification;.createOnNext:(Ljava/lang/Object;)Lio/reactivex/Notification;` @kind static;
  #L3febfc.  v5:= temp @kind object;
  #L3febfe.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fec04.  return @kind void;
}
