record `io.reactivex.internal.operators.flowable.FlowableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` `io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableRefCount.n` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableRefCount.scheduler` @AccessFlag FINAL;
  `io.reactivex.flowables.ConnectableFlowable` `io.reactivex.internal.operators.flowable.FlowableRefCount.source` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRefCount.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableRefCount.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v7 @kind this, `io.reactivex.flowables.ConnectableFlowable` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L403914.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L403918.  call temp:= `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @kind static;
  #L40391e.  v6:= temp @kind object;
  #L403920.  v2:= 1I;
  #L403922.  v3:= 0L;
  #L403926.  v0:= v7 @kind object;
  #L403928.  v1:= v8 @kind object;
  #L40392a.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L403930.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v0 @kind this, `io.reactivex.flowables.ConnectableFlowable` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L403944.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L40394a.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` := v1 @kind object;
  #L40394e.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.n` @type ^`int` := v2;
  #L403952.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.timeout` @type ^`long` := v3 @kind wide;
  #L403956.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L40395a.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.scheduler` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L40395e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.cancel:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L403970.  @monitorenter v5
  #L403972.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L403976.  if v0 == 0 then goto L4039ee;
  #L40397a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L40397e.  if v0 == v6 then goto L403984;
  #L403982.  goto L4039ee;
  #L403984.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L403988.  v2:= 1L;
  #L40398c.  v0:= v0 - v2 @kind long;
  #L40398e.  v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.subscriberCount` @type ^`long` := v0 @kind wide;
  #L403992.  v2:= 0L;
  #L403996.  v4:= lcmp(v0, v2);
  #L40399a.  if v4 != 0 then goto L4039ea;
  #L40399e.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.connected` @type ^`boolean` @kind boolean;
  #L4039a2.  if v0 != 0 then goto L4039a8;
  #L4039a6.  goto L4039ea;
  #L4039a8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.timeout` @type ^`long` @kind wide;
  #L4039ac.  v4:= lcmp(v0, v2);
  #L4039b0.  if v4 != 0 then goto L4039be;
  #L4039b4.  call `timeout`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.timeout:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @kind virtual;
  #L4039ba.  @monitorexit v5
  #L4039bc.  return @kind void;
  #L4039be.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L4039c2.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4039c8.  v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4039cc.  @monitorexit v5
  #L4039ce.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L4039d2.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.timeout` @type ^`long` @kind wide;
  #L4039d6.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4039da.  call temp:= `scheduleDirect`(v1, v6, v2, v4) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4039e0.  v6:= temp @kind object;
  #L4039e2.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4039e8.  return @kind void;
  #L4039ea.  @monitorexit v5
  #L4039ec.  return @kind void;
  #L4039ee.  @monitorexit v5
  #L4039f0.  return @kind void;
  #L4039f2.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4039f4.  @monitorexit v5
  #L4039f6.  throw v6;
  catch `java.lang.Throwable` @[L403972..L4039ce] goto L4039f2;
  catch `java.lang.Throwable` @[L4039ea..L4039f6] goto L4039f2;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v7 @kind this, `org.reactivestreams.Subscriber` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L403a1c.  @monitorenter v7
  #L403a1e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L403a22.  if v0 != 0 then goto L403a34;
  #L403a26.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection`;
  #L403a2a.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;)V` @kind direct;
  #L403a30.  v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` := v0 @kind object;
  #L403a34.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L403a38.  v3:= 0L;
  #L403a3c.  v5:= lcmp(v1, v3);
  #L403a40.  if v5 != 0 then goto L403a56;
  #L403a44.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L403a48.  if v3 == 0 then goto L403a56;
  #L403a4c.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L403a50.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L403a56.  v3:= 1L;
  #L403a5a.  v1:= v1 + v3 @kind long;
  #L403a5c.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.subscriberCount` @type ^`long` := v1 @kind wide;
  #L403a60.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.connected` @type ^`boolean` @kind boolean;
  #L403a64.  v4:= 1I;
  #L403a66.  if v3 != 0 then goto L403a7e;
  #L403a6a.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.n` @type ^`int`;
  #L403a6e.  v5:= (`long`) v3 @kind i2l;
  #L403a70.  v3:= lcmp(v1, v5);
  #L403a74.  if v3 != 0 then goto L403a7e;
  #L403a78.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.connected` @type ^`boolean` := v4 @kind boolean;
  #L403a7c.  goto L403a80;
  #L403a7e.  v4:= 0I;
  #L403a80.  @monitorexit v7
  #L403a82.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403a86.  v2:= new `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber`;
  #L403a8a.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @kind direct;
  #L403a90.  call `subscribe`(v1, v2) @signature `Lio/reactivex/flowables/ConnectableFlowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L403a96.  if v4 == 0 then goto L403aa4;
  #L403a9a.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403a9e.  call `connect`(v8, v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L403aa4.  return @kind void;
  #L403aa6.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L403aa8.  @monitorexit v7
  #L403aaa.  throw v8;
  catch `java.lang.Throwable` @[L403a1e..L403a82] goto L403aa6;
  catch `java.lang.Throwable` @[L403aa8..L403aaa] goto L403aa6;
}
procedure `void` `terminated`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.terminated:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L403ad0.  @monitorenter v5
  #L403ad2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L403ad6.  if v0 == 0 then goto L403afa;
  #L403ada.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L403ade.  if v0 != v6 then goto L403afa;
  #L403ae2.  v0:= 0I;
  #L403ae4.  v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` := v0 @kind object;
  #L403ae8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L403aec.  if v0 == 0 then goto L403afa;
  #L403af0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L403af4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L403afa.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L403afe.  v2:= 1L;
  #L403b02.  v0:= v0 - v2 @kind long;
  #L403b04.  v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.subscriberCount` @type ^`long` := v0 @kind wide;
  #L403b08.  v2:= 0L;
  #L403b0c.  v4:= lcmp(v0, v2);
  #L403b10.  if v4 != 0 then goto L403b56;
  #L403b14.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403b18.  v0:= instanceof @variable v0 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L403b1c.  if v0 == 0 then goto L403b30;
  #L403b20.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403b24.  v6:= (`io.reactivex.disposables.Disposable`) v6 @kind object;
  #L403b28.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L403b2e.  goto L403b56;
  #L403b30.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403b34.  v0:= instanceof @variable v0 @type ^`io.reactivex.internal.disposables.ResettableConnectable` @kind boolean;
  #L403b38.  if v0 == 0 then goto L403b56;
  #L403b3c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403b40.  v0:= (`io.reactivex.internal.disposables.ResettableConnectable`) v0 @kind object;
  #L403b44.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;.get:()Ljava/lang/Object;` @kind virtual;
  #L403b4a.  v6:= temp @kind object;
  #L403b4c.  v6:= (`io.reactivex.disposables.Disposable`) v6 @kind object;
  #L403b50.  call `resetIf`(v0, v6) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L403b56.  @monitorexit v5
  #L403b58.  return @kind void;
  #L403b5a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L403b5c.  @monitorexit v5
  #L403b5e.  throw v6;
  catch `java.lang.Throwable` @[L403ad2..L403b5e] goto L403b5a;
}
procedure `void` `timeout`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.timeout:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L403b7c.  @monitorenter v5
  #L403b7e.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L403b82.  v2:= 0L;
  #L403b86.  v4:= lcmp(v0, v2);
  #L403b8a.  if v4 != 0 then goto L403be4;
  #L403b8e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L403b92.  if v6 != v0 then goto L403be4;
  #L403b96.  v0:= 0I;
  #L403b98.  v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` := v0 @kind object;
  #L403b9c.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;.get:()Ljava/lang/Object;` @kind virtual;
  #L403ba2.  v0:= temp @kind object;
  #L403ba4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L403ba8.  call temp:= `dispose`(v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L403bae.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403bb2.  v6:= instanceof @variable v6 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L403bb6.  if v6 == 0 then goto L403bca;
  #L403bba.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403bbe.  v6:= (`io.reactivex.disposables.Disposable`) v6 @kind object;
  #L403bc2.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L403bc8.  goto L403be4;
  #L403bca.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403bce.  v6:= instanceof @variable v6 @type ^`io.reactivex.internal.disposables.ResettableConnectable` @kind boolean;
  #L403bd2.  if v6 == 0 then goto L403be4;
  #L403bd6.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.source` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L403bda.  v6:= (`io.reactivex.internal.disposables.ResettableConnectable`) v6 @kind object;
  #L403bde.  call `resetIf`(v6, v0) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L403be4.  @monitorexit v5
  #L403be6.  return @kind void;
  #L403be8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L403bea.  @monitorexit v5
  #L403bec.  throw v6;
  catch `java.lang.Throwable` @[L403b7e..L403bec] goto L403be8;
}
