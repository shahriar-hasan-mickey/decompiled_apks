record `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSelectorSupport` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.consumed` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.fallback` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.itemTimeoutIndicator` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40a984.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L40a98a.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40a98e.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.itemTimeoutIndicator` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L40a992.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L40a996.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L40a99c.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L40a9a0.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40a9a4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40a9aa.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40a9ae.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.fallback` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L40a9b2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40a9b6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40a9bc.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40a9c0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a9d4.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L40a9da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40a9de.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40a9e4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40a9f8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40a9fc.  v1:= 9223372036854775807L;
  #L40aa06.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L40aa0c.  v3:= temp @kind wide;
  #L40aa0e.  v0:= lcmp(v3, v1);
  #L40aa12.  if v0 == 0 then goto L40aa34;
  #L40aa16.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40aa1a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40aa20.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40aa24.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40aa2a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40aa2e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40aa34.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40aa48.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40aa4c.  v1:= 9223372036854775807L;
  #L40aa56.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L40aa5c.  v3:= temp @kind wide;
  #L40aa5e.  v0:= lcmp(v3, v1);
  #L40aa62.  if v0 == 0 then goto L40aa86;
  #L40aa66.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40aa6a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40aa70.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40aa74.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40aa7a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40aa7e.  call `dispose`(v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40aa84.  goto L40aa8c;
  #L40aa86.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40aa8c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L40aaa0.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40aaa4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40aaaa.  v0:= temp @kind wide;
  #L40aaac.  v2:= 9223372036854775807L;
  #L40aab6.  v4:= lcmp(v0, v2);
  #L40aaba.  if v4 == 0 then goto L40ab76;
  #L40aabe.  v4:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40aac2.  v5:= 1L;
  #L40aac6.  v7:= v0 + v5 @kind long;
  #L40aaca.  call temp:= `compareAndSet`(v4, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L40aad0.  v0:= temp;
  #L40aad2.  if v0 != 0 then goto L40aad8;
  #L40aad6.  goto L40ab76;
  #L40aad8.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40aadc.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40aae2.  v0:= temp @kind object;
  #L40aae4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L40aae8.  if v0 == 0 then goto L40aaf2;
  #L40aaec.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40aaf2.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.consumed` @type ^`long` @kind wide;
  #L40aaf6.  v0:= v0 + v5 @kind long;
  #L40aaf8.  v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.consumed` @type ^`long` := v0 @kind wide;
  #L40aafc.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ab00.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40ab06.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.itemTimeoutIndicator` @type ^`io.reactivex.functions.Function` @kind object;
  #L40ab0a.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40ab10.  v10:= temp @kind object;
  #L40ab12.  v0:= "The itemTimeoutIndicator returned a null Publisher." @kind object;
  #L40ab16.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ab1c.  v10:= temp @kind object;
  #L40ab1e.  v10:= (`org.reactivestreams.Publisher`) v10 @kind object;
  #L40ab22.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer`;
  #L40ab26.  call `<init>`(v0, v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSelectorSupport;)V` @kind direct;
  #L40ab2c.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40ab30.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40ab36.  v1:= temp;
  #L40ab38.  if v1 == 0 then goto L40ab42;
  #L40ab3c.  call `subscribe`(v10, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40ab42.  return @kind void;
  #L40ab44.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40ab46.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40ab4c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ab50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40ab56.  v0:= temp @kind object;
  #L40ab58.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L40ab5c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ab62.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40ab66.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L40ab6c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ab70.  call `onError`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ab76.  return @kind void;
  catch `java.lang.Throwable` @[L40ab06..L40ab22] goto L40ab44;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ab94.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ab98.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40ab9e.  v0:= temp;
  #L40aba0.  if v0 == 0 then goto L40abaa;
  #L40aba4.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L40abaa.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40abbc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40abc0.  v1:= 9223372036854775807L;
  #L40abca.  call temp:= `compareAndSet`(v0, v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L40abd0.  v5:= temp;
  #L40abd2.  if v5 == 0 then goto L40ac14;
  #L40abd6.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40abda.  call temp:= `cancel`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40abe0.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.fallback` @type ^`org.reactivestreams.Publisher` @kind object;
  #L40abe4.  v6:= 0I;
  #L40abe6.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.fallback` @type ^`org.reactivestreams.Publisher` := v6 @kind object;
  #L40abea.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.consumed` @type ^`long` @kind wide;
  #L40abee.  v2:= 0L;
  #L40abf2.  v6:= lcmp(v0, v2);
  #L40abf6.  if v6 == 0 then goto L40ac00;
  #L40abfa.  call `produced`(v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.produced:(J)V` @kind virtual;
  #L40ac00.  v6:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$FallbackSubscriber`;
  #L40ac04.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ac08.  call `<init>`(v6, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$FallbackSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;)V` @kind direct;
  #L40ac0e.  call `subscribe`(v5, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40ac14.  return @kind void;
}
procedure `void` `onTimeoutError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v3 @kind this, `long` v4 , `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onTimeoutError:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40ac28.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40ac2c.  v1:= 9223372036854775807L;
  #L40ac36.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L40ac3c.  v4:= temp;
  #L40ac3e.  if v4 == 0 then goto L40ac58;
  #L40ac42.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ac46.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ac4c.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ac50.  call `onError`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ac56.  goto L40ac5e;
  #L40ac58.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40ac5e.  return @kind void;
}
procedure `void` `startFirstTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v3 @kind this, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.startFirstTimeout:(Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40ac70.  if v4 == 0 then goto L40ac98;
  #L40ac74.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer`;
  #L40ac78.  v1:= 0L;
  #L40ac7c.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSelectorSupport;)V` @kind direct;
  #L40ac82.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40ac86.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40ac8c.  v1:= temp;
  #L40ac8e.  if v1 == 0 then goto L40ac98;
  #L40ac92.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40ac98.  return @kind void;
}
