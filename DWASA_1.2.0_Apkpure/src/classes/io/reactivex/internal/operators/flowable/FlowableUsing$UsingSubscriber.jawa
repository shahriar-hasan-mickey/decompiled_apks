record `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.eager` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40bca4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40bcaa.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40bcae.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @type ^`java.lang.Object` := v2 @kind object;
  #L40bcb2.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L40bcb6.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.eager` @type ^`boolean` := v4 @kind boolean;
  #L40bcba.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bccc.  call `disposeAfter`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.disposeAfter:()V` @kind virtual;
  #L40bcd2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40bcd6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40bcdc.  return @kind void;
}
procedure `void` `disposeAfter`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.disposeAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40bcf0.  v0:= 0I;
  #L40bcf2.  v1:= 1I;
  #L40bcf4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40bcfa.  v0:= temp;
  #L40bcfc.  if v0 == 0 then goto L40bd1e;
  #L40bd00.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L40bd04.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @type ^`java.lang.Object` @kind object;
  #L40bd08.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L40bd0e.  goto L40bd1e;
  #L40bd10.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bd12.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bd18.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40bd1e.  return @kind void;
  catch `java.lang.Throwable` @[L40bd00..L40bd0e] goto L40bd10;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40bd3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.eager` @type ^`boolean` @kind boolean;
  #L40bd40.  if v0 == 0 then goto L40bd8e;
  #L40bd44.  v0:= 0I;
  #L40bd46.  v1:= 1I;
  #L40bd48.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40bd4e.  v0:= temp;
  #L40bd50.  if v0 == 0 then goto L40bd78;
  #L40bd54.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L40bd58.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @type ^`java.lang.Object` @kind object;
  #L40bd5c.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L40bd62.  goto L40bd78;
  #L40bd64.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bd66.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bd6c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bd70.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40bd76.  return @kind void;
  #L40bd78.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40bd7c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40bd82.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bd86.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40bd8c.  goto L40bda8;
  #L40bd8e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bd92.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40bd98.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40bd9c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40bda2.  call `disposeAfter`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.disposeAfter:()V` @kind virtual;
  #L40bda8.  return @kind void;
  catch `java.lang.Throwable` @[L40bd54..L40bd62] goto L40bd64;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40bdc8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.eager` @type ^`boolean` @kind boolean;
  #L40bdcc.  if v0 == 0 then goto L40be38;
  #L40bdd0.  v0:= 0I;
  #L40bdd2.  v1:= 1I;
  #L40bdd4.  v2:= 0I;
  #L40bdd6.  call temp:= `compareAndSet`(v6, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40bddc.  v3:= temp;
  #L40bdde.  if v3 == 0 then goto L40bdfa;
  #L40bde2.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L40bde6.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @type ^`java.lang.Object` @kind object;
  #L40bdea.  call `accept`(v3, v4) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L40bdf0.  goto L40bdfa;
  #L40bdf2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bdf4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bdfa.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40bdfe.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40be04.  if v0 == 0 then goto L40be2c;
  #L40be08.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40be0c.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L40be10.  v5:= 2I;
  #L40be12.  v5:= new `java.lang.Throwable`[v5];
  #L40be16.  v5[v2]:= v7 @kind object;
  #L40be1a.  v5[v1]:= v0 @kind object;
  #L40be1e.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L40be24.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40be2a.  goto L40be52;
  #L40be2c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40be30.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40be36.  goto L40be52;
  #L40be38.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40be3c.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40be42.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40be46.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40be4c.  call `disposeAfter`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.disposeAfter:()V` @kind virtual;
  #L40be52.  return @kind void;
  catch `java.lang.Throwable` @[L40bde2..L40bdf0] goto L40bdf2;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40be70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40be74.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40be7a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40be8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40be90.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40be96.  v0:= temp;
  #L40be98.  if v0 == 0 then goto L40beaa;
  #L40be9c.  v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40bea0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bea4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40beaa.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bebc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40bec0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40bec6.  return @kind void;
}
