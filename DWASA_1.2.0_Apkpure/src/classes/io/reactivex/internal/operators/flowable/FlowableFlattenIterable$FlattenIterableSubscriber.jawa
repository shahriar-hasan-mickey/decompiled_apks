record `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f9d64.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L3f9d6a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f9d6e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f9d72.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int` := v3;
  #L3f9d76.  v1:= v3 ^> 2;
  #L3f9d7a.  v3:= v3 - v1 @kind int;
  #L3f9d7c.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @type ^`int` := v3;
  #L3f9d80.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f9d84.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f9d8a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3f9d8e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3f9d92.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f9d98.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3f9d9c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9db0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f9db4.  if v0 != 0 then goto L3f9dde;
  #L3f9db8.  v0:= 1I;
  #L3f9dba.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f9dbe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9dc2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f9dc8.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f9dce.  v0:= temp;
  #L3f9dd0.  if v0 != 0 then goto L3f9dde;
  #L3f9dd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f9dd8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3f9dde.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `io.reactivex.internal.fuseable.SimpleQueue` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f9c1c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f9c20.  v1:= 0I;
  #L3f9c22.  v2:= 1I;
  #L3f9c24.  if v0 == 0 then goto L3f9c34;
  #L3f9c28.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L3f9c2c.  call `clear`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3f9c32.  return v2;
  #L3f9c34.  if v4 == 0 then goto L3f9c76;
  #L3f9c38.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f9c3c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f9c42.  v4:= temp @kind object;
  #L3f9c44.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L3f9c48.  if v4 == 0 then goto L3f9c6a;
  #L3f9c4c.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f9c50.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3f9c56.  v4:= temp @kind object;
  #L3f9c58.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L3f9c5c.  call `clear`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3f9c62.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f9c68.  return v2;
  #L3f9c6a.  if v5 == 0 then goto L3f9c76;
  #L3f9c6e.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f9c74.  return v2;
  #L3f9c76.  v4:= 0I;
  #L3f9c78.  return v4;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9df0.  v0:= 0I;
  #L3f9df2.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v0 @kind object;
  #L3f9df6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f9dfa.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3f9e00.  return @kind void;
}
procedure `void` `consumedOne`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.consumedOne:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f9e14.  if v4 == 0 then goto L3f9e40;
  #L3f9e18.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int`;
  #L3f9e1c.  v4:= v4 + 1;
  #L3f9e20.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @type ^`int`;
  #L3f9e24.  if v4 != v0 then goto L3f9e3c;
  #L3f9e28.  v0:= 0I;
  #L3f9e2a.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int` := v0;
  #L3f9e2e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9e32.  v1:= (`long`) v4 @kind i2l;
  #L3f9e34.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f9e3a.  goto L3f9e40;
  #L3f9e3c.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int` := v4;
  #L3f9e40.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L3f9e54.  v1:= v18 @kind object;
  #L3f9e58.  call temp:= `getAndIncrement`(v18) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f9e5e.  v0:= temp;
  #L3f9e60.  if v0 == 0 then goto L3f9e66;
  #L3f9e64.  return @kind void;
  #L3f9e66.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f9e6a.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f9e6e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L3f9e72.  v4:= 0I;
  #L3f9e74.  v5:= 1I;
  #L3f9e76.  if v0 == v5 then goto L3f9e7e;
  #L3f9e7a.  v0:= 1I;
  #L3f9e7c.  goto L3f9e80;
  #L3f9e7e.  v0:= 0I;
  #L3f9e80.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L3f9e84.  v7:= 0I;
  #L3f9e86.  v8:= 1I;
  #L3f9e88.  if v6 != 0 then goto L3f9f54;
  #L3f9e8c.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f9e90.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f9e96.  v10:= temp @kind object;
  #L3f9e98.  if v10 != 0 then goto L3f9ea0;
  #L3f9e9c.  v11:= 1I;
  #L3f9e9e.  goto L3f9ea2;
  #L3f9ea0.  v11:= 0I;
  #L3f9ea2.  call temp:= `checkTerminated`(v1, v9, v11, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L3f9ea8.  v9:= temp;
  #L3f9eaa.  if v9 == 0 then goto L3f9eb0;
  #L3f9eae.  return @kind void;
  #L3f9eb0.  if v10 == 0 then goto L3f9f54;
  #L3f9eb4.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f9eb8.  call temp:= `apply`(v6, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f9ebe.  v6:= temp @kind object;
  #L3f9ec0.  v6:= (`java.lang.Iterable`) v6 @kind object;
  #L3f9ec4.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f9eca.  v6:= temp @kind object;
  #L3f9ecc.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f9ed2.  v9:= temp;
  #L3f9ed4.  if v9 != 0 then goto L3f9ee2;
  #L3f9ed8.  call `consumedOne`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.consumedOne:(Z)V` @kind virtual;
  #L3f9ede.  v6:= v7 @kind object;
  #L3f9ee0.  goto L3f9e88;
  #L3f9ee2.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v6 @kind object;
  #L3f9ee6.  goto L3f9f54;
  #L3f9ee8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f9eea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f9ef0.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9ef4.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f9efa.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f9efe.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3f9f04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f9f08.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3f9f0e.  v0:= temp @kind object;
  #L3f9f10.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f9f16.  return @kind void;
  #L3f9f18.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f9f1a.  v4:= v0 @kind object;
  #L3f9f1c.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f9f22.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9f26.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f9f2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f9f30.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3f9f36.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f9f3a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3f9f40.  v0:= temp @kind object;
  #L3f9f42.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L3f9f46.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3f9f4c.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f9f52.  return @kind void;
  #L3f9f54.  if v6 == 0 then goto L3fa09c;
  #L3f9f58.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f9f5c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f9f62.  v9:= temp @kind wide;
  #L3f9f64.  v11:= 0L;
  #L3f9f68.  v13:= v11 @kind wide;
  #L3f9f6a.  v15:= lcmp(v13, v9);
  #L3f9f6e.  if v15 == 0 then goto L3fa040;
  #L3f9f72.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f9f76.  call temp:= `checkTerminated`(v1, v15, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L3f9f7c.  v15:= temp;
  #L3f9f7e.  if v15 == 0 then goto L3f9f84;
  #L3f9f82.  return @kind void;
  #L3f9f84.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f9f8a.  v15:= temp @kind object;
  #L3f9f8c.  v5:= "The iterator returned a null value" @kind object;
  #L3f9f90.  call temp:= `requireNonNull`(v15, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f9f96.  v5:= temp @kind object;
  #L3f9f98.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f9f9e.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f9fa2.  call temp:= `checkTerminated`(v1, v5, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L3f9fa8.  v5:= temp;
  #L3f9faa.  if v5 == 0 then goto L3f9fb0;
  #L3f9fae.  return @kind void;
  #L3f9fb0.  v16:= 1L;
  #L3f9fb4.  v13:= v13 + v16 @kind long;
  #L3f9fb8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f9fbe.  v5:= temp;
  #L3f9fc0.  if v5 != 0 then goto L3f9fd2;
  #L3f9fc4.  call `consumedOne`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.consumedOne:(Z)V` @kind virtual;
  #L3f9fca.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L3f9fce.  v6:= v7 @kind object;
  #L3f9fd0.  goto L3fa040;
  #L3f9fd2.  v5:= 1I;
  #L3f9fd4.  goto L3f9f6a;
  #L3f9fd6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f9fd8.  v3:= v0 @kind object;
  #L3f9fda.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f9fe0.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L3f9fe4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9fe8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f9fee.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f9ff2.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3f9ff8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f9ffc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3fa002.  v0:= temp @kind object;
  #L3fa004.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fa00a.  return @kind void;
  #L3fa00c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fa00e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fa014.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L3fa018.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fa01c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fa022.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fa026.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3fa02c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fa030.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3fa036.  v0:= temp @kind object;
  #L3fa038.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fa03e.  return @kind void;
  #L3fa040.  v5:= lcmp(v13, v9);
  #L3fa044.  if v5 != 0 then goto L3fa070;
  #L3fa048.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fa04c.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L3fa052.  v15:= temp;
  #L3fa054.  if v15 == 0 then goto L3fa060;
  #L3fa058.  if v6 != 0 then goto L3fa060;
  #L3fa05c.  v15:= 1I;
  #L3fa05e.  goto L3fa062;
  #L3fa060.  v15:= 0I;
  #L3fa062.  call temp:= `checkTerminated`(v1, v5, v15, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L3fa068.  v5:= temp;
  #L3fa06a.  if v5 == 0 then goto L3fa070;
  #L3fa06e.  return @kind void;
  #L3fa070.  v5:= lcmp(v13, v11);
  #L3fa074.  if v5 == 0 then goto L3fa096;
  #L3fa078.  v11:= 9223372036854775807L;
  #L3fa082.  v5:= lcmp(v9, v11);
  #L3fa086.  if v5 == 0 then goto L3fa096;
  #L3fa08a.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fa08e.  v9:= -v13 @kind long;
  #L3fa090.  call temp:= `addAndGet`(v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L3fa096.  if v6 != 0 then goto L3fa09c;
  #L3fa09a.  goto L3fa0ac;
  #L3fa09c.  v5:= -v8 @kind int;
  #L3fa09e.  call temp:= `addAndGet`(v1, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.addAndGet:(I)I` @kind virtual;
  #L3fa0a4.  v8:= temp;
  #L3fa0a6.  if v8 != 0 then goto L3fa0ac;
  #L3fa0aa.  return @kind void;
  #L3fa0ac.  v5:= 1I;
  #L3fa0ae.  goto L3f9e88;
  catch `java.lang.Throwable` @[L3f9e90..L3f9e98] goto L3f9f18;
  catch `java.lang.Throwable` @[L3f9eb4..L3f9ed4] goto L3f9ee8;
  catch `java.lang.Throwable` @[L3f9f84..L3f9f98] goto L3fa00c;
  catch `java.lang.Throwable` @[L3f9fb8..L3f9fc0] goto L3f9fd6;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9c8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L3f9c90.  if v0 != 0 then goto L3f9ca8;
  #L3f9c94.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f9c98.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L3f9c9e.  v0:= temp;
  #L3f9ca0.  if v0 == 0 then goto L3f9ca8;
  #L3f9ca4.  v0:= 1I;
  #L3f9ca6.  goto L3f9caa;
  #L3f9ca8.  v0:= 0I;
  #L3f9caa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fa0f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fa0f4.  if v0 == 0 then goto L3fa0fa;
  #L3fa0f8.  return @kind void;
  #L3fa0fa.  v0:= 1I;
  #L3fa0fc.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3fa100.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L3fa106.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fa118.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fa11c.  if v0 != 0 then goto L3fa13e;
  #L3fa120.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fa124.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3fa12a.  v0:= temp;
  #L3fa12c.  if v0 == 0 then goto L3fa13e;
  #L3fa130.  v2:= 1I;
  #L3fa132.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3fa136.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L3fa13c.  goto L3fa144;
  #L3fa13e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3fa144.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fa158.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fa15c.  if v0 == 0 then goto L3fa162;
  #L3fa160.  return @kind void;
  #L3fa162.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L3fa166.  if v0 != 0 then goto L3fa190;
  #L3fa16a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3fa16e.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3fa174.  v2:= temp;
  #L3fa176.  if v2 != 0 then goto L3fa190;
  #L3fa17a.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3fa17e.  v0:= "Queue is full?!" @kind object;
  #L3fa182.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fa188.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fa18e.  return @kind void;
  #L3fa190.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L3fa196.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fa1a8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fa1ac.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3fa1b2.  v0:= temp;
  #L3fa1b4.  if v0 == 0 then goto L3fa240;
  #L3fa1b8.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L3fa1bc.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L3fa1c0.  if v0 == 0 then goto L3fa218;
  #L3fa1c4.  v0:= v4 @kind object;
  #L3fa1c6.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L3fa1ca.  v1:= 3I;
  #L3fa1cc.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L3fa1d2.  v1:= temp;
  #L3fa1d4.  v2:= 1I;
  #L3fa1d6.  if v1 != v2 then goto L3fa1f2;
  #L3fa1da.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int` := v1;
  #L3fa1de.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3fa1e2.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3fa1e6.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fa1ea.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fa1f0.  return @kind void;
  #L3fa1f2.  v2:= 2I;
  #L3fa1f4.  if v1 != v2 then goto L3fa218;
  #L3fa1f8.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int` := v1;
  #L3fa1fc.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3fa200.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fa204.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fa20a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L3fa20e.  v0:= (`long`) v0 @kind i2l;
  #L3fa210.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3fa216.  return @kind void;
  #L3fa218.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3fa21c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L3fa220.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3fa226.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3fa22a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fa22e.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fa234.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L3fa238.  v0:= (`long`) v0 @kind i2l;
  #L3fa23a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3fa240.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f9ce4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L3f9ce8.  v1:= 0I;
  #L3f9cea.  if v0 != 0 then goto L3f9d2c;
  #L3f9cee.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f9cf2.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f9cf8.  v0:= temp @kind object;
  #L3f9cfa.  if v0 != 0 then goto L3f9d00;
  #L3f9cfe.  return v1 @kind object;
  #L3f9d00.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f9d04.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f9d0a.  v0:= temp @kind object;
  #L3f9d0c.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L3f9d10.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f9d16.  v0:= temp @kind object;
  #L3f9d18.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f9d1e.  v2:= temp;
  #L3f9d20.  if v2 != 0 then goto L3f9d28;
  #L3f9d24.  v0:= v1 @kind object;
  #L3f9d26.  goto L3f9cea;
  #L3f9d28.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v0 @kind object;
  #L3f9d2c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f9d32.  v2:= temp @kind object;
  #L3f9d34.  v3:= "The iterator returned a null value" @kind object;
  #L3f9d38.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f9d3e.  v2:= temp @kind object;
  #L3f9d40.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f9d46.  v0:= temp;
  #L3f9d48.  if v0 != 0 then goto L3f9d50;
  #L3f9d4c.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L3f9d50.  return v2 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fa254.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3fa25a.  v0:= temp;
  #L3fa25c.  if v0 == 0 then goto L3fa270;
  #L3fa260.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fa264.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fa26a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L3fa270.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9cbc.  v0:= 1I;
  #L3f9cbe.  v2:= v2 ^& v0 @kind int;
  #L3f9cc0.  if v2 == 0 then goto L3f9cce;
  #L3f9cc4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L3f9cc8.  if v2 != v0 then goto L3f9cce;
  #L3f9ccc.  return v0;
  #L3f9cce.  v2:= 0I;
  #L3f9cd0.  return v2;
}
