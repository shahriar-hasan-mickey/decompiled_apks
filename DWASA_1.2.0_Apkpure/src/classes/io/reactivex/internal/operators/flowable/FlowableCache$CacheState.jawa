record `io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind class @AccessFlag FINAL extends `io.reactivex.internal.util.LinkedArrayList` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCache$CacheState.connection` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCache$CacheState.isConnected` @AccessFlag VOLATILE;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableCache$CacheState.source` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCache$CacheState.sourceDone` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f0e30.  v0:= 0I;
  #L3f0e32.  v1:= new `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[v0];
  #L3f0e36.  `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] := v1 @kind object;
  #L3f0e3a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[v0];
  #L3f0e3e.  `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] := v0 @kind object;
  #L3f0e42.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.<init>:(Lio/reactivex/Flowable;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f0e54.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/LinkedArrayList;.<init>:(I)V` @kind direct;
  #L3f0e5a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f0e5e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f0e64.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.connection` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3f0e68.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.source` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L3f0e6c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f0e70.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] @kind object;
  #L3f0e74.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f0e7a.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3f0e7e.  return @kind void;
}
procedure `boolean` `addChild`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.addChild:(Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f0ddc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0de0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f0de6.  v0:= temp @kind object;
  #L3f0de8.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[]) v0 @kind object;
  #L3f0dec.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] @kind object;
  #L3f0df0.  v2:= 0I;
  #L3f0df2.  if v0 != v1 then goto L3f0df8;
  #L3f0df6.  return v2;
  #L3f0df8.  v1:= length @variable v0;
  #L3f0dfa.  v3:= v1 + 1;
  #L3f0dfe.  v3:= new `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[v3];
  #L3f0e02.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f0e08.  v3[v1]:= v5 @kind object;
  #L3f0e0c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0e10.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f0e16.  v0:= temp;
  #L3f0e18.  if v0 == 0 then goto L3f0ddc;
  #L3f0e1c.  v5:= 1I;
  #L3f0e1e.  return v5;
}
procedure `void` `connect`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.connect:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0e90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f0e94.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f0e9a.  v0:= 1I;
  #L3f0e9c.  v1.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.isConnected` @type ^`boolean` := v0 @kind boolean;
  #L3f0ea0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f0eb4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L3f0eb8.  if v0 != 0 then goto L3f0f06;
  #L3f0ebc.  v0:= 1I;
  #L3f0ebe.  v4.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.sourceDone` @type ^`boolean` := v0 @kind boolean;
  #L3f0ec2.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L3f0ec8.  v0:= temp @kind object;
  #L3f0eca.  call `add`(v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L3f0ed0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.connection` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0ed4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f0eda.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0ede.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] @kind object;
  #L3f0ee2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f0ee8.  v0:= temp @kind object;
  #L3f0eea.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[]) v0 @kind object;
  #L3f0eee.  v1:= length @variable v0;
  #L3f0ef0.  v2:= 0I;
  #L3f0ef2.  if v2 >= v1 then goto L3f0f06;
  #L3f0ef6.  v3:= v0[v2] @kind object;
  #L3f0efa.  call `replay`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.replay:()V` @kind virtual;
  #L3f0f00.  v2:= v2 + 1;
  #L3f0f04.  goto L3f0ef2;
  #L3f0f06.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f0f18.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L3f0f1c.  if v0 != 0 then goto L3f0f6a;
  #L3f0f20.  v0:= 1I;
  #L3f0f22.  v3.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.sourceDone` @type ^`boolean` := v0 @kind boolean;
  #L3f0f26.  call temp:= `error`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L3f0f2c.  v4:= temp @kind object;
  #L3f0f2e.  call `add`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L3f0f34.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.connection` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0f38.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f0f3e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0f42.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] @kind object;
  #L3f0f46.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f0f4c.  v4:= temp @kind object;
  #L3f0f4e.  v4:= (`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[]) v4 @kind object;
  #L3f0f52.  v0:= length @variable v4;
  #L3f0f54.  v1:= 0I;
  #L3f0f56.  if v1 >= v0 then goto L3f0f70;
  #L3f0f5a.  v2:= v4[v1] @kind object;
  #L3f0f5e.  call `replay`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.replay:()V` @kind virtual;
  #L3f0f64.  v1:= v1 + 1;
  #L3f0f68.  goto L3f0f56;
  #L3f0f6a.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f0f70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f0f84.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.sourceDone` @type ^`boolean` @kind boolean;
  #L3f0f88.  if v0 != 0 then goto L3f0fc2;
  #L3f0f8c.  call temp:= `next`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3f0f92.  v4:= temp @kind object;
  #L3f0f94.  call `add`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L3f0f9a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0f9e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f0fa4.  v4:= temp @kind object;
  #L3f0fa6.  v4:= (`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[]) v4 @kind object;
  #L3f0faa.  v0:= length @variable v4;
  #L3f0fac.  v1:= 0I;
  #L3f0fae.  if v1 >= v0 then goto L3f0fc2;
  #L3f0fb2.  v2:= v4[v1] @kind object;
  #L3f0fb6.  call `replay`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.replay:()V` @kind virtual;
  #L3f0fbc.  v1:= v1 + 1;
  #L3f0fc0.  goto L3f0fae;
  #L3f0fc2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f0fd4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.connection` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0fd8.  v1:= 9223372036854775807L;
  #L3f0fe2.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L3f0fe8.  return @kind void;
}
procedure `void` `removeChild`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.removeChild:(Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f0ffc.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f1000.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f1006.  v0:= temp @kind object;
  #L3f1008.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[]) v0 @kind object;
  #L3f100c.  v1:= length @variable v0;
  #L3f100e.  if v1 != 0 then goto L3f1014;
  #L3f1012.  return @kind void;
  #L3f1014.  v2:= -1I;
  #L3f1016.  v3:= 0I;
  #L3f1018.  v4:= 0I;
  #L3f101a.  if v4 >= v1 then goto L3f1038;
  #L3f101e.  v5:= v0[v4] @kind object;
  #L3f1022.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f1028.  v5:= temp;
  #L3f102a.  if v5 == 0 then goto L3f1032;
  #L3f102e.  v2:= v4;
  #L3f1030.  goto L3f1038;
  #L3f1032.  v4:= v4 + 1;
  #L3f1036.  goto L3f101a;
  #L3f1038.  if v2 >= 0 then goto L3f103e;
  #L3f103c.  return @kind void;
  #L3f103e.  v4:= 1I;
  #L3f1040.  if v1 != v4 then goto L3f104a;
  #L3f1044.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheState.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[] @kind object;
  #L3f1048.  goto L3f1068;
  #L3f104a.  v5:= v1 + -1;
  #L3f104e.  v5:= new `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[v5];
  #L3f1052.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f1058.  v3:= v2 + 1;
  #L3f105c.  v1:= v1 - v2 @kind int;
  #L3f105e.  v1:= v1 - v4 @kind int;
  #L3f1060.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f1066.  v1:= v5 @kind object;
  #L3f1068.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f106c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f1072.  v0:= temp;
  #L3f1074.  if v0 == 0 then goto L3f0ffc;
  #L3f1078.  return @kind void;
}
