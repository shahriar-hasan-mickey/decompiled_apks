record `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.sampler` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L405de4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L405dea.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L405dee.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L405df4.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L405df8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L405dfc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L405e02.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L405e06.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L405e0a.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.sampler` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L405e0e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405e20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405e24.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L405e2a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L405e2e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L405e34.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405e48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L405e4c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L405e52.  call `completeOther`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.completeOther:()V` @kind virtual;
  #L405e58.  return @kind void;
}
procedure `void` `completeMain`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.completeMain:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `completeOther`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.completeOther:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L405e6c.  v0:= 0I;
  #L405e6e.  call temp:= `getAndSet`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L405e74.  v0:= temp @kind object;
  #L405e76.  if v0 == 0 then goto L405eca;
  #L405e7a.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L405e7e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L405e84.  v1:= temp @kind wide;
  #L405e86.  v3:= 0L;
  #L405e8a.  v5:= lcmp(v1, v3);
  #L405e8e.  if v5 == 0 then goto L405eac;
  #L405e92.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405e96.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L405e9c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L405ea0.  v1:= 1L;
  #L405ea4.  call temp:= `produced`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L405eaa.  goto L405eca;
  #L405eac.  call `cancel`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.cancel:()V` @kind virtual;
  #L405eb2.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405eb6.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L405eba.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L405ebe.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L405ec4.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L405eca.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405edc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L405ee0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L405ee6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405eea.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L405ef0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405f04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405f08.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L405f0e.  call `completeMain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.completeMain:()V` @kind virtual;
  #L405f14.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405f28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405f2c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L405f32.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405f36.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L405f3c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L405f50.  call `lazySet`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L405f56.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L405f68.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L405f6c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L405f72.  v0:= temp;
  #L405f74.  if v0 == 0 then goto L405fba;
  #L405f78.  v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L405f7c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405f80.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L405f86.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405f8a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L405f90.  v0:= temp @kind object;
  #L405f92.  if v0 != 0 then goto L405fba;
  #L405f96.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.sampler` @type ^`org.reactivestreams.Publisher` @kind object;
  #L405f9a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplerSubscriber`;
  #L405f9e.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;)V` @kind direct;
  #L405fa4.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L405faa.  v0:= 9223372036854775807L;
  #L405fb4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L405fba.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405fcc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L405fd2.  v0:= temp;
  #L405fd4.  if v0 == 0 then goto L405fe2;
  #L405fd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L405fdc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L405fe2.  return @kind void;
}
procedure `void` `run`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.run:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `setOther`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.setOther:(Lorg/reactivestreams/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L405ff4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405ff8.  v1:= 9223372036854775807L;
  #L406002.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L406008.  return @kind void;
}
