record `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L401824.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40182a.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40182e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L401840.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.get:()J` @kind virtual;
  #L401846.  v0:= temp @kind wide;
  #L401848.  v2:= -9223372036854775808L;
  #L40184c.  v4:= lcmp(v0, v2);
  #L401850.  if v4 == 0 then goto L401878;
  #L401854.  call temp:= `getAndSet`(v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.getAndSet:(J)J` @kind virtual;
  #L40185a.  v0:= temp @kind wide;
  #L40185c.  v4:= lcmp(v0, v2);
  #L401860.  if v4 == 0 then goto L401878;
  #L401864.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` @kind object;
  #L401868.  if v0 == 0 then goto L401878;
  #L40186c.  call `remove`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)V` @kind virtual;
  #L401872.  call `dispatch`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L401878.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40188c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L401892.  v0:= temp;
  #L401894.  if v0 == 0 then goto L4018ac;
  #L401898.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40189e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` @kind object;
  #L4018a2.  if v2 == 0 then goto L4018ac;
  #L4018a6.  call `dispatch`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L4018ac.  return @kind void;
}
