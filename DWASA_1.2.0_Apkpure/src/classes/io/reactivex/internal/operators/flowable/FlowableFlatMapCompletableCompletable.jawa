record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.delayErrors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.maxConcurrency` @AccessFlag FINAL;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f8a54.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L3f8a5a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.source` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L3f8a5e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f8a62.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L3f8a66.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.maxConcurrency` @type ^`int` := v4;
  #L3f8a6a.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8a20.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable`;
  #L3f8a24.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f8a28.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f8a2c.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.delayErrors` @type ^`boolean` @kind boolean;
  #L3f8a30.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.maxConcurrency` @type ^`int`;
  #L3f8a34.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3f8a3a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f8a40.  v0:= temp @kind object;
  #L3f8a42.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable` v5 @kind this, `io.reactivex.CompletableObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8a7c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f8a80.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber`;
  #L3f8a84.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f8a88.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.delayErrors` @type ^`boolean` @kind boolean;
  #L3f8a8c.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable.maxConcurrency` @type ^`int`;
  #L3f8a90.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3f8a96.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f8a9c.  return @kind void;
}
