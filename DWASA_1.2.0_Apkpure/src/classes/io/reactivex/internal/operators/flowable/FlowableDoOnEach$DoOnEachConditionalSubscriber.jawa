record `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onAfterTerminate` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onComplete` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onError` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onNext` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f655c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L3f6562.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L3f6566.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onError` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L3f656a.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onComplete` @type ^`io.reactivex.functions.Action` := v4 @kind object;
  #L3f656e.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L3f6572.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6584.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6588.  if v0 == 0 then goto L3f658e;
  #L3f658c.  return @kind void;
  #L3f658e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6592.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f6598.  v0:= 1I;
  #L3f659a.  v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f659e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f65a2.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L3f65a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f65ac.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f65b2.  goto L3f65c2;
  #L3f65b4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f65b6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f65bc.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f65c2.  return @kind void;
  #L3f65c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f65c6.  call `fail`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f65cc.  return @kind void;
  catch `java.lang.Throwable` @[L3f658e..L3f6598] goto L3f65c4;
  catch `java.lang.Throwable` @[L3f65a8..L3f65b2] goto L3f65b4;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f65f8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f65fc.  if v0 == 0 then goto L3f6608;
  #L3f6600.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6606.  return @kind void;
  #L3f6608.  v0:= 1I;
  #L3f660a.  v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f660e.  v1:= 0I;
  #L3f6610.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f6614.  call `accept`(v2, v7) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f661a.  goto L3f6648;
  #L3f661c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f661e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6624.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f6628.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L3f662c.  v5:= 2I;
  #L3f662e.  v5:= new `java.lang.Throwable`[v5];
  #L3f6632.  v5[v1]:= v7 @kind object;
  #L3f6636.  v5[v0]:= v2 @kind object;
  #L3f663a.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L3f6640.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f6646.  v0:= 0I;
  #L3f6648.  if v0 == 0 then goto L3f6656;
  #L3f664c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f6650.  call `onError`(v0, v7) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f6656.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f665a.  call `run`(v7) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f6660.  goto L3f6670;
  #L3f6662.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f6664.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f666a.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6670.  return @kind void;
  catch `java.lang.Throwable` @[L3f6610..L3f661a] goto L3f661c;
  catch `java.lang.Throwable` @[L3f6656..L3f6660] goto L3f6662;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f669c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f66a0.  if v0 == 0 then goto L3f66a6;
  #L3f66a4.  return @kind void;
  #L3f66a6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.sourceMode` @type ^`int`;
  #L3f66aa.  if v0 == 0 then goto L3f66bc;
  #L3f66ae.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f66b2.  v0:= 0I;
  #L3f66b4.  call `onNext`(v2, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f66ba.  return @kind void;
  #L3f66bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f66c0.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f66c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f66ca.  call `onNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f66d0.  return @kind void;
  #L3f66d2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f66d4.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f66da.  return @kind void;
  catch `java.lang.Throwable` @[L3f66bc..L3f66c6] goto L3f66d2;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f644c.  v0:= 0I;
  #L3f644e.  v1:= 2I;
  #L3f6450.  v2:= 1I;
  #L3f6452.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f6456.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f645c.  v3:= temp @kind object;
  #L3f645e.  if v3 == 0 then goto L3f64bc;
  #L3f6462.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f6466.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f646c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6470.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f6476.  goto L3f64d8;
  #L3f6478.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f647a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6480.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f6484.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f648a.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L3f6490.  v0:= temp @kind object;
  #L3f6492.  throw v0;
  #L3f6494.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f6496.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L3f649a.  v1:= new `java.lang.Throwable`[v1];
  #L3f649e.  v1[v0]:= v3 @kind object;
  #L3f64a2.  v1[v2]:= v4 @kind object;
  #L3f64a6.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L3f64ac.  throw v5;
  #L3f64ae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f64b0.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f64b4.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f64ba.  throw v0;
  #L3f64bc.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.sourceMode` @type ^`int`;
  #L3f64c0.  if v0 != v2 then goto L3f64d8;
  #L3f64c4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f64c8.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f64ce.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onAfterTerminate` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f64d2.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f64d8.  return v3 @kind object;
  #L3f64da.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f64dc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f64e2.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f64e6.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f64ec.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L3f64f2.  v0:= temp @kind object;
  #L3f64f4.  throw v0;
  #L3f64f6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f64f8.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L3f64fc.  v1:= new `java.lang.Throwable`[v1];
  #L3f6500.  v1[v0]:= v3 @kind object;
  #L3f6504.  v1[v2]:= v4 @kind object;
  #L3f6508.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L3f650e.  throw v5;
  catch `java.lang.Throwable` @[L3f6452..L3f645e] goto L3f64da;
  catch `java.lang.Throwable` @[L3f6462..L3f646c] goto L3f6478;
  catch `java.lang.Throwable` @[L3f647a..L3f6480] goto L3f64ae;
  catch `java.lang.Throwable` @[L3f6480..L3f648a] goto L3f6494;
  catch `java.lang.Throwable` @[L3f648a..L3f64ae] goto L3f64ae;
  catch `java.lang.Throwable` @[L3f64e2..L3f64ec] goto L3f64f6;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f6430.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f6436.  v1:= temp;
  #L3f6438.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f63e4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f63e8.  v1:= 0I;
  #L3f63ea.  if v0 == 0 then goto L3f63f0;
  #L3f63ee.  return v1;
  #L3f63f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f63f4.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f63fa.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f63fe.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3f6404.  v3:= temp;
  #L3f6406.  return v3;
  #L3f6408.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f640a.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$DoOnEachConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f6410.  return v1;
  catch `java.lang.Throwable` @[L3f63f0..L3f63fa] goto L3f6408;
}
