record `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.error` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.hasNext` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.isNextConsumed` @AccessFlag PRIVATE;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.items` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.next` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.started` @AccessFlag PRIVATE;
  `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.subscriber` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextIterator;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3ed8b0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ed8b6.  v0:= 1I;
  #L3ed8b8.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L3ed8bc.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.isNextConsumed` @type ^`boolean` := v0 @kind boolean;
  #L3ed8c0.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.items` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L3ed8c4.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.subscriber` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` := v3 @kind object;
  #L3ed8c8.  return @kind void;
}
procedure `boolean` `moveToNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextIterator;.moveToNext:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ed780.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.started` @type ^`boolean` @kind boolean;
  #L3ed784.  v1:= 1I;
  #L3ed786.  if v0 != 0 then goto L3ed7b6;
  #L3ed78a.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.started` @type ^`boolean` := v1 @kind boolean;
  #L3ed78e.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.subscriber` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` @kind object;
  #L3ed792.  call `setWaiting`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.setWaiting:()V` @kind virtual;
  #L3ed798.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.items` @type ^`org.reactivestreams.Publisher` @kind object;
  #L3ed79c.  call temp:= `fromPublisher`(v0) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3ed7a2.  v0:= temp @kind object;
  #L3ed7a4.  call temp:= `materialize`(v0) @signature `Lio/reactivex/Flowable;.materialize:()Lio/reactivex/Flowable;` @kind virtual;
  #L3ed7aa.  v0:= temp @kind object;
  #L3ed7ac.  v2:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.subscriber` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` @kind object;
  #L3ed7b0.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3ed7b6.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.subscriber` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` @kind object;
  #L3ed7ba.  call temp:= `takeNext`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.takeNext:()Lio/reactivex/Notification;` @kind virtual;
  #L3ed7c0.  v0:= temp @kind object;
  #L3ed7c2.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L3ed7c8.  v2:= temp;
  #L3ed7ca.  v3:= 0I;
  #L3ed7cc.  if v2 == 0 then goto L3ed7e2;
  #L3ed7d0.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.isNextConsumed` @type ^`boolean` := v3 @kind boolean;
  #L3ed7d4.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L3ed7da.  v0:= temp @kind object;
  #L3ed7dc.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.next` @type ^`java.lang.Object` := v0 @kind object;
  #L3ed7e0.  return v1;
  #L3ed7e2.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.hasNext` @type ^`boolean` := v3 @kind boolean;
  #L3ed7e6.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L3ed7ec.  v1:= temp;
  #L3ed7ee.  if v1 == 0 then goto L3ed7f4;
  #L3ed7f2.  return v3;
  #L3ed7f4.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L3ed7fa.  v1:= temp;
  #L3ed7fc.  if v1 == 0 then goto L3ed81a;
  #L3ed800.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L3ed806.  v0:= temp @kind object;
  #L3ed808.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.error` @type ^`java.lang.Throwable` := v0 @kind object;
  #L3ed80c.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L3ed810.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ed816.  v0:= temp @kind object;
  #L3ed818.  throw v0;
  #L3ed81a.  v0:= new `java.lang.IllegalStateException`;
  #L3ed81e.  v1:= "Should not reach here" @kind object;
  #L3ed822.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed828.  throw v0;
  #L3ed82a.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3ed82c.  v1:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.subscriber` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` @kind object;
  #L3ed830.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.dispose:()V` @kind virtual;
  #L3ed836.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.error` @type ^`java.lang.Throwable` := v0 @kind object;
  #L3ed83a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ed840.  v0:= temp @kind object;
  #L3ed842.  throw v0;
  catch `java.lang.InterruptedException` @[L3ed780..L3ed82a] goto L3ed82a;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed738.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L3ed73c.  if v0 != 0 then goto L3ed764;
  #L3ed740.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.hasNext` @type ^`boolean` @kind boolean;
  #L3ed744.  v1:= 0I;
  #L3ed746.  if v0 != 0 then goto L3ed74c;
  #L3ed74a.  return v1;
  #L3ed74c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.isNextConsumed` @type ^`boolean` @kind boolean;
  #L3ed750.  if v0 == 0 then goto L3ed760;
  #L3ed754.  call temp:= `moveToNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextIterator;.moveToNext:()Z` @kind direct;
  #L3ed75a.  v0:= temp;
  #L3ed75c.  if v0 == 0 then goto L3ed762;
  #L3ed760.  v1:= 1I;
  #L3ed762.  return v1;
  #L3ed764.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ed76a.  v0:= temp @kind object;
  #L3ed76c.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed864.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L3ed868.  if v0 != 0 then goto L3ed894;
  #L3ed86c.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextIterator;.hasNext:()Z` @kind virtual;
  #L3ed872.  v0:= temp;
  #L3ed874.  if v0 == 0 then goto L3ed884;
  #L3ed878.  v0:= 1I;
  #L3ed87a.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.isNextConsumed` @type ^`boolean` := v0 @kind boolean;
  #L3ed87e.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator.next` @type ^`java.lang.Object` @kind object;
  #L3ed882.  return v0 @kind object;
  #L3ed884.  v0:= new `java.util.NoSuchElementException`;
  #L3ed888.  v1:= "No more elements" @kind object;
  #L3ed88c.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed892.  throw v0;
  #L3ed894.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ed89a.  v0:= temp @kind object;
  #L3ed89c.  throw v0;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed8dc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3ed8e0.  v1:= "Read only iterator" @kind object;
  #L3ed8e4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed8ea.  throw v0;
}
