record `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.count` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.done` @AccessFlag ;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.index` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe$ElementAtSubscriber;.<init>:(Lio/reactivex/MaybeObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f6dc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f6dca.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L3f6dce.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.index` @type ^`long` := v2 @kind wide;
  #L3f6dd2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe$ElementAtSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6de4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6de8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f6dee.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f6df2.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f6df6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe$ElementAtSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6da0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6da4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f6da8.  if v0 != v1 then goto L3f6db0;
  #L3f6dac.  v0:= 1I;
  #L3f6dae.  goto L3f6db2;
  #L3f6db0.  v0:= 0I;
  #L3f6db2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe$ElementAtSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6e08.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f6e0c.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f6e10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6e14.  if v0 != 0 then goto L3f6e28;
  #L3f6e18.  v0:= 1I;
  #L3f6e1a.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f6e1e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L3f6e22.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L3f6e28.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe$ElementAtSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6e3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6e40.  if v0 == 0 then goto L3f6e4c;
  #L3f6e44.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6e4a.  return @kind void;
  #L3f6e4c.  v0:= 1I;
  #L3f6e4e.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f6e52.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f6e56.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f6e5a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L3f6e5e.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f6e64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe$ElementAtSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f6e78.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6e7c.  if v0 == 0 then goto L3f6e82;
  #L3f6e80.  return @kind void;
  #L3f6e82.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.count` @type ^`long` @kind wide;
  #L3f6e86.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.index` @type ^`long` @kind wide;
  #L3f6e8a.  v4:= lcmp(v0, v2);
  #L3f6e8e.  if v4 != 0 then goto L3f6eb6;
  #L3f6e92.  v0:= 1I;
  #L3f6e94.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f6e98.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6e9c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f6ea2.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f6ea6.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f6eaa.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L3f6eae.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3f6eb4.  return @kind void;
  #L3f6eb6.  v2:= 1L;
  #L3f6eba.  v0:= v0 + v2 @kind long;
  #L3f6ebc.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.count` @type ^`long` := v0 @kind wide;
  #L3f6ec0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe$ElementAtSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6ed4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6ed8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f6ede.  v0:= temp;
  #L3f6ee0.  if v0 == 0 then goto L3f6f02;
  #L3f6ee4.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f6ee8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L3f6eec.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3f6ef2.  v0:= 9223372036854775807L;
  #L3f6efc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f6f02.  return @kind void;
}
