record `io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeConditionalSubscription;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L402af8.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.<init>:(II)V` @kind direct;
  #L402afe.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L402b02.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeConditionalSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L402b14.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.end` @type ^`int`;
  #L402b18.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L402b1c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.index` @type ^`int`;
  #L402b20.  if v2 == v0 then goto L402b42;
  #L402b24.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402b28.  if v3 == 0 then goto L402b2e;
  #L402b2c.  return @kind void;
  #L402b2e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L402b34.  v3:= temp @kind object;
  #L402b36.  call temp:= `tryOnNext`(v1, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L402b3c.  v2:= v2 + 1;
  #L402b40.  goto L402b20;
  #L402b42.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402b46.  if v0 == 0 then goto L402b4c;
  #L402b4a.  return @kind void;
  #L402b4c.  call `onComplete`(v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L402b52.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeConditionalSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L402b64.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.end` @type ^`int`;
  #L402b68.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.index` @type ^`int`;
  #L402b6c.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L402b70.  v3:= 0L;
  #L402b74.  v5:= v10 @kind wide;
  #L402b76.  v10:= v3 @kind wide;
  #L402b78.  v7:= lcmp(v10, v5);
  #L402b7c.  if v7 == 0 then goto L402bae;
  #L402b80.  if v1 == v0 then goto L402bae;
  #L402b84.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402b88.  if v7 == 0 then goto L402b8e;
  #L402b8c.  return @kind void;
  #L402b8e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L402b94.  v7:= temp @kind object;
  #L402b96.  call temp:= `tryOnNext`(v2, v7) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L402b9c.  v7:= temp;
  #L402b9e.  if v7 == 0 then goto L402ba8;
  #L402ba2.  v7:= 1L;
  #L402ba6.  v10:= v10 + v7 @kind long;
  #L402ba8.  v1:= v1 + 1;
  #L402bac.  goto L402b78;
  #L402bae.  if v1 != v0 then goto L402bc2;
  #L402bb2.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402bb6.  if v10 != 0 then goto L402bc0;
  #L402bba.  call `onComplete`(v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L402bc0.  return @kind void;
  #L402bc2.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeConditionalSubscription;.get:()J` @kind virtual;
  #L402bc8.  v5:= temp @kind wide;
  #L402bca.  v7:= lcmp(v10, v5);
  #L402bce.  if v7 != 0 then goto L402b78;
  #L402bd2.  v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.index` @type ^`int` := v1;
  #L402bd6.  v10:= -v10 @kind long;
  #L402bd8.  call temp:= `addAndGet`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeConditionalSubscription;.addAndGet:(J)J` @kind virtual;
  #L402bde.  v5:= temp @kind wide;
  #L402be0.  v10:= lcmp(v5, v3);
  #L402be4.  if v10 != 0 then goto L402b76;
  #L402be8.  return @kind void;
}
