record `io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.predicate` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$TakeWhileSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L409ef0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L409ef6.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L409efa.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L409efe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$TakeWhileSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409f10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409f14.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409f1a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$TakeWhileSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409f2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L409f30.  if v0 == 0 then goto L409f36;
  #L409f34.  return @kind void;
  #L409f36.  v0:= 1I;
  #L409f38.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L409f3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409f40.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L409f46.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$TakeWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409f58.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L409f5c.  if v0 == 0 then goto L409f68;
  #L409f60.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L409f66.  return @kind void;
  #L409f68.  v0:= 1I;
  #L409f6a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L409f6e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409f72.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L409f78.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$TakeWhileSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409f8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L409f90.  if v0 == 0 then goto L409f96;
  #L409f94.  return @kind void;
  #L409f96.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L409f9a.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L409fa0.  v0:= temp;
  #L409fa2.  if v0 != 0 then goto L409fc2;
  #L409fa6.  v2:= 1I;
  #L409fa8.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L409fac.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409fb0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409fb6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409fba.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L409fc0.  return @kind void;
  #L409fc2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409fc6.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L409fcc.  return @kind void;
  #L409fce.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L409fd0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L409fd6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409fda.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409fe0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$TakeWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L409fe6.  return @kind void;
  catch `java.lang.Throwable` @[L409f96..L409fa2] goto L409fce;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$TakeWhileSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a004.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a008.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40a00e.  v0:= temp;
  #L40a010.  if v0 == 0 then goto L40a022;
  #L40a014.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40a018.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a01c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40a022.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$TakeWhileSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a034.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a038.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40a03e.  return @kind void;
}
