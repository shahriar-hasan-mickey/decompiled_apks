record `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.allowFatal` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.nextSupplier` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.produced` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L401488.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L40148e.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L401492.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.nextSupplier` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L401496.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.allowFatal` @type ^`boolean` := v3 @kind boolean;
  #L40149a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4014ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L4014b0.  if v0 == 0 then goto L4014b6;
  #L4014b4.  return @kind void;
  #L4014b6.  v0:= 1I;
  #L4014b8.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4014bc.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @type ^`boolean` := v0 @kind boolean;
  #L4014c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4014c4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4014ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4014dc.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @type ^`boolean` @kind boolean;
  #L4014e0.  if v0 == 0 then goto L401500;
  #L4014e4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L4014e8.  if v0 == 0 then goto L4014f4;
  #L4014ec.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4014f2.  return @kind void;
  #L4014f4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4014f8.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4014fe.  return @kind void;
  #L401500.  v0:= 1I;
  #L401502.  v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @type ^`boolean` := v0 @kind boolean;
  #L401506.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.allowFatal` @type ^`boolean` @kind boolean;
  #L40150a.  if v1 == 0 then goto L401522;
  #L40150e.  v1:= instanceof @variable v7 @type ^`java.lang.Exception` @kind boolean;
  #L401512.  if v1 != 0 then goto L401522;
  #L401516.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40151a.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L401520.  return @kind void;
  #L401522.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.nextSupplier` @type ^`io.reactivex.functions.Function` @kind object;
  #L401526.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40152c.  v1:= temp @kind object;
  #L40152e.  v2:= "The nextSupplier returned a null Publisher" @kind object;
  #L401532.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L401538.  v1:= temp @kind object;
  #L40153a.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L40153e.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.produced` @type ^`long` @kind wide;
  #L401542.  v4:= 0L;
  #L401546.  v7:= lcmp(v2, v4);
  #L40154a.  if v7 == 0 then goto L401554;
  #L40154e.  call `produced`(v6, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.produced:(J)V` @kind virtual;
  #L401554.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40155a.  return @kind void;
  #L40155c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40155e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L401564.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L401568.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L40156c.  v4:= 2I;
  #L40156e.  v4:= new `java.lang.Throwable`[v4];
  #L401572.  v5:= 0I;
  #L401574.  v4[v5]:= v7 @kind object;
  #L401578.  v4[v0]:= v1 @kind object;
  #L40157c.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L401582.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L401588.  return @kind void;
  catch `java.lang.Throwable` @[L401522..L40153e] goto L40155c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4015a8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L4015ac.  if v0 == 0 then goto L4015b2;
  #L4015b0.  return @kind void;
  #L4015b2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @type ^`boolean` @kind boolean;
  #L4015b6.  if v0 != 0 then goto L4015c8;
  #L4015ba.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.produced` @type ^`long` @kind wide;
  #L4015be.  v2:= 1L;
  #L4015c2.  v0:= v0 + v2 @kind long;
  #L4015c4.  v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L4015c8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4015cc.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4015d2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L4015e4.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4015ea.  return @kind void;
}
