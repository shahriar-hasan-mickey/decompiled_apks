record `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.index` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.missedRequested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.parent` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` v2 @kind object, `int` v3 , `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;ILorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3edff0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3edff6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3edffa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3ee000.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L3ee004.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` := v2 @kind object;
  #L3ee008.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.index` @type ^`int` := v3;
  #L3ee00c.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L3ee010.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L3ee024.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ee02a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee03c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` @kind boolean;
  #L3ee040.  if v0 == 0 then goto L3ee050;
  #L3ee044.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee048.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ee04e.  goto L3ee088;
  #L3ee050.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` @kind object;
  #L3ee054.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.index` @type ^`int`;
  #L3ee058.  call temp:= `win`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.win:(I)Z` @kind virtual;
  #L3ee05e.  v0:= temp;
  #L3ee060.  if v0 == 0 then goto L3ee076;
  #L3ee064.  v0:= 1I;
  #L3ee066.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` := v0 @kind boolean;
  #L3ee06a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee06e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ee074.  goto L3ee088;
  #L3ee076.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ee07c.  v0:= temp @kind object;
  #L3ee07e.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L3ee082.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee088.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee09c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` @kind boolean;
  #L3ee0a0.  if v0 == 0 then goto L3ee0b0;
  #L3ee0a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee0a8.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ee0ae.  goto L3ee0ee;
  #L3ee0b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` @kind object;
  #L3ee0b4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.index` @type ^`int`;
  #L3ee0b8.  call temp:= `win`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.win:(I)Z` @kind virtual;
  #L3ee0be.  v0:= temp;
  #L3ee0c0.  if v0 == 0 then goto L3ee0d6;
  #L3ee0c4.  v0:= 1I;
  #L3ee0c6.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` := v0 @kind boolean;
  #L3ee0ca.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee0ce.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ee0d4.  goto L3ee0ee;
  #L3ee0d6.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ee0dc.  v0:= temp @kind object;
  #L3ee0de.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L3ee0e2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee0e8.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ee0ee.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee100.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` @kind boolean;
  #L3ee104.  if v0 == 0 then goto L3ee114;
  #L3ee108.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee10c.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ee112.  goto L3ee14c;
  #L3ee114.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` @kind object;
  #L3ee118.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.index` @type ^`int`;
  #L3ee11c.  call temp:= `win`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.win:(I)Z` @kind virtual;
  #L3ee122.  v0:= temp;
  #L3ee124.  if v0 == 0 then goto L3ee13a;
  #L3ee128.  v0:= 1I;
  #L3ee12a.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` := v0 @kind boolean;
  #L3ee12e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee132.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ee138.  goto L3ee14c;
  #L3ee13a.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ee140.  v3:= temp @kind object;
  #L3ee142.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L3ee146.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee14c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee160.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ee164.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3ee16a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee17c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ee180.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L3ee186.  return @kind void;
}
