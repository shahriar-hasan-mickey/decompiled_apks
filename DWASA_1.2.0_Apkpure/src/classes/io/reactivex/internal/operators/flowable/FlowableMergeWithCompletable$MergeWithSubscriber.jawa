record `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainDone` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherDone` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherObserver` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.requested` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fecc4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3fecca.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3fecce.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3fecd2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3fecd8.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3fecdc.  v1:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver`;
  #L3fece0.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;)V` @kind direct;
  #L3fece6.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver` := v1 @kind object;
  #L3fecea.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3fecee.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3fecf4.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L3fecf8.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3fecfc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3fed02.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3fed06.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fed18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fed1c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fed22.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver` @kind object;
  #L3fed26.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fed2c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fed40.  v0:= 1I;
  #L3fed42.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L3fed46.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherDone` @type ^`boolean` @kind boolean;
  #L3fed4a.  if v0 == 0 then goto L3fed5c;
  #L3fed4e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fed52.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3fed56.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L3fed5c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fed70.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fed74.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fed7a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fed7e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3fed82.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L3fed88.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fed9c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3feda0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3feda4.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L3fedaa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fedbc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fedc0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fedc4.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3fedca.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3feddc.  v0:= 1I;
  #L3fedde.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherDone` @type ^`boolean` := v0 @kind boolean;
  #L3fede2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainDone` @type ^`boolean` @kind boolean;
  #L3fede6.  if v0 == 0 then goto L3fedf8;
  #L3fedea.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fedee.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3fedf2.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L3fedf8.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fee0c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fee10.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fee16.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fee1a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3fee1e.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L3fee24.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fee38.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fee3c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fee40.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L3fee46.  return @kind void;
}
