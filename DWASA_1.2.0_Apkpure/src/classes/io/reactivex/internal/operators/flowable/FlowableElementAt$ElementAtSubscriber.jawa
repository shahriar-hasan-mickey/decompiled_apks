record `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.count` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.defaultValue` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.errorOnFewer` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.index` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f6c3c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f6c42.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.index` @type ^`long` := v2 @kind wide;
  #L3f6c46.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.defaultValue` @type ^`java.lang.Object` := v4 @kind object;
  #L3f6c4a.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.errorOnFewer` @type ^`boolean` := v5 @kind boolean;
  #L3f6c4e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6c60.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L3f6c66.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6c6a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f6c70.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6c84.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6c88.  if v0 != 0 then goto L3f6cca;
  #L3f6c8c.  v0:= 1I;
  #L3f6c8e.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f6c92.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.defaultValue` @type ^`java.lang.Object` @kind object;
  #L3f6c96.  if v0 != 0 then goto L3f6cc4;
  #L3f6c9a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.errorOnFewer` @type ^`boolean` @kind boolean;
  #L3f6c9e.  if v0 == 0 then goto L3f6cb8;
  #L3f6ca2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f6ca6.  v1:= new `java.util.NoSuchElementException`;
  #L3f6caa.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3f6cb0.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f6cb6.  goto L3f6cca;
  #L3f6cb8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f6cbc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f6cc2.  goto L3f6cca;
  #L3f6cc4.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3f6cca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6cdc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6ce0.  if v0 == 0 then goto L3f6cec;
  #L3f6ce4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6cea.  return @kind void;
  #L3f6cec.  v0:= 1I;
  #L3f6cee.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f6cf2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f6cf6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f6cfc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f6d10.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f6d14.  if v0 == 0 then goto L3f6d1a;
  #L3f6d18.  return @kind void;
  #L3f6d1a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.count` @type ^`long` @kind wide;
  #L3f6d1e.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.index` @type ^`long` @kind wide;
  #L3f6d22.  v4:= lcmp(v0, v2);
  #L3f6d26.  if v4 != 0 then goto L3f6d42;
  #L3f6d2a.  v0:= 1I;
  #L3f6d2c.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f6d30.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6d34.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f6d3a.  call `complete`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3f6d40.  return @kind void;
  #L3f6d42.  v2:= 1L;
  #L3f6d46.  v0:= v0 + v2 @kind long;
  #L3f6d48.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.count` @type ^`long` := v0 @kind wide;
  #L3f6d4c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6d60.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6d64.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f6d6a.  v0:= temp;
  #L3f6d6c.  if v0 == 0 then goto L3f6d8e;
  #L3f6d70.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f6d74.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f6d78.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f6d7e.  v0:= 9223372036854775807L;
  #L3f6d88.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f6d8e.  return @kind void;
}
