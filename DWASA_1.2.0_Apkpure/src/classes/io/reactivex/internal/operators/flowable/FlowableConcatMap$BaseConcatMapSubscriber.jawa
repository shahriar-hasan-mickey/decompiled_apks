record `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v0 @kind this, `io.reactivex.functions.Function` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.<init>:(Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f22c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f22ca.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L3f22ce.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int` := v2;
  #L3f22d2.  v1:= v2 ^> 2;
  #L3f22d6.  v2:= v2 - v1 @kind int;
  #L3f22d8.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.limit` @type ^`int` := v2;
  #L3f22dc.  v1:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner`;
  #L3f22e0.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapSupport;)V` @kind direct;
  #L3f22e6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` := v1 @kind object;
  #L3f22ea.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3f22ee.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3f22f4.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L3f22f8.  return @kind void;
}
procedure `void` `drain`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.innerComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f230c.  v0:= 0I;
  #L3f230e.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` := v0 @kind boolean;
  #L3f2312.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @kind virtual;
  #L3f2318.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f232c.  v0:= 1I;
  #L3f232e.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f2332.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @kind virtual;
  #L3f2338.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f234c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int`;
  #L3f2350.  v1:= 2I;
  #L3f2352.  if v0 == v1 then goto L3f2386;
  #L3f2356.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f235a.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f2360.  v3:= temp;
  #L3f2362.  if v3 != 0 then goto L3f2386;
  #L3f2366.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f236a.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f2370.  v3:= new `java.lang.IllegalStateException`;
  #L3f2374.  v0:= "Queue full?!" @kind object;
  #L3f2378.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f237e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f2384.  return @kind void;
  #L3f2386.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @kind virtual;
  #L3f238c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f23a0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f23a4.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f23aa.  v0:= temp;
  #L3f23ac.  if v0 == 0 then goto L3f2432;
  #L3f23b0.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L3f23b4.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L3f23b8.  if v0 == 0 then goto L3f240e;
  #L3f23bc.  v0:= v4 @kind object;
  #L3f23be.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L3f23c2.  v1:= 7I;
  #L3f23c4.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L3f23ca.  v1:= temp;
  #L3f23cc.  v2:= 1I;
  #L3f23ce.  if v1 != v2 then goto L3f23ec;
  #L3f23d2.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int` := v1;
  #L3f23d6.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3f23da.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3f23de.  call `subscribeActual`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.subscribeActual:()V` @kind virtual;
  #L3f23e4.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @kind virtual;
  #L3f23ea.  return @kind void;
  #L3f23ec.  v2:= 2I;
  #L3f23ee.  if v1 != v2 then goto L3f240e;
  #L3f23f2.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int` := v1;
  #L3f23f6.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3f23fa.  call `subscribeActual`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.subscribeActual:()V` @kind virtual;
  #L3f2400.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L3f2404.  v0:= (`long`) v0 @kind i2l;
  #L3f2406.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f240c.  return @kind void;
  #L3f240e.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3f2412.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L3f2416.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3f241c.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3f2420.  call `subscribeActual`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.subscribeActual:()V` @kind virtual;
  #L3f2426.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L3f242a.  v0:= (`long`) v0 @kind i2l;
  #L3f242c.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f2432.  return @kind void;
}
procedure `void` `subscribeActual`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.subscribeActual:()V` @AccessFlag ABSTRACT {

  # return;
}
