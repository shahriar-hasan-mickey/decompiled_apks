record `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.period` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.scheduler` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.timer` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L406210.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L406216.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40621a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L406220.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L406224.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L406228.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L40622e.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v0 @kind object;
  #L406232.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L406236.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.period` @type ^`long` := v3 @kind wide;
  #L40623a.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L40623e.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L406242.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406254.  call `cancelTimer`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancelTimer:()V` @kind virtual;
  #L40625a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40625e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L406264.  return @kind void;
}
procedure `void` `cancelTimer`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancelTimer:()V` @AccessFlag  {
    temp;
    v0;

  #L406278.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40627c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L406282.  return @kind void;
}
procedure `void` `complete`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.complete:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L406294.  v0:= 0I;
  #L406296.  call temp:= `getAndSet`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40629c.  v0:= temp @kind object;
  #L40629e.  if v0 == 0 then goto L4062f2;
  #L4062a2.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4062a6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4062ac.  v1:= temp @kind wide;
  #L4062ae.  v3:= 0L;
  #L4062b2.  v5:= lcmp(v1, v3);
  #L4062b6.  if v5 == 0 then goto L4062d4;
  #L4062ba.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4062be.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4062c4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4062c8.  v1:= 1L;
  #L4062cc.  call temp:= `produced`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4062d2.  goto L4062f2;
  #L4062d4.  call `cancel`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancel:()V` @kind virtual;
  #L4062da.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4062de.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4062e2.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L4062e6.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4062ec.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4062f2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L406304.  call `cancelTimer`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancelTimer:()V` @kind virtual;
  #L40630a.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.complete:()V` @kind virtual;
  #L406310.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406324.  call `cancelTimer`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancelTimer:()V` @kind virtual;
  #L40632a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40632e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L406334.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L406348.  call `lazySet`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40634e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L406360.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L406364.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40636a.  v0:= temp;
  #L40636c.  if v0 == 0 then goto L4063b0;
  #L406370.  v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L406374.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406378.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40637e.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L406382.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L406386.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.period` @type ^`long` @kind wide;
  #L40638a.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40638e.  v2:= v8 @kind object;
  #L406390.  v3:= v5 @kind wide;
  #L406392.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L406398.  v1:= temp @kind object;
  #L40639a.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4063a0.  v0:= 9223372036854775807L;
  #L4063aa.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4063b0.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4063c4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4063ca.  v0:= temp;
  #L4063cc.  if v0 == 0 then goto L4063da;
  #L4063d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4063d4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4063da.  return @kind void;
}
