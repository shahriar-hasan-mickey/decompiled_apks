record `io.reactivex.internal.operators.flowable.FlowableCountSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableCountSingle.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCountSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle;.<init>:(Lio/reactivex/Flowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f3a74.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L3f3a7a.  v0.`io.reactivex.internal.operators.flowable.FlowableCountSingle.source` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L3f3a7e.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableCountSingle` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3a4c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCount`;
  #L3f3a50.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f3a54.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f3a5a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3a60.  v0:= temp @kind object;
  #L3f3a62.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableCountSingle` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3f3a90.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f3a94.  v1:= new `io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber`;
  #L3f3a98.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$CountSubscriber;.<init>:(Lio/reactivex/SingleObserver;)V` @kind direct;
  #L3f3a9e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f3aa4.  return @kind void;
}
