record `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.CANCELLED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v1 @kind object, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L404898.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40489e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` := v1 @kind object;
  #L4048a2.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4048a6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4048aa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4048b0.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4048b4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4048c8.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.dispose:()V` @kind virtual;
  #L4048ce.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4048e0.  v0:= -9223372036854775808L;
  #L4048e4.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.getAndSet:(J)J` @kind virtual;
  #L4048ea.  v2:= temp @kind wide;
  #L4048ec.  v4:= lcmp(v2, v0);
  #L4048f0.  if v4 == 0 then goto L404908;
  #L4048f4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind object;
  #L4048f8.  call `remove`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind virtual;
  #L4048fe.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind object;
  #L404902.  call `manageRequests`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @kind virtual;
  #L404908.  return @kind void;
}
procedure `java.lang.Object` `index`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.index:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L404864.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` @kind object;
  #L404868.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L404838.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.get:()J` @kind virtual;
  #L40483e.  v0:= temp @kind wide;
  #L404840.  v2:= -9223372036854775808L;
  #L404844.  v4:= lcmp(v0, v2);
  #L404848.  if v4 != 0 then goto L404850;
  #L40484c.  v0:= 1I;
  #L40484e.  goto L404852;
  #L404850.  v0:= 0I;
  #L404852.  return v0;
}
procedure `long` `produced`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.produced:(J)J` @AccessFlag PUBLIC {
    temp;

  #L40487c.  call temp:= `producedCancel`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L404882.  v1:= temp @kind wide;
  #L404884.  return v1 @kind wide;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40491c.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L404922.  v0:= temp;
  #L404924.  if v0 == 0 then goto L40495e;
  #L404928.  call temp:= `addCancel`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40492e.  v0:= temp @kind wide;
  #L404930.  v2:= -9223372036854775808L;
  #L404934.  v4:= lcmp(v0, v2);
  #L404938.  if v4 == 0 then goto L40495e;
  #L40493c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L404940.  call temp:= `add`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L404946.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind object;
  #L40494a.  call `manageRequests`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @kind virtual;
  #L404950.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind object;
  #L404954.  v6:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404958.  call `replay`(v6, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L40495e.  return @kind void;
}
