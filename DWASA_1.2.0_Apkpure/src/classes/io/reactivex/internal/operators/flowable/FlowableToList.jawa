record `io.reactivex.internal.operators.flowable.FlowableToList` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableToList.collectionSupplier` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableToList` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40ba80.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40ba86.  v0.`io.reactivex.internal.operators.flowable.FlowableToList.collectionSupplier` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L40ba8a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableToList` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L40ba9c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableToList.collectionSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L40baa0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40baa6.  v0:= temp @kind object;
  #L40baa8.  v1:= "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L40baac.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40bab2.  v0:= temp @kind object;
  #L40bab4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40bab8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableToList.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40babc.  v2:= new `io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber`;
  #L40bac0.  call `<init>`(v2, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList$ToListSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)V` @kind direct;
  #L40bac6.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40bacc.  return @kind void;
  #L40bace.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bad0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bad6.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40badc.  return @kind void;
  catch `java.lang.Throwable` @[L40ba9c..L40bab8] goto L40bace;
}
