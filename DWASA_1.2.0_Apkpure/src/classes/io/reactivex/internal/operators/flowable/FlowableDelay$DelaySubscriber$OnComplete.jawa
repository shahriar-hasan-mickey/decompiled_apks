record `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber$OnComplete;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f4fa0.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` := v1 @kind object;
  #L3f4fa4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f4faa.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber$OnComplete;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4fbc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` @kind object;
  #L3f4fc0.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4fc4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f4fca.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` @kind object;
  #L3f4fce.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f4fd2.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f4fd8.  return @kind void;
  #L3f4fda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f4fdc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` @kind object;
  #L3f4fe0.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f4fe4.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f4fea.  throw v0;
  catch `java.lang.Throwable` @[L3f4fbc..L3f4fca] goto L3f4fda;
}
