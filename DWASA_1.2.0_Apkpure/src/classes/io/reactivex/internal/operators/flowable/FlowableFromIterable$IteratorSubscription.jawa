record `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fabac.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L3fabb2.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3fabb6.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fabc8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L3fabcc.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fabd0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fabd4.  if v2 == 0 then goto L3fabda;
  #L3fabd8.  return @kind void;
  #L3fabda.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3fabe0.  v2:= temp @kind object;
  #L3fabe2.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fabe6.  if v3 == 0 then goto L3fabec;
  #L3fabea.  return @kind void;
  #L3fabec.  if v2 != 0 then goto L3fac06;
  #L3fabf0.  v0:= new `java.lang.NullPointerException`;
  #L3fabf4.  v2:= "Iterator.next() returned a null value" @kind object;
  #L3fabf8.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fabfe.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fac04.  return @kind void;
  #L3fac06.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fac0c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fac10.  if v2 == 0 then goto L3fac16;
  #L3fac14.  return @kind void;
  #L3fac16.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fac1c.  v2:= temp;
  #L3fac1e.  if v2 != 0 then goto L3fabd0;
  #L3fac22.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fac26.  if v0 != 0 then goto L3fac30;
  #L3fac2a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fac30.  return @kind void;
  #L3fac32.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fac34.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fac3a.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fac40.  return @kind void;
  #L3fac42.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fac44.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fac4a.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fac50.  return @kind void;
  catch `java.lang.Throwable` @[L3fabda..L3fabe2] goto L3fac42;
  catch `java.lang.Throwable` @[L3fac16..L3fac1e] goto L3fac32;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3fac7c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L3fac80.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fac84.  v2:= 0L;
  #L3fac88.  v4:= v9 @kind wide;
  #L3fac8a.  v9:= v2 @kind wide;
  #L3fac8c.  v6:= lcmp(v9, v4);
  #L3fac90.  if v6 == 0 then goto L3fad1e;
  #L3fac94.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fac98.  if v6 == 0 then goto L3fac9e;
  #L3fac9c.  return @kind void;
  #L3fac9e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3faca4.  v6:= temp @kind object;
  #L3faca6.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3facaa.  if v7 == 0 then goto L3facb0;
  #L3facae.  return @kind void;
  #L3facb0.  if v6 != 0 then goto L3facca;
  #L3facb4.  v9:= new `java.lang.NullPointerException`;
  #L3facb8.  v10:= "Iterator.next() returned a null value" @kind object;
  #L3facbc.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3facc2.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3facc8.  return @kind void;
  #L3facca.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3facd0.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3facd4.  if v6 == 0 then goto L3facda;
  #L3facd8.  return @kind void;
  #L3facda.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3face0.  v6:= temp;
  #L3face2.  if v6 != 0 then goto L3facf6;
  #L3face6.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3facea.  if v9 != 0 then goto L3facf4;
  #L3facee.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3facf4.  return @kind void;
  #L3facf6.  v6:= 1L;
  #L3facfa.  v9:= v9 + v6 @kind long;
  #L3facfc.  goto L3fac8c;
  #L3facfe.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fad00.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fad06.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fad0c.  return @kind void;
  #L3fad0e.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fad10.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fad16.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fad1c.  return @kind void;
  #L3fad1e.  call temp:= `get`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.get:()J` @kind virtual;
  #L3fad24.  v4:= temp @kind wide;
  #L3fad26.  v6:= lcmp(v9, v4);
  #L3fad2a.  if v6 != 0 then goto L3fac8c;
  #L3fad2e.  v9:= -v9 @kind long;
  #L3fad30.  call temp:= `addAndGet`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.addAndGet:(J)J` @kind virtual;
  #L3fad36.  v4:= temp @kind wide;
  #L3fad38.  v9:= lcmp(v4, v2);
  #L3fad3c.  if v9 != 0 then goto L3fac8a;
  #L3fad40.  return @kind void;
  catch `java.lang.Throwable` @[L3fac9e..L3faca6] goto L3fad0e;
  catch `java.lang.Throwable` @[L3facda..L3face2] goto L3facfe;
}
