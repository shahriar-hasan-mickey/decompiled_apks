record `io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeSubscription;.<init>:(Lorg/reactivestreams/Subscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L402f48.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.<init>:(JJ)V` @kind direct;
  #L402f4e.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L402f52.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L402f64.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.end` @type ^`long` @kind wide;
  #L402f68.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402f6c.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.index` @type ^`long` @kind wide;
  #L402f70.  v5:= lcmp(v3, v0);
  #L402f74.  if v5 == 0 then goto L402f98;
  #L402f78.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402f7c.  if v5 == 0 then goto L402f82;
  #L402f80.  return @kind void;
  #L402f82.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L402f88.  v5:= temp @kind object;
  #L402f8a.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L402f90.  v5:= 1L;
  #L402f94.  v3:= v3 + v5 @kind long;
  #L402f96.  goto L402f70;
  #L402f98.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402f9c.  if v0 == 0 then goto L402fa2;
  #L402fa0.  return @kind void;
  #L402fa2.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L402fa8.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription` v11 @kind this, `long` v12 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L402fbc.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.end` @type ^`long` @kind wide;
  #L402fc0.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.index` @type ^`long` @kind wide;
  #L402fc4.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402fc8.  v5:= 0L;
  #L402fcc.  v7:= v2 @kind wide;
  #L402fce.  v2:= v12 @kind wide;
  #L402fd0.  v12:= v5 @kind wide;
  #L402fd2.  v9:= lcmp(v12, v2);
  #L402fd6.  if v9 == 0 then goto L403004;
  #L402fda.  v9:= lcmp(v7, v0);
  #L402fde.  if v9 == 0 then goto L403004;
  #L402fe2.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402fe6.  if v9 == 0 then goto L402fec;
  #L402fea.  return @kind void;
  #L402fec.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L402ff2.  v9:= temp @kind object;
  #L402ff4.  call `onNext`(v4, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L402ffa.  v9:= 1L;
  #L402ffe.  v12:= v12 + v9 @kind long;
  #L403000.  v7:= v7 + v9 @kind long;
  #L403002.  goto L402fd2;
  #L403004.  v2:= lcmp(v7, v0);
  #L403008.  if v2 != 0 then goto L40301c;
  #L40300c.  v12:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L403010.  if v12 != 0 then goto L40301a;
  #L403014.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40301a.  return @kind void;
  #L40301c.  call temp:= `get`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeSubscription;.get:()J` @kind virtual;
  #L403022.  v2:= temp @kind wide;
  #L403024.  v9:= lcmp(v12, v2);
  #L403028.  if v9 != 0 then goto L402fd2;
  #L40302c.  v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.index` @type ^`long` := v7 @kind wide;
  #L403030.  v12:= -v12 @kind long;
  #L403032.  call temp:= `addAndGet`(v11, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeSubscription;.addAndGet:(J)J` @kind virtual;
  #L403038.  v2:= temp @kind wide;
  #L40303a.  v12:= lcmp(v2, v5);
  #L40303e.  if v12 != 0 then goto L402fd0;
  #L403042.  return @kind void;
}
