record `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `java.util.Iterator` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.batchSize` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.condition` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.error` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.limit` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.produced` @AccessFlag ;
  `io.reactivex.internal.queue.SpscArrayQueue` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ed100.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ed106.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3ed10a.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3ed110.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` := v0 @kind object;
  #L3ed114.  v0:= (`long`) v3 @kind i2l;
  #L3ed116.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.batchSize` @type ^`long` := v0 @kind wide;
  #L3ed11a.  v0:= v3 ^> 2;
  #L3ed11e.  v3:= v3 - v0 @kind int;
  #L3ed120.  v0:= (`long`) v3 @kind i2l;
  #L3ed122.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.limit` @type ^`long` := v0 @kind wide;
  #L3ed126.  v3:= new `java.util.concurrent.locks.ReentrantLock`;
  #L3ed12a.  call `<init>`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L3ed130.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @type ^`java.util.concurrent.locks.Lock` := v3 @kind object;
  #L3ed134.  v3:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3ed138.  call temp:= `newCondition`(v3) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L3ed13e.  v3:= temp @kind object;
  #L3ed140.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.condition` @type ^`java.util.concurrent.locks.Condition` := v3 @kind object;
  #L3ed144.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3ed158.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ed15e.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecfac.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.done` @type ^`boolean` @kind boolean;
  #L3ecfb0.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L3ecfb4.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3ecfba.  v1:= temp;
  #L3ecfbc.  if v0 == 0 then goto L3ecfda;
  #L3ecfc0.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L3ecfc4.  if v0 != 0 then goto L3ecfd0;
  #L3ecfc8.  if v1 == 0 then goto L3ecfda;
  #L3ecfcc.  v0:= 0I;
  #L3ecfce.  return v0;
  #L3ecfd0.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ecfd6.  v0:= temp @kind object;
  #L3ecfd8.  throw v0;
  #L3ecfda.  if v1 == 0 then goto L3ed040;
  #L3ecfde.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3ecfe4.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3ecfe8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L3ecfee.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.done` @type ^`boolean` @kind boolean;
  #L3ecff2.  if v0 != 0 then goto L3ed012;
  #L3ecff6.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L3ecffa.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3ed000.  v0:= temp;
  #L3ed002.  if v0 == 0 then goto L3ed012;
  #L3ed006.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.condition` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L3ed00a.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L3ed010.  goto L3ecfee;
  #L3ed012.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3ed016.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L3ed01c.  goto L3ecfac;
  #L3ed01e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed020.  goto L3ed034;
  #L3ed022.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3ed024.  call `run`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.run:()V` @kind virtual;
  #L3ed02a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ed030.  v0:= temp @kind object;
  #L3ed032.  throw v0;
  #L3ed034.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3ed038.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L3ed03e.  throw v0;
  #L3ed040.  v0:= 1I;
  #L3ed042.  return v0;
  catch `java.lang.InterruptedException` @[L3ecfee..L3ed010] goto L3ed022;
  catch `java.lang.Throwable` @[L3ecfee..L3ed010] goto L3ed01e;
  catch `java.lang.Throwable` @[L3ed024..L3ed034] goto L3ed01e;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ed06c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ed072.  v0:= temp @kind object;
  #L3ed074.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L3ed078.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3ed07e.  v0:= temp;
  #L3ed080.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ed094.  call temp:= `hasNext`(v6) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.hasNext:()Z` @kind virtual;
  #L3ed09a.  v0:= temp;
  #L3ed09c.  if v0 == 0 then goto L3ed0e4;
  #L3ed0a0.  v0:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L3ed0a4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3ed0aa.  v0:= temp @kind object;
  #L3ed0ac.  v1:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.produced` @type ^`long` @kind wide;
  #L3ed0b0.  v3:= 1L;
  #L3ed0b4.  v1:= v1 + v3 @kind long;
  #L3ed0b6.  v3:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.limit` @type ^`long` @kind wide;
  #L3ed0ba.  v5:= lcmp(v1, v3);
  #L3ed0be.  if v5 != 0 then goto L3ed0de;
  #L3ed0c2.  v3:= 0L;
  #L3ed0c6.  v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.produced` @type ^`long` := v3 @kind wide;
  #L3ed0ca.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ed0d0.  v3:= temp @kind object;
  #L3ed0d2.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L3ed0d6.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ed0dc.  goto L3ed0e2;
  #L3ed0de.  v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.produced` @type ^`long` := v1 @kind wide;
  #L3ed0e2.  return v0 @kind object;
  #L3ed0e4.  v0:= new `java.util.NoSuchElementException`;
  #L3ed0e8.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3ed0ee.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ed170.  v0:= 1I;
  #L3ed172.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.done` @type ^`boolean` := v0 @kind boolean;
  #L3ed176.  call `signalConsumer`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.signalConsumer:()V` @kind virtual;
  #L3ed17c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L3ed190.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L3ed194.  v1:= 1I;
  #L3ed196.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.done` @type ^`boolean` := v1 @kind boolean;
  #L3ed19a.  call `signalConsumer`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.signalConsumer:()V` @kind virtual;
  #L3ed1a0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ed1b4.  v0:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L3ed1b8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ed1be.  v2:= temp;
  #L3ed1c0.  if v2 != 0 then goto L3ed1e0;
  #L3ed1c4.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ed1ca.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3ed1ce.  v0:= "Queue full?!" @kind object;
  #L3ed1d2.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed1d8.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ed1de.  goto L3ed1e6;
  #L3ed1e0.  call `signalConsumer`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.signalConsumer:()V` @kind virtual;
  #L3ed1e6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed1f8.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.batchSize` @type ^`long` @kind wide;
  #L3ed1fc.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L3ed202.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed214.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3ed218.  v1:= "remove" @kind object;
  #L3ed21c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed222.  throw v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L3ed234.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ed23a.  call `signalConsumer`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.signalConsumer:()V` @kind virtual;
  #L3ed240.  return @kind void;
}
procedure `void` `signalConsumer`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$BlockingFlowableIterator;.signalConsumer:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ed254.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3ed258.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L3ed25e.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.condition` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L3ed262.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L3ed268.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3ed26c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L3ed272.  return @kind void;
  #L3ed274.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed276.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3ed27a.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L3ed280.  throw v0;
  catch `java.lang.Throwable` @[L3ed25e..L3ed268] goto L3ed274;
}
