record `io.reactivex.internal.operators.flowable.FlowableFromArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableFromArray.array` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fa6d4.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L3fa6da.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray.array` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3fa6de.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFromArray` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fa6f0.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L3fa6f4.  if v0 == 0 then goto L3fa714;
  #L3fa6f8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription`;
  #L3fa6fc.  v1:= v4 @kind object;
  #L3fa6fe.  v1:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v1 @kind object;
  #L3fa702.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFromArray.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa706.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;[Ljava/lang/Object;)V` @kind direct;
  #L3fa70c.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fa712.  goto L3fa728;
  #L3fa714.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription`;
  #L3fa718.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFromArray.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa71c.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.<init>:(Lorg/reactivestreams/Subscriber;[Ljava/lang/Object;)V` @kind direct;
  #L3fa722.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fa728.  return @kind void;
}
