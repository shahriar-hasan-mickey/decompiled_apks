record `io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.iterator` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.upstream` @AccessFlag ;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40fa58.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40fa5e.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40fa62.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.iterator` @type ^`java.util.Iterator` := v2 @kind object;
  #L40fa66.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.zipper` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L40fa6a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fa7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40fa80.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40fa86.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.error:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L40fa98.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40fa9e.  v0:= 1I;
  #L40faa0.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40faa4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40faa8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40faae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40fab2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40fab8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40facc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L40fad0.  if v0 == 0 then goto L40fad6;
  #L40fad4.  return @kind void;
  #L40fad6.  v0:= 1I;
  #L40fad8.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40fadc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40fae0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40fae6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40faf8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L40fafc.  if v0 == 0 then goto L40fb08;
  #L40fb00.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40fb06.  return @kind void;
  #L40fb08.  v0:= 1I;
  #L40fb0a.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40fb0e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40fb12.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40fb18.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40fb2c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L40fb30.  if v0 == 0 then goto L40fb36;
  #L40fb34.  return @kind void;
  #L40fb36.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.iterator` @type ^`java.util.Iterator` @kind object;
  #L40fb3a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40fb40.  v0:= temp @kind object;
  #L40fb42.  v1:= "The iterator returned a null value" @kind object;
  #L40fb46.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40fb4c.  v0:= temp @kind object;
  #L40fb4e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.zipper` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L40fb52.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40fb58.  v3:= temp @kind object;
  #L40fb5a.  v0:= "The zipper function returned a null value" @kind object;
  #L40fb5e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40fb64.  v3:= temp @kind object;
  #L40fb66.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40fb6a.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40fb70.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.iterator` @type ^`java.util.Iterator` @kind object;
  #L40fb74.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40fb7a.  v3:= temp;
  #L40fb7c.  if v3 != 0 then goto L40fb9a;
  #L40fb80.  v3:= 1I;
  #L40fb82.  v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L40fb86.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40fb8a.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40fb90.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40fb94.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40fb9a.  return @kind void;
  #L40fb9c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40fb9e.  call `error`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40fba4.  return @kind void;
  #L40fba6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40fba8.  call `error`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40fbae.  return @kind void;
  #L40fbb0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40fbb2.  call `error`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40fbb8.  return @kind void;
  catch `java.lang.Throwable` @[L40fb36..L40fb4e] goto L40fbb0;
  catch `java.lang.Throwable` @[L40fb4e..L40fb66] goto L40fba6;
  catch `java.lang.Throwable` @[L40fb70..L40fb7c] goto L40fb9c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fbec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40fbf0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40fbf6.  v0:= temp;
  #L40fbf8.  if v0 == 0 then goto L40fc0a;
  #L40fbfc.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40fc00.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40fc04.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40fc0a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$ZipIterableSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fc1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$ZipIterableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40fc20.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40fc26.  return @kind void;
}
