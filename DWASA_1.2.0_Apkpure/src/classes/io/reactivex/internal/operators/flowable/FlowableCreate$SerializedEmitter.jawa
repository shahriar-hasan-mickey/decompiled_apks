record `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableEmitter` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.error` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f4524.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f452a.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` := v2 @kind object;
  #L3f452e.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3f4532.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3f4538.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L3f453c.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3f4540.  v0:= 16I;
  #L3f4544.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3f454a.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L3f454e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3f4560.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.getAndIncrement:()I` @kind virtual;
  #L3f4566.  v0:= temp;
  #L3f4568.  if v0 != 0 then goto L3f4572;
  #L3f456c.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drainLoop:()V` @kind virtual;
  #L3f4572.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f4584.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f4588.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f458c.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f4590.  v3:= 1I;
  #L3f4592.  v4:= 1I;
  #L3f4594.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L3f459a.  v5:= temp;
  #L3f459c.  if v5 == 0 then goto L3f45a8;
  #L3f45a0.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L3f45a6.  return @kind void;
  #L3f45a8.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f45ae.  v5:= temp @kind object;
  #L3f45b0.  if v5 == 0 then goto L3f45ca;
  #L3f45b4.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L3f45ba.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f45c0.  v1:= temp @kind object;
  #L3f45c2.  call `onError`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f45c8.  return @kind void;
  #L3f45ca.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L3f45ce.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f45d4.  v6:= temp @kind object;
  #L3f45d6.  if v6 != 0 then goto L3f45de;
  #L3f45da.  v7:= 1I;
  #L3f45dc.  goto L3f45e0;
  #L3f45de.  v7:= 0I;
  #L3f45e0.  if v5 == 0 then goto L3f45f0;
  #L3f45e4.  if v7 == 0 then goto L3f45f0;
  #L3f45e8.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onComplete:()V` @kind virtual;
  #L3f45ee.  return @kind void;
  #L3f45f0.  if v7 == 0 then goto L3f4604;
  #L3f45f4.  v4:= -v4 @kind int;
  #L3f45f6.  call temp:= `addAndGet`(v8, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.addAndGet:(I)I` @kind virtual;
  #L3f45fc.  v4:= temp;
  #L3f45fe.  if v4 != 0 then goto L3f4594;
  #L3f4602.  return @kind void;
  #L3f4604.  call `onNext`(v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L3f460a.  goto L3f4594;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4450.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f4454.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L3f445a.  v0:= temp;
  #L3f445c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f461c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f4620.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L3f4626.  v0:= temp;
  #L3f4628.  if v0 != 0 then goto L3f4642;
  #L3f462c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L3f4630.  if v0 == 0 then goto L3f4636;
  #L3f4634.  goto L3f4642;
  #L3f4636.  v0:= 1I;
  #L3f4638.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L3f463c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drain:()V` @kind virtual;
  #L3f4642.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4654.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f465a.  v0:= temp;
  #L3f465c.  if v0 != 0 then goto L3f4666;
  #L3f4660.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f4666.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4678.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f467c.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L3f4682.  v0:= temp;
  #L3f4684.  if v0 != 0 then goto L3f470a;
  #L3f4688.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L3f468c.  if v0 == 0 then goto L3f4692;
  #L3f4690.  goto L3f470a;
  #L3f4692.  if v3 != 0 then goto L3f46ac;
  #L3f4696.  v3:= new `java.lang.NullPointerException`;
  #L3f469a.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3f469e.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f46a4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f46aa.  return @kind void;
  #L3f46ac.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.get:()I` @kind virtual;
  #L3f46b2.  v0:= temp;
  #L3f46b4.  if v0 != 0 then goto L3f46e0;
  #L3f46b8.  v0:= 0I;
  #L3f46ba.  v1:= 1I;
  #L3f46bc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.compareAndSet:(II)Z` @kind virtual;
  #L3f46c2.  v0:= temp;
  #L3f46c4.  if v0 == 0 then goto L3f46e0;
  #L3f46c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f46cc.  call `onNext`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L3f46d2.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.decrementAndGet:()I` @kind virtual;
  #L3f46d8.  v3:= temp;
  #L3f46da.  if v3 != 0 then goto L3f46fc;
  #L3f46de.  return @kind void;
  #L3f46e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f46e4.  @monitorenter v0
  #L3f46e6.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f46ec.  @monitorexit v0
  #L3f46ee.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.getAndIncrement:()I` @kind virtual;
  #L3f46f4.  v3:= temp;
  #L3f46f6.  if v3 == 0 then goto L3f46fc;
  #L3f46fa.  return @kind void;
  #L3f46fc.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drainLoop:()V` @kind virtual;
  #L3f4702.  return @kind void;
  #L3f4704.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f4706.  @monitorexit v0
  #L3f4708.  throw v3;
  #L3f470a.  return @kind void;
  catch `java.lang.Throwable` @[L3f46e6..L3f46ee] goto L3f4704;
  catch `java.lang.Throwable` @[L3f4706..L3f4708] goto L3f4704;
}
procedure `long` `requested`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.requested:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4504.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f4508.  call temp:= `requested`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.requested:()J` @kind virtual;
  #L3f450e.  v0:= temp @kind wide;
  #L3f4510.  return v0 @kind wide;
}
procedure `io.reactivex.FlowableEmitter` `serialize`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.serialize:()Lio/reactivex/FlowableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L3f44d0.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4730.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f4734.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @kind virtual;
  #L3f473a.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f474c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f4750.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3f4756.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f44e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f44e8.  call temp:= `toString`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f44ee.  v0:= temp @kind object;
  #L3f44f0.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4470.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L3f4474.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L3f447a.  v0:= temp;
  #L3f447c.  v1:= 0I;
  #L3f447e.  if v0 != 0 then goto L3f44bc;
  #L3f4482.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L3f4486.  if v0 == 0 then goto L3f448c;
  #L3f448a.  goto L3f44bc;
  #L3f448c.  if v3 != 0 then goto L3f449e;
  #L3f4490.  v3:= new `java.lang.NullPointerException`;
  #L3f4494.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3f4498.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f449e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f44a2.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f44a8.  v3:= temp;
  #L3f44aa.  if v3 == 0 then goto L3f44bc;
  #L3f44ae.  v3:= 1I;
  #L3f44b0.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` := v3 @kind boolean;
  #L3f44b4.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drain:()V` @kind virtual;
  #L3f44ba.  return v3;
  #L3f44bc.  return v1;
}
