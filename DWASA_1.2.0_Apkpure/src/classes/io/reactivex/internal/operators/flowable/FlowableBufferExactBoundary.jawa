record `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary.boundary` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary.bufferSupplier` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3efff8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3efffe.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary.boundary` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L3f0002.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L3f0006.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f0018.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f001c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber`;
  #L3f0020.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L3f0024.  call `<init>`(v2, v5) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f002a.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f002e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary.boundary` @type ^`org.reactivestreams.Publisher` @kind object;
  #L3f0032.  call `<init>`(v1, v2, v5, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f0038.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f003e.  return @kind void;
}
