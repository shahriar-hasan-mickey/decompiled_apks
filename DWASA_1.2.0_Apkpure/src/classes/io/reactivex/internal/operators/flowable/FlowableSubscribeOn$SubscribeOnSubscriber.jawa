record `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.nonScheduledRequests` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.source` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;Lorg/reactivestreams/Publisher;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L408670.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L408676.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40867a.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L40867e.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.source` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L408682.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L408686.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40868c.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L408690.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L408694.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40869a.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40869e.  v1:= v4 ^~ 1;
  #L4086a2.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.nonScheduledRequests` @type ^`boolean` := v1 @kind boolean;
  #L4086a6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4086b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4086bc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4086c2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4086c6.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4086cc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4086e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4086e4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4086ea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4086ee.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4086f4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L408708.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40870c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L408712.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L408716.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40871c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L408730.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L408734.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40873a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40874c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L408750.  call temp:= `setOnce`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L408756.  v0:= temp;
  #L408758.  if v0 == 0 then goto L40877a;
  #L40875c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L408760.  v1:= 0L;
  #L408764.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L40876a.  v3:= temp @kind wide;
  #L40876c.  v0:= lcmp(v3, v1);
  #L408770.  if v0 == 0 then goto L40877a;
  #L408774.  call `requestUpstream`(v5, v3, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.requestUpstream:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L40877a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40878c.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L408792.  v0:= temp;
  #L408794.  if v0 == 0 then goto L4087f0;
  #L408798.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40879c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4087a2.  v0:= temp @kind object;
  #L4087a4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4087a8.  if v0 == 0 then goto L4087b4;
  #L4087ac.  call `requestUpstream`(v4, v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.requestUpstream:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4087b2.  goto L4087f0;
  #L4087b4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4087b8.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4087be.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4087c2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4087c8.  v5:= temp @kind object;
  #L4087ca.  v5:= (`org.reactivestreams.Subscription`) v5 @kind object;
  #L4087ce.  if v5 == 0 then goto L4087f0;
  #L4087d2.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4087d6.  v0:= 0L;
  #L4087da.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4087e0.  v2:= temp @kind wide;
  #L4087e2.  v6:= lcmp(v2, v0);
  #L4087e6.  if v6 == 0 then goto L4087f0;
  #L4087ea.  call `requestUpstream`(v4, v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.requestUpstream:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4087f0.  return @kind void;
}
procedure `void` `requestUpstream`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v2 @kind this, `long` v3 , `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.requestUpstream:(JLorg/reactivestreams/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L408804.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.nonScheduledRequests` @type ^`boolean` @kind boolean;
  #L408808.  if v0 != 0 then goto L408838;
  #L40880c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L408812.  v0:= temp @kind object;
  #L408814.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L40881a.  v1:= temp @kind object;
  #L40881c.  if v0 != v1 then goto L408822;
  #L408820.  goto L408838;
  #L408822.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L408826.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$Request`;
  #L40882a.  call `<init>`(v1, v5, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber$Request;.<init>:(Lorg/reactivestreams/Subscription;J)V` @kind direct;
  #L408830.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L408836.  goto L40883e;
  #L408838.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40883e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L408850.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L408856.  v0:= temp @kind object;
  #L408858.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40885e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L408862.  v1:= 0I;
  #L408864.  v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.source` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L408868.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40886e.  return @kind void;
}
