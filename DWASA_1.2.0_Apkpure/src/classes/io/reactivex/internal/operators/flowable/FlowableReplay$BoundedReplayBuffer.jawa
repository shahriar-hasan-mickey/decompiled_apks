record `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` @kind class @AccessFlag  extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableReplay$Node` `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L404364.  call `<init>`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40436a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L40436e.  v1:= 0I;
  #L404370.  v2:= 0L;
  #L404374.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L40437a.  v4.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` := v0 @kind object;
  #L40437e.  call `set`(v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L404384.  return @kind void;
}
procedure `void` `addLast`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$Node` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L404398.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind object;
  #L40439c.  call `set`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4043a2.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` := v2 @kind object;
  #L4043a6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L4043aa.  v2:= v2 + 1;
  #L4043ae.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v2;
  #L4043b2.  return @kind void;
}
procedure `void` `collect`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.collect:(Ljava/util/Collection;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4043c4.  call temp:= `getHead`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;` @kind virtual;
  #L4043ca.  v0:= temp @kind object;
  #L4043cc.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4043d2.  v0:= temp @kind object;
  #L4043d4.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L4043d8.  if v0 == 0 then goto L404412;
  #L4043dc.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4043e0.  call temp:= `leaveTransform`(v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4043e6.  v1:= temp @kind object;
  #L4043e8.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4043ee.  v2:= temp;
  #L4043f0.  if v2 != 0 then goto L404412;
  #L4043f4.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4043fa.  v2:= temp;
  #L4043fc.  if v2 == 0 then goto L404402;
  #L404400.  goto L404412;
  #L404402.  call temp:= `getValue`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L404408.  v1:= temp @kind object;
  #L40440a.  call temp:= `add`(v4, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L404410.  goto L4043cc;
  #L404412.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L404424.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L40442a.  v0:= temp @kind object;
  #L40442c.  call temp:= `enterTransform`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L404432.  v0:= temp @kind object;
  #L404434.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L404438.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` @kind wide;
  #L40443c.  v4:= 1L;
  #L404440.  v2:= v2 + v4 @kind long;
  #L404442.  v6.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` := v2 @kind wide;
  #L404446.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L40444c.  call `addLast`(v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L404452.  call `truncateFinal`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncateFinal:()V` @kind virtual;
  #L404458.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L40433c.  return v1 @kind object;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40446c.  call temp:= `error`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L404472.  v6:= temp @kind object;
  #L404474.  call temp:= `enterTransform`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40447a.  v6:= temp @kind object;
  #L40447c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L404480.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` @kind wide;
  #L404484.  v3:= 1L;
  #L404488.  v1:= v1 + v3 @kind long;
  #L40448a.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` := v1 @kind wide;
  #L40448e.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L404494.  call `addLast`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L40449a.  call `truncateFinal`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncateFinal:()V` @kind virtual;
  #L4044a0.  return @kind void;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$Node` `getHead`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;` @AccessFlag  {
    temp;
    v0;

  #L40431c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L404322.  v0:= temp @kind object;
  #L404324.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L404328.  return v0 @kind object;
}
procedure `boolean` `hasCompleted`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.hasCompleted:()Z` @AccessFlag  {
    temp;
    v0;

  #L40429c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind object;
  #L4042a0.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4042a4.  if v0 == 0 then goto L4042c8;
  #L4042a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind object;
  #L4042ac.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4042b0.  call temp:= `leaveTransform`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4042b6.  v0:= temp @kind object;
  #L4042b8.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4042be.  v0:= temp;
  #L4042c0.  if v0 == 0 then goto L4042c8;
  #L4042c4.  v0:= 1I;
  #L4042c6.  goto L4042ca;
  #L4042c8.  v0:= 0I;
  #L4042ca.  return v0;
}
procedure `boolean` `hasError`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.hasError:()Z` @AccessFlag  {
    temp;
    v0;

  #L4042dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind object;
  #L4042e0.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4042e4.  if v0 == 0 then goto L404308;
  #L4042e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind object;
  #L4042ec.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4042f0.  call temp:= `leaveTransform`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4042f6.  v0:= temp @kind object;
  #L4042f8.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4042fe.  v0:= temp;
  #L404300.  if v0 == 0 then goto L404308;
  #L404304.  v0:= 1I;
  #L404306.  goto L40430a;
  #L404308.  v0:= 0I;
  #L40430a.  return v0;
}
procedure `java.lang.Object` `leaveTransform`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L404350.  return v1 @kind object;
}
procedure `void` `next`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4044b4.  call temp:= `next`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4044ba.  v6:= temp @kind object;
  #L4044bc.  call temp:= `enterTransform`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4044c2.  v6:= temp @kind object;
  #L4044c4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L4044c8.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` @kind wide;
  #L4044cc.  v3:= 1L;
  #L4044d0.  v1:= v1 + v3 @kind long;
  #L4044d2.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` := v1 @kind wide;
  #L4044d6.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4044dc.  call `addLast`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L4044e2.  call `truncate`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncate:()V` @kind virtual;
  #L4044e8.  return @kind void;
}
procedure `void` `removeFirst`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.removeFirst:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L4044fc.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L404502.  v0:= temp @kind object;
  #L404504.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L404508.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L40450e.  v0:= temp @kind object;
  #L404510.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L404514.  if v0 == 0 then goto L40452c;
  #L404518.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L40451c.  v1:= v1 + -1;
  #L404520.  v2.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v1;
  #L404524.  call `setFirst`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L40452a.  return @kind void;
  #L40452c.  v0:= new `java.lang.IllegalStateException`;
  #L404530.  v1:= "Empty list!" @kind object;
  #L404534.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40453a.  throw v0;
}
procedure `void` `removeSome`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.removeSome:(I)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L40454c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L404552.  v0:= temp @kind object;
  #L404554.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L404558.  if v3 <= 0 then goto L40457a;
  #L40455c.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L404562.  v0:= temp @kind object;
  #L404564.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L404568.  v3:= v3 + -1;
  #L40456c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L404570.  v1:= v1 + -1;
  #L404574.  v2.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v1;
  #L404578.  goto L404558;
  #L40457a.  call `setFirst`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L404580.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v13 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v14 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L404594.  @monitorenter v14
  #L404596.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` @kind boolean;
  #L40459a.  v1:= 1I;
  #L40459c.  if v0 == 0 then goto L4045a8;
  #L4045a0.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` := v1 @kind boolean;
  #L4045a4.  @monitorexit v14
  #L4045a6.  return @kind void;
  #L4045a8.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4045ac.  @monitorexit v14
  #L4045ae.  call temp:= `isDisposed`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L4045b4.  v0:= temp;
  #L4045b6.  if v0 == 0 then goto L4045bc;
  #L4045ba.  return @kind void;
  #L4045bc.  call temp:= `get`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.get:()J` @kind virtual;
  #L4045c2.  v2:= temp @kind wide;
  #L4045c4.  v4:= 9223372036854775807L;
  #L4045ce.  v0:= 0I;
  #L4045d0.  v6:= lcmp(v2, v4);
  #L4045d4.  if v6 != 0 then goto L4045dc;
  #L4045d8.  v4:= 1I;
  #L4045da.  goto L4045de;
  #L4045dc.  v4:= 0I;
  #L4045de.  call temp:= `index`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.index:()Ljava/lang/Object;` @kind virtual;
  #L4045e4.  v5:= temp @kind object;
  #L4045e6.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v5 @kind object;
  #L4045ea.  v6:= 0L;
  #L4045ee.  if v5 != 0 then goto L40460c;
  #L4045f2.  call temp:= `getHead`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;` @kind virtual;
  #L4045f8.  v5:= temp @kind object;
  #L4045fa.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v5 @kind object;
  #L4045fe.  v8:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L404602.  v9:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.index` @type ^`long` @kind wide;
  #L404606.  call temp:= `add`(v8, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40460c.  v8:= v6 @kind wide;
  #L40460e.  v10:= lcmp(v2, v6);
  #L404612.  if v10 == 0 then goto L40469a;
  #L404616.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L40461c.  v10:= temp @kind object;
  #L40461e.  v10:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v10 @kind object;
  #L404622.  if v10 == 0 then goto L40469a;
  #L404626.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L40462a.  call temp:= `leaveTransform`(v13, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L404630.  v5:= temp @kind object;
  #L404632.  v11:= 0I;
  #L404634.  v12:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L404638.  call temp:= `accept`(v5, v12) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L40463e.  v12:= temp;
  #L404640.  if v12 == 0 then goto L40464a;
  #L404644.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v11 @kind object;
  #L404648.  return @kind void;
  #L40464a.  v11:= 1L;
  #L40464e.  v8:= v8 + v11 @kind long;
  #L404650.  v2:= v2 - v11 @kind long;
  #L404652.  call temp:= `isDisposed`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L404658.  v5:= temp;
  #L40465a.  if v5 == 0 then goto L404660;
  #L40465e.  return @kind void;
  #L404660.  v5:= v10 @kind object;
  #L404662.  goto L40460e;
  #L404664.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L404666.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40466c.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v11 @kind object;
  #L404670.  call `dispose`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.dispose:()V` @kind virtual;
  #L404676.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L40467c.  v1:= temp;
  #L40467e.  if v1 != 0 then goto L404698;
  #L404682.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L404688.  v1:= temp;
  #L40468a.  if v1 != 0 then goto L404698;
  #L40468e.  v14:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L404692.  call `onError`(v14, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L404698.  return @kind void;
  #L40469a.  v2:= lcmp(v8, v6);
  #L40469e.  if v2 == 0 then goto L4046b0;
  #L4046a2.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v5 @kind object;
  #L4046a6.  if v4 != 0 then goto L4046b0;
  #L4046aa.  call temp:= `produced`(v14, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.produced:(J)J` @kind virtual;
  #L4046b0.  @monitorenter v14
  #L4046b2.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` @kind boolean;
  #L4046b6.  if v2 != 0 then goto L4046c2;
  #L4046ba.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4046be.  @monitorexit v14
  #L4046c0.  return @kind void;
  #L4046c2.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` := v0 @kind boolean;
  #L4046c6.  @monitorexit v14
  #L4046c8.  goto L4045ae;
  #L4046cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4046ce.  @monitorexit v14
  #L4046d0.  throw v0;
  #L4046d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4046d4.  @monitorexit v14
  #L4046d6.  goto L4046da;
  #L4046d8.  throw v0;
  #L4046da.  goto L4046d8;
  catch `java.lang.Throwable` @[L404596..L4045ae] goto L4046d2;
  catch `java.lang.Throwable` @[L404634..L404648] goto L404664;
  catch `java.lang.Throwable` @[L4046b2..L4046d0] goto L4046cc;
  catch `java.lang.Throwable` @[L4046d4..L4046d6] goto L4046d2;
}
procedure `void` `setFirst`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$Node` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @AccessFlag FINAL {
    temp;

  #L404718.  call `set`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L40471e.  return @kind void;
}
procedure `void` `trimHead`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.trimHead:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L404730.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L404736.  v0:= temp @kind object;
  #L404738.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L40473c.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L404740.  if v1 == 0 then goto L404768;
  #L404744.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L404748.  v2:= 0I;
  #L40474a.  v3:= 0L;
  #L40474e.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L404754.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L40475a.  v0:= temp @kind object;
  #L40475c.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L404762.  call `set`(v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L404768.  return @kind void;
}
procedure `void` `truncate`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;

  #L40477c.  return @kind void;
}
procedure `void` `truncateFinal`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;

  #L404790.  call `trimHead`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.trimHead:()V` @kind virtual;
  #L404796.  return @kind void;
}
