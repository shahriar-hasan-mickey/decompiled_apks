record `io.reactivex.internal.operators.flowable.FlowableConcatMapEager` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager.errorMode` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager.maxConcurrency` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager.prefetch` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f32c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f32c6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f32ca.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.maxConcurrency` @type ^`int` := v3;
  #L3f32ce.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.prefetch` @type ^`int` := v4;
  #L3f32d2.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v5 @kind object;
  #L3f32d6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager` v8 @kind this, `org.reactivestreams.Subscriber` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f32e8.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f32ec.  v7:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber`;
  #L3f32f0.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f32f4.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.maxConcurrency` @type ^`int`;
  #L3f32f8.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.prefetch` @type ^`int`;
  #L3f32fc.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f3300.  v1:= v7 @kind object;
  #L3f3302.  v2:= v9 @kind object;
  #L3f3304.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f330a.  call `subscribe`(v0, v7) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f3310.  return @kind void;
}
