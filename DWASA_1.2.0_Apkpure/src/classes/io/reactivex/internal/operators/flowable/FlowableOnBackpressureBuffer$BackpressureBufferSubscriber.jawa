record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @AccessFlag ;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `boolean` v4 , `boolean` v5 , `io.reactivex.functions.Action` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;IZZLio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L400668.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L40066e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L400672.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L400678.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L40067c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L400680.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @type ^`io.reactivex.functions.Action` := v6 @kind object;
  #L400684.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @type ^`boolean` := v5 @kind boolean;
  #L400688.  if v4 == 0 then goto L400698;
  #L40068c.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L400690.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L400696.  goto L4006a2;
  #L400698.  v2:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L40069c.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4006a2.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L4006a6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4006b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4006bc.  if v0 != 0 then goto L4006e6;
  #L4006c0.  v0:= 1I;
  #L4006c2.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4006c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4006ca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4006d0.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.getAndIncrement:()I` @kind virtual;
  #L4006d6.  v0:= temp;
  #L4006d8.  if v0 != 0 then goto L4006e6;
  #L4006dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4006e0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4006e6.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40058c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L400590.  v1:= 1I;
  #L400592.  if v0 == 0 then goto L4005a2;
  #L400596.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40059a.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4005a0.  return v1;
  #L4005a2.  if v3 == 0 then goto L4005f0;
  #L4005a6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L4005aa.  if v3 == 0 then goto L4005ca;
  #L4005ae.  if v4 == 0 then goto L4005f0;
  #L4005b2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4005b6.  if v3 == 0 then goto L4005c2;
  #L4005ba.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4005c0.  goto L4005c8;
  #L4005c2.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4005c8.  return v1;
  #L4005ca.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4005ce.  if v3 == 0 then goto L4005e4;
  #L4005d2.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4005d6.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4005dc.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4005e2.  return v1;
  #L4005e4.  if v4 == 0 then goto L4005f0;
  #L4005e8.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4005ee.  return v1;
  #L4005f0.  v3:= 0I;
  #L4005f2.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4006f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4006fc.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L400702.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L400714.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40071a.  v0:= temp;
  #L40071c.  if v0 != 0 then goto L4007ee;
  #L400720.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L400724.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400728.  v2:= 1I;
  #L40072a.  v3:= 1I;
  #L40072c.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L400730.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L400736.  v5:= temp;
  #L400738.  call temp:= `checkTerminated`(v13, v4, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L40073e.  v4:= temp;
  #L400740.  if v4 == 0 then goto L400746;
  #L400744.  return @kind void;
  #L400746.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40074a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L400750.  v4:= temp @kind wide;
  #L400752.  v6:= 0L;
  #L400756.  v8:= v6 @kind wide;
  #L400758.  v10:= lcmp(v8, v4);
  #L40075c.  if v10 == 0 then goto L400798;
  #L400760.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L400764.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40076a.  v11:= temp @kind object;
  #L40076c.  if v11 != 0 then goto L400774;
  #L400770.  v12:= 1I;
  #L400772.  goto L400776;
  #L400774.  v12:= 0I;
  #L400776.  call temp:= `checkTerminated`(v13, v10, v12, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L40077c.  v10:= temp;
  #L40077e.  if v10 == 0 then goto L400784;
  #L400782.  return @kind void;
  #L400784.  if v12 == 0 then goto L40078a;
  #L400788.  goto L400798;
  #L40078a.  call `onNext`(v1, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L400790.  v10:= 1L;
  #L400794.  v8:= v8 + v10 @kind long;
  #L400796.  goto L400758;
  #L400798.  v10:= lcmp(v8, v4);
  #L40079c.  if v10 != 0 then goto L4007ba;
  #L4007a0.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L4007a4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L4007aa.  v11:= temp;
  #L4007ac.  call temp:= `checkTerminated`(v13, v10, v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4007b2.  v10:= temp;
  #L4007b4.  if v10 == 0 then goto L4007ba;
  #L4007b8.  return @kind void;
  #L4007ba.  v10:= lcmp(v8, v6);
  #L4007be.  if v10 == 0 then goto L4007e0;
  #L4007c2.  v6:= 9223372036854775807L;
  #L4007cc.  v10:= lcmp(v4, v6);
  #L4007d0.  if v10 == 0 then goto L4007e0;
  #L4007d4.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4007d8.  v5:= -v8 @kind long;
  #L4007da.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4007e0.  v3:= -v3 @kind int;
  #L4007e2.  call temp:= `addAndGet`(v13, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.addAndGet:(I)I` @kind virtual;
  #L4007e8.  v3:= temp;
  #L4007ea.  if v3 != 0 then goto L40072c;
  #L4007ee.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400604.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L400608.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L40060e.  v0:= temp;
  #L400610.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400800.  v0:= 1I;
  #L400802.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L400806.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L40080a.  if v0 == 0 then goto L40081a;
  #L40080e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400812.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L400818.  goto L400820;
  #L40081a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @kind virtual;
  #L400820.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400834.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L400838.  v0:= 1I;
  #L40083a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40083e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L400842.  if v0 == 0 then goto L400852;
  #L400846.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40084a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L400850.  goto L400858;
  #L400852.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @kind virtual;
  #L400858.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40086c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L400870.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L400876.  v2:= temp;
  #L400878.  if v2 != 0 then goto L4008b6;
  #L40087c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400880.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L400886.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40088a.  v0:= "Buffer is full" @kind object;
  #L40088e.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L400894.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @type ^`io.reactivex.functions.Action` @kind object;
  #L400898.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L40089e.  goto L4008ae;
  #L4008a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4008a2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4008a8.  call temp:= `initCause`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4008ae.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4008b4.  return @kind void;
  #L4008b6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L4008ba.  if v2 == 0 then goto L4008cc;
  #L4008be.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4008c2.  v0:= 0I;
  #L4008c4.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4008ca.  goto L4008d2;
  #L4008cc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @kind virtual;
  #L4008d2.  return @kind void;
  catch `java.lang.Throwable` @[L400894..L40089e] goto L4008a0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4008f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4008f4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4008fa.  v0:= temp;
  #L4008fc.  if v0 == 0 then goto L40091e;
  #L400900.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L400904.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400908.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40090e.  v0:= 9223372036854775807L;
  #L400918.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40091e.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400648.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40064c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L400652.  v0:= temp @kind object;
  #L400654.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400930.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L400934.  if v0 != 0 then goto L400954;
  #L400938.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40093e.  v0:= temp;
  #L400940.  if v0 == 0 then goto L400954;
  #L400944.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L400948.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40094e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @kind virtual;
  #L400954.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400624.  v0:= 2I;
  #L400626.  v2:= v2 ^& v0 @kind int;
  #L400628.  if v2 == 0 then goto L400634;
  #L40062c.  v2:= 1I;
  #L40062e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L400632.  return v0;
  #L400634.  v2:= 0I;
  #L400636.  return v2;
}
