record `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.gate` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4082bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4082c2.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4082c6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4082ca.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4082d0.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4082d4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4082d8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4082de.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4082e2.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber`;
  #L4082e6.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;)V` @kind direct;
  #L4082ec.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` := v1 @kind object;
  #L4082f0.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4082f4.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4082fa.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L4082fe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L408310.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L408314.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40831a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` @kind object;
  #L40831e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L408324.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L408338.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` @kind object;
  #L40833c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L408342.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L408346.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40834a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L408350.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L408364.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` @kind object;
  #L408368.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40836e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L408372.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L408376.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L40837c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L408390.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L408396.  v3:= temp;
  #L408398.  if v3 != 0 then goto L4083b6;
  #L40839c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4083a0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4083a6.  v3:= temp @kind object;
  #L4083a8.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4083ac.  v0:= 1L;
  #L4083b0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4083b6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4083c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4083cc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4083d0.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4083d6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4083e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4083ec.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4083f0.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4083f6.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40828c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.gate` @type ^`boolean` @kind boolean;
  #L408290.  if v0 == 0 then goto L4082a6;
  #L408294.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L408298.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40829c.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4082a2.  v3:= 1I;
  #L4082a4.  return v3;
  #L4082a6.  v3:= 0I;
  #L4082a8.  return v3;
}
