record `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.comparer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.hasValue` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.keySelector` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.last` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f5c18.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f5c1e.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f5c22.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.comparer` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L3f5c26.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5c38.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f5c3e.  v3:= temp;
  #L3f5c40.  if v3 != 0 then goto L3f5c52;
  #L3f5c44.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5c48.  v0:= 1L;
  #L3f5c4c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f5c52.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f5b9c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f5ba0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f5ba6.  v0:= temp @kind object;
  #L3f5ba8.  if v0 != 0 then goto L3f5bb0;
  #L3f5bac.  v0:= 0I;
  #L3f5bae.  return v0 @kind object;
  #L3f5bb0.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f5bb4.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f5bba.  v1:= temp @kind object;
  #L3f5bbc.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.hasValue` @type ^`boolean` @kind boolean;
  #L3f5bc0.  v3:= 1I;
  #L3f5bc2.  if v2 != 0 then goto L3f5bd0;
  #L3f5bc6.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.hasValue` @type ^`boolean` := v3 @kind boolean;
  #L3f5bca.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.last` @type ^`java.lang.Object` := v1 @kind object;
  #L3f5bce.  return v0 @kind object;
  #L3f5bd0.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L3f5bd4.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.last` @type ^`java.lang.Object` @kind object;
  #L3f5bd8.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L3f5bde.  v2:= temp;
  #L3f5be0.  if v2 != 0 then goto L3f5bea;
  #L3f5be4.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.last` @type ^`java.lang.Object` := v1 @kind object;
  #L3f5be8.  return v0 @kind object;
  #L3f5bea.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.last` @type ^`java.lang.Object` := v1 @kind object;
  #L3f5bee.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.sourceMode` @type ^`int`;
  #L3f5bf2.  if v0 == v3 then goto L3f5b9c;
  #L3f5bf6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5bfa.  v1:= 1L;
  #L3f5bfe.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f5c04.  goto L3f5b9c;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f5b80.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f5b86.  v1:= temp;
  #L3f5b88.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f5af4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f5af8.  v1:= 0I;
  #L3f5afa.  if v0 == 0 then goto L3f5b00;
  #L3f5afe.  return v1;
  #L3f5b00.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.sourceMode` @type ^`int`;
  #L3f5b04.  v2:= 1I;
  #L3f5b06.  if v0 == 0 then goto L3f5b16;
  #L3f5b0a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f5b0e.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f5b14.  return v2;
  #L3f5b16.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f5b1a.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f5b20.  v0:= temp @kind object;
  #L3f5b22.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.hasValue` @type ^`boolean` @kind boolean;
  #L3f5b26.  if v3 == 0 then goto L3f5b44;
  #L3f5b2a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L3f5b2e.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.last` @type ^`java.lang.Object` @kind object;
  #L3f5b32.  call temp:= `test`(v3, v4, v0) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L3f5b38.  v3:= temp;
  #L3f5b3a.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.last` @type ^`java.lang.Object` := v0 @kind object;
  #L3f5b3e.  if v3 == 0 then goto L3f5b4c;
  #L3f5b42.  return v1;
  #L3f5b44.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.hasValue` @type ^`boolean` := v2 @kind boolean;
  #L3f5b48.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.last` @type ^`java.lang.Object` := v0 @kind object;
  #L3f5b4c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f5b50.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f5b56.  return v2;
  #L3f5b58.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5b5a.  call `fail`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f5b60.  return v2;
  catch `java.lang.Throwable` @[L3f5b16..L3f5b4c] goto L3f5b58;
}
