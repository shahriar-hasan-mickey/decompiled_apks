record `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ff45c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3ff462.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe.other` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L3ff466.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ff478.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver`;
  #L3ff47c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3ff482.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3ff488.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3ff48c.  call `subscribe`(v2, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3ff492.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe.other` @type ^`io.reactivex.MaybeSource` @kind object;
  #L3ff496.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver` @kind object;
  #L3ff49a.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L3ff4a0.  return @kind void;
}
