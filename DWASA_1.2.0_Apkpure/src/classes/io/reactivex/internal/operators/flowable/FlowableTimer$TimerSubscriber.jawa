record `io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.requested` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40b670.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40b676.  v0.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40b67a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L40b68c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40b692.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40b6a4.  call temp:= `validate`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40b6aa.  v1:= temp;
  #L40b6ac.  if v1 == 0 then goto L40b6b6;
  #L40b6b0.  v1:= 1I;
  #L40b6b2.  v0.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.requested` @type ^`boolean` := v1 @kind boolean;
  #L40b6b6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40b6c8.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L40b6ce.  v0:= temp @kind object;
  #L40b6d0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L40b6d4.  if v0 == v1 then goto L40b72e;
  #L40b6d8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.requested` @type ^`boolean` @kind boolean;
  #L40b6dc.  if v0 == 0 then goto L40b70c;
  #L40b6e0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b6e4.  v1:= 0L;
  #L40b6e8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L40b6ee.  v1:= temp @kind object;
  #L40b6f0.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40b6f6.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L40b6fa.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40b700.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b704.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40b70a.  goto L40b72e;
  #L40b70c.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L40b710.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40b716.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b71a.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40b71e.  v2:= "Can't deliver value due to lack of requests" @kind object;
  #L40b722.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40b728.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40b72e.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.setResource:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L40b740.  call temp:= `trySet`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L40b746.  return @kind void;
}
