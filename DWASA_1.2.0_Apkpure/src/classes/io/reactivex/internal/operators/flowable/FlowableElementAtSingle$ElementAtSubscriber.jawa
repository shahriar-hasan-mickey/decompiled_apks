record `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.count` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.defaultValue` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.index` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `long` v2 , `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$ElementAtSubscriber;.<init>:(Lio/reactivex/SingleObserver;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f6fb8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f6fbe.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L3f6fc2.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.index` @type ^`long` := v2 @kind wide;
  #L3f6fc6.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.defaultValue` @type ^`java.lang.Object` := v4 @kind object;
  #L3f6fca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$ElementAtSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6fdc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6fe0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f6fe6.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f6fea.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f6fee.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$ElementAtSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6f94.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6f98.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f6f9c.  if v0 != v1 then goto L3f6fa4;
  #L3f6fa0.  v0:= 1I;
  #L3f6fa2.  goto L3f6fa6;
  #L3f6fa4.  v0:= 0I;
  #L3f6fa6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$ElementAtSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7000.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f7004.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f7008.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f700c.  if v0 != 0 then goto L3f703e;
  #L3f7010.  v0:= 1I;
  #L3f7012.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f7016.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.defaultValue` @type ^`java.lang.Object` @kind object;
  #L3f701a.  if v0 == 0 then goto L3f702a;
  #L3f701e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f7022.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3f7028.  goto L3f703e;
  #L3f702a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f702e.  v1:= new `java.util.NoSuchElementException`;
  #L3f7032.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3f7038.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f703e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$ElementAtSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7050.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f7054.  if v0 == 0 then goto L3f7060;
  #L3f7058.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f705e.  return @kind void;
  #L3f7060.  v0:= 1I;
  #L3f7062.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f7066.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f706a.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f706e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f7072.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f7078.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$ElementAtSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f708c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f7090.  if v0 == 0 then goto L3f7096;
  #L3f7094.  return @kind void;
  #L3f7096.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.count` @type ^`long` @kind wide;
  #L3f709a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.index` @type ^`long` @kind wide;
  #L3f709e.  v4:= lcmp(v0, v2);
  #L3f70a2.  if v4 != 0 then goto L3f70ca;
  #L3f70a6.  v0:= 1I;
  #L3f70a8.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f70ac.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f70b0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f70b6.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f70ba.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f70be.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f70c2.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3f70c8.  return @kind void;
  #L3f70ca.  v2:= 1L;
  #L3f70ce.  v0:= v0 + v2 @kind long;
  #L3f70d0.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.count` @type ^`long` := v0 @kind wide;
  #L3f70d4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$ElementAtSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f70e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f70ec.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f70f2.  v0:= temp;
  #L3f70f4.  if v0 == 0 then goto L3f7116;
  #L3f70f8.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f70fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f7100.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3f7106.  v0:= 9223372036854775807L;
  #L3f7110.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f7116.  return @kind void;
}
