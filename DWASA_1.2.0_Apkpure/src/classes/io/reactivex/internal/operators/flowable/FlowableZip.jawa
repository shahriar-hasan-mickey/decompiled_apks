record `io.reactivex.internal.operators.flowable.FlowableZip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableZip.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip.delayError` @AccessFlag FINAL;
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableZip.sources` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableZip.sourcesIterable` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableZip.zipper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40fcec.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L40fcf2.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.sources` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L40fcf6.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.sourcesIterable` @type ^`java.lang.Iterable` := v2 @kind object;
  #L40fcfa.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.zipper` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L40fcfe.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.bufferSize` @type ^`int` := v4;
  #L40fd02.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.delayError` @type ^`boolean` := v5 @kind boolean;
  #L40fd06.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableZip` v10 @kind this, `org.reactivestreams.Subscriber` v11 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L40fd18.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableZip.sources` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L40fd1c.  if v0 != 0 then goto L40fd74;
  #L40fd20.  v0:= 8I;
  #L40fd24.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L40fd28.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableZip.sourcesIterable` @type ^`java.lang.Iterable` @kind object;
  #L40fd2c.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40fd32.  v1:= temp @kind object;
  #L40fd34.  v2:= 0I;
  #L40fd36.  v3:= 0I;
  #L40fd38.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40fd3e.  v4:= temp;
  #L40fd40.  if v4 == 0 then goto L40fd76;
  #L40fd44.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40fd4a.  v4:= temp @kind object;
  #L40fd4c.  v4:= (`org.reactivestreams.Publisher`) v4 @kind object;
  #L40fd50.  v5:= length @variable v0;
  #L40fd52.  if v3 != v5 then goto L40fd68;
  #L40fd56.  v5:= v3 ^> 2;
  #L40fd5a.  v5:= v5 + v3 @kind int;
  #L40fd5c.  v5:= new `org.reactivestreams.Publisher`[v5];
  #L40fd60.  call `arraycopy`(v0, v2, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40fd66.  v0:= v5 @kind object;
  #L40fd68.  v5:= v3 + 1;
  #L40fd6c.  v0[v3]:= v4 @kind object;
  #L40fd70.  v3:= v5;
  #L40fd72.  goto L40fd38;
  #L40fd74.  v3:= length @variable v0;
  #L40fd76.  if v3 != 0 then goto L40fd82;
  #L40fd7a.  call `complete`(v11) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40fd80.  return @kind void;
  #L40fd82.  v1:= new `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator`;
  #L40fd86.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableZip.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L40fd8a.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableZip.bufferSize` @type ^`int`;
  #L40fd8e.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableZip.delayError` @type ^`boolean` @kind boolean;
  #L40fd92.  v4:= v1 @kind object;
  #L40fd94.  v5:= v11 @kind object;
  #L40fd96.  v7:= v3;
  #L40fd98.  call `<init>`(v4, v5, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IIZ)V` @kind direct;
  #L40fd9e.  call `onSubscribe`(v11, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40fda4.  call `subscribe`(v1, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.subscribe:([Lorg/reactivestreams/Publisher;I)V` @kind virtual;
  #L40fdaa.  return @kind void;
}
