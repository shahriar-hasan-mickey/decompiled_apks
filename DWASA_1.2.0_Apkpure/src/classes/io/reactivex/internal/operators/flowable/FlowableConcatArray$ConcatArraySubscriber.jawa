record `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.delayError` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.index` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @AccessFlag ;
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.sources` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `boolean` v2 , `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.<init>:([Lorg/reactivestreams/Publisher;ZLorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f202c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L3f2032.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L3f2036.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.sources` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L3f203a.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.delayError` @type ^`boolean` := v2 @kind boolean;
  #L3f203e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3f2042.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f2048.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L3f204c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f2060.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f2064.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3f206a.  v0:= temp;
  #L3f206c.  if v0 != 0 then goto L3f215a;
  #L3f2070.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.sources` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L3f2074.  v1:= length @variable v0;
  #L3f2076.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.index` @type ^`int`;
  #L3f207a.  v3:= 1I;
  #L3f207c.  if v2 != v1 then goto L3f20d0;
  #L3f2080.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` @kind object;
  #L3f2084.  if v0 == 0 then goto L3f20c4;
  #L3f2088.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f208e.  v1:= temp;
  #L3f2090.  if v1 != v3 then goto L3f20ae;
  #L3f2094.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2098.  v2:= 0I;
  #L3f209a.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f20a0.  v0:= temp @kind object;
  #L3f20a2.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L3f20a6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f20ac.  goto L3f20ce;
  #L3f20ae.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f20b2.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L3f20b6.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L3f20bc.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f20c2.  goto L3f20ce;
  #L3f20c4.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f20c8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f20ce.  return @kind void;
  #L3f20d0.  v4:= v0[v2] @kind object;
  #L3f20d4.  if v4 != 0 then goto L3f2122;
  #L3f20d8.  v4:= new `java.lang.NullPointerException`;
  #L3f20dc.  v5:= "A Publisher entry is null" @kind object;
  #L3f20e0.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f20e6.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L3f20ea.  if v5 == 0 then goto L3f2116;
  #L3f20ee.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` @kind object;
  #L3f20f2.  if v5 != 0 then goto L3f210a;
  #L3f20f6.  v5:= new `java.util.ArrayList`;
  #L3f20fa.  v6:= v1 - v2 @kind int;
  #L3f20fe.  v6:= v6 + v3 @kind int;
  #L3f2100.  call `<init>`(v5, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3f2106.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` := v5 @kind object;
  #L3f210a.  call temp:= `add`(v5, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f2110.  v2:= v2 + 1;
  #L3f2114.  goto L3f207a;
  #L3f2116.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f211a.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2120.  return @kind void;
  #L3f2122.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @type ^`long` @kind wide;
  #L3f2126.  v7:= 0L;
  #L3f212a.  v3:= lcmp(v5, v7);
  #L3f212e.  if v3 == 0 then goto L3f213c;
  #L3f2132.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @type ^`long` := v7 @kind wide;
  #L3f2136.  call `produced`(v9, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.produced:(J)V` @kind virtual;
  #L3f213c.  call `subscribe`(v4, v9) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3f2142.  v2:= v2 + 1;
  #L3f2146.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.index` @type ^`int` := v2;
  #L3f214a.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f214e.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f2154.  v3:= temp;
  #L3f2156.  if v3 != 0 then goto L3f207a;
  #L3f215a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f216c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L3f2170.  if v0 == 0 then goto L3f21a8;
  #L3f2174.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` @kind object;
  #L3f2178.  if v0 != 0 then goto L3f219a;
  #L3f217c.  v0:= new `java.util.ArrayList`;
  #L3f2180.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.sources` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L3f2184.  v1:= length @variable v1;
  #L3f2186.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.index` @type ^`int`;
  #L3f218a.  v1:= v1 - v2 @kind int;
  #L3f218c.  v1:= v1 + 1;
  #L3f2190.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3f2196.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` := v0 @kind object;
  #L3f219a.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f21a0.  call `onComplete`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onComplete:()V` @kind virtual;
  #L3f21a6.  goto L3f21b2;
  #L3f21a8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f21ac.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f21b2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f21c4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @type ^`long` @kind wide;
  #L3f21c8.  v2:= 1L;
  #L3f21cc.  v0:= v0 + v2 @kind long;
  #L3f21ce.  v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @type ^`long` := v0 @kind wide;
  #L3f21d2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f21d6.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f21dc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L3f21f0.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L3f21f6.  return @kind void;
}
