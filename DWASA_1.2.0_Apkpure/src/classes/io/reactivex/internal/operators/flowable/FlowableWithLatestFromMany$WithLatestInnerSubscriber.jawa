record `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.hasValue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40f1c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40f1ca.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` := v1 @kind object;
  #L40f1ce.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.index` @type ^`int` := v2;
  #L40f1d2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.dispose:()V` @AccessFlag  {
    temp;

  #L40f1e4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40f1ea.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40f1fc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` @kind object;
  #L40f200.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.index` @type ^`int`;
  #L40f204.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.hasValue` @type ^`boolean` @kind boolean;
  #L40f208.  call `innerComplete`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.innerComplete:(IZ)V` @kind virtual;
  #L40f20e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f220.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` @kind object;
  #L40f224.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.index` @type ^`int`;
  #L40f228.  call `innerError`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.innerError:(ILjava/lang/Throwable;)V` @kind virtual;
  #L40f22e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f240.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.hasValue` @type ^`boolean` @kind boolean;
  #L40f244.  if v0 != 0 then goto L40f24e;
  #L40f248.  v0:= 1I;
  #L40f24a.  v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.hasValue` @type ^`boolean` := v0 @kind boolean;
  #L40f24e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` @kind object;
  #L40f252.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber.index` @type ^`int`;
  #L40f256.  call `innerNext`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.innerNext:(ILjava/lang/Object;)V` @kind virtual;
  #L40f25c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f270.  v0:= 9223372036854775807L;
  #L40f27a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L40f280.  return @kind void;
}
