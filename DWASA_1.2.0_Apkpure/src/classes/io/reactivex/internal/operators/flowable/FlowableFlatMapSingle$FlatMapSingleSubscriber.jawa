record `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f94fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f9502.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f9506.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f950a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L3f950e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int` := v4;
  #L3f9512.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3f9516.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f951c.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3f9520.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L3f9524.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L3f952a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L3f952e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3f9532.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3f9538.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L3f953c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3f9540.  v2:= 1I;
  #L3f9542.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L3f9548.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L3f954c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f9550.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f9556.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3f955a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f956c.  v0:= 1I;
  #L3f956e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f9572.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9576.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f957c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f9580.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3f9586.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L3f9598.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f959c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f95a2.  v0:= temp @kind object;
  #L3f95a4.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L3f95a8.  if v0 == 0 then goto L3f95b2;
  #L3f95ac.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3f95b2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3f95c4.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f95ca.  v0:= temp;
  #L3f95cc.  if v0 != 0 then goto L3f95d6;
  #L3f95d0.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drainLoop:()V` @kind virtual;
  #L3f95d6.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v15 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L3f95e8.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f95ec.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f95f0.  v2:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f95f4.  v3:= 1I;
  #L3f95f6.  v4:= 1I;
  #L3f95f8.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f95fc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f9602.  v5:= temp @kind wide;
  #L3f9604.  v7:= 0L;
  #L3f9608.  v9:= v7 @kind wide;
  #L3f960a.  v11:= 0I;
  #L3f960c.  v12:= lcmp(v9, v5);
  #L3f9610.  if v12 == 0 then goto L3f96ce;
  #L3f9614.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f9618.  if v12 == 0 then goto L3f9624;
  #L3f961c.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @kind virtual;
  #L3f9622.  return @kind void;
  #L3f9624.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f9628.  if v12 != 0 then goto L3f965a;
  #L3f962c.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f9630.  call temp:= `get`(v12) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f9636.  v12:= temp @kind object;
  #L3f9638.  v12:= (`java.lang.Throwable`) v12 @kind object;
  #L3f963c.  if v12 == 0 then goto L3f965a;
  #L3f9640.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f9644.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f964a.  v1:= temp @kind object;
  #L3f964c.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @kind virtual;
  #L3f9652.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f9658.  return @kind void;
  #L3f965a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3f9660.  v12:= temp;
  #L3f9662.  if v12 != 0 then goto L3f966a;
  #L3f9666.  v12:= 1I;
  #L3f9668.  goto L3f966c;
  #L3f966a.  v12:= 0I;
  #L3f966c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f9672.  v13:= temp @kind object;
  #L3f9674.  v13:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v13 @kind object;
  #L3f9678.  if v13 == 0 then goto L3f9686;
  #L3f967c.  call temp:= `poll`(v13) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f9682.  v13:= temp @kind object;
  #L3f9684.  goto L3f9688;
  #L3f9686.  v13:= 0I;
  #L3f9688.  if v13 != 0 then goto L3f9690;
  #L3f968c.  v14:= 1I;
  #L3f968e.  goto L3f9692;
  #L3f9690.  v14:= 0I;
  #L3f9692.  if v12 == 0 then goto L3f96ba;
  #L3f9696.  if v14 == 0 then goto L3f96ba;
  #L3f969a.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f969e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f96a4.  v1:= temp @kind object;
  #L3f96a6.  if v1 == 0 then goto L3f96b2;
  #L3f96aa.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f96b0.  goto L3f96b8;
  #L3f96b2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f96b8.  return @kind void;
  #L3f96ba.  if v14 == 0 then goto L3f96c0;
  #L3f96be.  goto L3f96ce;
  #L3f96c0.  call `onNext`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f96c6.  v11:= 1L;
  #L3f96ca.  v9:= v9 + v11 @kind long;
  #L3f96cc.  goto L3f960a;
  #L3f96ce.  v12:= lcmp(v9, v5);
  #L3f96d2.  if v12 != 0 then goto L3f9774;
  #L3f96d6.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f96da.  if v5 == 0 then goto L3f96e6;
  #L3f96de.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @kind virtual;
  #L3f96e4.  return @kind void;
  #L3f96e6.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f96ea.  if v5 != 0 then goto L3f971c;
  #L3f96ee.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f96f2.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f96f8.  v5:= temp @kind object;
  #L3f96fa.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L3f96fe.  if v5 == 0 then goto L3f971c;
  #L3f9702.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f9706.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f970c.  v1:= temp @kind object;
  #L3f970e.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @kind virtual;
  #L3f9714.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f971a.  return @kind void;
  #L3f971c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3f9722.  v5:= temp;
  #L3f9724.  if v5 != 0 then goto L3f972c;
  #L3f9728.  v5:= 1I;
  #L3f972a.  goto L3f972e;
  #L3f972c.  v5:= 0I;
  #L3f972e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f9734.  v6:= temp @kind object;
  #L3f9736.  v6:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v6 @kind object;
  #L3f973a.  if v6 == 0 then goto L3f974a;
  #L3f973e.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3f9744.  v6:= temp;
  #L3f9746.  if v6 == 0 then goto L3f974c;
  #L3f974a.  v11:= 1I;
  #L3f974c.  if v5 == 0 then goto L3f9774;
  #L3f9750.  if v11 == 0 then goto L3f9774;
  #L3f9754.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f9758.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f975e.  v1:= temp @kind object;
  #L3f9760.  if v1 == 0 then goto L3f976c;
  #L3f9764.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f976a.  goto L3f9772;
  #L3f976c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f9772.  return @kind void;
  #L3f9774.  v5:= lcmp(v9, v7);
  #L3f9778.  if v5 == 0 then goto L3f979e;
  #L3f977c.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f9780.  call temp:= `produced`(v5, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f9786.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int`;
  #L3f978a.  v6:= 2147483647I;
  #L3f9790.  if v5 == v6 then goto L3f979e;
  #L3f9794.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9798.  call `request`(v5, v9) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f979e.  v4:= -v4 @kind int;
  #L3f97a0.  call temp:= `addAndGet`(v15, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.addAndGet:(I)I` @kind virtual;
  #L3f97a6.  v4:= temp;
  #L3f97a8.  if v4 != 0 then goto L3f95f8;
  #L3f97ac.  return @kind void;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `getOrCreateQueue`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f94b0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f94b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f94ba.  v0:= temp @kind object;
  #L3f94bc.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L3f94c0.  if v0 == 0 then goto L3f94c6;
  #L3f94c4.  return v0 @kind object;
  #L3f94c6.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3f94ca.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f94d0.  v1:= temp;
  #L3f94d2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3f94d8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f94dc.  v2:= 0I;
  #L3f94de.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f94e4.  v1:= temp;
  #L3f94e6.  if v1 == 0 then goto L3f94b0;
  #L3f94ea.  return v0 @kind object;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f97c0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f97c4.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f97ca.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f97ce.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f97d4.  v3:= temp;
  #L3f97d6.  if v3 == 0 then goto L3f9826;
  #L3f97da.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f97de.  if v3 != 0 then goto L3f97f8;
  #L3f97e2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f97e6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f97ec.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f97f0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3f97f6.  goto L3f9814;
  #L3f97f8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int`;
  #L3f97fc.  v4:= 2147483647I;
  #L3f9802.  if v3 == v4 then goto L3f9814;
  #L3f9806.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f980a.  v0:= 1L;
  #L3f980e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f9814.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f9818.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f981e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L3f9824.  goto L3f982c;
  #L3f9826.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f982c.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.innerSuccess:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f9840.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f9844.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f984a.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.get:()I` @kind virtual;
  #L3f9850.  v6:= temp;
  #L3f9852.  if v6 != 0 then goto L3f9936;
  #L3f9856.  v6:= 1I;
  #L3f9858.  v0:= 0I;
  #L3f985a.  call temp:= `compareAndSet`(v5, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.compareAndSet:(II)Z` @kind virtual;
  #L3f9860.  v1:= temp;
  #L3f9862.  if v1 == 0 then goto L3f9936;
  #L3f9866.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f986a.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f9870.  v1:= temp;
  #L3f9872.  if v1 != 0 then goto L3f9878;
  #L3f9876.  goto L3f987a;
  #L3f9878.  v6:= 0I;
  #L3f987a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f987e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f9884.  v0:= temp @kind wide;
  #L3f9886.  v2:= 0L;
  #L3f988a.  v4:= lcmp(v0, v2);
  #L3f988e.  if v4 == 0 then goto L3f9910;
  #L3f9892.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f9896.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f989c.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f98a0.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f98a6.  v7:= temp @kind object;
  #L3f98a8.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L3f98ac.  if v6 == 0 then goto L3f98e8;
  #L3f98b0.  if v7 == 0 then goto L3f98c0;
  #L3f98b4.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3f98ba.  v6:= temp;
  #L3f98bc.  if v6 == 0 then goto L3f98e8;
  #L3f98c0.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f98c4.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f98ca.  v6:= temp @kind object;
  #L3f98cc.  if v6 == 0 then goto L3f98dc;
  #L3f98d0.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f98d4.  call `onError`(v7, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f98da.  goto L3f98e6;
  #L3f98dc.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f98e0.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f98e6.  return @kind void;
  #L3f98e8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f98ec.  v0:= 1L;
  #L3f98f0.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f98f6.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int`;
  #L3f98fa.  v7:= 2147483647I;
  #L3f9900.  if v6 == v7 then goto L3f9922;
  #L3f9904.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9908.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f990e.  goto L3f9922;
  #L3f9910.  call temp:= `getOrCreateQueue`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L3f9916.  v6:= temp @kind object;
  #L3f9918.  @monitorenter v6
  #L3f991a.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f9920.  @monitorexit v6
  #L3f9922.  call temp:= `decrementAndGet`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3f9928.  v6:= temp;
  #L3f992a.  if v6 != 0 then goto L3f9960;
  #L3f992e.  return @kind void;
  #L3f9930.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f9932.  @monitorexit v6
  #L3f9934.  throw v7;
  #L3f9936.  call temp:= `getOrCreateQueue`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L3f993c.  v6:= temp @kind object;
  #L3f993e.  @monitorenter v6
  #L3f9940.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f9946.  @monitorexit v6
  #L3f9948.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f994c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f9952.  call temp:= `getAndIncrement`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f9958.  v6:= temp;
  #L3f995a.  if v6 == 0 then goto L3f9960;
  #L3f995e.  return @kind void;
  #L3f9960.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drainLoop:()V` @kind virtual;
  #L3f9966.  return @kind void;
  #L3f9968.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f996a.  @monitorexit v6
  #L3f996c.  throw v7;
  catch `java.lang.Throwable` @[L3f991a..L3f9922] goto L3f9930;
  catch `java.lang.Throwable` @[L3f9932..L3f9934] goto L3f9930;
  catch `java.lang.Throwable` @[L3f9940..L3f9948] goto L3f9968;
  catch `java.lang.Throwable` @[L3f996a..L3f996c] goto L3f9968;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f99a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f99ac.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f99b2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L3f99b8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f99cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f99d0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f99d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f99da.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f99e0.  v0:= temp;
  #L3f99e2.  if v0 == 0 then goto L3f9a00;
  #L3f99e6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f99ea.  if v2 != 0 then goto L3f99f8;
  #L3f99ee.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f99f2.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3f99f8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L3f99fe.  goto L3f9a06;
  #L3f9a00.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f9a06.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f9a18.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f9a1c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f9a22.  v3:= temp @kind object;
  #L3f9a24.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L3f9a28.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f9a2e.  v3:= temp @kind object;
  #L3f9a30.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L3f9a34.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f9a38.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3f9a3e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver`;
  #L3f9a42.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;)V` @kind direct;
  #L3f9a48.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f9a4c.  if v1 != 0 then goto L3f9a66;
  #L3f9a50.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f9a54.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f9a5a.  v1:= temp;
  #L3f9a5c.  if v1 == 0 then goto L3f9a66;
  #L3f9a60.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L3f9a66.  return @kind void;
  #L3f9a68.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f9a6a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f9a70.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9a74.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f9a7a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f9a80.  return @kind void;
  catch `java.lang.Throwable` @[L3f9a18..L3f9a34] goto L3f9a68;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f9aa0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9aa4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f9aaa.  v0:= temp;
  #L3f9aac.  if v0 == 0 then goto L3f9ae6;
  #L3f9ab0.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f9ab4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f9ab8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f9abe.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int`;
  #L3f9ac2.  v1:= 2147483647I;
  #L3f9ac8.  if v0 != v1 then goto L3f9ade;
  #L3f9acc.  v0:= 9223372036854775807L;
  #L3f9ad6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f9adc.  goto L3f9ae6;
  #L3f9ade.  v0:= (`long`) v0 @kind i2l;
  #L3f9ae0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f9ae6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9af8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f9afe.  v0:= temp;
  #L3f9b00.  if v0 == 0 then goto L3f9b14;
  #L3f9b04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f9b08.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f9b0e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L3f9b14.  return @kind void;
}
