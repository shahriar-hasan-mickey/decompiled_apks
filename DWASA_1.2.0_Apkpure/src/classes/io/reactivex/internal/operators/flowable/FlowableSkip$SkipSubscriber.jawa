record `io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.remaining` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip$SkipSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L407c28.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L407c2e.  v0.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L407c32.  v0.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L407c36.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip$SkipSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407c48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407c4c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L407c52.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip$SkipSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407c64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407c68.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L407c6e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip$SkipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407c80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407c84.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407c8a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip$SkipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L407c9c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.remaining` @type ^`long` @kind wide;
  #L407ca0.  v2:= 0L;
  #L407ca4.  v4:= lcmp(v0, v2);
  #L407ca8.  if v4 == 0 then goto L407cb8;
  #L407cac.  v2:= 1L;
  #L407cb0.  v0:= v0 - v2 @kind long;
  #L407cb2.  v5.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.remaining` @type ^`long` := v0 @kind wide;
  #L407cb6.  goto L407cc2;
  #L407cb8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407cbc.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L407cc2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip$SkipSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L407cd4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407cd8.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L407cde.  v0:= temp;
  #L407ce0.  if v0 == 0 then goto L407cfc;
  #L407ce4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.remaining` @type ^`long` @kind wide;
  #L407ce8.  v3.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L407cec.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407cf0.  call `onSubscribe`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L407cf6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407cfc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip$SkipSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407d10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkip$SkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407d14.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407d1a.  return @kind void;
}
