record `io.reactivex.internal.operators.flowable.FlowableInterval` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableInterval.initialDelay` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableInterval.period` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableInterval.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableInterval.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableInterval` v0 @kind this, `long` v1 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval;.<init>:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fd898.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L3fd89e.  v0.`io.reactivex.internal.operators.flowable.FlowableInterval.initialDelay` @type ^`long` := v1 @kind wide;
  #L3fd8a2.  v0.`io.reactivex.internal.operators.flowable.FlowableInterval.period` @type ^`long` := v3 @kind wide;
  #L3fd8a6.  v0.`io.reactivex.internal.operators.flowable.FlowableInterval.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L3fd8aa.  v0.`io.reactivex.internal.operators.flowable.FlowableInterval.scheduler` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L3fd8ae.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableInterval` v8 @kind this, `org.reactivestreams.Subscriber` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3fd8c0.  v7:= new `io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber`;
  #L3fd8c4.  call `<init>`(v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$IntervalSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3fd8ca.  call `onSubscribe`(v9, v7) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fd8d0.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableInterval.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L3fd8d4.  v9:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L3fd8d8.  if v9 == 0 then goto L3fd900;
  #L3fd8dc.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L3fd8e2.  v0:= temp @kind object;
  #L3fd8e4.  call `setResource`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$IntervalSubscriber;.setResource:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3fd8ea.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableInterval.initialDelay` @type ^`long` @kind wide;
  #L3fd8ee.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableInterval.period` @type ^`long` @kind wide;
  #L3fd8f2.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableInterval.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3fd8f6.  v1:= v7 @kind object;
  #L3fd8f8.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3fd8fe.  goto L3fd91c;
  #L3fd900.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableInterval.initialDelay` @type ^`long` @kind wide;
  #L3fd904.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableInterval.period` @type ^`long` @kind wide;
  #L3fd908.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableInterval.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3fd90c.  v1:= v7 @kind object;
  #L3fd90e.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3fd914.  v9:= temp @kind object;
  #L3fd916.  call `setResource`(v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$IntervalSubscriber;.setResource:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3fd91c.  return @kind void;
}
