record `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.boundary` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.bufferSupplier` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.other` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3efd44.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L3efd48.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L3efd4e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L3efd54.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L3efd58.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.boundary` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L3efd5c.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3efcec.  v2:= (`java.util.Collection`) v2 @kind object;
  #L3efcf0.  call temp:= `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L3efcf6.  v1:= temp;
  #L3efcf8.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3efd0c.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3efd10.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3efd16.  v1:= 1I;
  #L3efd18.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efd70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3efd74.  if v0 != 0 then goto L3efda8;
  #L3efd78.  v0:= 1I;
  #L3efd7a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3efd7e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.other` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3efd82.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3efd88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3efd8c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3efd92.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.enter:()Z` @kind virtual;
  #L3efd98.  v0:= temp;
  #L3efd9a.  if v0 == 0 then goto L3efda8;
  #L3efd9e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3efda2.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L3efda8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3efdbc.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.cancel:()V` @kind virtual;
  #L3efdc2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efd2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3efd30.  return v0;
}
procedure `void` `next`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3efdd4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3efdd8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3efdde.  v0:= temp @kind object;
  #L3efde0.  v1:= "The buffer supplied is null" @kind object;
  #L3efde4.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efdea.  v0:= temp @kind object;
  #L3efdec.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3efdf0.  @monitorenter v2
  #L3efdf2.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3efdf6.  if v1 != 0 then goto L3efdfe;
  #L3efdfa.  @monitorexit v2
  #L3efdfc.  return @kind void;
  #L3efdfe.  v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3efe02.  @monitorexit v2
  #L3efe04.  v0:= 0I;
  #L3efe06.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3efe0c.  return @kind void;
  #L3efe0e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efe10.  @monitorexit v2
  #L3efe12.  throw v0;
  #L3efe14.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efe16.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3efe1c.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.cancel:()V` @kind virtual;
  #L3efe22.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3efe26.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3efe2c.  return @kind void;
  catch `java.lang.Throwable` @[L3efdd4..L3efdf0] goto L3efe14;
  catch `java.lang.Throwable` @[L3efdf2..L3efe04] goto L3efe0e;
  catch `java.lang.Throwable` @[L3efe10..L3efe12] goto L3efe0e;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3efe60.  @monitorenter v3
  #L3efe62.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3efe66.  if v0 != 0 then goto L3efe6e;
  #L3efe6a.  @monitorexit v3
  #L3efe6c.  return @kind void;
  #L3efe6e.  v1:= 0I;
  #L3efe70.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L3efe74.  @monitorexit v3
  #L3efe76.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3efe7a.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3efe80.  v0:= 1I;
  #L3efe82.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3efe86.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.enter:()Z` @kind virtual;
  #L3efe8c.  v0:= temp;
  #L3efe8e.  if v0 == 0 then goto L3efea2;
  #L3efe92.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3efe96.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3efe9a.  v2:= 0I;
  #L3efe9c.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L3efea2.  return @kind void;
  #L3efea4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efea6.  @monitorexit v3
  #L3efea8.  throw v0;
  catch `java.lang.Throwable` @[L3efe62..L3efe76] goto L3efea4;
  catch `java.lang.Throwable` @[L3efea6..L3efea8] goto L3efea4;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efed0.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.cancel:()V` @kind virtual;
  #L3efed6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3efeda.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3efee0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efef4.  @monitorenter v1
  #L3efef6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3efefa.  if v0 != 0 then goto L3eff02;
  #L3efefe.  @monitorexit v1
  #L3eff00.  return @kind void;
  #L3eff02.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eff08.  @monitorexit v1
  #L3eff0a.  return @kind void;
  #L3eff0c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eff0e.  @monitorexit v1
  #L3eff10.  throw v2;
  catch `java.lang.Throwable` @[L3efef6..L3eff10] goto L3eff0c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eff30.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eff34.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3eff3a.  v0:= temp;
  #L3eff3c.  if v0 != 0 then goto L3eff42;
  #L3eff40.  return @kind void;
  #L3eff42.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L3eff46.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3eff4a.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3eff50.  v0:= temp @kind object;
  #L3eff52.  v1:= "The buffer supplied is null" @kind object;
  #L3eff56.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eff5c.  v0:= temp @kind object;
  #L3eff5e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3eff62.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3eff66.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferBoundarySubscriber`;
  #L3eff6a.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferBoundarySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;)V` @kind direct;
  #L3eff70.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.other` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L3eff74.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eff78.  call `onSubscribe`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3eff7e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3eff82.  if v1 != 0 then goto L3effa0;
  #L3eff86.  v1:= 9223372036854775807L;
  #L3eff90.  call `request`(v4, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eff96.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.boundary` @type ^`org.reactivestreams.Publisher` @kind object;
  #L3eff9a.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3effa0.  return @kind void;
  #L3effa2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3effa4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3effaa.  v1:= 1I;
  #L3effac.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L3effb0.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3effb6.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3effba.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3effc0.  return @kind void;
  catch `java.lang.Throwable` @[L3eff46..L3eff62] goto L3effa2;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3effe0.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber;.requested:(J)V` @kind virtual;
  #L3effe6.  return @kind void;
}
