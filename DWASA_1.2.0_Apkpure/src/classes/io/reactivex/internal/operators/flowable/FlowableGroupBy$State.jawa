record `io.reactivex.internal.operators.flowable.FlowableGroupBy$State` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `org.reactivestreams.Publisher` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.key` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.once` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.outputFused` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @AccessFlag ;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$State.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this, `int` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.<init>:(ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3fbb04.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L3fbb0a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3fbb0e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3fbb14.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L3fbb18.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3fbb1c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3fbb22.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L3fbb26.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3fbb2a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3fbb30.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3fbb34.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3fbb38.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3fbb3e.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L3fbb42.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3fbb46.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3fbb4c.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L3fbb50.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` := v3 @kind object;
  #L3fbb54.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.key` @type ^`java.lang.Object` := v4 @kind object;
  #L3fbb58.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.delayError` @type ^`boolean` := v5 @kind boolean;
  #L3fbb5c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fbb70.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3fbb74.  v1:= 0I;
  #L3fbb76.  v2:= 1I;
  #L3fbb78.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3fbb7e.  v0:= temp;
  #L3fbb80.  if v0 == 0 then goto L3fbb92;
  #L3fbb84.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L3fbb88.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.key` @type ^`java.lang.Object` @kind object;
  #L3fbb8c.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L3fbb92.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fb9f4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3fb9f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3fb9fe.  v0:= temp;
  #L3fba00.  v1:= 1I;
  #L3fba02.  if v0 == 0 then goto L3fba12;
  #L3fba06.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fba0a.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fba10.  return v1;
  #L3fba12.  if v3 == 0 then goto L3fba5c;
  #L3fba16.  if v6 == 0 then goto L3fba36;
  #L3fba1a.  if v4 == 0 then goto L3fba5c;
  #L3fba1e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L3fba22.  if v3 == 0 then goto L3fba2e;
  #L3fba26.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fba2c.  goto L3fba34;
  #L3fba2e.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fba34.  return v1;
  #L3fba36.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L3fba3a.  if v3 == 0 then goto L3fba50;
  #L3fba3e.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fba42.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fba48.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fba4e.  return v1;
  #L3fba50.  if v4 == 0 then goto L3fba5c;
  #L3fba54.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fba5a.  return v1;
  #L3fba5c.  v3:= 0I;
  #L3fba5e.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbba4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fbba8.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fbbae.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3fbbc0.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.getAndIncrement:()I` @kind virtual;
  #L3fbbc6.  v0:= temp;
  #L3fbbc8.  if v0 == 0 then goto L3fbbce;
  #L3fbbcc.  return @kind void;
  #L3fbbce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.outputFused` @type ^`boolean` @kind boolean;
  #L3fbbd2.  if v0 == 0 then goto L3fbbde;
  #L3fbbd6.  call `drainFused`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drainFused:()V` @kind virtual;
  #L3fbbdc.  goto L3fbbe4;
  #L3fbbde.  call `drainNormal`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drainNormal:()V` @kind virtual;
  #L3fbbe4.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fbbf8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fbbfc.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fbc00.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fbc06.  v1:= temp @kind object;
  #L3fbc08.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L3fbc0c.  v2:= 1I;
  #L3fbc0e.  if v1 == 0 then goto L3fbc74;
  #L3fbc12.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3fbc16.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3fbc1c.  v3:= temp;
  #L3fbc1e.  if v3 == 0 then goto L3fbc2a;
  #L3fbc22.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fbc28.  return @kind void;
  #L3fbc2a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L3fbc2e.  if v3 == 0 then goto L3fbc50;
  #L3fbc32.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.delayError` @type ^`boolean` @kind boolean;
  #L3fbc36.  if v4 != 0 then goto L3fbc50;
  #L3fbc3a.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L3fbc3e.  if v4 == 0 then goto L3fbc50;
  #L3fbc42.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fbc48.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fbc4e.  return @kind void;
  #L3fbc50.  v4:= 0I;
  #L3fbc52.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fbc58.  if v3 == 0 then goto L3fbc74;
  #L3fbc5c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L3fbc60.  if v0 == 0 then goto L3fbc6c;
  #L3fbc64.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fbc6a.  goto L3fbc72;
  #L3fbc6c.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fbc72.  return @kind void;
  #L3fbc74.  v2:= -v2 @kind int;
  #L3fbc76.  call temp:= `addAndGet`(v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.addAndGet:(I)I` @kind virtual;
  #L3fbc7c.  v2:= temp;
  #L3fbc7e.  if v2 != 0 then goto L3fbc84;
  #L3fbc82.  return @kind void;
  #L3fbc84.  if v1 != 0 then goto L3fbc0e;
  #L3fbc88.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fbc8c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fbc92.  v1:= temp @kind object;
  #L3fbc94.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L3fbc98.  goto L3fbc0e;
}
procedure `void` `drainNormal`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L3fbcac.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fbcb0.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.delayError` @type ^`boolean` @kind boolean;
  #L3fbcb4.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fbcb8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fbcbe.  v2:= temp @kind object;
  #L3fbcc0.  v2:= (`org.reactivestreams.Subscriber`) v2 @kind object;
  #L3fbcc4.  v3:= 1I;
  #L3fbcc6.  v4:= 1I;
  #L3fbcc8.  if v2 == 0 then goto L3fbd74;
  #L3fbccc.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fbcd0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3fbcd6.  v5:= temp @kind wide;
  #L3fbcd8.  v7:= 0L;
  #L3fbcdc.  v9:= v7 @kind wide;
  #L3fbcde.  v11:= lcmp(v9, v5);
  #L3fbce2.  if v11 == 0 then goto L3fbd1e;
  #L3fbce6.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L3fbcea.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3fbcf0.  v12:= temp @kind object;
  #L3fbcf2.  if v12 != 0 then goto L3fbcfa;
  #L3fbcf6.  v13:= 1I;
  #L3fbcf8.  goto L3fbcfc;
  #L3fbcfa.  v13:= 0I;
  #L3fbcfc.  call temp:= `checkTerminated`(v14, v11, v13, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L3fbd02.  v11:= temp;
  #L3fbd04.  if v11 == 0 then goto L3fbd0a;
  #L3fbd08.  return @kind void;
  #L3fbd0a.  if v13 == 0 then goto L3fbd10;
  #L3fbd0e.  goto L3fbd1e;
  #L3fbd10.  call `onNext`(v2, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fbd16.  v11:= 1L;
  #L3fbd1a.  v9:= v9 + v11 @kind long;
  #L3fbd1c.  goto L3fbcde;
  #L3fbd1e.  v11:= lcmp(v9, v5);
  #L3fbd22.  if v11 != 0 then goto L3fbd40;
  #L3fbd26.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L3fbd2a.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3fbd30.  v12:= temp;
  #L3fbd32.  call temp:= `checkTerminated`(v14, v11, v12, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L3fbd38.  v11:= temp;
  #L3fbd3a.  if v11 == 0 then goto L3fbd40;
  #L3fbd3e.  return @kind void;
  #L3fbd40.  v11:= lcmp(v9, v7);
  #L3fbd44.  if v11 == 0 then goto L3fbd74;
  #L3fbd48.  v7:= 9223372036854775807L;
  #L3fbd52.  v11:= lcmp(v5, v7);
  #L3fbd56.  if v11 == 0 then goto L3fbd66;
  #L3fbd5a.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fbd5e.  v6:= -v9 @kind long;
  #L3fbd60.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L3fbd66.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L3fbd6a.  v5:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fbd6e.  call `request`(v5, v9) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3fbd74.  v4:= -v4 @kind int;
  #L3fbd76.  call temp:= `addAndGet`(v14, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.addAndGet:(I)I` @kind virtual;
  #L3fbd7c.  v4:= temp;
  #L3fbd7e.  if v4 != 0 then goto L3fbd84;
  #L3fbd82.  return @kind void;
  #L3fbd84.  if v2 != 0 then goto L3fbcc8;
  #L3fbd88.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fbd8c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fbd92.  v2:= temp @kind object;
  #L3fbd94.  v2:= (`org.reactivestreams.Subscriber`) v2 @kind object;
  #L3fbd98.  goto L3fbcc8;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fba70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fba74.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3fba7a.  v0:= temp;
  #L3fba7c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbdac.  v0:= 1I;
  #L3fbdae.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` := v0 @kind boolean;
  #L3fbdb2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L3fbdb8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L3fbdcc.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L3fbdd0.  v1:= 1I;
  #L3fbdd2.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` := v1 @kind boolean;
  #L3fbdd6.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L3fbddc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbdf0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fbdf4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fbdfa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L3fbe00.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fbab4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fbab8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3fbabe.  v0:= temp @kind object;
  #L3fbac0.  if v0 == 0 then goto L3fbad2;
  #L3fbac4.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @type ^`int`;
  #L3fbac8.  v1:= v1 + 1;
  #L3fbacc.  v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @type ^`int` := v1;
  #L3fbad0.  return v0 @kind object;
  #L3fbad2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @type ^`int`;
  #L3fbad6.  if v0 == 0 then goto L3fbaf0;
  #L3fbada.  v1:= 0I;
  #L3fbadc.  v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @type ^`int` := v1;
  #L3fbae0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L3fbae4.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fbae8.  v2:= (`long`) v0 @kind i2l;
  #L3fbaea.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3fbaf0.  v0:= 0I;
  #L3fbaf2.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbe14.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3fbe1a.  v0:= temp;
  #L3fbe1c.  if v0 == 0 then goto L3fbe30;
  #L3fbe20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fbe24.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fbe2a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L3fbe30.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fba90.  v0:= 2I;
  #L3fba92.  v2:= v2 ^& v0 @kind int;
  #L3fba94.  if v2 == 0 then goto L3fbaa0;
  #L3fba98.  v2:= 1I;
  #L3fba9a.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L3fba9e.  return v0;
  #L3fbaa0.  v2:= 0I;
  #L3fbaa2.  return v2;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fbe44.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3fbe48.  v1:= 0I;
  #L3fbe4a.  v2:= 1I;
  #L3fbe4c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3fbe52.  v0:= temp;
  #L3fbe54.  if v0 == 0 then goto L3fbe70;
  #L3fbe58.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fbe5e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fbe62.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3fbe68.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L3fbe6e.  goto L3fbe84;
  #L3fbe70.  v0:= new `java.lang.IllegalStateException`;
  #L3fbe74.  v1:= "Only one Subscriber allowed!" @kind object;
  #L3fbe78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbe7e.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3fbe84.  return @kind void;
}
