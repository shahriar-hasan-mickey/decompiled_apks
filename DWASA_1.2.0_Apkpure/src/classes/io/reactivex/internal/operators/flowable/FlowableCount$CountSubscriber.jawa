record `io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.count` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount$CountSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f3858.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f385e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount$CountSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3870.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L3f3876.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f387a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f3880.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount$CountSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3894.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.count` @type ^`long` @kind wide;
  #L3f3898.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f389e.  v0:= temp @kind object;
  #L3f38a0.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount$CountSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3f38a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount$CountSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f38b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f38bc.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f38c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount$CountSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f38d4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.count` @type ^`long` @kind wide;
  #L3f38d8.  v2:= 1L;
  #L3f38dc.  v0:= v0 + v2 @kind long;
  #L3f38de.  v4.`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.count` @type ^`long` := v0 @kind wide;
  #L3f38e2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount$CountSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f38f4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f38f8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f38fe.  v0:= temp;
  #L3f3900.  if v0 == 0 then goto L3f3922;
  #L3f3904.  v2.`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f3908.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f390c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f3912.  v0:= 9223372036854775807L;
  #L3f391c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f3922.  return @kind void;
}
