record `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.emitted` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L402650.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L402656.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40265a.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` := v2 @kind object;
  #L40265e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402670.  v0:= -9223372036854775808L;
  #L402674.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.getAndSet:(J)J` @kind virtual;
  #L40267a.  v2:= temp @kind wide;
  #L40267c.  v4:= lcmp(v2, v0);
  #L402680.  if v4 == 0 then goto L402698;
  #L402684.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` @kind object;
  #L402688.  call `remove`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.remove:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;)V` @kind virtual;
  #L40268e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` @kind object;
  #L402692.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.drain:()V` @kind virtual;
  #L402698.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402624.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.get:()J` @kind virtual;
  #L40262a.  v0:= temp @kind wide;
  #L40262c.  v2:= -9223372036854775808L;
  #L402630.  v4:= lcmp(v0, v2);
  #L402634.  if v4 != 0 then goto L40263c;
  #L402638.  v0:= 1I;
  #L40263a.  goto L40263e;
  #L40263c.  v0:= 0I;
  #L40263e.  return v0;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4026ac.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4026b2.  v0:= temp;
  #L4026b4.  if v0 == 0 then goto L4026c8;
  #L4026b8.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4026be.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` @kind object;
  #L4026c2.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.drain:()V` @kind virtual;
  #L4026c8.  return @kind void;
}
