record `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapSupport;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f2b6c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L3f2b72.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport` := v1 @kind object;
  #L3f2b76.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2b88.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` @kind wide;
  #L3f2b8c.  v2:= 0L;
  #L3f2b90.  v4:= lcmp(v0, v2);
  #L3f2b94.  if v4 == 0 then goto L3f2ba2;
  #L3f2b98.  v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` := v2 @kind wide;
  #L3f2b9c.  call `produced`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.produced:(J)V` @kind virtual;
  #L3f2ba2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport` @kind object;
  #L3f2ba6.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapSupport;.innerComplete:()V` @kind interface;
  #L3f2bac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2bc0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` @kind wide;
  #L3f2bc4.  v2:= 0L;
  #L3f2bc8.  v4:= lcmp(v0, v2);
  #L3f2bcc.  if v4 == 0 then goto L3f2bda;
  #L3f2bd0.  v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` := v2 @kind wide;
  #L3f2bd4.  call `produced`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.produced:(J)V` @kind virtual;
  #L3f2bda.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport` @kind object;
  #L3f2bde.  call `innerError`(v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapSupport;.innerError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2be4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f2bf8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` @kind wide;
  #L3f2bfc.  v2:= 1L;
  #L3f2c00.  v0:= v0 + v2 @kind long;
  #L3f2c02.  v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` := v0 @kind wide;
  #L3f2c06.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport` @kind object;
  #L3f2c0a.  call `innerNext`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapSupport;.innerNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f2c10.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L3f2c24.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L3f2c2a.  return @kind void;
}
