record `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.requested` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.source` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.<init>:(Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L403f58.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L403f5e.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.source` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L403f62.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L403f66.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L403f6c.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L403f70.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L403f74.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L403f7a.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L403f7e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403f90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L403f94.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L403f9a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403fac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L403fb0.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.cancel:()V` @kind virtual;
  #L403fb6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L403fba.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403fbe.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L403fc4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403fd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L403fdc.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.cancel:()V` @kind virtual;
  #L403fe2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L403fe6.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403fea.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L403ff0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L404004.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.getAndIncrement:()I` @kind virtual;
  #L40400a.  v2:= temp;
  #L40400c.  if v2 != 0 then goto L404048;
  #L404010.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404014.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40401a.  v2:= temp @kind object;
  #L40401c.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L404020.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L404026.  v2:= temp;
  #L404028.  if v2 == 0 then goto L40402e;
  #L40402c.  return @kind void;
  #L40402e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L404032.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L404036.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40403c.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.decrementAndGet:()I` @kind virtual;
  #L404042.  v2:= temp;
  #L404044.  if v2 != 0 then goto L404010;
  #L404048.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40405c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404060.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L404064.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40406a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40407c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404080.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L404084.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L40408a.  return @kind void;
}
