record `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBufferTask` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBufferTask.bufferSize` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBufferTask` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBufferTask;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L404ae8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L404aee.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBufferTask.bufferSize` @type ^`int` := v1;
  #L404af2.  return @kind void;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` `call`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBufferTask` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBufferTask;.call:()Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L404aac.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer`;
  #L404ab0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBufferTask.bufferSize` @type ^`int`;
  #L404ab4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L404aba.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBufferTask` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBufferTask;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L404acc.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBufferTask;.call:()Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;` @kind virtual;
  #L404ad2.  v0:= temp @kind object;
  #L404ad4.  return v0 @kind object;
}
