record `io.reactivex.internal.operators.flowable.FlowableConcatMap$1` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$1.$SwitchMap$io$reactivex$internal$util$ErrorMode` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3f2258.  call temp:= `values`() @signature `Lio/reactivex/internal/util/ErrorMode;.values:()[Lio/reactivex/internal/util/ErrorMode;` @kind static;
  #L3f225e.  v0:= temp @kind object;
  #L3f2260.  v0:= length @variable v0;
  #L3f2262.  v0:= new `int`[v0];
  #L3f2266.  `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$1.$SwitchMap$io$reactivex$internal$util$ErrorMode` @type ^`int`[] := v0 @kind object;
  #L3f226a.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$1.$SwitchMap$io$reactivex$internal$util$ErrorMode` @type ^`int`[] @kind object;
  #L3f226e.  v1:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f2272.  call temp:= `ordinal`(v1) @signature `Lio/reactivex/internal/util/ErrorMode;.ordinal:()I` @kind virtual;
  #L3f2278.  v1:= temp;
  #L3f227a.  v2:= 1I;
  #L3f227c.  v0[v1]:= v2;
  #L3f2280.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$1.$SwitchMap$io$reactivex$internal$util$ErrorMode` @type ^`int`[] @kind object;
  #L3f2284.  v1:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f2288.  call temp:= `ordinal`(v1) @signature `Lio/reactivex/internal/util/ErrorMode;.ordinal:()I` @kind virtual;
  #L3f228e.  v1:= temp;
  #L3f2290.  v2:= 2I;
  #L3f2292.  v0[v1]:= v2;
  #L3f2296.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L3f226a..L3f2280] goto L3f2280;
  catch `java.lang.NoSuchFieldError` @[L3f2280..L3f2296] goto L3f2296;
}
