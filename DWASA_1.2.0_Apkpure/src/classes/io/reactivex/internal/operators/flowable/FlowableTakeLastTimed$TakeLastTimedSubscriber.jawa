record `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.cancelled` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.count` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.error` @AccessFlag ;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4096e4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4096ea.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4096ee.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4096f4.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4096f8.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4096fc.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.count` @type ^`long` := v3 @kind wide;
  #L409700.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.time` @type ^`long` := v5 @kind wide;
  #L409704.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L409708.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` := v8 @kind object;
  #L40970c.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L409710.  call `<init>`(v2, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L409716.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L40971a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.delayError` @type ^`boolean` := v10 @kind boolean;
  #L40971e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409730.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L409734.  if v0 != 0 then goto L40975e;
  #L409738.  v0:= 1I;
  #L40973a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40973e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409742.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409748.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40974e.  v0:= temp;
  #L409750.  if v0 != 0 then goto L40975e;
  #L409754.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L409758.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40975e.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v2 @kind this, `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.checkTerminated:(ZLorg/reactivestreams/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L409674.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L409678.  v1:= 1I;
  #L40967a.  if v0 == 0 then goto L40968a;
  #L40967e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L409682.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L409688.  return v1;
  #L40968a.  if v5 == 0 then goto L4096aa;
  #L40968e.  if v3 == 0 then goto L4096d0;
  #L409692.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L409696.  if v3 == 0 then goto L4096a2;
  #L40969a.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4096a0.  goto L4096a8;
  #L4096a2.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4096a8.  return v1;
  #L4096aa.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4096ae.  if v5 == 0 then goto L4096c4;
  #L4096b2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4096b6.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4096bc.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4096c2.  return v1;
  #L4096c4.  if v3 == 0 then goto L4096d0;
  #L4096c8.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4096ce.  return v1;
  #L4096d0.  v3:= 0I;
  #L4096d2.  return v3;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L409770.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.getAndIncrement:()I` @kind virtual;
  #L409776.  v0:= temp;
  #L409778.  if v0 == 0 then goto L40977e;
  #L40977c.  return @kind void;
  #L40977e.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409782.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L409786.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L40978a.  v3:= 1I;
  #L40978c.  v4:= 1I;
  #L40978e.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L409792.  if v5 == 0 then goto L409816;
  #L409796.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L40979c.  v5:= temp;
  #L40979e.  call temp:= `checkTerminated`(v13, v5, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.checkTerminated:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L4097a4.  v5:= temp;
  #L4097a6.  if v5 == 0 then goto L4097ac;
  #L4097aa.  return @kind void;
  #L4097ac.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4097b0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4097b6.  v5:= temp @kind wide;
  #L4097b8.  v7:= 0L;
  #L4097bc.  v9:= v7 @kind wide;
  #L4097be.  call temp:= `peek`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4097c4.  v11:= temp @kind object;
  #L4097c6.  if v11 != 0 then goto L4097ce;
  #L4097ca.  v11:= 1I;
  #L4097cc.  goto L4097d0;
  #L4097ce.  v11:= 0I;
  #L4097d0.  call temp:= `checkTerminated`(v13, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.checkTerminated:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L4097d6.  v11:= temp;
  #L4097d8.  if v11 == 0 then goto L4097de;
  #L4097dc.  return @kind void;
  #L4097de.  v11:= lcmp(v5, v9);
  #L4097e2.  if v11 != 0 then goto L4097fa;
  #L4097e6.  v5:= lcmp(v9, v7);
  #L4097ea.  if v5 == 0 then goto L409816;
  #L4097ee.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4097f2.  call temp:= `produced`(v5, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4097f8.  goto L409816;
  #L4097fa.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L409800.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L409806.  v11:= temp @kind object;
  #L409808.  call `onNext`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40980e.  v11:= 1L;
  #L409812.  v9:= v9 + v11 @kind long;
  #L409814.  goto L4097be;
  #L409816.  v4:= -v4 @kind int;
  #L409818.  call temp:= `addAndGet`(v13, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.addAndGet:(I)I` @kind virtual;
  #L40981e.  v4:= temp;
  #L409820.  if v4 != 0 then goto L40978e;
  #L409824.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L409838.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40983c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L409840.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L409846.  v0:= temp @kind wide;
  #L409848.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40984c.  call `trim`(v3, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.trim:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L409852.  v0:= 1I;
  #L409854.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L409858.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.drain:()V` @kind virtual;
  #L40985e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L409870.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L409874.  if v0 == 0 then goto L409892;
  #L409878.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40987c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L409880.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L409886.  v0:= temp @kind wide;
  #L409888.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40988c.  call `trim`(v3, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.trim:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L409892.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.error` @type ^`java.lang.Throwable` := v4 @kind object;
  #L409896.  v4:= 1I;
  #L409898.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.done` @type ^`boolean` := v4 @kind boolean;
  #L40989c.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.drain:()V` @kind virtual;
  #L4098a2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4098b4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4098b8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L4098bc.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4098c0.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4098c6.  v1:= temp @kind wide;
  #L4098c8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4098ce.  v3:= temp @kind object;
  #L4098d0.  call temp:= `offer`(v0, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4098d6.  call `trim`(v4, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.trim:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4098dc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4098f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4098f4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4098fa.  v0:= temp;
  #L4098fc.  if v0 == 0 then goto L40991e;
  #L409900.  v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L409904.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409908.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40990e.  v0:= 9223372036854775807L;
  #L409918.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40991e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409930.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L409936.  v0:= temp;
  #L409938.  if v0 == 0 then goto L40994c;
  #L40993c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L409940.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L409946.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.drain:()V` @kind virtual;
  #L40994c.  return @kind void;
}
procedure `void` `trim`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v11 @kind this, `long` v12 , `io.reactivex.internal.queue.SpscLinkedArrayQueue` v14 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.trim:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L409960.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.time` @type ^`long` @kind wide;
  #L409964.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.count` @type ^`long` @kind wide;
  #L409968.  v4:= 1I;
  #L40996a.  v5:= 9223372036854775807L;
  #L409974.  v7:= lcmp(v2, v5);
  #L409978.  if v7 != 0 then goto L409980;
  #L40997c.  v5:= 1I;
  #L40997e.  goto L409982;
  #L409980.  v5:= 0I;
  #L409982.  call temp:= `isEmpty`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L409988.  v6:= temp;
  #L40998a.  if v6 != 0 then goto L4099d4;
  #L40998e.  call temp:= `peek`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L409994.  v6:= temp @kind object;
  #L409996.  v6:= (`java.lang.Long`) v6 @kind object;
  #L40999a.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4099a0.  v6:= temp @kind wide;
  #L4099a2.  v8:= v12 - v0 @kind long;
  #L4099a6.  v10:= lcmp(v6, v8);
  #L4099aa.  if v10 < 0 then goto L4099c6;
  #L4099ae.  if v5 != 0 then goto L4099d4;
  #L4099b2.  call temp:= `size`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.size:()I` @kind virtual;
  #L4099b8.  v6:= temp;
  #L4099ba.  v6:= v6 ^> v4 @kind int;
  #L4099bc.  v6:= (`long`) v6 @kind i2l;
  #L4099be.  v8:= lcmp(v6, v2);
  #L4099c2.  if v8 <= 0 then goto L4099d4;
  #L4099c6.  call temp:= `poll`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4099cc.  call temp:= `poll`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4099d2.  goto L409982;
  #L4099d4.  return @kind void;
}
