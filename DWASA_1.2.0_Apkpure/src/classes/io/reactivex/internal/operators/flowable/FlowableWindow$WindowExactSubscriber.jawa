record `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.bufferSize` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.once` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.size` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40bfc8.  v0:= 1I;
  #L40bfca.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L40bfd0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L40bfd4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.size` @type ^`long` := v3 @kind wide;
  #L40bfd8.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40bfdc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40bfe2.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L40bfe6.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.bufferSize` @type ^`int` := v5;
  #L40bfea.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40bffc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40c000.  v1:= 0I;
  #L40c002.  v2:= 1I;
  #L40c004.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40c00a.  v0:= temp;
  #L40c00c.  if v0 == 0 then goto L40c016;
  #L40c010.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.run:()V` @kind virtual;
  #L40c016.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c028.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40c02c.  if v0 == 0 then goto L40c03c;
  #L40c030.  v1:= 0I;
  #L40c032.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L40c036.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Processor;.onComplete:()V` @kind interface;
  #L40c03c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c040.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40c046.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c058.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40c05c.  if v0 == 0 then goto L40c06c;
  #L40c060.  v1:= 0I;
  #L40c062.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L40c066.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Processor;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c06c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c070.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c076.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40c088.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.index` @type ^`long` @kind wide;
  #L40c08c.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40c090.  v3:= 0L;
  #L40c094.  v5:= lcmp(v0, v3);
  #L40c098.  if v5 != 0 then goto L40c0bc;
  #L40c09c.  call temp:= `getAndIncrement`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40c0a2.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.bufferSize` @type ^`int`;
  #L40c0a6.  call temp:= `create`(v2, v7) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40c0ac.  v2:= temp @kind object;
  #L40c0ae.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L40c0b2.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c0b6.  call `onNext`(v5, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40c0bc.  v5:= 1L;
  #L40c0c0.  v0:= v0 + v5 @kind long;
  #L40c0c2.  call `onNext`(v2, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40c0c8.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.size` @type ^`long` @kind wide;
  #L40c0cc.  v8:= lcmp(v0, v5);
  #L40c0d0.  if v8 != 0 then goto L40c0e6;
  #L40c0d4.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.index` @type ^`long` := v3 @kind wide;
  #L40c0d8.  v8:= 0I;
  #L40c0da.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40c0de.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40c0e4.  goto L40c0ea;
  #L40c0e6.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.index` @type ^`long` := v0 @kind wide;
  #L40c0ea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c0fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c100.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40c106.  v0:= temp;
  #L40c108.  if v0 == 0 then goto L40c11a;
  #L40c10c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40c110.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c114.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40c11a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c12c.  call temp:= `validate`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40c132.  v0:= temp;
  #L40c134.  if v0 == 0 then goto L40c14e;
  #L40c138.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.size` @type ^`long` @kind wide;
  #L40c13c.  call temp:= `multiplyCap`(v0, v3) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40c142.  v3:= temp @kind wide;
  #L40c144.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c148.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40c14e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c160.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.decrementAndGet:()I` @kind virtual;
  #L40c166.  v0:= temp;
  #L40c168.  if v0 != 0 then goto L40c176;
  #L40c16c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c170.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40c176.  return @kind void;
}
