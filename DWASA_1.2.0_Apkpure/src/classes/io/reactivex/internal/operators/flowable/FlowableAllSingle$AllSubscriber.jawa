record `io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.predicate` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3edbf8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3edbfe.  v0.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L3edc02.  v0.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L3edc06.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3edc18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3edc1c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3edc22.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3edc26.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3edc2a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3edbd4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3edbd8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3edbdc.  if v0 != v1 then goto L3edbe4;
  #L3edbe0.  v0:= 1I;
  #L3edbe2.  goto L3edbe6;
  #L3edbe4.  v0:= 0I;
  #L3edbe6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3edc3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.done` @type ^`boolean` @kind boolean;
  #L3edc40.  if v0 == 0 then goto L3edc46;
  #L3edc44.  return @kind void;
  #L3edc46.  v0:= 1I;
  #L3edc48.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3edc4c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3edc50.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L3edc54.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3edc58.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3edc5e.  v0:= temp @kind object;
  #L3edc60.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3edc66.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3edc78.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.done` @type ^`boolean` @kind boolean;
  #L3edc7c.  if v0 == 0 then goto L3edc88;
  #L3edc80.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3edc86.  return @kind void;
  #L3edc88.  v0:= 1I;
  #L3edc8a.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3edc8e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3edc92.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3edc96.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3edc9a.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3edca0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3edcb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.done` @type ^`boolean` @kind boolean;
  #L3edcb8.  if v0 == 0 then goto L3edcbe;
  #L3edcbc.  return @kind void;
  #L3edcbe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3edcc2.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L3edcc8.  v2:= temp;
  #L3edcca.  if v2 != 0 then goto L3edcfa;
  #L3edcce.  v2:= 1I;
  #L3edcd0.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3edcd4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3edcd8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3edcde.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3edce2.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3edce6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3edcea.  v0:= 0I;
  #L3edcec.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3edcf2.  v0:= temp @kind object;
  #L3edcf4.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3edcfa.  return @kind void;
  #L3edcfc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3edcfe.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3edd04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3edd08.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3edd0e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3edd12.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3edd16.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3edd1c.  return @kind void;
  catch `java.lang.Throwable` @[L3edcbe..L3edcca] goto L3edcfc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3edd3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3edd40.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3edd46.  v0:= temp;
  #L3edd48.  if v0 == 0 then goto L3edd6a;
  #L3edd4c.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3edd50.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3edd54.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3edd5a.  v0:= 9223372036854775807L;
  #L3edd64.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3edd6a.  return @kind void;
}
