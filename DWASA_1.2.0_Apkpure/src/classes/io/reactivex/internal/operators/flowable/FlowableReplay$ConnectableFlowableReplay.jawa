record `io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay` @kind class @AccessFlag FINAL extends `io.reactivex.flowables.ConnectableFlowable` @kind class {
  `io.reactivex.flowables.ConnectableFlowable` `io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay.cf` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay.flowable` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay` v0 @kind this, `io.reactivex.flowables.ConnectableFlowable` v1 @kind object, `io.reactivex.Flowable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ConnectableFlowableReplay;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Flowable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4047a8.  call `<init>`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L4047ae.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay.cf` @type ^`io.reactivex.flowables.ConnectableFlowable` := v1 @kind object;
  #L4047b2.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay.flowable` @type ^`io.reactivex.Flowable` := v2 @kind object;
  #L4047b6.  return @kind void;
}
procedure `void` `connect`(`io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ConnectableFlowableReplay;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4047c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay.cf` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L4047cc.  call `connect`(v0, v2) @signature `Lio/reactivex/flowables/ConnectableFlowable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L4047d2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ConnectableFlowableReplay;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4047e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay.flowable` @type ^`io.reactivex.Flowable` @kind object;
  #L4047e8.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4047ee.  return @kind void;
}
