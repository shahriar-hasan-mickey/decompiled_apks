record `io.reactivex.internal.operators.flowable.FlowableFilter` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableFilter.predicate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFilter` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f7514.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f751a.  v0.`io.reactivex.internal.operators.flowable.FlowableFilter.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L3f751e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFilter` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3f7530.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L3f7534.  if v0 == 0 then goto L3f7556;
  #L3f7538.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f753c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber`;
  #L3f7540.  v4:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v4 @kind object;
  #L3f7544.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3f7548.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f754e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f7554.  goto L3f756e;
  #L3f7556.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f755a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber`;
  #L3f755e.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3f7562.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f7568.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f756e.  return @kind void;
}
