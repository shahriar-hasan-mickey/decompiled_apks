record `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v0 @kind this, `io.reactivex.Scheduler$Worker` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ffbb0.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L3ffbb6.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v1 @kind object;
  #L3ffbba.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @type ^`boolean` := v2 @kind boolean;
  #L3ffbbe.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int` := v3;
  #L3ffbc2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3ffbc6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3ffbcc.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3ffbd0.  v1:= v3 ^> 2;
  #L3ffbd4.  v3:= v3 - v1 @kind int;
  #L3ffbd6.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int` := v3;
  #L3ffbda.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ffbec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3ffbf0.  if v0 == 0 then goto L3ffbf6;
  #L3ffbf4.  return @kind void;
  #L3ffbf6.  v0:= 1I;
  #L3ffbf8.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3ffbfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ffc00.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ffc06.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3ffc0a.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3ffc10.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3ffc16.  v0:= temp;
  #L3ffc18.  if v0 != 0 then goto L3ffc26;
  #L3ffc1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3ffc20.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3ffc26.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L3ffad0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3ffad4.  v1:= 1I;
  #L3ffad6.  if v0 == 0 then goto L3ffae2;
  #L3ffada.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @kind virtual;
  #L3ffae0.  return v1;
  #L3ffae2.  if v3 == 0 then goto L3ffb56;
  #L3ffae6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L3ffaea.  if v3 == 0 then goto L3ffb18;
  #L3ffaee.  if v4 == 0 then goto L3ffb56;
  #L3ffaf2.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L3ffaf6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3ffafa.  if v3 == 0 then goto L3ffb06;
  #L3ffafe.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ffb04.  goto L3ffb0c;
  #L3ffb06.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ffb0c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3ffb10.  call `dispose`(v3) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3ffb16.  return v1;
  #L3ffb18.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3ffb1c.  if v3 == 0 then goto L3ffb3c;
  #L3ffb20.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L3ffb24.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @kind virtual;
  #L3ffb2a.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ffb30.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3ffb34.  call `dispose`(v3) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3ffb3a.  return v1;
  #L3ffb3c.  if v4 == 0 then goto L3ffb56;
  #L3ffb40.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L3ffb44.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ffb4a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3ffb4e.  call `dispose`(v3) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3ffb54.  return v1;
  #L3ffb56.  v3:= 0I;
  #L3ffb58.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ffc38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3ffc3c.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3ffc42.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ffb6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3ffb70.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L3ffb76.  v0:= temp;
  #L3ffb78.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ffc54.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L3ffc58.  if v0 != 0 then goto L3ffc68;
  #L3ffc5c.  v0:= 1I;
  #L3ffc5e.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ffc62.  call `trySchedule`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L3ffc68.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ffc7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L3ffc80.  if v0 == 0 then goto L3ffc8c;
  #L3ffc84.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ffc8a.  return @kind void;
  #L3ffc8c.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L3ffc90.  v2:= 1I;
  #L3ffc92.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3ffc96.  call `trySchedule`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L3ffc9c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3ffcb0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L3ffcb4.  if v0 == 0 then goto L3ffcba;
  #L3ffcb8.  return @kind void;
  #L3ffcba.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L3ffcbe.  v1:= 2I;
  #L3ffcc0.  if v0 != v1 then goto L3ffccc;
  #L3ffcc4.  call `trySchedule`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L3ffcca.  return @kind void;
  #L3ffccc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3ffcd0.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3ffcd6.  v3:= temp;
  #L3ffcd8.  if v3 != 0 then goto L3ffcfe;
  #L3ffcdc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ffce0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ffce6.  v3:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3ffcea.  v0:= "Queue is full?!" @kind object;
  #L3ffcee.  call `<init>`(v3, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ffcf4.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L3ffcf8.  v3:= 1I;
  #L3ffcfa.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L3ffcfe.  call `trySchedule`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L3ffd04.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ffd18.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3ffd1e.  v0:= temp;
  #L3ffd20.  if v0 == 0 then goto L3ffd34;
  #L3ffd24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ffd28.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3ffd2e.  call `trySchedule`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L3ffd34.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ffb8c.  v0:= 2I;
  #L3ffb8e.  v2:= v2 ^& v0 @kind int;
  #L3ffb90.  if v2 == 0 then goto L3ffb9c;
  #L3ffb94.  v2:= 1I;
  #L3ffb96.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L3ffb9a.  return v0;
  #L3ffb9c.  v2:= 0I;
  #L3ffb9e.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3ffd48.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L3ffd4c.  if v0 == 0 then goto L3ffd58;
  #L3ffd50.  call `runBackfused`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runBackfused:()V` @kind virtual;
  #L3ffd56.  goto L3ffd70;
  #L3ffd58.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L3ffd5c.  v1:= 1I;
  #L3ffd5e.  if v0 != v1 then goto L3ffd6a;
  #L3ffd62.  call `runSync`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runSync:()V` @kind virtual;
  #L3ffd68.  goto L3ffd70;
  #L3ffd6a.  call `runAsync`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runAsync:()V` @kind virtual;
  #L3ffd70.  return @kind void;
}
procedure `void` `runAsync`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runAsync:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `runBackfused`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runBackfused:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `runSync`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runSync:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `trySchedule`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L3ffd84.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3ffd8a.  v0:= temp;
  #L3ffd8c.  if v0 == 0 then goto L3ffd92;
  #L3ffd90.  return @kind void;
  #L3ffd92.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3ffd96.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3ffd9c.  return @kind void;
}
