record `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.processor` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @AccessFlag PRIVATE;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @AccessFlag PROTECTED_FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.FlowableProcessor` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/FlowableProcessor;Lorg/reactivestreams/Subscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40409c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L4040a2.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4040a6.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.processor` @type ^`io.reactivex.processors.FlowableProcessor` := v2 @kind object;
  #L4040aa.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4040ae.  return @kind void;
}
procedure `void` `again`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.again:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4040c0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @type ^`long` @kind wide;
  #L4040c4.  v2:= 0L;
  #L4040c8.  v4:= lcmp(v0, v2);
  #L4040cc.  if v4 == 0 then goto L4040da;
  #L4040d0.  v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L4040d4.  call `produced`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.produced:(J)V` @kind virtual;
  #L4040da.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4040de.  v1:= 1L;
  #L4040e2.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4040e8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.processor` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L4040ec.  call `onNext`(v0, v6) @signature `Lio/reactivex/processors/FlowableProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4040f2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L404104.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L40410a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40410e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L404114.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L404128.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @type ^`long` @kind wide;
  #L40412c.  v2:= 1L;
  #L404130.  v0:= v0 + v2 @kind long;
  #L404132.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L404136.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40413a.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L404140.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L404154.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L40415a.  return @kind void;
}
