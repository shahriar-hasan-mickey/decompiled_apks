record `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f75a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f75ae.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @type ^`long` := v2 @kind wide;
  #L3f75b2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` := v1 @kind object;
  #L3f75b6.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.bufferSize` @type ^`int`;
  #L3f75ba.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @type ^`int` := v1;
  #L3f75be.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @type ^`int`;
  #L3f75c2.  v1:= v1 ^> 2;
  #L3f75c6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @type ^`int` := v1;
  #L3f75ca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3f75dc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f75e2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7580.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f7586.  v0:= temp @kind object;
  #L3f7588.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f758c.  if v0 != v1 then goto L3f7594;
  #L3f7590.  v0:= 1I;
  #L3f7592.  goto L3f7596;
  #L3f7594.  v0:= 0I;
  #L3f7596.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f75f4.  v0:= 1I;
  #L3f75f6.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f75fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L3f75fe.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L3f7604.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7618.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f761c.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3f7622.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L3f7626.  call `innerError`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L3f762c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7640.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int`;
  #L3f7644.  v1:= 2I;
  #L3f7646.  if v0 == v1 then goto L3f7656;
  #L3f764a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L3f764e.  call `tryEmit`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.tryEmit:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)V` @kind virtual;
  #L3f7654.  goto L3f7660;
  #L3f7656.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L3f765a.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L3f7660.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f7674.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f767a.  v0:= temp;
  #L3f767c.  if v0 == 0 then goto L3f76d0;
  #L3f7680.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L3f7684.  if v0 == 0 then goto L3f76c4;
  #L3f7688.  v0:= v4 @kind object;
  #L3f768a.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L3f768e.  v1:= 7I;
  #L3f7690.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L3f7696.  v1:= temp;
  #L3f7698.  v2:= 1I;
  #L3f769a.  if v1 != v2 then goto L3f76b6;
  #L3f769e.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int` := v1;
  #L3f76a2.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3f76a6.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3f76aa.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L3f76ae.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L3f76b4.  return @kind void;
  #L3f76b6.  v2:= 2I;
  #L3f76b8.  if v1 != v2 then goto L3f76c4;
  #L3f76bc.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int` := v1;
  #L3f76c0.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3f76c4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @type ^`int`;
  #L3f76c8.  v0:= (`long`) v0 @kind i2l;
  #L3f76ca.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f76d0.  return @kind void;
}
procedure `void` `requestMore`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.requestMore:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f76e4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int`;
  #L3f76e8.  v1:= 1I;
  #L3f76ea.  if v0 == v1 then goto L3f7722;
  #L3f76ee.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` @kind wide;
  #L3f76f2.  v0:= v0 + v4 @kind long;
  #L3f76f4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @type ^`int`;
  #L3f76f8.  v4:= (`long`) v4 @kind i2l;
  #L3f76fa.  v2:= lcmp(v0, v4);
  #L3f76fe.  if v2 < 0 then goto L3f771e;
  #L3f7702.  v4:= 0L;
  #L3f7706.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` := v4 @kind wide;
  #L3f770a.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f7710.  v4:= temp @kind object;
  #L3f7712.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L3f7716.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f771c.  goto L3f7722;
  #L3f771e.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L3f7722.  return @kind void;
}
