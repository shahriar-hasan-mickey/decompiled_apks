record `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.combiner` @AccessFlag FINAL;
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.otherArray` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.otherIterable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40f294.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40f29a.  v1:= 0I;
  #L40f29c.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.otherArray` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L40f2a0.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.otherIterable` @type ^`java.lang.Iterable` := v2 @kind object;
  #L40f2a4.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.combiner` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L40f2a8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.<init>:(Lio/reactivex/Flowable;[Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40f2bc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40f2c2.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.otherArray` @type ^`org.reactivestreams.Publisher`[] := v2 @kind object;
  #L40f2c6.  v1:= 0I;
  #L40f2c8.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.otherIterable` @type ^`java.lang.Iterable` := v1 @kind object;
  #L40f2cc.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.combiner` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L40f2d0.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40f2e4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.otherArray` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L40f2e8.  if v0 != 0 then goto L40f34e;
  #L40f2ec.  v0:= 8I;
  #L40f2f0.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L40f2f4.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.otherIterable` @type ^`java.lang.Iterable` @kind object;
  #L40f2f8.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40f2fe.  v1:= temp @kind object;
  #L40f300.  v2:= 0I;
  #L40f302.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40f308.  v3:= temp;
  #L40f30a.  if v3 == 0 then goto L40f350;
  #L40f30e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40f314.  v3:= temp @kind object;
  #L40f316.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L40f31a.  v4:= length @variable v0;
  #L40f31c.  if v2 != v4 then goto L40f332;
  #L40f320.  v4:= v2 ^> 1;
  #L40f324.  v4:= v4 + v2 @kind int;
  #L40f326.  call temp:= `copyOf`(v0, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L40f32c.  v0:= temp @kind object;
  #L40f32e.  v0:= (`org.reactivestreams.Publisher`[]) v0 @kind object;
  #L40f332.  v4:= v2 + 1;
  #L40f336.  v0[v2]:= v3 @kind object;
  #L40f33a.  v2:= v4;
  #L40f33c.  goto L40f302;
  #L40f33e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40f340.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40f346.  call `error`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40f34c.  return @kind void;
  #L40f34e.  v2:= length @variable v0;
  #L40f350.  if v2 != 0 then goto L40f374;
  #L40f354.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMap`;
  #L40f358.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40f35c.  v2:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$SingletonArrayFunc`;
  #L40f360.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$SingletonArrayFunc;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;)V` @kind direct;
  #L40f366.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L40f36c.  call `subscribeActual`(v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L40f372.  return @kind void;
  #L40f374.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber`;
  #L40f378.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.combiner` @type ^`io.reactivex.functions.Function` @kind object;
  #L40f37c.  call `<init>`(v1, v6, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L40f382.  call `onSubscribe`(v6, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40f388.  call `subscribe`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.subscribe:([Lorg/reactivestreams/Publisher;I)V` @kind virtual;
  #L40f38e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40f392.  call `subscribe`(v6, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40f398.  return @kind void;
  catch `java.lang.Throwable` @[L40f2f4..L40f33a] goto L40f33e;
}
