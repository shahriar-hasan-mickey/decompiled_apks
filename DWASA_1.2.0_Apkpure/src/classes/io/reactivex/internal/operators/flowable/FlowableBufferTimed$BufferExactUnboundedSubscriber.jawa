record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.bufferSupplier` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timer` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f04fc.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L3f0500.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L3f0506.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L3f050c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f0510.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f0516.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timer` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3f051a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L3f051e.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timespan` @type ^`long` := v4 @kind wide;
  #L3f0522.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L3f0526.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L3f052a.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f0490.  v2:= (`java.util.Collection`) v2 @kind object;
  #L3f0494.  call temp:= `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L3f049a.  v1:= temp;
  #L3f049c.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f04b0.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f04b4.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f04ba.  v1:= 1I;
  #L3f04bc.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f053c.  v0:= 1I;
  #L3f053e.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f0542.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f0546.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f054c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0550.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f0556.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3f0568.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.cancel:()V` @kind virtual;
  #L3f056e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f04d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f04d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f04da.  v0:= temp @kind object;
  #L3f04dc.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3f04e0.  if v0 != v1 then goto L3f04e8;
  #L3f04e4.  v0:= 1I;
  #L3f04e6.  goto L3f04ea;
  #L3f04e8.  v0:= 0I;
  #L3f04ea.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f0580.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f0584.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f058a.  @monitorenter v4
  #L3f058c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3f0590.  if v0 != 0 then goto L3f0598;
  #L3f0594.  @monitorexit v4
  #L3f0596.  return @kind void;
  #L3f0598.  v1:= 0I;
  #L3f059a.  v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L3f059e.  @monitorexit v4
  #L3f05a0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f05a4.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f05aa.  v0:= 1I;
  #L3f05ac.  v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f05b0.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.enter:()Z` @kind virtual;
  #L3f05b6.  v0:= temp;
  #L3f05b8.  if v0 == 0 then goto L3f05cc;
  #L3f05bc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f05c0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f05c4.  v3:= 0I;
  #L3f05c6.  call `drainMaxLoop`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L3f05cc.  return @kind void;
  #L3f05ce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f05d0.  @monitorexit v4
  #L3f05d2.  throw v0;
  catch `java.lang.Throwable` @[L3f058c..L3f05a0] goto L3f05ce;
  catch `java.lang.Throwable` @[L3f05d0..L3f05d2] goto L3f05ce;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f05f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f05fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f0602.  @monitorenter v1
  #L3f0604.  v0:= 0I;
  #L3f0606.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3f060a.  @monitorexit v1
  #L3f060c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f0610.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f0616.  return @kind void;
  #L3f0618.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f061a.  @monitorexit v1
  #L3f061c.  throw v2;
  catch `java.lang.Throwable` @[L3f0606..L3f060c] goto L3f0618;
  catch `java.lang.Throwable` @[L3f061a..L3f061c] goto L3f0618;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0644.  @monitorenter v1
  #L3f0646.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3f064a.  if v0 == 0 then goto L3f0654;
  #L3f064e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0654.  @monitorexit v1
  #L3f0656.  return @kind void;
  #L3f0658.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f065a.  @monitorexit v1
  #L3f065c.  throw v2;
  catch `java.lang.Throwable` @[L3f0646..L3f065c] goto L3f0658;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v9 @kind this, `org.reactivestreams.Subscription` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f067c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f0680.  call temp:= `validate`(v0, v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f0686.  v0:= temp;
  #L3f0688.  if v0 == 0 then goto L3f071c;
  #L3f068c.  v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v10 @kind object;
  #L3f0690.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0694.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f069a.  v0:= temp @kind object;
  #L3f069c.  v1:= "The supplied buffer is null" @kind object;
  #L3f06a0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f06a6.  v0:= temp @kind object;
  #L3f06a8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3f06ac.  v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3f06b0.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f06b4.  call `onSubscribe`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f06ba.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f06be.  if v0 != 0 then goto L3f071c;
  #L3f06c2.  v0:= 9223372036854775807L;
  #L3f06cc.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f06d2.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L3f06d6.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timespan` @type ^`long` @kind wide;
  #L3f06da.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f06de.  v3:= v9 @kind object;
  #L3f06e0.  v4:= v6 @kind wide;
  #L3f06e2.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f06e8.  v10:= temp @kind object;
  #L3f06ea.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f06ee.  v1:= 0I;
  #L3f06f0.  call temp:= `compareAndSet`(v0, v1, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f06f6.  v0:= temp;
  #L3f06f8.  if v0 != 0 then goto L3f071c;
  #L3f06fc.  call `dispose`(v10) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3f0702.  goto L3f071c;
  #L3f0704.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0706.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f070c.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.cancel:()V` @kind virtual;
  #L3f0712.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f0716.  call `error`(v10, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3f071c.  return @kind void;
  catch `java.lang.Throwable` @[L3f0690..L3f06ac] goto L3f0704;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3f073c.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.requested:(J)V` @kind virtual;
  #L3f0742.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0754.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0758.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f075e.  v0:= temp @kind object;
  #L3f0760.  v1:= "The supplied buffer is null" @kind object;
  #L3f0764.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f076a.  v0:= temp @kind object;
  #L3f076c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3f0770.  @monitorenter v2
  #L3f0772.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3f0776.  if v1 != 0 then goto L3f077e;
  #L3f077a.  @monitorexit v2
  #L3f077c.  return @kind void;
  #L3f077e.  v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3f0782.  @monitorexit v2
  #L3f0784.  v0:= 0I;
  #L3f0786.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3f078c.  return @kind void;
  #L3f078e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0790.  @monitorexit v2
  #L3f0792.  throw v0;
  #L3f0794.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0796.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f079c.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.cancel:()V` @kind virtual;
  #L3f07a2.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f07a6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f07ac.  return @kind void;
  catch `java.lang.Throwable` @[L3f0754..L3f0770] goto L3f0794;
  catch `java.lang.Throwable` @[L3f0772..L3f0784] goto L3f078e;
  catch `java.lang.Throwable` @[L3f0790..L3f0792] goto L3f078e;
}
