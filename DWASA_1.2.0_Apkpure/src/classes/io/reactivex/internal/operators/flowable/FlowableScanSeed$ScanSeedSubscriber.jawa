record `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.accumulator` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.limit` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4067c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4067ca.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4067ce.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.accumulator` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L4067d2.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4067d6.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.prefetch` @type ^`int` := v4;
  #L4067da.  v1:= v4 ^> 2;
  #L4067de.  v1:= v4 - v1 @kind int;
  #L4067e2.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.limit` @type ^`int` := v1;
  #L4067e6.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L4067ea.  call `<init>`(v1, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4067f0.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4067f4.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4067f8.  call temp:= `offer`(v1, v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4067fe.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L406802.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L406808.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40680c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406820.  v0:= 1I;
  #L406822.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L406826.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40682a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L406830.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.getAndIncrement:()I` @kind virtual;
  #L406836.  v0:= temp;
  #L406838.  if v0 != 0 then goto L406846;
  #L40683c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L406840.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L406846.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L406858.  v0:= v17 @kind object;
  #L40685c.  call temp:= `getAndIncrement`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.getAndIncrement:()I` @kind virtual;
  #L406862.  v1:= temp;
  #L406864.  if v1 == 0 then goto L40686a;
  #L406868.  return @kind void;
  #L40686a.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40686e.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L406872.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.limit` @type ^`int`;
  #L406876.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.consumed` @type ^`int`;
  #L40687a.  v5:= 1I;
  #L40687c.  v6:= 1I;
  #L40687e.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L406882.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L406888.  v7:= temp @kind wide;
  #L40688a.  v9:= 0L;
  #L40688e.  v11:= v9 @kind wide;
  #L406890.  v13:= lcmp(v11, v7);
  #L406894.  if v13 == 0 then goto L406918;
  #L406898.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40689c.  if v13 == 0 then goto L4068a8;
  #L4068a0.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4068a6.  return @kind void;
  #L4068a8.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L4068ac.  if v13 == 0 then goto L4068c6;
  #L4068b0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4068b4.  if v14 == 0 then goto L4068c6;
  #L4068b8.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L4068be.  call `onError`(v1, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4068c4.  return @kind void;
  #L4068c6.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4068cc.  v14:= temp @kind object;
  #L4068ce.  v15:= 0I;
  #L4068d0.  if v14 != 0 then goto L4068da;
  #L4068d4.  v16:= 1I;
  #L4068d8.  goto L4068de;
  #L4068da.  v16:= 0I;
  #L4068de.  if v13 == 0 then goto L4068ee;
  #L4068e2.  if v16 == 0 then goto L4068ee;
  #L4068e6.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4068ec.  return @kind void;
  #L4068ee.  if v16 == 0 then goto L4068f4;
  #L4068f2.  goto L406918;
  #L4068f4.  call `onNext`(v1, v14) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4068fa.  v13:= 1L;
  #L4068fe.  v11:= v11 + v13 @kind long;
  #L406900.  v4:= v4 + 1;
  #L406904.  if v4 != v3 then goto L406890;
  #L406908.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40690c.  v13:= (`long`) v3 @kind i2l;
  #L40690e.  call `request`(v4, v13) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L406914.  v4:= 0I;
  #L406916.  goto L406890;
  #L406918.  v13:= lcmp(v11, v7);
  #L40691c.  if v13 != 0 then goto L406952;
  #L406920.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L406924.  if v7 == 0 then goto L406952;
  #L406928.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L40692c.  if v7 == 0 then goto L40693e;
  #L406930.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L406936.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40693c.  return @kind void;
  #L40693e.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L406944.  v7:= temp;
  #L406946.  if v7 == 0 then goto L406952;
  #L40694a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L406950.  return @kind void;
  #L406952.  v7:= lcmp(v11, v9);
  #L406956.  if v7 == 0 then goto L406964;
  #L40695a.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40695e.  call temp:= `produced`(v7, v11) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L406964.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.consumed` @type ^`int` := v4;
  #L406968.  v6:= -v6 @kind int;
  #L40696a.  call temp:= `addAndGet`(v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.addAndGet:(I)I` @kind virtual;
  #L406970.  v6:= temp;
  #L406972.  if v6 != 0 then goto L40687e;
  #L406976.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406988.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L40698c.  if v0 == 0 then goto L406992;
  #L406990.  return @kind void;
  #L406992.  v0:= 1I;
  #L406994.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L406998.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @kind virtual;
  #L40699e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4069b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L4069b4.  if v0 == 0 then goto L4069c0;
  #L4069b8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4069be.  return @kind void;
  #L4069c0.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4069c4.  v2:= 1I;
  #L4069c6.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L4069ca.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @kind virtual;
  #L4069d0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4069e4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L4069e8.  if v0 == 0 then goto L4069ee;
  #L4069ec.  return @kind void;
  #L4069ee.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4069f2.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.accumulator` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4069f6.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4069fc.  v3:= temp @kind object;
  #L4069fe.  v0:= "The accumulator returned a null value" @kind object;
  #L406a02.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L406a08.  v3:= temp @kind object;
  #L406a0a.  v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L406a0e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L406a12.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L406a18.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @kind virtual;
  #L406a1e.  return @kind void;
  #L406a20.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L406a22.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L406a28.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L406a2c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L406a32.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L406a38.  return @kind void;
  catch `java.lang.Throwable` @[L4069f2..L406a0a] goto L406a20;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L406a58.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L406a5c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L406a62.  v0:= temp;
  #L406a64.  if v0 == 0 then goto L406a86;
  #L406a68.  v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L406a6c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406a70.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L406a76.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.prefetch` @type ^`int`;
  #L406a7a.  v0:= v0 + -1;
  #L406a7e.  v0:= (`long`) v0 @kind i2l;
  #L406a80.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L406a86.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406a98.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L406a9e.  v0:= temp;
  #L406aa0.  if v0 == 0 then goto L406ab4;
  #L406aa4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L406aa8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L406aae.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @kind virtual;
  #L406ab4.  return @kind void;
}
