record `io.reactivex.internal.operators.flowable.FlowableCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCount` v0 @kind this, `io.reactivex.Flowable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount;.<init>:(Lio/reactivex/Flowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f3ab8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f3abe.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableCount` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3f3ad0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCount.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f3ad4.  v1:= new `io.reactivex.internal.operators.flowable.FlowableCount$CountSubscriber`;
  #L3f3ad8.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCount$CountSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f3ade.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f3ae4.  return @kind void;
}
