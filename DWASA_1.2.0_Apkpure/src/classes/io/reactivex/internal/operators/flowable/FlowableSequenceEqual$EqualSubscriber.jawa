record `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.produced` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L406f60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L406f66.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` := v1 @kind object;
  #L406f6a.  v1:= v2 ^> 2;
  #L406f6e.  v1:= v2 - v1 @kind int;
  #L406f72.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.limit` @type ^`int` := v1;
  #L406f76.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @type ^`int` := v2;
  #L406f7a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L406f8c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L406f92.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L406fa4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L406fa8.  if v0 == 0 then goto L406fb2;
  #L406fac.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L406fb2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406fc4.  v0:= 1I;
  #L406fc6.  v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L406fca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` @kind object;
  #L406fce.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;.drain:()V` @kind interface;
  #L406fd4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406fe8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` @kind object;
  #L406fec.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;.innerError:(Ljava/lang/Throwable;)V` @kind interface;
  #L406ff2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407004.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @type ^`int`;
  #L407008.  if v0 != 0 then goto L40702e;
  #L40700c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L407010.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L407016.  v2:= temp;
  #L407018.  if v2 != 0 then goto L40702e;
  #L40701c.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L407020.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L407026.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40702c.  return @kind void;
  #L40702e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` @kind object;
  #L407032.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;.drain:()V` @kind interface;
  #L407038.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40704c.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L407052.  v0:= temp;
  #L407054.  if v0 == 0 then goto L4070c8;
  #L407058.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L40705c.  if v0 == 0 then goto L4070aa;
  #L407060.  v0:= v4 @kind object;
  #L407062.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L407066.  v1:= 3I;
  #L407068.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L40706e.  v1:= temp;
  #L407070.  v2:= 1I;
  #L407072.  if v1 != v2 then goto L40708e;
  #L407076.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @type ^`int` := v1;
  #L40707a.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L40707e.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L407082.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` @kind object;
  #L407086.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;.drain:()V` @kind interface;
  #L40708c.  return @kind void;
  #L40708e.  v2:= 2I;
  #L407090.  if v1 != v2 then goto L4070aa;
  #L407094.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @type ^`int` := v1;
  #L407098.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L40709c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @type ^`int`;
  #L4070a0.  v0:= (`long`) v0 @kind i2l;
  #L4070a2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4070a8.  return @kind void;
  #L4070aa.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L4070ae.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @type ^`int`;
  #L4070b2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4070b8.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4070bc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @type ^`int`;
  #L4070c0.  v0:= (`long`) v0 @kind i2l;
  #L4070c2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4070c8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.request:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4070dc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @type ^`int`;
  #L4070e0.  v1:= 1I;
  #L4070e2.  if v0 == v1 then goto L40711e;
  #L4070e6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.produced` @type ^`long` @kind wide;
  #L4070ea.  v2:= 1L;
  #L4070ee.  v0:= v0 + v2 @kind long;
  #L4070f0.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.limit` @type ^`int`;
  #L4070f4.  v2:= (`long`) v2 @kind i2l;
  #L4070f6.  v4:= lcmp(v0, v2);
  #L4070fa.  if v4 < 0 then goto L40711a;
  #L4070fe.  v2:= 0L;
  #L407102.  v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L407106.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L40710c.  v2:= temp @kind object;
  #L40710e.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L407112.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407118.  goto L40711e;
  #L40711a.  v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L40711e.  return @kind void;
}
