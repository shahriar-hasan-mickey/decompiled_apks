record `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.management` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxChildRequested` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.shouldConnect` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L404c68.  v0:= 0I;
  #L404c6a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[v0];
  #L404c6e.  `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] := v1 @kind object;
  #L404c72.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[v0];
  #L404c76.  `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] := v0 @kind object;
  #L404c7a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L404c8c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L404c92.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` := v2 @kind object;
  #L404c96.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L404c9a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L404ca0.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.management` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L404ca4.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L404ca8.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L404cac.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L404cb2.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L404cb6.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L404cba.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L404cc0.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L404cc4.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.add:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L404bd4.  if v5 == 0 then goto L404c1c;
  #L404bd8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404bdc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L404be2.  v0:= temp @kind object;
  #L404be4.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v0 @kind object;
  #L404be8.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L404bec.  v2:= 0I;
  #L404bee.  if v0 != v1 then goto L404bf4;
  #L404bf2.  return v2;
  #L404bf4.  v1:= length @variable v0;
  #L404bf6.  v3:= v1 + 1;
  #L404bfa.  v3:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[v3];
  #L404bfe.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L404c04.  v3[v1]:= v5 @kind object;
  #L404c08.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404c0c.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L404c12.  v0:= temp;
  #L404c14.  if v0 == 0 then goto L404bd8;
  #L404c18.  v5:= 1I;
  #L404c1a.  return v5;
  #L404c1c.  v5:= new `java.lang.NullPointerException`;
  #L404c20.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L404c26.  goto L404c2a;
  #L404c28.  throw v5;
  #L404c2a.  goto L404c28;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L404cd8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404cdc.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L404ce0.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L404ce6.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L404cec.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L404c3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404c40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L404c46.  v0:= temp @kind object;
  #L404c48.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L404c4c.  if v0 != v1 then goto L404c54;
  #L404c50.  v0:= 1I;
  #L404c52.  goto L404c56;
  #L404c54.  v0:= 0I;
  #L404c56.  return v0;
}
procedure `void` `manageRequests`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L404d00.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.management` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L404d04.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L404d0a.  v0:= temp;
  #L404d0c.  if v0 == 0 then goto L404d12;
  #L404d10.  return @kind void;
  #L404d12.  v0:= 1I;
  #L404d14.  call temp:= `isDisposed`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.isDisposed:()Z` @kind virtual;
  #L404d1a.  v1:= temp;
  #L404d1c.  if v1 == 0 then goto L404d22;
  #L404d20.  return @kind void;
  #L404d22.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404d26.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L404d2c.  v1:= temp @kind object;
  #L404d2e.  v1:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v1 @kind object;
  #L404d32.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxChildRequested` @type ^`long` @kind wide;
  #L404d36.  v4:= length @variable v1;
  #L404d38.  v5:= 0I;
  #L404d3a.  v6:= v2 @kind wide;
  #L404d3c.  if v5 >= v4 then goto L404d5e;
  #L404d40.  v8:= v1[v5] @kind object;
  #L404d44.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L404d48.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L404d4e.  v8:= temp @kind wide;
  #L404d50.  call temp:= `max`(v6, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L404d56.  v6:= temp @kind wide;
  #L404d58.  v5:= v5 + 1;
  #L404d5c.  goto L404d3c;
  #L404d5e.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` @kind wide;
  #L404d62.  call temp:= `get`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L404d68.  v1:= temp @kind object;
  #L404d6a.  v1:= (`org.reactivestreams.Subscription`) v1 @kind object;
  #L404d6e.  v2:= v6 - v2 @kind long;
  #L404d72.  v8:= 0L;
  #L404d76.  v10:= lcmp(v2, v8);
  #L404d7a.  if v10 == 0 then goto L404dbe;
  #L404d7e.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxChildRequested` @type ^`long` := v6 @kind wide;
  #L404d82.  if v1 == 0 then goto L404da4;
  #L404d86.  v6:= lcmp(v4, v8);
  #L404d8a.  if v6 == 0 then goto L404d9c;
  #L404d8e.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v8 @kind wide;
  #L404d92.  v4:= v4 + v2 @kind long;
  #L404d94.  call `request`(v1, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L404d9a.  goto L404dd4;
  #L404d9c.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L404da2.  goto L404dd4;
  #L404da4.  v4:= v4 + v2 @kind long;
  #L404da6.  v1:= lcmp(v4, v8);
  #L404daa.  if v1 >= 0 then goto L404db8;
  #L404dae.  v4:= 9223372036854775807L;
  #L404db8.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v4 @kind wide;
  #L404dbc.  goto L404dd4;
  #L404dbe.  v2:= lcmp(v4, v8);
  #L404dc2.  if v2 == 0 then goto L404dd4;
  #L404dc6.  if v1 == 0 then goto L404dd4;
  #L404dca.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v8 @kind wide;
  #L404dce.  call `request`(v1, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L404dd4.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.management` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L404dd8.  v0:= -v0 @kind int;
  #L404dda.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L404de0.  v0:= temp;
  #L404de2.  if v0 != 0 then goto L404d14;
  #L404de6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L404df8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L404dfc.  if v0 != 0 then goto L404e40;
  #L404e00.  v0:= 1I;
  #L404e02.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L404e06.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404e0a.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.complete:()V` @kind interface;
  #L404e10.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404e14.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L404e18.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L404e1e.  v0:= temp @kind object;
  #L404e20.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v0 @kind object;
  #L404e24.  v1:= length @variable v0;
  #L404e26.  v2:= 0I;
  #L404e28.  if v2 >= v1 then goto L404e40;
  #L404e2c.  v3:= v0[v2] @kind object;
  #L404e30.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404e34.  call `replay`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L404e3a.  v2:= v2 + 1;
  #L404e3e.  goto L404e28;
  #L404e40.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L404e54.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L404e58.  if v0 != 0 then goto L404e9c;
  #L404e5c.  v0:= 1I;
  #L404e5e.  v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L404e62.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404e66.  call `error`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.error:(Ljava/lang/Throwable;)V` @kind interface;
  #L404e6c.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404e70.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L404e74.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L404e7a.  v5:= temp @kind object;
  #L404e7c.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v5 @kind object;
  #L404e80.  v0:= length @variable v5;
  #L404e82.  v1:= 0I;
  #L404e84.  if v1 >= v0 then goto L404ea2;
  #L404e88.  v2:= v5[v1] @kind object;
  #L404e8c.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404e90.  call `replay`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L404e96.  v1:= v1 + 1;
  #L404e9a.  goto L404e84;
  #L404e9c.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L404ea2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L404eb4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L404eb8.  if v0 != 0 then goto L404ef2;
  #L404ebc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404ec0.  call `next`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.next:(Ljava/lang/Object;)V` @kind interface;
  #L404ec6.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404eca.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L404ed0.  v5:= temp @kind object;
  #L404ed2.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v5 @kind object;
  #L404ed6.  v0:= length @variable v5;
  #L404ed8.  v1:= 0I;
  #L404eda.  if v1 >= v0 then goto L404ef2;
  #L404ede.  v2:= v5[v1] @kind object;
  #L404ee2.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404ee6.  call `replay`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L404eec.  v1:= v1 + 1;
  #L404ef0.  goto L404eda;
  #L404ef2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v4 @kind this, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L404f04.  call temp:= `setOnce`(v4, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L404f0a.  v5:= temp;
  #L404f0c.  if v5 == 0 then goto L404f42;
  #L404f10.  call `manageRequests`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @kind virtual;
  #L404f16.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404f1a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L404f20.  v5:= temp @kind object;
  #L404f22.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v5 @kind object;
  #L404f26.  v0:= length @variable v5;
  #L404f28.  v1:= 0I;
  #L404f2a.  if v1 >= v0 then goto L404f42;
  #L404f2e.  v2:= v5[v1] @kind object;
  #L404f32.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404f36.  call `replay`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L404f3c.  v1:= v1 + 1;
  #L404f40.  goto L404f2a;
  #L404f42.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L404f54.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404f58.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L404f5e.  v0:= temp @kind object;
  #L404f60.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v0 @kind object;
  #L404f64.  v1:= length @variable v0;
  #L404f66.  if v1 != 0 then goto L404f6c;
  #L404f6a.  return @kind void;
  #L404f6c.  v2:= -1I;
  #L404f6e.  v3:= 0I;
  #L404f70.  v4:= 0I;
  #L404f72.  if v4 >= v1 then goto L404f90;
  #L404f76.  v5:= v0[v4] @kind object;
  #L404f7a.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L404f80.  v5:= temp;
  #L404f82.  if v5 == 0 then goto L404f8a;
  #L404f86.  v2:= v4;
  #L404f88.  goto L404f90;
  #L404f8a.  v4:= v4 + 1;
  #L404f8e.  goto L404f72;
  #L404f90.  if v2 >= 0 then goto L404f96;
  #L404f94.  return @kind void;
  #L404f96.  v4:= 1I;
  #L404f98.  if v1 != v4 then goto L404fa2;
  #L404f9c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L404fa0.  goto L404fc0;
  #L404fa2.  v5:= v1 + -1;
  #L404fa6.  v5:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[v5];
  #L404faa.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L404fb0.  v3:= v2 + 1;
  #L404fb4.  v1:= v1 - v2 @kind int;
  #L404fb6.  v1:= v1 - v4 @kind int;
  #L404fb8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L404fbe.  v1:= v5 @kind object;
  #L404fc0.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404fc4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L404fca.  v0:= temp;
  #L404fcc.  if v0 == 0 then goto L404f54;
  #L404fd0.  return @kind void;
}
