record `io.reactivex.internal.operators.flowable.FlowableCreate` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.BackpressureStrategy` `io.reactivex.internal.operators.flowable.FlowableCreate.backpressure` @AccessFlag FINAL;
  `io.reactivex.FlowableOnSubscribe` `io.reactivex.internal.operators.flowable.FlowableCreate.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate` v0 @kind this, `io.reactivex.FlowableOnSubscribe` v1 @kind object, `io.reactivex.BackpressureStrategy` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.<init>:(Lio/reactivex/FlowableOnSubscribe;Lio/reactivex/BackpressureStrategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f4768.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L3f476e.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate.source` @type ^`io.reactivex.FlowableOnSubscribe` := v1 @kind object;
  #L3f4772.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate.backpressure` @type ^`io.reactivex.BackpressureStrategy` := v2 @kind object;
  #L3f4776.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableCreate` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4788.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCreate$1.$SwitchMap$io$reactivex$BackpressureStrategy` @type ^`int`[] @kind object;
  #L3f478c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate.backpressure` @type ^`io.reactivex.BackpressureStrategy` @kind object;
  #L3f4790.  call temp:= `ordinal`(v1) @signature `Lio/reactivex/BackpressureStrategy;.ordinal:()I` @kind virtual;
  #L3f4796.  v1:= temp;
  #L3f4798.  v0:= v0[v1];
  #L3f479c.  v1:= 1I;
  #L3f479e.  if v0 == v1 then goto L3f47ec;
  #L3f47a2.  v1:= 2I;
  #L3f47a4.  if v0 == v1 then goto L3f47e0;
  #L3f47a8.  v1:= 3I;
  #L3f47aa.  if v0 == v1 then goto L3f47d4;
  #L3f47ae.  v1:= 4I;
  #L3f47b0.  if v0 == v1 then goto L3f47c8;
  #L3f47b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter`;
  #L3f47b8.  call temp:= `bufferSize`() @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.bufferSize:()I` @kind static;
  #L3f47be.  v1:= temp;
  #L3f47c0.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @kind direct;
  #L3f47c6.  goto L3f47f6;
  #L3f47c8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter`;
  #L3f47cc.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f47d2.  goto L3f47f6;
  #L3f47d4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$DropAsyncEmitter`;
  #L3f47d8.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$DropAsyncEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f47de.  goto L3f47f6;
  #L3f47e0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$ErrorAsyncEmitter`;
  #L3f47e4.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$ErrorAsyncEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f47ea.  goto L3f47f6;
  #L3f47ec.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter`;
  #L3f47f0.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$MissingEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f47f6.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f47fc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate.source` @type ^`io.reactivex.FlowableOnSubscribe` @kind object;
  #L3f4800.  call `subscribe`(v3, v0) @signature `Lio/reactivex/FlowableOnSubscribe;.subscribe:(Lio/reactivex/FlowableEmitter;)V` @kind interface;
  #L3f4806.  goto L3f4816;
  #L3f4808.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f480a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f4810.  call `onError`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f4816.  return @kind void;
  catch `java.lang.Throwable` @[L3f47fc..L3f4806] goto L3f4808;
}
