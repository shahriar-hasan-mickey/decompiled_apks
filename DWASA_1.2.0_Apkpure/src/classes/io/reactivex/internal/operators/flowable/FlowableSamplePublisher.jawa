record `io.reactivex.internal.operators.flowable.FlowableSamplePublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher.emitLast` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher.other` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4060a8.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L4060ae.  v0.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher.source` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4060b2.  v0.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher.other` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4060b6.  v0.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher.emitLast` @type ^`boolean` := v3 @kind boolean;
  #L4060ba.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4060cc.  v0:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L4060d0.  call `<init>`(v0, v4) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4060d6.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher.emitLast` @type ^`boolean` @kind boolean;
  #L4060da.  if v4 == 0 then goto L4060f8;
  #L4060de.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4060e2.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast`;
  #L4060e6.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher.other` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4060ea.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L4060f0.  call `subscribe`(v4, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4060f6.  goto L406110;
  #L4060f8.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4060fc.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainNoLast`;
  #L406100.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher.other` @type ^`org.reactivestreams.Publisher` @kind object;
  #L406104.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainNoLast;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L40610a.  call `subscribe`(v4, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L406110.  return @kind void;
}
