record `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.done` @AccessFlag ;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$SingleElementSubscriber;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4077e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4077ea.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4077ee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$SingleElementSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407800.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407804.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40780a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40780e.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L407812.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$SingleElementSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4077c0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4077c4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4077c8.  if v0 != v1 then goto L4077d0;
  #L4077cc.  v0:= 1I;
  #L4077ce.  goto L4077d2;
  #L4077d0.  v0:= 0I;
  #L4077d2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$SingleElementSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407824.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L407828.  if v0 == 0 then goto L40782e;
  #L40782c.  return @kind void;
  #L40782e.  v0:= 1I;
  #L407830.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L407834.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L407838.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40783c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L407840.  v1:= 0I;
  #L407842.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.value` @type ^`java.lang.Object` := v1 @kind object;
  #L407846.  if v0 != 0 then goto L407856;
  #L40784a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L40784e.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L407854.  goto L407860;
  #L407856.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L40785a.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L407860.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$SingleElementSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407874.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L407878.  if v0 == 0 then goto L407884;
  #L40787c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L407882.  return @kind void;
  #L407884.  v0:= 1I;
  #L407886.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40788a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40788e.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L407892.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L407896.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40789c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$SingleElementSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4078b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L4078b4.  if v0 == 0 then goto L4078ba;
  #L4078b8.  return @kind void;
  #L4078ba.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4078be.  if v0 == 0 then goto L4078f4;
  #L4078c2.  v3:= 1I;
  #L4078c4.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L4078c8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4078cc.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4078d2.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4078d6.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4078da.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4078de.  v0:= new `java.lang.IllegalArgumentException`;
  #L4078e2.  v1:= "Sequence contains more than one element!" @kind object;
  #L4078e6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4078ec.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4078f2.  return @kind void;
  #L4078f4.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4078f8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$SingleElementSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40790c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407910.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L407916.  v0:= temp;
  #L407918.  if v0 == 0 then goto L40793a;
  #L40791c.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L407920.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L407924.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L40792a.  v0:= 9223372036854775807L;
  #L407934.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40793a.  return @kind void;
}
