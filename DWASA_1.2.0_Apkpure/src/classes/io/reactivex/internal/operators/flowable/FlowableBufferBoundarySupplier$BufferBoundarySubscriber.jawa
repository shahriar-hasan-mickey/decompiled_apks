record `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.once` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ef720.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L3ef726.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` := v1 @kind object;
  #L3ef72a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef73c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.once` @type ^`boolean` @kind boolean;
  #L3ef740.  if v0 == 0 then goto L3ef746;
  #L3ef744.  return @kind void;
  #L3ef746.  v0:= 1I;
  #L3ef748.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.once` @type ^`boolean` := v0 @kind boolean;
  #L3ef74c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` @kind object;
  #L3ef750.  call `next`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.next:()V` @kind virtual;
  #L3ef756.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef768.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.once` @type ^`boolean` @kind boolean;
  #L3ef76c.  if v0 == 0 then goto L3ef778;
  #L3ef770.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ef776.  return @kind void;
  #L3ef778.  v0:= 1I;
  #L3ef77a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.once` @type ^`boolean` := v0 @kind boolean;
  #L3ef77e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` @kind object;
  #L3ef782.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ef788.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3ef79c.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.once` @type ^`boolean` @kind boolean;
  #L3ef7a0.  if v1 == 0 then goto L3ef7a6;
  #L3ef7a4.  return @kind void;
  #L3ef7a6.  v1:= 1I;
  #L3ef7a8.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.once` @type ^`boolean` := v1 @kind boolean;
  #L3ef7ac.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySubscriber;.cancel:()V` @kind virtual;
  #L3ef7b2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` @kind object;
  #L3ef7b6.  call `next`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.next:()V` @kind virtual;
  #L3ef7bc.  return @kind void;
}
