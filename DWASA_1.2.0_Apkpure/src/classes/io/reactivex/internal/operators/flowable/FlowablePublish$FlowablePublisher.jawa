record `io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher` @kind class @AccessFlag FINAL extends `org.reactivestreams.Publisher` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher.bufferSize` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher.curr` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$FlowablePublisher;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L401768.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40176e.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher.curr` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L401772.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher.bufferSize` @type ^`int` := v2;
  #L401776.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$FlowablePublisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L401788.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`;
  #L40178c.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L401792.  call `onSubscribe`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L401798.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40179c.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4017a2.  v7:= temp @kind object;
  #L4017a4.  v7:= (`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`) v7 @kind object;
  #L4017a8.  if v7 == 0 then goto L4017b8;
  #L4017ac.  call temp:= `isDisposed`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.isDisposed:()Z` @kind virtual;
  #L4017b2.  v1:= temp;
  #L4017b4.  if v1 == 0 then goto L4017de;
  #L4017b8.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`;
  #L4017bc.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4017c0.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher.bufferSize` @type ^`int`;
  #L4017c4.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L4017ca.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4017ce.  call temp:= `compareAndSet`(v2, v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4017d4.  v7:= temp;
  #L4017d6.  if v7 != 0 then goto L4017dc;
  #L4017da.  goto L401798;
  #L4017dc.  v7:= v1 @kind object;
  #L4017de.  call temp:= `add`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.add:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)Z` @kind virtual;
  #L4017e4.  v1:= temp;
  #L4017e6.  if v1 == 0 then goto L401798;
  #L4017ea.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.get:()J` @kind virtual;
  #L4017f0.  v1:= temp @kind wide;
  #L4017f2.  v3:= -9223372036854775808L;
  #L4017f6.  v5:= lcmp(v1, v3);
  #L4017fa.  if v5 != 0 then goto L401806;
  #L4017fe.  call `remove`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)V` @kind virtual;
  #L401804.  goto L40180a;
  #L401806.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` := v7 @kind object;
  #L40180a.  call `dispatch`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L401810.  return @kind void;
}
