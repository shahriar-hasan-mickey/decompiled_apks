record `io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.collector` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.u` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$CollectSubscriber;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f14fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f1502.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L3f1506.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.collector` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L3f150a.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.u` @type ^`java.lang.Object` := v2 @kind object;
  #L3f150e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$CollectSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1520.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f1524.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f152a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f152e.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f1532.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$CollectSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f14d8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f14dc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f14e0.  if v0 != v1 then goto L3f14e8;
  #L3f14e4.  v0:= 1I;
  #L3f14e6.  goto L3f14ea;
  #L3f14e8.  v0:= 0I;
  #L3f14ea.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$CollectSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1544.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f1548.  if v0 == 0 then goto L3f154e;
  #L3f154c.  return @kind void;
  #L3f154e.  v0:= 1I;
  #L3f1550.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f1554.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f1558.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f155c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f1560.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.u` @type ^`java.lang.Object` @kind object;
  #L3f1564.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3f156a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$CollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f157c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f1580.  if v0 == 0 then goto L3f158c;
  #L3f1584.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f158a.  return @kind void;
  #L3f158c.  v0:= 1I;
  #L3f158e.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f1592.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f1596.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f159a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f159e.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f15a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$CollectSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f15b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f15bc.  if v0 == 0 then goto L3f15c2;
  #L3f15c0.  return @kind void;
  #L3f15c2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.collector` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L3f15c6.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.u` @type ^`java.lang.Object` @kind object;
  #L3f15ca.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3f15d0.  goto L3f15ea;
  #L3f15d2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f15d4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f15da.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f15de.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f15e4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$CollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f15ea.  return @kind void;
  catch `java.lang.Throwable` @[L3f15c2..L3f15d0] goto L3f15d2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$CollectSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1608.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f160c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f1612.  v0:= temp;
  #L3f1614.  if v0 == 0 then goto L3f1636;
  #L3f1618.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f161c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f1620.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3f1626.  v0:= 9223372036854775807L;
  #L3f1630.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f1636.  return @kind void;
}
