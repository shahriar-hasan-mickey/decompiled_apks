record `io.reactivex.internal.operators.flowable.FlowableDoFinally` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoFinally.onFinally` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoFinally` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f6378.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f637e.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally.onFinally` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L3f6382.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableDoFinally` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3f6394.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L3f6398.  if v0 == 0 then goto L3f63ba;
  #L3f639c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f63a0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber`;
  #L3f63a4.  v4:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v4 @kind object;
  #L3f63a8.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally.onFinally` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f63ac.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f63b2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f63b8.  goto L3f63d2;
  #L3f63ba.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f63be.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber`;
  #L3f63c2.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally.onFinally` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f63c6.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f63cc.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f63d2.  return @kind void;
}
