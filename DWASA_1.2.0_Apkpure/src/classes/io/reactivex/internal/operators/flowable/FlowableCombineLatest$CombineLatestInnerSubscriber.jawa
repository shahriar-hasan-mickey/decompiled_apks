record `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.prefetch` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.produced` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f1d3c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f1d42.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` := v1 @kind object;
  #L3f1d46.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @type ^`int` := v2;
  #L3f1d4a.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.prefetch` @type ^`int` := v3;
  #L3f1d4e.  v1:= v3 ^> 2;
  #L3f1d52.  v3:= v3 - v1 @kind int;
  #L3f1d54.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.limit` @type ^`int` := v3;
  #L3f1d58.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L3f1d6c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f1d72.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1d84.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` @kind object;
  #L3f1d88.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @type ^`int`;
  #L3f1d8c.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerComplete:(I)V` @kind virtual;
  #L3f1d92.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1da4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` @kind object;
  #L3f1da8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @type ^`int`;
  #L3f1dac.  call `innerError`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerError:(ILjava/lang/Throwable;)V` @kind virtual;
  #L3f1db2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1dc4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` @kind object;
  #L3f1dc8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @type ^`int`;
  #L3f1dcc.  call `innerValue`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerValue:(ILjava/lang/Object;)V` @kind virtual;
  #L3f1dd2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1de4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.prefetch` @type ^`int`;
  #L3f1de8.  v0:= (`long`) v0 @kind i2l;
  #L3f1dea.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L3f1df0.  return @kind void;
}
procedure `void` `requestOne`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.requestOne:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f1e04.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.produced` @type ^`int`;
  #L3f1e08.  v0:= v0 + 1;
  #L3f1e0c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.limit` @type ^`int`;
  #L3f1e10.  if v0 != v1 then goto L3f1e30;
  #L3f1e14.  v1:= 0I;
  #L3f1e16.  v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.produced` @type ^`int` := v1;
  #L3f1e1a.  call temp:= `get`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f1e20.  v1:= temp @kind object;
  #L3f1e22.  v1:= (`org.reactivestreams.Subscription`) v1 @kind object;
  #L3f1e26.  v2:= (`long`) v0 @kind i2l;
  #L3f1e28.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f1e2e.  goto L3f1e34;
  #L3f1e30.  v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.produced` @type ^`int` := v0;
  #L3f1e34.  return @kind void;
}
