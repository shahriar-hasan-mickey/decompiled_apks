record `io.reactivex.internal.operators.flowable.FlowableFromIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableFromIterable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fad6c.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L3fad72.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable.source` @type ^`java.lang.Iterable` := v1 @kind object;
  #L3fad76.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.subscribe:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3fad88.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fad8e.  v0:= temp;
  #L3fad90.  if v0 != 0 then goto L3fad9c;
  #L3fad94.  call `complete`(v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3fad9a.  return @kind void;
  #L3fad9c.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L3fada0.  if v0 == 0 then goto L3fadbc;
  #L3fada4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription`;
  #L3fada8.  v1:= v2 @kind object;
  #L3fadaa.  v1:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v1 @kind object;
  #L3fadae.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;)V` @kind direct;
  #L3fadb4.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fadba.  goto L3fadcc;
  #L3fadbc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription`;
  #L3fadc0.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind direct;
  #L3fadc6.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fadcc.  return @kind void;
  #L3fadce.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fadd0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fadd6.  call `error`(v3, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3faddc.  return @kind void;
  catch `java.lang.Throwable` @[L3fad88..L3fad90] goto L3fadce;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFromIterable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fadfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable.source` @type ^`java.lang.Iterable` @kind object;
  #L3fae00.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3fae06.  v0:= temp @kind object;
  #L3fae08.  call `subscribe`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.subscribe:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind static;
  #L3fae0e.  return @kind void;
  #L3fae10.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fae12.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fae18.  call `error`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3fae1e.  return @kind void;
  catch `java.lang.Throwable` @[L3fadfc..L3fae08] goto L3fae10;
}
