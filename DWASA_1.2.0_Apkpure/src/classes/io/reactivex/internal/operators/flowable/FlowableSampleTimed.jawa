record `io.reactivex.internal.operators.flowable.FlowableSampleTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSampleTimed.emitLast` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSampleTimed.period` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableSampleTimed.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableSampleTimed.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4063ec.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L4063f2.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.period` @type ^`long` := v2 @kind wide;
  #L4063f6.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4063fa.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.scheduler` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L4063fe.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.emitLast` @type ^`boolean` := v6 @kind boolean;
  #L406402.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed` v7 @kind this, `org.reactivestreams.Subscriber` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L406414.  v1:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L406418.  call `<init>`(v1, v8) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40641e.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.emitLast` @type ^`boolean` @kind boolean;
  #L406422.  if v8 == 0 then goto L40644a;
  #L406426.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40642a.  v6:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast`;
  #L40642e.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.period` @type ^`long` @kind wide;
  #L406432.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L406436.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40643a.  v0:= v6 @kind object;
  #L40643c.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedEmitLast;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L406442.  call `subscribe`(v8, v6) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L406448.  goto L40646c;
  #L40644a.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40644e.  v6:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedNoLast`;
  #L406452.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.period` @type ^`long` @kind wide;
  #L406456.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40645a.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40645e.  v0:= v6 @kind object;
  #L406460.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedNoLast;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L406466.  call `subscribe`(v8, v6) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40646c.  return @kind void;
}
