record `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debounceSelector` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.index` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f492c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f4932.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f4936.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f493c.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3f4940.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L3f4944.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debounceSelector` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L3f4948.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f495c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f4960.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f4966.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f496a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f4970.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.emit:(JLjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f4984.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.index` @type ^`long` @kind wide;
  #L3f4988.  v2:= lcmp(v4, v0);
  #L3f498c.  if v2 != 0 then goto L3f49d8;
  #L3f4990.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.get:()J` @kind virtual;
  #L3f4996.  v4:= temp @kind wide;
  #L3f4998.  v0:= 0L;
  #L3f499c.  v2:= lcmp(v4, v0);
  #L3f49a0.  if v2 == 0 then goto L3f49ba;
  #L3f49a4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f49a8.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f49ae.  v4:= 1L;
  #L3f49b2.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f49b8.  goto L3f49d8;
  #L3f49ba.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.cancel:()V` @kind virtual;
  #L3f49c0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f49c4.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3f49c8.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L3f49cc.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f49d2.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f49d8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f49ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f49f0.  if v0 == 0 then goto L3f49f6;
  #L3f49f4.  return @kind void;
  #L3f49f6.  v0:= 1I;
  #L3f49f8.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f49fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f4a00.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f4a06.  v0:= temp @kind object;
  #L3f4a08.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3f4a0c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3f4a12.  v1:= temp;
  #L3f4a14.  if v1 != 0 then goto L3f4a36;
  #L3f4a18.  v0:= (`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber`) v0 @kind object;
  #L3f4a1c.  call `emit`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.emit:()V` @kind virtual;
  #L3f4a22.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f4a26.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f4a2c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4a30.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f4a36.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4a48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f4a4c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f4a52.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4a56.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f4a5c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4a70.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f4a74.  if v0 == 0 then goto L3f4a7a;
  #L3f4a78.  return @kind void;
  #L3f4a7a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.index` @type ^`long` @kind wide;
  #L3f4a7e.  v2:= 1L;
  #L3f4a82.  v0:= v0 + v2 @kind long;
  #L3f4a84.  v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.index` @type ^`long` := v0 @kind wide;
  #L3f4a88.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f4a8c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f4a92.  v2:= temp @kind object;
  #L3f4a94.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L3f4a98.  if v2 == 0 then goto L3f4aa2;
  #L3f4a9c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3f4aa2.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debounceSelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f4aa6.  call temp:= `apply`(v3, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f4aac.  v3:= temp @kind object;
  #L3f4aae.  v4:= "The publisher supplied is null" @kind object;
  #L3f4ab2.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4ab8.  v3:= temp @kind object;
  #L3f4aba.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L3f4abe.  v4:= new `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber`;
  #L3f4ac2.  call `<init>`(v4, v5, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;JLjava/lang/Object;)V` @kind direct;
  #L3f4ac8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f4acc.  call temp:= `compareAndSet`(v6, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f4ad2.  v6:= temp;
  #L3f4ad4.  if v6 == 0 then goto L3f4ade;
  #L3f4ad8.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3f4ade.  return @kind void;
  #L3f4ae0.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f4ae2.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f4ae8.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.cancel:()V` @kind virtual;
  #L3f4aee.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4af2.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f4af8.  return @kind void;
  catch `java.lang.Throwable` @[L3f4aa2..L3f4abe] goto L3f4ae0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4b18.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f4b1c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f4b22.  v0:= temp;
  #L3f4b24.  if v0 == 0 then goto L3f4b46;
  #L3f4b28.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f4b2c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4b30.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f4b36.  v0:= 9223372036854775807L;
  #L3f4b40.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f4b46.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4b58.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f4b5e.  v0:= temp;
  #L3f4b60.  if v0 == 0 then goto L3f4b6a;
  #L3f4b64.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f4b6a.  return @kind void;
}
