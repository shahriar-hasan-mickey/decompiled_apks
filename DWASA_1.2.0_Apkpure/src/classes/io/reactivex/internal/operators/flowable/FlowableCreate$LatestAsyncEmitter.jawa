record `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f4140.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f4146.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f414a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f4150.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3f4154.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3f4158.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f415e.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L3f4162.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v15 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L3f4174.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f4178.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3f417e.  v0:= temp;
  #L3f4180.  if v0 == 0 then goto L3f4186;
  #L3f4184.  return @kind void;
  #L3f4186.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f418a.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f418e.  v2:= 1I;
  #L3f4190.  v3:= 1I;
  #L3f4192.  call temp:= `get`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.get:()J` @kind virtual;
  #L3f4198.  v4:= temp @kind wide;
  #L3f419a.  v6:= 0L;
  #L3f419e.  v8:= v6 @kind wide;
  #L3f41a0.  v10:= 0I;
  #L3f41a2.  v11:= 0I;
  #L3f41a4.  v12:= lcmp(v8, v4);
  #L3f41a8.  if v12 == 0 then goto L3f420a;
  #L3f41ac.  call temp:= `isCancelled`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.isCancelled:()Z` @kind virtual;
  #L3f41b2.  v12:= temp;
  #L3f41b4.  if v12 == 0 then goto L3f41c0;
  #L3f41b8.  call `lazySet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3f41be.  return @kind void;
  #L3f41c0.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L3f41c4.  call temp:= `getAndSet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f41ca.  v13:= temp @kind object;
  #L3f41cc.  if v13 != 0 then goto L3f41d4;
  #L3f41d0.  v14:= 1I;
  #L3f41d2.  goto L3f41d6;
  #L3f41d4.  v14:= 0I;
  #L3f41d6.  if v12 == 0 then goto L3f41f6;
  #L3f41da.  if v14 == 0 then goto L3f41f6;
  #L3f41de.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L3f41e2.  if v0 == 0 then goto L3f41ee;
  #L3f41e6.  call temp:= `error`(v15, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.error:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f41ec.  goto L3f41f4;
  #L3f41ee.  call `complete`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.complete:()V` @kind virtual;
  #L3f41f4.  return @kind void;
  #L3f41f6.  if v14 == 0 then goto L3f41fc;
  #L3f41fa.  goto L3f420a;
  #L3f41fc.  call `onNext`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f4202.  v10:= 1L;
  #L3f4206.  v8:= v8 + v10 @kind long;
  #L3f4208.  goto L3f41a0;
  #L3f420a.  v12:= lcmp(v8, v4);
  #L3f420e.  if v12 != 0 then goto L3f4258;
  #L3f4212.  call temp:= `isCancelled`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.isCancelled:()Z` @kind virtual;
  #L3f4218.  v4:= temp;
  #L3f421a.  if v4 == 0 then goto L3f4226;
  #L3f421e.  call `lazySet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3f4224.  return @kind void;
  #L3f4226.  v4:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L3f422a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f4230.  v5:= temp @kind object;
  #L3f4232.  if v5 != 0 then goto L3f4238;
  #L3f4236.  v10:= 1I;
  #L3f4238.  if v4 == 0 then goto L3f4258;
  #L3f423c.  if v10 == 0 then goto L3f4258;
  #L3f4240.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L3f4244.  if v0 == 0 then goto L3f4250;
  #L3f4248.  call temp:= `error`(v15, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.error:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f424e.  goto L3f4256;
  #L3f4250.  call `complete`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.complete:()V` @kind virtual;
  #L3f4256.  return @kind void;
  #L3f4258.  v4:= lcmp(v8, v6);
  #L3f425c.  if v4 == 0 then goto L3f4266;
  #L3f4260.  call temp:= `produced`(v15, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f4266.  v4:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f426a.  v3:= -v3 @kind int;
  #L3f426c.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L3f4272.  v3:= temp;
  #L3f4274.  if v3 != 0 then goto L3f4192;
  #L3f4278.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f428c.  v0:= 1I;
  #L3f428e.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L3f4292.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @kind virtual;
  #L3f4298.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f42ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L3f42b0.  if v0 != 0 then goto L3f42ec;
  #L3f42b4.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.isCancelled:()Z` @kind virtual;
  #L3f42ba.  v0:= temp;
  #L3f42bc.  if v0 == 0 then goto L3f42c2;
  #L3f42c0.  goto L3f42ec;
  #L3f42c2.  if v2 != 0 then goto L3f42dc;
  #L3f42c6.  v2:= new `java.lang.NullPointerException`;
  #L3f42ca.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3f42ce.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f42d4.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f42da.  return @kind void;
  #L3f42dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f42e0.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3f42e6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @kind virtual;
  #L3f42ec.  return @kind void;
}
procedure `void` `onRequested`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onRequested:()V` @AccessFlag  {
    temp;

  #L3f4300.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @kind virtual;
  #L3f4306.  return @kind void;
}
procedure `void` `onUnsubscribed`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onUnsubscribed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f4318.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f431c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3f4322.  v0:= temp;
  #L3f4324.  if v0 != 0 then goto L3f4334;
  #L3f4328.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f432c.  v1:= 0I;
  #L3f432e.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3f4334.  return @kind void;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f40ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L3f40f0.  if v0 != 0 then goto L3f412c;
  #L3f40f4.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.isCancelled:()Z` @kind virtual;
  #L3f40fa.  v0:= temp;
  #L3f40fc.  if v0 == 0 then goto L3f4102;
  #L3f4100.  goto L3f412c;
  #L3f4102.  if v3 != 0 then goto L3f411a;
  #L3f4106.  v0:= new `java.lang.NullPointerException`;
  #L3f410a.  v1:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3f410e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4114.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f411a.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L3f411e.  v3:= 1I;
  #L3f4120.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` := v3 @kind boolean;
  #L3f4124.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @kind virtual;
  #L3f412a.  return v3;
  #L3f412c.  v3:= 0I;
  #L3f412e.  return v3;
}
