record `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.emitLast` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.emitted` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.latest` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.requested` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timeout` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerFired` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerRunning` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40a34c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40a352.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40a356.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timeout` @type ^`long` := v2 @kind wide;
  #L40a35a.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L40a35e.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L40a362.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.emitLast` @type ^`boolean` := v6 @kind boolean;
  #L40a366.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40a36a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40a370.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.latest` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40a374.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40a378.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40a37e.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40a382.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a394.  v0:= 1I;
  #L40a396.  v2.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40a39a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a39e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a3a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40a3a8.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40a3ae.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40a3b4.  v0:= temp;
  #L40a3b6.  if v0 != 0 then goto L40a3c6;
  #L40a3ba.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40a3be.  v1:= 0I;
  #L40a3c0.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40a3c6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L40a3d8.  call temp:= `getAndIncrement`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40a3de.  v0:= temp;
  #L40a3e0.  if v0 == 0 then goto L40a3e6;
  #L40a3e4.  return @kind void;
  #L40a3e6.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40a3ea.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40a3ee.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a3f2.  v3:= 1I;
  #L40a3f4.  v4:= 1I;
  #L40a3f6.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40a3fa.  v6:= 0I;
  #L40a3fc.  if v5 == 0 then goto L40a408;
  #L40a400.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40a406.  return @kind void;
  #L40a408.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.done` @type ^`boolean` @kind boolean;
  #L40a40c.  if v5 == 0 then goto L40a434;
  #L40a410.  v7:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L40a414.  if v7 == 0 then goto L40a434;
  #L40a418.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40a41e.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L40a422.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a428.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40a42c.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40a432.  return @kind void;
  #L40a434.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40a43a.  v7:= temp @kind object;
  #L40a43c.  v8:= 0I;
  #L40a43e.  if v7 != 0 then goto L40a446;
  #L40a442.  v7:= 1I;
  #L40a444.  goto L40a448;
  #L40a446.  v7:= 0I;
  #L40a448.  v9:= 1L;
  #L40a44c.  if v5 == 0 then goto L40a4ba;
  #L40a450.  if v7 != 0 then goto L40a4a2;
  #L40a454.  v3:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.emitLast` @type ^`boolean` @kind boolean;
  #L40a458.  if v3 == 0 then goto L40a4a2;
  #L40a45c.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40a462.  v0:= temp @kind object;
  #L40a464.  v3:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.emitted` @type ^`long` @kind wide;
  #L40a468.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40a46e.  v5:= temp @kind wide;
  #L40a470.  v1:= lcmp(v3, v5);
  #L40a474.  if v1 == 0 then goto L40a48c;
  #L40a478.  v3:= v3 + v9 @kind long;
  #L40a47a.  v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.emitted` @type ^`long` := v3 @kind wide;
  #L40a47e.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40a484.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40a48a.  goto L40a4ae;
  #L40a48c.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40a490.  v1:= "Could not emit final value due to lack of requests" @kind object;
  #L40a494.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40a49a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a4a0.  goto L40a4ae;
  #L40a4a2.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40a4a8.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40a4ae.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40a4b2.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40a4b8.  return @kind void;
  #L40a4ba.  if v7 == 0 then goto L40a4d0;
  #L40a4be.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerFired` @type ^`boolean` @kind boolean;
  #L40a4c2.  if v5 == 0 then goto L40a4e2;
  #L40a4c6.  v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerRunning` @type ^`boolean` := v8 @kind boolean;
  #L40a4ca.  v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerFired` @type ^`boolean` := v8 @kind boolean;
  #L40a4ce.  goto L40a4e2;
  #L40a4d0.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerRunning` @type ^`boolean` @kind boolean;
  #L40a4d4.  if v5 == 0 then goto L40a4f2;
  #L40a4d8.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerFired` @type ^`boolean` @kind boolean;
  #L40a4dc.  if v5 == 0 then goto L40a4e2;
  #L40a4e0.  goto L40a4f2;
  #L40a4e2.  v4:= -v4 @kind int;
  #L40a4e4.  call temp:= `addAndGet`(v14, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.addAndGet:(I)I` @kind virtual;
  #L40a4ea.  v4:= temp;
  #L40a4ec.  if v4 != 0 then goto L40a3f6;
  #L40a4f0.  return @kind void;
  #L40a4f2.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40a4f8.  v5:= temp @kind object;
  #L40a4fa.  v6:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.emitted` @type ^`long` @kind wide;
  #L40a4fe.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40a504.  v11:= temp @kind wide;
  #L40a506.  v13:= lcmp(v6, v11);
  #L40a50a.  if v13 == 0 then goto L40a538;
  #L40a50e.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40a514.  v6:= v6 + v9 @kind long;
  #L40a516.  v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.emitted` @type ^`long` := v6 @kind wide;
  #L40a51a.  v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerFired` @type ^`boolean` := v8 @kind boolean;
  #L40a51e.  v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerRunning` @type ^`boolean` := v3 @kind boolean;
  #L40a522.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40a526.  v6:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timeout` @type ^`long` @kind wide;
  #L40a52a.  v8:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40a52e.  call temp:= `schedule`(v5, v14, v6, v8) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40a534.  goto L40a3f6;
  #L40a538.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a53c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a542.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40a546.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L40a54a.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40a550.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a556.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40a55a.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40a560.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a574.  v0:= 1I;
  #L40a576.  v1.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40a57a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.drain:()V` @kind virtual;
  #L40a580.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L40a594.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L40a598.  v1:= 1I;
  #L40a59a.  v0.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L40a59e.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.drain:()V` @kind virtual;
  #L40a5a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a5b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40a5bc.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L40a5c2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.drain:()V` @kind virtual;
  #L40a5c8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a5dc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a5e0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40a5e6.  v0:= temp;
  #L40a5e8.  if v0 == 0 then goto L40a60a;
  #L40a5ec.  v2.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40a5f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a5f4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40a5fa.  v0:= 9223372036854775807L;
  #L40a604.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40a60a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a61c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40a622.  v0:= temp;
  #L40a624.  if v0 == 0 then goto L40a632;
  #L40a628.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40a62c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40a632.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a644.  v0:= 1I;
  #L40a646.  v1.`io.reactivex.internal.operators.flowable.FlowableThrottleLatest$ThrottleLatestSubscriber.timerFired` @type ^`boolean` := v0 @kind boolean;
  #L40a64a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest$ThrottleLatestSubscriber;.drain:()V` @kind virtual;
  #L40a650.  return @kind void;
}
