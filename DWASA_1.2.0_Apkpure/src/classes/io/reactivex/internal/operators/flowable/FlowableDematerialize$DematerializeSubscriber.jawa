record `io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f54a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f54a6.  v0.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f54aa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f54bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f54c0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f54c6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f54d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f54dc.  if v0 == 0 then goto L3f54e2;
  #L3f54e0.  return @kind void;
  #L3f54e2.  v0:= 1I;
  #L3f54e4.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f54e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f54ec.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f54f2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5504.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f5508.  if v0 == 0 then goto L3f5514;
  #L3f550c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f5512.  return @kind void;
  #L3f5514.  v0:= 1I;
  #L3f5516.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f551a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f551e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f5524.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.onNext:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5538.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f553c.  if v0 == 0 then goto L3f555c;
  #L3f5540.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L3f5546.  v0:= temp;
  #L3f5548.  if v0 == 0 then goto L3f555a;
  #L3f554c.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L3f5552.  v2:= temp @kind object;
  #L3f5554.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f555a.  return @kind void;
  #L3f555c.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L3f5562.  v0:= temp;
  #L3f5564.  if v0 == 0 then goto L3f5582;
  #L3f5568.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f556c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f5572.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L3f5578.  v2:= temp @kind object;
  #L3f557a.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f5580.  goto L3f55b2;
  #L3f5582.  call temp:= `isOnComplete`(v2) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L3f5588.  v0:= temp;
  #L3f558a.  if v0 == 0 then goto L3f55a0;
  #L3f558e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5592.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f5598.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.onComplete:()V` @kind virtual;
  #L3f559e.  goto L3f55b2;
  #L3f55a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f55a4.  call temp:= `getValue`(v2) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L3f55aa.  v2:= temp @kind object;
  #L3f55ac.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f55b2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f55c4.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L3f55c8.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.onNext:(Lio/reactivex/Notification;)V` @kind virtual;
  #L3f55ce.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f55e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f55e4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f55ea.  v0:= temp;
  #L3f55ec.  if v0 == 0 then goto L3f55fe;
  #L3f55f0.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3f55f4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f55f8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f55fe.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$DematerializeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5610.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5614.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f561a.  return @kind void;
}
