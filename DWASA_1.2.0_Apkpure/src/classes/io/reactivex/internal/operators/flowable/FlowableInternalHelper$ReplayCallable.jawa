record `io.reactivex.internal.operators.flowable.FlowableInternalHelper$ReplayCallable` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableInternalHelper$ReplayCallable.parent` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ReplayCallable` v0 @kind this, `io.reactivex.Flowable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper$ReplayCallable;.<init>:(Lio/reactivex/Flowable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fcfa0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fcfa6.  v0.`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ReplayCallable.parent` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L3fcfaa.  return @kind void;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `call`(`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ReplayCallable` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper$ReplayCallable;.call:()Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fcf64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ReplayCallable.parent` @type ^`io.reactivex.Flowable` @kind object;
  #L3fcf68.  call temp:= `replay`(v0) @signature `Lio/reactivex/Flowable;.replay:()Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3fcf6e.  v0:= temp @kind object;
  #L3fcf70.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ReplayCallable` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper$ReplayCallable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3fcf84.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper$ReplayCallable;.call:()Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3fcf8a.  v0:= temp @kind object;
  #L3fcf8c.  return v0 @kind object;
}
