record `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSupport` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.unit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40b294.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40b29a.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40b29e.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.timeout` @type ^`long` := v2 @kind wide;
  #L40b2a2.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L40b2a6.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L40b2aa.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L40b2ae.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L40b2b4.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L40b2b8.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40b2bc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40b2c2.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40b2c6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40b2ca.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40b2d0.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40b2d4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b2e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40b2ec.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40b2f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b2f6.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40b2fc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40b310.  v0:= 9223372036854775807L;
  #L40b31a.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.getAndSet:(J)J` @kind virtual;
  #L40b320.  v2:= temp @kind wide;
  #L40b322.  v4:= lcmp(v2, v0);
  #L40b326.  if v4 == 0 then goto L40b348;
  #L40b32a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40b32e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40b334.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b338.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40b33e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b342.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40b348.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40b35c.  v0:= 9223372036854775807L;
  #L40b366.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.getAndSet:(J)J` @kind virtual;
  #L40b36c.  v2:= temp @kind wide;
  #L40b36e.  v4:= lcmp(v2, v0);
  #L40b372.  if v4 == 0 then goto L40b396;
  #L40b376.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40b37a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40b380.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b384.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40b38a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b38e.  call `dispose`(v6) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40b394.  goto L40b39c;
  #L40b396.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40b39c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40b3b0.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.get:()J` @kind virtual;
  #L40b3b6.  v0:= temp @kind wide;
  #L40b3b8.  v2:= 9223372036854775807L;
  #L40b3c2.  v4:= lcmp(v0, v2);
  #L40b3c6.  if v4 == 0 then goto L40b404;
  #L40b3ca.  v2:= 1L;
  #L40b3ce.  v2:= v2 + v0 @kind long;
  #L40b3d0.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L40b3d6.  v0:= temp;
  #L40b3d8.  if v0 != 0 then goto L40b3de;
  #L40b3dc.  goto L40b404;
  #L40b3de.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40b3e2.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40b3e8.  v0:= temp @kind object;
  #L40b3ea.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L40b3ee.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40b3f4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b3f8.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40b3fe.  call `startTimeout`(v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.startTimeout:(J)V` @kind virtual;
  #L40b404.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b418.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40b41c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40b420.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40b426.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b438.  v0:= 9223372036854775807L;
  #L40b442.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L40b448.  v3:= temp;
  #L40b44a.  if v3 == 0 then goto L40b476;
  #L40b44e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40b452.  call temp:= `cancel`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40b458.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b45c.  v4:= new `java.util.concurrent.TimeoutException`;
  #L40b460.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L40b466.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40b46c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b470.  call `dispose`(v3) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40b476.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b488.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40b48c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40b490.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L40b496.  return @kind void;
}
procedure `void` `startTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.startTimeout:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40b4a8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40b4ac.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b4b0.  v2:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutTask`;
  #L40b4b4.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutTask;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSupport;)V` @kind direct;
  #L40b4ba.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.timeout` @type ^`long` @kind wide;
  #L40b4be.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40b4c2.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40b4c8.  v5:= temp @kind object;
  #L40b4ca.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40b4d0.  return @kind void;
}
