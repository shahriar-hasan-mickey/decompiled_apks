record `io.reactivex.internal.operators.flowable.FlowableReduceWithSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.reducer` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.seedSupplier` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReduceWithSingle` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceWithSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L403694.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L40369a.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.source` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L40369e.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.seedSupplier` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L4036a2.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.reducer` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L4036a6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableReduceWithSingle` v4 @kind this, `io.reactivex.SingleObserver` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceWithSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4036b8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.seedSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L4036bc.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4036c2.  v0:= temp @kind object;
  #L4036c4.  v1:= "The seedSupplier returned a null value" @kind object;
  #L4036c8.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4036ce.  v0:= temp @kind object;
  #L4036d0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4036d4.  v2:= new `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver`;
  #L4036d8.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReduceWithSingle.reducer` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4036dc.  call `<init>`(v2, v5, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$ReduceSeedObserver;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;)V` @kind direct;
  #L4036e2.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4036e8.  return @kind void;
  #L4036ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4036ec.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4036f2.  call `error`(v0, v5) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L4036f8.  return @kind void;
  catch `java.lang.Throwable` @[L4036b8..L4036d0] goto L4036ea;
}
