record `io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f43cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f43d2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f43e4.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.isCancelled:()Z` @kind virtual;
  #L3f43ea.  v0:= temp;
  #L3f43ec.  if v0 == 0 then goto L3f43f2;
  #L3f43f0.  return @kind void;
  #L3f43f2.  if v6 != 0 then goto L3f440c;
  #L3f43f6.  v6:= new `java.lang.NullPointerException`;
  #L3f43fa.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3f43fe.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4404.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f440a.  return @kind void;
  #L3f440c.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.get:()J` @kind virtual;
  #L3f4412.  v0:= temp @kind wide;
  #L3f4414.  v2:= 0L;
  #L3f4418.  v4:= lcmp(v0, v2);
  #L3f441c.  if v4 == 0 then goto L3f4436;
  #L3f4420.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4424.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f442a.  v0:= 1L;
  #L3f442e.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f4434.  goto L3f443c;
  #L3f4436.  call `onOverflow`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.onOverflow:()V` @kind virtual;
  #L3f443c.  return @kind void;
}
procedure `void` `onOverflow`() @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.onOverflow:()V` @AccessFlag ABSTRACT {

  # return;
}
