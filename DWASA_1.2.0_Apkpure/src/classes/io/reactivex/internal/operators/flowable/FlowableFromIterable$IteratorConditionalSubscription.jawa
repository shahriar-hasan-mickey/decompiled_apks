record `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fa9e8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L3fa9ee.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L3fa9f2.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3faa04.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L3faa08.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3faa0c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3faa10.  if v2 == 0 then goto L3faa16;
  #L3faa14.  return @kind void;
  #L3faa16.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3faa1c.  v2:= temp @kind object;
  #L3faa1e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3faa22.  if v3 == 0 then goto L3faa28;
  #L3faa26.  return @kind void;
  #L3faa28.  if v2 != 0 then goto L3faa42;
  #L3faa2c.  v0:= new `java.lang.NullPointerException`;
  #L3faa30.  v2:= "Iterator.next() returned a null value" @kind object;
  #L3faa34.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3faa3a.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3faa40.  return @kind void;
  #L3faa42.  call temp:= `tryOnNext`(v1, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3faa48.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3faa4c.  if v2 == 0 then goto L3faa52;
  #L3faa50.  return @kind void;
  #L3faa52.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3faa58.  v2:= temp;
  #L3faa5a.  if v2 != 0 then goto L3faa0c;
  #L3faa5e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3faa62.  if v0 != 0 then goto L3faa6c;
  #L3faa66.  call `onComplete`(v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L3faa6c.  return @kind void;
  #L3faa6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3faa70.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3faa76.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3faa7c.  return @kind void;
  #L3faa7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3faa80.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3faa86.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3faa8c.  return @kind void;
  catch `java.lang.Throwable` @[L3faa16..L3faa1e] goto L3faa7e;
  catch `java.lang.Throwable` @[L3faa52..L3faa5a] goto L3faa6e;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3faab8.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L3faabc.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3faac0.  v2:= 0L;
  #L3faac4.  v4:= v9 @kind wide;
  #L3faac6.  v9:= v2 @kind wide;
  #L3faac8.  v6:= lcmp(v9, v4);
  #L3faacc.  if v6 == 0 then goto L3fab60;
  #L3faad0.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3faad4.  if v6 == 0 then goto L3faada;
  #L3faad8.  return @kind void;
  #L3faada.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3faae0.  v6:= temp @kind object;
  #L3faae2.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3faae6.  if v7 == 0 then goto L3faaec;
  #L3faaea.  return @kind void;
  #L3faaec.  if v6 != 0 then goto L3fab06;
  #L3faaf0.  v9:= new `java.lang.NullPointerException`;
  #L3faaf4.  v10:= "Iterator.next() returned a null value" @kind object;
  #L3faaf8.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3faafe.  call `onError`(v1, v9) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fab04.  return @kind void;
  #L3fab06.  call temp:= `tryOnNext`(v1, v6) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3fab0c.  v6:= temp;
  #L3fab0e.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fab12.  if v7 == 0 then goto L3fab18;
  #L3fab16.  return @kind void;
  #L3fab18.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fab1e.  v7:= temp;
  #L3fab20.  if v7 != 0 then goto L3fab34;
  #L3fab24.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fab28.  if v9 != 0 then goto L3fab32;
  #L3fab2c.  call `onComplete`(v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L3fab32.  return @kind void;
  #L3fab34.  if v6 == 0 then goto L3faac8;
  #L3fab38.  v6:= 1L;
  #L3fab3c.  v9:= v9 + v6 @kind long;
  #L3fab3e.  goto L3faac8;
  #L3fab40.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fab42.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fab48.  call `onError`(v1, v9) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fab4e.  return @kind void;
  #L3fab50.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fab52.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fab58.  call `onError`(v1, v9) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fab5e.  return @kind void;
  #L3fab60.  call temp:= `get`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.get:()J` @kind virtual;
  #L3fab66.  v4:= temp @kind wide;
  #L3fab68.  v6:= lcmp(v9, v4);
  #L3fab6c.  if v6 != 0 then goto L3faac8;
  #L3fab70.  v9:= -v9 @kind long;
  #L3fab72.  call temp:= `addAndGet`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.addAndGet:(J)J` @kind virtual;
  #L3fab78.  v4:= temp @kind wide;
  #L3fab7a.  v9:= lcmp(v4, v2);
  #L3fab7e.  if v9 != 0 then goto L3faac6;
  #L3fab82.  return @kind void;
  catch `java.lang.Throwable` @[L3faada..L3faae2] goto L3fab50;
  catch `java.lang.Throwable` @[L3fab18..L3fab20] goto L3fab40;
}
