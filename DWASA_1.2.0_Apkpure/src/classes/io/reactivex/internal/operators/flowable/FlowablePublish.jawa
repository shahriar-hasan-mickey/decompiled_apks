record `io.reactivex.internal.operators.flowable.FlowablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.flowables.ConnectableFlowable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamPublisher` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish.bufferSize` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish.current` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowablePublish.onSubscribe` @AccessFlag FINAL;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowablePublish.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish.CANCELLED` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.Flowable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4028c8.  call `<init>`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L4028ce.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.onSubscribe` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4028d2.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.source` @type ^`io.reactivex.Flowable` := v2 @kind object;
  #L4028d6.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4028da.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.bufferSize` @type ^`int` := v4;
  #L4028de.  return @kind void;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L402878.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40287c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L402882.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$FlowablePublisher`;
  #L402886.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$FlowablePublisher;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L40288c.  v2:= new `io.reactivex.internal.operators.flowable.FlowablePublish`;
  #L402890.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L402896.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L40289c.  v3:= temp @kind object;
  #L40289e.  return v3 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.flowable.FlowablePublish` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4028f0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4028f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4028fa.  v0:= temp @kind object;
  #L4028fc.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`) v0 @kind object;
  #L402900.  if v0 == 0 then goto L402910;
  #L402904.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.isDisposed:()Z` @kind virtual;
  #L40290a.  v1:= temp;
  #L40290c.  if v1 == 0 then goto L402936;
  #L402910.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`;
  #L402914.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L402918.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.bufferSize` @type ^`int`;
  #L40291c.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L402922.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L402926.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40292c.  v0:= temp;
  #L40292e.  if v0 != 0 then goto L402934;
  #L402932.  goto L4028f0;
  #L402934.  v0:= v1 @kind object;
  #L402936.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40293a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L402940.  v1:= temp;
  #L402942.  v2:= 1I;
  #L402944.  v3:= 0I;
  #L402946.  if v1 != 0 then goto L40295c;
  #L40294a.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40294e.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L402954.  v1:= temp;
  #L402956.  if v1 == 0 then goto L40295c;
  #L40295a.  goto L40295e;
  #L40295c.  v2:= 0I;
  #L40295e.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L402964.  if v2 == 0 then goto L402972;
  #L402968.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40296c.  call `subscribe`(v5, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L402972.  return @kind void;
  #L402974.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L402976.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40297c.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L402982.  v5:= temp @kind object;
  #L402984.  goto L402988;
  #L402986.  throw v5;
  #L402988.  goto L402986;
  catch `java.lang.Throwable` @[L40295e..L402964] goto L402974;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.internal.operators.flowable.FlowablePublish` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4028b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4028b4.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowablePublish` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4029a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish.onSubscribe` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4029ac.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4029b2.  return @kind void;
}
