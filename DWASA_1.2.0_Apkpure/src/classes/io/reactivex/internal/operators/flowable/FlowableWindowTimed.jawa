record `io.reactivex.internal.operators.flowable.FlowableWindowTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.bufferSize` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.maxSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.restartTimerOnMaxSize` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.timeskip` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `long` v8 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40e9c4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40e9ca.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.timespan` @type ^`long` := v2 @kind wide;
  #L40e9ce.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.timeskip` @type ^`long` := v4 @kind wide;
  #L40e9d2.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.unit` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L40e9d6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.scheduler` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L40e9da.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.maxSize` @type ^`long` := v8 @kind wide;
  #L40e9de.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.bufferSize` @type ^`int` := v10;
  #L40e9e2.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.restartTimerOnMaxSize` @type ^`boolean` := v11 @kind boolean;
  #L40e9e6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed` v11 @kind this, `org.reactivestreams.Subscriber` v12 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L40e9f8.  v1:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L40e9fc.  call `<init>`(v1, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40ea02.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.timespan` @type ^`long` @kind wide;
  #L40ea06.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.timeskip` @type ^`long` @kind wide;
  #L40ea0a.  v12:= lcmp(v2, v4);
  #L40ea0e.  if v12 != 0 then goto L40ea80;
  #L40ea12.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.maxSize` @type ^`long` @kind wide;
  #L40ea16.  v4:= 9223372036854775807L;
  #L40ea20.  v12:= lcmp(v2, v4);
  #L40ea24.  if v12 != 0 then goto L40ea50;
  #L40ea28.  v12:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40ea2c.  v7:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactUnboundedSubscriber`;
  #L40ea30.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.timespan` @type ^`long` @kind wide;
  #L40ea34.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40ea38.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40ea3c.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.bufferSize` @type ^`int`;
  #L40ea40.  v0:= v7 @kind object;
  #L40ea42.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactUnboundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @kind direct;
  #L40ea48.  call `subscribe`(v12, v7) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40ea4e.  return @kind void;
  #L40ea50.  v12:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40ea54.  v10:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber`;
  #L40ea58.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.timespan` @type ^`long` @kind wide;
  #L40ea5c.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40ea60.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40ea64.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.bufferSize` @type ^`int`;
  #L40ea68.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.maxSize` @type ^`long` @kind wide;
  #L40ea6c.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L40ea70.  v0:= v10 @kind object;
  #L40ea72.  call `<init>`(v0, v1, v2, v4, v5, v6, v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @kind direct;
  #L40ea78.  call `subscribe`(v12, v10) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40ea7e.  return @kind void;
  #L40ea80.  v12:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40ea84.  v9:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber`;
  #L40ea88.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.timespan` @type ^`long` @kind wide;
  #L40ea8c.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.timeskip` @type ^`long` @kind wide;
  #L40ea90.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40ea94.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40ea98.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L40ea9e.  v7:= temp @kind object;
  #L40eaa0.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.bufferSize` @type ^`int`;
  #L40eaa4.  v0:= v9 @kind object;
  #L40eaa6.  call `<init>`(v0, v1, v2, v4, v6, v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @kind direct;
  #L40eaac.  call `subscribe`(v12, v9) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40eab2.  return @kind void;
}
