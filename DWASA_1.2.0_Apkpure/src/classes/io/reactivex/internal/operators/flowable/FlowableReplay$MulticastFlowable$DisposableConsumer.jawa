record `io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer` @kind class @AccessFlag FINAL extends `io.reactivex.functions.Consumer` @kind interface {
  `io.reactivex.internal.subscribers.SubscriberResourceWrapper` `io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer.srw` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable` `io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable` v1 @kind object, `io.reactivex.internal.subscribers.SubscriberResourceWrapper` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$MulticastFlowable$DisposableConsumer;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$MulticastFlowable;Lio/reactivex/internal/subscribers/SubscriberResourceWrapper;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L404970.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable` := v1 @kind object;
  #L404974.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40497a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer.srw` @type ^`io.reactivex.internal.subscribers.SubscriberResourceWrapper` := v2 @kind object;
  #L40497e.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$MulticastFlowable$DisposableConsumer;.accept:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L404990.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer.srw` @type ^`io.reactivex.internal.subscribers.SubscriberResourceWrapper` @kind object;
  #L404994.  call `setResource`(v0, v2) @signature `Lio/reactivex/internal/subscribers/SubscriberResourceWrapper;.setResource:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40499a.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable$DisposableConsumer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$MulticastFlowable$DisposableConsumer;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4049ac.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L4049b0.  call `accept`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$MulticastFlowable$DisposableConsumer;.accept:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4049b6.  return @kind void;
}
