record `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast` @kind class @AccessFlag FINAL extends `io.reactivex.flowables.GroupedFlowable` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableGroupBy$State` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast` v0 @kind this, `java.lang.Object` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.<init>:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3fb968.  call `<init>`(v0, v1) @signature `Lio/reactivex/flowables/GroupedFlowable;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3fb96e.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast.state` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` := v2 @kind object;
  #L3fb972.  return @kind void;
}
procedure `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast` `createWith`(`java.lang.Object` v1 @kind object, `int` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.createWith:(Ljava/lang/Object;ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Z)Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fb940.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy$State`;
  #L3fb944.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.<init>:(ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @kind direct;
  #L3fb94a.  v2:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast`;
  #L3fb94e.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.<init>:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;)V` @kind direct;
  #L3fb954.  return v2 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb984.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast.state` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` @kind object;
  #L3fb988.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onComplete:()V` @kind virtual;
  #L3fb98e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb9a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast.state` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` @kind object;
  #L3fb9a4.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fb9aa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb9bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast.state` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` @kind object;
  #L3fb9c0.  call `onNext`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L3fb9c6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3fb9d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast.state` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` @kind object;
  #L3fb9dc.  call `subscribe`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3fb9e2.  return @kind void;
}
