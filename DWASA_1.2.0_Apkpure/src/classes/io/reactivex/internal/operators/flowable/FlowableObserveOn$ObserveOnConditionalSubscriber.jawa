record `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @AccessFlag ;
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ffe0c.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L3ffe12.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L3ffe16.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ffe28.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ffe2c.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3ffe32.  v0:= temp;
  #L3ffe34.  if v0 == 0 then goto L3ffec0;
  #L3ffe38.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L3ffe3c.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L3ffe40.  if v0 == 0 then goto L3ffe98;
  #L3ffe44.  v0:= v4 @kind object;
  #L3ffe46.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L3ffe4a.  v1:= 7I;
  #L3ffe4c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L3ffe52.  v1:= temp;
  #L3ffe54.  v2:= 1I;
  #L3ffe56.  if v1 != v2 then goto L3ffe72;
  #L3ffe5a.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.sourceMode` @type ^`int` := v2;
  #L3ffe5e.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3ffe62.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3ffe66.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3ffe6a.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3ffe70.  return @kind void;
  #L3ffe72.  v2:= 2I;
  #L3ffe74.  if v1 != v2 then goto L3ffe98;
  #L3ffe78.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.sourceMode` @type ^`int` := v2;
  #L3ffe7c.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3ffe80.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3ffe84.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3ffe8a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.prefetch` @type ^`int`;
  #L3ffe8e.  v0:= (`long`) v0 @kind i2l;
  #L3ffe90.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ffe96.  return @kind void;
  #L3ffe98.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3ffe9c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.prefetch` @type ^`int`;
  #L3ffea0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3ffea6.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3ffeaa.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3ffeae.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3ffeb4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.prefetch` @type ^`int`;
  #L3ffeb8.  v0:= (`long`) v0 @kind i2l;
  #L3ffeba.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ffec0.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ffdb0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3ffdb4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3ffdba.  v0:= temp @kind object;
  #L3ffdbc.  if v0 == 0 then goto L3ffdfa;
  #L3ffdc0.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.sourceMode` @type ^`int`;
  #L3ffdc4.  v2:= 1I;
  #L3ffdc6.  if v1 == v2 then goto L3ffdfa;
  #L3ffdca.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` @kind wide;
  #L3ffdce.  v3:= 1L;
  #L3ffdd2.  v1:= v1 + v3 @kind long;
  #L3ffdd4.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.limit` @type ^`int`;
  #L3ffdd8.  v3:= (`long`) v3 @kind i2l;
  #L3ffdda.  v5:= lcmp(v1, v3);
  #L3ffdde.  if v5 != 0 then goto L3ffdf6;
  #L3ffde2.  v3:= 0L;
  #L3ffde6.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` := v3 @kind wide;
  #L3ffdea.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ffdee.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ffdf4.  goto L3ffdfa;
  #L3ffdf6.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` := v1 @kind wide;
  #L3ffdfa.  return v0 @kind object;
}
procedure `void` `runAsync`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.runAsync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3ffed4.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3ffed8.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3ffedc.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.produced` @type ^`long` @kind wide;
  #L3ffee0.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` @kind wide;
  #L3ffee4.  v6:= 1I;
  #L3ffee6.  v7:= 1I;
  #L3ffee8.  v8:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ffeec.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3ffef2.  v8:= temp @kind wide;
  #L3ffef4.  v10:= lcmp(v2, v8);
  #L3ffef8.  if v10 == 0 then goto L3fff86;
  #L3ffefc.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fff00.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3fff06.  v11:= temp @kind object;
  #L3fff08.  if v11 != 0 then goto L3fff10;
  #L3fff0c.  v12:= 1I;
  #L3fff0e.  goto L3fff12;
  #L3fff10.  v12:= 0I;
  #L3fff12.  call temp:= `checkTerminated`(v13, v10, v12, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L3fff18.  v10:= temp;
  #L3fff1a.  if v10 == 0 then goto L3fff20;
  #L3fff1e.  return @kind void;
  #L3fff20.  if v12 == 0 then goto L3fff26;
  #L3fff24.  goto L3fff86;
  #L3fff26.  call temp:= `tryOnNext`(v0, v11) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3fff2c.  v10:= temp;
  #L3fff2e.  v11:= 1L;
  #L3fff32.  if v10 == 0 then goto L3fff38;
  #L3fff36.  v2:= v2 + v11 @kind long;
  #L3fff38.  v4:= v4 + v11 @kind long;
  #L3fff3a.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.limit` @type ^`int`;
  #L3fff3e.  v10:= (`long`) v10 @kind i2l;
  #L3fff40.  v12:= lcmp(v4, v10);
  #L3fff44.  if v12 != 0 then goto L3ffef4;
  #L3fff48.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fff4c.  call `request`(v10, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3fff52.  v4:= 0L;
  #L3fff56.  goto L3ffef4;
  #L3fff58.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fff5a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fff60.  v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.cancelled` @type ^`boolean` := v6 @kind boolean;
  #L3fff64.  v3:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fff68.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fff6e.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3fff74.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fff7a.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3fff7e.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3fff84.  return @kind void;
  #L3fff86.  v10:= lcmp(v2, v8);
  #L3fff8a.  if v10 != 0 then goto L3fffa8;
  #L3fff8e.  v8:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fff92.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L3fff98.  v9:= temp;
  #L3fff9a.  call temp:= `checkTerminated`(v13, v8, v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L3fffa0.  v8:= temp;
  #L3fffa2.  if v8 == 0 then goto L3fffa8;
  #L3fffa6.  return @kind void;
  #L3fffa8.  call temp:= `get`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.get:()I` @kind virtual;
  #L3fffae.  v8:= temp;
  #L3fffb0.  if v7 != v8 then goto L3fffcc;
  #L3fffb4.  v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L3fffb8.  v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` := v4 @kind wide;
  #L3fffbc.  v7:= -v7 @kind int;
  #L3fffbe.  call temp:= `addAndGet`(v13, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.addAndGet:(I)I` @kind virtual;
  #L3fffc4.  v7:= temp;
  #L3fffc6.  if v7 != 0 then goto L3ffee8;
  #L3fffca.  return @kind void;
  #L3fffcc.  v7:= v8;
  #L3fffce.  goto L3ffee8;
  catch `java.lang.Throwable` @[L3fff00..L3fff08] goto L3fff58;
}
procedure `void` `runBackfused`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.runBackfused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fffec.  v0:= 1I;
  #L3fffee.  v1:= 1I;
  #L3ffff0.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3ffff4.  if v2 == 0 then goto L3ffffa;
  #L3ffff8.  return @kind void;
  #L3ffffa.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3ffffe.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L400002.  v4:= 0I;
  #L400004.  call `onNext`(v3, v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40000a.  if v2 == 0 then goto L40003c;
  #L40000e.  v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L400012.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L400016.  if v0 == 0 then goto L400026;
  #L40001a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L40001e.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L400024.  goto L400030;
  #L400026.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L40002a.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L400030.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L400034.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40003a.  return @kind void;
  #L40003c.  v1:= -v1 @kind int;
  #L40003e.  call temp:= `addAndGet`(v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.addAndGet:(I)I` @kind virtual;
  #L400044.  v1:= temp;
  #L400046.  if v1 != 0 then goto L3ffff0;
  #L40004a.  return @kind void;
}
procedure `void` `runSync`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.runSync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L40005c.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L400060.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L400064.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.produced` @type ^`long` @kind wide;
  #L400068.  v4:= 1I;
  #L40006a.  v5:= 1I;
  #L40006c.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L400070.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L400076.  v6:= temp @kind wide;
  #L400078.  v8:= lcmp(v2, v6);
  #L40007c.  if v8 == 0 then goto L4000e8;
  #L400080.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L400086.  v8:= temp @kind object;
  #L400088.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40008c.  if v9 == 0 then goto L400092;
  #L400090.  return @kind void;
  #L400092.  if v8 != 0 then goto L4000ac;
  #L400096.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L40009a.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L4000a0.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4000a4.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4000aa.  return @kind void;
  #L4000ac.  call temp:= `tryOnNext`(v0, v8) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4000b2.  v8:= temp;
  #L4000b4.  if v8 == 0 then goto L400078;
  #L4000b8.  v8:= 1L;
  #L4000bc.  v2:= v2 + v8 @kind long;
  #L4000be.  goto L400078;
  #L4000c0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4000c2.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4000c8.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L4000cc.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4000d0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4000d6.  call `onError`(v0, v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4000dc.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4000e0.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4000e6.  return @kind void;
  #L4000e8.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4000ec.  if v6 == 0 then goto L4000f2;
  #L4000f0.  return @kind void;
  #L4000f2.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4000f8.  v6:= temp;
  #L4000fa.  if v6 == 0 then goto L400114;
  #L4000fe.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L400102.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L400108.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40010c.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L400112.  return @kind void;
  #L400114.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.get:()I` @kind virtual;
  #L40011a.  v6:= temp;
  #L40011c.  if v5 != v6 then goto L400134;
  #L400120.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L400124.  v5:= -v5 @kind int;
  #L400126.  call temp:= `addAndGet`(v10, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.addAndGet:(I)I` @kind virtual;
  #L40012c.  v5:= temp;
  #L40012e.  if v5 != 0 then goto L40006c;
  #L400132.  return @kind void;
  #L400134.  v5:= v6;
  #L400136.  goto L40006c;
  catch `java.lang.Throwable` @[L400080..L400088] goto L4000c0;
}
