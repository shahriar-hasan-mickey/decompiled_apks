record `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.lastId` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.lastIndex` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.maxConcurrency` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.queue` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarEmitted` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarLimit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.uniqueId` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.CANCELLED` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.EMPTY` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f7868.  v0:= 0I;
  #L3f786a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[v0];
  #L3f786e.  `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] := v1 @kind object;
  #L3f7872.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[v0];
  #L3f7876.  `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.CANCELLED` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] := v0 @kind object;
  #L3f787a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f788c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f7892.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3f7896.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3f789c.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L3f78a0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f78a4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f78aa.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3f78ae.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3f78b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f78b8.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L3f78bc.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L3f78c0.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L3f78c4.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.delayErrors` @type ^`boolean` := v4 @kind boolean;
  #L3f78c8.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.maxConcurrency` @type ^`int` := v5;
  #L3f78cc.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.bufferSize` @type ^`int` := v6;
  #L3f78d0.  v2:= 1I;
  #L3f78d2.  v3:= v5 ^> 1;
  #L3f78d6.  call temp:= `max`(v2, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3f78dc.  v2:= temp;
  #L3f78de.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarLimit` @type ^`int` := v2;
  #L3f78e2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f78e6.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] @kind object;
  #L3f78ea.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3f78f0.  return @kind void;
}
procedure `boolean` `addInner`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.addInner:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7734.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f7738.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f773e.  v0:= temp @kind object;
  #L3f7740.  v0:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[]) v0 @kind object;
  #L3f7744.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.CANCELLED` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] @kind object;
  #L3f7748.  v2:= 0I;
  #L3f774a.  if v0 != v1 then goto L3f7756;
  #L3f774e.  call `dispose`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.dispose:()V` @kind virtual;
  #L3f7754.  return v2;
  #L3f7756.  v1:= length @variable v0;
  #L3f7758.  v3:= v1 + 1;
  #L3f775c.  v3:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[v3];
  #L3f7760.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f7766.  v3[v1]:= v5 @kind object;
  #L3f776a.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f776e.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f7774.  v0:= temp;
  #L3f7776.  if v0 == 0 then goto L3f7734;
  #L3f777a.  v5:= 1I;
  #L3f777c.  return v5;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7904.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f7908.  if v0 != 0 then goto L3f793c;
  #L3f790c.  v0:= 1I;
  #L3f790e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f7912.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f7916.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f791c.  call `disposeAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.disposeAll:()V` @kind virtual;
  #L3f7922.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f7928.  v0:= temp;
  #L3f792a.  if v0 != 0 then goto L3f793c;
  #L3f792e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f7932.  if v0 == 0 then goto L3f793c;
  #L3f7936.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3f793c.  return @kind void;
}
procedure `boolean` `checkTerminate`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.checkTerminate:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f7790.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f7794.  v1:= 1I;
  #L3f7796.  if v0 == 0 then goto L3f77a2;
  #L3f779a.  call `clearScalarQueue`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.clearScalarQueue:()V` @kind virtual;
  #L3f77a0.  return v1;
  #L3f77a2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f77a6.  if v0 != 0 then goto L3f77e0;
  #L3f77aa.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f77ae.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f77b4.  v0:= temp @kind object;
  #L3f77b6.  if v0 == 0 then goto L3f77e0;
  #L3f77ba.  call `clearScalarQueue`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.clearScalarQueue:()V` @kind virtual;
  #L3f77c0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f77c4.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f77ca.  v0:= temp @kind object;
  #L3f77cc.  v2:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L3f77d0.  if v0 == v2 then goto L3f77de;
  #L3f77d4.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f77d8.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f77de.  return v1;
  #L3f77e0.  v0:= 0I;
  #L3f77e2.  return v0;
}
procedure `void` `clearScalarQueue`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.clearScalarQueue:()V` @AccessFlag  {
    temp;
    v0;

  #L3f7950.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f7954.  if v0 == 0 then goto L3f795e;
  #L3f7958.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3f795e.  return @kind void;
}
procedure `void` `disposeAll`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.disposeAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7970.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f7974.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f797a.  v0:= temp @kind object;
  #L3f797c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[]) v0 @kind object;
  #L3f7980.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.CANCELLED` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] @kind object;
  #L3f7984.  if v0 == v1 then goto L3f79d6;
  #L3f7988.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f798c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f7992.  v0:= temp @kind object;
  #L3f7994.  v0:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[]) v0 @kind object;
  #L3f7998.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.CANCELLED` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] @kind object;
  #L3f799c.  if v0 == v1 then goto L3f79d6;
  #L3f79a0.  v1:= length @variable v0;
  #L3f79a2.  v2:= 0I;
  #L3f79a4.  if v2 >= v1 then goto L3f79b8;
  #L3f79a8.  v3:= v0[v2] @kind object;
  #L3f79ac.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.dispose:()V` @kind virtual;
  #L3f79b2.  v2:= v2 + 1;
  #L3f79b6.  goto L3f79a4;
  #L3f79b8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f79bc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f79c2.  v0:= temp @kind object;
  #L3f79c4.  if v0 == 0 then goto L3f79d6;
  #L3f79c8.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L3f79cc.  if v0 == v1 then goto L3f79d6;
  #L3f79d0.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f79d6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3f79e8.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f79ee.  v0:= temp;
  #L3f79f0.  if v0 != 0 then goto L3f79fa;
  #L3f79f4.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drainLoop:()V` @kind virtual;
  #L3f79fa.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v24 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L3f7a0c.  v1:= v24 @kind object;
  #L3f7a10.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f7a14.  v4:= 1I;
  #L3f7a16.  call temp:= `checkTerminate`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.checkTerminate:()Z` @kind virtual;
  #L3f7a1c.  v0:= temp;
  #L3f7a1e.  if v0 == 0 then goto L3f7a24;
  #L3f7a22.  return @kind void;
  #L3f7a24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f7a28.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f7a2c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f7a32.  v5:= temp @kind wide;
  #L3f7a34.  v7:= 9223372036854775807L;
  #L3f7a3e.  v10:= lcmp(v5, v7);
  #L3f7a42.  if v10 != 0 then goto L3f7a4a;
  #L3f7a46.  v10:= 1I;
  #L3f7a48.  goto L3f7a4c;
  #L3f7a4a.  v10:= 0I;
  #L3f7a4c.  v12:= 1L;
  #L3f7a50.  v14:= 0L;
  #L3f7a54.  v16:= v14 @kind wide;
  #L3f7a58.  if v0 == 0 then goto L3f7ade;
  #L3f7a5c.  v7:= v14 @kind wide;
  #L3f7a5e.  v18:= 0I;
  #L3f7a62.  v19:= lcmp(v5, v14);
  #L3f7a66.  if v19 == 0 then goto L3f7a9e;
  #L3f7a6a.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f7a70.  v9:= temp @kind object;
  #L3f7a72.  call temp:= `checkTerminate`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.checkTerminate:()Z` @kind virtual;
  #L3f7a78.  v18:= temp;
  #L3f7a7a.  if v18 == 0 then goto L3f7a80;
  #L3f7a7e.  return @kind void;
  #L3f7a80.  if v9 != 0 then goto L3f7a8a;
  #L3f7a84.  v18:= v9 @kind object;
  #L3f7a88.  goto L3f7a9e;
  #L3f7a8a.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f7a90.  v16:= v16 + v12 @kind long;
  #L3f7a94.  v7:= v7 + v12 @kind long;
  #L3f7a96.  v5:= v5 - v12 @kind long;
  #L3f7a98.  v18:= v9 @kind object;
  #L3f7a9c.  goto L3f7a62;
  #L3f7a9e.  v9:= lcmp(v7, v14);
  #L3f7aa2.  if v9 == 0 then goto L3f7ac4;
  #L3f7aa6.  if v10 == 0 then goto L3f7ab6;
  #L3f7aaa.  v5:= 9223372036854775807L;
  #L3f7ab4.  goto L3f7ac4;
  #L3f7ab6.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f7aba.  v6:= -v7 @kind long;
  #L3f7abc.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L3f7ac2.  v5:= temp @kind wide;
  #L3f7ac4.  v7:= lcmp(v5, v14);
  #L3f7ac8.  if v7 == 0 then goto L3f7ade;
  #L3f7acc.  if v18 != 0 then goto L3f7ad2;
  #L3f7ad0.  goto L3f7ade;
  #L3f7ad2.  v7:= 9223372036854775807L;
  #L3f7adc.  goto L3f7a5c;
  #L3f7ade.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f7ae2.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f7ae6.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f7aea.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f7af0.  v8:= temp @kind object;
  #L3f7af2.  v8:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[]) v8 @kind object;
  #L3f7af6.  v9:= length @variable v8;
  #L3f7af8.  if v0 == 0 then goto L3f7b38;
  #L3f7afc.  if v7 == 0 then goto L3f7b0c;
  #L3f7b00.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L3f7b06.  v0:= temp;
  #L3f7b08.  if v0 == 0 then goto L3f7b38;
  #L3f7b0c.  if v9 != 0 then goto L3f7b38;
  #L3f7b10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f7b14.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f7b1a.  v0:= temp @kind object;
  #L3f7b1c.  v3:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L3f7b20.  if v0 == v3 then goto L3f7b36;
  #L3f7b24.  if v0 != 0 then goto L3f7b30;
  #L3f7b28.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f7b2e.  goto L3f7b36;
  #L3f7b30.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f7b36.  return @kind void;
  #L3f7b38.  v18:= v4;
  #L3f7b3c.  if v9 == 0 then goto L3f7d54;
  #L3f7b40.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.lastId` @type ^`long` @kind wide;
  #L3f7b44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.lastIndex` @type ^`int`;
  #L3f7b48.  if v9 <= v0 then goto L3f7b5c;
  #L3f7b4c.  v7:= v8[v0] @kind object;
  #L3f7b50.  v11:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @type ^`long` @kind wide;
  #L3f7b54.  v7:= lcmp(v11, v3);
  #L3f7b58.  if v7 == 0 then goto L3f7b9e;
  #L3f7b5c.  if v9 > v0 then goto L3f7b62;
  #L3f7b60.  v0:= 0I;
  #L3f7b62.  v7:= v0;
  #L3f7b64.  v0:= 0I;
  #L3f7b66.  if v0 >= v9 then goto L3f7b8c;
  #L3f7b6a.  v11:= v8[v7] @kind object;
  #L3f7b6e.  v11:= v11.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @type ^`long` @kind wide;
  #L3f7b72.  v13:= lcmp(v11, v3);
  #L3f7b76.  if v13 != 0 then goto L3f7b7c;
  #L3f7b7a.  goto L3f7b8c;
  #L3f7b7c.  v7:= v7 + 1;
  #L3f7b80.  if v7 != v9 then goto L3f7b86;
  #L3f7b84.  v7:= 0I;
  #L3f7b86.  v0:= v0 + 1;
  #L3f7b8a.  goto L3f7b66;
  #L3f7b8c.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.lastIndex` @type ^`int` := v7;
  #L3f7b90.  v0:= v8[v7] @kind object;
  #L3f7b94.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @type ^`long` @kind wide;
  #L3f7b98.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.lastId` @type ^`long` := v3 @kind wide;
  #L3f7b9c.  v0:= v7;
  #L3f7b9e.  v4:= v0;
  #L3f7ba0.  v0:= 0I;
  #L3f7ba2.  v3:= 0I;
  #L3f7ba4.  if v3 >= v9 then goto L3f7d36;
  #L3f7ba8.  call temp:= `checkTerminate`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.checkTerminate:()Z` @kind virtual;
  #L3f7bae.  v7:= temp;
  #L3f7bb0.  if v7 == 0 then goto L3f7bb6;
  #L3f7bb4.  return @kind void;
  #L3f7bb6.  v7:= v8[v4] @kind object;
  #L3f7bba.  v11:= 0I;
  #L3f7bbc.  call temp:= `checkTerminate`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.checkTerminate:()Z` @kind virtual;
  #L3f7bc2.  v12:= temp;
  #L3f7bc4.  if v12 == 0 then goto L3f7bca;
  #L3f7bc8.  return @kind void;
  #L3f7bca.  v12:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f7bce.  if v12 != 0 then goto L3f7bda;
  #L3f7bd2.  v11:= v8 @kind object;
  #L3f7bd4.  v13:= v9;
  #L3f7bd6.  goto L3f7cca;
  #L3f7bda.  v13:= v9;
  #L3f7bdc.  v22:= v11 @kind object;
  #L3f7be0.  v11:= v8 @kind object;
  #L3f7be2.  v8:= v14 @kind wide;
  #L3f7be4.  v23:= lcmp(v5, v14);
  #L3f7be8.  if v23 == 0 then goto L3f7c78;
  #L3f7bec.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f7bf2.  v14:= temp @kind object;
  #L3f7bf4.  if v14 != 0 then goto L3f7c02;
  #L3f7bf8.  v22:= v14 @kind object;
  #L3f7bfc.  v14:= 0L;
  #L3f7c00.  goto L3f7c78;
  #L3f7c02.  call `onNext`(v2, v14) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f7c08.  call temp:= `checkTerminate`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.checkTerminate:()Z` @kind virtual;
  #L3f7c0e.  v15:= temp;
  #L3f7c10.  if v15 == 0 then goto L3f7c16;
  #L3f7c14.  return @kind void;
  #L3f7c16.  v20:= 1L;
  #L3f7c1a.  v5:= v5 - v20 @kind long;
  #L3f7c1e.  v8:= v8 + v20 @kind long;
  #L3f7c22.  v22:= v14 @kind object;
  #L3f7c26.  v14:= 0L;
  #L3f7c2a.  goto L3f7be4;
  #L3f7c2c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f7c2e.  v8:= v0 @kind object;
  #L3f7c30.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f7c36.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.dispose:()V` @kind virtual;
  #L3f7c3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f7c40.  call temp:= `addThrowable`(v0, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f7c46.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f7c4a.  if v0 != 0 then goto L3f7c58;
  #L3f7c4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f7c52.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f7c58.  call temp:= `checkTerminate`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.checkTerminate:()Z` @kind virtual;
  #L3f7c5e.  v0:= temp;
  #L3f7c60.  if v0 == 0 then goto L3f7c66;
  #L3f7c64.  return @kind void;
  #L3f7c66.  call `removeInner`(v1, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.removeInner:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)V` @kind virtual;
  #L3f7c6c.  v3:= v3 + 1;
  #L3f7c70.  v0:= 1I;
  #L3f7c72.  v7:= 1L;
  #L3f7c76.  goto L3f7d26;
  #L3f7c78.  v12:= lcmp(v8, v14);
  #L3f7c7c.  if v12 == 0 then goto L3f7caa;
  #L3f7c80.  if v10 != 0 then goto L3f7c94;
  #L3f7c84.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f7c88.  v14:= -v8 @kind long;
  #L3f7c8a.  call temp:= `addAndGet`(v5, v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L3f7c90.  v5:= temp @kind wide;
  #L3f7c92.  goto L3f7c9e;
  #L3f7c94.  v5:= 9223372036854775807L;
  #L3f7c9e.  call `requestMore`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.requestMore:(J)V` @kind virtual;
  #L3f7ca4.  v8:= 0L;
  #L3f7ca8.  goto L3f7cac;
  #L3f7caa.  v8:= v14 @kind wide;
  #L3f7cac.  v12:= lcmp(v5, v8);
  #L3f7cb0.  if v12 == 0 then goto L3f7cca;
  #L3f7cb4.  if v22 != 0 then goto L3f7cba;
  #L3f7cb8.  goto L3f7cca;
  #L3f7cba.  v8:= v11 @kind object;
  #L3f7cbc.  v9:= v13;
  #L3f7cbe.  v11:= v22 @kind object;
  #L3f7cc2.  v14:= 0L;
  #L3f7cc6.  goto L3f7bbc;
  #L3f7cca.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f7cce.  v9:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f7cd2.  if v8 == 0 then goto L3f7d06;
  #L3f7cd6.  if v9 == 0 then goto L3f7ce6;
  #L3f7cda.  call temp:= `isEmpty`(v9) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L3f7ce0.  v8:= temp;
  #L3f7ce2.  if v8 == 0 then goto L3f7d06;
  #L3f7ce6.  call `removeInner`(v1, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.removeInner:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)V` @kind virtual;
  #L3f7cec.  call temp:= `checkTerminate`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.checkTerminate:()Z` @kind virtual;
  #L3f7cf2.  v0:= temp;
  #L3f7cf4.  if v0 == 0 then goto L3f7cfa;
  #L3f7cf8.  return @kind void;
  #L3f7cfa.  v7:= 1L;
  #L3f7cfe.  v16:= v16 + v7 @kind long;
  #L3f7d02.  v0:= 1I;
  #L3f7d04.  goto L3f7d0a;
  #L3f7d06.  v7:= 1L;
  #L3f7d0a.  v14:= 0L;
  #L3f7d0e.  v9:= lcmp(v5, v14);
  #L3f7d12.  if v9 != 0 then goto L3f7d18;
  #L3f7d16.  goto L3f7d38;
  #L3f7d18.  v9:= v4 + 1;
  #L3f7d1c.  if v9 != v13 then goto L3f7d24;
  #L3f7d20.  v4:= 0I;
  #L3f7d22.  goto L3f7d26;
  #L3f7d24.  v4:= v9;
  #L3f7d26.  v9:= 1I;
  #L3f7d28.  v3:= v3 + v9 @kind int;
  #L3f7d2a.  v8:= v11 @kind object;
  #L3f7d2c.  v9:= v13;
  #L3f7d2e.  v14:= 0L;
  #L3f7d32.  goto L3f7ba4;
  #L3f7d36.  v11:= v8 @kind object;
  #L3f7d38.  v9:= 1I;
  #L3f7d3a.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.lastIndex` @type ^`int` := v4;
  #L3f7d3e.  v3:= v11[v4] @kind object;
  #L3f7d42.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @type ^`long` @kind wide;
  #L3f7d46.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.lastId` @type ^`long` := v3 @kind wide;
  #L3f7d4a.  v3:= v16 @kind wide;
  #L3f7d4e.  v5:= 0L;
  #L3f7d52.  goto L3f7d5e;
  #L3f7d54.  v9:= 1I;
  #L3f7d56.  v5:= v14 @kind wide;
  #L3f7d58.  v3:= v16 @kind wide;
  #L3f7d5c.  v0:= 0I;
  #L3f7d5e.  v7:= lcmp(v3, v5);
  #L3f7d62.  if v7 == 0 then goto L3f7d78;
  #L3f7d66.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f7d6a.  if v5 != 0 then goto L3f7d78;
  #L3f7d6e.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f7d72.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f7d78.  if v0 == 0 then goto L3f7d84;
  #L3f7d7c.  v4:= v18;
  #L3f7d80.  goto L3f7a16;
  #L3f7d84.  v3:= v18;
  #L3f7d88.  v0:= -v3 @kind int;
  #L3f7d8a.  call temp:= `addAndGet`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.addAndGet:(I)I` @kind virtual;
  #L3f7d90.  v4:= temp;
  #L3f7d92.  if v4 != 0 then goto L3f7a16;
  #L3f7d96.  return @kind void;
  catch `java.lang.Throwable` @[L3f7bec..L3f7bf4] goto L3f7c2c;
}
procedure `io.reactivex.internal.fuseable.SimpleQueue` `getInnerQueue`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getInnerQueue:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)Lio/reactivex/internal/fuseable/SimpleQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f77f4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f77f8.  if v0 != 0 then goto L3f780e;
  #L3f77fc.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3f7800.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.bufferSize` @type ^`int`;
  #L3f7804.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3f780a.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3f780e.  return v0 @kind object;
}
procedure `io.reactivex.internal.fuseable.SimpleQueue` `getMainQueue`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getMainQueue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f7820.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f7824.  if v0 != 0 then goto L3f7856;
  #L3f7828.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.maxConcurrency` @type ^`int`;
  #L3f782c.  v1:= 2147483647I;
  #L3f7832.  if v0 != v1 then goto L3f7846;
  #L3f7836.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3f783a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.bufferSize` @type ^`int`;
  #L3f783e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3f7844.  goto L3f7852;
  #L3f7846.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3f784a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3f7850.  v0:= v1 @kind object;
  #L3f7852.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L3f7856.  return v0 @kind object;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f7db4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f7db8.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f7dbe.  v0:= temp;
  #L3f7dc0.  if v0 == 0 then goto L3f7e10;
  #L3f7dc4.  v4:= 1I;
  #L3f7dc6.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @type ^`boolean` := v4 @kind boolean;
  #L3f7dca.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f7dce.  if v3 != 0 then goto L3f7e08;
  #L3f7dd2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f7dd6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f7ddc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f7de0.  v4:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.CANCELLED` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] @kind object;
  #L3f7de4.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f7dea.  v3:= temp @kind object;
  #L3f7dec.  v3:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[]) v3 @kind object;
  #L3f7df0.  v4:= length @variable v3;
  #L3f7df2.  v0:= 0I;
  #L3f7df4.  if v0 >= v4 then goto L3f7e08;
  #L3f7df8.  v1:= v3[v0] @kind object;
  #L3f7dfc.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.dispose:()V` @kind virtual;
  #L3f7e02.  v0:= v0 + 1;
  #L3f7e06.  goto L3f7df4;
  #L3f7e08.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L3f7e0e.  goto L3f7e16;
  #L3f7e10.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f7e16.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7e28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f7e2c.  if v0 == 0 then goto L3f7e32;
  #L3f7e30.  return @kind void;
  #L3f7e32.  v0:= 1I;
  #L3f7e34.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f7e38.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L3f7e3e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7e50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f7e54.  if v0 == 0 then goto L3f7e60;
  #L3f7e58.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f7e5e.  return @kind void;
  #L3f7e60.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f7e64.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f7e6a.  v0:= temp;
  #L3f7e6c.  if v0 == 0 then goto L3f7e7e;
  #L3f7e70.  v2:= 1I;
  #L3f7e72.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3f7e76.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L3f7e7c.  goto L3f7e84;
  #L3f7e7e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f7e84.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f7e98.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f7e9c.  if v0 == 0 then goto L3f7ea2;
  #L3f7ea0.  return @kind void;
  #L3f7ea2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f7ea6.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f7eac.  v6:= temp @kind object;
  #L3f7eae.  v0:= "The mapper returned a null Publisher" @kind object;
  #L3f7eb2.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7eb8.  v6:= temp @kind object;
  #L3f7eba.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L3f7ebe.  v0:= instanceof @variable v6 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L3f7ec2.  if v0 == 0 then goto L3f7f36;
  #L3f7ec6.  v6:= (`java.util.concurrent.Callable`) v6 @kind object;
  #L3f7eca.  call temp:= `call`(v6) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f7ed0.  v6:= temp @kind object;
  #L3f7ed2.  if v6 == 0 then goto L3f7ede;
  #L3f7ed6.  call `tryEmitScalar`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.tryEmitScalar:(Ljava/lang/Object;)V` @kind virtual;
  #L3f7edc.  goto L3f7f60;
  #L3f7ede.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.maxConcurrency` @type ^`int`;
  #L3f7ee2.  v0:= 2147483647I;
  #L3f7ee8.  if v6 == v0 then goto L3f7f60;
  #L3f7eec.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f7ef0.  if v6 != 0 then goto L3f7f60;
  #L3f7ef4.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarEmitted` @type ^`int`;
  #L3f7ef8.  v6:= v6 + 1;
  #L3f7efc.  v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarEmitted` @type ^`int` := v6;
  #L3f7f00.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarLimit` @type ^`int`;
  #L3f7f04.  if v6 != v0 then goto L3f7f60;
  #L3f7f08.  v6:= 0I;
  #L3f7f0a.  v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarEmitted` @type ^`int` := v6;
  #L3f7f0e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f7f12.  v0:= (`long`) v0 @kind i2l;
  #L3f7f14.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f7f1a.  goto L3f7f60;
  #L3f7f1c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f7f1e.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f7f24.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.errs` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f7f28.  call temp:= `addThrowable`(v0, v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f7f2e.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L3f7f34.  return @kind void;
  #L3f7f36.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`;
  #L3f7f3a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.uniqueId` @type ^`long` @kind wide;
  #L3f7f3e.  v3:= 1L;
  #L3f7f42.  v3:= v3 + v1 @kind long;
  #L3f7f44.  v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.uniqueId` @type ^`long` := v3 @kind wide;
  #L3f7f48.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;J)V` @kind direct;
  #L3f7f4e.  call temp:= `addInner`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.addInner:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)Z` @kind virtual;
  #L3f7f54.  v1:= temp;
  #L3f7f56.  if v1 == 0 then goto L3f7f60;
  #L3f7f5a.  call `subscribe`(v6, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3f7f60.  return @kind void;
  #L3f7f62.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f7f64.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f7f6a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f7f6e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f7f74.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f7f7a.  return @kind void;
  catch `java.lang.Throwable` @[L3f7ea2..L3f7ebe] goto L3f7f62;
  catch `java.lang.Throwable` @[L3f7ec6..L3f7ed2] goto L3f7f1c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7fa4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f7fa8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f7fae.  v0:= temp;
  #L3f7fb0.  if v0 == 0 then goto L3f7ff2;
  #L3f7fb4.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f7fb8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f7fbc.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f7fc2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f7fc6.  if v0 != 0 then goto L3f7ff2;
  #L3f7fca.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.maxConcurrency` @type ^`int`;
  #L3f7fce.  v1:= 2147483647I;
  #L3f7fd4.  if v0 != v1 then goto L3f7fea;
  #L3f7fd8.  v0:= 9223372036854775807L;
  #L3f7fe2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f7fe8.  goto L3f7ff2;
  #L3f7fea.  v0:= (`long`) v0 @kind i2l;
  #L3f7fec.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f7ff2.  return @kind void;
}
procedure `void` `removeInner`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.removeInner:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f8004.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f8008.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f800e.  v0:= temp @kind object;
  #L3f8010.  v0:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[]) v0 @kind object;
  #L3f8014.  v1:= length @variable v0;
  #L3f8016.  if v1 != 0 then goto L3f801c;
  #L3f801a.  return @kind void;
  #L3f801c.  v2:= -1I;
  #L3f801e.  v3:= 0I;
  #L3f8020.  v4:= 0I;
  #L3f8022.  if v4 >= v1 then goto L3f8038;
  #L3f8026.  v5:= v0[v4] @kind object;
  #L3f802a.  if v5 != v7 then goto L3f8032;
  #L3f802e.  v2:= v4;
  #L3f8030.  goto L3f8038;
  #L3f8032.  v4:= v4 + 1;
  #L3f8036.  goto L3f8022;
  #L3f8038.  if v2 >= 0 then goto L3f803e;
  #L3f803c.  return @kind void;
  #L3f803e.  v4:= 1I;
  #L3f8040.  if v1 != v4 then goto L3f804a;
  #L3f8044.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[] @kind object;
  #L3f8048.  goto L3f8068;
  #L3f804a.  v5:= v1 + -1;
  #L3f804e.  v5:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber`[v5];
  #L3f8052.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8058.  v3:= v2 + 1;
  #L3f805c.  v1:= v1 - v2 @kind int;
  #L3f805e.  v1:= v1 - v4 @kind int;
  #L3f8060.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8066.  v1:= v5 @kind object;
  #L3f8068.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f806c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f8072.  v0:= temp;
  #L3f8074.  if v0 == 0 then goto L3f8004;
  #L3f8078.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f808c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f8092.  v0:= temp;
  #L3f8094.  if v0 == 0 then goto L3f80a8;
  #L3f8098.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f809c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f80a2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L3f80a8.  return @kind void;
}
procedure `void` `tryEmit`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.tryEmit:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f80bc.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.get:()I` @kind virtual;
  #L3f80c2.  v0:= temp;
  #L3f80c4.  v1:= "Inner queue full?!" @kind object;
  #L3f80c8.  if v0 != 0 then goto L3f8172;
  #L3f80cc.  v0:= 0I;
  #L3f80ce.  v2:= 1I;
  #L3f80d0.  call temp:= `compareAndSet`(v7, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.compareAndSet:(II)Z` @kind virtual;
  #L3f80d6.  v0:= temp;
  #L3f80d8.  if v0 == 0 then goto L3f8172;
  #L3f80dc.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f80e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f80e6.  v2:= temp @kind wide;
  #L3f80e8.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f80ec.  v4:= 0L;
  #L3f80f0.  v6:= lcmp(v2, v4);
  #L3f80f4.  if v6 == 0 then goto L3f813a;
  #L3f80f8.  if v0 == 0 then goto L3f8108;
  #L3f80fc.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L3f8102.  v4:= temp;
  #L3f8104.  if v4 == 0 then goto L3f813a;
  #L3f8108.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f810c.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f8112.  v0:= 9223372036854775807L;
  #L3f811c.  v8:= lcmp(v2, v0);
  #L3f8120.  if v8 == 0 then goto L3f812e;
  #L3f8124.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f8128.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L3f812e.  v0:= 1L;
  #L3f8132.  call `requestMore`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.requestMore:(J)V` @kind virtual;
  #L3f8138.  goto L3f8164;
  #L3f813a.  if v0 != 0 then goto L3f8146;
  #L3f813e.  call temp:= `getInnerQueue`(v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getInnerQueue:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L3f8144.  v0:= temp @kind object;
  #L3f8146.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f814c.  v8:= temp;
  #L3f814e.  if v8 != 0 then goto L3f8164;
  #L3f8152.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3f8156.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f815c.  call `onError`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f8162.  return @kind void;
  #L3f8164.  call temp:= `decrementAndGet`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3f816a.  v8:= temp;
  #L3f816c.  if v8 != 0 then goto L3f81b8;
  #L3f8170.  return @kind void;
  #L3f8172.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f8176.  if v0 != 0 then goto L3f818c;
  #L3f817a.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3f817e.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.bufferSize` @type ^`int`;
  #L3f8182.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3f8188.  v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L3f818c.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f8192.  v8:= temp;
  #L3f8194.  if v8 != 0 then goto L3f81aa;
  #L3f8198.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3f819c.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f81a2.  call `onError`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f81a8.  return @kind void;
  #L3f81aa.  call temp:= `getAndIncrement`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f81b0.  v8:= temp;
  #L3f81b2.  if v8 == 0 then goto L3f81b8;
  #L3f81b6.  return @kind void;
  #L3f81b8.  call `drainLoop`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drainLoop:()V` @kind virtual;
  #L3f81be.  return @kind void;
}
procedure `void` `tryEmitScalar`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.tryEmitScalar:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f81d0.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.get:()I` @kind virtual;
  #L3f81d6.  v0:= temp;
  #L3f81d8.  v1:= "Scalar queue full?!" @kind object;
  #L3f81dc.  if v0 != 0 then goto L3f82b4;
  #L3f81e0.  v0:= 1I;
  #L3f81e2.  v2:= 0I;
  #L3f81e4.  call temp:= `compareAndSet`(v9, v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.compareAndSet:(II)Z` @kind virtual;
  #L3f81ea.  v3:= temp;
  #L3f81ec.  if v3 == 0 then goto L3f82b4;
  #L3f81f0.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f81f4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f81fa.  v3:= temp @kind wide;
  #L3f81fc.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f8200.  v6:= 0L;
  #L3f8204.  v8:= lcmp(v3, v6);
  #L3f8208.  if v8 == 0 then goto L3f827c;
  #L3f820c.  if v5 == 0 then goto L3f821c;
  #L3f8210.  call temp:= `isEmpty`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L3f8216.  v6:= temp;
  #L3f8218.  if v6 == 0 then goto L3f827c;
  #L3f821c.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f8220.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f8226.  v5:= 9223372036854775807L;
  #L3f8230.  v10:= lcmp(v3, v5);
  #L3f8234.  if v10 == 0 then goto L3f8242;
  #L3f8238.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f823c.  call temp:= `decrementAndGet`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L3f8242.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.maxConcurrency` @type ^`int`;
  #L3f8246.  v1:= 2147483647I;
  #L3f824c.  if v10 == v1 then goto L3f82a6;
  #L3f8250.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f8254.  if v10 != 0 then goto L3f82a6;
  #L3f8258.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarEmitted` @type ^`int`;
  #L3f825c.  v10:= v10 + v0 @kind int;
  #L3f825e.  v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarEmitted` @type ^`int` := v10;
  #L3f8262.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarLimit` @type ^`int`;
  #L3f8266.  if v10 != v0 then goto L3f82a6;
  #L3f826a.  v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.scalarEmitted` @type ^`int` := v2;
  #L3f826e.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8272.  v0:= (`long`) v0 @kind i2l;
  #L3f8274.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f827a.  goto L3f82a6;
  #L3f827c.  if v5 != 0 then goto L3f8288;
  #L3f8280.  call temp:= `getMainQueue`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getMainQueue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L3f8286.  v5:= temp @kind object;
  #L3f8288.  call temp:= `offer`(v5, v10) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f828e.  v10:= temp;
  #L3f8290.  if v10 != 0 then goto L3f82a6;
  #L3f8294.  v10:= new `java.lang.IllegalStateException`;
  #L3f8298.  call `<init>`(v10, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f829e.  call `onError`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f82a4.  return @kind void;
  #L3f82a6.  call temp:= `decrementAndGet`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3f82ac.  v10:= temp;
  #L3f82ae.  if v10 != 0 then goto L3f82e8;
  #L3f82b2.  return @kind void;
  #L3f82b4.  call temp:= `getMainQueue`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getMainQueue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L3f82ba.  v0:= temp @kind object;
  #L3f82bc.  call temp:= `offer`(v0, v10) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f82c2.  v10:= temp;
  #L3f82c4.  if v10 != 0 then goto L3f82da;
  #L3f82c8.  v10:= new `java.lang.IllegalStateException`;
  #L3f82cc.  call `<init>`(v10, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f82d2.  call `onError`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f82d8.  return @kind void;
  #L3f82da.  call temp:= `getAndIncrement`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f82e0.  v10:= temp;
  #L3f82e2.  if v10 == 0 then goto L3f82e8;
  #L3f82e6.  return @kind void;
  #L3f82e8.  call `drainLoop`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drainLoop:()V` @kind virtual;
  #L3f82ee.  return @kind void;
}
