record `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L409af0.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` := v1 @kind object;
  #L409af4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L409afa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L409b0c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L409b10.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L409b14.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L409b1a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L409b1e.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409b22.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L409b26.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L409b2a.  call `onComplete`(v0, v1, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L409b30.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L409b44.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L409b48.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L409b4c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L409b52.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L409b56.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409b5a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L409b5e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L409b62.  call `onError`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L409b68.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L409b7c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L409b82.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onComplete:()V` @kind virtual;
  #L409b88.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409b9c.  v0:= 9223372036854775807L;
  #L409ba6.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L409bac.  return @kind void;
}
