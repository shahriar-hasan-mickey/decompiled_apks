record `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.collector` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.u` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f13a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f13aa.  v0.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.collector` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L3f13ae.  v0.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.u` @type ^`java.lang.Object` := v2 @kind object;
  #L3f13b2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f13c4.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L3f13ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f13ce.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f13d4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f13e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f13ec.  if v0 == 0 then goto L3f13f2;
  #L3f13f0.  return @kind void;
  #L3f13f2.  v0:= 1I;
  #L3f13f4.  v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f13f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.u` @type ^`java.lang.Object` @kind object;
  #L3f13fc.  call `complete`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3f1402.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1414.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f1418.  if v0 == 0 then goto L3f1424;
  #L3f141c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f1422.  return @kind void;
  #L3f1424.  v0:= 1I;
  #L3f1426.  v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f142a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f142e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f1434.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1448.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f144c.  if v0 == 0 then goto L3f1452;
  #L3f1450.  return @kind void;
  #L3f1452.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.collector` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L3f1456.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.u` @type ^`java.lang.Object` @kind object;
  #L3f145a.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3f1460.  goto L3f147a;
  #L3f1462.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1464.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f146a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f146e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f1474.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f147a.  return @kind void;
  catch `java.lang.Throwable` @[L3f1452..L3f1460] goto L3f1462;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1498.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f149c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f14a2.  v0:= temp;
  #L3f14a4.  if v0 == 0 then goto L3f14c6;
  #L3f14a8.  v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f14ac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f14b0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f14b6.  v0:= 9223372036854775807L;
  #L3f14c0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f14c6.  return @kind void;
}
