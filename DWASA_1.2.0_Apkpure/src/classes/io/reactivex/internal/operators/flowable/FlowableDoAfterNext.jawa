record `io.reactivex.internal.operators.flowable.FlowableDoAfterNext` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoAfterNext.onAfterNext` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f5efc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f5f02.  v0.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext.onAfterNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L3f5f06.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3f5f18.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L3f5f1c.  if v0 == 0 then goto L3f5f3e;
  #L3f5f20.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f5f24.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber`;
  #L3f5f28.  v4:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v4 @kind object;
  #L3f5f2c.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext.onAfterNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f5f30.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3f5f36.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5f3c.  goto L3f5f56;
  #L3f5f3e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f5f42.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber`;
  #L3f5f46.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext.onAfterNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f5f4a.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3f5f50.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5f56.  return @kind void;
}
