record `io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`[] `io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.subscribers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3ede94.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ede9a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3ede9e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3edea4.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L3edea8.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L3edeac.  v2:= new `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`[v3];
  #L3edeb0.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`[] := v2 @kind object;
  #L3edeb4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3edec8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3edecc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3eded2.  v0:= temp;
  #L3eded4.  v1:= -1I;
  #L3eded6.  if v0 == v1 then goto L3edf00;
  #L3ededa.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3edede.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L3edee4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`[] @kind object;
  #L3edee8.  v1:= length @variable v0;
  #L3edeea.  v2:= 0I;
  #L3edeec.  if v2 >= v1 then goto L3edf00;
  #L3edef0.  v3:= v0[v2] @kind object;
  #L3edef4.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.cancel:()V` @kind virtual;
  #L3edefa.  v2:= v2 + 1;
  #L3edefe.  goto L3edeec;
  #L3edf00.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3edf14.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3edf1a.  v0:= temp;
  #L3edf1c.  if v0 == 0 then goto L3edf64;
  #L3edf20.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3edf24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3edf2a.  v0:= temp;
  #L3edf2c.  if v0 <= 0 then goto L3edf44;
  #L3edf30.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`[] @kind object;
  #L3edf34.  v0:= v0 + -1;
  #L3edf38.  v0:= v1[v0] @kind object;
  #L3edf3c.  call `request`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.request:(J)V` @kind virtual;
  #L3edf42.  goto L3edf64;
  #L3edf44.  if v0 != 0 then goto L3edf64;
  #L3edf48.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`[] @kind object;
  #L3edf4c.  v1:= length @variable v0;
  #L3edf4e.  v2:= 0I;
  #L3edf50.  if v2 >= v1 then goto L3edf64;
  #L3edf54.  v3:= v0[v2] @kind object;
  #L3edf58.  call `request`(v3, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.request:(J)V` @kind virtual;
  #L3edf5e.  v2:= v2 + 1;
  #L3edf62.  goto L3edf50;
  #L3edf64.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` v7 @kind this, `org.reactivestreams.Publisher`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.subscribe:([Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3edf78.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`[] @kind object;
  #L3edf7c.  v1:= length @variable v0;
  #L3edf7e.  v2:= 0I;
  #L3edf80.  v3:= 0I;
  #L3edf82.  if v3 >= v1 then goto L3edfa0;
  #L3edf86.  v4:= new `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`;
  #L3edf8a.  v5:= v3 + 1;
  #L3edf8e.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3edf92.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;ILorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3edf98.  v0[v3]:= v4 @kind object;
  #L3edf9c.  v3:= v5;
  #L3edf9e.  goto L3edf82;
  #L3edfa0.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3edfa4.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L3edfaa.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3edfae.  call `onSubscribe`(v3, v7) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3edfb4.  if v2 >= v1 then goto L3edfde;
  #L3edfb8.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3edfbc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3edfc2.  v3:= temp;
  #L3edfc4.  if v3 == 0 then goto L3edfca;
  #L3edfc8.  return @kind void;
  #L3edfca.  v3:= v8[v2] @kind object;
  #L3edfce.  v4:= v0[v2] @kind object;
  #L3edfd2.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3edfd8.  v2:= v2 + 1;
  #L3edfdc.  goto L3edfb4;
  #L3edfde.  return @kind void;
}
procedure `boolean` `win`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.win:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ede3c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3ede40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3ede46.  v0:= temp;
  #L3ede48.  v1:= 0I;
  #L3ede4a.  if v0 != 0 then goto L3ede82;
  #L3ede4e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.winner` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3ede52.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L3ede58.  v0:= temp;
  #L3ede5a.  if v0 == 0 then goto L3ede82;
  #L3ede5e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber`[] @kind object;
  #L3ede62.  v2:= length @variable v0;
  #L3ede64.  if v1 >= v2 then goto L3ede7e;
  #L3ede68.  v3:= v1 + 1;
  #L3ede6c.  if v3 == v5 then goto L3ede7a;
  #L3ede70.  v1:= v0[v1] @kind object;
  #L3ede74.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.cancel:()V` @kind virtual;
  #L3ede7a.  v1:= v3;
  #L3ede7c.  goto L3ede64;
  #L3ede7e.  v5:= 1I;
  #L3ede80.  return v5;
  #L3ede82.  return v1;
}
