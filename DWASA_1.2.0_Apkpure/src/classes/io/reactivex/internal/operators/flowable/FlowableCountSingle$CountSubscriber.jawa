record `io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.count` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$CountSubscriber;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f3958.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f395e.  v0.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L3f3962.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$CountSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3974.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f3978.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f397e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f3982.  v1.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f3986.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$CountSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3934.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f3938.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f393c.  if v0 != v1 then goto L3f3944;
  #L3f3940.  v0:= 1I;
  #L3f3942.  goto L3f3946;
  #L3f3944.  v0:= 0I;
  #L3f3946.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$CountSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3998.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f399c.  v3.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f39a0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f39a4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.count` @type ^`long` @kind wide;
  #L3f39a8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f39ae.  v1:= temp @kind object;
  #L3f39b0.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3f39b6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$CountSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f39c8.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f39cc.  v1.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f39d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f39d4.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f39da.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$CountSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f39ec.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.count` @type ^`long` @kind wide;
  #L3f39f0.  v2:= 1L;
  #L3f39f4.  v0:= v0 + v2 @kind long;
  #L3f39f6.  v4.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.count` @type ^`long` := v0 @kind wide;
  #L3f39fa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$CountSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3a0c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f3a10.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f3a16.  v0:= temp;
  #L3f3a18.  if v0 == 0 then goto L3f3a3a;
  #L3f3a1c.  v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f3a20.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle$CountSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3f3a24.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3f3a2a.  v0:= 9223372036854775807L;
  #L3f3a34.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f3a3a.  return @kind void;
}
