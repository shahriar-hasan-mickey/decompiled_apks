record `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L405c98.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L405c9e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L405ca2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L405ca8.  v0.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L405cac.  return @kind void;
}
procedure `void` `completeMain`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.completeMain:()V` @AccessFlag  {
    temp;
    v0;

  #L405cc0.  v0:= 1I;
  #L405cc2.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.done` @type ^`boolean` := v0 @kind boolean;
  #L405cc6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405cca.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L405cd0.  v0:= temp;
  #L405cd2.  if v0 != 0 then goto L405ce6;
  #L405cd6.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.emit:()V` @kind virtual;
  #L405cdc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405ce0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L405ce6.  return @kind void;
}
procedure `void` `completeOther`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.completeOther:()V` @AccessFlag  {
    temp;
    v0;

  #L405cf8.  v0:= 1I;
  #L405cfa.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.done` @type ^`boolean` := v0 @kind boolean;
  #L405cfe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405d02.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L405d08.  v0:= temp;
  #L405d0a.  if v0 != 0 then goto L405d1e;
  #L405d0e.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.emit:()V` @kind virtual;
  #L405d14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405d18.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L405d1e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.run:()V` @AccessFlag  {
    temp;
    v0;

  #L405d30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405d34.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L405d3a.  v0:= temp;
  #L405d3c.  if v0 != 0 then goto L405d6a;
  #L405d40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.done` @type ^`boolean` @kind boolean;
  #L405d44.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.emit:()V` @kind virtual;
  #L405d4a.  if v0 == 0 then goto L405d5a;
  #L405d4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405d52.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L405d58.  return @kind void;
  #L405d5a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405d5e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L405d64.  v0:= temp;
  #L405d66.  if v0 != 0 then goto L405d40;
  #L405d6a.  return @kind void;
}
