record `io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$DetachSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f566c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f5672.  v0.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f5676.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$DetachSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5688.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f568c.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L3f5690.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L3f5694.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L3f569a.  v1:= temp @kind object;
  #L3f569c.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f56a0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f56a6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$DetachSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f56b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f56bc.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L3f56c0.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L3f56c4.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L3f56ca.  v1:= temp @kind object;
  #L3f56cc.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f56d0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f56d6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$DetachSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f56e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f56ec.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L3f56f0.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L3f56f4.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L3f56fa.  v1:= temp @kind object;
  #L3f56fc.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f5700.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f5706.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$DetachSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5718.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f571c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f5722.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$DetachSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5734.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5738.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f573e.  v0:= temp;
  #L3f5740.  if v0 == 0 then goto L3f5752;
  #L3f5744.  v1.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3f5748.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f574c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f5752.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$DetachSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5764.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$DetachSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5768.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f576e.  return @kind void;
}
