record `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.source` @AccessFlag FINAL;
  `io.reactivex.functions.BooleanSupplier` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.stop` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BooleanSupplier` v2 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BooleanSupplier;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L403d54.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L403d5a.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L403d5e.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L403d62.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.source` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L403d66.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.stop` @type ^`io.reactivex.functions.BooleanSupplier` := v2 @kind object;
  #L403d6a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L403d7c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.stop` @type ^`io.reactivex.functions.BooleanSupplier` @kind object;
  #L403d80.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L403d86.  v0:= temp;
  #L403d88.  if v0 == 0 then goto L403d98;
  #L403d8c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403d90.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L403d96.  goto L403d9e;
  #L403d98.  call `subscribeNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.subscribeNext:()V` @kind virtual;
  #L403d9e.  return @kind void;
  #L403da0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L403da2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L403da8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403dac.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L403db2.  return @kind void;
  catch `java.lang.Throwable` @[L403d7c..L403d88] goto L403da0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403dd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403dd4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L403dda.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L403dec.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @type ^`long` @kind wide;
  #L403df0.  v2:= 1L;
  #L403df4.  v0:= v0 + v2 @kind long;
  #L403df6.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L403dfa.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403dfe.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L403e04.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403e18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L403e1c.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L403e22.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L403e34.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.getAndIncrement:()I` @kind virtual;
  #L403e3a.  v0:= temp;
  #L403e3c.  if v0 != 0 then goto L403e8a;
  #L403e40.  v0:= 1I;
  #L403e42.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L403e46.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L403e4c.  v1:= temp;
  #L403e4e.  if v1 == 0 then goto L403e54;
  #L403e52.  return @kind void;
  #L403e54.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @type ^`long` @kind wide;
  #L403e58.  v3:= 0L;
  #L403e5c.  v5:= lcmp(v1, v3);
  #L403e60.  if v5 == 0 then goto L403e72;
  #L403e64.  v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L403e68.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L403e6c.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L403e72.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L403e76.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L403e7c.  v0:= -v0 @kind int;
  #L403e7e.  call temp:= `addAndGet`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.addAndGet:(I)I` @kind virtual;
  #L403e84.  v0:= temp;
  #L403e86.  if v0 != 0 then goto L403e42;
  #L403e8a.  return @kind void;
}
