record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L400e50.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L400e56.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L400e5a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L400e5e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400e70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400e74.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L400e7a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400e8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L400e90.  if v0 == 0 then goto L400e96;
  #L400e94.  return @kind void;
  #L400e96.  v0:= 1I;
  #L400e98.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L400e9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400ea0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L400ea6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400eb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L400ebc.  if v0 == 0 then goto L400ec8;
  #L400ec0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L400ec6.  return @kind void;
  #L400ec8.  v0:= 1I;
  #L400eca.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L400ece.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400ed2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L400ed8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L400eec.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L400ef0.  if v0 == 0 then goto L400ef6;
  #L400ef4.  return @kind void;
  #L400ef6.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.get:()J` @kind virtual;
  #L400efc.  v0:= temp @kind wide;
  #L400efe.  v2:= 0L;
  #L400f02.  v4:= lcmp(v0, v2);
  #L400f06.  if v4 == 0 then goto L400f20;
  #L400f0a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400f0e.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L400f14.  v0:= 1L;
  #L400f18.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L400f1e.  goto L400f40;
  #L400f20.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L400f24.  call `accept`(v0, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L400f2a.  goto L400f40;
  #L400f2c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400f2e.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L400f34.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.cancel:()V` @kind virtual;
  #L400f3a.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L400f40.  return @kind void;
  catch `java.lang.Throwable` @[L400f20..L400f2a] goto L400f2c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L400f60.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400f64.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L400f6a.  v0:= temp;
  #L400f6c.  if v0 == 0 then goto L400f8e;
  #L400f70.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L400f74.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400f78.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L400f7e.  v0:= 9223372036854775807L;
  #L400f88.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L400f8e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400fa0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L400fa6.  v0:= temp;
  #L400fa8.  if v0 == 0 then goto L400fb2;
  #L400fac.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L400fb2.  return @kind void;
}
