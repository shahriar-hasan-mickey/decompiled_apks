record `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f3810.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f3816.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle.other` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L3f381a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3f382c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f3830.  v1:= new `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber`;
  #L3f3834.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle.other` @type ^`io.reactivex.SingleSource` @kind object;
  #L3f3838.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/SingleSource;)V` @kind direct;
  #L3f383e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f3844.  return @kind void;
}
