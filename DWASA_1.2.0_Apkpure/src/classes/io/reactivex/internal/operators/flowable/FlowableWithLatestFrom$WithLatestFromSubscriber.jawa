record `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.combiner` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40eca8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40ecae.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40ecb2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40ecb8.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L40ecbc.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40ecc0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40ecc6.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L40ecca.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40ecce.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40ecd4.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L40ecd8.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L40ecdc.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.combiner` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L40ece0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ecf4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ecf8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ecfe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ed02.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ed08.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ed1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ed20.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ed26.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ed2a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40ed30.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ed44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ed48.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ed4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ed52.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ed58.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40ed6c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L40ed72.  v3:= temp;
  #L40ed74.  if v3 != 0 then goto L40ed92;
  #L40ed78.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ed7c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40ed82.  v3:= temp @kind object;
  #L40ed84.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L40ed88.  v0:= 1L;
  #L40ed8c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40ed92.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40eda4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40eda8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40edac.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40edb2.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40edc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40edc8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40edce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40edd2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40edd8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40edec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40edf0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40edf4.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L40edfa.  return @kind void;
}
procedure `boolean` `setOther`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.setOther:(Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ec1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ec20.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40ec26.  v2:= temp;
  #L40ec28.  return v2;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40ec3c.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L40ec42.  v0:= temp @kind object;
  #L40ec44.  v1:= 0I;
  #L40ec46.  if v0 == 0 then goto L40ec88;
  #L40ec4a.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.combiner` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L40ec4e.  call temp:= `apply`(v2, v4, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40ec54.  v4:= temp @kind object;
  #L40ec56.  v0:= "The combiner returned a null value" @kind object;
  #L40ec5a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ec60.  v4:= temp @kind object;
  #L40ec62.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ec66.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40ec6c.  v4:= 1I;
  #L40ec6e.  return v4;
  #L40ec70.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40ec72.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40ec78.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.cancel:()V` @kind virtual;
  #L40ec7e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ec82.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ec88.  return v1;
  catch `java.lang.Throwable` @[L40ec4a..L40ec62] goto L40ec70;
}
