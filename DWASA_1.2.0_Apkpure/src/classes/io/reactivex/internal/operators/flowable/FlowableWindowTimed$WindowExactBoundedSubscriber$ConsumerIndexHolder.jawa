record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder` v0 @kind this, `long` v1 , `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40da38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40da3e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder.index` @type ^`long` := v1 @kind wide;
  #L40da42.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` := v3 @kind object;
  #L40da46.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40da58.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber$ConsumerIndexHolder.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber` @kind object;
  #L40da5c.  call temp:= `access$000`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.access$000:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;)Z` @kind static;
  #L40da62.  v1:= temp;
  #L40da64.  if v1 != 0 then goto L40da78;
  #L40da68.  call temp:= `access$100`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.access$100:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind static;
  #L40da6e.  v1:= temp @kind object;
  #L40da70.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40da76.  goto L40da84;
  #L40da78.  v1:= 1I;
  #L40da7a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber.terminated` @type ^`boolean` := v1 @kind boolean;
  #L40da7e.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L40da84.  call temp:= `enter`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.enter:()Z` @kind virtual;
  #L40da8a.  v1:= temp;
  #L40da8c.  if v1 == 0 then goto L40da96;
  #L40da90.  call `drainLoop`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber;.drainLoop:()V` @kind virtual;
  #L40da96.  return @kind void;
}
