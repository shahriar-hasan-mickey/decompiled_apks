record `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` @kind interface {
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.comparer` @AccessFlag FINAL;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v1` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v2` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40715c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L407162.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L407166.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.comparer` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L40716a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber`;
  #L40716e.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V` @kind direct;
  #L407174.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` := v1 @kind object;
  #L407178.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber`;
  #L40717c.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V` @kind direct;
  #L407182.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` := v1 @kind object;
  #L407186.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L40718a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L407190.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L407194.  return @kind void;
}
procedure `void` `cancelAndClear`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @AccessFlag  {
    temp;
    v0;

  #L4071a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4071ac.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L4071b2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4071b6.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L4071bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4071c0.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L4071c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4071ca.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L4071d0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4071e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4071e8.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L4071ee.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4071f2.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L4071f8.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.getAndIncrement:()I` @kind virtual;
  #L4071fe.  v0:= temp;
  #L407200.  if v0 != 0 then goto L407218;
  #L407204.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L407208.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L40720e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L407212.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L407218.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L40722c.  call temp:= `getAndIncrement`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.getAndIncrement:()I` @kind virtual;
  #L407232.  v0:= temp;
  #L407234.  if v0 == 0 then goto L40723a;
  #L407238.  return @kind void;
  #L40723a.  v0:= 1I;
  #L40723c.  v1:= 1I;
  #L40723e.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L407242.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L407246.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L40724a.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L40724e.  if v2 == 0 then goto L40742c;
  #L407252.  if v3 == 0 then goto L40742c;
  #L407256.  call temp:= `isDisposed`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.isDisposed:()Z` @kind virtual;
  #L40725c.  v4:= temp;
  #L40725e.  if v4 == 0 then goto L407278;
  #L407262.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L407266.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L40726c.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L407270.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L407276.  return @kind void;
  #L407278.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40727c.  call temp:= `get`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L407282.  v4:= temp @kind object;
  #L407284.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L407288.  if v4 == 0 then goto L4072aa;
  #L40728c.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L407292.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407296.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40729a.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4072a0.  v1:= temp @kind object;
  #L4072a2.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4072a8.  return @kind void;
  #L4072aa.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4072ae.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` @kind boolean;
  #L4072b2.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L4072b6.  if v5 != 0 then goto L4072f8;
  #L4072ba.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4072c0.  v5:= temp @kind object;
  #L4072c2.  v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` := v5 @kind object;
  #L4072c6.  goto L4072f8;
  #L4072c8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4072ca.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4072d0.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L4072d6.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4072da.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4072e0.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4072e4.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4072e8.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4072ee.  v1:= temp @kind object;
  #L4072f0.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4072f6.  return @kind void;
  #L4072f8.  v6:= 0I;
  #L4072fa.  if v5 != 0 then goto L407302;
  #L4072fe.  v7:= 1I;
  #L407300.  goto L407304;
  #L407302.  v7:= 0I;
  #L407304.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L407308.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` @kind boolean;
  #L40730c.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L407310.  if v9 != 0 then goto L407352;
  #L407314.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40731a.  v9:= temp @kind object;
  #L40731c.  v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` := v9 @kind object;
  #L407320.  goto L407352;
  #L407322.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L407324.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40732a.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L407330.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407334.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40733a.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40733e.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407342.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L407348.  v1:= temp @kind object;
  #L40734a.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407350.  return @kind void;
  #L407352.  if v9 != 0 then goto L40735a;
  #L407356.  v10:= 1I;
  #L407358.  goto L40735c;
  #L40735a.  v10:= 0I;
  #L40735c.  if v4 == 0 then goto L407380;
  #L407360.  if v8 == 0 then goto L407380;
  #L407364.  if v7 == 0 then goto L407380;
  #L407368.  if v10 == 0 then goto L407380;
  #L40736c.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407370.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L407376.  v0:= temp @kind object;
  #L407378.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40737e.  return @kind void;
  #L407380.  if v4 == 0 then goto L4073a6;
  #L407384.  if v8 == 0 then goto L4073a6;
  #L407388.  if v7 == v10 then goto L4073a6;
  #L40738c.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L407392.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407396.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L40739c.  v1:= temp @kind object;
  #L40739e.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4073a4.  return @kind void;
  #L4073a6.  if v7 != 0 then goto L407480;
  #L4073aa.  if v10 == 0 then goto L4073b0;
  #L4073ae.  goto L407480;
  #L4073b0.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L4073b4.  call temp:= `test`(v4, v5, v9) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4073ba.  v4:= temp;
  #L4073bc.  if v4 != 0 then goto L4073da;
  #L4073c0.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L4073c6.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4073ca.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4073d0.  v1:= temp @kind object;
  #L4073d2.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4073d8.  return @kind void;
  #L4073da.  v4:= 0I;
  #L4073dc.  v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` := v4 @kind object;
  #L4073e0.  v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` := v4 @kind object;
  #L4073e4.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4073e8.  call `request`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.request:()V` @kind virtual;
  #L4073ee.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4073f2.  call `request`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.request:()V` @kind virtual;
  #L4073f8.  goto L407256;
  #L4073fc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4073fe.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L407404.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L40740a.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40740e.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L407414.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407418.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40741c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L407422.  v1:= temp @kind object;
  #L407424.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40742a.  return @kind void;
  #L40742c.  call temp:= `isDisposed`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.isDisposed:()Z` @kind virtual;
  #L407432.  v2:= temp;
  #L407434.  if v2 == 0 then goto L40744e;
  #L407438.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L40743c.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L407442.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L407446.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L40744c.  return @kind void;
  #L40744e.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407452.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L407458.  v2:= temp @kind object;
  #L40745a.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L40745e.  if v2 == 0 then goto L407480;
  #L407462.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L407468.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40746c.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407470.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L407476.  v1:= temp @kind object;
  #L407478.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40747e.  return @kind void;
  #L407480.  v1:= -v1 @kind int;
  #L407482.  call temp:= `addAndGet`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.addAndGet:(I)I` @kind virtual;
  #L407488.  v1:= temp;
  #L40748a.  if v1 != 0 then goto L40723e;
  #L40748e.  return @kind void;
  catch `java.lang.Throwable` @[L4072ba..L4072c2] goto L4072c8;
  catch `java.lang.Throwable` @[L407314..L40731c] goto L407322;
  catch `java.lang.Throwable` @[L4073b0..L4073bc] goto L4073fc;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4074c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4074c4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4074ca.  v0:= temp;
  #L4074cc.  if v0 == 0 then goto L4074d8;
  #L4074d0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.drain:()V` @kind virtual;
  #L4074d6.  goto L4074de;
  #L4074d8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4074de.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407130.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L407134.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L40713a.  v0:= temp @kind object;
  #L40713c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L407140.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L407146.  v0:= temp;
  #L407148.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;

  #L4074f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4074f4.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4074fa.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L4074fe.  call `subscribe`(v3, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L407504.  return @kind void;
}
