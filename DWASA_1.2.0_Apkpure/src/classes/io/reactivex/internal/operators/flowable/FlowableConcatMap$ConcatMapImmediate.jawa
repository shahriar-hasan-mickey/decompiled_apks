record `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f27a8.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.<init>:(Lio/reactivex/functions/Function;I)V` @kind direct;
  #L3f27ae.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f27b2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3f27b6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f27bc.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L3f27c0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f27d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.cancelled` @type ^`boolean` @kind boolean;
  #L3f27d8.  if v0 != 0 then goto L3f27f6;
  #L3f27dc.  v0:= 1I;
  #L3f27de.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f27e2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L3f27e6.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.cancel:()V` @kind virtual;
  #L3f27ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f27f0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f27f6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f2808.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f280c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3f2812.  v0:= temp;
  #L3f2814.  if v0 != 0 then goto L3f29f2;
  #L3f2818.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.cancelled` @type ^`boolean` @kind boolean;
  #L3f281c.  if v0 == 0 then goto L3f2822;
  #L3f2820.  return @kind void;
  #L3f2822.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.active` @type ^`boolean` @kind boolean;
  #L3f2826.  if v0 != 0 then goto L3f29e2;
  #L3f282a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.done` @type ^`boolean` @kind boolean;
  #L3f282e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L3f2832.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f2838.  v1:= temp @kind object;
  #L3f283a.  v2:= 0I;
  #L3f283c.  v3:= 1I;
  #L3f283e.  if v1 != 0 then goto L3f2846;
  #L3f2842.  v4:= 1I;
  #L3f2844.  goto L3f2848;
  #L3f2846.  v4:= 0I;
  #L3f2848.  if v0 == 0 then goto L3f285c;
  #L3f284c.  if v4 == 0 then goto L3f285c;
  #L3f2850.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2854.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f285a.  return @kind void;
  #L3f285c.  if v4 != 0 then goto L3f29e2;
  #L3f2860.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f2864.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f286a.  v0:= temp @kind object;
  #L3f286c.  v1:= "The mapper returned a null Publisher" @kind object;
  #L3f2870.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2876.  v0:= temp @kind object;
  #L3f2878.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L3f287c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.sourceMode` @type ^`int`;
  #L3f2880.  if v1 == v3 then goto L3f28a8;
  #L3f2884.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.consumed` @type ^`int`;
  #L3f2888.  v1:= v1 + v3 @kind int;
  #L3f288a.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.limit` @type ^`int`;
  #L3f288e.  if v1 != v4 then goto L3f28a4;
  #L3f2892.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.consumed` @type ^`int` := v2;
  #L3f2896.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f289a.  v5:= (`long`) v1 @kind i2l;
  #L3f289c.  call `request`(v4, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f28a2.  goto L3f28a8;
  #L3f28a4.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.consumed` @type ^`int` := v1;
  #L3f28a8.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L3f28ac.  if v1 == 0 then goto L3f296a;
  #L3f28b0.  v0:= (`java.util.concurrent.Callable`) v0 @kind object;
  #L3f28b4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f28ba.  v0:= temp @kind object;
  #L3f28bc.  if v0 != 0 then goto L3f28c2;
  #L3f28c0.  goto L3f2818;
  #L3f28c2.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L3f28c6.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.isUnbounded:()Z` @kind virtual;
  #L3f28cc.  v1:= temp;
  #L3f28ce.  if v1 == 0 then goto L3f2918;
  #L3f28d2.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.get:()I` @kind virtual;
  #L3f28d8.  v1:= temp;
  #L3f28da.  if v1 != 0 then goto L3f2818;
  #L3f28de.  call temp:= `compareAndSet`(v7, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.compareAndSet:(II)Z` @kind virtual;
  #L3f28e4.  v1:= temp;
  #L3f28e6.  if v1 == 0 then goto L3f2818;
  #L3f28ea.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f28ee.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f28f4.  call temp:= `compareAndSet`(v7, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.compareAndSet:(II)Z` @kind virtual;
  #L3f28fa.  v0:= temp;
  #L3f28fc.  if v0 != 0 then goto L3f2818;
  #L3f2900.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2904.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2908.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f290e.  v1:= temp @kind object;
  #L3f2910.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2916.  return @kind void;
  #L3f2918.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.active` @type ^`boolean` := v3 @kind boolean;
  #L3f291c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L3f2920.  v2:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$WeakScalarSubscription`;
  #L3f2924.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L3f2928.  call `<init>`(v2, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$WeakScalarSubscription;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f292e.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L3f2934.  goto L3f29e2;
  #L3f2936.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f2938.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f293e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f2942.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f2948.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f294c.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f2952.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2956.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f295a.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f2960.  v1:= temp @kind object;
  #L3f2962.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2968.  return @kind void;
  #L3f296a.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.active` @type ^`boolean` := v3 @kind boolean;
  #L3f296e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L3f2972.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3f2978.  goto L3f29e2;
  #L3f297a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f297c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f2982.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f2986.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f298c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2990.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f2996.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f299a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f299e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f29a4.  v1:= temp @kind object;
  #L3f29a6.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f29ac.  return @kind void;
  #L3f29ae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f29b0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f29b6.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f29ba.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f29c0.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f29c4.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f29ca.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f29ce.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f29d2.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f29d8.  v1:= temp @kind object;
  #L3f29da.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f29e0.  return @kind void;
  #L3f29e2.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f29e6.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f29ec.  v0:= temp;
  #L3f29ee.  if v0 != 0 then goto L3f2818;
  #L3f29f2.  return @kind void;
  catch `java.lang.Throwable` @[L3f282e..L3f283a] goto L3f29ae;
  catch `java.lang.Throwable` @[L3f2860..L3f287c] goto L3f297a;
  catch `java.lang.Throwable` @[L3f28b4..L3f28bc] goto L3f2936;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f2a28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2a2c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f2a32.  v0:= temp;
  #L3f2a34.  if v0 == 0 then goto L3f2a66;
  #L3f2a38.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f2a3c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f2a42.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.getAndIncrement:()I` @kind virtual;
  #L3f2a48.  v2:= temp;
  #L3f2a4a.  if v2 != 0 then goto L3f2a6c;
  #L3f2a4e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2a52.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2a56.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f2a5c.  v0:= temp @kind object;
  #L3f2a5e.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2a64.  goto L3f2a6c;
  #L3f2a66.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f2a6c.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.innerNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f2a80.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.get:()I` @kind virtual;
  #L3f2a86.  v0:= temp;
  #L3f2a88.  if v0 != 0 then goto L3f2aca;
  #L3f2a8c.  v0:= 1I;
  #L3f2a8e.  v1:= 0I;
  #L3f2a90.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.compareAndSet:(II)Z` @kind virtual;
  #L3f2a96.  v2:= temp;
  #L3f2a98.  if v2 == 0 then goto L3f2aca;
  #L3f2a9c.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2aa0.  call `onNext`(v2, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f2aa6.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.compareAndSet:(II)Z` @kind virtual;
  #L3f2aac.  v4:= temp;
  #L3f2aae.  if v4 == 0 then goto L3f2ab4;
  #L3f2ab2.  return @kind void;
  #L3f2ab4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2ab8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2abc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f2ac2.  v0:= temp @kind object;
  #L3f2ac4.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2aca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f2adc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2ae0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f2ae6.  v0:= temp;
  #L3f2ae8.  if v0 == 0 then goto L3f2b1a;
  #L3f2aec.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L3f2af0.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.cancel:()V` @kind virtual;
  #L3f2af6.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.getAndIncrement:()I` @kind virtual;
  #L3f2afc.  v2:= temp;
  #L3f2afe.  if v2 != 0 then goto L3f2b20;
  #L3f2b02.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2b06.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2b0a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f2b10.  v0:= temp @kind object;
  #L3f2b12.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2b18.  goto L3f2b20;
  #L3f2b1a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f2b20.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f2b34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L3f2b38.  call `request`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.request:(J)V` @kind virtual;
  #L3f2b3e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.subscribeActual:()V` @AccessFlag  {
    temp;
    v0;

  #L3f2b50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2b54.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f2b5a.  return @kind void;
}
