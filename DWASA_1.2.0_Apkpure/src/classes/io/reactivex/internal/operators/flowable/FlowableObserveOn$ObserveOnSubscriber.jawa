record `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4001b0.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L4001b6.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4001ba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4001cc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4001d0.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4001d6.  v0:= temp;
  #L4001d8.  if v0 == 0 then goto L400264;
  #L4001dc.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4001e0.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L4001e4.  if v0 == 0 then goto L40023c;
  #L4001e8.  v0:= v4 @kind object;
  #L4001ea.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4001ee.  v1:= 7I;
  #L4001f0.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L4001f6.  v1:= temp;
  #L4001f8.  v2:= 1I;
  #L4001fa.  if v1 != v2 then goto L400216;
  #L4001fe.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.sourceMode` @type ^`int` := v2;
  #L400202.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L400206.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L40020a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40020e.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L400214.  return @kind void;
  #L400216.  v2:= 2I;
  #L400218.  if v1 != v2 then goto L40023c;
  #L40021c.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.sourceMode` @type ^`int` := v2;
  #L400220.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L400224.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400228.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40022e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.prefetch` @type ^`int`;
  #L400232.  v0:= (`long`) v0 @kind i2l;
  #L400234.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40023a.  return @kind void;
  #L40023c.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L400240.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.prefetch` @type ^`int`;
  #L400244.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L40024a.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L40024e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400252.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L400258.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.prefetch` @type ^`int`;
  #L40025c.  v0:= (`long`) v0 @kind i2l;
  #L40025e.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L400264.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L400154.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L400158.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40015e.  v0:= temp @kind object;
  #L400160.  if v0 == 0 then goto L40019e;
  #L400164.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.sourceMode` @type ^`int`;
  #L400168.  v2:= 1I;
  #L40016a.  if v1 == v2 then goto L40019e;
  #L40016e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L400172.  v3:= 1L;
  #L400176.  v1:= v1 + v3 @kind long;
  #L400178.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.limit` @type ^`int`;
  #L40017c.  v3:= (`long`) v3 @kind i2l;
  #L40017e.  v5:= lcmp(v1, v3);
  #L400182.  if v5 != 0 then goto L40019a;
  #L400186.  v3:= 0L;
  #L40018a.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L40018e.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400192.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L400198.  goto L40019e;
  #L40019a.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.produced` @type ^`long` := v1 @kind wide;
  #L40019e.  return v0 @kind object;
}
procedure `void` `runAsync`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.runAsync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L400278.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40027c.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L400280.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L400284.  v4:= 1I;
  #L400286.  v5:= 1I;
  #L400288.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40028c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L400292.  v6:= temp @kind wide;
  #L400294.  v8:= lcmp(v2, v6);
  #L400298.  if v8 == 0 then goto L40033e;
  #L40029c.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L4002a0.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4002a6.  v9:= temp @kind object;
  #L4002a8.  if v9 != 0 then goto L4002b0;
  #L4002ac.  v10:= 1I;
  #L4002ae.  goto L4002b2;
  #L4002b0.  v10:= 0I;
  #L4002b2.  call temp:= `checkTerminated`(v11, v8, v10, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4002b8.  v8:= temp;
  #L4002ba.  if v8 == 0 then goto L4002c0;
  #L4002be.  return @kind void;
  #L4002c0.  if v10 == 0 then goto L4002c6;
  #L4002c4.  goto L40033e;
  #L4002c6.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4002cc.  v8:= 1L;
  #L4002d0.  v2:= v2 + v8 @kind long;
  #L4002d2.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.limit` @type ^`int`;
  #L4002d6.  v8:= (`long`) v8 @kind i2l;
  #L4002d8.  v10:= lcmp(v2, v8);
  #L4002dc.  if v10 != 0 then goto L400294;
  #L4002e0.  v8:= 9223372036854775807L;
  #L4002ea.  v10:= lcmp(v6, v8);
  #L4002ee.  if v10 == 0 then goto L400300;
  #L4002f2.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4002f6.  v7:= -v2 @kind long;
  #L4002f8.  call temp:= `addAndGet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4002fe.  v6:= temp @kind wide;
  #L400300.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400304.  call `request`(v8, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40030a.  v2:= 0L;
  #L40030e.  goto L400294;
  #L400310.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400312.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L400318.  v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L40031c.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400320.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L400326.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L40032c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L400332.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L400336.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40033c.  return @kind void;
  #L40033e.  v8:= lcmp(v2, v6);
  #L400342.  if v8 != 0 then goto L400360;
  #L400346.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L40034a.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L400350.  v7:= temp;
  #L400352.  call temp:= `checkTerminated`(v11, v6, v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L400358.  v6:= temp;
  #L40035a.  if v6 == 0 then goto L400360;
  #L40035e.  return @kind void;
  #L400360.  call temp:= `get`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.get:()I` @kind virtual;
  #L400366.  v6:= temp;
  #L400368.  if v5 != v6 then goto L400380;
  #L40036c.  v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L400370.  v5:= -v5 @kind int;
  #L400372.  call temp:= `addAndGet`(v11, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.addAndGet:(I)I` @kind virtual;
  #L400378.  v5:= temp;
  #L40037a.  if v5 != 0 then goto L400288;
  #L40037e.  return @kind void;
  #L400380.  v5:= v6;
  #L400382.  goto L400288;
  catch `java.lang.Throwable` @[L4002a0..L4002a8] goto L400310;
}
procedure `void` `runBackfused`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.runBackfused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4003a0.  v0:= 1I;
  #L4003a2.  v1:= 1I;
  #L4003a4.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4003a8.  if v2 == 0 then goto L4003ae;
  #L4003ac.  return @kind void;
  #L4003ae.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L4003b2.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4003b6.  v4:= 0I;
  #L4003b8.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4003be.  if v2 == 0 then goto L4003f0;
  #L4003c2.  v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4003c6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4003ca.  if v0 == 0 then goto L4003da;
  #L4003ce.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4003d2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4003d8.  goto L4003e4;
  #L4003da.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4003de.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4003e4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4003e8.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4003ee.  return @kind void;
  #L4003f0.  v1:= -v1 @kind int;
  #L4003f2.  call temp:= `addAndGet`(v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.addAndGet:(I)I` @kind virtual;
  #L4003f8.  v1:= temp;
  #L4003fa.  if v1 != 0 then goto L4003a4;
  #L4003fe.  return @kind void;
}
procedure `void` `runSync`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.runSync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L400410.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400414.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L400418.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L40041c.  v4:= 1I;
  #L40041e.  v5:= 1I;
  #L400420.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L400424.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40042a.  v6:= temp @kind wide;
  #L40042c.  v8:= lcmp(v2, v6);
  #L400430.  if v8 == 0 then goto L400496;
  #L400434.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40043a.  v8:= temp @kind object;
  #L40043c.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L400440.  if v9 == 0 then goto L400446;
  #L400444.  return @kind void;
  #L400446.  if v8 != 0 then goto L400460;
  #L40044a.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L40044e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L400454.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L400458.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40045e.  return @kind void;
  #L400460.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L400466.  v8:= 1L;
  #L40046a.  v2:= v2 + v8 @kind long;
  #L40046c.  goto L40042c;
  #L40046e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400470.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L400476.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L40047a.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40047e.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L400484.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40048a.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40048e.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L400494.  return @kind void;
  #L400496.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40049a.  if v6 == 0 then goto L4004a0;
  #L40049e.  return @kind void;
  #L4004a0.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4004a6.  v6:= temp;
  #L4004a8.  if v6 == 0 then goto L4004c2;
  #L4004ac.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L4004b0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4004b6.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4004ba.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4004c0.  return @kind void;
  #L4004c2.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.get:()I` @kind virtual;
  #L4004c8.  v6:= temp;
  #L4004ca.  if v5 != v6 then goto L4004e2;
  #L4004ce.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L4004d2.  v5:= -v5 @kind int;
  #L4004d4.  call temp:= `addAndGet`(v10, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.addAndGet:(I)I` @kind virtual;
  #L4004da.  v5:= temp;
  #L4004dc.  if v5 != 0 then goto L400420;
  #L4004e0.  return @kind void;
  #L4004e2.  v5:= v6;
  #L4004e4.  goto L400420;
  catch `java.lang.Throwable` @[L400434..L40043c] goto L40046e;
}
