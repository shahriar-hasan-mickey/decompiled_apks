record `io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.notSkipping` @AccessFlag ;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.predicate` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$SkipWhileSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L408460.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L408466.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40846a.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L40846e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$SkipWhileSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L408480.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L408484.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40848a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$SkipWhileSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40849c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4084a0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4084a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$SkipWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4084b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4084bc.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4084c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$SkipWhileSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4084d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.notSkipping` @type ^`boolean` @kind boolean;
  #L4084d8.  if v0 == 0 then goto L4084e8;
  #L4084dc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4084e0.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4084e6.  goto L408518;
  #L4084e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L4084ec.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4084f2.  v0:= temp;
  #L4084f4.  if v0 == 0 then goto L408508;
  #L4084f8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4084fc.  v0:= 1L;
  #L408500.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L408506.  goto L408518;
  #L408508.  v0:= 1I;
  #L40850a.  v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.notSkipping` @type ^`boolean` := v0 @kind boolean;
  #L40850e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L408512.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L408518.  return @kind void;
  #L40851a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40851c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L408522.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L408526.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40852c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L408530.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L408536.  return @kind void;
  catch `java.lang.Throwable` @[L4084e8..L4084f4] goto L40851a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$SkipWhileSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L408554.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L408558.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40855e.  v0:= temp;
  #L408560.  if v0 == 0 then goto L408572;
  #L408564.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L408568.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40856c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L408572.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$SkipWhileSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L408584.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L408588.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40858e.  return @kind void;
}
