record `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.functions.BooleanSupplier` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.bufferSupplier` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.once` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.produced` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.size` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eea50.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3eea56.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3eea5a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.size` @type ^`int` := v2;
  #L3eea5e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @type ^`int` := v3;
  #L3eea62.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L3eea66.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3eea6a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3eea70.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L3eea74.  v1:= new `java.util.ArrayDeque`;
  #L3eea78.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3eea7e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L3eea82.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eea94.  v0:= 1I;
  #L3eea96.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3eea9a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eea9e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3eeaa4.  return @kind void;
}
procedure `boolean` `getAsBoolean`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.getAsBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eea38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3eea3c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3eeab8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` @kind boolean;
  #L3eeabc.  if v0 == 0 then goto L3eeac2;
  #L3eeac0.  return @kind void;
  #L3eeac2.  v0:= 1I;
  #L3eeac4.  v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3eeac8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.produced` @type ^`long` @kind wide;
  #L3eeacc.  v2:= 0L;
  #L3eead0.  v4:= lcmp(v0, v2);
  #L3eead4.  if v4 == 0 then goto L3eeade;
  #L3eead8.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3eeade.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eeae2.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L3eeae6.  call `postComplete`(v0, v1, v5, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)V` @kind static;
  #L3eeaec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eeb00.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` @kind boolean;
  #L3eeb04.  if v0 == 0 then goto L3eeb10;
  #L3eeb08.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eeb0e.  return @kind void;
  #L3eeb10.  v0:= 1I;
  #L3eeb12.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3eeb16.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L3eeb1a.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L3eeb20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eeb24.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eeb2a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3eeb3c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` @kind boolean;
  #L3eeb40.  if v0 == 0 then goto L3eeb46;
  #L3eeb44.  return @kind void;
  #L3eeb46.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L3eeb4a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.index` @type ^`int`;
  #L3eeb4e.  v2:= v1 + 1;
  #L3eeb52.  if v1 != 0 then goto L3eeb90;
  #L3eeb56.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3eeb5a.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3eeb60.  v1:= temp @kind object;
  #L3eeb62.  v3:= "The bufferSupplier returned a null buffer" @kind object;
  #L3eeb66.  call temp:= `requireNonNull`(v1, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eeb6c.  v1:= temp @kind object;
  #L3eeb6e.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3eeb72.  call temp:= `offer`(v0, v1) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3eeb78.  goto L3eeb90;
  #L3eeb7a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eeb7c.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3eeb82.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.cancel:()V` @kind virtual;
  #L3eeb88.  call `onError`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3eeb8e.  return @kind void;
  #L3eeb90.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L3eeb96.  v1:= temp @kind object;
  #L3eeb98.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3eeb9c.  if v1 == 0 then goto L3eebd8;
  #L3eeba0.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3eeba6.  v3:= temp;
  #L3eeba8.  v3:= v3 + 1;
  #L3eebac.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.size` @type ^`int`;
  #L3eebb0.  if v3 != v4 then goto L3eebd8;
  #L3eebb4.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3eebba.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eebc0.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.produced` @type ^`long` @kind wide;
  #L3eebc4.  v5:= 1L;
  #L3eebc8.  v3:= v3 + v5 @kind long;
  #L3eebca.  v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L3eebce.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eebd2.  call `onNext`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3eebd8.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3eebde.  v0:= temp @kind object;
  #L3eebe0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3eebe6.  v1:= temp;
  #L3eebe8.  if v1 == 0 then goto L3eec00;
  #L3eebec.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3eebf2.  v1:= temp @kind object;
  #L3eebf4.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3eebf8.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eebfe.  goto L3eebe0;
  #L3eec00.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @type ^`int`;
  #L3eec04.  if v2 != v8 then goto L3eec0a;
  #L3eec08.  v2:= 0I;
  #L3eec0a.  v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.index` @type ^`int` := v2;
  #L3eec0e.  return @kind void;
  catch `java.lang.Throwable` @[L3eeb56..L3eeb72] goto L3eeb7a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eec2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eec30.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3eec36.  v0:= temp;
  #L3eec38.  if v0 == 0 then goto L3eec4a;
  #L3eec3c.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3eec40.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eec44.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3eec4a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3eec5c.  call temp:= `validate`(v8) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3eec62.  v0:= temp;
  #L3eec64.  if v0 == 0 then goto L3eecee;
  #L3eec68.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eec6c.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L3eec70.  v1:= v8 @kind wide;
  #L3eec72.  v5:= v7 @kind object;
  #L3eec74.  v6:= v7 @kind object;
  #L3eec76.  call temp:= `postCompleteRequest`(v1, v3, v4, v5, v6) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L3eec7c.  v0:= temp;
  #L3eec7e.  if v0 == 0 then goto L3eec84;
  #L3eec82.  return @kind void;
  #L3eec84.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3eec88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3eec8e.  v0:= temp;
  #L3eec90.  if v0 != 0 then goto L3eecd6;
  #L3eec94.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3eec98.  v1:= 0I;
  #L3eec9a.  v2:= 1I;
  #L3eec9c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3eeca2.  v0:= temp;
  #L3eeca4.  if v0 == 0 then goto L3eecd6;
  #L3eeca8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @type ^`int`;
  #L3eecac.  v0:= (`long`) v0 @kind i2l;
  #L3eecae.  v2:= 1L;
  #L3eecb2.  v8:= v8 - v2 @kind long;
  #L3eecb4.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L3eecba.  v8:= temp @kind wide;
  #L3eecbc.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.size` @type ^`int`;
  #L3eecc0.  v0:= (`long`) v0 @kind i2l;
  #L3eecc2.  call temp:= `addCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L3eecc8.  v8:= temp @kind wide;
  #L3eecca.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eecce.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eecd4.  goto L3eecee;
  #L3eecd6.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @type ^`int`;
  #L3eecda.  v0:= (`long`) v0 @kind i2l;
  #L3eecdc.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L3eece2.  v8:= temp @kind wide;
  #L3eece4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eece8.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eecee.  return @kind void;
}
