record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.isLeft` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$JoinSupport;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fc74c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3fc752.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport` := v1 @kind object;
  #L3fc756.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.isLeft` @type ^`boolean` := v2 @kind boolean;
  #L3fc75a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3fc76c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fc772.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc724.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fc72a.  v0:= temp @kind object;
  #L3fc72c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L3fc730.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3fc736.  v0:= temp;
  #L3fc738.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc784.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport` @kind object;
  #L3fc788.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$JoinSupport;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;)V` @kind interface;
  #L3fc78e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc7a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport` @kind object;
  #L3fc7a4.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$JoinSupport;.innerError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fc7aa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc7bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport` @kind object;
  #L3fc7c0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.isLeft` @type ^`boolean` @kind boolean;
  #L3fc7c4.  call `innerValue`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$JoinSupport;.innerValue:(ZLjava/lang/Object;)V` @kind interface;
  #L3fc7ca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc7dc.  v0:= 9223372036854775807L;
  #L3fc7e6.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L3fc7ec.  return @kind void;
}
