record `io.reactivex.internal.operators.flowable.FlowableDelay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableDelay.delay` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDelay.delayError` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableDelay.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableDelay.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelay` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f5420.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f5426.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay.delay` @type ^`long` := v2 @kind wide;
  #L3f542a.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L3f542e.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay.scheduler` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L3f5432.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay.delayError` @type ^`boolean` := v6 @kind boolean;
  #L3f5436.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableDelay` v8 @kind this, `org.reactivestreams.Subscriber` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f5448.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.delayError` @type ^`boolean` @kind boolean;
  #L3f544c.  if v0 == 0 then goto L3f5454;
  #L3f5450.  v2:= v9 @kind object;
  #L3f5452.  goto L3f5460;
  #L3f5454.  v0:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L3f5458.  call `<init>`(v0, v9) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f545e.  v2:= v0 @kind object;
  #L3f5460.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L3f5464.  call temp:= `createWorker`(v9) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L3f546a.  v6:= temp @kind object;
  #L3f546c.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f5470.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber`;
  #L3f5474.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.delay` @type ^`long` @kind wide;
  #L3f5478.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f547c.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.delayError` @type ^`boolean` @kind boolean;
  #L3f5480.  v1:= v0 @kind object;
  #L3f5482.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V` @kind direct;
  #L3f5488.  call `subscribe`(v9, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f548e.  return @kind void;
}
