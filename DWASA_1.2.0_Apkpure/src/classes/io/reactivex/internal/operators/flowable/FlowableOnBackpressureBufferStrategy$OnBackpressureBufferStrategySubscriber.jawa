record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.cancelled` @AccessFlag VOLATILE;
  `java.util.Deque` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.error` @AccessFlag ;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.onOverflow` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.BackpressureOverflowStrategy` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.strategy` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object, `io.reactivex.BackpressureOverflowStrategy` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4009d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4009da.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4009de.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.onOverflow` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L4009e2.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.strategy` @type ^`io.reactivex.BackpressureOverflowStrategy` := v3 @kind object;
  #L4009e6.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.bufferSize` @type ^`long` := v4 @kind wide;
  #L4009ea.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4009ee.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4009f4.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4009f8.  v1:= new `java.util.ArrayDeque`;
  #L4009fc.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L400a02.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @type ^`java.util.Deque` := v1 @kind object;
  #L400a06.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400a18.  v0:= 1I;
  #L400a1a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L400a1e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400a22.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L400a28.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.getAndIncrement:()I` @kind virtual;
  #L400a2e.  v0:= temp;
  #L400a30.  if v0 != 0 then goto L400a3e;
  #L400a34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @type ^`java.util.Deque` @kind object;
  #L400a38.  call `clear`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L400a3e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this, `java.util.Deque` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @AccessFlag  {
    temp;
    v0;

  #L400a50.  @monitorenter v2
  #L400a52.  call `clear`(v2) @signature `Ljava/util/Deque;.clear:()V` @kind interface;
  #L400a58.  @monitorexit v2
  #L400a5a.  return @kind void;
  #L400a5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400a5e.  @monitorexit v2
  #L400a60.  throw v0;
  catch `java.lang.Throwable` @[L400a52..L400a60] goto L400a5c;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L400a80.  call temp:= `getAndIncrement`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.getAndIncrement:()I` @kind virtual;
  #L400a86.  v0:= temp;
  #L400a88.  if v0 == 0 then goto L400a8e;
  #L400a8c.  return @kind void;
  #L400a8e.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @type ^`java.util.Deque` @kind object;
  #L400a92.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400a96.  v2:= 1I;
  #L400a98.  v3:= 1I;
  #L400a9a.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L400a9e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L400aa4.  v4:= temp @kind wide;
  #L400aa6.  v6:= 0L;
  #L400aaa.  v8:= v6 @kind wide;
  #L400aac.  v10:= lcmp(v8, v4);
  #L400ab0.  if v10 == 0 then goto L400b1e;
  #L400ab4.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L400ab8.  if v10 == 0 then goto L400ac4;
  #L400abc.  call `clear`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L400ac2.  return @kind void;
  #L400ac4.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` @kind boolean;
  #L400ac8.  @monitorenter v0
  #L400aca.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L400ad0.  v11:= temp @kind object;
  #L400ad2.  @monitorexit v0
  #L400ad4.  if v11 != 0 then goto L400adc;
  #L400ad8.  v12:= 1I;
  #L400ada.  goto L400ade;
  #L400adc.  v12:= 0I;
  #L400ade.  if v10 == 0 then goto L400b04;
  #L400ae2.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L400ae6.  if v10 == 0 then goto L400af8;
  #L400aea.  call `clear`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L400af0.  call `onError`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L400af6.  return @kind void;
  #L400af8.  if v12 == 0 then goto L400b04;
  #L400afc.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L400b02.  return @kind void;
  #L400b04.  if v12 == 0 then goto L400b0a;
  #L400b08.  goto L400b1e;
  #L400b0a.  call `onNext`(v1, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L400b10.  v10:= 1L;
  #L400b14.  v8:= v8 + v10 @kind long;
  #L400b16.  goto L400aac;
  #L400b18.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400b1a.  @monitorexit v0
  #L400b1c.  throw v1;
  #L400b1e.  v10:= lcmp(v8, v4);
  #L400b22.  if v10 != 0 then goto L400b72;
  #L400b26.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L400b2a.  if v4 == 0 then goto L400b36;
  #L400b2e.  call `clear`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L400b34.  return @kind void;
  #L400b36.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` @kind boolean;
  #L400b3a.  @monitorenter v0
  #L400b3c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L400b42.  v5:= temp;
  #L400b44.  @monitorexit v0
  #L400b46.  if v4 == 0 then goto L400b72;
  #L400b4a.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L400b4e.  if v4 == 0 then goto L400b60;
  #L400b52.  call `clear`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L400b58.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L400b5e.  return @kind void;
  #L400b60.  if v5 == 0 then goto L400b72;
  #L400b64.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L400b6a.  return @kind void;
  #L400b6c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400b6e.  @monitorexit v0
  #L400b70.  throw v1;
  #L400b72.  v4:= lcmp(v8, v6);
  #L400b76.  if v4 == 0 then goto L400b84;
  #L400b7a.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L400b7e.  call temp:= `produced`(v4, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L400b84.  v3:= -v3 @kind int;
  #L400b86.  call temp:= `addAndGet`(v13, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.addAndGet:(I)I` @kind virtual;
  #L400b8c.  v3:= temp;
  #L400b8e.  if v3 != 0 then goto L400a9a;
  #L400b92.  return @kind void;
  catch `java.lang.Throwable` @[L400aca..L400ad4] goto L400b18;
  catch `java.lang.Throwable` @[L400b1a..L400b1c] goto L400b18;
  catch `java.lang.Throwable` @[L400b3c..L400b46] goto L400b6c;
  catch `java.lang.Throwable` @[L400b6e..L400b70] goto L400b6c;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400bcc.  v0:= 1I;
  #L400bce.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L400bd2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @kind virtual;
  #L400bd8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400bec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` @kind boolean;
  #L400bf0.  if v0 == 0 then goto L400bfc;
  #L400bf4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L400bfa.  return @kind void;
  #L400bfc.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L400c00.  v2:= 1I;
  #L400c02.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L400c06.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @kind virtual;
  #L400c0c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L400c20.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` @kind boolean;
  #L400c24.  if v0 == 0 then goto L400c2a;
  #L400c28.  return @kind void;
  #L400c2a.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @type ^`java.util.Deque` @kind object;
  #L400c2e.  @monitorenter v0
  #L400c30.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L400c36.  v1:= temp;
  #L400c38.  v1:= (`long`) v1 @kind i2l;
  #L400c3a.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.bufferSize` @type ^`long` @kind wide;
  #L400c3e.  v5:= 0I;
  #L400c40.  v6:= 1I;
  #L400c42.  v7:= lcmp(v1, v3);
  #L400c46.  if v7 != 0 then goto L400c88;
  #L400c4a.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$1.$SwitchMap$io$reactivex$BackpressureOverflowStrategy` @type ^`int`[] @kind object;
  #L400c4e.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.strategy` @type ^`io.reactivex.BackpressureOverflowStrategy` @kind object;
  #L400c52.  call temp:= `ordinal`(v2) @signature `Lio/reactivex/BackpressureOverflowStrategy;.ordinal:()I` @kind virtual;
  #L400c58.  v2:= temp;
  #L400c5a.  v1:= v1[v2];
  #L400c5e.  if v1 == v6 then goto L400c78;
  #L400c62.  v2:= 2I;
  #L400c64.  if v1 == v2 then goto L400c6a;
  #L400c68.  goto L400c90;
  #L400c6a.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L400c70.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L400c76.  goto L400c84;
  #L400c78.  call temp:= `pollLast`(v0) @signature `Ljava/util/Deque;.pollLast:()Ljava/lang/Object;` @kind interface;
  #L400c7e.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L400c84.  v5:= 1I;
  #L400c86.  goto L400c8e;
  #L400c88.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L400c8e.  v6:= 0I;
  #L400c90.  @monitorexit v0
  #L400c92.  if v5 == 0 then goto L400cc0;
  #L400c96.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.onOverflow` @type ^`io.reactivex.functions.Action` @kind object;
  #L400c9a.  if v9 == 0 then goto L400ce6;
  #L400c9e.  call `run`(v9) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L400ca4.  goto L400ce6;
  #L400ca6.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400ca8.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L400cae.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400cb2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L400cb8.  call `onError`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L400cbe.  goto L400ce6;
  #L400cc0.  if v6 == 0 then goto L400ce0;
  #L400cc4.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400cc8.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L400cce.  v9:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L400cd2.  call `<init>`(v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L400cd8.  call `onError`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L400cde.  goto L400ce6;
  #L400ce0.  call `drain`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @kind virtual;
  #L400ce6.  return @kind void;
  #L400ce8.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400cea.  @monitorexit v0
  #L400cec.  throw v9;
  catch `java.lang.Throwable` @[L400c30..L400c92] goto L400ce8;
  catch `java.lang.Throwable` @[L400c9e..L400ca4] goto L400ca6;
  catch `java.lang.Throwable` @[L400cea..L400cec] goto L400ce8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L400d20.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L400d24.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L400d2a.  v0:= temp;
  #L400d2c.  if v0 == 0 then goto L400d4e;
  #L400d30.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L400d34.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L400d38.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L400d3e.  v0:= 9223372036854775807L;
  #L400d48.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L400d4e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400d60.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L400d66.  v0:= temp;
  #L400d68.  if v0 == 0 then goto L400d7c;
  #L400d6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L400d70.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L400d76.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @kind virtual;
  #L400d7c.  return @kind void;
}
