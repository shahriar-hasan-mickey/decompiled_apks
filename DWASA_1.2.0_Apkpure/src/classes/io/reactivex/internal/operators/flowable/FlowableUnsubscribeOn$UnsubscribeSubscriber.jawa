record `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.scheduler` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40bb38.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40bb3e.  v0.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40bb42.  v0.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L40bb46.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40bb58.  v0:= 0I;
  #L40bb5a.  v1:= 1I;
  #L40bb5c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40bb62.  v0:= temp;
  #L40bb64.  if v0 == 0 then goto L40bb7c;
  #L40bb68.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40bb6c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber$Cancellation`;
  #L40bb70.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber$Cancellation;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;)V` @kind direct;
  #L40bb76.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40bb7c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bb90.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.get:()Z` @kind virtual;
  #L40bb96.  v0:= temp;
  #L40bb98.  if v0 != 0 then goto L40bba6;
  #L40bb9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bba0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40bba6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bbb8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.get:()Z` @kind virtual;
  #L40bbbe.  v0:= temp;
  #L40bbc0.  if v0 == 0 then goto L40bbcc;
  #L40bbc4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40bbca.  return @kind void;
  #L40bbcc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bbd0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40bbd6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bbe8.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.get:()Z` @kind virtual;
  #L40bbee.  v0:= temp;
  #L40bbf0.  if v0 != 0 then goto L40bbfe;
  #L40bbf4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bbf8.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40bbfe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bc10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40bc14.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40bc1a.  v0:= temp;
  #L40bc1c.  if v0 == 0 then goto L40bc2e;
  #L40bc20.  v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40bc24.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bc28.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40bc2e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bc40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40bc44.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40bc4a.  return @kind void;
}
