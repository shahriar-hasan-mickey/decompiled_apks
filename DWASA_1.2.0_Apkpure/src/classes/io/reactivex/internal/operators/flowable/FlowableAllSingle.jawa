record `io.reactivex.internal.operators.flowable.FlowableAllSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAllSingle.predicate` @AccessFlag FINAL;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableAllSingle.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAllSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3edda8.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L3eddae.  v0.`io.reactivex.internal.operators.flowable.FlowableAllSingle.source` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L3eddb2.  v0.`io.reactivex.internal.operators.flowable.FlowableAllSingle.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L3eddb6.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableAllSingle` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3edd7c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAll`;
  #L3edd80.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableAllSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3edd84.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableAllSingle.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3edd88.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAll;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3edd8e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3edd94.  v0:= temp @kind object;
  #L3edd96.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableAllSingle` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3eddc8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableAllSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3eddcc.  v1:= new `io.reactivex.internal.operators.flowable.FlowableAllSingle$AllSubscriber`;
  #L3eddd0.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableAllSingle.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3eddd4.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$AllSubscriber;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3eddda.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3edde0.  return @kind void;
}
