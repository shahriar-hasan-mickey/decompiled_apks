record `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.done` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40c83c.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L40c842.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` := v1 @kind object;
  #L40c846.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c858.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L40c85c.  if v0 == 0 then goto L40c862;
  #L40c860.  return @kind void;
  #L40c862.  v0:= 1I;
  #L40c864.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40c868.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` @kind object;
  #L40c86c.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerComplete:()V` @kind virtual;
  #L40c872.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c884.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L40c888.  if v0 == 0 then goto L40c894;
  #L40c88c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40c892.  return @kind void;
  #L40c894.  v0:= 1I;
  #L40c896.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40c89a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` @kind object;
  #L40c89e.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40c8a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L40c8b8.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L40c8bc.  if v1 == 0 then goto L40c8c2;
  #L40c8c0.  return @kind void;
  #L40c8c2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` @kind object;
  #L40c8c6.  call `innerNext`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerNext:()V` @kind virtual;
  #L40c8cc.  return @kind void;
}
