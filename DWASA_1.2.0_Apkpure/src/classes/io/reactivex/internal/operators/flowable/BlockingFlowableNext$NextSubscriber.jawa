record `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.buf` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.waiting` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ed92c.  call `<init>`(v2) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L3ed932.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L3ed936.  v1:= 1I;
  #L3ed938.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L3ed93e.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.buf` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L3ed942.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3ed946.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3ed94c.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L3ed950.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L3ed964.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L3ed978.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ed97e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` v2 @kind this, `io.reactivex.Notification` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.onNext:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed990.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3ed994.  v1:= 0I;
  #L3ed996.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L3ed99c.  v0:= temp;
  #L3ed99e.  v1:= 1I;
  #L3ed9a0.  if v0 == v1 then goto L3ed9b0;
  #L3ed9a4.  call temp:= `isOnNext`(v3) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L3ed9aa.  v0:= temp;
  #L3ed9ac.  if v0 != 0 then goto L3ed9e4;
  #L3ed9b0.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L3ed9b4.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3ed9ba.  v0:= temp;
  #L3ed9bc.  if v0 != 0 then goto L3ed9e4;
  #L3ed9c0.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L3ed9c4.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3ed9ca.  v0:= temp @kind object;
  #L3ed9cc.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L3ed9d0.  if v0 == 0 then goto L3ed9b0;
  #L3ed9d4.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L3ed9da.  v1:= temp;
  #L3ed9dc.  if v1 != 0 then goto L3ed9b0;
  #L3ed9e0.  v3:= v0 @kind object;
  #L3ed9e2.  goto L3ed9b0;
  #L3ed9e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3ed9f8.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L3ed9fc.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.onNext:(Lio/reactivex/Notification;)V` @kind virtual;
  #L3eda02.  return @kind void;
}
procedure `void` `setWaiting`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.setWaiting:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3eda14.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.waiting` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3eda18.  v1:= 1I;
  #L3eda1a.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L3eda20.  return @kind void;
}
procedure `io.reactivex.Notification` `takeNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.takeNext:()Lio/reactivex/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ed8fc.  call `setWaiting`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$NextSubscriber;.setWaiting:()V` @kind virtual;
  #L3ed902.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3ed908.  v0:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$NextSubscriber.buf` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L3ed90c.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L3ed912.  v0:= temp @kind object;
  #L3ed914.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L3ed918.  return v0 @kind object;
}
