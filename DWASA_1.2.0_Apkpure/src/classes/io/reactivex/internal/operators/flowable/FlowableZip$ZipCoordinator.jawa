record `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @AccessFlag VOLATILE;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.current` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40f428.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40f42e.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40f432.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.zipper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L40f436.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` := v5 @kind boolean;
  #L40f43a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[v3];
  #L40f43e.  v2:= 0I;
  #L40f440.  if v2 >= v3 then goto L40f458;
  #L40f444.  v5:= new `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`;
  #L40f448.  call `<init>`(v5, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;I)V` @kind direct;
  #L40f44e.  v1[v2]:= v5 @kind object;
  #L40f452.  v2:= v2 + 1;
  #L40f456.  goto L40f440;
  #L40f458.  v2:= new `java.lang.Object`[v3];
  #L40f45c.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.current` @type ^`java.lang.Object`[] := v2 @kind object;
  #L40f460.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] := v1 @kind object;
  #L40f464.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40f468.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40f46e.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40f472.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L40f476.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L40f47c.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L40f480.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f494.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L40f498.  if v0 != 0 then goto L40f4a8;
  #L40f49c.  v0:= 1I;
  #L40f49e.  v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40f4a2.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L40f4a8.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40f4bc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] @kind object;
  #L40f4c0.  v1:= length @variable v0;
  #L40f4c2.  v2:= 0I;
  #L40f4c4.  if v2 >= v1 then goto L40f4d8;
  #L40f4c8.  v3:= v0[v2] @kind object;
  #L40f4cc.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.cancel:()V` @kind virtual;
  #L40f4d2.  v2:= v2 + 1;
  #L40f4d6.  goto L40f4c4;
  #L40f4d8.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L40f4ec.  v1:= v17 @kind object;
  #L40f4f0.  call temp:= `getAndIncrement`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.getAndIncrement:()I` @kind virtual;
  #L40f4f6.  v0:= temp;
  #L40f4f8.  if v0 == 0 then goto L40f4fe;
  #L40f4fc.  return @kind void;
  #L40f4fe.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40f502.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] @kind object;
  #L40f506.  v4:= length @variable v3;
  #L40f508.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.current` @type ^`java.lang.Object`[] @kind object;
  #L40f50c.  v7:= 1I;
  #L40f50e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f512.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40f518.  v8:= temp @kind wide;
  #L40f51a.  v12:= 0L;
  #L40f51e.  v14:= 0I;
  #L40f520.  v0:= lcmp(v8, v12);
  #L40f524.  if v0 == 0 then goto L40f686;
  #L40f528.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L40f52c.  if v0 == 0 then goto L40f532;
  #L40f530.  return @kind void;
  #L40f532.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L40f536.  if v0 != 0 then goto L40f564;
  #L40f53a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f53e.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40f544.  v0:= temp @kind object;
  #L40f546.  if v0 == 0 then goto L40f564;
  #L40f54a.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L40f550.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f554.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40f55a.  v0:= temp @kind object;
  #L40f55c.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f562.  return @kind void;
  #L40f564.  v0:= 0I;
  #L40f566.  v6:= 0I;
  #L40f568.  if v6 >= v4 then goto L40f61e;
  #L40f56c.  v15:= v3[v6] @kind object;
  #L40f570.  v16:= v5[v6] @kind object;
  #L40f574.  if v16 != 0 then goto L40f618;
  #L40f578.  v10:= v15.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` @kind boolean;
  #L40f57c.  v11:= v15.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L40f580.  if v11 == 0 then goto L40f58e;
  #L40f584.  call temp:= `poll`(v11) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40f58a.  v11:= temp @kind object;
  #L40f58c.  goto L40f590;
  #L40f58e.  v11:= v14 @kind object;
  #L40f590.  if v11 != 0 then goto L40f598;
  #L40f594.  v15:= 1I;
  #L40f596.  goto L40f59a;
  #L40f598.  v15:= 0I;
  #L40f59a.  if v10 == 0 then goto L40f5d8;
  #L40f59e.  if v15 == 0 then goto L40f5d8;
  #L40f5a2.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L40f5a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f5ac.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40f5b2.  v0:= temp @kind object;
  #L40f5b4.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L40f5b8.  if v0 == 0 then goto L40f5d0;
  #L40f5bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f5c0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40f5c6.  v0:= temp @kind object;
  #L40f5c8.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f5ce.  goto L40f5d6;
  #L40f5d0.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40f5d6.  return @kind void;
  #L40f5d8.  if v15 != 0 then goto L40f616;
  #L40f5dc.  v5[v6]:= v11 @kind object;
  #L40f5e0.  goto L40f618;
  #L40f5e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40f5e4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40f5ea.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f5ee.  call temp:= `addThrowable`(v10, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40f5f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L40f5f8.  if v0 != 0 then goto L40f616;
  #L40f5fc.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L40f602.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f606.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40f60c.  v0:= temp @kind object;
  #L40f60e.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f614.  return @kind void;
  #L40f616.  v0:= 1I;
  #L40f618.  v6:= v6 + 1;
  #L40f61c.  goto L40f568;
  #L40f61e.  if v0 == 0 then goto L40f624;
  #L40f622.  goto L40f686;
  #L40f624.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L40f628.  call temp:= `clone`(v5) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L40f62e.  v6:= temp @kind object;
  #L40f630.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40f636.  v0:= temp @kind object;
  #L40f638.  v6:= "The zipper returned a null value" @kind object;
  #L40f63c.  call temp:= `requireNonNull`(v0, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40f642.  v0:= temp @kind object;
  #L40f644.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40f64a.  v10:= 1L;
  #L40f64e.  v12:= v12 + v10 @kind long;
  #L40f650.  call `fill`(v5, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L40f656.  goto L40f51e;
  #L40f65a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40f65c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40f662.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L40f668.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f66c.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40f672.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f676.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40f67c.  v0:= temp @kind object;
  #L40f67e.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f684.  return @kind void;
  #L40f686.  v0:= lcmp(v8, v12);
  #L40f68a.  if v0 != 0 then goto L40f780;
  #L40f68e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L40f692.  if v0 == 0 then goto L40f698;
  #L40f696.  return @kind void;
  #L40f698.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L40f69c.  if v0 != 0 then goto L40f6ca;
  #L40f6a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f6a4.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40f6aa.  v0:= temp @kind object;
  #L40f6ac.  if v0 == 0 then goto L40f6ca;
  #L40f6b0.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L40f6b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f6ba.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40f6c0.  v0:= temp @kind object;
  #L40f6c2.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f6c8.  return @kind void;
  #L40f6ca.  v6:= 0I;
  #L40f6cc.  if v6 >= v4 then goto L40f780;
  #L40f6d0.  v0:= v3[v6] @kind object;
  #L40f6d4.  v10:= v5[v6] @kind object;
  #L40f6d8.  if v10 != 0 then goto L40f77a;
  #L40f6dc.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` @kind boolean;
  #L40f6e0.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L40f6e4.  if v0 == 0 then goto L40f6f2;
  #L40f6e8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40f6ee.  v0:= temp @kind object;
  #L40f6f0.  goto L40f6f4;
  #L40f6f2.  v0:= v14 @kind object;
  #L40f6f4.  if v0 != 0 then goto L40f6fc;
  #L40f6f8.  v11:= 1I;
  #L40f6fa.  goto L40f6fe;
  #L40f6fc.  v11:= 0I;
  #L40f6fe.  if v10 == 0 then goto L40f73c;
  #L40f702.  if v11 == 0 then goto L40f73c;
  #L40f706.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L40f70c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f710.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40f716.  v0:= temp @kind object;
  #L40f718.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L40f71c.  if v0 == 0 then goto L40f734;
  #L40f720.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f724.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40f72a.  v0:= temp @kind object;
  #L40f72c.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f732.  goto L40f73a;
  #L40f734.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40f73a.  return @kind void;
  #L40f73c.  if v11 != 0 then goto L40f77a;
  #L40f740.  v5[v6]:= v0 @kind object;
  #L40f744.  goto L40f77a;
  #L40f746.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40f748.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40f74e.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f752.  call temp:= `addThrowable`(v10, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40f758.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L40f75c.  if v0 != 0 then goto L40f77a;
  #L40f760.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L40f766.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f76a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40f770.  v0:= temp @kind object;
  #L40f772.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f778.  return @kind void;
  #L40f77a.  v6:= v6 + 1;
  #L40f77e.  goto L40f6cc;
  #L40f780.  v10:= 0L;
  #L40f784.  v0:= lcmp(v12, v10);
  #L40f788.  if v0 == 0 then goto L40f7c2;
  #L40f78c.  v0:= length @variable v3;
  #L40f78e.  v6:= 0I;
  #L40f790.  if v6 >= v0 then goto L40f7a4;
  #L40f794.  v10:= v3[v6] @kind object;
  #L40f798.  call `request`(v10, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.request:(J)V` @kind virtual;
  #L40f79e.  v6:= v6 + 1;
  #L40f7a2.  goto L40f790;
  #L40f7a4.  v10:= 9223372036854775807L;
  #L40f7ae.  v0:= lcmp(v8, v10);
  #L40f7b2.  if v0 == 0 then goto L40f7c2;
  #L40f7b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f7ba.  v8:= -v12 @kind long;
  #L40f7bc.  call temp:= `addAndGet`(v0, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L40f7c2.  v0:= -v7 @kind int;
  #L40f7c4.  call temp:= `addAndGet`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.addAndGet:(I)I` @kind virtual;
  #L40f7ca.  v7:= temp;
  #L40f7cc.  if v7 != 0 then goto L40f50e;
  #L40f7d0.  return @kind void;
  catch `java.lang.Throwable` @[L40f578..L40f5e0] goto L40f5e2;
  catch `java.lang.Throwable` @[L40f624..L40f644] goto L40f65a;
  catch `java.lang.Throwable` @[L40f6dc..L40f744] goto L40f746;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.error:(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L40f808.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f80c.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40f812.  v0:= temp;
  #L40f814.  if v0 == 0 then goto L40f826;
  #L40f818.  v3:= 1I;
  #L40f81a.  v2.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L40f81e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L40f824.  goto L40f82c;
  #L40f826.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40f82c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f840.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40f846.  v0:= temp;
  #L40f848.  if v0 == 0 then goto L40f85c;
  #L40f84c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f850.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40f856.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L40f85c.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.subscribe:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40f870.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] @kind object;
  #L40f874.  v1:= 0I;
  #L40f876.  if v1 >= v6 then goto L40f8b0;
  #L40f87a.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L40f87e.  if v2 != 0 then goto L40f8b0;
  #L40f882.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L40f886.  if v2 != 0 then goto L40f89c;
  #L40f88a.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f88e.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40f894.  v2:= temp @kind object;
  #L40f896.  if v2 == 0 then goto L40f89c;
  #L40f89a.  goto L40f8b0;
  #L40f89c.  v2:= v5[v1] @kind object;
  #L40f8a0.  v3:= v0[v1] @kind object;
  #L40f8a4.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40f8aa.  v1:= v1 + 1;
  #L40f8ae.  goto L40f876;
  #L40f8b0.  return @kind void;
}
