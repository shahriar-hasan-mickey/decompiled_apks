record `io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.<init>:(II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L402a50.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L402a56.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int` := v1;
  #L402a5a.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @type ^`int` := v2;
  #L402a5e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L402a70.  v0:= 1I;
  #L402a72.  v1.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L402a76.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L402a88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @type ^`int`;
  #L402a8c.  v1.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int` := v0;
  #L402a90.  return @kind void;
}
procedure `void` `fastPath`() @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.fastPath:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4029c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int`;
  #L4029c8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @type ^`int`;
  #L4029cc.  if v0 != v1 then goto L4029d4;
  #L4029d0.  v0:= 1I;
  #L4029d2.  goto L4029d6;
  #L4029d4.  v0:= 0I;
  #L4029d6.  return v0;
}
procedure `java.lang.Integer` `poll`(`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.poll:()Ljava/lang/Integer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L402a00.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int`;
  #L402a04.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @type ^`int`;
  #L402a08.  if v0 != v1 then goto L402a10;
  #L402a0c.  v0:= 0I;
  #L402a0e.  return v0 @kind object;
  #L402a10.  v1:= v0 + 1;
  #L402a14.  v2.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int` := v1;
  #L402a18.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L402a1e.  v0:= temp @kind object;
  #L402a20.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L402a34.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.poll:()Ljava/lang/Integer;` @kind virtual;
  #L402a3a.  v0:= temp @kind object;
  #L402a3c.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402aa4.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L402aaa.  v0:= temp;
  #L402aac.  if v0 == 0 then goto L402ae4;
  #L402ab0.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L402ab6.  v0:= temp @kind wide;
  #L402ab8.  v2:= 0L;
  #L402abc.  v4:= lcmp(v0, v2);
  #L402ac0.  if v4 != 0 then goto L402ae4;
  #L402ac4.  v0:= 9223372036854775807L;
  #L402ace.  v2:= lcmp(v6, v0);
  #L402ad2.  if v2 != 0 then goto L402ade;
  #L402ad6.  call `fastPath`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.fastPath:()V` @kind virtual;
  #L402adc.  goto L402ae4;
  #L402ade.  call `slowPath`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.slowPath:(J)V` @kind virtual;
  #L402ae4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4029e8.  v1:= v1 ^& 1;
  #L4029ec.  return v1;
}
procedure `void` `slowPath`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.slowPath:(J)V` @AccessFlag ABSTRACT {

  # return;
}
