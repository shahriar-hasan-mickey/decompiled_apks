record `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.bufferSize` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.firstRequest` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.once` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40c5fc.  v0:= 1I;
  #L40c5fe.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L40c604.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L40c608.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @type ^`long` := v3 @kind wide;
  #L40c60c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @type ^`long` := v5 @kind wide;
  #L40c610.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40c614.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40c61a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L40c61e.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40c622.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40c628.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L40c62c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.bufferSize` @type ^`int` := v7;
  #L40c630.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40c644.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40c648.  v1:= 0I;
  #L40c64a.  v2:= 1I;
  #L40c64c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40c652.  v0:= temp;
  #L40c654.  if v0 == 0 then goto L40c65e;
  #L40c658.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.run:()V` @kind virtual;
  #L40c65e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c670.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40c674.  if v0 == 0 then goto L40c684;
  #L40c678.  v1:= 0I;
  #L40c67a.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L40c67e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Processor;.onComplete:()V` @kind interface;
  #L40c684.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c688.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40c68e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c6a0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40c6a4.  if v0 == 0 then goto L40c6b4;
  #L40c6a8.  v1:= 0I;
  #L40c6aa.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L40c6ae.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Processor;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c6b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c6b8.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c6be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40c6d0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.index` @type ^`long` @kind wide;
  #L40c6d4.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40c6d8.  v3:= 0L;
  #L40c6dc.  v5:= lcmp(v0, v3);
  #L40c6e0.  if v5 != 0 then goto L40c704;
  #L40c6e4.  call temp:= `getAndIncrement`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40c6ea.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.bufferSize` @type ^`int`;
  #L40c6ee.  call temp:= `create`(v2, v7) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40c6f4.  v2:= temp @kind object;
  #L40c6f6.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L40c6fa.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c6fe.  call `onNext`(v5, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40c704.  v5:= 1L;
  #L40c708.  v0:= v0 + v5 @kind long;
  #L40c70a.  if v2 == 0 then goto L40c714;
  #L40c70e.  call `onNext`(v2, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40c714.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @type ^`long` @kind wide;
  #L40c718.  v8:= lcmp(v0, v5);
  #L40c71c.  if v8 != 0 then goto L40c72c;
  #L40c720.  v8:= 0I;
  #L40c722.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40c726.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40c72c.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @type ^`long` @kind wide;
  #L40c730.  v8:= lcmp(v0, v5);
  #L40c734.  if v8 != 0 then goto L40c73e;
  #L40c738.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.index` @type ^`long` := v3 @kind wide;
  #L40c73c.  goto L40c742;
  #L40c73e.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.index` @type ^`long` := v0 @kind wide;
  #L40c742.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c754.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c758.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40c75e.  v0:= temp;
  #L40c760.  if v0 == 0 then goto L40c772;
  #L40c764.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40c768.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c76c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40c772.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40c784.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40c78a.  v0:= temp;
  #L40c78c.  if v0 == 0 then goto L40c802;
  #L40c790.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40c794.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L40c79a.  v0:= temp;
  #L40c79c.  if v0 != 0 then goto L40c7ec;
  #L40c7a0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40c7a4.  v1:= 0I;
  #L40c7a6.  v2:= 1I;
  #L40c7a8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40c7ae.  v0:= temp;
  #L40c7b0.  if v0 == 0 then goto L40c7ec;
  #L40c7b4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @type ^`long` @kind wide;
  #L40c7b8.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40c7be.  v0:= temp @kind wide;
  #L40c7c0.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @type ^`long` @kind wide;
  #L40c7c4.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @type ^`long` @kind wide;
  #L40c7c8.  v2:= v2 - v4 @kind long;
  #L40c7ca.  v4:= 1L;
  #L40c7ce.  v7:= v7 - v4 @kind long;
  #L40c7d0.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40c7d6.  v7:= temp @kind wide;
  #L40c7d8.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L40c7de.  v7:= temp @kind wide;
  #L40c7e0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c7e4.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40c7ea.  goto L40c802;
  #L40c7ec.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @type ^`long` @kind wide;
  #L40c7f0.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40c7f6.  v7:= temp @kind wide;
  #L40c7f8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c7fc.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40c802.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c814.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.decrementAndGet:()I` @kind virtual;
  #L40c81a.  v0:= temp;
  #L40c81c.  if v0 != 0 then goto L40c82a;
  #L40c820.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c824.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40c82a.  return @kind void;
}
