record `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fee58.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3fee5e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable.other` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L3fee62.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3fee74.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber`;
  #L3fee78.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3fee7e.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fee84.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3fee88.  call `subscribe`(v2, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3fee8e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable.other` @type ^`io.reactivex.CompletableSource` @kind object;
  #L3fee92.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver` @kind object;
  #L3fee96.  call `subscribe`(v2, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3fee9c.  return @kind void;
}
