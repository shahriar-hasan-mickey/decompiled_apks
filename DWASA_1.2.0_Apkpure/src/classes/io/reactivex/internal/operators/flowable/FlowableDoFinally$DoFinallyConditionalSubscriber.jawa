record `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.onFinally` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.qs` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.syncFused` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f6018.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L3f601e.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L3f6022.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.onFinally` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L3f6026.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6038.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f603c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f6042.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.runFinally:()V` @kind virtual;
  #L3f6048.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f605c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f6060.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.clear:()V` @kind interface;
  #L3f6066.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5f68.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f5f6c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.isEmpty:()Z` @kind interface;
  #L3f5f72.  v0:= temp;
  #L3f5f74.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6078.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f607c.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L3f6082.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.runFinally:()V` @kind virtual;
  #L3f6088.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f609c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f60a0.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f60a6.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.runFinally:()V` @kind virtual;
  #L3f60ac.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f60c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f60c4.  call `onNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f60ca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f60dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f60e0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f60e6.  v0:= temp;
  #L3f60e8.  if v0 == 0 then goto L3f610a;
  #L3f60ec.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3f60f0.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L3f60f4.  if v0 == 0 then goto L3f6100;
  #L3f60f8.  v2:= (`io.reactivex.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L3f60fc.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L3f6100.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f6104.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f610a.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5fe8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f5fec.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f5ff2.  v0:= temp @kind object;
  #L3f5ff4.  if v0 != 0 then goto L3f6006;
  #L3f5ff8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.syncFused` @type ^`boolean` @kind boolean;
  #L3f5ffc.  if v1 == 0 then goto L3f6006;
  #L3f6000.  call `runFinally`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.runFinally:()V` @kind virtual;
  #L3f6006.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f611c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f6120.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f6126.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f5fa8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f5fac.  v1:= 0I;
  #L3f5fae.  if v0 == 0 then goto L3f5fd6;
  #L3f5fb2.  v2:= v4 ^& 4;
  #L3f5fb6.  if v2 != 0 then goto L3f5fd6;
  #L3f5fba.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L3f5fc0.  v4:= temp;
  #L3f5fc2.  if v4 == 0 then goto L3f5fd4;
  #L3f5fc6.  v0:= 1I;
  #L3f5fc8.  if v4 != v0 then goto L3f5fce;
  #L3f5fcc.  goto L3f5fd0;
  #L3f5fce.  v0:= 0I;
  #L3f5fd0.  v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.syncFused` @type ^`boolean` := v0 @kind boolean;
  #L3f5fd4.  return v4;
  #L3f5fd6.  return v1;
}
procedure `void` `runFinally`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.runFinally:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f6138.  v0:= 0I;
  #L3f613a.  v1:= 1I;
  #L3f613c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.compareAndSet:(II)Z` @kind virtual;
  #L3f6142.  v0:= temp;
  #L3f6144.  if v0 == 0 then goto L3f6162;
  #L3f6148.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.onFinally` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f614c.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L3f6152.  goto L3f6162;
  #L3f6154.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f6156.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f615c.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f6162.  return @kind void;
  catch `java.lang.Throwable` @[L3f6148..L3f6152] goto L3f6154;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$DoFinallyConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5f88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f5f8c.  call temp:= `tryOnNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3f5f92.  v2:= temp;
  #L3f5f94.  return v2;
}
