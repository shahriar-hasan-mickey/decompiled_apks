record `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.comparer` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.keySelector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f5c64.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f5c6a.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f5c6e.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.comparer` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L3f5c72.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f5c84.  v0:= instanceof @variable v5 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L3f5c88.  if v0 == 0 then goto L3f5cae;
  #L3f5c8c.  v5:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v5 @kind object;
  #L3f5c90.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f5c94.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber`;
  #L3f5c98.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f5c9c.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L3f5ca0.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3f5ca6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5cac.  goto L3f5cca;
  #L3f5cae.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f5cb2.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber`;
  #L3f5cb6.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f5cba.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L3f5cbe.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3f5cc4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5cca.  return @kind void;
}
