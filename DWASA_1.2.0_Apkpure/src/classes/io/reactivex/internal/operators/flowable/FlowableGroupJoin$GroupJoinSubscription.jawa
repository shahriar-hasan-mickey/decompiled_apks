record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.resultSelector` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_VALUE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fbf68.  v0:= 1I;
  #L3fbf6a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fbf70.  v0:= temp @kind object;
  #L3fbf72.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L3fbf76.  v0:= 2I;
  #L3fbf78.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fbf7e.  v0:= temp @kind object;
  #L3fbf80.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L3fbf84.  v0:= 3I;
  #L3fbf86.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fbf8c.  v0:= temp @kind object;
  #L3fbf8e.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L3fbf92.  v0:= 4I;
  #L3fbf94.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fbf9a.  v0:= temp @kind object;
  #L3fbf9c.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L3fbfa0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3fbfb4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3fbfba.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L3fbfbe.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3fbfc2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3fbfc8.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L3fbfcc.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L3fbfd0.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L3fbfd6.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L3fbfda.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3fbfde.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3fbfe4.  v0:= temp;
  #L3fbfe6.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3fbfec.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L3fbff0.  v2:= new `java.util.LinkedHashMap`;
  #L3fbff4.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L3fbffa.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` := v2 @kind object;
  #L3fbffe.  v2:= new `java.util.LinkedHashMap`;
  #L3fc002.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L3fc008.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` := v2 @kind object;
  #L3fc00c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3fc010.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3fc016.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3fc01a.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftEnd` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L3fc01e.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightEnd` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L3fc022.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.resultSelector` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L3fc026.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3fc02a.  v3:= 2I;
  #L3fc02c.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L3fc032.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L3fc036.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc048.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fc04c.  if v0 == 0 then goto L3fc052;
  #L3fc050.  return @kind void;
  #L3fc052.  v0:= 1I;
  #L3fc054.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3fc058.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L3fc05e.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.getAndIncrement:()I` @kind virtual;
  #L3fc064.  v0:= temp;
  #L3fc066.  if v0 != 0 then goto L3fc074;
  #L3fc06a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fc06e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fc074.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;

  #L3fc088.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3fc08c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3fc092.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3fc0a4.  call temp:= `getAndIncrement`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.getAndIncrement:()I` @kind virtual;
  #L3fc0aa.  v0:= temp;
  #L3fc0ac.  if v0 == 0 then goto L3fc0b2;
  #L3fc0b0.  return @kind void;
  #L3fc0b2.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fc0b6.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fc0ba.  v2:= 1I;
  #L3fc0bc.  v3:= 1I;
  #L3fc0be.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fc0c2.  if v4 == 0 then goto L3fc0ce;
  #L3fc0c6.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fc0cc.  return @kind void;
  #L3fc0ce.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fc0d2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fc0d8.  v4:= temp @kind object;
  #L3fc0da.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L3fc0de.  if v4 == 0 then goto L3fc0f6;
  #L3fc0e2.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fc0e8.  call `cancelAll`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L3fc0ee.  call `errorAll`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3fc0f4.  return @kind void;
  #L3fc0f6.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3fc0fa.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3fc100.  v4:= temp;
  #L3fc102.  v5:= 0I;
  #L3fc104.  if v4 != 0 then goto L3fc10c;
  #L3fc108.  v4:= 1I;
  #L3fc10a.  goto L3fc10e;
  #L3fc10c.  v4:= 0I;
  #L3fc10e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3fc114.  v6:= temp @kind object;
  #L3fc116.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L3fc11a.  if v6 != 0 then goto L3fc122;
  #L3fc11e.  v7:= 1I;
  #L3fc120.  goto L3fc124;
  #L3fc122.  v7:= 0I;
  #L3fc124.  if v4 == 0 then goto L3fc186;
  #L3fc128.  if v7 == 0 then goto L3fc186;
  #L3fc12c.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L3fc130.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3fc136.  v0:= temp @kind object;
  #L3fc138.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3fc13e.  v0:= temp @kind object;
  #L3fc140.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fc146.  v2:= temp;
  #L3fc148.  if v2 == 0 then goto L3fc160;
  #L3fc14c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3fc152.  v2:= temp @kind object;
  #L3fc154.  v2:= (`io.reactivex.processors.UnicastProcessor`) v2 @kind object;
  #L3fc158.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L3fc15e.  goto L3fc140;
  #L3fc160.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L3fc164.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3fc16a.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L3fc16e.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3fc174.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3fc178.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3fc17e.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fc184.  return @kind void;
  #L3fc186.  if v7 == 0 then goto L3fc19a;
  #L3fc18a.  v3:= -v3 @kind int;
  #L3fc18c.  call temp:= `addAndGet`(v11, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.addAndGet:(I)I` @kind virtual;
  #L3fc192.  v3:= temp;
  #L3fc194.  if v3 != 0 then goto L3fc0be;
  #L3fc198.  return @kind void;
  #L3fc19a.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3fc1a0.  v4:= temp @kind object;
  #L3fc1a2.  v7:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L3fc1a6.  if v6 != v7 then goto L3fc2cc;
  #L3fc1aa.  call temp:= `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L3fc1b0.  v5:= temp @kind object;
  #L3fc1b2.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftIndex` @type ^`int`;
  #L3fc1b6.  v7:= v6 + 1;
  #L3fc1ba.  v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftIndex` @type ^`int` := v7;
  #L3fc1be.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L3fc1c2.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fc1c8.  v8:= temp @kind object;
  #L3fc1ca.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fc1d0.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftEnd` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fc1d4.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fc1da.  v7:= temp @kind object;
  #L3fc1dc.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L3fc1e0.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fc1e6.  v7:= temp @kind object;
  #L3fc1e8.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L3fc1ec.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`;
  #L3fc1f0.  call `<init>`(v8, v11, v2, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$JoinSupport;ZI)V` @kind direct;
  #L3fc1f6.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3fc1fa.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3fc200.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3fc206.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fc20a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fc210.  v6:= temp @kind object;
  #L3fc212.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L3fc216.  if v6 == 0 then goto L3fc22e;
  #L3fc21a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fc220.  call `cancelAll`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L3fc226.  call `errorAll`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3fc22c.  return @kind void;
  #L3fc22e.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.resultSelector` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L3fc232.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fc238.  v4:= temp @kind object;
  #L3fc23a.  v6:= "The resultSelector returned a null value" @kind object;
  #L3fc23e.  call temp:= `requireNonNull`(v4, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fc244.  v4:= temp @kind object;
  #L3fc246.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fc24a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3fc250.  v6:= temp @kind wide;
  #L3fc252.  v8:= 0L;
  #L3fc256.  v10:= lcmp(v6, v8);
  #L3fc25a.  if v10 == 0 then goto L3fc2a2;
  #L3fc25e.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fc264.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fc268.  v6:= 1L;
  #L3fc26c.  call temp:= `produced`(v4, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fc272.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L3fc276.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3fc27c.  v4:= temp @kind object;
  #L3fc27e.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3fc284.  v4:= temp @kind object;
  #L3fc286.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fc28c.  v6:= temp;
  #L3fc28e.  if v6 == 0 then goto L3fc0be;
  #L3fc292.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3fc298.  v6:= temp @kind object;
  #L3fc29a.  call `onNext`(v5, v6) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L3fc2a0.  goto L3fc286;
  #L3fc2a2.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3fc2a6.  v3:= "Could not emit value due to lack of requests" @kind object;
  #L3fc2aa.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fc2b0.  call `fail`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L3fc2b6.  return @kind void;
  #L3fc2b8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fc2ba.  call `fail`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L3fc2c0.  return @kind void;
  #L3fc2c2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fc2c4.  call `fail`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L3fc2ca.  return @kind void;
  #L3fc2cc.  v7:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L3fc2d0.  if v6 != v7 then goto L3fc38e;
  #L3fc2d4.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightIndex` @type ^`int`;
  #L3fc2d8.  v7:= v6 + 1;
  #L3fc2dc.  v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightIndex` @type ^`int` := v7;
  #L3fc2e0.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L3fc2e4.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fc2ea.  v8:= temp @kind object;
  #L3fc2ec.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fc2f2.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightEnd` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fc2f6.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fc2fc.  v7:= temp @kind object;
  #L3fc2fe.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L3fc302.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fc308.  v7:= temp @kind object;
  #L3fc30a.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L3fc30e.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`;
  #L3fc312.  call `<init>`(v8, v11, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$JoinSupport;ZI)V` @kind direct;
  #L3fc318.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3fc31c.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3fc322.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3fc328.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fc32c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fc332.  v5:= temp @kind object;
  #L3fc334.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L3fc338.  if v5 == 0 then goto L3fc350;
  #L3fc33c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fc342.  call `cancelAll`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L3fc348.  call `errorAll`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3fc34e.  return @kind void;
  #L3fc350.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L3fc354.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3fc35a.  v5:= temp @kind object;
  #L3fc35c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3fc362.  v5:= temp @kind object;
  #L3fc364.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fc36a.  v6:= temp;
  #L3fc36c.  if v6 == 0 then goto L3fc0be;
  #L3fc370.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3fc376.  v6:= temp @kind object;
  #L3fc378.  v6:= (`io.reactivex.processors.UnicastProcessor`) v6 @kind object;
  #L3fc37c.  call `onNext`(v6, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L3fc382.  goto L3fc364;
  #L3fc384.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fc386.  call `fail`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L3fc38c.  return @kind void;
  #L3fc38e.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L3fc392.  if v6 != v5 then goto L3fc3ce;
  #L3fc396.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`) v4 @kind object;
  #L3fc39a.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L3fc39e.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.index` @type ^`int`;
  #L3fc3a2.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fc3a8.  v6:= temp @kind object;
  #L3fc3aa.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fc3b0.  v5:= temp @kind object;
  #L3fc3b2.  v5:= (`io.reactivex.processors.UnicastProcessor`) v5 @kind object;
  #L3fc3b6.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3fc3ba.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3fc3c0.  if v5 == 0 then goto L3fc0be;
  #L3fc3c4.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L3fc3ca.  goto L3fc0be;
  #L3fc3ce.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L3fc3d2.  if v6 != v5 then goto L3fc0be;
  #L3fc3d6.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`) v4 @kind object;
  #L3fc3da.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L3fc3de.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.index` @type ^`int`;
  #L3fc3e2.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fc3e8.  v6:= temp @kind object;
  #L3fc3ea.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fc3f0.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3fc3f4.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3fc3fa.  goto L3fc0be;
  catch `java.lang.Throwable` @[L3fc1d0..L3fc1ec] goto L3fc2c2;
  catch `java.lang.Throwable` @[L3fc22e..L3fc246] goto L3fc2b8;
  catch `java.lang.Throwable` @[L3fc2f2..L3fc30e] goto L3fc384;
}
procedure `void` `errorAll`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3fc434.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fc438.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3fc43e.  v0:= temp @kind object;
  #L3fc440.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L3fc444.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3fc44a.  v1:= temp @kind object;
  #L3fc44c.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3fc452.  v1:= temp @kind object;
  #L3fc454.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fc45a.  v2:= temp;
  #L3fc45c.  if v2 == 0 then goto L3fc474;
  #L3fc460.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3fc466.  v2:= temp @kind object;
  #L3fc468.  v2:= (`io.reactivex.processors.UnicastProcessor`) v2 @kind object;
  #L3fc46c.  call `onError`(v2, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fc472.  goto L3fc454;
  #L3fc474.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L3fc478.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3fc47e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L3fc482.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3fc488.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fc48e.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L3fc4a0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fc4a6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fc4aa.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3fc4b0.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L3fc4b6.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L3fc4bc.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3fc4c2.  return @kind void;
}
procedure `void` `innerClose`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerClose:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc4d4.  @monitorenter v1
  #L3fc4d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fc4da.  if v2 == 0 then goto L3fc4e4;
  #L3fc4de.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L3fc4e2.  goto L3fc4e8;
  #L3fc4e4.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L3fc4e8.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3fc4ee.  @monitorexit v1
  #L3fc4f0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L3fc4f6.  return @kind void;
  #L3fc4f8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fc4fa.  @monitorexit v1
  #L3fc4fc.  throw v2;
  catch `java.lang.Throwable` @[L3fc4d6..L3fc4f0] goto L3fc4f8;
  catch `java.lang.Throwable` @[L3fc4fa..L3fc4fc] goto L3fc4f8;
}
procedure `void` `innerCloseError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerCloseError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc524.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fc528.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3fc52e.  v0:= temp;
  #L3fc530.  if v0 == 0 then goto L3fc53c;
  #L3fc534.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L3fc53a.  goto L3fc542;
  #L3fc53c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3fc542.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc554.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3fc558.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3fc55e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3fc562.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3fc568.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L3fc56e.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc580.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fc584.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3fc58a.  v0:= temp;
  #L3fc58c.  if v0 == 0 then goto L3fc5a2;
  #L3fc590.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3fc594.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3fc59a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L3fc5a0.  goto L3fc5a8;
  #L3fc5a2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3fc5a8.  return @kind void;
}
procedure `void` `innerValue`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerValue:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc5bc.  @monitorenter v1
  #L3fc5be.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fc5c2.  if v2 == 0 then goto L3fc5cc;
  #L3fc5c6.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L3fc5ca.  goto L3fc5d0;
  #L3fc5cc.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L3fc5d0.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3fc5d6.  @monitorexit v1
  #L3fc5d8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L3fc5de.  return @kind void;
  #L3fc5e0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fc5e2.  @monitorexit v1
  #L3fc5e4.  throw v2;
  catch `java.lang.Throwable` @[L3fc5be..L3fc5d8] goto L3fc5e0;
  catch `java.lang.Throwable` @[L3fc5e2..L3fc5e4] goto L3fc5e0;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc60c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3fc612.  v0:= temp;
  #L3fc614.  if v0 == 0 then goto L3fc622;
  #L3fc618.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fc61c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fc622.  return @kind void;
}
