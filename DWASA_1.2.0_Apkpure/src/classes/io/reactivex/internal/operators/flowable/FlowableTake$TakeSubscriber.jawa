record `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.limit` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40918c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L409192.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L409196.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.limit` @type ^`long` := v2 @kind wide;
  #L40919a.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L40919e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4091b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4091b4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4091ba.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4091cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` @kind boolean;
  #L4091d0.  if v0 != 0 then goto L4091e4;
  #L4091d4.  v0:= 1I;
  #L4091d6.  v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4091da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4091de.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4091e4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4091f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` @kind boolean;
  #L4091fc.  if v0 != 0 then goto L40921c;
  #L409200.  v0:= 1I;
  #L409202.  v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L409206.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40920a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409210.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409214.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40921a.  goto L409222;
  #L40921c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L409222.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L409234.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` @kind boolean;
  #L409238.  if v0 != 0 then goto L409288;
  #L40923c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @type ^`long` @kind wide;
  #L409240.  v2:= 1L;
  #L409244.  v2:= v0 - v2 @kind long;
  #L409248.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L40924c.  v2:= 0L;
  #L409250.  v4:= lcmp(v0, v2);
  #L409254.  if v4 <= 0 then goto L409288;
  #L409258.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @type ^`long` @kind wide;
  #L40925c.  v4:= lcmp(v0, v2);
  #L409260.  if v4 != 0 then goto L409268;
  #L409264.  v0:= 1I;
  #L409266.  goto L40926a;
  #L409268.  v0:= 0I;
  #L40926a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40926e.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L409274.  if v0 == 0 then goto L409288;
  #L409278.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40927c.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409282.  call `onComplete`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onComplete:()V` @kind virtual;
  #L409288.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40929c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4092a0.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4092a6.  v0:= temp;
  #L4092a8.  if v0 == 0 then goto L4092e2;
  #L4092ac.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L4092b0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.limit` @type ^`long` @kind wide;
  #L4092b4.  v2:= 0L;
  #L4092b8.  v4:= lcmp(v0, v2);
  #L4092bc.  if v4 != 0 then goto L4092d8;
  #L4092c0.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4092c6.  v6:= 1I;
  #L4092c8.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` := v6 @kind boolean;
  #L4092cc.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4092d0.  call `complete`(v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4092d6.  goto L4092e2;
  #L4092d8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4092dc.  call `onSubscribe`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4092e2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4092f4.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4092fa.  v0:= temp;
  #L4092fc.  if v0 != 0 then goto L409302;
  #L409300.  return @kind void;
  #L409302.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.get:()Z` @kind virtual;
  #L409308.  v0:= temp;
  #L40930a.  if v0 != 0 then goto L409340;
  #L40930e.  v0:= 0I;
  #L409310.  v1:= 1I;
  #L409312.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.compareAndSet:(ZZ)Z` @kind virtual;
  #L409318.  v0:= temp;
  #L40931a.  if v0 == 0 then goto L409340;
  #L40931e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.limit` @type ^`long` @kind wide;
  #L409322.  v2:= lcmp(v4, v0);
  #L409326.  if v2 < 0 then goto L409340;
  #L40932a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40932e.  v0:= 9223372036854775807L;
  #L409338.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40933e.  return @kind void;
  #L409340.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409344.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40934a.  return @kind void;
}
