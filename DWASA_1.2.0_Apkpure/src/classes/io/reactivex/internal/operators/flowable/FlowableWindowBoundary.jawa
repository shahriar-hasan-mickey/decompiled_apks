record `io.reactivex.internal.operators.flowable.FlowableWindowBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary.capacityHint` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40d9d4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40d9da.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.other` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L40d9de.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.capacityHint` @type ^`int` := v3;
  #L40d9e2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L40d9f4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber`;
  #L40d9f8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.capacityHint` @type ^`int`;
  #L40d9fc.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @kind direct;
  #L40da02.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40da08.  call `innerNext`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerNext:()V` @kind virtual;
  #L40da0e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.other` @type ^`org.reactivestreams.Publisher` @kind object;
  #L40da12.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` @kind object;
  #L40da16.  call `subscribe`(v3, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40da1c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40da20.  call `subscribe`(v3, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40da26.  return @kind void;
}
