record `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` @kind class @AccessFlag FINAL extends `io.reactivex.Flowable` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.limit` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.queue` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.sourceMode` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.upstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.wip` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L401fdc.  v0:= 0I;
  #L401fde.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[v0];
  #L401fe2.  `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] := v1 @kind object;
  #L401fe6.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[v0];
  #L401fea.  `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] := v0 @kind object;
  #L401fee.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L402000.  call `<init>`(v1) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L402006.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.prefetch` @type ^`int` := v2;
  #L40200a.  v0:= v2 ^> 2;
  #L40200e.  v2:= v2 - v0 @kind int;
  #L402010.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.limit` @type ^`int` := v2;
  #L402014.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.delayError` @type ^`boolean` := v3 @kind boolean;
  #L402018.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40201c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L402022.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L402026.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40202a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L402030.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L402034.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L402038.  v3:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] @kind object;
  #L40203c.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L402042.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L402046.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.add:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L401f5c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L401f60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L401f66.  v0:= temp @kind object;
  #L401f68.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[]) v0 @kind object;
  #L401f6c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] @kind object;
  #L401f70.  v2:= 0I;
  #L401f72.  if v0 != v1 then goto L401f78;
  #L401f76.  return v2;
  #L401f78.  v1:= length @variable v0;
  #L401f7a.  v3:= v1 + 1;
  #L401f7e.  v3:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[v3];
  #L401f82.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L401f88.  v3[v1]:= v5 @kind object;
  #L401f8c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L401f90.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L401f96.  v0:= temp;
  #L401f98.  if v0 == 0 then goto L401f5c;
  #L401f9c.  v5:= 1I;
  #L401f9e.  return v5;
}
procedure `void` `completeAll`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.completeAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L402058.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40205c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] @kind object;
  #L402060.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L402066.  v0:= temp @kind object;
  #L402068.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[]) v0 @kind object;
  #L40206c.  v1:= length @variable v0;
  #L40206e.  v2:= 0I;
  #L402070.  if v2 >= v1 then goto L40209c;
  #L402074.  v3:= v0[v2] @kind object;
  #L402078.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.get:()J` @kind virtual;
  #L40207e.  v4:= temp @kind wide;
  #L402080.  v6:= -9223372036854775808L;
  #L402084.  v8:= lcmp(v4, v6);
  #L402088.  if v8 == 0 then goto L402096;
  #L40208c.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402090.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L402096.  v2:= v2 + 1;
  #L40209a.  goto L402070;
  #L40209c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4020b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4020b4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4020ba.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4020be.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4020c4.  v0:= temp;
  #L4020c6.  if v0 != 0 then goto L4020d8;
  #L4020ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4020ce.  if v0 == 0 then goto L4020d8;
  #L4020d2.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4020d8.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v24 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L4020ec.  v1:= v24 @kind object;
  #L4020f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4020f4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4020fa.  v0:= temp;
  #L4020fc.  if v0 == 0 then goto L402102;
  #L402100.  return @kind void;
  #L402102.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L402106.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.consumed` @type ^`int`;
  #L40210a.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.limit` @type ^`int`;
  #L40210e.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.sourceMode` @type ^`int`;
  #L402112.  v6:= 1I;
  #L402114.  if v4 == v6 then goto L40211c;
  #L402118.  v4:= 1I;
  #L40211a.  goto L40211e;
  #L40211c.  v4:= 0I;
  #L40211e.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L402122.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L402128.  v8:= temp @kind object;
  #L40212a.  v8:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[]) v8 @kind object;
  #L40212e.  v9:= v2;
  #L402130.  v2:= 1I;
  #L402132.  v10:= length @variable v8;
  #L402134.  if v0 == 0 then goto L402344;
  #L402138.  if v10 == 0 then goto L402344;
  #L40213c.  v11:= length @variable v8;
  #L40213e.  v12:= 9223372036854775807L;
  #L402148.  v14:= v10;
  #L40214a.  v15:= v12 @kind wide;
  #L40214c.  v10:= 0I;
  #L40214e.  v17:= -9223372036854775808L;
  #L402152.  if v10 >= v11 then goto L402194;
  #L402156.  v5:= v8[v10] @kind object;
  #L40215a.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.get:()J` @kind virtual;
  #L402160.  v19:= temp @kind wide;
  #L402162.  v21:= v7 @kind object;
  #L402166.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.emitted` @type ^`long` @kind wide;
  #L40216a.  v19:= v19 - v6 @kind long;
  #L40216e.  v5:= lcmp(v19, v17);
  #L402172.  if v5 == 0 then goto L402184;
  #L402176.  v5:= lcmp(v15, v19);
  #L40217a.  if v5 <= 0 then goto L402188;
  #L40217e.  v15:= v19 @kind wide;
  #L402182.  goto L402188;
  #L402184.  v14:= v14 + -1;
  #L402188.  v10:= v10 + 1;
  #L40218c.  v7:= v21 @kind object;
  #L402190.  v6:= 1I;
  #L402192.  goto L40214e;
  #L402194.  v21:= v7 @kind object;
  #L402198.  v5:= 0L;
  #L40219c.  if v14 != 0 then goto L4021a2;
  #L4021a0.  v15:= v5 @kind wide;
  #L4021a2.  v7:= lcmp(v15, v5);
  #L4021a6.  if v7 == 0 then goto L4022e0;
  #L4021aa.  call temp:= `isDisposed`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.isDisposed:()Z` @kind virtual;
  #L4021b0.  v7:= temp;
  #L4021b2.  if v7 == 0 then goto L4021be;
  #L4021b6.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4021bc.  return @kind void;
  #L4021be.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @type ^`boolean` @kind boolean;
  #L4021c2.  if v7 == 0 then goto L4021de;
  #L4021c6.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.delayError` @type ^`boolean` @kind boolean;
  #L4021ca.  if v10 != 0 then goto L4021de;
  #L4021ce.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L4021d2.  if v10 == 0 then goto L4021de;
  #L4021d6.  call `errorAll`(v1, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.errorAll:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4021dc.  return @kind void;
  #L4021de.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4021e4.  v10:= temp @kind object;
  #L4021e6.  if v10 != 0 then goto L4021ee;
  #L4021ea.  v11:= 1I;
  #L4021ec.  goto L4021f0;
  #L4021ee.  v11:= 0I;
  #L4021f0.  if v7 == 0 then goto L402210;
  #L4021f4.  if v11 == 0 then goto L402210;
  #L4021f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L4021fc.  if v0 == 0 then goto L402208;
  #L402200.  call `errorAll`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.errorAll:(Ljava/lang/Throwable;)V` @kind virtual;
  #L402206.  goto L40220e;
  #L402208.  call `completeAll`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.completeAll:()V` @kind virtual;
  #L40220e.  return @kind void;
  #L402210.  if v11 == 0 then goto L402216;
  #L402214.  goto L4022e0;
  #L402216.  v7:= length @variable v8;
  #L402218.  v11:= 0I;
  #L40221a.  v14:= 0I;
  #L40221c.  v19:= 1L;
  #L402220.  if v11 >= v7 then goto L40226e;
  #L402224.  v5:= v8[v11] @kind object;
  #L402228.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.get:()J` @kind virtual;
  #L40222e.  v22:= temp @kind wide;
  #L402230.  v6:= lcmp(v22, v17);
  #L402234.  if v6 == 0 then goto L402258;
  #L402238.  v6:= lcmp(v22, v12);
  #L40223c.  if v6 == 0 then goto L40224c;
  #L402240.  v12:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.emitted` @type ^`long` @kind wide;
  #L402244.  v12:= v12 + v19 @kind long;
  #L402248.  v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.emitted` @type ^`long` := v12 @kind wide;
  #L40224c.  v5:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402250.  call `onNext`(v5, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L402256.  goto L40225a;
  #L402258.  v14:= 1I;
  #L40225a.  v11:= v11 + 1;
  #L40225e.  v5:= 0L;
  #L402262.  v12:= 9223372036854775807L;
  #L40226c.  goto L40221c;
  #L40226e.  v15:= v15 - v19 @kind long;
  #L402272.  if v4 == 0 then goto L402298;
  #L402276.  v9:= v9 + 1;
  #L40227a.  if v9 != v3 then goto L402298;
  #L40227e.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L402282.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L402288.  v5:= temp @kind object;
  #L40228a.  v5:= (`org.reactivestreams.Subscription`) v5 @kind object;
  #L40228e.  v6:= (`long`) v3 @kind i2l;
  #L402290.  call `request`(v5, v6) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L402296.  v9:= 0I;
  #L402298.  call temp:= `get`(v21) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40229e.  v5:= temp @kind object;
  #L4022a0.  v5:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[]) v5 @kind object;
  #L4022a4.  if v14 != 0 then goto L4022c0;
  #L4022a8.  if v5 == v8 then goto L4022ae;
  #L4022ac.  goto L4022c0;
  #L4022ae.  v5:= 0L;
  #L4022b2.  v12:= 9223372036854775807L;
  #L4022bc.  goto L4021a2;
  #L4022c0.  v8:= v5 @kind object;
  #L4022c2.  goto L402376;
  #L4022c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4022c6.  v2:= v0 @kind object;
  #L4022c8.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4022ce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4022d2.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4022d8.  call `errorAll`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.errorAll:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4022de.  return @kind void;
  #L4022e0.  v7:= lcmp(v15, v5);
  #L4022e4.  if v7 != 0 then goto L402348;
  #L4022e8.  call temp:= `isDisposed`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.isDisposed:()Z` @kind virtual;
  #L4022ee.  v5:= temp;
  #L4022f0.  if v5 == 0 then goto L4022fc;
  #L4022f4.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4022fa.  return @kind void;
  #L4022fc.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @type ^`boolean` @kind boolean;
  #L402300.  if v5 == 0 then goto L40231c;
  #L402304.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.delayError` @type ^`boolean` @kind boolean;
  #L402308.  if v6 != 0 then goto L40231c;
  #L40230c.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L402310.  if v6 == 0 then goto L40231c;
  #L402314.  call `errorAll`(v1, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.errorAll:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40231a.  return @kind void;
  #L40231c.  if v5 == 0 then goto L402348;
  #L402320.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L402326.  v5:= temp;
  #L402328.  if v5 == 0 then goto L402348;
  #L40232c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L402330.  if v0 == 0 then goto L40233c;
  #L402334.  call `errorAll`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.errorAll:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40233a.  goto L402342;
  #L40233c.  call `completeAll`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.completeAll:()V` @kind virtual;
  #L402342.  return @kind void;
  #L402344.  v21:= v7 @kind object;
  #L402348.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.consumed` @type ^`int` := v9;
  #L40234c.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L402350.  v2:= -v2 @kind int;
  #L402352.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L402358.  v2:= temp;
  #L40235a.  if v2 != 0 then goto L402360;
  #L40235e.  return @kind void;
  #L402360.  if v0 != 0 then goto L402368;
  #L402364.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L402368.  call temp:= `get`(v21) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40236e.  v5:= temp @kind object;
  #L402370.  v8:= v5 @kind object;
  #L402372.  v8:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[]) v8 @kind object;
  #L402376.  v7:= v21 @kind object;
  #L40237a.  v6:= 1I;
  #L40237c.  goto L402132;
  catch `java.lang.Throwable` @[L4021de..L4021e6] goto L4022c4;
}
procedure `void` `errorAll`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v9 @kind this, `java.lang.Throwable` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.errorAll:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L40239c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4023a0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] @kind object;
  #L4023a4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4023aa.  v0:= temp @kind object;
  #L4023ac.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[]) v0 @kind object;
  #L4023b0.  v1:= length @variable v0;
  #L4023b2.  v2:= 0I;
  #L4023b4.  if v2 >= v1 then goto L4023e0;
  #L4023b8.  v3:= v0[v2] @kind object;
  #L4023bc.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.get:()J` @kind virtual;
  #L4023c2.  v4:= temp @kind wide;
  #L4023c4.  v6:= -9223372036854775808L;
  #L4023c8.  v8:= lcmp(v4, v6);
  #L4023cc.  if v8 == 0 then goto L4023da;
  #L4023d0.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4023d4.  call `onError`(v3, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4023da.  v2:= v2 + 1;
  #L4023de.  goto L4023b4;
  #L4023e0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401fb0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L401fb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L401fba.  v0:= temp @kind object;
  #L401fbc.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L401fc0.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L401fc6.  v0:= temp;
  #L401fc8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4023f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @type ^`boolean` @kind boolean;
  #L4023f8.  if v0 != 0 then goto L402408;
  #L4023fc.  v0:= 1I;
  #L4023fe.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @type ^`boolean` := v0 @kind boolean;
  #L402402.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.drain:()V` @kind virtual;
  #L402408.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40241c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @type ^`boolean` @kind boolean;
  #L402420.  if v0 == 0 then goto L40242c;
  #L402424.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40242a.  return @kind void;
  #L40242c.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L402430.  v2:= 1I;
  #L402432.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @type ^`boolean` := v2 @kind boolean;
  #L402436.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.drain:()V` @kind virtual;
  #L40243c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402450.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @type ^`boolean` @kind boolean;
  #L402454.  if v0 == 0 then goto L40245a;
  #L402458.  return @kind void;
  #L40245a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.sourceMode` @type ^`int`;
  #L40245e.  if v0 != 0 then goto L40249a;
  #L402462.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L402466.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40246c.  v2:= temp;
  #L40246e.  if v2 != 0 then goto L40249a;
  #L402472.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L402476.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40247c.  v2:= temp @kind object;
  #L40247e.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L402482.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L402488.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40248c.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L402492.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L402498.  return @kind void;
  #L40249a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.drain:()V` @kind virtual;
  #L4024a0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4024b4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4024b8.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4024be.  v0:= temp;
  #L4024c0.  if v0 == 0 then goto L40252a;
  #L4024c4.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L4024c8.  if v0 == 0 then goto L402510;
  #L4024cc.  v0:= v4 @kind object;
  #L4024ce.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4024d2.  v1:= 3I;
  #L4024d4.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L4024da.  v1:= temp;
  #L4024dc.  v2:= 1I;
  #L4024de.  if v1 != v2 then goto L4024f6;
  #L4024e2.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.sourceMode` @type ^`int` := v1;
  #L4024e6.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4024ea.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.done` @type ^`boolean` := v2 @kind boolean;
  #L4024ee.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.drain:()V` @kind virtual;
  #L4024f4.  return @kind void;
  #L4024f6.  v2:= 2I;
  #L4024f8.  if v1 != v2 then goto L402510;
  #L4024fc.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.sourceMode` @type ^`int` := v1;
  #L402500.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L402504.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.prefetch` @type ^`int`;
  #L402508.  call `request`(v4, v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L40250e.  return @kind void;
  #L402510.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.prefetch` @type ^`int`;
  #L402514.  call temp:= `createQueue`(v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.createQueue:(I)Lio/reactivex/internal/fuseable/SimpleQueue;` @kind static;
  #L40251a.  v0:= temp @kind object;
  #L40251c.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L402520.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.prefetch` @type ^`int`;
  #L402524.  call `request`(v4, v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L40252a.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.remove:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40253c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L402540.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L402546.  v0:= temp @kind object;
  #L402548.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[]) v0 @kind object;
  #L40254c.  v1:= length @variable v0;
  #L40254e.  if v1 != 0 then goto L402554;
  #L402552.  return @kind void;
  #L402554.  v2:= -1I;
  #L402556.  v3:= 0I;
  #L402558.  v4:= 0I;
  #L40255a.  if v4 >= v1 then goto L402570;
  #L40255e.  v5:= v0[v4] @kind object;
  #L402562.  if v5 != v7 then goto L40256a;
  #L402566.  v2:= v4;
  #L402568.  goto L402570;
  #L40256a.  v4:= v4 + 1;
  #L40256e.  goto L40255a;
  #L402570.  if v2 >= 0 then goto L402576;
  #L402574.  return @kind void;
  #L402576.  v4:= 1I;
  #L402578.  if v1 != v4 then goto L402582;
  #L40257c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[] @kind object;
  #L402580.  goto L4025a0;
  #L402582.  v5:= v1 + -1;
  #L402586.  v5:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`[v5];
  #L40258a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L402590.  v3:= v2 + 1;
  #L402594.  v1:= v1 - v2 @kind int;
  #L402596.  v1:= v1 - v4 @kind int;
  #L402598.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40259e.  v1:= v5 @kind object;
  #L4025a0.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4025a4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4025aa.  v0:= temp;
  #L4025ac.  if v0 == 0 then goto L40253c;
  #L4025b0.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4025c4.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription`;
  #L4025c8.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;)V` @kind direct;
  #L4025ce.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4025d4.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.add:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;)Z` @kind virtual;
  #L4025da.  v1:= temp;
  #L4025dc.  if v1 == 0 then goto L4025fc;
  #L4025e0.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.isCancelled:()Z` @kind virtual;
  #L4025e6.  v3:= temp;
  #L4025e8.  if v3 == 0 then goto L4025f4;
  #L4025ec.  call `remove`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.remove:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;)V` @kind virtual;
  #L4025f2.  return @kind void;
  #L4025f4.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.drain:()V` @kind virtual;
  #L4025fa.  goto L402612;
  #L4025fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor.error` @type ^`java.lang.Throwable` @kind object;
  #L402600.  if v0 == 0 then goto L40260c;
  #L402604.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40260a.  goto L402612;
  #L40260c.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L402612.  return @kind void;
}
