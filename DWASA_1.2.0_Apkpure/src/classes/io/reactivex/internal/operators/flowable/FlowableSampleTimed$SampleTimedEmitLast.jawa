record `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedEmitLast;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L406124.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L40612a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40612e.  v2:= 1I;
  #L406130.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L406136.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L40613a.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedEmitLast;.complete:()V` @AccessFlag  {
    temp;
    v0;

  #L40614c.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedEmitLast;.emit:()V` @kind virtual;
  #L406152.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L406156.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40615c.  v0:= temp;
  #L40615e.  if v0 != 0 then goto L40616c;
  #L406162.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406166.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40616c.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedEmitLast;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L406180.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L406184.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L40618a.  v0:= temp;
  #L40618c.  v1:= 2I;
  #L40618e.  if v0 != v1 then goto L4061b2;
  #L406192.  call `emit`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedEmitLast;.emit:()V` @kind virtual;
  #L406198.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40619c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4061a2.  v0:= temp;
  #L4061a4.  if v0 != 0 then goto L4061b2;
  #L4061a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedEmitLast.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4061ac.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4061b2.  return @kind void;
}
