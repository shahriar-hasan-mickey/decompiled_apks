record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.boundary` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.bufferSize` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.close` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.open` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.resources` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.upstream` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.windows` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.ws` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40ce14.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40ce18.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40ce1e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40ce24.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40ce28.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40ce2e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.boundary` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L40ce32.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40ce36.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40ce3c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L40ce40.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.open` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L40ce44.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.close` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L40ce48.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.bufferSize` @type ^`int` := v5;
  #L40ce4c.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L40ce50.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L40ce56.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.resources` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L40ce5a.  v2:= new `java.util.ArrayList`;
  #L40ce5e.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L40ce64.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.ws` @type ^`java.util.List` := v2 @kind object;
  #L40ce68.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40ce6c.  v3:= 1L;
  #L40ce70.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L40ce76.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L40ce00.  v1:= 0I;
  #L40ce02.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ce88.  v0:= 1I;
  #L40ce8a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40ce8e.  return @kind void;
}
procedure `void` `close`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v3 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$OperatorWindowBoundaryCloseSubscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.close:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$OperatorWindowBoundaryCloseSubscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40cea0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40cea4.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40ceaa.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40ceae.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowOperation`;
  #L40ceb2.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$OperatorWindowBoundaryCloseSubscriber.w` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40ceb6.  v2:= 0I;
  #L40ceb8.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowOperation;.<init>:(Lio/reactivex/processors/UnicastProcessor;Ljava/lang/Object;)V` @kind direct;
  #L40cebe.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40cec4.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.enter:()Z` @kind virtual;
  #L40ceca.  v4:= temp;
  #L40cecc.  if v4 == 0 then goto L40ced6;
  #L40ced0.  call `drainLoop`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.drainLoop:()V` @kind virtual;
  #L40ced6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.dispose:()V` @AccessFlag  {
    temp;
    v0;

  #L40cee8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40ceec.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40cef2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.boundary` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40cef6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40cefc.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L40cf10.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40cf14.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40cf18.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.ws` @type ^`java.util.List` @kind object;
  #L40cf1c.  v3:= 1I;
  #L40cf1e.  v4:= 1I;
  #L40cf20.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L40cf24.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40cf2a.  v6:= temp @kind object;
  #L40cf2c.  if v6 != 0 then goto L40cf34;
  #L40cf30.  v7:= 1I;
  #L40cf32.  goto L40cf36;
  #L40cf34.  v7:= 0I;
  #L40cf36.  if v5 == 0 then goto L40cfa4;
  #L40cf3a.  if v7 == 0 then goto L40cfa4;
  #L40cf3e.  call `dispose`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.dispose:()V` @kind virtual;
  #L40cf44.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L40cf48.  if v0 == 0 then goto L40cf74;
  #L40cf4c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40cf52.  v1:= temp @kind object;
  #L40cf54.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40cf5a.  v3:= temp;
  #L40cf5c.  if v3 == 0 then goto L40cf9c;
  #L40cf60.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40cf66.  v3:= temp @kind object;
  #L40cf68.  v3:= (`io.reactivex.processors.UnicastProcessor`) v3 @kind object;
  #L40cf6c.  call `onError`(v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40cf72.  goto L40cf54;
  #L40cf74.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40cf7a.  v0:= temp @kind object;
  #L40cf7c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40cf82.  v1:= temp;
  #L40cf84.  if v1 == 0 then goto L40cf9c;
  #L40cf88.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40cf8e.  v1:= temp @kind object;
  #L40cf90.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L40cf94.  call `onComplete`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40cf9a.  goto L40cf7c;
  #L40cf9c.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L40cfa2.  return @kind void;
  #L40cfa4.  if v7 == 0 then goto L40cfb8;
  #L40cfa8.  v4:= -v4 @kind int;
  #L40cfaa.  call temp:= `leave`(v12, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.leave:(I)I` @kind virtual;
  #L40cfb0.  v4:= temp;
  #L40cfb2.  if v4 != 0 then goto L40cf20;
  #L40cfb6.  return @kind void;
  #L40cfb8.  v5:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowOperation` @kind boolean;
  #L40cfbc.  if v5 == 0 then goto L40d0ce;
  #L40cfc0.  v6:= (`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowOperation`) v6 @kind object;
  #L40cfc4.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowOperation.w` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40cfc8.  v7:= 0L;
  #L40cfcc.  if v5 == 0 then goto L40d006;
  #L40cfd0.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowOperation.w` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40cfd4.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L40cfda.  v5:= temp;
  #L40cfdc.  if v5 == 0 then goto L40cf20;
  #L40cfe0.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowOperation.w` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40cfe4.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40cfea.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40cfee.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L40cff4.  v5:= temp @kind wide;
  #L40cff6.  v9:= lcmp(v5, v7);
  #L40cffa.  if v9 != 0 then goto L40cf20;
  #L40cffe.  call `dispose`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.dispose:()V` @kind virtual;
  #L40d004.  return @kind void;
  #L40d006.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40d00a.  if v5 == 0 then goto L40d010;
  #L40d00e.  goto L40cf20;
  #L40d010.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.bufferSize` @type ^`int`;
  #L40d014.  call temp:= `create`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40d01a.  v5:= temp @kind object;
  #L40d01c.  call temp:= `requested`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.requested:()J` @kind virtual;
  #L40d022.  v9:= temp @kind wide;
  #L40d024.  v11:= lcmp(v9, v7);
  #L40d028.  if v11 == 0 then goto L40d0b2;
  #L40d02c.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40d032.  call `onNext`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40d038.  v7:= 9223372036854775807L;
  #L40d042.  v11:= lcmp(v9, v7);
  #L40d046.  if v11 == 0 then goto L40d054;
  #L40d04a.  v7:= 1L;
  #L40d04e.  call temp:= `produced`(v12, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.produced:(J)J` @kind virtual;
  #L40d054.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.close` @type ^`io.reactivex.functions.Function` @kind object;
  #L40d058.  v6:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowOperation.open` @type ^`java.lang.Object` @kind object;
  #L40d05c.  call temp:= `apply`(v7, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40d062.  v6:= temp @kind object;
  #L40d064.  v7:= "The publisher supplied is null" @kind object;
  #L40d068.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40d06e.  v6:= temp @kind object;
  #L40d070.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L40d074.  v7:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$OperatorWindowBoundaryCloseSubscriber`;
  #L40d078.  call `<init>`(v7, v12, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$OperatorWindowBoundaryCloseSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L40d07e.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40d082.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40d088.  v5:= temp;
  #L40d08a.  if v5 == 0 then goto L40cf20;
  #L40d08e.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d092.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L40d098.  call `subscribe`(v6, v7) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40d09e.  goto L40cf20;
  #L40d0a2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40d0a4.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L40d0a8.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d0ae.  goto L40cf20;
  #L40d0b2.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L40d0b6.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40d0ba.  v6:= "Could not deliver new window due to lack of requests" @kind object;
  #L40d0be.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40d0c4.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d0ca.  goto L40cf20;
  #L40d0ce.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40d0d4.  v5:= temp @kind object;
  #L40d0d6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40d0dc.  v7:= temp;
  #L40d0de.  if v7 == 0 then goto L40cf20;
  #L40d0e2.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40d0e8.  v7:= temp @kind object;
  #L40d0ea.  v7:= (`io.reactivex.processors.UnicastProcessor`) v7 @kind object;
  #L40d0ee.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L40d0f4.  v8:= temp @kind object;
  #L40d0f6.  call `onNext`(v7, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40d0fc.  goto L40d0d6;
  catch `java.lang.Throwable` @[L40d054..L40d074] goto L40d0a2;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.error:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L40d11c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d120.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40d126.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40d12a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40d130.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.boundary` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d134.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40d13a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40d13e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d144.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40d158.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L40d15c.  if v0 == 0 then goto L40d162;
  #L40d160.  return @kind void;
  #L40d162.  v0:= 1I;
  #L40d164.  v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40d168.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.enter:()Z` @kind virtual;
  #L40d16e.  v0:= temp;
  #L40d170.  if v0 == 0 then goto L40d17a;
  #L40d174.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.drainLoop:()V` @kind virtual;
  #L40d17a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d17e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L40d184.  v0:= temp @kind wide;
  #L40d186.  v2:= 0L;
  #L40d18a.  v4:= lcmp(v0, v2);
  #L40d18e.  if v4 != 0 then goto L40d19c;
  #L40d192.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40d196.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40d19c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40d1a0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40d1a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40d1b8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L40d1bc.  if v0 == 0 then goto L40d1c8;
  #L40d1c0.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40d1c6.  return @kind void;
  #L40d1c8.  v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L40d1cc.  v0:= 1I;
  #L40d1ce.  v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40d1d2.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.enter:()Z` @kind virtual;
  #L40d1d8.  v0:= temp;
  #L40d1da.  if v0 == 0 then goto L40d1e4;
  #L40d1de.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.drainLoop:()V` @kind virtual;
  #L40d1e4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d1e8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L40d1ee.  v0:= temp @kind wide;
  #L40d1f0.  v2:= 0L;
  #L40d1f4.  v4:= lcmp(v0, v2);
  #L40d1f8.  if v4 != 0 then goto L40d206;
  #L40d1fc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.resources` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40d200.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40d206.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40d20a.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d210.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d224.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L40d228.  if v0 == 0 then goto L40d22e;
  #L40d22c.  return @kind void;
  #L40d22e.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.fastEnter:()Z` @kind virtual;
  #L40d234.  v0:= temp;
  #L40d236.  if v0 == 0 then goto L40d276;
  #L40d23a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.ws` @type ^`java.util.List` @kind object;
  #L40d23e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40d244.  v0:= temp @kind object;
  #L40d246.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40d24c.  v1:= temp;
  #L40d24e.  if v1 == 0 then goto L40d266;
  #L40d252.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40d258.  v1:= temp @kind object;
  #L40d25a.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L40d25e.  call `onNext`(v1, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40d264.  goto L40d246;
  #L40d266.  v3:= -1I;
  #L40d268.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.leave:(I)I` @kind virtual;
  #L40d26e.  v3:= temp;
  #L40d270.  if v3 != 0 then goto L40d296;
  #L40d274.  return @kind void;
  #L40d276.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40d27a.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L40d280.  v3:= temp @kind object;
  #L40d282.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40d288.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.enter:()Z` @kind virtual;
  #L40d28e.  v3:= temp;
  #L40d290.  if v3 != 0 then goto L40d296;
  #L40d294.  return @kind void;
  #L40d296.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.drainLoop:()V` @kind virtual;
  #L40d29c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d2b0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d2b4.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40d2ba.  v0:= temp;
  #L40d2bc.  if v0 == 0 then goto L40d318;
  #L40d2c0.  v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L40d2c4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40d2c8.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40d2ce.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40d2d2.  if v0 == 0 then goto L40d2d8;
  #L40d2d6.  return @kind void;
  #L40d2d8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$OperatorWindowBoundaryOpenSubscriber`;
  #L40d2dc.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$OperatorWindowBoundaryOpenSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;)V` @kind direct;
  #L40d2e2.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.boundary` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d2e6.  v2:= 0I;
  #L40d2e8.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40d2ee.  v1:= temp;
  #L40d2f0.  if v1 == 0 then goto L40d318;
  #L40d2f4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d2f8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L40d2fe.  v1:= 9223372036854775807L;
  #L40d308.  call `request`(v4, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40d30e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.open` @type ^`org.reactivestreams.Publisher` @kind object;
  #L40d312.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40d318.  return @kind void;
}
procedure `void` `open`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.open:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40d32c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40d330.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowOperation`;
  #L40d334.  v2:= 0I;
  #L40d336.  call `<init>`(v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowOperation;.<init>:(Lio/reactivex/processors/UnicastProcessor;Ljava/lang/Object;)V` @kind direct;
  #L40d33c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40d342.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.enter:()Z` @kind virtual;
  #L40d348.  v4:= temp;
  #L40d34a.  if v4 == 0 then goto L40d354;
  #L40d34e.  call `drainLoop`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.drainLoop:()V` @kind virtual;
  #L40d354.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40d368.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber;.requested:(J)V` @kind virtual;
  #L40d36e.  return @kind void;
}
