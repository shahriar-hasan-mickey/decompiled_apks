record `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.capacityHint` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.stopWindows` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @AccessFlag FINAL;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.NEXT_WINDOW` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40c8e0.  v0:= new `java.lang.Object`;
  #L40c8e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40c8ea.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` := v0 @kind object;
  #L40c8ee.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40c900.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40c906.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40c90a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.capacityHint` @type ^`int` := v2;
  #L40c90e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber`;
  #L40c912.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;)V` @kind direct;
  #L40c918.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` := v1 @kind object;
  #L40c91c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40c920.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40c926.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40c92a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40c92e.  v2:= 1I;
  #L40c930.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L40c936.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L40c93a.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40c93e.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40c944.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L40c948.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L40c94c.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L40c952.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L40c956.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40c95a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40c960.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L40c964.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40c968.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40c96e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40c972.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40c984.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40c988.  v1:= 0I;
  #L40c98a.  v2:= 1I;
  #L40c98c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40c992.  v0:= temp;
  #L40c994.  if v0 == 0 then goto L40c9bc;
  #L40c998.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` @kind object;
  #L40c99c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.dispose:()V` @kind virtual;
  #L40c9a2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40c9a6.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40c9ac.  v0:= temp;
  #L40c9ae.  if v0 != 0 then goto L40c9bc;
  #L40c9b2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40c9b6.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40c9bc.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L40c9d0.  call temp:= `getAndIncrement`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40c9d6.  v0:= temp;
  #L40c9d8.  if v0 == 0 then goto L40c9de;
  #L40c9dc.  return @kind void;
  #L40c9de.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c9e2.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L40c9e6.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40c9ea.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.emitted` @type ^`long` @kind wide;
  #L40c9ee.  v5:= 1I;
  #L40c9f0.  v6:= 1I;
  #L40c9f2.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40c9f6.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40c9fc.  v7:= temp;
  #L40c9fe.  v8:= 0I;
  #L40ca00.  if v7 != 0 then goto L40ca10;
  #L40ca04.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L40ca0a.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40ca0e.  return @kind void;
  #L40ca10.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40ca14.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L40ca18.  if v9 == 0 then goto L40ca4c;
  #L40ca1c.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40ca22.  v10:= temp @kind object;
  #L40ca24.  if v10 == 0 then goto L40ca4c;
  #L40ca28.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L40ca2e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40ca34.  v1:= temp @kind object;
  #L40ca36.  if v7 == 0 then goto L40ca44;
  #L40ca3a.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40ca3e.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40ca44.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ca4a.  return @kind void;
  #L40ca4c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40ca52.  v10:= temp @kind object;
  #L40ca54.  if v10 != 0 then goto L40ca5c;
  #L40ca58.  v11:= 1I;
  #L40ca5a.  goto L40ca5e;
  #L40ca5c.  v11:= 0I;
  #L40ca5e.  if v9 == 0 then goto L40ca9e;
  #L40ca62.  if v11 == 0 then goto L40ca9e;
  #L40ca66.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40ca6c.  v1:= temp @kind object;
  #L40ca6e.  if v1 != 0 then goto L40ca88;
  #L40ca72.  if v7 == 0 then goto L40ca80;
  #L40ca76.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40ca7a.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40ca80.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40ca86.  goto L40ca9c;
  #L40ca88.  if v7 == 0 then goto L40ca96;
  #L40ca8c.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40ca90.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40ca96.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ca9c.  return @kind void;
  #L40ca9e.  if v11 == 0 then goto L40cab6;
  #L40caa2.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.emitted` @type ^`long` := v3 @kind wide;
  #L40caa6.  v6:= -v6 @kind int;
  #L40caa8.  call temp:= `addAndGet`(v12, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.addAndGet:(I)I` @kind virtual;
  #L40caae.  v6:= temp;
  #L40cab0.  if v6 != 0 then goto L40c9f2;
  #L40cab4.  return @kind void;
  #L40cab6.  v9:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L40caba.  if v10 == v9 then goto L40cac6;
  #L40cabe.  call `onNext`(v7, v10) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40cac4.  goto L40c9f2;
  #L40cac6.  if v7 == 0 then goto L40cad4;
  #L40caca.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40cace.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40cad4.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40cad8.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L40cade.  v7:= temp;
  #L40cae0.  if v7 != 0 then goto L40c9f2;
  #L40cae4.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.capacityHint` @type ^`int`;
  #L40cae8.  call temp:= `create`(v7, v12) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40caee.  v7:= temp @kind object;
  #L40caf0.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L40caf4.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40caf8.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40cafe.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40cb02.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40cb08.  v8:= temp @kind wide;
  #L40cb0a.  v10:= lcmp(v3, v8);
  #L40cb0e.  if v10 == 0 then goto L40cb22;
  #L40cb12.  v8:= 1L;
  #L40cb16.  v3:= v3 + v8 @kind long;
  #L40cb18.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40cb1e.  goto L40c9f2;
  #L40cb22.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40cb26.  call temp:= `cancel`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40cb2c.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` @kind object;
  #L40cb30.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.dispose:()V` @kind virtual;
  #L40cb36.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40cb3a.  v8:= "Could not deliver a window due to lack of requests" @kind object;
  #L40cb3e.  call `<init>`(v7, v8) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40cb44.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40cb4a.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v5 @kind boolean;
  #L40cb4e.  goto L40c9f2;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L40cb64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40cb68.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40cb6e.  v0:= 1I;
  #L40cb70.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40cb74.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40cb7a.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L40cb8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40cb90.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40cb96.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40cb9a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40cba0.  v0:= temp;
  #L40cba2.  if v0 == 0 then goto L40cbb4;
  #L40cba6.  v2:= 1I;
  #L40cba8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L40cbac.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40cbb2.  goto L40cbba;
  #L40cbb4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40cbba.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40cbcc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L40cbd0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L40cbd4.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40cbda.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40cbe0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40cbf4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` @kind object;
  #L40cbf8.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.dispose:()V` @kind virtual;
  #L40cbfe.  v0:= 1I;
  #L40cc00.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40cc04.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40cc0a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40cc1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryInnerSubscriber` @kind object;
  #L40cc20.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryInnerSubscriber;.dispose:()V` @kind virtual;
  #L40cc26.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40cc2a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40cc30.  v0:= temp;
  #L40cc32.  if v0 == 0 then goto L40cc44;
  #L40cc36.  v2:= 1I;
  #L40cc38.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L40cc3c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40cc42.  goto L40cc4a;
  #L40cc44.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40cc4a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40cc5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L40cc60.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40cc66.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40cc6c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40cc80.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40cc84.  v1:= 9223372036854775807L;
  #L40cc8e.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L40cc94.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40cca8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40ccac.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40ccb2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ccc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40ccc8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40ccce.  v0:= temp;
  #L40ccd0.  if v0 != 0 then goto L40ccde;
  #L40ccd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ccd8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ccde.  return @kind void;
}
