record `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableEmitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f3cc8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f3cce.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f3cd2.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L3f3cd6.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L3f3cdc.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L3f3ce0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3cf4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3f3cf8.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L3f3cfe.  call `onUnsubscribed`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onUnsubscribed:()V` @kind virtual;
  #L3f3d04.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.complete:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3f3d18.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L3f3d1e.  v0:= temp;
  #L3f3d20.  if v0 == 0 then goto L3f3d26;
  #L3f3d24.  return @kind void;
  #L3f3d26.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f3d2a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f3d30.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3f3d34.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L3f3d3a.  return @kind void;
  #L3f3d3c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f3d3e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3f3d42.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L3f3d48.  throw v0;
  catch `java.lang.Throwable` @[L3f3d26..L3f3d30] goto L3f3d3c;
}
procedure `boolean` `error`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.error:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3f3ba8.  if v2 != 0 then goto L3f3bba;
  #L3f3bac.  v2:= new `java.lang.NullPointerException`;
  #L3f3bb0.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3f3bb4.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3bba.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L3f3bc0.  v0:= temp;
  #L3f3bc2.  if v0 == 0 then goto L3f3bca;
  #L3f3bc6.  v2:= 0I;
  #L3f3bc8.  return v2;
  #L3f3bca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f3bce.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f3bd4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3f3bd8.  call `dispose`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L3f3bde.  v2:= 1I;
  #L3f3be0.  return v2;
  #L3f3be2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f3be4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3f3be8.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L3f3bee.  throw v2;
  catch `java.lang.Throwable` @[L3f3bca..L3f3bd4] goto L3f3be2;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3c0c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3f3c10.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L3f3c16.  v0:= temp;
  #L3f3c18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L3f3d68.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.complete:()V` @kind virtual;
  #L3f3d6e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3d80.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f3d86.  v0:= temp;
  #L3f3d88.  if v0 != 0 then goto L3f3d92;
  #L3f3d8c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f3d92.  return @kind void;
}
procedure `void` `onRequested`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onRequested:()V` @AccessFlag  {
    temp;

  #L3f3da4.  return @kind void;
}
procedure `void` `onUnsubscribed`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onUnsubscribed:()V` @AccessFlag  {
    temp;

  #L3f3db8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3dcc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f3dd2.  v0:= temp;
  #L3f3dd4.  if v0 == 0 then goto L3f3de4;
  #L3f3dd8.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f3dde.  call `onRequested`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onRequested:()V` @kind virtual;
  #L3f3de4.  return @kind void;
}
procedure `long` `requested`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f3cac.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.get:()J` @kind virtual;
  #L3f3cb2.  v0:= temp @kind wide;
  #L3f3cb4.  return v0 @kind wide;
}
procedure `io.reactivex.FlowableEmitter` `serialize`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.serialize:()Lio/reactivex/FlowableEmitter;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3c48.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter`;
  #L3f3c4c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;)V` @kind direct;
  #L3f3c52.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3df8.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L3f3dfc.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L3f3e02.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3f3e08.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3e1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3f3e20.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f3e26.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3c64.  v0:= 2I;
  #L3f3c66.  v0:= new `java.lang.Object`[v0];
  #L3f3c6a.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f3c70.  v1:= temp @kind object;
  #L3f3c72.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L3f3c78.  v1:= temp @kind object;
  #L3f3c7a.  v2:= 0I;
  #L3f3c7c.  v0[v2]:= v1 @kind object;
  #L3f3c80.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.toString:()Ljava/lang/String;` @kind super;
  #L3f3c86.  v1:= temp @kind object;
  #L3f3c88.  v2:= 1I;
  #L3f3c8a.  v0[v2]:= v1 @kind object;
  #L3f3c8e.  v1:= "%s{%s}" @kind object;
  #L3f3c92.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f3c98.  v0:= temp @kind object;
  #L3f3c9a.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f3c2c.  call temp:= `error`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.error:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f3c32.  v1:= temp;
  #L3f3c34.  return v1;
}
