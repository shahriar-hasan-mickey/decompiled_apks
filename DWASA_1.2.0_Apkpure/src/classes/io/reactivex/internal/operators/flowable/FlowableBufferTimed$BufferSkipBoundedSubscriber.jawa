record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.bufferSupplier` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.buffers` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.timeskip` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f0898.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L3f089c.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L3f08a2.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L3f08a8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L3f08ac.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.timespan` @type ^`long` := v4 @kind wide;
  #L3f08b0.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.timeskip` @type ^`long` := v6 @kind wide;
  #L3f08b4.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L3f08b8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L3f08bc.  v2:= new `java.util.LinkedList`;
  #L3f08c0.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L3f08c6.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.buffers` @type ^`java.util.List` := v2 @kind object;
  #L3f08ca.  return @kind void;
}
procedure `void` `access$000`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.access$000:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3f08dc.  call `fastPathOrderedEmitMax`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3f08e2.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f085c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L3f0860.  call temp:= `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L3f0866.  v1:= temp;
  #L3f0868.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f087c.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f0882.  v1:= 1I;
  #L3f0884.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f08f4.  v0:= 1I;
  #L3f08f6.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f08fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f08fe.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f0904.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0908.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f090e.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.clear:()V` @kind virtual;
  #L3f0914.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L3f0928.  @monitorenter v1
  #L3f092a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.buffers` @type ^`java.util.List` @kind object;
  #L3f092e.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L3f0934.  @monitorexit v1
  #L3f0936.  return @kind void;
  #L3f0938.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f093a.  @monitorexit v1
  #L3f093c.  throw v0;
  catch `java.lang.Throwable` @[L3f092a..L3f093c] goto L3f0938;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f095c.  @monitorenter v4
  #L3f095e.  v0:= new `java.util.ArrayList`;
  #L3f0962.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.buffers` @type ^`java.util.List` @kind object;
  #L3f0966.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3f096c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.buffers` @type ^`java.util.List` @kind object;
  #L3f0970.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L3f0976.  @monitorexit v4
  #L3f0978.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f097e.  v0:= temp @kind object;
  #L3f0980.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f0986.  v1:= temp;
  #L3f0988.  if v1 == 0 then goto L3f09a4;
  #L3f098c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f0992.  v1:= temp @kind object;
  #L3f0994.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3f0998.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f099c.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f09a2.  goto L3f0980;
  #L3f09a4.  v0:= 1I;
  #L3f09a6.  v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f09aa.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.enter:()Z` @kind virtual;
  #L3f09b0.  v0:= temp;
  #L3f09b2.  if v0 == 0 then goto L3f09ca;
  #L3f09b6.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f09ba.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f09be.  v2:= 0I;
  #L3f09c0.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f09c4.  call `drainMaxLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L3f09ca.  return @kind void;
  #L3f09cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f09ce.  @monitorexit v4
  #L3f09d0.  goto L3f09d4;
  #L3f09d2.  throw v0;
  #L3f09d4.  goto L3f09d2;
  catch `java.lang.Throwable` @[L3f095e..L3f0978] goto L3f09cc;
  catch `java.lang.Throwable` @[L3f09ce..L3f09d0] goto L3f09cc;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f09fc.  v0:= 1I;
  #L3f09fe.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f0a02.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0a06.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f0a0c.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.clear:()V` @kind virtual;
  #L3f0a12.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f0a16.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f0a1c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0a30.  @monitorenter v2
  #L3f0a32.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.buffers` @type ^`java.util.List` @kind object;
  #L3f0a36.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f0a3c.  v0:= temp @kind object;
  #L3f0a3e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f0a44.  v1:= temp;
  #L3f0a46.  if v1 == 0 then goto L3f0a5e;
  #L3f0a4a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f0a50.  v1:= temp @kind object;
  #L3f0a52.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3f0a56.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0a5c.  goto L3f0a3e;
  #L3f0a5e.  @monitorexit v2
  #L3f0a60.  return @kind void;
  #L3f0a62.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0a64.  @monitorexit v2
  #L3f0a66.  goto L3f0a6a;
  #L3f0a68.  throw v3;
  #L3f0a6a.  goto L3f0a68;
  catch `java.lang.Throwable` @[L3f0a32..L3f0a66] goto L3f0a62;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v10 @kind this, `org.reactivestreams.Subscription` v11 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f0a88.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f0a8c.  call temp:= `validate`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f0a92.  v0:= temp;
  #L3f0a94.  if v0 != 0 then goto L3f0a9a;
  #L3f0a98.  return @kind void;
  #L3f0a9a.  v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v11 @kind object;
  #L3f0a9e.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0aa2.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f0aa8.  v0:= temp @kind object;
  #L3f0aaa.  v1:= "The supplied buffer is null" @kind object;
  #L3f0aae.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0ab4.  v0:= temp @kind object;
  #L3f0ab6.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3f0aba.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.buffers` @type ^`java.util.List` @kind object;
  #L3f0abe.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0ac4.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f0ac8.  call `onSubscribe`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f0ace.  v1:= 9223372036854775807L;
  #L3f0ad8.  call `request`(v11, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f0ade.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0ae2.  v7:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.timeskip` @type ^`long` @kind wide;
  #L3f0ae6.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0aea.  v4:= v10 @kind object;
  #L3f0aec.  v5:= v7 @kind wide;
  #L3f0aee.  call temp:= `schedulePeriodically`(v3, v4, v5, v7, v9) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f0af4.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0af8.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber$RemoveFromBuffer`;
  #L3f0afc.  call `<init>`(v1, v10, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber$RemoveFromBuffer;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;Ljava/util/Collection;)V` @kind direct;
  #L3f0b02.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.timespan` @type ^`long` @kind wide;
  #L3f0b06.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0b0a.  call temp:= `schedule`(v11, v1, v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f0b10.  return @kind void;
  #L3f0b12.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0b14.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f0b1a.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0b1e.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f0b24.  call `cancel`(v11) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f0b2a.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f0b2e.  call `error`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3f0b34.  return @kind void;
  catch `java.lang.Throwable` @[L3f0a9e..L3f0aba] goto L3f0b12;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3f0b54.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.requested:(J)V` @kind virtual;
  #L3f0b5a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f0b6c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f0b70.  if v0 == 0 then goto L3f0b76;
  #L3f0b74.  return @kind void;
  #L3f0b76.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0b7a.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f0b80.  v0:= temp @kind object;
  #L3f0b82.  v1:= "The supplied buffer is null" @kind object;
  #L3f0b86.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0b8c.  v0:= temp @kind object;
  #L3f0b8e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3f0b92.  @monitorenter v5
  #L3f0b94.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f0b98.  if v1 == 0 then goto L3f0ba0;
  #L3f0b9c.  @monitorexit v5
  #L3f0b9e.  return @kind void;
  #L3f0ba0.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.buffers` @type ^`java.util.List` @kind object;
  #L3f0ba4.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0baa.  @monitorexit v5
  #L3f0bac.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0bb0.  v2:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber$RemoveFromBuffer`;
  #L3f0bb4.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber$RemoveFromBuffer;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;Ljava/util/Collection;)V` @kind direct;
  #L3f0bba.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.timespan` @type ^`long` @kind wide;
  #L3f0bbe.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0bc2.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f0bc8.  return @kind void;
  #L3f0bca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0bcc.  @monitorexit v5
  #L3f0bce.  throw v0;
  #L3f0bd0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0bd2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f0bd8.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.cancel:()V` @kind virtual;
  #L3f0bde.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f0be2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f0be8.  return @kind void;
  catch `java.lang.Throwable` @[L3f0b76..L3f0b92] goto L3f0bd0;
  catch `java.lang.Throwable` @[L3f0b94..L3f0bac] goto L3f0bca;
  catch `java.lang.Throwable` @[L3f0bcc..L3f0bce] goto L3f0bca;
}
