record `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.predicate` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.retries` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiPredicate` v2 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiPredicate;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4057ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4057b2.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4057b6.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L4057ba.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.source` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L4057be.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.predicate` @type ^`io.reactivex.functions.BiPredicate` := v2 @kind object;
  #L4057c2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4057d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4057d8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4057de.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4057f0.  v0:= 1I;
  #L4057f2.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.predicate` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L4057f6.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.retries` @type ^`int`;
  #L4057fa.  v2:= v2 + v0 @kind int;
  #L4057fc.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.retries` @type ^`int` := v2;
  #L405800.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405806.  v2:= temp @kind object;
  #L405808.  call temp:= `test`(v1, v2, v7) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L40580e.  v0:= temp;
  #L405810.  if v0 != 0 then goto L405820;
  #L405814.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405818.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40581e.  return @kind void;
  #L405820.  call `subscribeNext`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.subscribeNext:()V` @kind virtual;
  #L405826.  return @kind void;
  #L405828.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40582a.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L405830.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405834.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L405838.  v4:= 2I;
  #L40583a.  v4:= new `java.lang.Throwable`[v4];
  #L40583e.  v5:= 0I;
  #L405840.  v4[v5]:= v7 @kind object;
  #L405844.  v4[v0]:= v1 @kind object;
  #L405848.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L40584e.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L405854.  return @kind void;
  catch `java.lang.Throwable` @[L4057f2..L405810] goto L405828;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L405874.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @type ^`long` @kind wide;
  #L405878.  v2:= 1L;
  #L40587c.  v0:= v0 + v2 @kind long;
  #L40587e.  v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L405882.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405886.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40588c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4058a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4058a4.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4058aa.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4058bc.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.getAndIncrement:()I` @kind virtual;
  #L4058c2.  v0:= temp;
  #L4058c4.  if v0 != 0 then goto L405912;
  #L4058c8.  v0:= 1I;
  #L4058ca.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4058ce.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L4058d4.  v1:= temp;
  #L4058d6.  if v1 == 0 then goto L4058dc;
  #L4058da.  return @kind void;
  #L4058dc.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @type ^`long` @kind wide;
  #L4058e0.  v3:= 0L;
  #L4058e4.  v5:= lcmp(v1, v3);
  #L4058e8.  if v5 == 0 then goto L4058fa;
  #L4058ec.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L4058f0.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4058f4.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4058fa.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4058fe.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L405904.  v0:= -v0 @kind int;
  #L405906.  call temp:= `addAndGet`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.addAndGet:(I)I` @kind virtual;
  #L40590c.  v0:= temp;
  #L40590e.  if v0 != 0 then goto L4058ca;
  #L405912.  return @kind void;
}
