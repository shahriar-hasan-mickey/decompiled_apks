record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.delayErrors` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f83ec.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L3f83f2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f83f6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f83fa.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L3f83fe.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3f8402.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3f8408.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L3f840c.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L3f8410.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L3f8416.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L3f841a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int` := v4;
  #L3f841e.  v1:= 1I;
  #L3f8420.  call `lazySet`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.lazySet:(I)V` @kind virtual;
  #L3f8426.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8438.  v0:= 1I;
  #L3f843a.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f843e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8442.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f8448.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f844c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3f8452.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L3f8464.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer;)V` @AccessFlag  {
    temp;
    v0;

  #L3f8478.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f847c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f8482.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onComplete:()V` @kind virtual;
  #L3f8488.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L3f849c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f84a0.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f84a6.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f84ac.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f83ac.  v0:= 1I;
  #L3f83ae.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f84c0.  call temp:= `decrementAndGet`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3f84c6.  v0:= temp;
  #L3f84c8.  if v0 != 0 then goto L3f84f4;
  #L3f84cc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f84d0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f84d6.  v0:= temp @kind object;
  #L3f84d8.  if v0 == 0 then goto L3f84e8;
  #L3f84dc.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f84e0.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f84e6.  goto L3f8510;
  #L3f84e8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f84ec.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f84f2.  goto L3f8510;
  #L3f84f4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L3f84f8.  v1:= 2147483647I;
  #L3f84fe.  if v0 == v1 then goto L3f8510;
  #L3f8502.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8506.  v1:= 1L;
  #L3f850a.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f8510.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f8524.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8528.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f852e.  v0:= temp;
  #L3f8530.  if v0 == 0 then goto L3f85aa;
  #L3f8534.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f8538.  if v3 == 0 then goto L3f857e;
  #L3f853c.  call temp:= `decrementAndGet`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3f8542.  v3:= temp;
  #L3f8544.  if v3 != 0 then goto L3f8560;
  #L3f8548.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f854c.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f8552.  v3:= temp @kind object;
  #L3f8554.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f8558.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f855e.  goto L3f85b0;
  #L3f8560.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L3f8564.  v0:= 2147483647I;
  #L3f856a.  if v3 == v0 then goto L3f85b0;
  #L3f856e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8572.  v0:= 1L;
  #L3f8576.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f857c.  goto L3f85b0;
  #L3f857e.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.cancel:()V` @kind virtual;
  #L3f8584.  v3:= 0I;
  #L3f8586.  call temp:= `getAndSet`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.getAndSet:(I)I` @kind virtual;
  #L3f858c.  v3:= temp;
  #L3f858e.  if v3 <= 0 then goto L3f85b0;
  #L3f8592.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8596.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f859c.  v3:= temp @kind object;
  #L3f859e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f85a2.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f85a8.  goto L3f85b0;
  #L3f85aa.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f85b0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f85c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f85c8.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f85ce.  v3:= temp @kind object;
  #L3f85d0.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L3f85d4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f85da.  v3:= temp @kind object;
  #L3f85dc.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L3f85e0.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f85e6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer`;
  #L3f85ea.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;)V` @kind direct;
  #L3f85f0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f85f4.  if v1 != 0 then goto L3f860e;
  #L3f85f8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f85fc.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f8602.  v1:= temp;
  #L3f8604.  if v1 == 0 then goto L3f860e;
  #L3f8608.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L3f860e.  return @kind void;
  #L3f8610.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f8612.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f8618.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f861c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f8622.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f8628.  return @kind void;
  catch `java.lang.Throwable` @[L3f85c4..L3f85e0] goto L3f8610;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f8648.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f864c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f8652.  v0:= temp;
  #L3f8654.  if v0 == 0 then goto L3f868e;
  #L3f8658.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f865c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f8660.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f8666.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L3f866a.  v1:= 2147483647I;
  #L3f8670.  if v0 != v1 then goto L3f8686;
  #L3f8674.  v0:= 9223372036854775807L;
  #L3f867e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f8684.  goto L3f868e;
  #L3f8686.  v0:= (`long`) v0 @kind i2l;
  #L3f8688.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f868e.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f83d8.  v0:= 0I;
  #L3f83da.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3f86a0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f83c0.  v1:= v1 ^& 2;
  #L3f83c4.  return v1;
}
