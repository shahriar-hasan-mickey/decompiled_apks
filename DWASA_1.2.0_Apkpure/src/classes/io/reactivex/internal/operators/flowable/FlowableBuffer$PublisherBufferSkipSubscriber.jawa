record `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.bufferSupplier` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eed00.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3eed06.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3eed0a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @type ^`int` := v2;
  #L3eed0e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @type ^`int` := v3;
  #L3eed12.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L3eed16.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eed28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eed2c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3eed32.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eed44.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` @kind boolean;
  #L3eed48.  if v0 == 0 then goto L3eed4e;
  #L3eed4c.  return @kind void;
  #L3eed4e.  v0:= 1I;
  #L3eed50.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3eed54.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3eed58.  v1:= 0I;
  #L3eed5a.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L3eed5e.  if v0 == 0 then goto L3eed6c;
  #L3eed62.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eed66.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3eed6c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eed70.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3eed76.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eed88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` @kind boolean;
  #L3eed8c.  if v0 == 0 then goto L3eed98;
  #L3eed90.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3eed96.  return @kind void;
  #L3eed98.  v0:= 1I;
  #L3eed9a.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3eed9e.  v0:= 0I;
  #L3eeda0.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3eeda4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eeda8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3eedae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eedc0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` @kind boolean;
  #L3eedc4.  if v0 == 0 then goto L3eedca;
  #L3eedc8.  return @kind void;
  #L3eedca.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3eedce.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.index` @type ^`int`;
  #L3eedd2.  v2:= v1 + 1;
  #L3eedd6.  if v1 != 0 then goto L3eee12;
  #L3eedda.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3eedde.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3eede4.  v0:= temp @kind object;
  #L3eede6.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L3eedea.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eedf0.  v0:= temp @kind object;
  #L3eedf2.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3eedf6.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3eedfa.  goto L3eee12;
  #L3eedfc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eedfe.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3eee04.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.cancel:()V` @kind virtual;
  #L3eee0a.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3eee10.  return @kind void;
  #L3eee12.  if v0 == 0 then goto L3eee3c;
  #L3eee16.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eee1c.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3eee22.  v4:= temp;
  #L3eee24.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @type ^`int`;
  #L3eee28.  if v4 != v1 then goto L3eee3c;
  #L3eee2c.  v4:= 0I;
  #L3eee2e.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` := v4 @kind object;
  #L3eee32.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eee36.  call `onNext`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3eee3c.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @type ^`int`;
  #L3eee40.  if v2 != v4 then goto L3eee46;
  #L3eee44.  v2:= 0I;
  #L3eee46.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.index` @type ^`int` := v2;
  #L3eee4a.  return @kind void;
  catch `java.lang.Throwable` @[L3eedda..L3eedf6] goto L3eedfc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eee68.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eee6c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3eee72.  v0:= temp;
  #L3eee74.  if v0 == 0 then goto L3eee86;
  #L3eee78.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3eee7c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3eee80.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3eee86.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3eee98.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3eee9e.  v0:= temp;
  #L3eeea0.  if v0 == 0 then goto L3eef14;
  #L3eeea4.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.get:()I` @kind virtual;
  #L3eeeaa.  v0:= temp;
  #L3eeeac.  if v0 != 0 then goto L3eeefc;
  #L3eeeb0.  v0:= 0I;
  #L3eeeb2.  v1:= 1I;
  #L3eeeb4.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.compareAndSet:(II)Z` @kind virtual;
  #L3eeeba.  v0:= temp;
  #L3eeebc.  if v0 == 0 then goto L3eeefc;
  #L3eeec0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @type ^`int`;
  #L3eeec4.  v0:= (`long`) v0 @kind i2l;
  #L3eeec6.  call temp:= `multiplyCap`(v7, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L3eeecc.  v0:= temp @kind wide;
  #L3eeece.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @type ^`int`;
  #L3eeed2.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @type ^`int`;
  #L3eeed6.  v2:= v2 - v3 @kind int;
  #L3eeed8.  v2:= (`long`) v2 @kind i2l;
  #L3eeeda.  v4:= 1L;
  #L3eeede.  v7:= v7 - v4 @kind long;
  #L3eeee0.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L3eeee6.  v7:= temp @kind wide;
  #L3eeee8.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eeeec.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L3eeef2.  v7:= temp @kind wide;
  #L3eeef4.  call `request`(v2, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eeefa.  goto L3eef14;
  #L3eeefc.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eef00.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @type ^`int`;
  #L3eef04.  v1:= (`long`) v1 @kind i2l;
  #L3eef06.  call temp:= `multiplyCap`(v1, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L3eef0c.  v7:= temp @kind wide;
  #L3eef0e.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eef14.  return @kind void;
}
