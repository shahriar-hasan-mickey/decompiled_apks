record `io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.filter` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f73b4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L3f73ba.  v0.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.filter` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L3f73be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f73d0.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f73d6.  v3:= temp;
  #L3f73d8.  if v3 != 0 then goto L3f73ea;
  #L3f73dc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f73e0.  v0:= 1L;
  #L3f73e4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f73ea.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7368.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f736c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.filter` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3f7370.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f7376.  v2:= temp @kind object;
  #L3f7378.  if v2 != 0 then goto L3f7380;
  #L3f737c.  v0:= 0I;
  #L3f737e.  return v0 @kind object;
  #L3f7380.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L3f7386.  v3:= temp;
  #L3f7388.  if v3 == 0 then goto L3f738e;
  #L3f738c.  return v2 @kind object;
  #L3f738e.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.sourceMode` @type ^`int`;
  #L3f7392.  v3:= 2I;
  #L3f7394.  if v2 != v3 then goto L3f7370;
  #L3f7398.  v2:= 1L;
  #L3f739c.  call `request`(v0, v2) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.request:(J)V` @kind interface;
  #L3f73a2.  goto L3f7370;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f734c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f7352.  v1:= temp;
  #L3f7354.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f72d8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f72dc.  v1:= 0I;
  #L3f72de.  if v0 == 0 then goto L3f72e4;
  #L3f72e2.  return v1;
  #L3f72e4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.sourceMode` @type ^`int`;
  #L3f72e8.  if v0 == 0 then goto L3f72fc;
  #L3f72ec.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f72f0.  v0:= 0I;
  #L3f72f2.  call temp:= `tryOnNext`(v4, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3f72f8.  v4:= temp;
  #L3f72fa.  return v4;
  #L3f72fc.  v0:= 1I;
  #L3f72fe.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.filter` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3f7302.  call temp:= `test`(v2, v4) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L3f7308.  v2:= temp;
  #L3f730a.  if v2 == 0 then goto L3f7320;
  #L3f730e.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f7312.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3f7318.  v4:= temp;
  #L3f731a.  if v4 == 0 then goto L3f7320;
  #L3f731e.  goto L3f7322;
  #L3f7320.  v0:= 0I;
  #L3f7322.  return v0;
  #L3f7324.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f7326.  call `fail`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f732c.  return v0;
  catch `java.lang.Throwable` @[L3f72fe..L3f730a] goto L3f7324;
}
