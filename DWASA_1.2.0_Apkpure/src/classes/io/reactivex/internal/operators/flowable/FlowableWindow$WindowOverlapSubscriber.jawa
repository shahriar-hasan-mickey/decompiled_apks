record `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.firstRequest` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.once` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.produced` @AccessFlag ;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.requested` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.size` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.skip` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.upstream` @AccessFlag ;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40c1d4.  v0:= 1I;
  #L40c1d6.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L40c1dc.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L40c1e0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.size` @type ^`long` := v3 @kind wide;
  #L40c1e4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.skip` @type ^`long` := v5 @kind wide;
  #L40c1e8.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L40c1ec.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L40c1f2.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L40c1f6.  v2:= new `java.util.ArrayDeque`;
  #L40c1fa.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L40c200.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L40c204.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40c208.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40c20e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L40c212.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40c216.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40c21c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L40c220.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40c224.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40c22a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L40c22e.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40c232.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40c238.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L40c23c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.bufferSize` @type ^`int` := v7;
  #L40c240.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40c254.  v0:= 1I;
  #L40c256.  v3.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40c25a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40c25e.  v2:= 0I;
  #L40c260.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40c266.  v0:= temp;
  #L40c268.  if v0 == 0 then goto L40c272;
  #L40c26c.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.run:()V` @kind virtual;
  #L40c272.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40c188.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40c18c.  v1:= 1I;
  #L40c18e.  if v0 == 0 then goto L40c19a;
  #L40c192.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40c198.  return v1;
  #L40c19a.  if v3 == 0 then goto L40c1c0;
  #L40c19e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L40c1a2.  if v3 == 0 then goto L40c1b4;
  #L40c1a6.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40c1ac.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c1b2.  return v1;
  #L40c1b4.  if v4 == 0 then goto L40c1c0;
  #L40c1b8.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40c1be.  return v1;
  #L40c1c0.  v3:= 0I;
  #L40c1c2.  return v3;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L40c284.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40c288.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40c28e.  v0:= temp;
  #L40c290.  if v0 == 0 then goto L40c296;
  #L40c294.  return @kind void;
  #L40c296.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c29a.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40c29e.  v2:= 1I;
  #L40c2a0.  v3:= 1I;
  #L40c2a2.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40c2a6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40c2ac.  v4:= temp @kind wide;
  #L40c2ae.  v6:= 0L;
  #L40c2b2.  v8:= v6 @kind wide;
  #L40c2b4.  v10:= lcmp(v8, v4);
  #L40c2b8.  if v10 == 0 then goto L40c2f8;
  #L40c2bc.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.done` @type ^`boolean` @kind boolean;
  #L40c2c0.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40c2c6.  v11:= temp @kind object;
  #L40c2c8.  v11:= (`io.reactivex.processors.UnicastProcessor`) v11 @kind object;
  #L40c2cc.  if v11 != 0 then goto L40c2d4;
  #L40c2d0.  v12:= 1I;
  #L40c2d2.  goto L40c2d6;
  #L40c2d4.  v12:= 0I;
  #L40c2d6.  call temp:= `checkTerminated`(v13, v10, v12, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L40c2dc.  v10:= temp;
  #L40c2de.  if v10 == 0 then goto L40c2e4;
  #L40c2e2.  return @kind void;
  #L40c2e4.  if v12 == 0 then goto L40c2ea;
  #L40c2e8.  goto L40c2f8;
  #L40c2ea.  call `onNext`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40c2f0.  v10:= 1L;
  #L40c2f4.  v8:= v8 + v10 @kind long;
  #L40c2f6.  goto L40c2b4;
  #L40c2f8.  v10:= lcmp(v8, v4);
  #L40c2fc.  if v10 != 0 then goto L40c31a;
  #L40c300.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.done` @type ^`boolean` @kind boolean;
  #L40c304.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L40c30a.  v11:= temp;
  #L40c30c.  call temp:= `checkTerminated`(v13, v10, v11, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L40c312.  v10:= temp;
  #L40c314.  if v10 == 0 then goto L40c31a;
  #L40c318.  return @kind void;
  #L40c31a.  v10:= lcmp(v8, v6);
  #L40c31e.  if v10 == 0 then goto L40c340;
  #L40c322.  v6:= 9223372036854775807L;
  #L40c32c.  v10:= lcmp(v4, v6);
  #L40c330.  if v10 == 0 then goto L40c340;
  #L40c334.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40c338.  v5:= -v8 @kind long;
  #L40c33a.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L40c340.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40c344.  v3:= -v3 @kind int;
  #L40c346.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L40c34c.  v3:= temp;
  #L40c34e.  if v3 != 0 then goto L40c2a2;
  #L40c352.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c364.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.done` @type ^`boolean` @kind boolean;
  #L40c368.  if v0 == 0 then goto L40c36e;
  #L40c36c.  return @kind void;
  #L40c36e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L40c372.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L40c378.  v0:= temp @kind object;
  #L40c37a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40c380.  v1:= temp;
  #L40c382.  if v1 == 0 then goto L40c39a;
  #L40c386.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40c38c.  v1:= temp @kind object;
  #L40c38e.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L40c392.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Processor;.onComplete:()V` @kind interface;
  #L40c398.  goto L40c37a;
  #L40c39a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L40c39e.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L40c3a4.  v0:= 1I;
  #L40c3a6.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40c3aa.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.drain:()V` @kind virtual;
  #L40c3b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c3c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.done` @type ^`boolean` @kind boolean;
  #L40c3c8.  if v0 == 0 then goto L40c3d4;
  #L40c3cc.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40c3d2.  return @kind void;
  #L40c3d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L40c3d8.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L40c3de.  v0:= temp @kind object;
  #L40c3e0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40c3e6.  v1:= temp;
  #L40c3e8.  if v1 == 0 then goto L40c400;
  #L40c3ec.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40c3f2.  v1:= temp @kind object;
  #L40c3f4.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L40c3f8.  call `onError`(v1, v3) @signature `Lorg/reactivestreams/Processor;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c3fe.  goto L40c3e0;
  #L40c400.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L40c404.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L40c40a.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L40c40e.  v3:= 1I;
  #L40c410.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L40c414.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.drain:()V` @kind virtual;
  #L40c41a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L40c42c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.done` @type ^`boolean` @kind boolean;
  #L40c430.  if v0 == 0 then goto L40c436;
  #L40c434.  return @kind void;
  #L40c436.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.index` @type ^`long` @kind wide;
  #L40c43a.  v2:= 0L;
  #L40c43e.  v4:= lcmp(v0, v2);
  #L40c442.  if v4 != 0 then goto L40c47a;
  #L40c446.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40c44a.  if v4 != 0 then goto L40c47a;
  #L40c44e.  call temp:= `getAndIncrement`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40c454.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.bufferSize` @type ^`int`;
  #L40c458.  call temp:= `create`(v4, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40c45e.  v4:= temp @kind object;
  #L40c460.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L40c464.  call temp:= `offer`(v5, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40c46a.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40c46e.  call temp:= `offer`(v5, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40c474.  call `drain`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.drain:()V` @kind virtual;
  #L40c47a.  v4:= 1L;
  #L40c47e.  v0:= v0 + v4 @kind long;
  #L40c480.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L40c484.  call temp:= `iterator`(v6) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L40c48a.  v6:= temp @kind object;
  #L40c48c.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40c492.  v7:= temp;
  #L40c494.  if v7 == 0 then goto L40c4ac;
  #L40c498.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40c49e.  v7:= temp @kind object;
  #L40c4a0.  v7:= (`org.reactivestreams.Processor`) v7 @kind object;
  #L40c4a4.  call `onNext`(v7, v9) @signature `Lorg/reactivestreams/Processor;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40c4aa.  goto L40c48c;
  #L40c4ac.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.produced` @type ^`long` @kind wide;
  #L40c4b0.  v6:= v6 + v4 @kind long;
  #L40c4b2.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.size` @type ^`long` @kind wide;
  #L40c4b6.  v9:= lcmp(v6, v4);
  #L40c4ba.  if v9 != 0 then goto L40c4e4;
  #L40c4be.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.skip` @type ^`long` @kind wide;
  #L40c4c2.  v6:= v6 - v4 @kind long;
  #L40c4c4.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.produced` @type ^`long` := v6 @kind wide;
  #L40c4c8.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L40c4cc.  call temp:= `poll`(v9) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40c4d2.  v9:= temp @kind object;
  #L40c4d4.  v9:= (`org.reactivestreams.Processor`) v9 @kind object;
  #L40c4d8.  if v9 == 0 then goto L40c4e8;
  #L40c4dc.  call `onComplete`(v9) @signature `Lorg/reactivestreams/Processor;.onComplete:()V` @kind interface;
  #L40c4e2.  goto L40c4e8;
  #L40c4e4.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.produced` @type ^`long` := v6 @kind wide;
  #L40c4e8.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.skip` @type ^`long` @kind wide;
  #L40c4ec.  v9:= lcmp(v0, v4);
  #L40c4f0.  if v9 != 0 then goto L40c4fa;
  #L40c4f4.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.index` @type ^`long` := v2 @kind wide;
  #L40c4f8.  goto L40c4fe;
  #L40c4fa.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.index` @type ^`long` := v0 @kind wide;
  #L40c4fe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c510.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c514.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40c51a.  v0:= temp;
  #L40c51c.  if v0 == 0 then goto L40c52e;
  #L40c520.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40c524.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c528.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40c52e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40c540.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40c546.  v0:= temp;
  #L40c548.  if v0 == 0 then goto L40c5c0;
  #L40c54c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40c550.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40c556.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40c55a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L40c560.  v0:= temp;
  #L40c562.  if v0 != 0 then goto L40c5a4;
  #L40c566.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40c56a.  v1:= 0I;
  #L40c56c.  v2:= 1I;
  #L40c56e.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40c574.  v0:= temp;
  #L40c576.  if v0 == 0 then goto L40c5a4;
  #L40c57a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.skip` @type ^`long` @kind wide;
  #L40c57e.  v2:= 1L;
  #L40c582.  v5:= v5 - v2 @kind long;
  #L40c584.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40c58a.  v5:= temp @kind wide;
  #L40c58c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.size` @type ^`long` @kind wide;
  #L40c590.  call temp:= `addCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L40c596.  v5:= temp @kind wide;
  #L40c598.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c59c.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40c5a2.  goto L40c5ba;
  #L40c5a4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.skip` @type ^`long` @kind wide;
  #L40c5a8.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40c5ae.  v5:= temp @kind wide;
  #L40c5b0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c5b4.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40c5ba.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.drain:()V` @kind virtual;
  #L40c5c0.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c5d4.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.decrementAndGet:()I` @kind virtual;
  #L40c5da.  v0:= temp;
  #L40c5dc.  if v0 != 0 then goto L40c5ea;
  #L40c5e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c5e4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40c5ea.  return @kind void;
}
