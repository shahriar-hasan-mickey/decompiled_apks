record `io.reactivex.internal.operators.flowable.FlowableCombineLatest` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest.array` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest.bufferSize` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableCombineLatest.combiner` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest.delayErrors` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableCombineLatest.iterable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest` v1 @kind this, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f1e94.  call `<init>`(v1) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L3f1e9a.  v0:= 0I;
  #L3f1e9c.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.array` @type ^`org.reactivestreams.Publisher`[] := v0 @kind object;
  #L3f1ea0.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.iterable` @type ^`java.lang.Iterable` := v2 @kind object;
  #L3f1ea4.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.combiner` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L3f1ea8.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.bufferSize` @type ^`int` := v4;
  #L3f1eac.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.delayErrors` @type ^`boolean` := v5 @kind boolean;
  #L3f1eb0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f1ec4.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L3f1eca.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.array` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L3f1ece.  v1:= 0I;
  #L3f1ed0.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.iterable` @type ^`java.lang.Iterable` := v1 @kind object;
  #L3f1ed4.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.combiner` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f1ed8.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.bufferSize` @type ^`int` := v3;
  #L3f1edc.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.delayErrors` @type ^`boolean` := v4 @kind boolean;
  #L3f1ee0.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest` v10 @kind this, `org.reactivestreams.Subscriber` v11 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f1ef4.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.array` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L3f1ef8.  v1:= 0I;
  #L3f1efa.  if v0 != 0 then goto L3f1f9e;
  #L3f1efe.  v0:= 8I;
  #L3f1f02.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f1f06.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.iterable` @type ^`java.lang.Iterable` @kind object;
  #L3f1f0a.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f1f10.  v2:= temp @kind object;
  #L3f1f12.  v3:= "The iterator returned is null" @kind object;
  #L3f1f16.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1f1c.  v2:= temp @kind object;
  #L3f1f1e.  v2:= (`java.util.Iterator`) v2 @kind object;
  #L3f1f22.  v3:= 0I;
  #L3f1f24.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f1f2a.  v4:= temp;
  #L3f1f2c.  if v4 != 0 then goto L3f1f32;
  #L3f1f30.  goto L3f1fa0;
  #L3f1f32.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f1f38.  v4:= temp @kind object;
  #L3f1f3a.  v5:= "The publisher returned by the iterator is null" @kind object;
  #L3f1f3e.  call temp:= `requireNonNull`(v4, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1f44.  v4:= temp @kind object;
  #L3f1f46.  v4:= (`org.reactivestreams.Publisher`) v4 @kind object;
  #L3f1f4a.  v5:= length @variable v0;
  #L3f1f4c.  if v3 != v5 then goto L3f1f62;
  #L3f1f50.  v5:= v3 ^> 2;
  #L3f1f54.  v5:= v5 + v3 @kind int;
  #L3f1f56.  v5:= new `org.reactivestreams.Publisher`[v5];
  #L3f1f5a.  call `arraycopy`(v0, v1, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f1f60.  v0:= v5 @kind object;
  #L3f1f62.  v5:= v3 + 1;
  #L3f1f66.  v0[v3]:= v4 @kind object;
  #L3f1f6a.  v3:= v5;
  #L3f1f6c.  goto L3f1f24;
  #L3f1f6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1f70.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f1f76.  call `error`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3f1f7c.  return @kind void;
  #L3f1f7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1f80.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f1f86.  call `error`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3f1f8c.  return @kind void;
  #L3f1f8e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1f90.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f1f96.  call `error`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3f1f9c.  return @kind void;
  #L3f1f9e.  v3:= length @variable v0;
  #L3f1fa0.  if v3 != 0 then goto L3f1fac;
  #L3f1fa4.  call `complete`(v11) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3f1faa.  return @kind void;
  #L3f1fac.  v2:= 1I;
  #L3f1fae.  if v3 != v2 then goto L3f1fd2;
  #L3f1fb2.  v0:= v0[v1] @kind object;
  #L3f1fb6.  v1:= new `io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber`;
  #L3f1fba.  v2:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$SingletonArrayFunc`;
  #L3f1fbe.  call `<init>`(v2, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$SingletonArrayFunc;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;)V` @kind direct;
  #L3f1fc4.  call `<init>`(v1, v11, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f1fca.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3f1fd0.  return @kind void;
  #L3f1fd2.  v1:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator`;
  #L3f1fd6.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.combiner` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f1fda.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.bufferSize` @type ^`int`;
  #L3f1fde.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableCombineLatest.delayErrors` @type ^`boolean` @kind boolean;
  #L3f1fe2.  v4:= v1 @kind object;
  #L3f1fe4.  v5:= v11 @kind object;
  #L3f1fe6.  v7:= v3;
  #L3f1fe8.  call `<init>`(v4, v5, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IIZ)V` @kind direct;
  #L3f1fee.  call `onSubscribe`(v11, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f1ff4.  call `subscribe`(v1, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.subscribe:([Lorg/reactivestreams/Publisher;I)V` @kind virtual;
  #L3f1ffa.  return @kind void;
  catch `java.lang.Throwable` @[L3f1f06..L3f1f22] goto L3f1f8e;
  catch `java.lang.Throwable` @[L3f1f24..L3f1f2c] goto L3f1f7e;
  catch `java.lang.Throwable` @[L3f1f32..L3f1f4a] goto L3f1f6e;
}
