record `io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.upstream` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$ToListSubscriber;.<init>:(Lio/reactivex/SingleObserver;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40b8c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40b8c6.  v0.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L40b8ca.  v0.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.value` @type ^`java.util.Collection` := v2 @kind object;
  #L40b8ce.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$ToListSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b8e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b8e4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40b8ea.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40b8ee.  v1.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40b8f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$ToListSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b89c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b8a0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40b8a4.  if v0 != v1 then goto L40b8ac;
  #L40b8a8.  v0:= 1I;
  #L40b8aa.  goto L40b8ae;
  #L40b8ac.  v0:= 0I;
  #L40b8ae.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$ToListSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b904.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40b908.  v2.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40b90c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40b910.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.value` @type ^`java.util.Collection` @kind object;
  #L40b914.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40b91a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$ToListSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b92c.  v0:= 0I;
  #L40b92e.  v1.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.value` @type ^`java.util.Collection` := v0 @kind object;
  #L40b932.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40b936.  v1.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40b93a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40b93e.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40b944.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$ToListSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b958.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.value` @type ^`java.util.Collection` @kind object;
  #L40b95c.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40b962.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$ToListSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b974.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b978.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40b97e.  v0:= temp;
  #L40b980.  if v0 == 0 then goto L40b9a2;
  #L40b984.  v2.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40b988.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40b98c.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L40b992.  v0:= 9223372036854775807L;
  #L40b99c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40b9a2.  return @kind void;
}
