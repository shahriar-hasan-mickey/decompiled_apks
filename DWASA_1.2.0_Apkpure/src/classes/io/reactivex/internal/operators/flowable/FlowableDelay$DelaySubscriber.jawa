record `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.delay` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.delayError` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f50bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f50c2.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f50c6.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.delay` @type ^`long` := v2 @kind wide;
  #L3f50ca.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L3f50ce.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.w` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L3f50d2.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.delayError` @type ^`boolean` := v6 @kind boolean;
  #L3f50d6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f50e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f50ec.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f50f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f50f6.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f50fc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f5110.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f5114.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnComplete`;
  #L3f5118.  call `<init>`(v1, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber$OnComplete;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;)V` @kind direct;
  #L3f511e.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.delay` @type ^`long` @kind wide;
  #L3f5122.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f5126.  call temp:= `schedule`(v0, v1, v2, v4) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f512c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f5140.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f5144.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnError`;
  #L3f5148.  call `<init>`(v1, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber$OnError;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;Ljava/lang/Throwable;)V` @kind direct;
  #L3f514e.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L3f5152.  if v5 == 0 then goto L3f515c;
  #L3f5156.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.delay` @type ^`long` @kind wide;
  #L3f515a.  goto L3f5160;
  #L3f515c.  v2:= 0L;
  #L3f5160.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f5164.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f516a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f517c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f5180.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber$OnNext`;
  #L3f5184.  call `<init>`(v1, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber$OnNext;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;Ljava/lang/Object;)V` @kind direct;
  #L3f518a.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.delay` @type ^`long` @kind wide;
  #L3f518e.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f5192.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f5198.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f51ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f51b0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f51b6.  v0:= temp;
  #L3f51b8.  if v0 == 0 then goto L3f51ca;
  #L3f51bc.  v1.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3f51c0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f51c4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f51ca.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f51dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$DelaySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f51e0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f51e6.  return @kind void;
}
