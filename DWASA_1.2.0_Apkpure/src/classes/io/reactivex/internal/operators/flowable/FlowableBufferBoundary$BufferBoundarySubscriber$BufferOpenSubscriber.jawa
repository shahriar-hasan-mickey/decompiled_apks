record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eef50.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3eef56.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` := v1 @kind object;
  #L3eef5a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3eef6c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3eef72.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eef28.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3eef2e.  v0:= temp @kind object;
  #L3eef30.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3eef34.  if v0 != v1 then goto L3eef3c;
  #L3eef38.  v0:= 1I;
  #L3eef3a.  goto L3eef3e;
  #L3eef3c.  v0:= 0I;
  #L3eef3e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eef84.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3eef88.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3eef8e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L3eef92.  call `openComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.openComplete:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;)V` @kind virtual;
  #L3eef98.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eefac.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3eefb0.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3eefb6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L3eefba.  call `boundaryError`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.boundaryError:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @kind virtual;
  #L3eefc0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eefd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L3eefd8.  call `open`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.open:(Ljava/lang/Object;)V` @kind virtual;
  #L3eefde.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eeff0.  v0:= 9223372036854775807L;
  #L3eeffa.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L3ef000.  return @kind void;
}
