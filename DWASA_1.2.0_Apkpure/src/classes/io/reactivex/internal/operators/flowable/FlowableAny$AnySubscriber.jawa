record `io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.done` @AccessFlag ;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.predicate` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ee28c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3ee292.  v0.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L3ee296.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee2a8.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L3ee2ae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee2b2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee2b8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee2cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee2d0.  if v0 != 0 then goto L3ee2ea;
  #L3ee2d4.  v0:= 1I;
  #L3ee2d6.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ee2da.  v0:= 0I;
  #L3ee2dc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3ee2e2.  v0:= temp @kind object;
  #L3ee2e4.  call `complete`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3ee2ea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee2fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee300.  if v0 == 0 then goto L3ee30c;
  #L3ee304.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ee30a.  return @kind void;
  #L3ee30c.  v0:= 1I;
  #L3ee30e.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ee312.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee316.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ee31c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee330.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee334.  if v0 == 0 then goto L3ee33a;
  #L3ee338.  return @kind void;
  #L3ee33a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3ee33e.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L3ee344.  v2:= temp;
  #L3ee346.  if v2 == 0 then goto L3ee368;
  #L3ee34a.  v2:= 1I;
  #L3ee34c.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3ee350.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee354.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee35a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3ee360.  v2:= temp @kind object;
  #L3ee362.  call `complete`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3ee368.  return @kind void;
  #L3ee36a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ee36c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ee372.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee376.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee37c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ee382.  return @kind void;
  catch `java.lang.Throwable` @[L3ee33a..L3ee346] goto L3ee36a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$AnySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee3a0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee3a4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3ee3aa.  v0:= temp;
  #L3ee3ac.  if v0 == 0 then goto L3ee3ce;
  #L3ee3b0.  v2.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3ee3b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee3b8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3ee3be.  v0:= 9223372036854775807L;
  #L3ee3c8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ee3ce.  return @kind void;
}
