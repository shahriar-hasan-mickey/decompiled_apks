record `io.reactivex.internal.operators.flowable.FlowableBuffer` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer.bufferSupplier` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer.size` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer.skip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer;.<init>:(Lio/reactivex/Flowable;IILjava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f0d34.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f0d3a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer.size` @type ^`int` := v2;
  #L3f0d3e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer.skip` @type ^`int` := v3;
  #L3f0d42.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L3f0d46.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableBuffer` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f0d58.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.size` @type ^`int`;
  #L3f0d5c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.skip` @type ^`int`;
  #L3f0d60.  if v0 != v1 then goto L3f0d82;
  #L3f0d64.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f0d68.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber`;
  #L3f0d6c.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.size` @type ^`int`;
  #L3f0d70.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0d74.  call `<init>`(v1, v6, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/concurrent/Callable;)V` @kind direct;
  #L3f0d7a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f0d80.  goto L3f0dc8;
  #L3f0d82.  if v1 <= v0 then goto L3f0da8;
  #L3f0d86.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f0d8a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber`;
  #L3f0d8e.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.size` @type ^`int`;
  #L3f0d92.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.skip` @type ^`int`;
  #L3f0d96.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0d9a.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L3f0da0.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f0da6.  goto L3f0dc8;
  #L3f0da8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f0dac.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber`;
  #L3f0db0.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.size` @type ^`int`;
  #L3f0db4.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.skip` @type ^`int`;
  #L3f0db8.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0dbc.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L3f0dc2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f0dc8.  return @kind void;
}
