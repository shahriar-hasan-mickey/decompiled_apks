record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.terminated` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.timeskip` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.upstream` @AccessFlag ;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.windows` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.worker` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler$Worker` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40e4f0.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40e4f4.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40e4fa.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40e500.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.timespan` @type ^`long` := v3 @kind wide;
  #L40e504.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.timeskip` @type ^`long` := v5 @kind wide;
  #L40e508.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L40e50c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v8 @kind object;
  #L40e510.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.bufferSize` @type ^`int` := v9;
  #L40e514.  v2:= new `java.util.LinkedList`;
  #L40e518.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L40e51e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.windows` @type ^`java.util.List` := v2 @kind object;
  #L40e522.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e534.  v0:= 1I;
  #L40e536.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40e53a.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v3 @kind this, `io.reactivex.processors.UnicastProcessor` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.complete:(Lio/reactivex/processors/UnicastProcessor;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40e54c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40e550.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$SubjectWork`;
  #L40e554.  v2:= 0I;
  #L40e556.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber$SubjectWork;.<init>:(Lio/reactivex/processors/UnicastProcessor;Z)V` @kind direct;
  #L40e55c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40e562.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.enter:()Z` @kind virtual;
  #L40e568.  v4:= temp;
  #L40e56a.  if v4 == 0 then goto L40e574;
  #L40e56e.  call `drainLoop`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.drainLoop:()V` @kind virtual;
  #L40e574.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e588.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40e58c.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40e592.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L40e5a4.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40e5a8.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e5ac.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.windows` @type ^`java.util.List` @kind object;
  #L40e5b0.  v3:= 1I;
  #L40e5b2.  v4:= 1I;
  #L40e5b4.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.terminated` @type ^`boolean` @kind boolean;
  #L40e5b8.  if v5 == 0 then goto L40e5da;
  #L40e5bc.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40e5c0.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40e5c6.  call `dispose`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.dispose:()V` @kind virtual;
  #L40e5cc.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L40e5d2.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L40e5d8.  return @kind void;
  #L40e5da.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.done` @type ^`boolean` @kind boolean;
  #L40e5de.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40e5e4.  v6:= temp @kind object;
  #L40e5e6.  if v6 != 0 then goto L40e5ee;
  #L40e5ea.  v7:= 1I;
  #L40e5ec.  goto L40e5f0;
  #L40e5ee.  v7:= 0I;
  #L40e5f0.  v8:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$SubjectWork` @kind boolean;
  #L40e5f4.  if v5 == 0 then goto L40e66c;
  #L40e5f8.  if v7 != 0 then goto L40e600;
  #L40e5fc.  if v8 == 0 then goto L40e66c;
  #L40e600.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L40e606.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L40e60a.  if v0 == 0 then goto L40e636;
  #L40e60e.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40e614.  v1:= temp @kind object;
  #L40e616.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40e61c.  v3:= temp;
  #L40e61e.  if v3 == 0 then goto L40e65e;
  #L40e622.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40e628.  v3:= temp @kind object;
  #L40e62a.  v3:= (`io.reactivex.processors.UnicastProcessor`) v3 @kind object;
  #L40e62e.  call `onError`(v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40e634.  goto L40e616;
  #L40e636.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40e63c.  v0:= temp @kind object;
  #L40e63e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40e644.  v1:= temp;
  #L40e646.  if v1 == 0 then goto L40e65e;
  #L40e64a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40e650.  v1:= temp @kind object;
  #L40e652.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L40e656.  call `onComplete`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40e65c.  goto L40e63e;
  #L40e65e.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L40e664.  call `dispose`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.dispose:()V` @kind virtual;
  #L40e66a.  return @kind void;
  #L40e66c.  if v7 == 0 then goto L40e680;
  #L40e670.  v4:= -v4 @kind int;
  #L40e672.  call temp:= `leave`(v11, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.leave:(I)I` @kind virtual;
  #L40e678.  v4:= temp;
  #L40e67a.  if v4 != 0 then goto L40e5b4;
  #L40e67e.  return @kind void;
  #L40e680.  if v8 == 0 then goto L40e74a;
  #L40e684.  v6:= (`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$SubjectWork`) v6 @kind object;
  #L40e688.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$SubjectWork.open` @type ^`boolean` @kind boolean;
  #L40e68c.  if v5 == 0 then goto L40e71a;
  #L40e690.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40e694.  if v5 == 0 then goto L40e69a;
  #L40e698.  goto L40e5b4;
  #L40e69a.  call temp:= `requested`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.requested:()J` @kind virtual;
  #L40e6a0.  v5:= temp @kind wide;
  #L40e6a2.  v7:= 0L;
  #L40e6a6.  v9:= lcmp(v5, v7);
  #L40e6aa.  if v9 == 0 then goto L40e702;
  #L40e6ae.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.bufferSize` @type ^`int`;
  #L40e6b2.  call temp:= `create`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40e6b8.  v7:= temp @kind object;
  #L40e6ba.  call temp:= `add`(v2, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40e6c0.  call `onNext`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40e6c6.  v8:= 9223372036854775807L;
  #L40e6d0.  v10:= lcmp(v5, v8);
  #L40e6d4.  if v10 == 0 then goto L40e6e2;
  #L40e6d8.  v5:= 1L;
  #L40e6dc.  call temp:= `produced`(v11, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.produced:(J)J` @kind virtual;
  #L40e6e2.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40e6e6.  v6:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$Completion`;
  #L40e6ea.  call `<init>`(v6, v11, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber$Completion;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L40e6f0.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.timespan` @type ^`long` @kind wide;
  #L40e6f4.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40e6f8.  call temp:= `schedule`(v5, v6, v7, v9) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40e6fe.  goto L40e5b4;
  #L40e702.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40e706.  v6:= "Can't emit window due to lack of requests" @kind object;
  #L40e70a.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40e710.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40e716.  goto L40e5b4;
  #L40e71a.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$SubjectWork.w` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40e71e.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L40e724.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$SubjectWork.w` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40e728.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40e72e.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L40e734.  v5:= temp;
  #L40e736.  if v5 == 0 then goto L40e5b4;
  #L40e73a.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40e73e.  if v5 == 0 then goto L40e5b4;
  #L40e742.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.terminated` @type ^`boolean` := v3 @kind boolean;
  #L40e746.  goto L40e5b4;
  #L40e74a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40e750.  v5:= temp @kind object;
  #L40e752.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40e758.  v7:= temp;
  #L40e75a.  if v7 == 0 then goto L40e5b4;
  #L40e75e.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40e764.  v7:= temp @kind object;
  #L40e766.  v7:= (`io.reactivex.processors.UnicastProcessor`) v7 @kind object;
  #L40e76a.  call `onNext`(v7, v6) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40e770.  goto L40e752;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e784.  v0:= 1I;
  #L40e786.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40e78a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.enter:()Z` @kind virtual;
  #L40e790.  v0:= temp;
  #L40e792.  if v0 == 0 then goto L40e79c;
  #L40e796.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.drainLoop:()V` @kind virtual;
  #L40e79c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e7a0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40e7a6.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.dispose:()V` @kind virtual;
  #L40e7ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e7c0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L40e7c4.  v0:= 1I;
  #L40e7c6.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40e7ca.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.enter:()Z` @kind virtual;
  #L40e7d0.  v0:= temp;
  #L40e7d2.  if v0 == 0 then goto L40e7dc;
  #L40e7d6.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.drainLoop:()V` @kind virtual;
  #L40e7dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e7e0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40e7e6.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.dispose:()V` @kind virtual;
  #L40e7ec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40e800.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.fastEnter:()Z` @kind virtual;
  #L40e806.  v0:= temp;
  #L40e808.  if v0 == 0 then goto L40e848;
  #L40e80c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.windows` @type ^`java.util.List` @kind object;
  #L40e810.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40e816.  v0:= temp @kind object;
  #L40e818.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40e81e.  v1:= temp;
  #L40e820.  if v1 == 0 then goto L40e838;
  #L40e824.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40e82a.  v1:= temp @kind object;
  #L40e82c.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L40e830.  call `onNext`(v1, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40e836.  goto L40e818;
  #L40e838.  v3:= -1I;
  #L40e83a.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.leave:(I)I` @kind virtual;
  #L40e840.  v3:= temp;
  #L40e842.  if v3 != 0 then goto L40e860;
  #L40e846.  return @kind void;
  #L40e848.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40e84c.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40e852.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.enter:()Z` @kind virtual;
  #L40e858.  v3:= temp;
  #L40e85a.  if v3 != 0 then goto L40e860;
  #L40e85e.  return @kind void;
  #L40e860.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.drainLoop:()V` @kind virtual;
  #L40e866.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v14 @kind this, `org.reactivestreams.Subscription` v15 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L40e878.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40e87c.  call temp:= `validate`(v0, v15) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40e882.  v0:= temp;
  #L40e884.  if v0 == 0 then goto L40e948;
  #L40e888.  v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v15 @kind object;
  #L40e88c.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e890.  call `onSubscribe`(v0, v14) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40e896.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40e89a.  if v0 == 0 then goto L40e8a0;
  #L40e89e.  return @kind void;
  #L40e8a0.  call temp:= `requested`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.requested:()J` @kind virtual;
  #L40e8a6.  v0:= temp @kind wide;
  #L40e8a8.  v2:= 0L;
  #L40e8ac.  v4:= lcmp(v0, v2);
  #L40e8b0.  if v4 == 0 then goto L40e92a;
  #L40e8b4.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.bufferSize` @type ^`int`;
  #L40e8b8.  call temp:= `create`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40e8be.  v2:= temp @kind object;
  #L40e8c0.  v3:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.windows` @type ^`java.util.List` @kind object;
  #L40e8c4.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40e8ca.  v3:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e8ce.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40e8d4.  v3:= 9223372036854775807L;
  #L40e8de.  v5:= lcmp(v0, v3);
  #L40e8e2.  if v5 == 0 then goto L40e8f0;
  #L40e8e6.  v0:= 1L;
  #L40e8ea.  call temp:= `produced`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.produced:(J)J` @kind virtual;
  #L40e8f0.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40e8f4.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$Completion`;
  #L40e8f8.  call `<init>`(v1, v14, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber$Completion;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L40e8fe.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.timespan` @type ^`long` @kind wide;
  #L40e902.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40e906.  call temp:= `schedule`(v0, v1, v5, v2) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40e90c.  v7:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40e910.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.timeskip` @type ^`long` @kind wide;
  #L40e914.  v13:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40e918.  v8:= v14 @kind object;
  #L40e91a.  v9:= v11 @kind wide;
  #L40e91c.  call temp:= `schedulePeriodically`(v7, v8, v9, v11, v13) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40e922.  call `request`(v15, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40e928.  goto L40e948;
  #L40e92a.  call `cancel`(v15) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40e930.  v15:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e934.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40e938.  v1:= "Could not emit the first window due to lack of requests" @kind object;
  #L40e93c.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40e942.  call `onError`(v15, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40e948.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40e95c.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.requested:(J)V` @kind virtual;
  #L40e962.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40e974.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.bufferSize` @type ^`int`;
  #L40e978.  call temp:= `create`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40e97e.  v0:= temp @kind object;
  #L40e980.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber$SubjectWork`;
  #L40e984.  v2:= 1I;
  #L40e986.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber$SubjectWork;.<init>:(Lio/reactivex/processors/UnicastProcessor;Z)V` @kind direct;
  #L40e98c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40e990.  if v0 != 0 then goto L40e99e;
  #L40e994.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40e998.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40e99e.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.enter:()Z` @kind virtual;
  #L40e9a4.  v0:= temp;
  #L40e9a6.  if v0 == 0 then goto L40e9b0;
  #L40e9aa.  call `drainLoop`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber;.drainLoop:()V` @kind virtual;
  #L40e9b0.  return @kind void;
}
