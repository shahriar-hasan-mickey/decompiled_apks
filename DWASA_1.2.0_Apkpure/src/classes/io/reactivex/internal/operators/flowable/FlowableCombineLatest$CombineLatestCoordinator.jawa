record `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.combiner` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.completedSources` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.latest` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.nonEmptySources` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.outputFused` @AccessFlag ;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f18bc.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L3f18c2.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L3f18c6.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.combiner` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L3f18ca.  v2:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[v4];
  #L3f18ce.  v3:= 0I;
  #L3f18d0.  if v3 >= v4 then goto L3f18e8;
  #L3f18d4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`;
  #L3f18d8.  call `<init>`(v0, v1, v3, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;II)V` @kind direct;
  #L3f18de.  v2[v3]:= v0 @kind object;
  #L3f18e2.  v3:= v3 + 1;
  #L3f18e6.  goto L3f18d0;
  #L3f18e8.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] := v2 @kind object;
  #L3f18ec.  v2:= new `java.lang.Object`[v4];
  #L3f18f0.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.latest` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3f18f4.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3f18f8.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3f18fe.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L3f1902.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3f1906.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f190c.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L3f1910.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f1914.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f191a.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3f191e.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.delayErrors` @type ^`boolean` := v6 @kind boolean;
  #L3f1922.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1934.  v0:= 1I;
  #L3f1936.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f193a.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L3f1940.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f1954.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] @kind object;
  #L3f1958.  v1:= length @variable v0;
  #L3f195a.  v2:= 0I;
  #L3f195c.  if v2 >= v1 then goto L3f1970;
  #L3f1960.  v3:= v0[v2] @kind object;
  #L3f1964.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.cancel:()V` @kind virtual;
  #L3f196a.  v2:= v2 + 1;
  #L3f196e.  goto L3f195c;
  #L3f1970.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f176c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L3f1770.  v1:= 1I;
  #L3f1772.  if v0 == 0 then goto L3f1784;
  #L3f1776.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L3f177c.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3f1782.  return v1;
  #L3f1784.  if v3 == 0 then goto L3f1800;
  #L3f1788.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L3f178c.  if v3 == 0 then goto L3f17c2;
  #L3f1790.  if v4 == 0 then goto L3f1800;
  #L3f1794.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L3f179a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f179e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3f17a4.  v3:= temp @kind object;
  #L3f17a6.  if v3 == 0 then goto L3f17ba;
  #L3f17aa.  v4:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L3f17ae.  if v3 == v4 then goto L3f17ba;
  #L3f17b2.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f17b8.  goto L3f17c0;
  #L3f17ba.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f17c0.  return v1;
  #L3f17c2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f17c6.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3f17cc.  v3:= temp @kind object;
  #L3f17ce.  if v3 == 0 then goto L3f17ee;
  #L3f17d2.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L3f17d6.  if v3 == v0 then goto L3f17ee;
  #L3f17da.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L3f17e0.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3f17e6.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f17ec.  return v1;
  #L3f17ee.  if v4 == 0 then goto L3f1800;
  #L3f17f2.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L3f17f8.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f17fe.  return v1;
  #L3f1800.  v3:= 0I;
  #L3f1802.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1984.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f1988.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3f198e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3f19a0.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.getAndIncrement:()I` @kind virtual;
  #L3f19a6.  v0:= temp;
  #L3f19a8.  if v0 == 0 then goto L3f19ae;
  #L3f19ac.  return @kind void;
  #L3f19ae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.outputFused` @type ^`boolean` @kind boolean;
  #L3f19b2.  if v0 == 0 then goto L3f19be;
  #L3f19b6.  call `drainOutput`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drainOutput:()V` @kind virtual;
  #L3f19bc.  goto L3f19c4;
  #L3f19be.  call `drainAsync`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drainAsync:()V` @kind virtual;
  #L3f19c4.  return @kind void;
}
procedure `void` `drainAsync`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drainAsync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3f19d8.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f19dc.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f19e0.  v2:= 1I;
  #L3f19e2.  v3:= 1I;
  #L3f19e4.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f19e8.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f19ee.  v4:= temp @kind wide;
  #L3f19f0.  v6:= 0L;
  #L3f19f4.  v8:= v6 @kind wide;
  #L3f19f6.  v10:= lcmp(v8, v4);
  #L3f19fa.  if v10 == 0 then goto L3f1a94;
  #L3f19fe.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L3f1a02.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f1a08.  v11:= temp @kind object;
  #L3f1a0a.  if v11 != 0 then goto L3f1a12;
  #L3f1a0e.  v12:= 1I;
  #L3f1a10.  goto L3f1a14;
  #L3f1a12.  v12:= 0I;
  #L3f1a14.  call temp:= `checkTerminated`(v13, v10, v12, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L3f1a1a.  v10:= temp;
  #L3f1a1c.  if v10 == 0 then goto L3f1a22;
  #L3f1a20.  return @kind void;
  #L3f1a22.  if v12 == 0 then goto L3f1a28;
  #L3f1a26.  goto L3f1a94;
  #L3f1a28.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f1a2e.  v10:= temp @kind object;
  #L3f1a30.  v10:= (`java.lang.Object`[]) v10 @kind object;
  #L3f1a34.  v10:= (`java.lang.Object`[]) v10 @kind object;
  #L3f1a38.  v12:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.combiner` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f1a3c.  call temp:= `apply`(v12, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f1a42.  v10:= temp @kind object;
  #L3f1a44.  v12:= "The combiner returned a null value" @kind object;
  #L3f1a48.  call temp:= `requireNonNull`(v10, v12) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1a4e.  v10:= temp @kind object;
  #L3f1a50.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f1a56.  v11:= (`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`) v11 @kind object;
  #L3f1a5a.  call `requestOne`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.requestOne:()V` @kind virtual;
  #L3f1a60.  v10:= 1L;
  #L3f1a64.  v8:= v8 + v10 @kind long;
  #L3f1a66.  goto L3f19f6;
  #L3f1a68.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1a6a.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f1a70.  call `cancelAll`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L3f1a76.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f1a7a.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3f1a80.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f1a84.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L3f1a8a.  v1:= temp @kind object;
  #L3f1a8c.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f1a92.  return @kind void;
  #L3f1a94.  v10:= lcmp(v8, v4);
  #L3f1a98.  if v10 != 0 then goto L3f1ab6;
  #L3f1a9c.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L3f1aa0.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3f1aa6.  v11:= temp;
  #L3f1aa8.  call temp:= `checkTerminated`(v13, v10, v11, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L3f1aae.  v10:= temp;
  #L3f1ab0.  if v10 == 0 then goto L3f1ab6;
  #L3f1ab4.  return @kind void;
  #L3f1ab6.  v10:= lcmp(v8, v6);
  #L3f1aba.  if v10 == 0 then goto L3f1adc;
  #L3f1abe.  v6:= 9223372036854775807L;
  #L3f1ac8.  v10:= lcmp(v4, v6);
  #L3f1acc.  if v10 == 0 then goto L3f1adc;
  #L3f1ad0.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f1ad4.  v5:= -v8 @kind long;
  #L3f1ad6.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L3f1adc.  v3:= -v3 @kind int;
  #L3f1ade.  call temp:= `addAndGet`(v13, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.addAndGet:(I)I` @kind virtual;
  #L3f1ae4.  v3:= temp;
  #L3f1ae6.  if v3 != 0 then goto L3f19e4;
  #L3f1aea.  return @kind void;
  catch `java.lang.Throwable` @[L3f1a38..L3f1a50] goto L3f1a68;
}
procedure `void` `drainOutput`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drainOutput:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1b08.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f1b0c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f1b10.  v2:= 1I;
  #L3f1b12.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L3f1b16.  if v3 == 0 then goto L3f1b22;
  #L3f1b1a.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3f1b20.  return @kind void;
  #L3f1b22.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f1b26.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f1b2c.  v3:= temp @kind object;
  #L3f1b2e.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L3f1b32.  if v3 == 0 then goto L3f1b44;
  #L3f1b36.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3f1b3c.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f1b42.  return @kind void;
  #L3f1b44.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L3f1b48.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3f1b4e.  v4:= temp;
  #L3f1b50.  if v4 != 0 then goto L3f1b5c;
  #L3f1b54.  v5:= 0I;
  #L3f1b56.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f1b5c.  if v3 == 0 then goto L3f1b6c;
  #L3f1b60.  if v4 == 0 then goto L3f1b6c;
  #L3f1b64.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f1b6a.  return @kind void;
  #L3f1b6c.  v2:= -v2 @kind int;
  #L3f1b6e.  call temp:= `addAndGet`(v6, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.addAndGet:(I)I` @kind virtual;
  #L3f1b74.  v2:= temp;
  #L3f1b76.  if v2 != 0 then goto L3f1b12;
  #L3f1b7a.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerComplete:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f1b8c.  @monitorenter v2
  #L3f1b8e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L3f1b92.  v3:= v0[v3] @kind object;
  #L3f1b96.  v1:= 1I;
  #L3f1b98.  if v3 == 0 then goto L3f1bb6;
  #L3f1b9c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.completedSources` @type ^`int`;
  #L3f1ba0.  v3:= v3 + v1 @kind int;
  #L3f1ba2.  v0:= length @variable v0;
  #L3f1ba4.  if v3 != v0 then goto L3f1bae;
  #L3f1ba8.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` := v1 @kind boolean;
  #L3f1bac.  goto L3f1bba;
  #L3f1bae.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.completedSources` @type ^`int` := v3;
  #L3f1bb2.  @monitorexit v2
  #L3f1bb4.  return @kind void;
  #L3f1bb6.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` := v1 @kind boolean;
  #L3f1bba.  @monitorexit v2
  #L3f1bbc.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @kind virtual;
  #L3f1bc2.  return @kind void;
  #L3f1bc4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1bc6.  @monitorexit v2
  #L3f1bc8.  throw v3;
  catch `java.lang.Throwable` @[L3f1b8e..L3f1bbc] goto L3f1bc4;
  catch `java.lang.Throwable` @[L3f1bc6..L3f1bc8] goto L3f1bc4;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerError:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L3f1bf0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f1bf4.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L3f1bfa.  v0:= temp;
  #L3f1bfc.  if v0 == 0 then goto L3f1c24;
  #L3f1c00.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L3f1c04.  if v3 != 0 then goto L3f1c1c;
  #L3f1c08.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L3f1c0e.  v2:= 1I;
  #L3f1c10.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` := v2 @kind boolean;
  #L3f1c14.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @kind virtual;
  #L3f1c1a.  goto L3f1c2a;
  #L3f1c1c.  call `innerComplete`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerComplete:(I)V` @kind virtual;
  #L3f1c22.  goto L3f1c2a;
  #L3f1c24.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f1c2a.  return @kind void;
}
procedure `void` `innerValue`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerValue:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f1c3c.  @monitorenter v3
  #L3f1c3e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L3f1c42.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.nonEmptySources` @type ^`int`;
  #L3f1c46.  v2:= v0[v4] @kind object;
  #L3f1c4a.  if v2 != 0 then goto L3f1c56;
  #L3f1c4e.  v1:= v1 + 1;
  #L3f1c52.  v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.nonEmptySources` @type ^`int` := v1;
  #L3f1c56.  v0[v4]:= v5 @kind object;
  #L3f1c5a.  v5:= length @variable v0;
  #L3f1c5c.  if v5 != v1 then goto L3f1c7e;
  #L3f1c60.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f1c64.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] @kind object;
  #L3f1c68.  v1:= v1[v4] @kind object;
  #L3f1c6c.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f1c72.  v0:= temp @kind object;
  #L3f1c74.  call temp:= `offer`(v5, v1, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f1c7a.  v5:= 0I;
  #L3f1c7c.  goto L3f1c80;
  #L3f1c7e.  v5:= 1I;
  #L3f1c80.  @monitorexit v3
  #L3f1c82.  if v5 == 0 then goto L3f1c96;
  #L3f1c86.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] @kind object;
  #L3f1c8a.  v4:= v5[v4] @kind object;
  #L3f1c8e.  call `requestOne`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.requestOne:()V` @kind virtual;
  #L3f1c94.  goto L3f1c9c;
  #L3f1c96.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @kind virtual;
  #L3f1c9c.  return @kind void;
  #L3f1c9e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1ca0.  @monitorexit v3
  #L3f1ca2.  throw v4;
  catch `java.lang.Throwable` @[L3f1c3e..L3f1c82] goto L3f1c9e;
  catch `java.lang.Throwable` @[L3f1ca0..L3f1ca2] goto L3f1c9e;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1814.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f1818.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3f181e.  v0:= temp;
  #L3f1820.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f1860.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f1864.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f186a.  v0:= temp @kind object;
  #L3f186c.  if v0 != 0 then goto L3f1874;
  #L3f1870.  v0:= 0I;
  #L3f1872.  return v0 @kind object;
  #L3f1874.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f1878.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f187e.  v1:= temp @kind object;
  #L3f1880.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L3f1884.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L3f1888.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.combiner` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f188c.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f1892.  v1:= temp @kind object;
  #L3f1894.  v2:= "The combiner returned a null value" @kind object;
  #L3f1898.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f189e.  v1:= temp @kind object;
  #L3f18a0.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`) v0 @kind object;
  #L3f18a4.  call `requestOne`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.requestOne:()V` @kind virtual;
  #L3f18aa.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1cc8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f1cce.  v0:= temp;
  #L3f1cd0.  if v0 == 0 then goto L3f1ce4;
  #L3f1cd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f1cd8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f1cde.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @kind virtual;
  #L3f1ce4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1834.  v0:= v3 ^& 4;
  #L3f1838.  v1:= 0I;
  #L3f183a.  if v0 == 0 then goto L3f1840;
  #L3f183e.  return v1;
  #L3f1840.  v3:= v3 ^& 2;
  #L3f1844.  if v3 == 0 then goto L3f184a;
  #L3f1848.  v1:= 1I;
  #L3f184a.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.outputFused` @type ^`boolean` := v1 @kind boolean;
  #L3f184e.  return v3;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.subscribe:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f1cf8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] @kind object;
  #L3f1cfc.  v1:= 0I;
  #L3f1cfe.  if v1 >= v6 then goto L3f1d28;
  #L3f1d02.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L3f1d06.  if v2 != 0 then goto L3f1d28;
  #L3f1d0a.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L3f1d0e.  if v2 == 0 then goto L3f1d14;
  #L3f1d12.  goto L3f1d28;
  #L3f1d14.  v2:= v5[v1] @kind object;
  #L3f1d18.  v3:= v0[v1] @kind object;
  #L3f1d1c.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3f1d22.  v1:= v1 + 1;
  #L3f1d26.  goto L3f1cfe;
  #L3f1d28.  return @kind void;
}
