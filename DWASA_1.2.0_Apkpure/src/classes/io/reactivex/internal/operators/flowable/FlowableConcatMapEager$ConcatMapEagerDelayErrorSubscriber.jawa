record `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.subscribers.InnerQueuedSubscriberSupport` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.internal.subscribers.InnerQueuedSubscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.current` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.maxConcurrency` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.prefetch` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.subscribers` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f2cb0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f2cb6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f2cba.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f2cbe.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.maxConcurrency` @type ^`int` := v3;
  #L3f2cc2.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.prefetch` @type ^`int` := v4;
  #L3f2cc6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v5 @kind object;
  #L3f2cca.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3f2cce.  call temp:= `min`(v4, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f2cd4.  v2:= temp;
  #L3f2cd6.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3f2cdc.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.subscribers` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L3f2ce0.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3f2ce4.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3f2cea.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L3f2cee.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3f2cf2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f2cf8.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3f2cfc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f2d10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f2d14.  if v0 == 0 then goto L3f2d1a;
  #L3f2d18.  return @kind void;
  #L3f2d1a.  v0:= 1I;
  #L3f2d1c.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f2d20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f2d24.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f2d2a.  call `drainAndCancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drainAndCancel:()V` @kind virtual;
  #L3f2d30.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;

  #L3f2d44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.subscribers` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f2d48.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f2d4e.  v0:= temp @kind object;
  #L3f2d50.  v0:= (`io.reactivex.internal.subscribers.InnerQueuedSubscriber`) v0 @kind object;
  #L3f2d54.  if v0 == 0 then goto L3f2d60;
  #L3f2d58.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L3f2d5e.  goto L3f2d44;
  #L3f2d60.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v19 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L3f2d74.  v1:= v19 @kind object;
  #L3f2d78.  call temp:= `getAndIncrement`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f2d7e.  v0:= temp;
  #L3f2d80.  if v0 == 0 then goto L3f2d86;
  #L3f2d84.  return @kind void;
  #L3f2d86.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.current` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` @kind object;
  #L3f2d8a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f2d8e.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f2d92.  v5:= 1I;
  #L3f2d94.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f2d98.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f2d9e.  v6:= temp @kind wide;
  #L3f2da0.  if v0 != 0 then goto L3f2e20;
  #L3f2da4.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f2da8.  if v3 == v0 then goto L3f2dda;
  #L3f2dac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2db0.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f2db6.  v0:= temp @kind object;
  #L3f2db8.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L3f2dbc.  if v0 == 0 then goto L3f2dda;
  #L3f2dc0.  call `cancelAll`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancelAll:()V` @kind virtual;
  #L3f2dc6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2dca.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f2dd0.  v0:= temp @kind object;
  #L3f2dd2.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2dd8.  return @kind void;
  #L3f2dda.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f2dde.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.subscribers` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f2de2.  call temp:= `poll`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f2de8.  v8:= temp @kind object;
  #L3f2dea.  v8:= (`io.reactivex.internal.subscribers.InnerQueuedSubscriber`) v8 @kind object;
  #L3f2dee.  if v0 == 0 then goto L3f2e16;
  #L3f2df2.  if v8 != 0 then goto L3f2e16;
  #L3f2df6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2dfa.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f2e00.  v0:= temp @kind object;
  #L3f2e02.  if v0 == 0 then goto L3f2e0e;
  #L3f2e06.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2e0c.  goto L3f2e14;
  #L3f2e0e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f2e14.  return @kind void;
  #L3f2e16.  if v8 == 0 then goto L3f2e22;
  #L3f2e1a.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.current` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v8 @kind object;
  #L3f2e1e.  goto L3f2e22;
  #L3f2e20.  v8:= v0 @kind object;
  #L3f2e22.  v9:= 0L;
  #L3f2e26.  v11:= 0I;
  #L3f2e28.  if v8 == 0 then goto L3f2f9c;
  #L3f2e2c.  call temp:= `queue`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L3f2e32.  v12:= temp @kind object;
  #L3f2e34.  if v12 == 0 then goto L3f2f9c;
  #L3f2e38.  v16:= v5;
  #L3f2e3c.  v13:= v9 @kind wide;
  #L3f2e3e.  v4:= 1L;
  #L3f2e42.  v17:= lcmp(v13, v6);
  #L3f2e46.  if v17 == 0 then goto L3f2f0e;
  #L3f2e4a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f2e4e.  if v0 == 0 then goto L3f2e5a;
  #L3f2e52.  call `cancelAll`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancelAll:()V` @kind virtual;
  #L3f2e58.  return @kind void;
  #L3f2e5a.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f2e5e.  if v3 != v0 then goto L3f2e9a;
  #L3f2e62.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2e66.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f2e6c.  v0:= temp @kind object;
  #L3f2e6e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L3f2e72.  if v0 == 0 then goto L3f2e9a;
  #L3f2e76.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.current` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L3f2e7a.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L3f2e80.  call `cancelAll`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancelAll:()V` @kind virtual;
  #L3f2e86.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2e8a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f2e90.  v0:= temp @kind object;
  #L3f2e92.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2e98.  return @kind void;
  #L3f2e9a.  call temp:= `isDone`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L3f2ea0.  v0:= temp;
  #L3f2ea2.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f2ea8.  v15:= temp @kind object;
  #L3f2eaa.  if v15 != 0 then goto L3f2eb4;
  #L3f2eae.  v18:= 1I;
  #L3f2eb2.  goto L3f2eb8;
  #L3f2eb4.  v18:= 0I;
  #L3f2eb8.  if v0 == 0 then goto L3f2ed6;
  #L3f2ebc.  if v18 == 0 then goto L3f2ed6;
  #L3f2ec0.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.current` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L3f2ec4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f2ec8.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f2ece.  v8:= v11 @kind object;
  #L3f2ed0.  v17:= 1I;
  #L3f2ed4.  goto L3f2f12;
  #L3f2ed6.  if v18 == 0 then goto L3f2edc;
  #L3f2eda.  goto L3f2f0e;
  #L3f2edc.  call `onNext`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f2ee2.  v13:= v13 + v4 @kind long;
  #L3f2ee4.  call `requestOne`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.requestOne:()V` @kind virtual;
  #L3f2eea.  goto L3f2e3e;
  #L3f2eec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f2eee.  v3:= v0 @kind object;
  #L3f2ef0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f2ef6.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.current` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L3f2efa.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L3f2f00.  call `cancelAll`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancelAll:()V` @kind virtual;
  #L3f2f06.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2f0c.  return @kind void;
  #L3f2f0e.  v17:= 0I;
  #L3f2f12.  v0:= lcmp(v13, v6);
  #L3f2f16.  if v0 != 0 then goto L3f2f98;
  #L3f2f1a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f2f1e.  if v0 == 0 then goto L3f2f2a;
  #L3f2f22.  call `cancelAll`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancelAll:()V` @kind virtual;
  #L3f2f28.  return @kind void;
  #L3f2f2a.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f2f2e.  if v3 != v0 then goto L3f2f6a;
  #L3f2f32.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2f36.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f2f3c.  v0:= temp @kind object;
  #L3f2f3e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L3f2f42.  if v0 == 0 then goto L3f2f6a;
  #L3f2f46.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.current` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L3f2f4a.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L3f2f50.  call `cancelAll`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancelAll:()V` @kind virtual;
  #L3f2f56.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f2f5a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f2f60.  v0:= temp @kind object;
  #L3f2f62.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f2f68.  return @kind void;
  #L3f2f6a.  call temp:= `isDone`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L3f2f70.  v0:= temp;
  #L3f2f72.  call temp:= `isEmpty`(v12) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L3f2f78.  v12:= temp;
  #L3f2f7a.  if v0 == 0 then goto L3f2f98;
  #L3f2f7e.  if v12 == 0 then goto L3f2f98;
  #L3f2f82.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.current` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L3f2f86.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f2f8a.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f2f90.  v0:= v11 @kind object;
  #L3f2f92.  v17:= 1I;
  #L3f2f96.  goto L3f2fa8;
  #L3f2f98.  v0:= v8 @kind object;
  #L3f2f9a.  goto L3f2fa8;
  #L3f2f9c.  v16:= v5;
  #L3f2fa0.  v0:= v8 @kind object;
  #L3f2fa2.  v13:= v9 @kind wide;
  #L3f2fa4.  v17:= 0I;
  #L3f2fa8.  v4:= lcmp(v13, v9);
  #L3f2fac.  if v4 == 0 then goto L3f2fce;
  #L3f2fb0.  v4:= 9223372036854775807L;
  #L3f2fba.  v8:= lcmp(v6, v4);
  #L3f2fbe.  if v8 == 0 then goto L3f2fce;
  #L3f2fc2.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f2fc6.  v5:= -v13 @kind long;
  #L3f2fc8.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L3f2fce.  if v17 == 0 then goto L3f2fda;
  #L3f2fd2.  v5:= v16;
  #L3f2fd6.  goto L3f2d94;
  #L3f2fda.  v4:= v16;
  #L3f2fde.  v4:= -v4 @kind int;
  #L3f2fe0.  call temp:= `addAndGet`(v1, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.addAndGet:(I)I` @kind virtual;
  #L3f2fe6.  v5:= temp;
  #L3f2fe8.  if v5 != 0 then goto L3f2d94;
  #L3f2fec.  return @kind void;
  catch `java.lang.Throwable` @[L3f2ea2..L3f2eaa] goto L3f2eec;
}
procedure `void` `drainAndCancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drainAndCancel:()V` @AccessFlag  {
    temp;
    v0;

  #L3f300c.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f3012.  v0:= temp;
  #L3f3014.  if v0 != 0 then goto L3f302a;
  #L3f3018.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.cancelAll:()V` @kind virtual;
  #L3f301e.  call temp:= `decrementAndGet`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3f3024.  v0:= temp;
  #L3f3026.  if v0 != 0 then goto L3f3018;
  #L3f302a.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v0 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.innerComplete:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;)V` @AccessFlag PUBLIC {
    temp;

  #L3f303c.  call `setDone`(v1) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L3f3042.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drain:()V` @kind virtual;
  #L3f3048.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v1 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.innerError:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f305c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f3060.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f3066.  v0:= temp;
  #L3f3068.  if v0 == 0 then goto L3f3090;
  #L3f306c.  call `setDone`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L3f3072.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f3076.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f307a.  if v2 == v3 then goto L3f3088;
  #L3f307e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f3082.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f3088.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drain:()V` @kind virtual;
  #L3f308e.  goto L3f3096;
  #L3f3090.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f3096.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v1 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.innerNext:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f30a8.  call temp:= `queue`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L3f30ae.  v0:= temp @kind object;
  #L3f30b0.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f30b6.  v3:= temp;
  #L3f30b8.  if v3 == 0 then goto L3f30c4;
  #L3f30bc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drain:()V` @kind virtual;
  #L3f30c2.  goto L3f30da;
  #L3f30c4.  call `cancel`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L3f30ca.  v3:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3f30ce.  call `<init>`(v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L3f30d4.  call `innerError`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.innerError:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L3f30da.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f30ec.  v0:= 1I;
  #L3f30ee.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f30f2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drain:()V` @kind virtual;
  #L3f30f8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f310c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f3110.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f3116.  v0:= temp;
  #L3f3118.  if v0 == 0 then goto L3f312a;
  #L3f311c.  v2:= 1I;
  #L3f311e.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3f3122.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drain:()V` @kind virtual;
  #L3f3128.  goto L3f3130;
  #L3f312a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f3130.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3144.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f3148.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f314e.  v3:= temp @kind object;
  #L3f3150.  v0:= "The mapper returned a null Publisher" @kind object;
  #L3f3154.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f315a.  v3:= temp @kind object;
  #L3f315c.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L3f3160.  v0:= new `io.reactivex.internal.subscribers.InnerQueuedSubscriber`;
  #L3f3164.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.prefetch` @type ^`int`;
  #L3f3168.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.<init>:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriberSupport;I)V` @kind direct;
  #L3f316e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f3172.  if v1 == 0 then goto L3f3178;
  #L3f3176.  return @kind void;
  #L3f3178.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.subscribers` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3f317c.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f3182.  call `subscribe`(v3, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3f3188.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f318c.  if v3 == 0 then goto L3f319c;
  #L3f3190.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L3f3196.  call `drainAndCancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drainAndCancel:()V` @kind virtual;
  #L3f319c.  return @kind void;
  #L3f319e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f31a0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f31a6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f31aa.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f31b0.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f31b6.  return @kind void;
  catch `java.lang.Throwable` @[L3f3144..L3f3160] goto L3f319e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f31d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f31d8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f31de.  v0:= temp;
  #L3f31e0.  if v0 == 0 then goto L3f3214;
  #L3f31e4.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f31e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f31ec.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f31f2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.maxConcurrency` @type ^`int`;
  #L3f31f6.  v1:= 2147483647I;
  #L3f31fc.  if v0 != v1 then goto L3f320c;
  #L3f3200.  v0:= 9223372036854775807L;
  #L3f320a.  goto L3f320e;
  #L3f320c.  v0:= (`long`) v0 @kind i2l;
  #L3f320e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f3214.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3228.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f322e.  v0:= temp;
  #L3f3230.  if v0 == 0 then goto L3f3244;
  #L3f3234.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f3238.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f323e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber;.drain:()V` @kind virtual;
  #L3f3244.  return @kind void;
}
