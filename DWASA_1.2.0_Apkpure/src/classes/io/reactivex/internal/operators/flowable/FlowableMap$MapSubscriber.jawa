record `io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.mapper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fe868.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3fe86e.  v0.`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3fe872.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe884.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fe888.  if v0 == 0 then goto L3fe88e;
  #L3fe88c.  return @kind void;
  #L3fe88e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.sourceMode` @type ^`int`;
  #L3fe892.  if v0 == 0 then goto L3fe8a4;
  #L3fe896.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fe89a.  v0:= 0I;
  #L3fe89c.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fe8a2.  return @kind void;
  #L3fe8a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fe8a8.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fe8ae.  v2:= temp @kind object;
  #L3fe8b0.  v0:= "The mapper function returned a null value." @kind object;
  #L3fe8b4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fe8ba.  v2:= temp @kind object;
  #L3fe8bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fe8c0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fe8c6.  return @kind void;
  #L3fe8c8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe8ca.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fe8d0.  return @kind void;
  catch `java.lang.Throwable` @[L3fe8a4..L3fe8bc] goto L3fe8c8;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fe828.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3fe82c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3fe832.  v0:= temp @kind object;
  #L3fe834.  if v0 == 0 then goto L3fe852;
  #L3fe838.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fe83c.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fe842.  v0:= temp @kind object;
  #L3fe844.  v1:= "The mapper function returned a null value." @kind object;
  #L3fe848.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fe84e.  v0:= temp @kind object;
  #L3fe850.  goto L3fe854;
  #L3fe852.  v0:= 0I;
  #L3fe854.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3fe80c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3fe812.  v1:= temp;
  #L3fe814.  return v1;
}
