record `io.reactivex.internal.operators.flowable.FlowableCreate$1` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@io.reactivex.internal.operators.flowable.FlowableCreate$1.$SwitchMap$io$reactivex$BackpressureStrategy` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3f3af8.  call temp:= `values`() @signature `Lio/reactivex/BackpressureStrategy;.values:()[Lio/reactivex/BackpressureStrategy;` @kind static;
  #L3f3afe.  v0:= temp @kind object;
  #L3f3b00.  v0:= length @variable v0;
  #L3f3b02.  v0:= new `int`[v0];
  #L3f3b06.  `@@io.reactivex.internal.operators.flowable.FlowableCreate$1.$SwitchMap$io$reactivex$BackpressureStrategy` @type ^`int`[] := v0 @kind object;
  #L3f3b0a.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCreate$1.$SwitchMap$io$reactivex$BackpressureStrategy` @type ^`int`[] @kind object;
  #L3f3b0e.  v1:= `@@io.reactivex.BackpressureStrategy.MISSING` @type ^`io.reactivex.BackpressureStrategy` @kind object;
  #L3f3b12.  call temp:= `ordinal`(v1) @signature `Lio/reactivex/BackpressureStrategy;.ordinal:()I` @kind virtual;
  #L3f3b18.  v1:= temp;
  #L3f3b1a.  v2:= 1I;
  #L3f3b1c.  v0[v1]:= v2;
  #L3f3b20.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCreate$1.$SwitchMap$io$reactivex$BackpressureStrategy` @type ^`int`[] @kind object;
  #L3f3b24.  v1:= `@@io.reactivex.BackpressureStrategy.ERROR` @type ^`io.reactivex.BackpressureStrategy` @kind object;
  #L3f3b28.  call temp:= `ordinal`(v1) @signature `Lio/reactivex/BackpressureStrategy;.ordinal:()I` @kind virtual;
  #L3f3b2e.  v1:= temp;
  #L3f3b30.  v2:= 2I;
  #L3f3b32.  v0[v1]:= v2;
  #L3f3b36.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCreate$1.$SwitchMap$io$reactivex$BackpressureStrategy` @type ^`int`[] @kind object;
  #L3f3b3a.  v1:= `@@io.reactivex.BackpressureStrategy.DROP` @type ^`io.reactivex.BackpressureStrategy` @kind object;
  #L3f3b3e.  call temp:= `ordinal`(v1) @signature `Lio/reactivex/BackpressureStrategy;.ordinal:()I` @kind virtual;
  #L3f3b44.  v1:= temp;
  #L3f3b46.  v2:= 3I;
  #L3f3b48.  v0[v1]:= v2;
  #L3f3b4c.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCreate$1.$SwitchMap$io$reactivex$BackpressureStrategy` @type ^`int`[] @kind object;
  #L3f3b50.  v1:= `@@io.reactivex.BackpressureStrategy.LATEST` @type ^`io.reactivex.BackpressureStrategy` @kind object;
  #L3f3b54.  call temp:= `ordinal`(v1) @signature `Lio/reactivex/BackpressureStrategy;.ordinal:()I` @kind virtual;
  #L3f3b5a.  v1:= temp;
  #L3f3b5c.  v2:= 4I;
  #L3f3b5e.  v0[v1]:= v2;
  #L3f3b62.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L3f3b0a..L3f3b20] goto L3f3b20;
  catch `java.lang.NoSuchFieldError` @[L3f3b20..L3f3b36] goto L3f3b36;
  catch `java.lang.NoSuchFieldError` @[L3f3b36..L3f3b4c] goto L3f3b4c;
  catch `java.lang.NoSuchFieldError` @[L3f3b4c..L3f3b62] goto L3f3b62;
}
