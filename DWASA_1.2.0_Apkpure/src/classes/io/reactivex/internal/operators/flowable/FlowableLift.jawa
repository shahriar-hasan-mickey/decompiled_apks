record `io.reactivex.internal.operators.flowable.FlowableLift` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.FlowableOperator` `io.reactivex.internal.operators.flowable.FlowableLift.operator` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableLift` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.FlowableOperator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLift;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/FlowableOperator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fe418.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3fe41e.  v0.`io.reactivex.internal.operators.flowable.FlowableLift.operator` @type ^`io.reactivex.FlowableOperator` := v2 @kind object;
  #L3fe422.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableLift` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLift;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fe434.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableLift.operator` @type ^`io.reactivex.FlowableOperator` @kind object;
  #L3fe438.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/FlowableOperator;.apply:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @kind interface;
  #L3fe43e.  v3:= temp @kind object;
  #L3fe440.  if v3 == 0 then goto L3fe450;
  #L3fe444.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableLift.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3fe448.  call `subscribe`(v0, v3) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3fe44e.  return @kind void;
  #L3fe450.  v3:= new `java.lang.NullPointerException`;
  #L3fe454.  v0:= new `java.lang.StringBuilder`;
  #L3fe458.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fe45e.  v1:= "Operator " @kind object;
  #L3fe462.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fe468.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableLift.operator` @type ^`io.reactivex.FlowableOperator` @kind object;
  #L3fe46c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fe472.  v1:= " returned a null Subscriber" @kind object;
  #L3fe476.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fe47c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fe482.  v0:= temp @kind object;
  #L3fe484.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fe48a.  throw v3;
  #L3fe48c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe48e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fe494.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3fe49a.  v0:= new `java.lang.NullPointerException`;
  #L3fe49e.  v1:= "Actually not, but can't throw other exceptions due to RS" @kind object;
  #L3fe4a2.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fe4a8.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3fe4ae.  throw v0;
  #L3fe4b0.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L3fe4b2.  throw v3;
  catch `java.lang.NullPointerException` @[L3fe434..L3fe48c] goto L3fe4b0;
  catch `java.lang.Throwable` @[L3fe434..L3fe48c] goto L3fe48c;
}
