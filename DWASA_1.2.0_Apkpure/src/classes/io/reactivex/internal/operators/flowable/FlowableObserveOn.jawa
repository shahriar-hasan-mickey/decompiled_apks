record `io.reactivex.internal.operators.flowable.FlowableObserveOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn.delayError` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn.prefetch` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableObserveOn.scheduler` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L400504.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40050a.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L40050e.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn.delayError` @type ^`boolean` := v3 @kind boolean;
  #L400512.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn.prefetch` @type ^`int` := v4;
  #L400516.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableObserveOn` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L400528.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40052c.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L400532.  v0:= temp @kind object;
  #L400534.  v1:= instanceof @variable v6 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L400538.  if v1 == 0 then goto L40055e;
  #L40053c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.source` @type ^`io.reactivex.Flowable` @kind object;
  #L400540.  v2:= new `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber`;
  #L400544.  v6:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v6 @kind object;
  #L400548.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.delayError` @type ^`boolean` @kind boolean;
  #L40054c.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.prefetch` @type ^`int`;
  #L400550.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L400556.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40055c.  goto L40057a;
  #L40055e.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.source` @type ^`io.reactivex.Flowable` @kind object;
  #L400562.  v2:= new `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber`;
  #L400566.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.delayError` @type ^`boolean` @kind boolean;
  #L40056a.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.prefetch` @type ^`int`;
  #L40056e.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L400574.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40057a.  return @kind void;
}
