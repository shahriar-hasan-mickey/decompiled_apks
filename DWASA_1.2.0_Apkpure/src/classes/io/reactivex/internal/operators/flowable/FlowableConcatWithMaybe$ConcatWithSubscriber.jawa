record `io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.inMaybe` @AccessFlag ;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.other` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.otherDisposable` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe$ConcatWithSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f35c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f35c6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.other` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L3f35ca.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f35ce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f35d4.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3f35d8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe$ConcatWithSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f35ec.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @kind super;
  #L3f35f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f35f6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f35fc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe$ConcatWithSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3610.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.inMaybe` @type ^`boolean` @kind boolean;
  #L3f3614.  if v0 == 0 then goto L3f3624;
  #L3f3618.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f361c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f3622.  goto L3f3642;
  #L3f3624.  v0:= 1I;
  #L3f3626.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.inMaybe` @type ^`boolean` := v0 @kind boolean;
  #L3f362a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f362e.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f3632.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.other` @type ^`io.reactivex.MaybeSource` @kind object;
  #L3f3636.  v1:= 0I;
  #L3f3638.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.other` @type ^`io.reactivex.MaybeSource` := v1 @kind object;
  #L3f363c.  call `subscribe`(v0, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L3f3642.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe$ConcatWithSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3654.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f3658.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f365e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe$ConcatWithSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f3670.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.produced` @type ^`long` @kind wide;
  #L3f3674.  v2:= 1L;
  #L3f3678.  v0:= v0 + v2 @kind long;
  #L3f367a.  v4.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L3f367e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f3682.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f3688.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe$ConcatWithSubscriber;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f369c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f36a0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3f36a6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe$ConcatWithSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3f36b8.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe$ConcatWithSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3f36be.  return @kind void;
}
