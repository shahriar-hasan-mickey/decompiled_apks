record `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.index` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timeout` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f4c58.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f4c5e.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f4c62.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timeout` @type ^`long` := v2 @kind wide;
  #L3f4c66.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L3f4c6a.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L3f4c6e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4c80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f4c84.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f4c8a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f4c8e.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f4c94.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object, `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceEmitter` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.emit:(JLjava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f4ca8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.index` @type ^`long` @kind wide;
  #L3f4cac.  v2:= lcmp(v4, v0);
  #L3f4cb0.  if v2 != 0 then goto L3f4d02;
  #L3f4cb4.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.get:()J` @kind virtual;
  #L3f4cba.  v4:= temp @kind wide;
  #L3f4cbc.  v0:= 0L;
  #L3f4cc0.  v2:= lcmp(v4, v0);
  #L3f4cc4.  if v2 == 0 then goto L3f4ce4;
  #L3f4cc8.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4ccc.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f4cd2.  v4:= 1L;
  #L3f4cd6.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f4cdc.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;.dispose:()V` @kind virtual;
  #L3f4ce2.  goto L3f4d02;
  #L3f4ce4.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.cancel:()V` @kind virtual;
  #L3f4cea.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4cee.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3f4cf2.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L3f4cf6.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4cfc.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f4d02.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4d14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f4d18.  if v0 == 0 then goto L3f4d1e;
  #L3f4d1c.  return @kind void;
  #L3f4d1e.  v0:= 1I;
  #L3f4d20.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f4d24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3f4d28.  if v0 == 0 then goto L3f4d32;
  #L3f4d2c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3f4d32.  v0:= (`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceEmitter`) v0 @kind object;
  #L3f4d36.  if v0 == 0 then goto L3f4d40;
  #L3f4d3a.  call `emit`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;.emit:()V` @kind virtual;
  #L3f4d40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4d44.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f4d4a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f4d4e.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f4d54.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4d68.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f4d6c.  if v0 == 0 then goto L3f4d78;
  #L3f4d70.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f4d76.  return @kind void;
  #L3f4d78.  v0:= 1I;
  #L3f4d7a.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f4d7e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3f4d82.  if v0 == 0 then goto L3f4d8c;
  #L3f4d86.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3f4d8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4d90.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f4d96.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f4d9a.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f4da0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f4db4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f4db8.  if v0 == 0 then goto L3f4dbe;
  #L3f4dbc.  return @kind void;
  #L3f4dbe.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.index` @type ^`long` @kind wide;
  #L3f4dc2.  v2:= 1L;
  #L3f4dc6.  v0:= v0 + v2 @kind long;
  #L3f4dc8.  v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.index` @type ^`long` := v0 @kind wide;
  #L3f4dcc.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3f4dd0.  if v2 == 0 then goto L3f4dda;
  #L3f4dd4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3f4dda.  v2:= new `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceEmitter`;
  #L3f4dde.  call `<init>`(v2, v5, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;.<init>:(Ljava/lang/Object;JLio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;)V` @kind direct;
  #L3f4de4.  v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L3f4de8.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f4dec.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timeout` @type ^`long` @kind wide;
  #L3f4df0.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f4df4.  call temp:= `schedule`(v5, v2, v0, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f4dfa.  v5:= temp @kind object;
  #L3f4dfc.  call `setResource`(v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;.setResource:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3f4e02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4e14.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f4e18.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f4e1e.  v0:= temp;
  #L3f4e20.  if v0 == 0 then goto L3f4e42;
  #L3f4e24.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f4e28.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f4e2c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f4e32.  v0:= 9223372036854775807L;
  #L3f4e3c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f4e42.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4e54.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f4e5a.  v0:= temp;
  #L3f4e5c.  if v0 == 0 then goto L3f4e66;
  #L3f4e60.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f4e66.  return @kind void;
}
