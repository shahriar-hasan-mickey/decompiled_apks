record `io.reactivex.internal.operators.flowable.FlowableRepeatWhen` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen.handler` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40416c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L404172.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen.handler` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L404176.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L404188.  v0:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L40418c.  call `<init>`(v0, v6) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L404192.  v1:= 8I;
  #L404196.  call temp:= `create`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40419c.  v1:= temp @kind object;
  #L40419e.  call temp:= `toSerialized`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.toSerialized:()Lio/reactivex/processors/FlowableProcessor;` @kind virtual;
  #L4041a4.  v1:= temp @kind object;
  #L4041a6.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen.handler` @type ^`io.reactivex.functions.Function` @kind object;
  #L4041aa.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4041b0.  v2:= temp @kind object;
  #L4041b2.  v3:= "handler returned a null Publisher" @kind object;
  #L4041b6.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4041bc.  v2:= temp @kind object;
  #L4041be.  v2:= (`org.reactivestreams.Publisher`) v2 @kind object;
  #L4041c2.  v3:= new `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver`;
  #L4041c6.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4041ca.  call `<init>`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L4041d0.  v4:= new `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$RepeatWhenSubscriber`;
  #L4041d4.  call `<init>`(v4, v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$RepeatWhenSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/FlowableProcessor;Lorg/reactivestreams/Subscription;)V` @kind direct;
  #L4041da.  v3.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` := v4 @kind object;
  #L4041de.  call `onSubscribe`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4041e4.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4041ea.  v6:= 0I;
  #L4041ec.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4041f2.  v6:= temp @kind object;
  #L4041f4.  call `onNext`(v3, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4041fa.  return @kind void;
  #L4041fc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4041fe.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L404204.  call `error`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40420a.  return @kind void;
  catch `java.lang.Throwable` @[L4041a6..L4041c2] goto L4041fc;
}
