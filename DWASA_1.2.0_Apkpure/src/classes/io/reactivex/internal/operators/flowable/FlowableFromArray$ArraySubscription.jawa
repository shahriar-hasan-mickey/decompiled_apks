record `io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.<init>:(Lorg/reactivestreams/Subscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fa488.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L3fa48e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3fa492.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fa4a4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa4a8.  v1:= length @variable v0;
  #L3fa4aa.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fa4ae.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.index` @type ^`int`;
  #L3fa4b2.  if v3 == v1 then goto L3fa4ea;
  #L3fa4b6.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fa4ba.  if v4 == 0 then goto L3fa4c0;
  #L3fa4be.  return @kind void;
  #L3fa4c0.  v4:= v0[v3] @kind object;
  #L3fa4c4.  if v4 != 0 then goto L3fa4de;
  #L3fa4c8.  v0:= new `java.lang.NullPointerException`;
  #L3fa4cc.  v1:= "array element is null" @kind object;
  #L3fa4d0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fa4d6.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fa4dc.  return @kind void;
  #L3fa4de.  call `onNext`(v2, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fa4e4.  v3:= v3 + 1;
  #L3fa4e8.  goto L3fa4b2;
  #L3fa4ea.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fa4ee.  if v0 == 0 then goto L3fa4f4;
  #L3fa4f2.  return @kind void;
  #L3fa4f4.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fa4fa.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3fa50c.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa510.  v1:= length @variable v0;
  #L3fa512.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.index` @type ^`int`;
  #L3fa516.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fa51a.  v4:= 0L;
  #L3fa51e.  v6:= v11 @kind wide;
  #L3fa520.  v11:= v4 @kind wide;
  #L3fa522.  v8:= lcmp(v11, v6);
  #L3fa526.  if v8 == 0 then goto L3fa568;
  #L3fa52a.  if v2 == v1 then goto L3fa568;
  #L3fa52e.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fa532.  if v8 == 0 then goto L3fa538;
  #L3fa536.  return @kind void;
  #L3fa538.  v8:= v0[v2] @kind object;
  #L3fa53c.  if v8 != 0 then goto L3fa556;
  #L3fa540.  v11:= new `java.lang.NullPointerException`;
  #L3fa544.  v12:= "array element is null" @kind object;
  #L3fa548.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fa54e.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fa554.  return @kind void;
  #L3fa556.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fa55c.  v8:= 1L;
  #L3fa560.  v11:= v11 + v8 @kind long;
  #L3fa562.  v2:= v2 + 1;
  #L3fa566.  goto L3fa522;
  #L3fa568.  if v2 != v1 then goto L3fa57c;
  #L3fa56c.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fa570.  if v11 != 0 then goto L3fa57a;
  #L3fa574.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fa57a.  return @kind void;
  #L3fa57c.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.get:()J` @kind virtual;
  #L3fa582.  v6:= temp @kind wide;
  #L3fa584.  v8:= lcmp(v11, v6);
  #L3fa588.  if v8 != 0 then goto L3fa522;
  #L3fa58c.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.index` @type ^`int` := v2;
  #L3fa590.  v11:= -v11 @kind long;
  #L3fa592.  call temp:= `addAndGet`(v10, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.addAndGet:(J)J` @kind virtual;
  #L3fa598.  v6:= temp @kind wide;
  #L3fa59a.  v11:= lcmp(v6, v4);
  #L3fa59e.  if v11 != 0 then goto L3fa520;
  #L3fa5a2.  return @kind void;
}
