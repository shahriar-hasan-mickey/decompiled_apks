record `io.reactivex.internal.operators.flowable.FlowableToListSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableToListSingle.collectionSupplier` @AccessFlag FINAL;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableToListSingle.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableToListSingle` v1 @kind this, `io.reactivex.Flowable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40b9e0.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L40b9e6.  v0:= temp @kind object;
  #L40b9e8.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L40b9ee.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableToListSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40ba00.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L40ba06.  v0.`io.reactivex.internal.operators.flowable.FlowableToListSingle.source` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L40ba0a.  v0.`io.reactivex.internal.operators.flowable.FlowableToListSingle.collectionSupplier` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L40ba0e.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableToListSingle` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40b9b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToList`;
  #L40b9b8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableToListSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40b9bc.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableToListSingle.collectionSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L40b9c0.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L40b9c6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L40b9cc.  v0:= temp @kind object;
  #L40b9ce.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableToListSingle` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L40ba20.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableToListSingle.collectionSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L40ba24.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40ba2a.  v0:= temp @kind object;
  #L40ba2c.  v1:= "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L40ba30.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ba36.  v0:= temp @kind object;
  #L40ba38.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40ba3c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableToListSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40ba40.  v2:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle$ToListSubscriber`;
  #L40ba44.  call `<init>`(v2, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$ToListSubscriber;.<init>:(Lio/reactivex/SingleObserver;Ljava/util/Collection;)V` @kind direct;
  #L40ba4a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40ba50.  return @kind void;
  #L40ba52.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40ba54.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40ba5a.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L40ba60.  return @kind void;
  catch `java.lang.Throwable` @[L40ba20..L40ba3c] goto L40ba52;
}
