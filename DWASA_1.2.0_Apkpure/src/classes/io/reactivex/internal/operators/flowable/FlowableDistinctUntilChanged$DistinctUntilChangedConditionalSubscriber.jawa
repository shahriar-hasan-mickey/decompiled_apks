record `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.comparer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.hasValue` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.keySelector` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.last` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f5aa8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L3f5aae.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f5ab2.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.comparer` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L3f5ab6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5ac8.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f5ace.  v3:= temp;
  #L3f5ad0.  if v3 != 0 then goto L3f5ae2;
  #L3f5ad4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5ad8.  v0:= 1L;
  #L3f5adc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f5ae2.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f5a2c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f5a30.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f5a36.  v0:= temp @kind object;
  #L3f5a38.  if v0 != 0 then goto L3f5a40;
  #L3f5a3c.  v0:= 0I;
  #L3f5a3e.  return v0 @kind object;
  #L3f5a40.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f5a44.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f5a4a.  v1:= temp @kind object;
  #L3f5a4c.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.hasValue` @type ^`boolean` @kind boolean;
  #L3f5a50.  v3:= 1I;
  #L3f5a52.  if v2 != 0 then goto L3f5a60;
  #L3f5a56.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.hasValue` @type ^`boolean` := v3 @kind boolean;
  #L3f5a5a.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.last` @type ^`java.lang.Object` := v1 @kind object;
  #L3f5a5e.  return v0 @kind object;
  #L3f5a60.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L3f5a64.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.last` @type ^`java.lang.Object` @kind object;
  #L3f5a68.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L3f5a6e.  v2:= temp;
  #L3f5a70.  if v2 != 0 then goto L3f5a7a;
  #L3f5a74.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.last` @type ^`java.lang.Object` := v1 @kind object;
  #L3f5a78.  return v0 @kind object;
  #L3f5a7a.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.last` @type ^`java.lang.Object` := v1 @kind object;
  #L3f5a7e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.sourceMode` @type ^`int`;
  #L3f5a82.  if v0 == v3 then goto L3f5a2c;
  #L3f5a86.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5a8a.  v1:= 1L;
  #L3f5a8e.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f5a94.  goto L3f5a2c;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f5a10.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f5a16.  v1:= temp;
  #L3f5a18.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f5984.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f5988.  v1:= 0I;
  #L3f598a.  if v0 == 0 then goto L3f5990;
  #L3f598e.  return v1;
  #L3f5990.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.sourceMode` @type ^`int`;
  #L3f5994.  if v0 == 0 then goto L3f59a6;
  #L3f5998.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f599c.  call temp:= `tryOnNext`(v0, v6) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3f59a2.  v6:= temp;
  #L3f59a4.  return v6;
  #L3f59a6.  v0:= 1I;
  #L3f59a8.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f59ac.  call temp:= `apply`(v2, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f59b2.  v2:= temp @kind object;
  #L3f59b4.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.hasValue` @type ^`boolean` @kind boolean;
  #L3f59b8.  if v3 == 0 then goto L3f59d6;
  #L3f59bc.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L3f59c0.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.last` @type ^`java.lang.Object` @kind object;
  #L3f59c4.  call temp:= `test`(v3, v4, v2) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L3f59ca.  v3:= temp;
  #L3f59cc.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.last` @type ^`java.lang.Object` := v2 @kind object;
  #L3f59d0.  if v3 == 0 then goto L3f59de;
  #L3f59d4.  return v1;
  #L3f59d6.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.hasValue` @type ^`boolean` := v0 @kind boolean;
  #L3f59da.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.last` @type ^`java.lang.Object` := v2 @kind object;
  #L3f59de.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f59e2.  call `onNext`(v1, v6) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f59e8.  return v0;
  #L3f59ea.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f59ec.  call `fail`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f59f2.  return v0;
  catch `java.lang.Throwable` @[L3f59a8..L3f59de] goto L3f59ea;
}
