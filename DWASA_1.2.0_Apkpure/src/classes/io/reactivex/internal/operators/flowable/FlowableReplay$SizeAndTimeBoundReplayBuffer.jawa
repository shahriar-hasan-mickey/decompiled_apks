record `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.limit` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L405144.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.<init>:()V` @kind direct;
  #L40514a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L40514e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int` := v1;
  #L405152.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` := v2 @kind wide;
  #L405156.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L40515a.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4050f4.  v0:= new `io.reactivex.schedulers.Timed`;
  #L4050f8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L4050fc.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L405100.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L405106.  v1:= temp @kind wide;
  #L405108.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40510c.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L405112.  return v0 @kind object;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$Node` `getHead`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L405058.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40505c.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L405060.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L405066.  v0:= temp @kind wide;
  #L405068.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L40506c.  v0:= v0 - v2 @kind long;
  #L40506e.  call temp:= `get`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L405074.  v2:= temp @kind object;
  #L405076.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v2 @kind object;
  #L40507a.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L405080.  v3:= temp @kind object;
  #L405082.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L405086.  v7:= v3 @kind object;
  #L405088.  v3:= v2 @kind object;
  #L40508a.  v2:= v7 @kind object;
  #L40508c.  if v2 != 0 then goto L405092;
  #L405090.  goto L4050e2;
  #L405092.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L405096.  v4:= (`io.reactivex.schedulers.Timed`) v4 @kind object;
  #L40509a.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4050a0.  v5:= temp @kind object;
  #L4050a2.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4050a8.  v5:= temp;
  #L4050aa.  if v5 != 0 then goto L4050e2;
  #L4050ae.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4050b4.  v5:= temp @kind object;
  #L4050b6.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4050bc.  v5:= temp;
  #L4050be.  if v5 == 0 then goto L4050c4;
  #L4050c2.  goto L4050e2;
  #L4050c4.  call temp:= `time`(v4) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L4050ca.  v4:= temp @kind wide;
  #L4050cc.  v6:= lcmp(v4, v0);
  #L4050d0.  if v6 > 0 then goto L4050e2;
  #L4050d4.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4050da.  v3:= temp @kind object;
  #L4050dc.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L4050e0.  goto L405086;
  #L4050e2.  return v3 @kind object;
}
procedure `java.lang.Object` `leaveTransform`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L405124.  v1:= (`io.reactivex.schedulers.Timed`) v1 @kind object;
  #L405128.  call temp:= `value`(v1) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L40512e.  v1:= temp @kind object;
  #L405130.  return v1 @kind object;
}
procedure `void` `truncate`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L40516c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L405170.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L405174.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L40517a.  v0:= temp @kind wide;
  #L40517c.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L405180.  v0:= v0 - v2 @kind long;
  #L405182.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L405188.  v2:= temp @kind object;
  #L40518a.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v2 @kind object;
  #L40518e.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L405194.  v3:= temp @kind object;
  #L405196.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L40519a.  v4:= 0I;
  #L40519c.  v8:= v3 @kind object;
  #L40519e.  v3:= v2 @kind object;
  #L4051a0.  v2:= v8 @kind object;
  #L4051a2.  if v2 == 0 then goto L405206;
  #L4051a6.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4051aa.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int`;
  #L4051ae.  if v5 <= v6 then goto L4051d0;
  #L4051b2.  v4:= v4 + 1;
  #L4051b6.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4051ba.  v3:= v3 + -1;
  #L4051be.  v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L4051c2.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4051c8.  v3:= temp @kind object;
  #L4051ca.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L4051ce.  goto L40519c;
  #L4051d0.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4051d4.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L4051d8.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L4051de.  v5:= temp @kind wide;
  #L4051e0.  v7:= lcmp(v5, v0);
  #L4051e4.  if v7 > 0 then goto L405206;
  #L4051e8.  v4:= v4 + 1;
  #L4051ec.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4051f0.  v3:= v3 + -1;
  #L4051f4.  v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L4051f8.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4051fe.  v3:= temp @kind object;
  #L405200.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L405204.  goto L40519c;
  #L405206.  if v4 == 0 then goto L405210;
  #L40520a.  call `setFirst`(v9, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L405210.  return @kind void;
}
procedure `void` `truncateFinal`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L405224.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L405228.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40522c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L405232.  v0:= temp @kind wide;
  #L405234.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L405238.  v0:= v0 - v2 @kind long;
  #L40523a.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L405240.  v2:= temp @kind object;
  #L405242.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v2 @kind object;
  #L405246.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L40524c.  v3:= temp @kind object;
  #L40524e.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L405252.  v4:= 0I;
  #L405254.  v9:= v3 @kind object;
  #L405256.  v3:= v2 @kind object;
  #L405258.  v2:= v9 @kind object;
  #L40525a.  if v2 == 0 then goto L40529c;
  #L40525e.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L405262.  v6:= 1I;
  #L405264.  if v5 <= v6 then goto L40529c;
  #L405268.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L40526c.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L405270.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L405276.  v7:= temp @kind wide;
  #L405278.  v5:= lcmp(v7, v0);
  #L40527c.  if v5 > 0 then goto L40529c;
  #L405280.  v4:= v4 + 1;
  #L405284.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L405288.  v3:= v3 - v6 @kind int;
  #L40528a.  v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L40528e.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L405294.  v3:= temp @kind object;
  #L405296.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L40529a.  goto L405254;
  #L40529c.  if v4 == 0 then goto L4052a6;
  #L4052a0.  call `setFirst`(v10, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L4052a6.  return @kind void;
}
