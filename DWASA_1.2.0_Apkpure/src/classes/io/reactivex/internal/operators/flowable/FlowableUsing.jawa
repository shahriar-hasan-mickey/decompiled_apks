record `io.reactivex.internal.operators.flowable.FlowableUsing` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableUsing.disposer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableUsing.eager` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableUsing.resourceSupplier` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableUsing.sourceSupplier` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableUsing` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40bed8.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L40bede.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing.resourceSupplier` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L40bee2.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing.sourceSupplier` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L40bee6.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing.disposer` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L40beea.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing.eager` @type ^`boolean` := v4 @kind boolean;
  #L40beee.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableUsing` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40bf00.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableUsing.resourceSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L40bf04.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40bf0a.  v0:= temp @kind object;
  #L40bf0c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableUsing.sourceSupplier` @type ^`io.reactivex.functions.Function` @kind object;
  #L40bf10.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40bf16.  v1:= temp @kind object;
  #L40bf18.  v2:= "The sourceSupplier returned a null Publisher" @kind object;
  #L40bf1c.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40bf22.  v1:= temp @kind object;
  #L40bf24.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L40bf28.  v2:= new `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber`;
  #L40bf2c.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableUsing.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L40bf30.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableUsing.eager` @type ^`boolean` @kind boolean;
  #L40bf34.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L40bf3a.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40bf40.  return @kind void;
  #L40bf42.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bf44.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bf4a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableUsing.disposer` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L40bf4e.  call `accept`(v2, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L40bf54.  call `error`(v1, v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40bf5a.  return @kind void;
  #L40bf5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bf5e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bf64.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L40bf68.  v3:= 2I;
  #L40bf6a.  v3:= new `java.lang.Throwable`[v3];
  #L40bf6e.  v4:= 0I;
  #L40bf70.  v3[v4]:= v1 @kind object;
  #L40bf74.  v1:= 1I;
  #L40bf76.  v3[v1]:= v0 @kind object;
  #L40bf7a.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L40bf80.  call `error`(v2, v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40bf86.  return @kind void;
  #L40bf88.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bf8a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bf90.  call `error`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40bf96.  return @kind void;
  catch `java.lang.Throwable` @[L40bf00..L40bf0c] goto L40bf88;
  catch `java.lang.Throwable` @[L40bf0c..L40bf28] goto L40bf42;
  catch `java.lang.Throwable` @[L40bf4a..L40bf54] goto L40bf5c;
}
