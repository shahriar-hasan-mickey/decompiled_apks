record `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.count` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.upstream` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40935c.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L409362.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L409366.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40936c.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L409370.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L409374.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40937a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L40937e.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L409382.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.count` @type ^`int` := v3;
  #L409386.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409398.  v0:= 1I;
  #L40939a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40939e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4093a2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4093a8.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4093bc.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4093c0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4093c6.  v0:= temp;
  #L4093c8.  if v0 != 0 then goto L409460;
  #L4093cc.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4093d0.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4093d4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4093da.  v1:= temp @kind wide;
  #L4093dc.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4093e0.  if v3 == 0 then goto L4093e6;
  #L4093e4.  return @kind void;
  #L4093e6.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.done` @type ^`boolean` @kind boolean;
  #L4093ea.  if v3 == 0 then goto L409450;
  #L4093ee.  v3:= 0L;
  #L4093f2.  v5:= v3 @kind wide;
  #L4093f4.  v7:= lcmp(v5, v1);
  #L4093f8.  if v7 == 0 then goto L409428;
  #L4093fc.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L409400.  if v7 == 0 then goto L409406;
  #L409404.  return @kind void;
  #L409406.  call temp:= `poll`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40940c.  v7:= temp @kind object;
  #L40940e.  if v7 != 0 then goto L40941a;
  #L409412.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L409418.  return @kind void;
  #L40941a.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L409420.  v7:= 1L;
  #L409424.  v5:= v5 + v7 @kind long;
  #L409426.  goto L4093f4;
  #L409428.  v7:= lcmp(v5, v3);
  #L40942c.  if v7 == 0 then goto L409450;
  #L409430.  v3:= 9223372036854775807L;
  #L40943a.  v7:= lcmp(v1, v3);
  #L40943e.  if v7 == 0 then goto L409450;
  #L409442.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L409446.  v2:= -v5 @kind long;
  #L409448.  call temp:= `addAndGet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L40944e.  v1:= temp @kind wide;
  #L409450.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L409454.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40945a.  v3:= temp;
  #L40945c.  if v3 != 0 then goto L4093dc;
  #L409460.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409474.  v0:= 1I;
  #L409476.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40947a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.drain:()V` @kind virtual;
  #L409480.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409494.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409498.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40949e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4094b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.count` @type ^`int`;
  #L4094b4.  call temp:= `size`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.size:()I` @kind virtual;
  #L4094ba.  v1:= temp;
  #L4094bc.  if v0 != v1 then goto L4094c6;
  #L4094c0.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4094c6.  call temp:= `offer`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4094cc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4094e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4094e4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4094ea.  v0:= temp;
  #L4094ec.  if v0 == 0 then goto L40950e;
  #L4094f0.  v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4094f4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4094f8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4094fe.  v0:= 9223372036854775807L;
  #L409508.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40950e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409520.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L409526.  v0:= temp;
  #L409528.  if v0 == 0 then goto L40953c;
  #L40952c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L409530.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L409536.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.drain:()V` @kind virtual;
  #L40953c.  return @kind void;
}
