record `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.produced` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40f8c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40f8ca.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` := v1 @kind object;
  #L40f8ce.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @type ^`int` := v2;
  #L40f8d2.  v1:= v2 ^> 2;
  #L40f8d6.  v2:= v2 - v1 @kind int;
  #L40f8d8.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.limit` @type ^`int` := v2;
  #L40f8dc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L40f8f0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40f8f6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f908.  v0:= 1I;
  #L40f90a.  v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40f90e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind object;
  #L40f912.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L40f918.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f92c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind object;
  #L40f930.  call `error`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.error:(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L40f936.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f948.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @type ^`int`;
  #L40f94c.  v1:= 2I;
  #L40f94e.  if v0 == v1 then goto L40f95c;
  #L40f952.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L40f956.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40f95c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind object;
  #L40f960.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L40f966.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40f978.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40f97e.  v0:= temp;
  #L40f980.  if v0 == 0 then goto L40f9f4;
  #L40f984.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L40f988.  if v0 == 0 then goto L40f9d6;
  #L40f98c.  v0:= v4 @kind object;
  #L40f98e.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L40f992.  v1:= 7I;
  #L40f994.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L40f99a.  v1:= temp;
  #L40f99c.  v2:= 1I;
  #L40f99e.  if v1 != v2 then goto L40f9ba;
  #L40f9a2.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @type ^`int` := v1;
  #L40f9a6.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L40f9aa.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L40f9ae.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind object;
  #L40f9b2.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L40f9b8.  return @kind void;
  #L40f9ba.  v2:= 2I;
  #L40f9bc.  if v1 != v2 then goto L40f9d6;
  #L40f9c0.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @type ^`int` := v1;
  #L40f9c4.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L40f9c8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @type ^`int`;
  #L40f9cc.  v0:= (`long`) v0 @kind i2l;
  #L40f9ce.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40f9d4.  return @kind void;
  #L40f9d6.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L40f9da.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @type ^`int`;
  #L40f9de.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L40f9e4.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L40f9e8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @type ^`int`;
  #L40f9ec.  v0:= (`long`) v0 @kind i2l;
  #L40f9ee.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40f9f4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40fa08.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @type ^`int`;
  #L40fa0c.  v1:= 1I;
  #L40fa0e.  if v0 == v1 then goto L40fa46;
  #L40fa12.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.produced` @type ^`long` @kind wide;
  #L40fa16.  v0:= v0 + v4 @kind long;
  #L40fa18.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.limit` @type ^`int`;
  #L40fa1c.  v4:= (`long`) v4 @kind i2l;
  #L40fa1e.  v2:= lcmp(v0, v4);
  #L40fa22.  if v2 < 0 then goto L40fa42;
  #L40fa26.  v4:= 0L;
  #L40fa2a.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.produced` @type ^`long` := v4 @kind wide;
  #L40fa2e.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L40fa34.  v4:= temp @kind object;
  #L40fa36.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L40fa3a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40fa40.  goto L40fa46;
  #L40fa42.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L40fa46.  return @kind void;
}
