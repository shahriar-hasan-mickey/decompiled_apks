record `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.child` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.currentBuffer` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.currentIndexInBuffer` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.emitted` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCache$CacheState` `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.state` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.CANCELLED` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableCache$CacheState` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f108c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f1092.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.child` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f1096.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` := v2 @kind object;
  #L3f109a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3f109e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f10a4.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3f10a8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f10bc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f10c0.  v1:= -9223372036854775808L;
  #L3f10c4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L3f10ca.  v3:= temp @kind wide;
  #L3f10cc.  v0:= lcmp(v3, v1);
  #L3f10d0.  if v0 == 0 then goto L3f10de;
  #L3f10d4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f10d8.  call `removeChild`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.removeChild:(Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;)V` @kind virtual;
  #L3f10de.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription` v19 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.replay:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L3f10f0.  v0:= v19 @kind object;
  #L3f10f4.  call temp:= `getAndIncrement`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.getAndIncrement:()I` @kind virtual;
  #L3f10fa.  v1:= temp;
  #L3f10fc.  if v1 == 0 then goto L3f1102;
  #L3f1100.  return @kind void;
  #L3f1102.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.child` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f1106.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f110a.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.emitted` @type ^`long` @kind wide;
  #L3f110e.  v5:= 1I;
  #L3f1110.  v6:= 1I;
  #L3f1112.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f1118.  v7:= temp @kind wide;
  #L3f111a.  v9:= -9223372036854775808L;
  #L3f111e.  v11:= lcmp(v7, v9);
  #L3f1122.  if v11 != 0 then goto L3f1128;
  #L3f1126.  return @kind void;
  #L3f1128.  v11:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f112c.  call temp:= `size`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.size:()I` @kind virtual;
  #L3f1132.  v11:= temp;
  #L3f1134.  if v11 == 0 then goto L3f120c;
  #L3f1138.  v12:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.currentBuffer` @type ^`java.lang.Object`[] @kind object;
  #L3f113c.  if v12 != 0 then goto L3f1150;
  #L3f1140.  v12:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f1144.  call temp:= `head`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.head:()[Ljava/lang/Object;` @kind virtual;
  #L3f114a.  v12:= temp @kind object;
  #L3f114c.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.currentBuffer` @type ^`java.lang.Object`[] := v12 @kind object;
  #L3f1150.  v13:= length @variable v12;
  #L3f1152.  v13:= v13 - v5 @kind int;
  #L3f1154.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.index` @type ^`int`;
  #L3f1158.  v15:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.currentIndexInBuffer` @type ^`int`;
  #L3f115c.  if v14 >= v11 then goto L3f11b2;
  #L3f1160.  v16:= lcmp(v3, v7);
  #L3f1164.  if v16 == 0 then goto L3f11b2;
  #L3f1168.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f116e.  v16:= temp @kind wide;
  #L3f1170.  v18:= lcmp(v16, v9);
  #L3f1174.  if v18 != 0 then goto L3f117a;
  #L3f1178.  return @kind void;
  #L3f117a.  if v15 != v13 then goto L3f118c;
  #L3f117e.  v12:= v12[v13] @kind object;
  #L3f1182.  v12:= (`java.lang.Object`[]) v12 @kind object;
  #L3f1186.  v12:= (`java.lang.Object`[]) v12 @kind object;
  #L3f118a.  v15:= 0I;
  #L3f118c.  v5:= v12[v15] @kind object;
  #L3f1190.  call temp:= `accept`(v5, v1) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L3f1196.  v5:= temp;
  #L3f1198.  if v5 == 0 then goto L3f119e;
  #L3f119c.  return @kind void;
  #L3f119e.  v15:= v15 + 1;
  #L3f11a2.  v14:= v14 + 1;
  #L3f11a6.  v17:= 1L;
  #L3f11aa.  v3:= v3 + v17 @kind long;
  #L3f11ae.  v5:= 1I;
  #L3f11b0.  goto L3f115c;
  #L3f11b2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f11b8.  v17:= temp @kind wide;
  #L3f11ba.  v5:= lcmp(v17, v9);
  #L3f11be.  if v5 != 0 then goto L3f11c4;
  #L3f11c2.  return @kind void;
  #L3f11c4.  v5:= lcmp(v7, v3);
  #L3f11c8.  if v5 != 0 then goto L3f1200;
  #L3f11cc.  v5:= v12[v15] @kind object;
  #L3f11d0.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L3f11d6.  v7:= temp;
  #L3f11d8.  if v7 == 0 then goto L3f11e4;
  #L3f11dc.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f11e2.  return @kind void;
  #L3f11e4.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L3f11ea.  v7:= temp;
  #L3f11ec.  if v7 == 0 then goto L3f1200;
  #L3f11f0.  call temp:= `getError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L3f11f6.  v2:= temp @kind object;
  #L3f11f8.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f11fe.  return @kind void;
  #L3f1200.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.index` @type ^`int` := v14;
  #L3f1204.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.currentIndexInBuffer` @type ^`int` := v15;
  #L3f1208.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.currentBuffer` @type ^`java.lang.Object`[] := v12 @kind object;
  #L3f120c.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.emitted` @type ^`long` := v3 @kind wide;
  #L3f1210.  v5:= -v6 @kind int;
  #L3f1212.  call temp:= `addAndGet`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.addAndGet:(I)I` @kind virtual;
  #L3f1218.  v6:= temp;
  #L3f121a.  if v6 != 0 then goto L3f1220;
  #L3f121e.  return @kind void;
  #L3f1220.  v5:= 1I;
  #L3f1222.  goto L3f1112;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1238.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f123e.  v0:= temp;
  #L3f1240.  if v0 == 0 then goto L3f1254;
  #L3f1244.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f1248.  call temp:= `addCancel`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f124e.  call `replay`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.replay:()V` @kind virtual;
  #L3f1254.  return @kind void;
}
