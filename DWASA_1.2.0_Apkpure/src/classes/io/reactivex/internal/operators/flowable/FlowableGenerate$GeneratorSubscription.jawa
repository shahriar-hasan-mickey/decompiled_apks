record `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.Emitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.disposeState` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.generator` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.hasNext` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3faf78.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3faf7e.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3faf82.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.generator` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L3faf86.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.disposeState` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L3faf8a.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v4 @kind object;
  #L3faf8e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.dispose:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3fafe8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.disposeState` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3fafec.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3faff2.  goto L3fb002;
  #L3faff4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3faff6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3faffc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3fb002.  return @kind void;
  catch `java.lang.Throwable` @[L3fafe8..L3faff2] goto L3faff4;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fafa0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fafa4.  if v0 != 0 then goto L3fafd6;
  #L3fafa8.  v0:= 1I;
  #L3fafaa.  v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3fafae.  v0:= 1L;
  #L3fafb2.  call temp:= `add`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fafb8.  v0:= temp @kind wide;
  #L3fafba.  v2:= 0L;
  #L3fafbe.  v4:= lcmp(v0, v2);
  #L3fafc2.  if v4 != 0 then goto L3fafd6;
  #L3fafc6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` @kind object;
  #L3fafca.  v1:= 0I;
  #L3fafcc.  v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v1 @kind object;
  #L3fafd0.  call `dispose`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.dispose:(Ljava/lang/Object;)V` @kind direct;
  #L3fafd6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb020.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` @kind boolean;
  #L3fb024.  if v0 != 0 then goto L3fb038;
  #L3fb028.  v0:= 1I;
  #L3fb02a.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` := v0 @kind boolean;
  #L3fb02e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fb032.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fb038.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb04c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` @kind boolean;
  #L3fb050.  if v0 == 0 then goto L3fb05c;
  #L3fb054.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3fb05a.  goto L3fb07e;
  #L3fb05c.  if v2 != 0 then goto L3fb06e;
  #L3fb060.  v2:= new `java.lang.NullPointerException`;
  #L3fb064.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3fb068.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fb06e.  v0:= 1I;
  #L3fb070.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` := v0 @kind boolean;
  #L3fb074.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fb078.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fb07e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb090.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` @kind boolean;
  #L3fb094.  if v0 != 0 then goto L3fb0e0;
  #L3fb098.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.hasNext` @type ^`boolean` @kind boolean;
  #L3fb09c.  if v0 == 0 then goto L3fb0b6;
  #L3fb0a0.  v2:= new `java.lang.IllegalStateException`;
  #L3fb0a4.  v0:= "onNext already called in this generate turn" @kind object;
  #L3fb0a8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fb0ae.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fb0b4.  goto L3fb0e0;
  #L3fb0b6.  if v2 != 0 then goto L3fb0d0;
  #L3fb0ba.  v2:= new `java.lang.NullPointerException`;
  #L3fb0be.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3fb0c2.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fb0c8.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fb0ce.  goto L3fb0e0;
  #L3fb0d0.  v0:= 1I;
  #L3fb0d2.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L3fb0d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fb0da.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fb0e0.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3fb0f4.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3fb0fa.  v0:= temp;
  #L3fb0fc.  if v0 != 0 then goto L3fb102;
  #L3fb100.  return @kind void;
  #L3fb102.  call temp:= `add`(v9, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fb108.  v0:= temp @kind wide;
  #L3fb10a.  v2:= 0L;
  #L3fb10e.  v4:= lcmp(v0, v2);
  #L3fb112.  if v4 == 0 then goto L3fb118;
  #L3fb116.  return @kind void;
  #L3fb118.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` @kind object;
  #L3fb11c.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.generator` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L3fb120.  v4:= v10 @kind wide;
  #L3fb122.  v10:= v2 @kind wide;
  #L3fb124.  v6:= lcmp(v10, v4);
  #L3fb128.  if v6 == 0 then goto L3fb190;
  #L3fb12c.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fb130.  v7:= 0I;
  #L3fb132.  if v6 == 0 then goto L3fb142;
  #L3fb136.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v7 @kind object;
  #L3fb13a.  call `dispose`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.dispose:(Ljava/lang/Object;)V` @kind direct;
  #L3fb140.  return @kind void;
  #L3fb142.  v6:= 0I;
  #L3fb144.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.hasNext` @type ^`boolean` := v6 @kind boolean;
  #L3fb148.  v6:= 1I;
  #L3fb14a.  call temp:= `apply`(v1, v0, v9) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fb150.  v0:= temp @kind object;
  #L3fb152.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` @kind boolean;
  #L3fb156.  if v8 == 0 then goto L3fb16a;
  #L3fb15a.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` := v6 @kind boolean;
  #L3fb15e.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v7 @kind object;
  #L3fb162.  call `dispose`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.dispose:(Ljava/lang/Object;)V` @kind direct;
  #L3fb168.  return @kind void;
  #L3fb16a.  v6:= 1L;
  #L3fb16e.  v10:= v10 + v6 @kind long;
  #L3fb170.  goto L3fb124;
  #L3fb172.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fb174.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fb17a.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` := v6 @kind boolean;
  #L3fb17e.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v7 @kind object;
  #L3fb182.  call `onError`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fb188.  call `dispose`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.dispose:(Ljava/lang/Object;)V` @kind direct;
  #L3fb18e.  return @kind void;
  #L3fb190.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.get:()J` @kind virtual;
  #L3fb196.  v4:= temp @kind wide;
  #L3fb198.  v6:= lcmp(v10, v4);
  #L3fb19c.  if v6 != 0 then goto L3fb124;
  #L3fb1a0.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v0 @kind object;
  #L3fb1a4.  v10:= -v10 @kind long;
  #L3fb1a6.  call temp:= `addAndGet`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.addAndGet:(J)J` @kind virtual;
  #L3fb1ac.  v4:= temp @kind wide;
  #L3fb1ae.  v10:= lcmp(v4, v2);
  #L3fb1b2.  if v10 != 0 then goto L3fb122;
  #L3fb1b6.  return @kind void;
  catch `java.lang.Throwable` @[L3fb14a..L3fb152] goto L3fb172;
}
