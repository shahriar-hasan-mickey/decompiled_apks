record `io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.filter` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f74cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f74d2.  v0.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.filter` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L3f74d6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f74e8.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f74ee.  v3:= temp;
  #L3f74f0.  if v3 != 0 then goto L3f7502;
  #L3f74f4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f74f8.  v0:= 1L;
  #L3f74fc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f7502.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7480.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f7484.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.filter` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3f7488.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f748e.  v2:= temp @kind object;
  #L3f7490.  if v2 != 0 then goto L3f7498;
  #L3f7494.  v0:= 0I;
  #L3f7496.  return v0 @kind object;
  #L3f7498.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L3f749e.  v3:= temp;
  #L3f74a0.  if v3 == 0 then goto L3f74a6;
  #L3f74a4.  return v2 @kind object;
  #L3f74a6.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.sourceMode` @type ^`int`;
  #L3f74aa.  v3:= 2I;
  #L3f74ac.  if v2 != v3 then goto L3f7488;
  #L3f74b0.  v2:= 1L;
  #L3f74b4.  call `request`(v0, v2) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.request:(J)V` @kind interface;
  #L3f74ba.  goto L3f7488;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f7464.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f746a.  v1:= temp;
  #L3f746c.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f73fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f7400.  if v0 == 0 then goto L3f7408;
  #L3f7404.  v3:= 0I;
  #L3f7406.  return v3;
  #L3f7408.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.sourceMode` @type ^`int`;
  #L3f740c.  v1:= 1I;
  #L3f740e.  if v0 == 0 then goto L3f7420;
  #L3f7412.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f7416.  v0:= 0I;
  #L3f7418.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f741e.  return v1;
  #L3f7420.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.filter` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L3f7424.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L3f742a.  v0:= temp;
  #L3f742c.  if v0 == 0 then goto L3f743a;
  #L3f7430.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f7434.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f743a.  return v0;
  #L3f743c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f743e.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$FilterSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f7444.  return v1;
  catch `java.lang.Throwable` @[L3f7420..L3f742c] goto L3f743c;
}
