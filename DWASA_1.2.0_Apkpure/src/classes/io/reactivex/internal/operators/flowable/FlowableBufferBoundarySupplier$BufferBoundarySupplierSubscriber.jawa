record `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.boundarySupplier` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.bufferSupplier` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.other` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3ef83c.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L3ef840.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L3ef846.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L3ef84c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3ef850.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ef856.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3ef85a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L3ef85e.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.boundarySupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L3ef862.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3ef7d0.  v2:= (`java.util.Collection`) v2 @kind object;
  #L3ef7d4.  call temp:= `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L3ef7da.  v1:= temp;
  #L3ef7dc.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3ef7f0.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ef7f4.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ef7fa.  v1:= 1I;
  #L3ef7fc.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef874.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3ef878.  if v0 != 0 then goto L3ef8a8;
  #L3ef87c.  v0:= 1I;
  #L3ef87e.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3ef882.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ef886.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ef88c.  call `disposeOther`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.disposeOther:()V` @kind virtual;
  #L3ef892.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.enter:()Z` @kind virtual;
  #L3ef898.  v0:= temp;
  #L3ef89a.  if v0 == 0 then goto L3ef8a8;
  #L3ef89e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3ef8a2.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.clear:()V` @kind interface;
  #L3ef8a8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef8bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ef8c0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ef8c6.  call `disposeOther`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.disposeOther:()V` @kind virtual;
  #L3ef8cc.  return @kind void;
}
procedure `void` `disposeOther`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.disposeOther:()V` @AccessFlag  {
    temp;
    v0;

  #L3ef8e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef8e4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ef8ea.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef810.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef814.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ef81a.  v0:= temp @kind object;
  #L3ef81c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3ef820.  if v0 != v1 then goto L3ef828;
  #L3ef824.  v0:= 1I;
  #L3ef826.  goto L3ef82a;
  #L3ef828.  v0:= 0I;
  #L3ef82a.  return v0;
}
procedure `void` `next`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ef8fc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3ef900.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3ef906.  v0:= temp @kind object;
  #L3ef908.  v1:= "The buffer supplied is null" @kind object;
  #L3ef90c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ef912.  v0:= temp @kind object;
  #L3ef914.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3ef918.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.boundarySupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3ef91c.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3ef922.  v1:= temp @kind object;
  #L3ef924.  v2:= "The boundary publisher supplied is null" @kind object;
  #L3ef928.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ef92e.  v1:= temp @kind object;
  #L3ef930.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L3ef934.  v2:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber`;
  #L3ef938.  call `<init>`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;)V` @kind direct;
  #L3ef93e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef942.  call temp:= `replace`(v3, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3ef948.  v3:= temp;
  #L3ef94a.  if v3 == 0 then goto L3ef978;
  #L3ef94e.  @monitorenter v4
  #L3ef950.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3ef954.  if v3 != 0 then goto L3ef95c;
  #L3ef958.  @monitorexit v4
  #L3ef95a.  return @kind void;
  #L3ef95c.  v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3ef960.  @monitorexit v4
  #L3ef962.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3ef968.  v0:= 0I;
  #L3ef96a.  call `fastPathEmitMax`(v4, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3ef970.  goto L3ef978;
  #L3ef972.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef974.  @monitorexit v4
  #L3ef976.  throw v0;
  #L3ef978.  return @kind void;
  #L3ef97a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef97c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ef982.  v1:= 1I;
  #L3ef984.  v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L3ef988.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ef98c.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ef992.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ef996.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ef99c.  return @kind void;
  #L3ef99e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef9a0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ef9a6.  call `cancel`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.cancel:()V` @kind virtual;
  #L3ef9ac.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ef9b0.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ef9b6.  return @kind void;
  catch `java.lang.Throwable` @[L3ef8fc..L3ef918] goto L3ef99e;
  catch `java.lang.Throwable` @[L3ef918..L3ef934] goto L3ef97a;
  catch `java.lang.Throwable` @[L3ef950..L3ef962] goto L3ef972;
  catch `java.lang.Throwable` @[L3ef974..L3ef976] goto L3ef972;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ef9f0.  @monitorenter v3
  #L3ef9f2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3ef9f6.  if v0 != 0 then goto L3ef9fe;
  #L3ef9fa.  @monitorexit v3
  #L3ef9fc.  return @kind void;
  #L3ef9fe.  v1:= 0I;
  #L3efa00.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L3efa04.  @monitorexit v3
  #L3efa06.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3efa0a.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3efa10.  v0:= 1I;
  #L3efa12.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3efa16.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.enter:()Z` @kind virtual;
  #L3efa1c.  v0:= temp;
  #L3efa1e.  if v0 == 0 then goto L3efa32;
  #L3efa22.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3efa26.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3efa2a.  v2:= 0I;
  #L3efa2c.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L3efa32.  return @kind void;
  #L3efa34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efa36.  @monitorexit v3
  #L3efa38.  throw v0;
  catch `java.lang.Throwable` @[L3ef9f2..L3efa06] goto L3efa34;
  catch `java.lang.Throwable` @[L3efa36..L3efa38] goto L3efa34;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efa60.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.cancel:()V` @kind virtual;
  #L3efa66.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3efa6a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3efa70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efa84.  @monitorenter v1
  #L3efa86.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3efa8a.  if v0 != 0 then goto L3efa92;
  #L3efa8e.  @monitorexit v1
  #L3efa90.  return @kind void;
  #L3efa92.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3efa98.  @monitorexit v1
  #L3efa9a.  return @kind void;
  #L3efa9c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efa9e.  @monitorexit v1
  #L3efaa0.  throw v2;
  catch `java.lang.Throwable` @[L3efa86..L3efaa0] goto L3efa9c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3efac0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3efac4.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3efaca.  v0:= temp;
  #L3efacc.  if v0 != 0 then goto L3efad2;
  #L3efad0.  return @kind void;
  #L3efad2.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L3efad6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3efada.  v1:= 1I;
  #L3efadc.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3efae0.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3efae6.  v2:= temp @kind object;
  #L3efae8.  v3:= "The buffer supplied is null" @kind object;
  #L3efaec.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efaf2.  v2:= temp @kind object;
  #L3efaf4.  v2:= (`java.util.Collection`) v2 @kind object;
  #L3efaf8.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.buffer` @type ^`java.util.Collection` := v2 @kind object;
  #L3efafc.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.boundarySupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3efb00.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3efb06.  v2:= temp @kind object;
  #L3efb08.  v3:= "The boundary publisher supplied is null" @kind object;
  #L3efb0c.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efb12.  v2:= temp @kind object;
  #L3efb14.  v2:= (`org.reactivestreams.Publisher`) v2 @kind object;
  #L3efb18.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySubscriber`;
  #L3efb1c.  call `<init>`(v1, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;)V` @kind direct;
  #L3efb22.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3efb26.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3efb2c.  call `onSubscribe`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3efb32.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3efb36.  if v0 != 0 then goto L3efb50;
  #L3efb3a.  v3:= 9223372036854775807L;
  #L3efb44.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3efb4a.  call `subscribe`(v2, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3efb50.  return @kind void;
  #L3efb52.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efb54.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3efb5a.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L3efb5e.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3efb64.  call `error`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3efb6a.  return @kind void;
  #L3efb6c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efb6e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3efb74.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L3efb78.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3efb7e.  call `error`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3efb84.  return @kind void;
  catch `java.lang.Throwable` @[L3efadc..L3efaf8] goto L3efb6c;
  catch `java.lang.Throwable` @[L3efafc..L3efb18] goto L3efb52;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3efbb0.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$BufferBoundarySupplierSubscriber;.requested:(J)V` @kind virtual;
  #L3efbb6.  return @kind void;
}
