record `io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4052f8.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4052fe.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405310.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L405316.  v0:= temp @kind object;
  #L405318.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L40531e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L405322.  v0:= v0 + 1;
  #L405326.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int` := v0;
  #L40532a.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L40533c.  call temp:= `error`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L405342.  v1:= temp @kind object;
  #L405344.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L40534a.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L40534e.  v1:= v1 + 1;
  #L405352.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int` := v1;
  #L405356.  return @kind void;
}
procedure `void` `next`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L405368.  call temp:= `next`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L40536e.  v1:= temp @kind object;
  #L405370.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L405376.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L40537a.  v1:= v1 + 1;
  #L40537e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int` := v1;
  #L405382.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v14 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v15 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L405394.  @monitorenter v15
  #L405396.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` @kind boolean;
  #L40539a.  v1:= 1I;
  #L40539c.  if v0 == 0 then goto L4053a8;
  #L4053a0.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` := v1 @kind boolean;
  #L4053a4.  @monitorexit v15
  #L4053a6.  return @kind void;
  #L4053a8.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4053ac.  @monitorexit v15
  #L4053ae.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4053b2.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L4053b8.  v1:= temp;
  #L4053ba.  if v1 == 0 then goto L4053c0;
  #L4053be.  return @kind void;
  #L4053c0.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L4053c4.  call temp:= `index`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.index:()Ljava/lang/Object;` @kind virtual;
  #L4053ca.  v2:= temp @kind object;
  #L4053cc.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L4053d0.  v3:= 0I;
  #L4053d2.  if v2 == 0 then goto L4053e0;
  #L4053d6.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4053dc.  v2:= temp;
  #L4053de.  goto L4053e2;
  #L4053e0.  v2:= 0I;
  #L4053e2.  call temp:= `get`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.get:()J` @kind virtual;
  #L4053e8.  v4:= temp @kind wide;
  #L4053ea.  v6:= 0L;
  #L4053ee.  v8:= v4 @kind wide;
  #L4053f0.  v10:= v6 @kind wide;
  #L4053f2.  v12:= lcmp(v8, v6);
  #L4053f6.  if v12 == 0 then goto L40545e;
  #L4053fa.  if v2 >= v1 then goto L40545e;
  #L4053fe.  call temp:= `get`(v14, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L405404.  v12:= temp @kind object;
  #L405406.  call temp:= `accept`(v12, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L40540c.  v12:= temp;
  #L40540e.  if v12 == 0 then goto L405414;
  #L405412.  return @kind void;
  #L405414.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L40541a.  v12:= temp;
  #L40541c.  if v12 == 0 then goto L405422;
  #L405420.  return @kind void;
  #L405422.  v2:= v2 + 1;
  #L405426.  v12:= 1L;
  #L40542a.  v8:= v8 - v12 @kind long;
  #L40542c.  v10:= v10 + v12 @kind long;
  #L40542e.  goto L4053f2;
  #L405430.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L405432.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L405438.  call `dispose`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.dispose:()V` @kind virtual;
  #L40543e.  call temp:= `isError`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L405444.  v15:= temp;
  #L405446.  if v15 != 0 then goto L40545c;
  #L40544a.  call temp:= `isComplete`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L405450.  v15:= temp;
  #L405452.  if v15 != 0 then goto L40545c;
  #L405456.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40545c.  return @kind void;
  #L40545e.  v1:= lcmp(v10, v6);
  #L405462.  if v1 == 0 then goto L40548a;
  #L405466.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L40546c.  v1:= temp @kind object;
  #L40546e.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v1 @kind object;
  #L405472.  v1:= 9223372036854775807L;
  #L40547c.  v6:= lcmp(v4, v1);
  #L405480.  if v6 == 0 then goto L40548a;
  #L405484.  call temp:= `produced`(v15, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.produced:(J)J` @kind virtual;
  #L40548a.  @monitorenter v15
  #L40548c.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` @kind boolean;
  #L405490.  if v1 != 0 then goto L40549c;
  #L405494.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` := v3 @kind boolean;
  #L405498.  @monitorexit v15
  #L40549a.  return @kind void;
  #L40549c.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` := v3 @kind boolean;
  #L4054a0.  @monitorexit v15
  #L4054a2.  goto L4053b2;
  #L4054a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4054a6.  @monitorexit v15
  #L4054a8.  throw v0;
  #L4054aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4054ac.  @monitorexit v15
  #L4054ae.  goto L4054b2;
  #L4054b0.  throw v0;
  #L4054b2.  goto L4054b0;
  catch `java.lang.Throwable` @[L405396..L4053ae] goto L4054aa;
  catch `java.lang.Throwable` @[L405406..L40540e] goto L405430;
  catch `java.lang.Throwable` @[L40548c..L4054a8] goto L4054a4;
  catch `java.lang.Throwable` @[L4054ac..L4054ae] goto L4054aa;
}
