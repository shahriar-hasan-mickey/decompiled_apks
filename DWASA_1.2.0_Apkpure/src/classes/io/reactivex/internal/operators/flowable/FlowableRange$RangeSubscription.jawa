record `io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeSubscription;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L402bfc.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.<init>:(II)V` @kind direct;
  #L402c02.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L402c06.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L402c18.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.end` @type ^`int`;
  #L402c1c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402c20.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.index` @type ^`int`;
  #L402c24.  if v2 == v0 then goto L402c46;
  #L402c28.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402c2c.  if v3 == 0 then goto L402c32;
  #L402c30.  return @kind void;
  #L402c32.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L402c38.  v3:= temp @kind object;
  #L402c3a.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L402c40.  v2:= v2 + 1;
  #L402c44.  goto L402c24;
  #L402c46.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402c4a.  if v0 == 0 then goto L402c50;
  #L402c4e.  return @kind void;
  #L402c50.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L402c56.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L402c68.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.end` @type ^`int`;
  #L402c6c.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.index` @type ^`int`;
  #L402c70.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402c74.  v3:= 0L;
  #L402c78.  v5:= v10 @kind wide;
  #L402c7a.  v10:= v3 @kind wide;
  #L402c7c.  v7:= lcmp(v10, v5);
  #L402c80.  if v7 == 0 then goto L402cac;
  #L402c84.  if v1 == v0 then goto L402cac;
  #L402c88.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402c8c.  if v7 == 0 then goto L402c92;
  #L402c90.  return @kind void;
  #L402c92.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L402c98.  v7:= temp @kind object;
  #L402c9a.  call `onNext`(v2, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L402ca0.  v7:= 1L;
  #L402ca4.  v10:= v10 + v7 @kind long;
  #L402ca6.  v1:= v1 + 1;
  #L402caa.  goto L402c7c;
  #L402cac.  if v1 != v0 then goto L402cc0;
  #L402cb0.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402cb4.  if v10 != 0 then goto L402cbe;
  #L402cb8.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L402cbe.  return @kind void;
  #L402cc0.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeSubscription;.get:()J` @kind virtual;
  #L402cc6.  v5:= temp @kind wide;
  #L402cc8.  v7:= lcmp(v10, v5);
  #L402ccc.  if v7 != 0 then goto L402c7c;
  #L402cd0.  v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.index` @type ^`int` := v1;
  #L402cd4.  v10:= -v10 @kind long;
  #L402cd6.  call temp:= `addAndGet`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeSubscription;.addAndGet:(J)J` @kind virtual;
  #L402cdc.  v5:= temp @kind wide;
  #L402cde.  v10:= lcmp(v5, v3);
  #L402ce2.  if v10 != 0 then goto L402c7a;
  #L402ce6.  return @kind void;
}
