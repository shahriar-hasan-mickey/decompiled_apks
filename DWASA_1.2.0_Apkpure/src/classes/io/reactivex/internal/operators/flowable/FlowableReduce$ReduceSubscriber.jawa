record `io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.reducer` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L403148.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40314e.  v0.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.reducer` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L403152.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403164.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L40316a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40316e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L403174.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L403178.  v1.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40317c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L403190.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L403194.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L403198.  if v0 != v1 then goto L40319e;
  #L40319c.  return @kind void;
  #L40319e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4031a2.  v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4031a6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4031aa.  if v0 == 0 then goto L4031b6;
  #L4031ae.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4031b4.  goto L4031c0;
  #L4031b6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4031ba.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4031c0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4031d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4031d8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4031dc.  if v0 != v1 then goto L4031e8;
  #L4031e0.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4031e6.  return @kind void;
  #L4031e8.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4031ec.  v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4031f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4031f4.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4031fa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40320c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L403210.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L403214.  if v0 != v1 then goto L40321a;
  #L403218.  return @kind void;
  #L40321a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L40321e.  if v0 != 0 then goto L403228;
  #L403222.  v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L403226.  goto L40325e;
  #L403228.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.reducer` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L40322c.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L403232.  v3:= temp @kind object;
  #L403234.  v0:= "The reducer returned a null value" @kind object;
  #L403238.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40323e.  v3:= temp @kind object;
  #L403240.  v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L403244.  goto L40325e;
  #L403246.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L403248.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40324e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L403252.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L403258.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40325e.  return @kind void;
  catch `java.lang.Throwable` @[L403228..L403244] goto L403246;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40327c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L403280.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L403286.  v0:= temp;
  #L403288.  if v0 == 0 then goto L4032aa;
  #L40328c.  v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L403290.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L403294.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40329a.  v0:= 9223372036854775807L;
  #L4032a4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4032aa.  return @kind void;
}
