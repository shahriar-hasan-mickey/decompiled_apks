record `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ffa24.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3ffa2a.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle.other` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L3ffa2e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ffa40.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver`;
  #L3ffa44.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3ffa4a.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3ffa50.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3ffa54.  call `subscribe`(v2, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3ffa5a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle.other` @type ^`io.reactivex.SingleSource` @kind object;
  #L3ffa5e.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` @kind object;
  #L3ffa62.  call `subscribe`(v2, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L3ffa68.  return @kind void;
}
