record `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.processor` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$OutputCanceller;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4026dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4026e2.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4026e6.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.processor` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` := v2 @kind object;
  #L4026ea.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$OutputCanceller;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4026fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L402700.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L402706.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.processor` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` @kind object;
  #L40270a.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.dispose:()V` @kind virtual;
  #L402710.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$OutputCanceller;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402724.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402728.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40272e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.processor` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` @kind object;
  #L402732.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.dispose:()V` @kind virtual;
  #L402738.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$OutputCanceller;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40274c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402750.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L402756.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.processor` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor` @kind object;
  #L40275a.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.dispose:()V` @kind virtual;
  #L402760.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$OutputCanceller;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402774.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L402778.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40277e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$OutputCanceller;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402790.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L402794.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40279a.  v0:= temp;
  #L40279c.  if v0 == 0 then goto L4027ae;
  #L4027a0.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4027a4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4027a8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4027ae.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$OutputCanceller;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4027c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4027c4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4027ca.  return @kind void;
}
