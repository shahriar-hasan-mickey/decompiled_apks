record `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.predicate` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$InnerSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L409cf4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L409cfa.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L409cfe.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L409d02.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$InnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409d14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409d18.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409d1e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$InnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409d30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L409d34.  if v0 != 0 then goto L409d48;
  #L409d38.  v0:= 1I;
  #L409d3a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L409d3e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409d42.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L409d48.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$InnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409d5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L409d60.  if v0 != 0 then goto L409d76;
  #L409d64.  v0:= 1I;
  #L409d66.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L409d6a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409d6e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L409d74.  goto L409d7c;
  #L409d76.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L409d7c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$InnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409d90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L409d94.  if v0 != 0 then goto L409de6;
  #L409d98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409d9c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L409da2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L409da6.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L409dac.  v2:= temp;
  #L409dae.  if v2 == 0 then goto L409de6;
  #L409db2.  v2:= 1I;
  #L409db4.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L409db8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409dbc.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409dc2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409dc6.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L409dcc.  goto L409de6;
  #L409dce.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L409dd0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L409dd6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409dda.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L409de0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$InnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L409de6.  return @kind void;
  catch `java.lang.Throwable` @[L409da2..L409dae] goto L409dce;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$InnerSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409e04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409e08.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L409e0e.  v0:= temp;
  #L409e10.  if v0 == 0 then goto L409e22;
  #L409e14.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L409e18.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409e1c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L409e22.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$InnerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409e34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409e38.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L409e3e.  return @kind void;
}
