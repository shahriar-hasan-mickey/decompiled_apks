record `io.reactivex.internal.operators.flowable.FlowableInternalHelper$ZipIterableFunction` @kind class @AccessFlag FINAL extends `io.reactivex.functions.Function` @kind interface {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableInternalHelper$ZipIterableFunction.zipper` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ZipIterableFunction` v0 @kind this, `io.reactivex.functions.Function` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper$ZipIterableFunction;.<init>:(Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fd344.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fd34a.  v0.`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ZipIterableFunction.zipper` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L3fd34e.  return @kind void;
}
procedure `java.lang.Object` `apply`(`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ZipIterableFunction` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper$ZipIterableFunction;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3fd2fc.  v1:= (`java.util.List`) v1 @kind object;
  #L3fd300.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper$ZipIterableFunction;.apply:(Ljava/util/List;)Lorg/reactivestreams/Publisher;` @kind virtual;
  #L3fd306.  v1:= temp @kind object;
  #L3fd308.  return v1 @kind object;
}
procedure `org.reactivestreams.Publisher` `apply`(`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ZipIterableFunction` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper$ZipIterableFunction;.apply:(Ljava/util/List;)Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fd31c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableInternalHelper$ZipIterableFunction.zipper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fd320.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3fd326.  v1:= temp;
  #L3fd328.  v2:= 0I;
  #L3fd32a.  call temp:= `zipIterable`(v4, v0, v2, v1) @signature `Lio/reactivex/Flowable;.zipIterable:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind static;
  #L3fd330.  v4:= temp @kind object;
  #L3fd332.  return v4 @kind object;
}
