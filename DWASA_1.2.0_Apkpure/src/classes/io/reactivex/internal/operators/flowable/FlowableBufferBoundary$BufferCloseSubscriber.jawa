record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ef604.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ef60a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` := v1 @kind object;
  #L3ef60e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.index` @type ^`long` := v2 @kind wide;
  #L3ef612.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3ef624.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ef62a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef5dc.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ef5e2.  v0:= temp @kind object;
  #L3ef5e4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ef5e8.  if v0 != v1 then goto L3ef5f0;
  #L3ef5ec.  v0:= 1I;
  #L3ef5ee.  goto L3ef5f2;
  #L3ef5f0.  v0:= 0I;
  #L3ef5f2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ef63c.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ef642.  v0:= temp @kind object;
  #L3ef644.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ef648.  if v0 == v1 then goto L3ef664;
  #L3ef64c.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ef650.  call `lazySet`(v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3ef656.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L3ef65a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.index` @type ^`long` @kind wide;
  #L3ef65e.  call `close`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.close:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;J)V` @kind virtual;
  #L3ef664.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef678.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ef67e.  v0:= temp @kind object;
  #L3ef680.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ef684.  if v0 == v1 then goto L3ef69e;
  #L3ef688.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ef68c.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3ef692.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L3ef696.  call `boundaryError`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.boundaryError:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @kind virtual;
  #L3ef69c.  goto L3ef6a4;
  #L3ef69e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ef6a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef6b8.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ef6be.  v3:= temp @kind object;
  #L3ef6c0.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L3ef6c4.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ef6c8.  if v3 == v0 then goto L3ef6ea;
  #L3ef6cc.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3ef6d0.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3ef6d6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ef6dc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L3ef6e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.index` @type ^`long` @kind wide;
  #L3ef6e4.  call `close`(v3, v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.close:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;J)V` @kind virtual;
  #L3ef6ea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef6fc.  v0:= 9223372036854775807L;
  #L3ef706.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L3ef70c.  return @kind void;
}
