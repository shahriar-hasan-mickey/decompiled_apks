record `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher` @kind class @AccessFlag FINAL extends `org.reactivestreams.Publisher` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher.bufferFactory` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher.curr` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayPublisher;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L404b04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L404b0a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher.curr` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L404b0e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher.bufferFactory` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L404b12.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayPublisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L404b24.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404b28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L404b2e.  v0:= temp @kind object;
  #L404b30.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber`) v0 @kind object;
  #L404b34.  if v0 != 0 then goto L404b7a;
  #L404b38.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher.bufferFactory` @type ^`java.util.concurrent.Callable` @kind object;
  #L404b3c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L404b42.  v0:= temp @kind object;
  #L404b44.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer`) v0 @kind object;
  #L404b48.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber`;
  #L404b4c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;)V` @kind direct;
  #L404b52.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher.curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L404b56.  v2:= 0I;
  #L404b58.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L404b5e.  v0:= temp;
  #L404b60.  if v0 != 0 then goto L404b66;
  #L404b64.  goto L404b24;
  #L404b66.  v0:= v1 @kind object;
  #L404b68.  goto L404b7a;
  #L404b6a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L404b6c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L404b72.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L404b78.  return @kind void;
  #L404b7a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`;
  #L404b7e.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L404b84.  call `onSubscribe`(v4, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L404b8a.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.add:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)Z` @kind virtual;
  #L404b90.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L404b96.  v4:= temp;
  #L404b98.  if v4 == 0 then goto L404ba4;
  #L404b9c.  call `remove`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind virtual;
  #L404ba2.  return @kind void;
  #L404ba4.  call `manageRequests`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @kind virtual;
  #L404baa.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer` @kind object;
  #L404bae.  call `replay`(v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L404bb4.  return @kind void;
  catch `java.lang.Throwable` @[L404b38..L404b48] goto L404b6a;
}
