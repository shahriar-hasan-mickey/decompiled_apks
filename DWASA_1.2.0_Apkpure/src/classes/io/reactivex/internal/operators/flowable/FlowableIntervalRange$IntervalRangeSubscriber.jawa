record `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.end` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3fd664.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3fd66a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3fd66e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3fd674.  v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3fd678.  v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L3fd67c.  v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @type ^`long` := v3 @kind wide;
  #L3fd680.  v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.end` @type ^`long` := v5 @kind wide;
  #L3fd684.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fd698.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fd69c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fd6a2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fd6b4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3fd6ba.  v0:= temp;
  #L3fd6bc.  if v0 == 0 then goto L3fd6c6;
  #L3fd6c0.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fd6c6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fd6d8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fd6dc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fd6e2.  v0:= temp @kind object;
  #L3fd6e4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3fd6e8.  if v0 == v1 then goto L3fd7be;
  #L3fd6ec.  call temp:= `get`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.get:()J` @kind virtual;
  #L3fd6f2.  v0:= temp @kind wide;
  #L3fd6f4.  v2:= 0L;
  #L3fd6f8.  v4:= lcmp(v0, v2);
  #L3fd6fc.  if v4 == 0 then goto L3fd770;
  #L3fd700.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @type ^`long` @kind wide;
  #L3fd704.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fd708.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3fd70e.  v5:= temp @kind object;
  #L3fd710.  call `onNext`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fd716.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.end` @type ^`long` @kind wide;
  #L3fd71a.  v6:= lcmp(v2, v4);
  #L3fd71e.  if v6 != 0 then goto L3fd74c;
  #L3fd722.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fd726.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3fd72c.  v0:= temp @kind object;
  #L3fd72e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3fd732.  if v0 == v1 then goto L3fd740;
  #L3fd736.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fd73a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fd740.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fd744.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fd74a.  return @kind void;
  #L3fd74c.  v4:= 1L;
  #L3fd750.  v2:= v2 + v4 @kind long;
  #L3fd752.  v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @type ^`long` := v2 @kind wide;
  #L3fd756.  v2:= 9223372036854775807L;
  #L3fd760.  v4:= lcmp(v0, v2);
  #L3fd764.  if v4 == 0 then goto L3fd7be;
  #L3fd768.  call temp:= `decrementAndGet`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.decrementAndGet:()J` @kind virtual;
  #L3fd76e.  goto L3fd7be;
  #L3fd770.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fd774.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L3fd778.  v2:= new `java.lang.StringBuilder`;
  #L3fd77c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fd782.  v3:= "Can't deliver value " @kind object;
  #L3fd786.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd78c.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @type ^`long` @kind wide;
  #L3fd790.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd796.  v3:= " due to lack of requests" @kind object;
  #L3fd79a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd7a0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fd7a6.  v2:= temp @kind object;
  #L3fd7a8.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fd7ae.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fd7b4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fd7b8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3fd7be.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.setResource:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fd7d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fd7d4.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3fd7da.  return @kind void;
}
