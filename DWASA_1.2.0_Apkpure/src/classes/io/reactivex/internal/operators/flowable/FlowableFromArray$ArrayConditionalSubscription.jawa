record `io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fa354.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L3fa35a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L3fa35e.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fa370.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa374.  v1:= length @variable v0;
  #L3fa376.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3fa37a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.index` @type ^`int`;
  #L3fa37e.  if v3 == v1 then goto L3fa3b6;
  #L3fa382.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fa386.  if v4 == 0 then goto L3fa38c;
  #L3fa38a.  return @kind void;
  #L3fa38c.  v4:= v0[v3] @kind object;
  #L3fa390.  if v4 != 0 then goto L3fa3aa;
  #L3fa394.  v0:= new `java.lang.NullPointerException`;
  #L3fa398.  v1:= "array element is null" @kind object;
  #L3fa39c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fa3a2.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fa3a8.  return @kind void;
  #L3fa3aa.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3fa3b0.  v3:= v3 + 1;
  #L3fa3b4.  goto L3fa37e;
  #L3fa3b6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fa3ba.  if v0 == 0 then goto L3fa3c0;
  #L3fa3be.  return @kind void;
  #L3fa3c0.  call `onComplete`(v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L3fa3c6.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3fa3d8.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa3dc.  v1:= length @variable v0;
  #L3fa3de.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.index` @type ^`int`;
  #L3fa3e2.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3fa3e6.  v4:= 0L;
  #L3fa3ea.  v6:= v11 @kind wide;
  #L3fa3ec.  v11:= v4 @kind wide;
  #L3fa3ee.  v8:= lcmp(v11, v6);
  #L3fa3f2.  if v8 == 0 then goto L3fa43a;
  #L3fa3f6.  if v2 == v1 then goto L3fa43a;
  #L3fa3fa.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fa3fe.  if v8 == 0 then goto L3fa404;
  #L3fa402.  return @kind void;
  #L3fa404.  v8:= v0[v2] @kind object;
  #L3fa408.  if v8 != 0 then goto L3fa422;
  #L3fa40c.  v11:= new `java.lang.NullPointerException`;
  #L3fa410.  v12:= "array element is null" @kind object;
  #L3fa414.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fa41a.  call `onError`(v3, v11) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fa420.  return @kind void;
  #L3fa422.  call temp:= `tryOnNext`(v3, v8) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3fa428.  v8:= temp;
  #L3fa42a.  if v8 == 0 then goto L3fa434;
  #L3fa42e.  v8:= 1L;
  #L3fa432.  v11:= v11 + v8 @kind long;
  #L3fa434.  v2:= v2 + 1;
  #L3fa438.  goto L3fa3ee;
  #L3fa43a.  if v2 != v1 then goto L3fa44e;
  #L3fa43e.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3fa442.  if v11 != 0 then goto L3fa44c;
  #L3fa446.  call `onComplete`(v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L3fa44c.  return @kind void;
  #L3fa44e.  call temp:= `get`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.get:()J` @kind virtual;
  #L3fa454.  v6:= temp @kind wide;
  #L3fa456.  v8:= lcmp(v11, v6);
  #L3fa45a.  if v8 != 0 then goto L3fa3ee;
  #L3fa45e.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.index` @type ^`int` := v2;
  #L3fa462.  v11:= -v11 @kind long;
  #L3fa464.  call temp:= `addAndGet`(v10, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.addAndGet:(J)J` @kind virtual;
  #L3fa46a.  v6:= temp @kind wide;
  #L3fa46c.  v11:= lcmp(v6, v4);
  #L3fa470.  if v11 != 0 then goto L3fa3ec;
  #L3fa474.  return @kind void;
}
