record `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.defaultValue` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.failOnEmpty` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40764c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L407652.  v0.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.defaultValue` @type ^`java.lang.Object` := v2 @kind object;
  #L407656.  v0.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.failOnEmpty` @type ^`boolean` := v3 @kind boolean;
  #L40765a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40766c.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L407672.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407676.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40767c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407690.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L407694.  if v0 == 0 then goto L40769a;
  #L407698.  return @kind void;
  #L40769a.  v0:= 1I;
  #L40769c.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4076a0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4076a4.  v1:= 0I;
  #L4076a6.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4076aa.  if v0 != 0 then goto L4076b2;
  #L4076ae.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.defaultValue` @type ^`java.lang.Object` @kind object;
  #L4076b2.  if v0 != 0 then goto L4076e0;
  #L4076b6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.failOnEmpty` @type ^`boolean` @kind boolean;
  #L4076ba.  if v0 == 0 then goto L4076d4;
  #L4076be.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4076c2.  v1:= new `java.util.NoSuchElementException`;
  #L4076c6.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4076cc.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4076d2.  goto L4076e6;
  #L4076d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4076d8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4076de.  goto L4076e6;
  #L4076e0.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4076e6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4076f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L4076fc.  if v0 == 0 then goto L407708;
  #L407700.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L407706.  return @kind void;
  #L407708.  v0:= 1I;
  #L40770a.  v1.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40770e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407712.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407718.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40772c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L407730.  if v0 == 0 then goto L407736;
  #L407734.  return @kind void;
  #L407736.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L40773a.  if v0 == 0 then goto L407768;
  #L40773e.  v3:= 1I;
  #L407740.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L407744.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407748.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40774e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407752.  v0:= new `java.lang.IllegalArgumentException`;
  #L407756.  v1:= "Sequence contains more than one element!" @kind object;
  #L40775a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L407760.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407766.  return @kind void;
  #L407768.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L40776c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407780.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407784.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40778a.  v0:= temp;
  #L40778c.  if v0 == 0 then goto L4077ae;
  #L407790.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L407794.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407798.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40779e.  v0:= 9223372036854775807L;
  #L4077a8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4077ae.  return @kind void;
}
