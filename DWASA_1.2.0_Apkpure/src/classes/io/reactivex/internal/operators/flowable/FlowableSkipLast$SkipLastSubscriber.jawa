record `io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.skip` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L407d2c.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L407d32.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L407d36.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.skip` @type ^`int` := v2;
  #L407d3a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407d4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407d50.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L407d56.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407d68.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407d6c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L407d72.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407d84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407d88.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407d8e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L407da0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.skip` @type ^`int`;
  #L407da4.  call temp:= `size`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.size:()I` @kind virtual;
  #L407daa.  v1:= temp;
  #L407dac.  if v0 != v1 then goto L407dc4;
  #L407db0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407db4.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.poll:()Ljava/lang/Object;` @kind virtual;
  #L407dba.  v1:= temp @kind object;
  #L407dbc.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L407dc2.  goto L407dd2;
  #L407dc4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407dc8.  v1:= 1L;
  #L407dcc.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407dd2.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L407dd8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407dec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407df0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L407df6.  v0:= temp;
  #L407df8.  if v0 == 0 then goto L407e0a;
  #L407dfc.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L407e00.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L407e04.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L407e0a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407e1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407e20.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407e26.  return @kind void;
}
