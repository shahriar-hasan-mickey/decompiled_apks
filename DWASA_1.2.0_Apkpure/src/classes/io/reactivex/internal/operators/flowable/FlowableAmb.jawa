record `io.reactivex.internal.operators.flowable.FlowableAmb` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableAmb.sources` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableAmb.sourcesIterable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ee198.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L3ee19e.  v0.`io.reactivex.internal.operators.flowable.FlowableAmb.sources` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L3ee1a2.  v0.`io.reactivex.internal.operators.flowable.FlowableAmb.sourcesIterable` @type ^`java.lang.Iterable` := v2 @kind object;
  #L3ee1a6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableAmb` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ee1b8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableAmb.sources` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L3ee1bc.  v1:= 0I;
  #L3ee1be.  if v0 != 0 then goto L3ee23e;
  #L3ee1c2.  v0:= 8I;
  #L3ee1c6.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3ee1ca.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableAmb.sourcesIterable` @type ^`java.lang.Iterable` @kind object;
  #L3ee1ce.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ee1d4.  v2:= temp @kind object;
  #L3ee1d6.  v3:= 0I;
  #L3ee1d8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ee1de.  v4:= temp;
  #L3ee1e0.  if v4 == 0 then goto L3ee240;
  #L3ee1e4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ee1ea.  v4:= temp @kind object;
  #L3ee1ec.  v4:= (`org.reactivestreams.Publisher`) v4 @kind object;
  #L3ee1f0.  if v4 != 0 then goto L3ee20a;
  #L3ee1f4.  v0:= new `java.lang.NullPointerException`;
  #L3ee1f8.  v1:= "One of the sources is null" @kind object;
  #L3ee1fc.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ee202.  call `error`(v0, v7) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3ee208.  return @kind void;
  #L3ee20a.  v5:= length @variable v0;
  #L3ee20c.  if v3 != v5 then goto L3ee222;
  #L3ee210.  v5:= v3 ^> 2;
  #L3ee214.  v5:= v5 + v3 @kind int;
  #L3ee216.  v5:= new `org.reactivestreams.Publisher`[v5];
  #L3ee21a.  call `arraycopy`(v0, v1, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3ee220.  v0:= v5 @kind object;
  #L3ee222.  v5:= v3 + 1;
  #L3ee226.  v0[v3]:= v4 @kind object;
  #L3ee22a.  v3:= v5;
  #L3ee22c.  goto L3ee1d8;
  #L3ee22e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ee230.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ee236.  call `error`(v0, v7) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3ee23c.  return @kind void;
  #L3ee23e.  v3:= length @variable v0;
  #L3ee240.  if v3 != 0 then goto L3ee24c;
  #L3ee244.  call `complete`(v7) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3ee24a.  return @kind void;
  #L3ee24c.  v2:= 1I;
  #L3ee24e.  if v3 != v2 then goto L3ee25e;
  #L3ee252.  v0:= v0[v1] @kind object;
  #L3ee256.  call `subscribe`(v0, v7) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3ee25c.  return @kind void;
  #L3ee25e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableAmb$AmbCoordinator`;
  #L3ee262.  call `<init>`(v1, v7, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @kind direct;
  #L3ee268.  call `subscribe`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbCoordinator;.subscribe:([Lorg/reactivestreams/Publisher;)V` @kind virtual;
  #L3ee26e.  return @kind void;
  catch `java.lang.Throwable` @[L3ee1ca..L3ee22a] goto L3ee22e;
}
