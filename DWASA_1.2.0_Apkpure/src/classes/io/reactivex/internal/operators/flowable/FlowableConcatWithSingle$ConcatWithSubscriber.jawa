record `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.other` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.otherDisposable` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/SingleSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f3718.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f371e.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.other` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L3f3722.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f3726.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f372c.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3f3730.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3744.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @kind super;
  #L3f374a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f374e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3f3754.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3768.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3f376c.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L3f3770.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.other` @type ^`io.reactivex.SingleSource` @kind object;
  #L3f3774.  v1:= 0I;
  #L3f3776.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.other` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L3f377a.  call `subscribe`(v0, v2) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L3f3780.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3794.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f3798.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f379e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f37b0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.produced` @type ^`long` @kind wide;
  #L3f37b4.  v2:= 1L;
  #L3f37b8.  v0:= v0 + v2 @kind long;
  #L3f37ba.  v4.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L3f37be.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f37c2.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f37c8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f37dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f37e0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3f37e6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3f37f8.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L3f37fe.  return @kind void;
}
