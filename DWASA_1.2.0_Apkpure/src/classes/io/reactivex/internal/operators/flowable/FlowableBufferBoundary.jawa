record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferClose` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferOpen` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferSupplier` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3efc20.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3efc26.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferOpen` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L3efc2a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferClose` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L3efc2e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L3efc32.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3efc44.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber`;
  #L3efc48.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferOpen` @type ^`org.reactivestreams.Publisher` @kind object;
  #L3efc4c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferClose` @type ^`io.reactivex.functions.Function` @kind object;
  #L3efc50.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3efc54.  call `<init>`(v0, v5, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3efc5a.  call `onSubscribe`(v5, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3efc60.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3efc64.  call `subscribe`(v5, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3efc6a.  return @kind void;
}
