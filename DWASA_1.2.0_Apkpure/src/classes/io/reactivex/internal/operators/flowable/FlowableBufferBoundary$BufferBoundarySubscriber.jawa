record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferClose` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferOpen` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferSupplier` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.index` @AccessFlag ;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ef014.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3ef01a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3ef01e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L3ef022.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferOpen` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L3ef026.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferClose` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L3ef02a.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3ef02e.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3ef034.  v2:= temp;
  #L3ef036.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3ef03c.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L3ef040.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L3ef044.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L3ef04a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L3ef04e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3ef052.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3ef058.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3ef05c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3ef060.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ef066.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3ef06a.  v1:= new `java.util.LinkedHashMap`;
  #L3ef06e.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L3ef074.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` := v1 @kind object;
  #L3ef078.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3ef07c.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3ef082.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L3ef086.  return @kind void;
}
procedure `void` `boundaryError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.boundaryError:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L3ef098.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef09c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ef0a2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef0a6.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3ef0ac.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ef0b2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef0c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef0c8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ef0ce.  v0:= temp;
  #L3ef0d0.  if v0 == 0 then goto L3ef10c;
  #L3ef0d4.  v0:= 1I;
  #L3ef0d6.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3ef0da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef0de.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3ef0e4.  @monitorenter v1
  #L3ef0e6.  v0:= 0I;
  #L3ef0e8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` := v0 @kind object;
  #L3ef0ec.  @monitorexit v1
  #L3ef0ee.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.getAndIncrement:()I` @kind virtual;
  #L3ef0f4.  v0:= temp;
  #L3ef0f6.  if v0 == 0 then goto L3ef10c;
  #L3ef0fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3ef0fe.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3ef104.  goto L3ef10c;
  #L3ef106.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef108.  @monitorexit v1
  #L3ef10a.  throw v0;
  #L3ef10c.  return @kind void;
  catch `java.lang.Throwable` @[L3ef0e8..L3ef0ee] goto L3ef106;
  catch `java.lang.Throwable` @[L3ef108..L3ef10a] goto L3ef106;
}
procedure `void` `close`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v3 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.close:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3ef134.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef138.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3ef13e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef142.  call temp:= `size`(v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L3ef148.  v4:= temp;
  #L3ef14a.  v0:= 1I;
  #L3ef14c.  if v4 != 0 then goto L3ef15e;
  #L3ef150.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef154.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ef15a.  v4:= 1I;
  #L3ef15c.  goto L3ef160;
  #L3ef15e.  v4:= 0I;
  #L3ef160.  @monitorenter v3
  #L3ef162.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L3ef166.  if v1 != 0 then goto L3ef16e;
  #L3ef16a.  @monitorexit v3
  #L3ef16c.  return @kind void;
  #L3ef16e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3ef172.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L3ef176.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3ef17c.  v5:= temp @kind object;
  #L3ef17e.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ef184.  v5:= temp @kind object;
  #L3ef186.  call temp:= `offer`(v1, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ef18c.  @monitorexit v3
  #L3ef18e.  if v4 == 0 then goto L3ef196;
  #L3ef192.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ef196.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L3ef19c.  return @kind void;
  #L3ef19e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef1a0.  @monitorexit v3
  #L3ef1a2.  throw v4;
  catch `java.lang.Throwable` @[L3ef162..L3ef18e] goto L3ef19e;
  catch `java.lang.Throwable` @[L3ef1a0..L3ef1a2] goto L3ef19e;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3ef1c8.  call temp:= `getAndIncrement`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.getAndIncrement:()I` @kind virtual;
  #L3ef1ce.  v0:= temp;
  #L3ef1d0.  if v0 == 0 then goto L3ef1d6;
  #L3ef1d4.  return @kind void;
  #L3ef1d6.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.emitted` @type ^`long` @kind wide;
  #L3ef1da.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ef1de.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3ef1e2.  v4:= 1I;
  #L3ef1e4.  v5:= 1I;
  #L3ef1e6.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ef1ea.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3ef1f0.  v6:= temp @kind wide;
  #L3ef1f2.  v8:= lcmp(v0, v6);
  #L3ef1f6.  if v8 == 0 then goto L3ef276;
  #L3ef1fa.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3ef1fe.  if v8 == 0 then goto L3ef20a;
  #L3ef202.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3ef208.  return @kind void;
  #L3ef20a.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` @kind boolean;
  #L3ef20e.  if v8 == 0 then goto L3ef23c;
  #L3ef212.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ef216.  call temp:= `get`(v9) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ef21c.  v9:= temp @kind object;
  #L3ef21e.  if v9 == 0 then goto L3ef23c;
  #L3ef222.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3ef228.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ef22c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3ef232.  v0:= temp @kind object;
  #L3ef234.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ef23a.  return @kind void;
  #L3ef23c.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3ef242.  v9:= temp @kind object;
  #L3ef244.  v9:= (`java.util.Collection`) v9 @kind object;
  #L3ef248.  if v9 != 0 then goto L3ef250;
  #L3ef24c.  v10:= 1I;
  #L3ef24e.  goto L3ef252;
  #L3ef250.  v10:= 0I;
  #L3ef252.  if v8 == 0 then goto L3ef262;
  #L3ef256.  if v10 == 0 then goto L3ef262;
  #L3ef25a.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ef260.  return @kind void;
  #L3ef262.  if v10 == 0 then goto L3ef268;
  #L3ef266.  goto L3ef276;
  #L3ef268.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ef26e.  v8:= 1L;
  #L3ef272.  v0:= v0 + v8 @kind long;
  #L3ef274.  goto L3ef1f2;
  #L3ef276.  v8:= lcmp(v0, v6);
  #L3ef27a.  if v8 != 0 then goto L3ef2d4;
  #L3ef27e.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3ef282.  if v6 == 0 then goto L3ef28e;
  #L3ef286.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3ef28c.  return @kind void;
  #L3ef28e.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` @kind boolean;
  #L3ef292.  if v6 == 0 then goto L3ef2d4;
  #L3ef296.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ef29a.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ef2a0.  v6:= temp @kind object;
  #L3ef2a2.  if v6 == 0 then goto L3ef2c0;
  #L3ef2a6.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3ef2ac.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ef2b0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3ef2b6.  v0:= temp @kind object;
  #L3ef2b8.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ef2be.  return @kind void;
  #L3ef2c0.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3ef2c6.  v6:= temp;
  #L3ef2c8.  if v6 == 0 then goto L3ef2d4;
  #L3ef2cc.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ef2d2.  return @kind void;
  #L3ef2d4.  v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.emitted` @type ^`long` := v0 @kind wide;
  #L3ef2d8.  v5:= -v5 @kind int;
  #L3ef2da.  call temp:= `addAndGet`(v11, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.addAndGet:(I)I` @kind virtual;
  #L3ef2e0.  v5:= temp;
  #L3ef2e2.  if v5 != 0 then goto L3ef1e6;
  #L3ef2e6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ef2f8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef2fc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3ef302.  @monitorenter v3
  #L3ef304.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L3ef308.  if v0 != 0 then goto L3ef310;
  #L3ef30c.  @monitorexit v3
  #L3ef30e.  return @kind void;
  #L3ef310.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3ef316.  v0:= temp @kind object;
  #L3ef318.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ef31e.  v0:= temp @kind object;
  #L3ef320.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ef326.  v1:= temp;
  #L3ef328.  if v1 == 0 then goto L3ef344;
  #L3ef32c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ef332.  v1:= temp @kind object;
  #L3ef334.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3ef338.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3ef33c.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ef342.  goto L3ef320;
  #L3ef344.  v0:= 0I;
  #L3ef346.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` := v0 @kind object;
  #L3ef34a.  @monitorexit v3
  #L3ef34c.  v0:= 1I;
  #L3ef34e.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ef352.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L3ef358.  return @kind void;
  #L3ef35a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef35c.  @monitorexit v3
  #L3ef35e.  goto L3ef362;
  #L3ef360.  throw v0;
  #L3ef362.  goto L3ef360;
  catch `java.lang.Throwable` @[L3ef304..L3ef34c] goto L3ef35a;
  catch `java.lang.Throwable` @[L3ef35c..L3ef35e] goto L3ef35a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef388.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ef38c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3ef392.  v0:= temp;
  #L3ef394.  if v0 == 0 then goto L3ef3c0;
  #L3ef398.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef39c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3ef3a2.  @monitorenter v1
  #L3ef3a4.  v2:= 0I;
  #L3ef3a6.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` := v2 @kind object;
  #L3ef3aa.  @monitorexit v1
  #L3ef3ac.  v2:= 1I;
  #L3ef3ae.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3ef3b2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L3ef3b8.  goto L3ef3c6;
  #L3ef3ba.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef3bc.  @monitorexit v1
  #L3ef3be.  throw v2;
  #L3ef3c0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ef3c6.  return @kind void;
  catch `java.lang.Throwable` @[L3ef3a6..L3ef3ac] goto L3ef3ba;
  catch `java.lang.Throwable` @[L3ef3bc..L3ef3be] goto L3ef3ba;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef3ec.  @monitorenter v2
  #L3ef3ee.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L3ef3f2.  if v0 != 0 then goto L3ef3fa;
  #L3ef3f6.  @monitorexit v2
  #L3ef3f8.  return @kind void;
  #L3ef3fa.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3ef400.  v0:= temp @kind object;
  #L3ef402.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ef408.  v0:= temp @kind object;
  #L3ef40a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ef410.  v1:= temp;
  #L3ef412.  if v1 == 0 then goto L3ef42a;
  #L3ef416.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ef41c.  v1:= temp @kind object;
  #L3ef41e.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3ef422.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ef428.  goto L3ef40a;
  #L3ef42a.  @monitorexit v2
  #L3ef42c.  return @kind void;
  #L3ef42e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef430.  @monitorexit v2
  #L3ef432.  goto L3ef436;
  #L3ef434.  throw v3;
  #L3ef436.  goto L3ef434;
  catch `java.lang.Throwable` @[L3ef3ee..L3ef432] goto L3ef42e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef454.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef458.  call temp:= `setOnce`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3ef45e.  v0:= temp;
  #L3ef460.  if v0 == 0 then goto L3ef492;
  #L3ef464.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber`;
  #L3ef468.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;)V` @kind direct;
  #L3ef46e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef472.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3ef478.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferOpen` @type ^`org.reactivestreams.Publisher` @kind object;
  #L3ef47c.  call `subscribe`(v1, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3ef482.  v0:= 9223372036854775807L;
  #L3ef48c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ef492.  return @kind void;
}
procedure `void` `open`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.open:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ef4a4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3ef4a8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3ef4ae.  v0:= temp @kind object;
  #L3ef4b0.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L3ef4b4.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ef4ba.  v0:= temp @kind object;
  #L3ef4bc.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3ef4c0.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferClose` @type ^`io.reactivex.functions.Function` @kind object;
  #L3ef4c4.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ef4ca.  v6:= temp @kind object;
  #L3ef4cc.  v1:= "The bufferClose returned a null Publisher" @kind object;
  #L3ef4d0.  call temp:= `requireNonNull`(v6, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ef4d6.  v6:= temp @kind object;
  #L3ef4d8.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L3ef4dc.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.index` @type ^`long` @kind wide;
  #L3ef4e0.  v3:= 1L;
  #L3ef4e4.  v3:= v3 + v1 @kind long;
  #L3ef4e6.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.index` @type ^`long` := v3 @kind wide;
  #L3ef4ea.  @monitorenter v5
  #L3ef4ec.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L3ef4f0.  if v3 != 0 then goto L3ef4f8;
  #L3ef4f4.  @monitorexit v5
  #L3ef4f6.  return @kind void;
  #L3ef4f8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3ef4fe.  v4:= temp @kind object;
  #L3ef500.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ef506.  @monitorexit v5
  #L3ef508.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber`;
  #L3ef50c.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;J)V` @kind direct;
  #L3ef512.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef516.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3ef51c.  call `subscribe`(v6, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3ef522.  return @kind void;
  #L3ef524.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef526.  @monitorexit v5
  #L3ef528.  throw v6;
  #L3ef52a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef52c.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ef532.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef536.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ef53c.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ef542.  return @kind void;
  catch `java.lang.Throwable` @[L3ef4a4..L3ef4dc] goto L3ef52a;
  catch `java.lang.Throwable` @[L3ef4ec..L3ef508] goto L3ef524;
  catch `java.lang.Throwable` @[L3ef526..L3ef528] goto L3ef524;
}
procedure `void` `openComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.openComplete:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;)V` @AccessFlag  {
    temp;
    v0;

  #L3ef574.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef578.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3ef57e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3ef582.  call temp:= `size`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L3ef588.  v2:= temp;
  #L3ef58a.  if v2 != 0 then goto L3ef5a4;
  #L3ef58e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ef592.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ef598.  v2:= 1I;
  #L3ef59a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L3ef59e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L3ef5a4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef5b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ef5bc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3ef5c2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L3ef5c8.  return @kind void;
}
