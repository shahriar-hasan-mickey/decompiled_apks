record `io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer.limit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeBoundReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4052b8.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.<init>:()V` @kind direct;
  #L4052be.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer.limit` @type ^`int` := v1;
  #L4052c2.  return @kind void;
}
procedure `void` `truncate`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeBoundReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4052d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer.size` @type ^`int`;
  #L4052d8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeBoundReplayBuffer.limit` @type ^`int`;
  #L4052dc.  if v0 <= v1 then goto L4052e6;
  #L4052e0.  call `removeFirst`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeBoundReplayBuffer;.removeFirst:()V` @kind virtual;
  #L4052e6.  return @kind void;
}
