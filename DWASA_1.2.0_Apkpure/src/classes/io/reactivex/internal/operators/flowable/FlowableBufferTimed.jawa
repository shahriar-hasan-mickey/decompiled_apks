record `io.reactivex.internal.operators.flowable.FlowableBufferTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.bufferSupplier` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.maxSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.restartTimerOnMaxSize` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.timeskip` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `java.util.concurrent.Callable` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f0c1c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f0c22.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timespan` @type ^`long` := v2 @kind wide;
  #L3f0c26.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timeskip` @type ^`long` := v4 @kind wide;
  #L3f0c2a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.unit` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L3f0c2e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.scheduler` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L3f0c32.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.bufferSupplier` @type ^`java.util.concurrent.Callable` := v8 @kind object;
  #L3f0c36.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.maxSize` @type ^`int` := v9;
  #L3f0c3a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.restartTimerOnMaxSize` @type ^`boolean` := v10 @kind boolean;
  #L3f0c3e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed` v11 @kind this, `org.reactivestreams.Subscriber` v12 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3f0c50.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timespan` @type ^`long` @kind wide;
  #L3f0c54.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timeskip` @type ^`long` @kind wide;
  #L3f0c58.  v4:= lcmp(v0, v2);
  #L3f0c5c.  if v4 != 0 then goto L3f0ca0;
  #L3f0c60.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.maxSize` @type ^`int`;
  #L3f0c64.  v1:= 2147483647I;
  #L3f0c6a.  if v0 != v1 then goto L3f0ca0;
  #L3f0c6e.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f0c72.  v8:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber`;
  #L3f0c76.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L3f0c7a.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f0c80.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0c84.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timespan` @type ^`long` @kind wide;
  #L3f0c88.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0c8c.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L3f0c90.  v1:= v8 @kind object;
  #L3f0c92.  call `<init>`(v1, v2, v3, v4, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactUnboundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f0c98.  call `subscribe`(v0, v8) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f0c9e.  return @kind void;
  #L3f0ca0.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L3f0ca4.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L3f0caa.  v9:= temp @kind object;
  #L3f0cac.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timespan` @type ^`long` @kind wide;
  #L3f0cb0.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timeskip` @type ^`long` @kind wide;
  #L3f0cb4.  v4:= lcmp(v0, v2);
  #L3f0cb8.  if v4 != 0 then goto L3f0cf2;
  #L3f0cbc.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f0cc0.  v10:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber`;
  #L3f0cc4.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L3f0cc8.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f0cce.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0cd2.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timespan` @type ^`long` @kind wide;
  #L3f0cd6.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0cda.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.maxSize` @type ^`int`;
  #L3f0cde.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L3f0ce2.  v1:= v10 @kind object;
  #L3f0ce4.  call `<init>`(v1, v2, v3, v4, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L3f0cea.  call `subscribe`(v0, v10) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f0cf0.  return @kind void;
  #L3f0cf2.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f0cf6.  v10:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber`;
  #L3f0cfa.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L3f0cfe.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f0d04.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0d08.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timespan` @type ^`long` @kind wide;
  #L3f0d0c.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.timeskip` @type ^`long` @kind wide;
  #L3f0d10.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0d14.  v1:= v10 @kind object;
  #L3f0d16.  call `<init>`(v1, v2, v3, v4, v6, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L3f0d1c.  call `subscribe`(v0, v10) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f0d22.  return @kind void;
}
