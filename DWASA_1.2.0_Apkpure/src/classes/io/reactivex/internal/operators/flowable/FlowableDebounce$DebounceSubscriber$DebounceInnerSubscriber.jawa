record `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.done` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.index` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.once` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.parent` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.value` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v2 @kind object, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f4834.  call `<init>`(v1) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L3f483a.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3f483e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3f4844.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L3f4848.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` := v2 @kind object;
  #L3f484c.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.index` @type ^`long` := v3 @kind wide;
  #L3f4850.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.value` @type ^`java.lang.Object` := v5 @kind object;
  #L3f4854.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f4868.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3f486c.  v1:= 0I;
  #L3f486e.  v2:= 1I;
  #L3f4870.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3f4876.  v0:= temp;
  #L3f4878.  if v0 == 0 then goto L3f488e;
  #L3f487c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` @kind object;
  #L3f4880.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.index` @type ^`long` @kind wide;
  #L3f4884.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L3f4888.  call `emit`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.emit:(JLjava/lang/Object;)V` @kind virtual;
  #L3f488e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f48a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f48a4.  if v0 == 0 then goto L3f48aa;
  #L3f48a8.  return @kind void;
  #L3f48aa.  v0:= 1I;
  #L3f48ac.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f48b0.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.emit:()V` @kind virtual;
  #L3f48b6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f48c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f48cc.  if v0 == 0 then goto L3f48d8;
  #L3f48d0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f48d6.  return @kind void;
  #L3f48d8.  v0:= 1I;
  #L3f48da.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f48de.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` @kind object;
  #L3f48e2.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f48e8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3f48fc.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f4900.  if v1 == 0 then goto L3f4906;
  #L3f4904.  return @kind void;
  #L3f4906.  v1:= 1I;
  #L3f4908.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L3f490c.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.cancel:()V` @kind virtual;
  #L3f4912.  call `emit`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$DebounceInnerSubscriber;.emit:()V` @kind virtual;
  #L3f4918.  return @kind void;
}
