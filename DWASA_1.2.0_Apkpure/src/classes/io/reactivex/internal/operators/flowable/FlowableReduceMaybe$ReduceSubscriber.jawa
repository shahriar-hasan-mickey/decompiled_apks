record `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.done` @AccessFlag ;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.reducer` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$ReduceSubscriber;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4032d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4032da.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4032de.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.reducer` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L4032e2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$ReduceSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4032f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4032f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4032fe.  v0:= 1I;
  #L403300.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L403304.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$ReduceSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4032bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L4032c0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$ReduceSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L403318.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L40331c.  if v0 == 0 then goto L403322;
  #L403320.  return @kind void;
  #L403322.  v0:= 1I;
  #L403324.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L403328.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L40332c.  if v0 == 0 then goto L40333c;
  #L403330.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L403334.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40333a.  goto L403346;
  #L40333c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L403340.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L403346.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$ReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403358.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L40335c.  if v0 == 0 then goto L403368;
  #L403360.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L403366.  return @kind void;
  #L403368.  v0:= 1I;
  #L40336a.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40336e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L403372.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L403378.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$ReduceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40338c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L403390.  if v0 == 0 then goto L403396;
  #L403394.  return @kind void;
  #L403396.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L40339a.  if v0 != 0 then goto L4033a4;
  #L40339e.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4033a2.  goto L4033da;
  #L4033a4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.reducer` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4033a8.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4033ae.  v3:= temp @kind object;
  #L4033b0.  v0:= "The reducer returned a null value" @kind object;
  #L4033b4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4033ba.  v3:= temp @kind object;
  #L4033bc.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4033c0.  goto L4033da;
  #L4033c2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4033c4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4033ca.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4033ce.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4033d4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$ReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4033da.  return @kind void;
  catch `java.lang.Throwable` @[L4033a4..L4033c0] goto L4033c2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$ReduceSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4033f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4033fc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L403402.  v0:= temp;
  #L403404.  if v0 == 0 then goto L403426;
  #L403408.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40340c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L403410.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L403416.  v0:= 9223372036854775807L;
  #L403420.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L403426.  return @kind void;
}
