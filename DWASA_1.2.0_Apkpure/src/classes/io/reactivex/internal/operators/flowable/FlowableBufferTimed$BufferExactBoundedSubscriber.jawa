record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.bufferSupplier` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.consumerIndex` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.maxSize` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.producerIndex` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.restartTimerOnMaxSize` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.timer` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.timespan` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `int` v7 , `boolean` v8 , `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f00ac.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L3f00b0.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L3f00b6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L3f00bc.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L3f00c0.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.timespan` @type ^`long` := v4 @kind wide;
  #L3f00c4.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L3f00c8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.maxSize` @type ^`int` := v7;
  #L3f00cc.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.restartTimerOnMaxSize` @type ^`boolean` := v8 @kind boolean;
  #L3f00d0.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L3f00d4.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f0050.  v2:= (`java.util.Collection`) v2 @kind object;
  #L3f0054.  call temp:= `accept`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L3f005a.  v1:= temp;
  #L3f005c.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f0070.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f0076.  v1:= 1I;
  #L3f0078.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f00e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f00ec.  if v0 != 0 then goto L3f00fc;
  #L3f00f0.  v0:= 1I;
  #L3f00f2.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f00f6.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.dispose:()V` @kind virtual;
  #L3f00fc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0110.  @monitorenter v1
  #L3f0112.  v0:= 0I;
  #L3f0114.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3f0118.  @monitorexit v1
  #L3f011a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f011e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f0124.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0128.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f012e.  return @kind void;
  #L3f0130.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0132.  @monitorexit v1
  #L3f0134.  throw v0;
  catch `java.lang.Throwable` @[L3f0114..L3f011a] goto L3f0130;
  catch `java.lang.Throwable` @[L3f0132..L3f0134] goto L3f0130;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f008c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0090.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/Scheduler$Worker;.isDisposed:()Z` @kind virtual;
  #L3f0096.  v0:= temp;
  #L3f0098.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f015c.  @monitorenter v3
  #L3f015e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3f0162.  v1:= 0I;
  #L3f0164.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L3f0168.  @monitorexit v3
  #L3f016a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f016e.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0174.  v0:= 1I;
  #L3f0176.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f017a.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.enter:()Z` @kind virtual;
  #L3f0180.  v0:= temp;
  #L3f0182.  if v0 == 0 then goto L3f0196;
  #L3f0186.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3f018a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f018e.  v2:= 0I;
  #L3f0190.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L3f0196.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f019a.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f01a0.  return @kind void;
  #L3f01a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f01a4.  @monitorexit v3
  #L3f01a6.  throw v0;
  catch `java.lang.Throwable` @[L3f015e..L3f016a] goto L3f01a2;
  catch `java.lang.Throwable` @[L3f01a4..L3f01a6] goto L3f01a2;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f01cc.  @monitorenter v1
  #L3f01ce.  v0:= 0I;
  #L3f01d0.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3f01d4.  @monitorexit v1
  #L3f01d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f01da.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f01e0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f01e4.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f01ea.  return @kind void;
  #L3f01ec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f01ee.  @monitorexit v1
  #L3f01f0.  throw v2;
  catch `java.lang.Throwable` @[L3f01d0..L3f01d6] goto L3f01ec;
  catch `java.lang.Throwable` @[L3f01ee..L3f01f0] goto L3f01ec;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f0218.  @monitorenter v7
  #L3f021a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3f021e.  if v0 != 0 then goto L3f0226;
  #L3f0222.  @monitorexit v7
  #L3f0224.  return @kind void;
  #L3f0226.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f022c.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3f0232.  v8:= temp;
  #L3f0234.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.maxSize` @type ^`int`;
  #L3f0238.  if v8 >= v1 then goto L3f0240;
  #L3f023c.  @monitorexit v7
  #L3f023e.  return @kind void;
  #L3f0240.  v8:= 0I;
  #L3f0242.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` := v8 @kind object;
  #L3f0246.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.producerIndex` @type ^`long` @kind wide;
  #L3f024a.  v3:= 1L;
  #L3f024e.  v1:= v1 + v3 @kind long;
  #L3f0250.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.producerIndex` @type ^`long` := v1 @kind wide;
  #L3f0254.  @monitorexit v7
  #L3f0256.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L3f025a.  if v8 == 0 then goto L3f0268;
  #L3f025e.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.timer` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3f0262.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3f0268.  v8:= 0I;
  #L3f026a.  call `fastPathOrderedEmitMax`(v7, v0, v8, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3f0270.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0274.  call temp:= `call`(v8) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f027a.  v8:= temp @kind object;
  #L3f027c.  v0:= "The supplied buffer is null" @kind object;
  #L3f0280.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0286.  v8:= temp @kind object;
  #L3f0288.  v8:= (`java.util.Collection`) v8 @kind object;
  #L3f028c.  @monitorenter v7
  #L3f028e.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` := v8 @kind object;
  #L3f0292.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.consumerIndex` @type ^`long` @kind wide;
  #L3f0296.  v0:= v0 + v3 @kind long;
  #L3f0298.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.consumerIndex` @type ^`long` := v0 @kind wide;
  #L3f029c.  @monitorexit v7
  #L3f029e.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.restartTimerOnMaxSize` @type ^`boolean` @kind boolean;
  #L3f02a2.  if v8 == 0 then goto L3f02c2;
  #L3f02a6.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f02aa.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.timespan` @type ^`long` @kind wide;
  #L3f02ae.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f02b2.  v1:= v7 @kind object;
  #L3f02b4.  v2:= v4 @kind wide;
  #L3f02b6.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f02bc.  v8:= temp @kind object;
  #L3f02be.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.timer` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L3f02c2.  return @kind void;
  #L3f02c4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f02c6.  @monitorexit v7
  #L3f02c8.  throw v8;
  #L3f02ca.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f02cc.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f02d2.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.cancel:()V` @kind virtual;
  #L3f02d8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f02dc.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f02e2.  return @kind void;
  #L3f02e4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f02e6.  @monitorexit v7
  #L3f02e8.  throw v8;
  catch `java.lang.Throwable` @[L3f021a..L3f0256] goto L3f02e4;
  catch `java.lang.Throwable` @[L3f0270..L3f028c] goto L3f02ca;
  catch `java.lang.Throwable` @[L3f028e..L3f029e] goto L3f02c4;
  catch `java.lang.Throwable` @[L3f02c6..L3f02c8] goto L3f02c4;
  catch `java.lang.Throwable` @[L3f02e6..L3f02e8] goto L3f02e4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f032c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f0330.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f0336.  v0:= temp;
  #L3f0338.  if v0 != 0 then goto L3f033e;
  #L3f033c.  return @kind void;
  #L3f033e.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L3f0342.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f0346.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f034c.  v0:= temp @kind object;
  #L3f034e.  v1:= "The supplied buffer is null" @kind object;
  #L3f0352.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0358.  v0:= temp @kind object;
  #L3f035a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3f035e.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3f0362.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f0366.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f036c.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f0370.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.timespan` @type ^`long` @kind wide;
  #L3f0374.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0378.  v2:= v8 @kind object;
  #L3f037a.  v3:= v5 @kind wide;
  #L3f037c.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f0382.  v0:= temp @kind object;
  #L3f0384.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.timer` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L3f0388.  v0:= 9223372036854775807L;
  #L3f0392.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f0398.  return @kind void;
  #L3f039a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f039c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f03a2.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3f03a6.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3f03ac.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f03b2.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f03b6.  call `error`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3f03bc.  return @kind void;
  catch `java.lang.Throwable` @[L3f0342..L3f035e] goto L3f039a;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3f03dc.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.requested:(J)V` @kind virtual;
  #L3f03e2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f03f4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3f03f8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f03fe.  v0:= temp @kind object;
  #L3f0400.  v1:= "The supplied buffer is null" @kind object;
  #L3f0404.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f040a.  v0:= temp @kind object;
  #L3f040c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3f0410.  @monitorenter v7
  #L3f0412.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3f0416.  if v1 == 0 then goto L3f043c;
  #L3f041a.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.producerIndex` @type ^`long` @kind wide;
  #L3f041e.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.consumerIndex` @type ^`long` @kind wide;
  #L3f0422.  v6:= lcmp(v2, v4);
  #L3f0426.  if v6 == 0 then goto L3f042c;
  #L3f042a.  goto L3f043c;
  #L3f042c.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3f0430.  @monitorexit v7
  #L3f0432.  v0:= 0I;
  #L3f0434.  call `fastPathOrderedEmitMax`(v7, v1, v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L3f043a.  return @kind void;
  #L3f043c.  @monitorexit v7
  #L3f043e.  return @kind void;
  #L3f0440.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0442.  @monitorexit v7
  #L3f0444.  throw v0;
  #L3f0446.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0448.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f044e.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferExactBoundedSubscriber;.cancel:()V` @kind virtual;
  #L3f0454.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f0458.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f045e.  return @kind void;
  catch `java.lang.Throwable` @[L3f03f4..L3f0410] goto L3f0446;
  catch `java.lang.Throwable` @[L3f0412..L3f0432] goto L3f0440;
  catch `java.lang.Throwable` @[L3f043c..L3f0444] goto L3f0440;
}
