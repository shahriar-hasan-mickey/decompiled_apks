record `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSelectorSupport` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.itemTimeoutIndicator` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40acac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40acb2.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40acb6.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.itemTimeoutIndicator` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L40acba.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L40acbe.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L40acc4.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L40acc8.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40accc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40acd2.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40acd6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40acda.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40ace0.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40ace4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40acf8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40acfc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ad02.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40ad06.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40ad0c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40ad20.  v0:= 9223372036854775807L;
  #L40ad2a.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.getAndSet:(J)J` @kind virtual;
  #L40ad30.  v2:= temp @kind wide;
  #L40ad32.  v4:= lcmp(v2, v0);
  #L40ad36.  if v4 == 0 then goto L40ad4e;
  #L40ad3a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40ad3e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40ad44.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ad48.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40ad4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40ad60.  v0:= 9223372036854775807L;
  #L40ad6a.  call temp:= `getAndSet`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.getAndSet:(J)J` @kind virtual;
  #L40ad70.  v2:= temp @kind wide;
  #L40ad72.  v4:= lcmp(v2, v0);
  #L40ad76.  if v4 == 0 then goto L40ad90;
  #L40ad7a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40ad7e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40ad84.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ad88.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ad8e.  goto L40ad96;
  #L40ad90.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40ad96.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40ada8.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.get:()J` @kind virtual;
  #L40adae.  v0:= temp @kind wide;
  #L40adb0.  v2:= 9223372036854775807L;
  #L40adba.  v4:= lcmp(v0, v2);
  #L40adbe.  if v4 == 0 then goto L40ae66;
  #L40adc2.  v4:= 1L;
  #L40adc6.  v4:= v4 + v0 @kind long;
  #L40adc8.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L40adce.  v0:= temp;
  #L40add0.  if v0 != 0 then goto L40add6;
  #L40add4.  goto L40ae66;
  #L40add6.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40adda.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40ade0.  v0:= temp @kind object;
  #L40ade2.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L40ade6.  if v0 == 0 then goto L40adf0;
  #L40adea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40adf0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40adf4.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40adfa.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.itemTimeoutIndicator` @type ^`io.reactivex.functions.Function` @kind object;
  #L40adfe.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40ae04.  v7:= temp @kind object;
  #L40ae06.  v0:= "The itemTimeoutIndicator returned a null Publisher." @kind object;
  #L40ae0a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ae10.  v7:= temp @kind object;
  #L40ae12.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L40ae16.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer`;
  #L40ae1a.  call `<init>`(v0, v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSelectorSupport;)V` @kind direct;
  #L40ae20.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40ae24.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40ae2a.  v1:= temp;
  #L40ae2c.  if v1 == 0 then goto L40ae36;
  #L40ae30.  call `subscribe`(v7, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40ae36.  return @kind void;
  #L40ae38.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40ae3a.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40ae40.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ae44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40ae4a.  v0:= temp @kind object;
  #L40ae4c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L40ae50.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ae56.  call temp:= `getAndSet`(v6, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.getAndSet:(J)J` @kind virtual;
  #L40ae5c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ae60.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ae66.  return @kind void;
  catch `java.lang.Throwable` @[L40adfa..L40ae16] goto L40ae38;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40ae84.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ae88.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40ae8c.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40ae92.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40aea4.  v0:= 9223372036854775807L;
  #L40aeae.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L40aeb4.  v3:= temp;
  #L40aeb6.  if v3 == 0 then goto L40aed8;
  #L40aeba.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40aebe.  call temp:= `cancel`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40aec4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40aec8.  v4:= new `java.util.concurrent.TimeoutException`;
  #L40aecc.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L40aed2.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40aed8.  return @kind void;
}
procedure `void` `onTimeoutError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v2 @kind this, `long` v3 , `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onTimeoutError:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40aeec.  v0:= 9223372036854775807L;
  #L40aef6.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L40aefc.  v3:= temp;
  #L40aefe.  if v3 == 0 then goto L40af18;
  #L40af02.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40af06.  call temp:= `cancel`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40af0c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40af10.  call `onError`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40af16.  goto L40af1e;
  #L40af18.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40af1e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40af30.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40af34.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40af38.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L40af3e.  return @kind void;
}
procedure `void` `startFirstTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v3 @kind this, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.startFirstTimeout:(Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40af50.  if v4 == 0 then goto L40af78;
  #L40af54.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer`;
  #L40af58.  v1:= 0L;
  #L40af5c.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSelectorSupport;)V` @kind direct;
  #L40af62.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40af66.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40af6c.  v1:= temp;
  #L40af6e.  if v1 == 0 then goto L40af78;
  #L40af72.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40af78.  return @kind void;
}
