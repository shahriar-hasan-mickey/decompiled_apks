record `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.combiner` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber`[] `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.subscribers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.values` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40ef04.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40ef0a.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L40ef0e.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.combiner` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L40ef12.  v2:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber`[v4];
  #L40ef16.  v3:= 0I;
  #L40ef18.  if v3 >= v4 then goto L40ef30;
  #L40ef1c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber`;
  #L40ef20.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;I)V` @kind direct;
  #L40ef26.  v2[v3]:= v0 @kind object;
  #L40ef2a.  v3:= v3 + 1;
  #L40ef2e.  goto L40ef18;
  #L40ef30.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber`[] := v2 @kind object;
  #L40ef34.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L40ef38.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L40ef3e.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L40ef42.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40ef46.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40ef4c.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L40ef50.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40ef54.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40ef5a.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L40ef5e.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L40ef62.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L40ef68.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L40ef6c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40ef80.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ef84.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ef8a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber`[] @kind object;
  #L40ef8e.  v1:= length @variable v0;
  #L40ef90.  v2:= 0I;
  #L40ef92.  if v2 >= v1 then goto L40efa6;
  #L40ef96.  v3:= v0[v2] @kind object;
  #L40ef9a.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.dispose:()V` @kind virtual;
  #L40efa0.  v2:= v2 + 1;
  #L40efa4.  goto L40ef92;
  #L40efa6.  return @kind void;
}
procedure `void` `cancelAllBut`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.cancelAllBut:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40efb8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber`[] @kind object;
  #L40efbc.  v1:= 0I;
  #L40efbe.  v2:= length @variable v0;
  #L40efc0.  if v1 >= v2 then goto L40efd8;
  #L40efc4.  if v1 == v4 then goto L40efd2;
  #L40efc8.  v2:= v0[v1] @kind object;
  #L40efcc.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestInnerSubscriber;.dispose:()V` @kind virtual;
  #L40efd2.  v1:= v1 + 1;
  #L40efd6.  goto L40efbe;
  #L40efd8.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.innerComplete:(IZ)V` @AccessFlag  {
    temp;

  #L40efec.  if v2 != 0 then goto L40f014;
  #L40eff0.  v2:= 1I;
  #L40eff2.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L40eff6.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40effa.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40f000.  call `cancelAllBut`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.cancelAllBut:(I)V` @kind virtual;
  #L40f006.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40f00a.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f00e.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L40f014.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.innerError:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L40f028.  v0:= 1I;
  #L40f02a.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40f02e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40f032.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40f038.  call `cancelAllBut`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.cancelAllBut:(I)V` @kind virtual;
  #L40f03e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40f042.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f046.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L40f04c.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.innerNext:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L40f060.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L40f064.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L40f06a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f07c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @type ^`boolean` @kind boolean;
  #L40f080.  if v0 != 0 then goto L40f0a0;
  #L40f084.  v0:= 1I;
  #L40f086.  v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40f08a.  v0:= -1I;
  #L40f08c.  call `cancelAllBut`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.cancelAllBut:(I)V` @kind virtual;
  #L40f092.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40f096.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f09a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L40f0a0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f0b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @type ^`boolean` @kind boolean;
  #L40f0b8.  if v0 == 0 then goto L40f0c4;
  #L40f0bc.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40f0c2.  return @kind void;
  #L40f0c4.  v0:= 1I;
  #L40f0c6.  v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40f0ca.  v0:= -1I;
  #L40f0cc.  call `cancelAllBut`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.cancelAllBut:(I)V` @kind virtual;
  #L40f0d2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40f0d6.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f0da.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L40f0e0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f0f4.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L40f0fa.  v3:= temp;
  #L40f0fc.  if v3 != 0 then goto L40f122;
  #L40f100.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @type ^`boolean` @kind boolean;
  #L40f104.  if v3 != 0 then goto L40f122;
  #L40f108.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40f10c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40f112.  v3:= temp @kind object;
  #L40f114.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L40f118.  v0:= 1L;
  #L40f11c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40f122.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f134.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40f138.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f13c.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40f142.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f154.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40f158.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f15c.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L40f162.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v5 @kind this, `org.reactivestreams.Publisher`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.subscribe:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40f174.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestInnerSubscriber`[] @kind object;
  #L40f178.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40f17c.  v2:= 0I;
  #L40f17e.  if v2 >= v7 then goto L40f1b0;
  #L40f182.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40f188.  v3:= temp @kind object;
  #L40f18a.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L40f18e.  call temp:= `isCancelled`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40f194.  v3:= temp;
  #L40f196.  if v3 == 0 then goto L40f19c;
  #L40f19a.  return @kind void;
  #L40f19c.  v3:= v6[v2] @kind object;
  #L40f1a0.  v4:= v0[v2] @kind object;
  #L40f1a4.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40f1aa.  v2:= v2 + 1;
  #L40f1ae.  goto L40f17e;
  #L40f1b0.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40ee64.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.done` @type ^`boolean` @kind boolean;
  #L40ee68.  v1:= 0I;
  #L40ee6a.  if v0 == 0 then goto L40ee70;
  #L40ee6e.  return v1;
  #L40ee70.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L40ee74.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L40ee7a.  v2:= temp;
  #L40ee7c.  v3:= v2 + 1;
  #L40ee80.  v3:= new `java.lang.Object`[v3];
  #L40ee84.  v3[v1]:= v6 @kind object;
  #L40ee88.  v6:= 0I;
  #L40ee8a.  if v6 >= v2 then goto L40eea6;
  #L40ee8e.  call temp:= `get`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L40ee94.  v4:= temp @kind object;
  #L40ee96.  if v4 != 0 then goto L40ee9c;
  #L40ee9a.  return v1;
  #L40ee9c.  v6:= v6 + 1;
  #L40eea0.  v3[v6]:= v4 @kind object;
  #L40eea4.  goto L40ee8a;
  #L40eea6.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.combiner` @type ^`io.reactivex.functions.Function` @kind object;
  #L40eeaa.  call temp:= `apply`(v6, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40eeb0.  v6:= temp @kind object;
  #L40eeb2.  v0:= "The combiner returned a null value" @kind object;
  #L40eeb6.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40eebc.  v6:= temp @kind object;
  #L40eebe.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40eec2.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40eec6.  call `onNext`(v0, v6, v5, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L40eecc.  v6:= 1I;
  #L40eece.  return v6;
  #L40eed0.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40eed2.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40eed8.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.cancel:()V` @kind virtual;
  #L40eede.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$WithLatestFromSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40eee4.  return v1;
  catch `java.lang.Throwable` @[L40eea6..L40eebe] goto L40eed0;
}
