record `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper` @kind interface {
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.comparer` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.v1` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.v2` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L406b98.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L406b9e.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.comparer` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L406ba2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L406ba6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L406bac.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L406bb0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber`;
  #L406bb4.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V` @kind direct;
  #L406bba.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` := v1 @kind object;
  #L406bbe.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber`;
  #L406bc2.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V` @kind direct;
  #L406bc8.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` := v1 @kind object;
  #L406bcc.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L406bd0.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L406bd6.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L406bda.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406bec.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L406bf2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406bf6.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L406bfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c00.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L406c06.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L406c0a.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L406c10.  v0:= temp;
  #L406c12.  if v0 != 0 then goto L406c2a;
  #L406c16.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c1a.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L406c20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c24.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L406c2a.  return @kind void;
}
procedure `void` `cancelAndClear`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancelAndClear:()V` @AccessFlag  {
    temp;
    v0;

  #L406c3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c40.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L406c46.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c4a.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L406c50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c54.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L406c5a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c5e.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L406c64.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L406c78.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L406c7c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L406c82.  v0:= temp;
  #L406c84.  if v0 == 0 then goto L406c8a;
  #L406c88.  return @kind void;
  #L406c8a.  v0:= 1I;
  #L406c8c.  v1:= 1I;
  #L406c8e.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c92.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L406c96.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406c9a.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L406c9e.  if v2 == 0 then goto L406e70;
  #L406ca2.  if v3 == 0 then goto L406e70;
  #L406ca6.  call temp:= `isCancelled`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.isCancelled:()Z` @kind virtual;
  #L406cac.  v4:= temp;
  #L406cae.  if v4 == 0 then goto L406cc8;
  #L406cb2.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406cb6.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L406cbc.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406cc0.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L406cc6.  return @kind void;
  #L406cc8.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406ccc.  call temp:= `get`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L406cd2.  v4:= temp @kind object;
  #L406cd4.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L406cd8.  if v4 == 0 then goto L406cfa;
  #L406cdc.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L406ce2.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406ce6.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406cea.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L406cf0.  v1:= temp @kind object;
  #L406cf2.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L406cf8.  return @kind void;
  #L406cfa.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406cfe.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` @kind boolean;
  #L406d02.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L406d06.  if v5 != 0 then goto L406d48;
  #L406d0a.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L406d10.  v5:= temp @kind object;
  #L406d12.  v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` := v5 @kind object;
  #L406d16.  goto L406d48;
  #L406d18.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L406d1a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L406d20.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L406d26.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406d2a.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L406d30.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406d34.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406d38.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L406d3e.  v1:= temp @kind object;
  #L406d40.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L406d46.  return @kind void;
  #L406d48.  v6:= 0I;
  #L406d4a.  if v5 != 0 then goto L406d52;
  #L406d4e.  v7:= 1I;
  #L406d50.  goto L406d54;
  #L406d52.  v7:= 0I;
  #L406d54.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406d58.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` @kind boolean;
  #L406d5c.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L406d60.  if v9 != 0 then goto L406da2;
  #L406d64.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L406d6a.  v9:= temp @kind object;
  #L406d6c.  v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` := v9 @kind object;
  #L406d70.  goto L406da2;
  #L406d72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L406d74.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L406d7a.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L406d80.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406d84.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L406d8a.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406d8e.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406d92.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L406d98.  v1:= temp @kind object;
  #L406d9a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L406da0.  return @kind void;
  #L406da2.  if v9 != 0 then goto L406daa;
  #L406da6.  v10:= 1I;
  #L406da8.  goto L406dac;
  #L406daa.  v10:= 0I;
  #L406dac.  if v4 == 0 then goto L406dcc;
  #L406db0.  if v8 == 0 then goto L406dcc;
  #L406db4.  if v7 == 0 then goto L406dcc;
  #L406db8.  if v10 == 0 then goto L406dcc;
  #L406dbc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L406dc2.  v0:= temp @kind object;
  #L406dc4.  call `complete`(v11, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L406dca.  return @kind void;
  #L406dcc.  if v4 == 0 then goto L406dee;
  #L406dd0.  if v8 == 0 then goto L406dee;
  #L406dd4.  if v7 == v10 then goto L406dee;
  #L406dd8.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L406dde.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L406de4.  v0:= temp @kind object;
  #L406de6.  call `complete`(v11, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L406dec.  return @kind void;
  #L406dee.  if v7 != 0 then goto L406ec4;
  #L406df2.  if v10 == 0 then goto L406df8;
  #L406df6.  goto L406ec4;
  #L406df8.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.comparer` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L406dfc.  call temp:= `test`(v4, v5, v9) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L406e02.  v4:= temp;
  #L406e04.  if v4 != 0 then goto L406e1e;
  #L406e08.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L406e0e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L406e14.  v0:= temp @kind object;
  #L406e16.  call `complete`(v11, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L406e1c.  return @kind void;
  #L406e1e.  v4:= 0I;
  #L406e20.  v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` := v4 @kind object;
  #L406e24.  v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` := v4 @kind object;
  #L406e28.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406e2c.  call `request`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.request:()V` @kind virtual;
  #L406e32.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406e36.  call `request`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.request:()V` @kind virtual;
  #L406e3c.  goto L406ca6;
  #L406e40.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L406e42.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L406e48.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L406e4e.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406e52.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L406e58.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406e5c.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406e60.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L406e66.  v1:= temp @kind object;
  #L406e68.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L406e6e.  return @kind void;
  #L406e70.  call temp:= `isCancelled`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.isCancelled:()Z` @kind virtual;
  #L406e76.  v2:= temp;
  #L406e78.  if v2 == 0 then goto L406e92;
  #L406e7c.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406e80.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L406e86.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406e8a.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L406e90.  return @kind void;
  #L406e92.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406e96.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L406e9c.  v2:= temp @kind object;
  #L406e9e.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L406ea2.  if v2 == 0 then goto L406ec4;
  #L406ea6.  call `cancelAndClear`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L406eac.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406eb0.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406eb4.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L406eba.  v1:= temp @kind object;
  #L406ebc.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L406ec2.  return @kind void;
  #L406ec4.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L406ec8.  v1:= -v1 @kind int;
  #L406eca.  call temp:= `addAndGet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L406ed0.  v1:= temp;
  #L406ed2.  if v1 != 0 then goto L406c8e;
  #L406ed6.  return @kind void;
  catch `java.lang.Throwable` @[L406d0a..L406d12] goto L406d18;
  catch `java.lang.Throwable` @[L406d64..L406d6c] goto L406d72;
  catch `java.lang.Throwable` @[L406df8..L406e04] goto L406e40;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406f08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L406f0c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L406f12.  v0:= temp;
  #L406f14.  if v0 == 0 then goto L406f20;
  #L406f18.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.drain:()V` @kind virtual;
  #L406f1e.  goto L406f26;
  #L406f20.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L406f26.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinator;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;

  #L406f38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406f3c.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L406f42.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L406f46.  call `subscribe`(v3, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L406f4c.  return @kind void;
}
