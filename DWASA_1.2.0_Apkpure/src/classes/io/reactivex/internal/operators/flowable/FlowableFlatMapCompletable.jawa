record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.delayErrors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.maxConcurrency` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f8ab0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f8ab6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f8aba.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L3f8abe.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.maxConcurrency` @type ^`int` := v4;
  #L3f8ac2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8ad4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3f8ad8.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber`;
  #L3f8adc.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f8ae0.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.delayErrors` @type ^`boolean` @kind boolean;
  #L3f8ae4.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable.maxConcurrency` @type ^`int`;
  #L3f8ae8.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3f8aee.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f8af4.  return @kind void;
}
