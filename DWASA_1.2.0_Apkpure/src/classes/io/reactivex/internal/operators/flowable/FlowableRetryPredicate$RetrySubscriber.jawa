record `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.predicate` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.remaining` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLio/reactivex/functions/Predicate;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40597c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L405982.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L405986.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v5 @kind object;
  #L40598a.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.source` @type ^`org.reactivestreams.Publisher` := v6 @kind object;
  #L40598e.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.predicate` @type ^`io.reactivex.functions.Predicate` := v4 @kind object;
  #L405992.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L405996.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4059a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4059ac.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4059b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4059c4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.remaining` @type ^`long` @kind wide;
  #L4059c8.  v2:= 9223372036854775807L;
  #L4059d2.  v4:= lcmp(v0, v2);
  #L4059d6.  if v4 == 0 then goto L4059e6;
  #L4059da.  v2:= 1L;
  #L4059de.  v2:= v0 - v2 @kind long;
  #L4059e2.  v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L4059e6.  v2:= 0L;
  #L4059ea.  v4:= lcmp(v0, v2);
  #L4059ee.  if v4 != 0 then goto L4059fe;
  #L4059f2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4059f6.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4059fc.  goto L405a20;
  #L4059fe.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L405a02.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L405a08.  v0:= temp;
  #L405a0a.  if v0 != 0 then goto L405a1a;
  #L405a0e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405a12.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L405a18.  return @kind void;
  #L405a1a.  call `subscribeNext`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.subscribeNext:()V` @kind virtual;
  #L405a20.  return @kind void;
  #L405a22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L405a24.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L405a2a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405a2e.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L405a32.  v3:= 2I;
  #L405a34.  v3:= new `java.lang.Throwable`[v3];
  #L405a38.  v4:= 0I;
  #L405a3a.  v3[v4]:= v6 @kind object;
  #L405a3e.  v6:= 1I;
  #L405a40.  v3[v6]:= v0 @kind object;
  #L405a44.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L405a4a.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L405a50.  return @kind void;
  catch `java.lang.Throwable` @[L4059fe..L405a0a] goto L405a22;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L405a70.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @type ^`long` @kind wide;
  #L405a74.  v2:= 1L;
  #L405a78.  v0:= v0 + v2 @kind long;
  #L405a7a.  v4.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @type ^`long` := v0 @kind wide;
  #L405a7e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405a82.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L405a88.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405a9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L405aa0.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L405aa6.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L405ab8.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.getAndIncrement:()I` @kind virtual;
  #L405abe.  v0:= temp;
  #L405ac0.  if v0 != 0 then goto L405b0e;
  #L405ac4.  v0:= 1I;
  #L405ac6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L405aca.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L405ad0.  v1:= temp;
  #L405ad2.  if v1 == 0 then goto L405ad8;
  #L405ad6.  return @kind void;
  #L405ad8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @type ^`long` @kind wide;
  #L405adc.  v3:= 0L;
  #L405ae0.  v5:= lcmp(v1, v3);
  #L405ae4.  if v5 == 0 then goto L405af6;
  #L405ae8.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @type ^`long` := v3 @kind wide;
  #L405aec.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L405af0.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L405af6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L405afa.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L405b00.  v0:= -v0 @kind int;
  #L405b02.  call temp:= `addAndGet`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.addAndGet:(I)I` @kind virtual;
  #L405b08.  v0:= temp;
  #L405b0a.  if v0 != 0 then goto L405ac6;
  #L405b0e.  return @kind void;
}
