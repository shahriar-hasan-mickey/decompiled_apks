record `io.reactivex.internal.operators.flowable.FlowableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableCache.once` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCache$CacheState` `io.reactivex.internal.operators.flowable.FlowableCache.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache` v1 @kind this, `io.reactivex.Flowable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.<init>:(Lio/reactivex/Flowable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f12d8.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f12de.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache$CacheState`;
  #L3f12e2.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3f12e8.  v1.`io.reactivex.internal.operators.flowable.FlowableCache.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` := v0 @kind object;
  #L3f12ec.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3f12f0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3f12f6.  v1.`io.reactivex.internal.operators.flowable.FlowableCache.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L3f12fa.  return @kind void;
}
procedure `int` `cachedEventCount`(`io.reactivex.internal.operators.flowable.FlowableCache` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.cachedEventCount:()I` @AccessFlag  {
    temp;
    v0;

  #L3f12b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f12bc.  call temp:= `size`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.size:()I` @kind virtual;
  #L3f12c2.  v0:= temp;
  #L3f12c4.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.internal.operators.flowable.FlowableCache` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.hasSubscribers:()Z` @AccessFlag  {
    temp;
    v0;

  #L3f1268.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f126c.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f1270.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f1276.  v0:= temp @kind object;
  #L3f1278.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`[]) v0 @kind object;
  #L3f127c.  v0:= length @variable v0;
  #L3f127e.  if v0 == 0 then goto L3f1286;
  #L3f1282.  v0:= 1I;
  #L3f1284.  goto L3f1288;
  #L3f1286.  v0:= 0I;
  #L3f1288.  return v0;
}
procedure `boolean` `isConnected`(`io.reactivex.internal.operators.flowable.FlowableCache` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.isConnected:()Z` @AccessFlag  {
    temp;
    v0;

  #L3f129c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f12a0.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$CacheState.isConnected` @type ^`boolean` @kind boolean;
  #L3f12a4.  return v0;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableCache` v7 @kind this, `org.reactivestreams.Subscriber` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f130c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription`;
  #L3f1310.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableCache.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f1314.  call `<init>`(v0, v8, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;)V` @kind direct;
  #L3f131a.  call `onSubscribe`(v8, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f1320.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableCache.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f1324.  call temp:= `addChild`(v8, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.addChild:(Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;)Z` @kind virtual;
  #L3f132a.  v8:= temp;
  #L3f132c.  v1:= 0I;
  #L3f132e.  v2:= 1I;
  #L3f1330.  if v8 == 0 then goto L3f135a;
  #L3f1334.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f1338.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f133e.  v3:= temp @kind wide;
  #L3f1340.  v5:= -9223372036854775808L;
  #L3f1344.  v8:= lcmp(v3, v5);
  #L3f1348.  if v8 != 0 then goto L3f135a;
  #L3f134c.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableCache.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f1350.  call `removeChild`(v8, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.removeChild:(Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;)V` @kind virtual;
  #L3f1356.  v8:= 0I;
  #L3f1358.  goto L3f135c;
  #L3f135a.  v8:= 1I;
  #L3f135c.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableCache.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3f1360.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3f1366.  v3:= temp;
  #L3f1368.  if v3 != 0 then goto L3f1386;
  #L3f136c.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableCache.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3f1370.  call temp:= `compareAndSet`(v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3f1376.  v1:= temp;
  #L3f1378.  if v1 == 0 then goto L3f1386;
  #L3f137c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableCache.state` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$CacheState` @kind object;
  #L3f1380.  call `connect`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState;.connect:()V` @kind virtual;
  #L3f1386.  if v8 == 0 then goto L3f1390;
  #L3f138a.  call `replay`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription;.replay:()V` @kind virtual;
  #L3f1390.  return @kind void;
}
