record `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSupport` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.consumed` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.fallback` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.unit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.upstream` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40b01c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L40b022.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40b026.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.timeout` @type ^`long` := v2 @kind wide;
  #L40b02a.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L40b02e.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L40b032.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.fallback` @type ^`org.reactivestreams.Publisher` := v6 @kind object;
  #L40b036.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L40b03a.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L40b040.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L40b044.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40b048.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40b04e.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40b052.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40b056.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40b05c.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40b060.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b074.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L40b07a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b07e.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40b084.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40b098.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40b09c.  v1:= 9223372036854775807L;
  #L40b0a6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L40b0ac.  v3:= temp @kind wide;
  #L40b0ae.  v0:= lcmp(v3, v1);
  #L40b0b2.  if v0 == 0 then goto L40b0d4;
  #L40b0b6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40b0ba.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40b0c0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b0c4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40b0ca.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b0ce.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40b0d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40b0e8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40b0ec.  v1:= 9223372036854775807L;
  #L40b0f6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L40b0fc.  v3:= temp @kind wide;
  #L40b0fe.  v0:= lcmp(v3, v1);
  #L40b102.  if v0 == 0 then goto L40b126;
  #L40b106.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40b10a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40b110.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b114.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40b11a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b11e.  call `dispose`(v6) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40b124.  goto L40b12c;
  #L40b126.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40b12c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40b140.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40b144.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40b14a.  v0:= temp @kind wide;
  #L40b14c.  v2:= 9223372036854775807L;
  #L40b156.  v4:= lcmp(v0, v2);
  #L40b15a.  if v4 == 0 then goto L40b1a8;
  #L40b15e.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40b162.  v3:= 1L;
  #L40b166.  v5:= v0 + v3 @kind long;
  #L40b16a.  call temp:= `compareAndSet`(v2, v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L40b170.  v0:= temp;
  #L40b172.  if v0 != 0 then goto L40b178;
  #L40b176.  goto L40b1a8;
  #L40b178.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40b17c.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40b182.  v0:= temp @kind object;
  #L40b184.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L40b188.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40b18e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.consumed` @type ^`long` @kind wide;
  #L40b192.  v0:= v0 + v3 @kind long;
  #L40b194.  v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.consumed` @type ^`long` := v0 @kind wide;
  #L40b198.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b19c.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40b1a2.  call `startTimeout`(v7, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.startTimeout:(J)V` @kind virtual;
  #L40b1a8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b1bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40b1c0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40b1c6.  v0:= temp;
  #L40b1c8.  if v0 == 0 then goto L40b1d2;
  #L40b1cc.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L40b1d2.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40b1e4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40b1e8.  v1:= 9223372036854775807L;
  #L40b1f2.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L40b1f8.  v4:= temp;
  #L40b1fa.  if v4 == 0 then goto L40b246;
  #L40b1fe.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40b202.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40b208.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.consumed` @type ^`long` @kind wide;
  #L40b20c.  v0:= 0L;
  #L40b210.  v2:= lcmp(v4, v0);
  #L40b214.  if v2 == 0 then goto L40b21e;
  #L40b218.  call `produced`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.produced:(J)V` @kind virtual;
  #L40b21e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.fallback` @type ^`org.reactivestreams.Publisher` @kind object;
  #L40b222.  v5:= 0I;
  #L40b224.  v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.fallback` @type ^`org.reactivestreams.Publisher` := v5 @kind object;
  #L40b228.  v5:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$FallbackSubscriber`;
  #L40b22c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b230.  call `<init>`(v5, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$FallbackSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;)V` @kind direct;
  #L40b236.  call `subscribe`(v4, v5) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40b23c.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b240.  call `dispose`(v4) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L40b246.  return @kind void;
}
procedure `void` `startTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.startTimeout:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40b258.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40b25c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40b260.  v2:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutTask`;
  #L40b264.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutTask;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSupport;)V` @kind direct;
  #L40b26a.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.timeout` @type ^`long` @kind wide;
  #L40b26e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40b272.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40b278.  v5:= temp @kind object;
  #L40b27a.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40b280.  return @kind void;
}
