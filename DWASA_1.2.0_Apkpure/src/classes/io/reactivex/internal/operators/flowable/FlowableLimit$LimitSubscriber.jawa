record `io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fe4d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3fe4da.  v0.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3fe4de.  v0.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L3fe4e2.  call `lazySet`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.lazySet:(J)V` @kind virtual;
  #L3fe4e8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe4fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fe500.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fe506.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fe518.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` @kind wide;
  #L3fe51c.  v2:= 0L;
  #L3fe520.  v4:= lcmp(v0, v2);
  #L3fe524.  if v4 <= 0 then goto L3fe536;
  #L3fe528.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L3fe52c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fe530.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fe536.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fe548.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` @kind wide;
  #L3fe54c.  v2:= 0L;
  #L3fe550.  v4:= lcmp(v0, v2);
  #L3fe554.  if v4 <= 0 then goto L3fe568;
  #L3fe558.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L3fe55c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fe560.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fe566.  goto L3fe56e;
  #L3fe568.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3fe56e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3fe580.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` @kind wide;
  #L3fe584.  v2:= 0L;
  #L3fe588.  v4:= lcmp(v0, v2);
  #L3fe58c.  if v4 <= 0 then goto L3fe5c0;
  #L3fe590.  v4:= 1L;
  #L3fe594.  v0:= v0 - v4 @kind long;
  #L3fe596.  v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` := v0 @kind wide;
  #L3fe59a.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fe59e.  call `onNext`(v4, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fe5a4.  v7:= lcmp(v0, v2);
  #L3fe5a8.  if v7 != 0 then goto L3fe5c0;
  #L3fe5ac.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fe5b0.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fe5b6.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fe5ba.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fe5c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fe5d4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fe5d8.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3fe5de.  v0:= temp;
  #L3fe5e0.  if v0 == 0 then goto L3fe614;
  #L3fe5e4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` @kind wide;
  #L3fe5e8.  v2:= 0L;
  #L3fe5ec.  v4:= lcmp(v0, v2);
  #L3fe5f0.  if v4 != 0 then goto L3fe606;
  #L3fe5f4.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fe5fa.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fe5fe.  call `complete`(v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3fe604.  goto L3fe614;
  #L3fe606.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L3fe60a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fe60e.  call `onSubscribe`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fe614.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3fe628.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3fe62e.  v0:= temp;
  #L3fe630.  if v0 == 0 then goto L3fe672;
  #L3fe634.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.get:()J` @kind virtual;
  #L3fe63a.  v0:= temp @kind wide;
  #L3fe63c.  v2:= 0L;
  #L3fe640.  v4:= lcmp(v0, v2);
  #L3fe644.  if v4 != 0 then goto L3fe64a;
  #L3fe648.  goto L3fe672;
  #L3fe64a.  v2:= lcmp(v0, v7);
  #L3fe64e.  if v2 > 0 then goto L3fe656;
  #L3fe652.  v2:= v0 @kind wide;
  #L3fe654.  goto L3fe658;
  #L3fe656.  v2:= v7 @kind wide;
  #L3fe658.  v4:= v0 - v2 @kind long;
  #L3fe65c.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.compareAndSet:(JJ)Z` @kind virtual;
  #L3fe662.  v0:= temp;
  #L3fe664.  if v0 == 0 then goto L3fe634;
  #L3fe668.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fe66c.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3fe672.  return @kind void;
}
