record `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class, `java.util.Iterator` @kind interface {
  `io.reactivex.Notification` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @AccessFlag ;
  `java.util.concurrent.Semaphore` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.notify` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.value` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ed414.  call `<init>`(v2) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L3ed41a.  v0:= new `java.util.concurrent.Semaphore`;
  #L3ed41e.  v1:= 0I;
  #L3ed420.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L3ed426.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.notify` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L3ed42a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3ed42e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ed434.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3ed438.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed2ec.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L3ed2f0.  if v0 == 0 then goto L3ed318;
  #L3ed2f4.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L3ed2fa.  v0:= temp;
  #L3ed2fc.  if v0 != 0 then goto L3ed302;
  #L3ed300.  goto L3ed318;
  #L3ed302.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L3ed306.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L3ed30c.  v0:= temp @kind object;
  #L3ed30e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ed314.  v0:= temp @kind object;
  #L3ed316.  throw v0;
  #L3ed318.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L3ed31c.  if v0 == 0 then goto L3ed32c;
  #L3ed320.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L3ed326.  v0:= temp;
  #L3ed328.  if v0 == 0 then goto L3ed398;
  #L3ed32c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L3ed330.  if v0 != 0 then goto L3ed398;
  #L3ed334.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L3ed33a.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.notify` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L3ed33e.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L3ed344.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ed348.  v1:= 0I;
  #L3ed34a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ed350.  v0:= temp @kind object;
  #L3ed352.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L3ed356.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` := v0 @kind object;
  #L3ed35a.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L3ed360.  v1:= temp;
  #L3ed362.  if v1 != 0 then goto L3ed368;
  #L3ed366.  goto L3ed398;
  #L3ed368.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L3ed36e.  v0:= temp @kind object;
  #L3ed370.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ed376.  v0:= temp @kind object;
  #L3ed378.  throw v0;
  #L3ed37a.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3ed37c.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.dispose:()V` @kind virtual;
  #L3ed382.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/Notification;` @kind static;
  #L3ed388.  v1:= temp @kind object;
  #L3ed38a.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L3ed38e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3ed394.  v0:= temp @kind object;
  #L3ed396.  throw v0;
  #L3ed398.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L3ed39c.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L3ed3a2.  v0:= temp;
  #L3ed3a4.  return v0;
  catch `java.lang.InterruptedException` @[L3ed334..L3ed344] goto L3ed37a;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed3c8.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.hasNext:()Z` @kind virtual;
  #L3ed3ce.  v0:= temp;
  #L3ed3d0.  if v0 == 0 then goto L3ed3f8;
  #L3ed3d4.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L3ed3d8.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L3ed3de.  v0:= temp;
  #L3ed3e0.  if v0 == 0 then goto L3ed3f8;
  #L3ed3e4.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` @kind object;
  #L3ed3e8.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L3ed3ee.  v0:= temp @kind object;
  #L3ed3f0.  v1:= 0I;
  #L3ed3f2.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.iteratorNotification` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L3ed3f6.  return v0 @kind object;
  #L3ed3f8.  v0:= new `java.util.NoSuchElementException`;
  #L3ed3fc.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3ed402.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L3ed44c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L3ed460.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ed466.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.onNext:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ed478.  v0:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ed47c.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ed482.  v2:= temp @kind object;
  #L3ed484.  if v2 != 0 then goto L3ed48c;
  #L3ed488.  v2:= 1I;
  #L3ed48a.  goto L3ed48e;
  #L3ed48c.  v2:= 0I;
  #L3ed48e.  if v2 == 0 then goto L3ed49c;
  #L3ed492.  v2:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator.notify` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L3ed496.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L3ed49c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3ed4b0.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L3ed4b4.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.onNext:(Lio/reactivex/Notification;)V` @kind virtual;
  #L3ed4ba.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$LatestSubscriberIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$LatestSubscriberIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed4cc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3ed4d0.  v1:= "Read-only iterator." @kind object;
  #L3ed4d4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed4da.  throw v0;
}
