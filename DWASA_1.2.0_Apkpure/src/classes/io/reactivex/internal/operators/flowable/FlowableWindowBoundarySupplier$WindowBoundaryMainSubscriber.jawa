record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.capacityHint` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.other` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.stopWindows` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.BOUNDARY_DISPOSED` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L40d4b0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber`;
  #L40d4b4.  v1:= 0I;
  #L40d4b6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;)V` @kind direct;
  #L40d4bc.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber` := v0 @kind object;
  #L40d4c0.  v0:= new `java.lang.Object`;
  #L40d4c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40d4ca.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` := v0 @kind object;
  #L40d4ce.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40d4e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40d4e6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40d4ea.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.capacityHint` @type ^`int` := v2;
  #L40d4ee.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40d4f2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40d4f8.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40d4fc.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40d500.  v2:= 1I;
  #L40d502.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L40d508.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L40d50c.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40d510.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40d516.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L40d51a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L40d51e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L40d524.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L40d528.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40d52c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40d532.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L40d536.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.other` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L40d53a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40d53e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40d544.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40d548.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d55c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40d560.  v1:= 0I;
  #L40d562.  v2:= 1I;
  #L40d564.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40d56a.  v0:= temp;
  #L40d56c.  if v0 == 0 then goto L40d590;
  #L40d570.  call `disposeBoundary`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @kind virtual;
  #L40d576.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40d57a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40d580.  v0:= temp;
  #L40d582.  if v0 != 0 then goto L40d590;
  #L40d586.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d58a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40d590.  return @kind void;
}
procedure `void` `disposeBoundary`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40d5a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d5a8.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber` @kind object;
  #L40d5ac.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40d5b2.  v0:= temp @kind object;
  #L40d5b4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L40d5b8.  if v0 == 0 then goto L40d5ca;
  #L40d5bc.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber` @kind object;
  #L40d5c0.  if v0 == v1 then goto L40d5ca;
  #L40d5c4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40d5ca.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L40d5dc.  call temp:= `getAndIncrement`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.getAndIncrement:()I` @kind virtual;
  #L40d5e2.  v0:= temp;
  #L40d5e4.  if v0 == 0 then goto L40d5ea;
  #L40d5e8.  return @kind void;
  #L40d5ea.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40d5ee.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L40d5f2.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40d5f6.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.emitted` @type ^`long` @kind wide;
  #L40d5fa.  v5:= 1I;
  #L40d5fc.  v6:= 1I;
  #L40d5fe.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40d602.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40d608.  v7:= temp;
  #L40d60a.  v8:= 0I;
  #L40d60c.  if v7 != 0 then goto L40d61c;
  #L40d610.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L40d616.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40d61a.  return @kind void;
  #L40d61c.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L40d620.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L40d624.  if v9 == 0 then goto L40d658;
  #L40d628.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L40d62e.  v10:= temp @kind object;
  #L40d630.  if v10 == 0 then goto L40d658;
  #L40d634.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L40d63a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40d640.  v1:= temp @kind object;
  #L40d642.  if v7 == 0 then goto L40d650;
  #L40d646.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40d64a.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40d650.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d656.  return @kind void;
  #L40d658.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40d65e.  v10:= temp @kind object;
  #L40d660.  if v10 != 0 then goto L40d668;
  #L40d664.  v11:= 1I;
  #L40d666.  goto L40d66a;
  #L40d668.  v11:= 0I;
  #L40d66a.  if v9 == 0 then goto L40d6aa;
  #L40d66e.  if v11 == 0 then goto L40d6aa;
  #L40d672.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40d678.  v1:= temp @kind object;
  #L40d67a.  if v1 != 0 then goto L40d694;
  #L40d67e.  if v7 == 0 then goto L40d68c;
  #L40d682.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40d686.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40d68c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40d692.  goto L40d6a8;
  #L40d694.  if v7 == 0 then goto L40d6a2;
  #L40d698.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40d69c.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40d6a2.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d6a8.  return @kind void;
  #L40d6aa.  if v11 == 0 then goto L40d6c2;
  #L40d6ae.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.emitted` @type ^`long` := v3 @kind wide;
  #L40d6b2.  v6:= -v6 @kind int;
  #L40d6b4.  call temp:= `addAndGet`(v12, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.addAndGet:(I)I` @kind virtual;
  #L40d6ba.  v6:= temp;
  #L40d6bc.  if v6 != 0 then goto L40d5fe;
  #L40d6c0.  return @kind void;
  #L40d6c2.  v9:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L40d6c6.  if v10 == v9 then goto L40d6d2;
  #L40d6ca.  call `onNext`(v7, v10) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L40d6d0.  goto L40d5fe;
  #L40d6d2.  if v7 == 0 then goto L40d6e0;
  #L40d6d6.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L40d6da.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L40d6e0.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40d6e4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L40d6ea.  v7:= temp;
  #L40d6ec.  if v7 != 0 then goto L40d5fe;
  #L40d6f0.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d6f4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40d6fa.  v9:= temp @kind wide;
  #L40d6fc.  v7:= lcmp(v3, v9);
  #L40d700.  if v7 == 0 then goto L40d780;
  #L40d704.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.capacityHint` @type ^`int`;
  #L40d708.  call temp:= `create`(v7, v12) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L40d70e.  v7:= temp @kind object;
  #L40d710.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L40d714.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40d718.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40d71e.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.other` @type ^`java.util.concurrent.Callable` @kind object;
  #L40d722.  call temp:= `call`(v9) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40d728.  v9:= temp @kind object;
  #L40d72a.  v10:= "The other Callable returned a null Publisher" @kind object;
  #L40d72e.  call temp:= `requireNonNull`(v9, v10) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40d734.  v9:= temp @kind object;
  #L40d736.  v9:= (`org.reactivestreams.Publisher`) v9 @kind object;
  #L40d73a.  v10:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber`;
  #L40d73e.  call `<init>`(v10, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;)V` @kind direct;
  #L40d744.  v11:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d748.  call temp:= `compareAndSet`(v11, v8, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40d74e.  v8:= temp;
  #L40d750.  if v8 == 0 then goto L40d5fe;
  #L40d754.  call `subscribe`(v9, v10) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40d75a.  v8:= 1L;
  #L40d75e.  v3:= v3 + v8 @kind long;
  #L40d760.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40d766.  goto L40d5fe;
  #L40d76a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40d76c.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40d772.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40d778.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v5 @kind boolean;
  #L40d77c.  goto L40d5fe;
  #L40d780.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d784.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40d78a.  call `disposeBoundary`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @kind virtual;
  #L40d790.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40d794.  v8:= "Could not deliver a window due to lack of requests" @kind object;
  #L40d798.  call `<init>`(v7, v8) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40d79e.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40d7a4.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v5 @kind boolean;
  #L40d7a8.  goto L40d5fe;
  catch `java.lang.Throwable` @[L40d71e..L40d73a] goto L40d76a;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L40d7c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d7cc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40d7d2.  v0:= 1I;
  #L40d7d4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40d7d8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40d7de.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L40d7f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d7f4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40d7fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40d7fe.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40d804.  v0:= temp;
  #L40d806.  if v0 == 0 then goto L40d818;
  #L40d80a.  v2:= 1I;
  #L40d80c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L40d810.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40d816.  goto L40d81e;
  #L40d818.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40d81e.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.innerNext:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryInnerSubscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40d830.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d834.  v1:= 0I;
  #L40d836.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40d83c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L40d840.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L40d844.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40d84a.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40d850.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d864.  call `disposeBoundary`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @kind virtual;
  #L40d86a.  v0:= 1I;
  #L40d86c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40d870.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40d876.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d888.  call `disposeBoundary`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @kind virtual;
  #L40d88e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40d892.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40d898.  v0:= temp;
  #L40d89a.  if v0 == 0 then goto L40d8ac;
  #L40d89e.  v2:= 1I;
  #L40d8a0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L40d8a4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40d8aa.  goto L40d8b2;
  #L40d8ac.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40d8b2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d8c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L40d8c8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40d8ce.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40d8d4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d8e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d8ec.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40d8f2.  v0:= temp;
  #L40d8f4.  if v0 == 0 then goto L40d92a;
  #L40d8f8.  v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40d8fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40d900.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40d906.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L40d90a.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L40d90e.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40d914.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L40d91a.  v0:= 9223372036854775807L;
  #L40d924.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40d92a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d93c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d940.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40d946.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d958.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40d95c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40d962.  v0:= temp;
  #L40d964.  if v0 != 0 then goto L40d972;
  #L40d968.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d96c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40d972.  return @kind void;
}
