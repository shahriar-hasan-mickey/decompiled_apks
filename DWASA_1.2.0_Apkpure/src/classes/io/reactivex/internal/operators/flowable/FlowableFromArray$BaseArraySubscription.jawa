record `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.<init>:([Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fa630.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L3fa636.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3fa63a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fa64c.  v0:= 1I;
  #L3fa64e.  v1.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3fa652.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fa664.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa668.  v0:= length @variable v0;
  #L3fa66a.  v1.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int` := v0;
  #L3fa66e.  return @kind void;
}
procedure `void` `fastPath`() @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.fastPath:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3fa5b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L3fa5b8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa5bc.  v1:= length @variable v1;
  #L3fa5be.  if v0 != v1 then goto L3fa5c6;
  #L3fa5c2.  v0:= 1I;
  #L3fa5c4.  goto L3fa5c8;
  #L3fa5c6.  v0:= 0I;
  #L3fa5c8.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3fa5f4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L3fa5f8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L3fa5fc.  v2:= length @variable v1;
  #L3fa5fe.  if v0 != v2 then goto L3fa606;
  #L3fa602.  v0:= 0I;
  #L3fa604.  return v0 @kind object;
  #L3fa606.  v2:= v0 + 1;
  #L3fa60a.  v3.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int` := v2;
  #L3fa60e.  v0:= v1[v0] @kind object;
  #L3fa612.  v1:= "array element is null" @kind object;
  #L3fa616.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fa61c.  v0:= temp @kind object;
  #L3fa61e.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fa680.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3fa686.  v0:= temp;
  #L3fa688.  if v0 == 0 then goto L3fa6c0;
  #L3fa68c.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fa692.  v0:= temp @kind wide;
  #L3fa694.  v2:= 0L;
  #L3fa698.  v4:= lcmp(v0, v2);
  #L3fa69c.  if v4 != 0 then goto L3fa6c0;
  #L3fa6a0.  v0:= 9223372036854775807L;
  #L3fa6aa.  v2:= lcmp(v6, v0);
  #L3fa6ae.  if v2 != 0 then goto L3fa6ba;
  #L3fa6b2.  call `fastPath`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.fastPath:()V` @kind virtual;
  #L3fa6b8.  goto L3fa6c0;
  #L3fa6ba.  call `slowPath`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.slowPath:(J)V` @kind virtual;
  #L3fa6c0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3fa5dc.  v1:= v1 ^& 1;
  #L3fa5e0.  return v1;
}
procedure `void` `slowPath`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.slowPath:(J)V` @AccessFlag ABSTRACT {

  # return;
}
