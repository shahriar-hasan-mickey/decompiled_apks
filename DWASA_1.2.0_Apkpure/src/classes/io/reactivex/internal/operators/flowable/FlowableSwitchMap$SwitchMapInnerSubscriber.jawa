record `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.fusionMode` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4089fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L408a02.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` := v1 @kind object;
  #L408a06.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @type ^`long` := v2 @kind wide;
  #L408a0a.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @type ^`int` := v4;
  #L408a0e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L408a20.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L408a26.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L408a38.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` @kind object;
  #L408a3c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @type ^`long` @kind wide;
  #L408a40.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.unique` @type ^`long` @kind wide;
  #L408a44.  v5:= lcmp(v1, v3);
  #L408a48.  if v5 != 0 then goto L408a58;
  #L408a4c.  v1:= 1I;
  #L408a4e.  v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L408a52.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;.drain:()V` @kind virtual;
  #L408a58.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L408a6c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` @kind object;
  #L408a70.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @type ^`long` @kind wide;
  #L408a74.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.unique` @type ^`long` @kind wide;
  #L408a78.  v5:= lcmp(v1, v3);
  #L408a7c.  if v5 != 0 then goto L408ab0;
  #L408a80.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L408a84.  call temp:= `addThrowable`(v1, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L408a8a.  v1:= temp;
  #L408a8c.  if v1 == 0 then goto L408ab0;
  #L408a90.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L408a94.  if v7 != 0 then goto L408aa2;
  #L408a98.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L408a9c.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L408aa2.  v7:= 1I;
  #L408aa4.  v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.done` @type ^`boolean` := v7 @kind boolean;
  #L408aa8.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;.drain:()V` @kind virtual;
  #L408aae.  goto L408ab6;
  #L408ab0.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L408ab6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L408ac8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` @kind object;
  #L408acc.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @type ^`long` @kind wide;
  #L408ad0.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.unique` @type ^`long` @kind wide;
  #L408ad4.  v5:= lcmp(v1, v3);
  #L408ad8.  if v5 != 0 then goto L408b10;
  #L408adc.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.fusionMode` @type ^`int`;
  #L408ae0.  if v1 != 0 then goto L408b0a;
  #L408ae4.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L408ae8.  call temp:= `offer`(v1, v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L408aee.  v7:= temp;
  #L408af0.  if v7 != 0 then goto L408b0a;
  #L408af4.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L408af8.  v0:= "Queue full?!" @kind object;
  #L408afc.  call `<init>`(v7, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L408b02.  call `onError`(v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L408b08.  return @kind void;
  #L408b0a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;.drain:()V` @kind virtual;
  #L408b10.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L408b24.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L408b2a.  v0:= temp;
  #L408b2c.  if v0 == 0 then goto L408ba0;
  #L408b30.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L408b34.  if v0 == 0 then goto L408b82;
  #L408b38.  v0:= v4 @kind object;
  #L408b3a.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L408b3e.  v1:= 7I;
  #L408b40.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L408b46.  v1:= temp;
  #L408b48.  v2:= 1I;
  #L408b4a.  if v1 != v2 then goto L408b66;
  #L408b4e.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.fusionMode` @type ^`int` := v1;
  #L408b52.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L408b56.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L408b5a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` @kind object;
  #L408b5e.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;.drain:()V` @kind virtual;
  #L408b64.  return @kind void;
  #L408b66.  v2:= 2I;
  #L408b68.  if v1 != v2 then goto L408b82;
  #L408b6c.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.fusionMode` @type ^`int` := v1;
  #L408b70.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L408b74.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @type ^`int`;
  #L408b78.  v0:= (`long`) v0 @kind i2l;
  #L408b7a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L408b80.  return @kind void;
  #L408b82.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L408b86.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @type ^`int`;
  #L408b8a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L408b90.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L408b94.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @type ^`int`;
  #L408b98.  v0:= (`long`) v0 @kind i2l;
  #L408b9a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L408ba0.  return @kind void;
}
