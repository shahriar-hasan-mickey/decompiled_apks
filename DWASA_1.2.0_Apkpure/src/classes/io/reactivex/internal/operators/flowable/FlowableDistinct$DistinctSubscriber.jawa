record `io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.collection` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.keySelector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f5844.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f584a.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.keySelector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f584e.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.collection` @type ^`java.util.Collection` := v3 @kind object;
  #L3f5852.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5864.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.collection` @type ^`java.util.Collection` @kind object;
  #L3f5868.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L3f586e.  call `clear`(v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.clear:()V` @kind super;
  #L3f5874.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5888.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f588c.  if v0 != 0 then goto L3f58aa;
  #L3f5890.  v0:= 1I;
  #L3f5892.  v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f5896.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.collection` @type ^`java.util.Collection` @kind object;
  #L3f589a.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L3f58a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f58a4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f58aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f58bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f58c0.  if v0 == 0 then goto L3f58cc;
  #L3f58c4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f58ca.  goto L3f58e6;
  #L3f58cc.  v0:= 1I;
  #L3f58ce.  v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f58d2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.collection` @type ^`java.util.Collection` @kind object;
  #L3f58d6.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L3f58dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f58e0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f58e6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f58f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.done` @type ^`boolean` @kind boolean;
  #L3f58fc.  if v0 == 0 then goto L3f5902;
  #L3f5900.  return @kind void;
  #L3f5902.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.sourceMode` @type ^`int`;
  #L3f5906.  if v0 != 0 then goto L3f5958;
  #L3f590a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f590e.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f5914.  v0:= temp @kind object;
  #L3f5916.  v1:= "The keySelector returned a null key" @kind object;
  #L3f591a.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5920.  v0:= temp @kind object;
  #L3f5922.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.collection` @type ^`java.util.Collection` @kind object;
  #L3f5926.  call temp:= `add`(v1, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f592c.  v0:= temp;
  #L3f592e.  if v0 == 0 then goto L3f593e;
  #L3f5932.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f5936.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f593c.  goto L3f5964;
  #L3f593e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5942.  v0:= 1L;
  #L3f5946.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f594c.  goto L3f5964;
  #L3f594e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5950.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f5956.  return @kind void;
  #L3f5958.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f595c.  v0:= 0I;
  #L3f595e.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f5964.  return @kind void;
  catch `java.lang.Throwable` @[L3f590a..L3f592e] goto L3f594e;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f57dc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f57e0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f57e6.  v0:= temp @kind object;
  #L3f57e8.  if v0 == 0 then goto L3f5830;
  #L3f57ec.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.collection` @type ^`java.util.Collection` @kind object;
  #L3f57f0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f57f4.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f57fa.  v2:= temp @kind object;
  #L3f57fc.  v3:= "The keySelector returned a null key" @kind object;
  #L3f5800.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5806.  v2:= temp @kind object;
  #L3f5808.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f580e.  v1:= temp;
  #L3f5810.  if v1 == 0 then goto L3f5816;
  #L3f5814.  goto L3f5830;
  #L3f5816.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.sourceMode` @type ^`int`;
  #L3f581a.  v1:= 2I;
  #L3f581c.  if v0 != v1 then goto L3f57dc;
  #L3f5820.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f5824.  v1:= 1L;
  #L3f5828.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f582e.  goto L3f57dc;
  #L3f5830.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f57c0.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$DistinctSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f57c6.  v1:= temp;
  #L3f57c8.  return v1;
}
