record `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.<init>:(JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L402d8c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L402d92.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` := v1 @kind wide;
  #L402d96.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` := v3 @kind wide;
  #L402d9a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L402dac.  v0:= 1I;
  #L402dae.  v1.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L402db2.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L402dc4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L402dc8.  v2.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` := v0 @kind wide;
  #L402dcc.  return @kind void;
}
procedure `void` `fastPath`() @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.fastPath:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402cf8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` @kind wide;
  #L402cfc.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L402d00.  v4:= lcmp(v0, v2);
  #L402d04.  if v4 != 0 then goto L402d0c;
  #L402d08.  v0:= 1I;
  #L402d0a.  goto L402d0e;
  #L402d0c.  v0:= 0I;
  #L402d0e.  return v0;
}
procedure `java.lang.Long` `poll`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.poll:()Ljava/lang/Long;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402d38.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` @kind wide;
  #L402d3c.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L402d40.  v4:= lcmp(v0, v2);
  #L402d44.  if v4 != 0 then goto L402d4c;
  #L402d48.  v0:= 0I;
  #L402d4a.  return v0 @kind object;
  #L402d4c.  v2:= 1L;
  #L402d50.  v2:= v2 + v0 @kind long;
  #L402d52.  v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` := v2 @kind wide;
  #L402d56.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L402d5c.  v0:= temp @kind object;
  #L402d5e.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L402d70.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.poll:()Ljava/lang/Long;` @kind virtual;
  #L402d76.  v0:= temp @kind object;
  #L402d78.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402de0.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L402de6.  v0:= temp;
  #L402de8.  if v0 == 0 then goto L402e20;
  #L402dec.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L402df2.  v0:= temp @kind wide;
  #L402df4.  v2:= 0L;
  #L402df8.  v4:= lcmp(v0, v2);
  #L402dfc.  if v4 != 0 then goto L402e20;
  #L402e00.  v0:= 9223372036854775807L;
  #L402e0a.  v2:= lcmp(v6, v0);
  #L402e0e.  if v2 != 0 then goto L402e1a;
  #L402e12.  call `fastPath`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.fastPath:()V` @kind virtual;
  #L402e18.  goto L402e20;
  #L402e1a.  call `slowPath`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.slowPath:(J)V` @kind virtual;
  #L402e20.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L402d20.  v1:= v1 ^& 1;
  #L402d24.  return v1;
}
procedure `void` `slowPath`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.slowPath:(J)V` @AccessFlag ABSTRACT {

  # return;
}
