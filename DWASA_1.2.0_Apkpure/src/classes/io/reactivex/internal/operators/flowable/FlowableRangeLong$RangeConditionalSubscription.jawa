record `io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeConditionalSubscription;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L402e34.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.<init>:(JJ)V` @kind direct;
  #L402e3a.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L402e3e.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeConditionalSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L402e50.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.end` @type ^`long` @kind wide;
  #L402e54.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L402e58.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.index` @type ^`long` @kind wide;
  #L402e5c.  v5:= lcmp(v3, v0);
  #L402e60.  if v5 == 0 then goto L402e84;
  #L402e64.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402e68.  if v5 == 0 then goto L402e6e;
  #L402e6c.  return @kind void;
  #L402e6e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L402e74.  v5:= temp @kind object;
  #L402e76.  call temp:= `tryOnNext`(v2, v5) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L402e7c.  v5:= 1L;
  #L402e80.  v3:= v3 + v5 @kind long;
  #L402e82.  goto L402e5c;
  #L402e84.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402e88.  if v0 == 0 then goto L402e8e;
  #L402e8c.  return @kind void;
  #L402e8e.  call `onComplete`(v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L402e94.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription` v12 @kind this, `long` v13 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeConditionalSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L402ea8.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.end` @type ^`long` @kind wide;
  #L402eac.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.index` @type ^`long` @kind wide;
  #L402eb0.  v4:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L402eb4.  v5:= 0L;
  #L402eb8.  v7:= v2 @kind wide;
  #L402eba.  v2:= v13 @kind wide;
  #L402ebc.  v13:= v5 @kind wide;
  #L402ebe.  v9:= lcmp(v13, v2);
  #L402ec2.  if v9 == 0 then goto L402ef6;
  #L402ec6.  v9:= lcmp(v7, v0);
  #L402eca.  if v9 == 0 then goto L402ef6;
  #L402ece.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402ed2.  if v9 == 0 then goto L402ed8;
  #L402ed6.  return @kind void;
  #L402ed8.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L402ede.  v9:= temp @kind object;
  #L402ee0.  call temp:= `tryOnNext`(v4, v9) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L402ee6.  v9:= temp;
  #L402ee8.  v10:= 1L;
  #L402eec.  if v9 == 0 then goto L402ef2;
  #L402ef0.  v13:= v13 + v10 @kind long;
  #L402ef2.  v7:= v7 + v10 @kind long;
  #L402ef4.  goto L402ebe;
  #L402ef6.  v2:= lcmp(v7, v0);
  #L402efa.  if v2 != 0 then goto L402f0e;
  #L402efe.  v13:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L402f02.  if v13 != 0 then goto L402f0c;
  #L402f06.  call `onComplete`(v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L402f0c.  return @kind void;
  #L402f0e.  call temp:= `get`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeConditionalSubscription;.get:()J` @kind virtual;
  #L402f14.  v2:= temp @kind wide;
  #L402f16.  v9:= lcmp(v13, v2);
  #L402f1a.  if v9 != 0 then goto L402ebe;
  #L402f1e.  v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.index` @type ^`long` := v7 @kind wide;
  #L402f22.  v13:= -v13 @kind long;
  #L402f24.  call temp:= `addAndGet`(v12, v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeConditionalSubscription;.addAndGet:(J)J` @kind virtual;
  #L402f2a.  v2:= temp @kind wide;
  #L402f2c.  v13:= lcmp(v2, v5);
  #L402f30.  if v13 != 0 then goto L402ebc;
  #L402f34.  return @kind void;
}
