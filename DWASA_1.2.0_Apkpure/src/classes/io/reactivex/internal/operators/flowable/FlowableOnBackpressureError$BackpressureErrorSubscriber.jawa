record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40103c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L401042.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L401046.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401058.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40105c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L401062.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401074.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L401078.  if v0 == 0 then goto L40107e;
  #L40107c.  return @kind void;
  #L40107e.  v0:= 1I;
  #L401080.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L401084.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L401088.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40108e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4010a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L4010a4.  if v0 == 0 then goto L4010b0;
  #L4010a8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4010ae.  return @kind void;
  #L4010b0.  v0:= 1I;
  #L4010b2.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4010b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4010ba.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4010c0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4010d4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L4010d8.  if v0 == 0 then goto L4010de;
  #L4010dc.  return @kind void;
  #L4010de.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.get:()J` @kind virtual;
  #L4010e4.  v0:= temp @kind wide;
  #L4010e6.  v2:= 0L;
  #L4010ea.  v4:= lcmp(v0, v2);
  #L4010ee.  if v4 == 0 then goto L401108;
  #L4010f2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4010f6.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4010fc.  v0:= 1L;
  #L401100.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L401106.  goto L40111c;
  #L401108.  v6:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40110c.  v0:= "could not emit value due to lack of requests" @kind object;
  #L401110.  call `<init>`(v6, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L401116.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40111c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L401130.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L401134.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40113a.  v0:= temp;
  #L40113c.  if v0 == 0 then goto L40115e;
  #L401140.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L401144.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L401148.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40114e.  v0:= 9223372036854775807L;
  #L401158.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40115e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401170.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L401176.  v0:= temp;
  #L401178.  if v0 == 0 then goto L401182;
  #L40117c.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L401182.  return @kind void;
}
