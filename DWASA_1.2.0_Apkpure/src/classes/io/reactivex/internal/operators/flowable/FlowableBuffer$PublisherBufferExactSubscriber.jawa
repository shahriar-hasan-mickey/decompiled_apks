record `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.bufferSupplier` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.size` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ee874.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ee87a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3ee87e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.size` @type ^`int` := v2;
  #L3ee882.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L3ee886.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee898.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee89c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3ee8a2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee8b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee8b8.  if v0 == 0 then goto L3ee8be;
  #L3ee8bc.  return @kind void;
  #L3ee8be.  v0:= 1I;
  #L3ee8c0.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ee8c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3ee8c8.  if v0 == 0 then goto L3ee8e2;
  #L3ee8cc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3ee8d2.  v1:= temp;
  #L3ee8d4.  if v1 != 0 then goto L3ee8e2;
  #L3ee8d8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee8dc.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ee8e2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee8e6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ee8ec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee900.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee904.  if v0 == 0 then goto L3ee910;
  #L3ee908.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ee90e.  return @kind void;
  #L3ee910.  v0:= 1I;
  #L3ee912.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3ee916.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee91a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ee920.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ee934.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.done` @type ^`boolean` @kind boolean;
  #L3ee938.  if v0 == 0 then goto L3ee93e;
  #L3ee93c.  return @kind void;
  #L3ee93e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L3ee942.  if v0 != 0 then goto L3ee97e;
  #L3ee946.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L3ee94a.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L3ee950.  v0:= temp @kind object;
  #L3ee952.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L3ee956.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ee95c.  v0:= temp @kind object;
  #L3ee95e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3ee962.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L3ee966.  goto L3ee97e;
  #L3ee968.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ee96a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3ee970.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.cancel:()V` @kind virtual;
  #L3ee976.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ee97c.  return @kind void;
  #L3ee97e.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ee984.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.index` @type ^`int`;
  #L3ee988.  v3:= v3 + 1;
  #L3ee98c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.size` @type ^`int`;
  #L3ee990.  if v3 != v1 then goto L3ee9ac;
  #L3ee994.  v3:= 0I;
  #L3ee996.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.index` @type ^`int` := v3;
  #L3ee99a.  v3:= 0I;
  #L3ee99c.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.buffer` @type ^`java.util.Collection` := v3 @kind object;
  #L3ee9a0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee9a4.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ee9aa.  goto L3ee9b0;
  #L3ee9ac.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.index` @type ^`int` := v3;
  #L3ee9b0.  return @kind void;
  catch `java.lang.Throwable` @[L3ee946..L3ee962] goto L3ee968;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ee9d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3ee9d4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3ee9da.  v0:= temp;
  #L3ee9dc.  if v0 == 0 then goto L3ee9ee;
  #L3ee9e0.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L3ee9e4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ee9e8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3ee9ee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eea00.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3eea06.  v0:= temp;
  #L3eea08.  if v0 == 0 then goto L3eea24;
  #L3eea0c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3eea10.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber.size` @type ^`int`;
  #L3eea14.  v1:= (`long`) v1 @kind i2l;
  #L3eea16.  call temp:= `multiplyCap`(v4, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L3eea1c.  v4:= temp @kind wide;
  #L3eea1e.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3eea24.  return @kind void;
}
