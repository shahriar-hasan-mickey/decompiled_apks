record `io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.mapper` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fe784.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L3fe78a.  v0.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3fe78e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe7a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fe7a4.  if v0 == 0 then goto L3fe7aa;
  #L3fe7a8.  return @kind void;
  #L3fe7aa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.sourceMode` @type ^`int`;
  #L3fe7ae.  if v0 == 0 then goto L3fe7c0;
  #L3fe7b2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3fe7b6.  v0:= 0I;
  #L3fe7b8.  call `onNext`(v2, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fe7be.  return @kind void;
  #L3fe7c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fe7c4.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fe7ca.  v2:= temp @kind object;
  #L3fe7cc.  v0:= "The mapper function returned a null value." @kind object;
  #L3fe7d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fe7d6.  v2:= temp @kind object;
  #L3fe7d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3fe7dc.  call `onNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fe7e2.  return @kind void;
  #L3fe7e4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe7e6.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fe7ec.  return @kind void;
  catch `java.lang.Throwable` @[L3fe7c0..L3fe7d8] goto L3fe7e4;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapConditionalSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fe744.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3fe748.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3fe74e.  v0:= temp @kind object;
  #L3fe750.  if v0 == 0 then goto L3fe76e;
  #L3fe754.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fe758.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fe75e.  v0:= temp @kind object;
  #L3fe760.  v1:= "The mapper function returned a null value." @kind object;
  #L3fe764.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fe76a.  v0:= temp @kind object;
  #L3fe76c.  goto L3fe770;
  #L3fe76e.  v0:= 0I;
  #L3fe770.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapConditionalSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3fe728.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3fe72e.  v1:= temp;
  #L3fe730.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe6cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L3fe6d0.  if v0 == 0 then goto L3fe6d8;
  #L3fe6d4.  v2:= 0I;
  #L3fe6d6.  return v2;
  #L3fe6d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fe6dc.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fe6e2.  v2:= temp @kind object;
  #L3fe6e4.  v0:= "The mapper function returned a null value." @kind object;
  #L3fe6e8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fe6ee.  v2:= temp @kind object;
  #L3fe6f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3fe6f4.  call temp:= `tryOnNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3fe6fa.  v2:= temp;
  #L3fe6fc.  return v2;
  #L3fe6fe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe700.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$MapConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fe706.  v2:= 1I;
  #L3fe708.  return v2;
  catch `java.lang.Throwable` @[L3fe6d8..L3fe6f0] goto L3fe6fe;
}
