record `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.limit` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.OTHER_STATE_CONSUMED_OR_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.OTHER_STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3ff550.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3ff556.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L3ff55a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3ff55e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ff564.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3ff568.  v2:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver`;
  #L3ff56c.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;)V` @kind direct;
  #L3ff572.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` := v2 @kind object;
  #L3ff576.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3ff57a.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3ff580.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L3ff584.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3ff588.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3ff58e.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L3ff592.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3ff598.  v2:= temp;
  #L3ff59a.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.prefetch` @type ^`int` := v2;
  #L3ff59e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.prefetch` @type ^`int`;
  #L3ff5a2.  v0:= v2 ^> 2;
  #L3ff5a6.  v2:= v2 - v0 @kind int;
  #L3ff5a8.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.limit` @type ^`int` := v2;
  #L3ff5ac.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff5c0.  v0:= 1I;
  #L3ff5c2.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3ff5c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff5ca.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ff5d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` @kind object;
  #L3ff5d4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ff5da.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L3ff5e0.  v0:= temp;
  #L3ff5e2.  if v0 != 0 then goto L3ff5f0;
  #L3ff5e6.  v0:= 0I;
  #L3ff5e8.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L3ff5ec.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v0 @kind object;
  #L3ff5f0.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3ff604.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L3ff60a.  v0:= temp;
  #L3ff60c.  if v0 != 0 then goto L3ff616;
  #L3ff610.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L3ff616.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L3ff628.  v0:= v18 @kind object;
  #L3ff62c.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ff630.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L3ff634.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int`;
  #L3ff638.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.limit` @type ^`int`;
  #L3ff63c.  v6:= 1I;
  #L3ff63e.  v7:= v2 @kind wide;
  #L3ff640.  v2:= 1I;
  #L3ff642.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ff646.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3ff64c.  v9:= temp @kind wide;
  #L3ff64e.  v11:= 2I;
  #L3ff650.  v12:= 0I;
  #L3ff652.  v13:= lcmp(v7, v9);
  #L3ff656.  if v13 == 0 then goto L3ff72c;
  #L3ff65a.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.cancelled` @type ^`boolean` @kind boolean;
  #L3ff65e.  if v13 == 0 then goto L3ff66c;
  #L3ff662.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff666.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff66a.  return @kind void;
  #L3ff66c.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff670.  call temp:= `get`(v13) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ff676.  v13:= temp @kind object;
  #L3ff678.  if v13 == 0 then goto L3ff698;
  #L3ff67c.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff680.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff684.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff688.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3ff68e.  v2:= temp @kind object;
  #L3ff690.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ff696.  return @kind void;
  #L3ff698.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int`;
  #L3ff69c.  v14:= 1L;
  #L3ff6a0.  if v13 != v6 then goto L3ff6ba;
  #L3ff6a4.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` @kind object;
  #L3ff6a8.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff6ac.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v11;
  #L3ff6b0.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ff6b6.  v7:= v7 + v14 @kind long;
  #L3ff6b8.  goto L3ff64e;
  #L3ff6ba.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L3ff6be.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3ff6c2.  if v6 == 0 then goto L3ff6d0;
  #L3ff6c6.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3ff6cc.  v6:= temp @kind object;
  #L3ff6ce.  goto L3ff6d2;
  #L3ff6d0.  v6:= v12 @kind object;
  #L3ff6d2.  if v6 != 0 then goto L3ff6dc;
  #L3ff6d6.  v17:= 1I;
  #L3ff6da.  goto L3ff6e0;
  #L3ff6dc.  v17:= 0I;
  #L3ff6e0.  if v3 == 0 then goto L3ff6f8;
  #L3ff6e4.  if v17 == 0 then goto L3ff6f8;
  #L3ff6e8.  if v13 != v11 then goto L3ff6f8;
  #L3ff6ec.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff6f0.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ff6f6.  return @kind void;
  #L3ff6f8.  if v17 == 0 then goto L3ff6fe;
  #L3ff6fc.  goto L3ff72c;
  #L3ff6fe.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ff704.  v7:= v7 + v14 @kind long;
  #L3ff706.  v4:= v4 + 1;
  #L3ff70a.  if v4 != v5 then goto L3ff728;
  #L3ff70e.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff712.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ff718.  v3:= temp @kind object;
  #L3ff71a.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L3ff71e.  v11:= (`long`) v5 @kind i2l;
  #L3ff720.  call `request`(v3, v11) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ff726.  v4:= 0I;
  #L3ff728.  v6:= 1I;
  #L3ff72a.  goto L3ff64e;
  #L3ff72c.  v3:= lcmp(v7, v9);
  #L3ff730.  if v3 != 0 then goto L3ff7b2;
  #L3ff734.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.cancelled` @type ^`boolean` @kind boolean;
  #L3ff738.  if v3 == 0 then goto L3ff746;
  #L3ff73c.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff740.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff744.  return @kind void;
  #L3ff746.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff74a.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ff750.  v3:= temp @kind object;
  #L3ff752.  if v3 == 0 then goto L3ff772;
  #L3ff756.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L3ff75a.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff75e.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff762.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3ff768.  v2:= temp @kind object;
  #L3ff76a.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3ff770.  return @kind void;
  #L3ff772.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L3ff776.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3ff77a.  if v6 == 0 then goto L3ff792;
  #L3ff77e.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L3ff784.  v6:= temp;
  #L3ff786.  if v6 == 0 then goto L3ff78c;
  #L3ff78a.  goto L3ff792;
  #L3ff78c.  v16:= 0I;
  #L3ff790.  goto L3ff796;
  #L3ff792.  v16:= 1I;
  #L3ff796.  if v3 == 0 then goto L3ff7b2;
  #L3ff79a.  if v16 == 0 then goto L3ff7b2;
  #L3ff79e.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int`;
  #L3ff7a2.  if v3 != v11 then goto L3ff7b2;
  #L3ff7a6.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L3ff7aa.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3ff7b0.  return @kind void;
  #L3ff7b2.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` := v7 @kind wide;
  #L3ff7b6.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int` := v4;
  #L3ff7ba.  v2:= -v2 @kind int;
  #L3ff7bc.  call temp:= `addAndGet`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.addAndGet:(I)I` @kind virtual;
  #L3ff7c2.  v2:= temp;
  #L3ff7c4.  if v2 != 0 then goto L3ff7ca;
  #L3ff7c8.  return @kind void;
  #L3ff7ca.  v6:= 1I;
  #L3ff7cc.  goto L3ff642;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `getOrCreateQueue`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ff520.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3ff524.  if v0 != 0 then goto L3ff53e;
  #L3ff528.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3ff52c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3ff532.  v1:= temp;
  #L3ff534.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3ff53a.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L3ff53e.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff7e0.  v0:= 1I;
  #L3ff7e2.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L3ff7e6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ff7ec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff800.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff804.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3ff80a.  v0:= temp;
  #L3ff80c.  if v0 == 0 then goto L3ff822;
  #L3ff810.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff814.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ff81a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ff820.  goto L3ff828;
  #L3ff822.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ff828.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ff83c.  v0:= 1I;
  #L3ff83e.  v1:= 0I;
  #L3ff840.  call temp:= `compareAndSet`(v7, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.compareAndSet:(II)Z` @kind virtual;
  #L3ff846.  v2:= temp;
  #L3ff848.  if v2 == 0 then goto L3ff8e4;
  #L3ff84c.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L3ff850.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ff854.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3ff85a.  v4:= temp @kind wide;
  #L3ff85c.  v6:= lcmp(v4, v2);
  #L3ff860.  if v6 == 0 then goto L3ff8c8;
  #L3ff864.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L3ff868.  if v4 == 0 then goto L3ff882;
  #L3ff86c.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.isEmpty:()Z` @kind interface;
  #L3ff872.  v5:= temp;
  #L3ff874.  if v5 == 0 then goto L3ff87a;
  #L3ff878.  goto L3ff882;
  #L3ff87a.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3ff880.  goto L3ff8d6;
  #L3ff882.  v4:= 1L;
  #L3ff886.  v2:= v2 + v4 @kind long;
  #L3ff888.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` := v2 @kind wide;
  #L3ff88c.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ff890.  call `onNext`(v2, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ff896.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int`;
  #L3ff89a.  v8:= v8 + v0 @kind int;
  #L3ff89c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.limit` @type ^`int`;
  #L3ff8a0.  if v8 != v0 then goto L3ff8c2;
  #L3ff8a4.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int` := v1;
  #L3ff8a8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff8ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ff8b2.  v0:= temp @kind object;
  #L3ff8b4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L3ff8b8.  v1:= (`long`) v8 @kind i2l;
  #L3ff8ba.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3ff8c0.  goto L3ff8d6;
  #L3ff8c2.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int` := v8;
  #L3ff8c6.  goto L3ff8d6;
  #L3ff8c8.  call temp:= `getOrCreateQueue`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L3ff8ce.  v0:= temp @kind object;
  #L3ff8d0.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3ff8d6.  call temp:= `decrementAndGet`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.decrementAndGet:()I` @kind virtual;
  #L3ff8dc.  v8:= temp;
  #L3ff8de.  if v8 != 0 then goto L3ff900;
  #L3ff8e2.  return @kind void;
  #L3ff8e4.  call temp:= `getOrCreateQueue`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L3ff8ea.  v0:= temp @kind object;
  #L3ff8ec.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3ff8f2.  call temp:= `getAndIncrement`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L3ff8f8.  v8:= temp;
  #L3ff8fa.  if v8 == 0 then goto L3ff900;
  #L3ff8fe.  return @kind void;
  #L3ff900.  call `drainLoop`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L3ff906.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ff918.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff91c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.prefetch` @type ^`int`;
  #L3ff920.  v1:= (`long`) v1 @kind i2l;
  #L3ff922.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L3ff928.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L3ff93c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3ff940.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3ff946.  v0:= temp;
  #L3ff948.  if v0 == 0 then goto L3ff95e;
  #L3ff94c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ff950.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3ff956.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ff95c.  goto L3ff964;
  #L3ff95e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3ff964.  return @kind void;
}
procedure `void` `otherSuccess`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ff978.  v0:= 1I;
  #L3ff97a.  v1:= 0I;
  #L3ff97c.  call temp:= `compareAndSet`(v6, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.compareAndSet:(II)Z` @kind virtual;
  #L3ff982.  v1:= temp;
  #L3ff984.  if v1 == 0 then goto L3ff9d2;
  #L3ff988.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L3ff98c.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ff990.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3ff996.  v3:= temp @kind wide;
  #L3ff998.  v5:= lcmp(v3, v1);
  #L3ff99c.  if v5 == 0 then goto L3ff9bc;
  #L3ff9a0.  v3:= 1L;
  #L3ff9a4.  v1:= v1 + v3 @kind long;
  #L3ff9a6.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` := v1 @kind wide;
  #L3ff9aa.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3ff9ae.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3ff9b4.  v7:= 2I;
  #L3ff9b6.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v7;
  #L3ff9ba.  goto L3ff9e8;
  #L3ff9bc.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v7 @kind object;
  #L3ff9c0.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v0;
  #L3ff9c4.  call temp:= `decrementAndGet`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.decrementAndGet:()I` @kind virtual;
  #L3ff9ca.  v7:= temp;
  #L3ff9cc.  if v7 != 0 then goto L3ff9e8;
  #L3ff9d0.  return @kind void;
  #L3ff9d2.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v7 @kind object;
  #L3ff9d6.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v0;
  #L3ff9da.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getAndIncrement:()I` @kind virtual;
  #L3ff9e0.  v7:= temp;
  #L3ff9e2.  if v7 == 0 then goto L3ff9e8;
  #L3ff9e6.  return @kind void;
  #L3ff9e8.  call `drainLoop`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L3ff9ee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffa00.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3ffa04.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3ffa0a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L3ffa10.  return @kind void;
}
