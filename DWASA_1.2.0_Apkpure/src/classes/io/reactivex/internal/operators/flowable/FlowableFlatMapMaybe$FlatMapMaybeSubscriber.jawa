record `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f8c1c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3f8c22.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3f8c26.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L3f8c2a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L3f8c2e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int` := v4;
  #L3f8c32.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3f8c36.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3f8c3c.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3f8c40.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L3f8c44.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L3f8c4a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L3f8c4e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L3f8c52.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L3f8c58.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L3f8c5c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3f8c60.  v2:= 1I;
  #L3f8c62.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L3f8c68.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L3f8c6c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f8c70.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f8c76.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L3f8c7a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8c8c.  v0:= 1I;
  #L3f8c8e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3f8c92.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8c96.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f8c9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f8ca0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3f8ca6.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L3f8cb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f8cbc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8cc2.  v0:= temp @kind object;
  #L3f8cc4.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L3f8cc8.  if v0 == 0 then goto L3f8cd2;
  #L3f8ccc.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3f8cd2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3f8ce4.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f8cea.  v0:= temp;
  #L3f8cec.  if v0 != 0 then goto L3f8cf6;
  #L3f8cf0.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drainLoop:()V` @kind virtual;
  #L3f8cf6.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v15 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L3f8d08.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f8d0c.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f8d10.  v2:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f8d14.  v3:= 1I;
  #L3f8d16.  v4:= 1I;
  #L3f8d18.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f8d1c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f8d22.  v5:= temp @kind wide;
  #L3f8d24.  v7:= 0L;
  #L3f8d28.  v9:= v7 @kind wide;
  #L3f8d2a.  v11:= 0I;
  #L3f8d2c.  v12:= lcmp(v9, v5);
  #L3f8d30.  if v12 == 0 then goto L3f8dee;
  #L3f8d34.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f8d38.  if v12 == 0 then goto L3f8d44;
  #L3f8d3c.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @kind virtual;
  #L3f8d42.  return @kind void;
  #L3f8d44.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f8d48.  if v12 != 0 then goto L3f8d7a;
  #L3f8d4c.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8d50.  call temp:= `get`(v12) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8d56.  v12:= temp @kind object;
  #L3f8d58.  v12:= (`java.lang.Throwable`) v12 @kind object;
  #L3f8d5c.  if v12 == 0 then goto L3f8d7a;
  #L3f8d60.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8d64.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f8d6a.  v1:= temp @kind object;
  #L3f8d6c.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @kind virtual;
  #L3f8d72.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f8d78.  return @kind void;
  #L3f8d7a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3f8d80.  v12:= temp;
  #L3f8d82.  if v12 != 0 then goto L3f8d8a;
  #L3f8d86.  v12:= 1I;
  #L3f8d88.  goto L3f8d8c;
  #L3f8d8a.  v12:= 0I;
  #L3f8d8c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8d92.  v13:= temp @kind object;
  #L3f8d94.  v13:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v13 @kind object;
  #L3f8d98.  if v13 == 0 then goto L3f8da6;
  #L3f8d9c.  call temp:= `poll`(v13) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f8da2.  v13:= temp @kind object;
  #L3f8da4.  goto L3f8da8;
  #L3f8da6.  v13:= 0I;
  #L3f8da8.  if v13 != 0 then goto L3f8db0;
  #L3f8dac.  v14:= 1I;
  #L3f8dae.  goto L3f8db2;
  #L3f8db0.  v14:= 0I;
  #L3f8db2.  if v12 == 0 then goto L3f8dda;
  #L3f8db6.  if v14 == 0 then goto L3f8dda;
  #L3f8dba.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8dbe.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f8dc4.  v1:= temp @kind object;
  #L3f8dc6.  if v1 == 0 then goto L3f8dd2;
  #L3f8dca.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f8dd0.  goto L3f8dd8;
  #L3f8dd2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f8dd8.  return @kind void;
  #L3f8dda.  if v14 == 0 then goto L3f8de0;
  #L3f8dde.  goto L3f8dee;
  #L3f8de0.  call `onNext`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f8de6.  v11:= 1L;
  #L3f8dea.  v9:= v9 + v11 @kind long;
  #L3f8dec.  goto L3f8d2a;
  #L3f8dee.  v12:= lcmp(v9, v5);
  #L3f8df2.  if v12 != 0 then goto L3f8e94;
  #L3f8df6.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f8dfa.  if v5 == 0 then goto L3f8e06;
  #L3f8dfe.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @kind virtual;
  #L3f8e04.  return @kind void;
  #L3f8e06.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f8e0a.  if v5 != 0 then goto L3f8e3c;
  #L3f8e0e.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8e12.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8e18.  v5:= temp @kind object;
  #L3f8e1a.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L3f8e1e.  if v5 == 0 then goto L3f8e3c;
  #L3f8e22.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8e26.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f8e2c.  v1:= temp @kind object;
  #L3f8e2e.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @kind virtual;
  #L3f8e34.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f8e3a.  return @kind void;
  #L3f8e3c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3f8e42.  v5:= temp;
  #L3f8e44.  if v5 != 0 then goto L3f8e4c;
  #L3f8e48.  v5:= 1I;
  #L3f8e4a.  goto L3f8e4e;
  #L3f8e4c.  v5:= 0I;
  #L3f8e4e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8e54.  v6:= temp @kind object;
  #L3f8e56.  v6:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v6 @kind object;
  #L3f8e5a.  if v6 == 0 then goto L3f8e6a;
  #L3f8e5e.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3f8e64.  v6:= temp;
  #L3f8e66.  if v6 == 0 then goto L3f8e6c;
  #L3f8e6a.  v11:= 1I;
  #L3f8e6c.  if v5 == 0 then goto L3f8e94;
  #L3f8e70.  if v11 == 0 then goto L3f8e94;
  #L3f8e74.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8e78.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f8e7e.  v1:= temp @kind object;
  #L3f8e80.  if v1 == 0 then goto L3f8e8c;
  #L3f8e84.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f8e8a.  goto L3f8e92;
  #L3f8e8c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f8e92.  return @kind void;
  #L3f8e94.  v5:= lcmp(v9, v7);
  #L3f8e98.  if v5 == 0 then goto L3f8ebe;
  #L3f8e9c.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f8ea0.  call temp:= `produced`(v5, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f8ea6.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L3f8eaa.  v6:= 2147483647I;
  #L3f8eb0.  if v5 == v6 then goto L3f8ebe;
  #L3f8eb4.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8eb8.  call `request`(v5, v9) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f8ebe.  v4:= -v4 @kind int;
  #L3f8ec0.  call temp:= `addAndGet`(v15, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.addAndGet:(I)I` @kind virtual;
  #L3f8ec6.  v4:= temp;
  #L3f8ec8.  if v4 != 0 then goto L3f8d18;
  #L3f8ecc.  return @kind void;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `getOrCreateQueue`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f8bd0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f8bd4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8bda.  v0:= temp @kind object;
  #L3f8bdc.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L3f8be0.  if v0 == 0 then goto L3f8be6;
  #L3f8be4.  return v0 @kind object;
  #L3f8be6.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3f8bea.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f8bf0.  v1:= temp;
  #L3f8bf2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3f8bf8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f8bfc.  v2:= 0I;
  #L3f8bfe.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f8c04.  v1:= temp;
  #L3f8c06.  if v1 == 0 then goto L3f8bd0;
  #L3f8c0a.  return v0 @kind object;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8ee0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f8ee4.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f8eea.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.get:()I` @kind virtual;
  #L3f8ef0.  v6:= temp;
  #L3f8ef2.  v0:= 1L;
  #L3f8ef6.  v2:= 2147483647I;
  #L3f8efc.  if v6 != 0 then goto L3f8f98;
  #L3f8f00.  v6:= 1I;
  #L3f8f02.  v3:= 0I;
  #L3f8f04.  call temp:= `compareAndSet`(v5, v3, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.compareAndSet:(II)Z` @kind virtual;
  #L3f8f0a.  v4:= temp;
  #L3f8f0c.  if v4 == 0 then goto L3f8f98;
  #L3f8f10.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f8f14.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f8f1a.  v4:= temp;
  #L3f8f1c.  if v4 != 0 then goto L3f8f22;
  #L3f8f20.  goto L3f8f24;
  #L3f8f22.  v6:= 0I;
  #L3f8f24.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f8f28.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8f2e.  v3:= temp @kind object;
  #L3f8f30.  v3:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v3 @kind object;
  #L3f8f34.  if v6 == 0 then goto L3f8f70;
  #L3f8f38.  if v3 == 0 then goto L3f8f48;
  #L3f8f3c.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3f8f42.  v6:= temp;
  #L3f8f44.  if v6 == 0 then goto L3f8f70;
  #L3f8f48.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8f4c.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f8f52.  v6:= temp @kind object;
  #L3f8f54.  if v6 == 0 then goto L3f8f64;
  #L3f8f58.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f8f5c.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f8f62.  goto L3f8f6e;
  #L3f8f64.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f8f68.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f8f6e.  return @kind void;
  #L3f8f70.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L3f8f74.  if v6 == v2 then goto L3f8f82;
  #L3f8f78.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8f7c.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f8f82.  call temp:= `decrementAndGet`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3f8f88.  v6:= temp;
  #L3f8f8a.  if v6 != 0 then goto L3f8f90;
  #L3f8f8e.  return @kind void;
  #L3f8f90.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drainLoop:()V` @kind virtual;
  #L3f8f96.  goto L3f8fba;
  #L3f8f98.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f8f9c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f8fa2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L3f8fa6.  if v6 == v2 then goto L3f8fb4;
  #L3f8faa.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8fae.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f8fb4.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L3f8fba.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3f8fcc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f8fd0.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f8fd6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f8fda.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f8fe0.  v3:= temp;
  #L3f8fe2.  if v3 == 0 then goto L3f9032;
  #L3f8fe6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f8fea.  if v3 != 0 then goto L3f9004;
  #L3f8fee.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f8ff2.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f8ff8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f8ffc.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3f9002.  goto L3f9020;
  #L3f9004.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L3f9008.  v4:= 2147483647I;
  #L3f900e.  if v3 == v4 then goto L3f9020;
  #L3f9012.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9016.  v0:= 1L;
  #L3f901a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f9020.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f9024.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f902a.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L3f9030.  goto L3f9038;
  #L3f9032.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f9038.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.innerSuccess:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f904c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f9050.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f9056.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.get:()I` @kind virtual;
  #L3f905c.  v6:= temp;
  #L3f905e.  if v6 != 0 then goto L3f9142;
  #L3f9062.  v6:= 1I;
  #L3f9064.  v0:= 0I;
  #L3f9066.  call temp:= `compareAndSet`(v5, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.compareAndSet:(II)Z` @kind virtual;
  #L3f906c.  v1:= temp;
  #L3f906e.  if v1 == 0 then goto L3f9142;
  #L3f9072.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f9076.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f907c.  v1:= temp;
  #L3f907e.  if v1 != 0 then goto L3f9084;
  #L3f9082.  goto L3f9086;
  #L3f9084.  v6:= 0I;
  #L3f9086.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f908a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3f9090.  v0:= temp @kind wide;
  #L3f9092.  v2:= 0L;
  #L3f9096.  v4:= lcmp(v0, v2);
  #L3f909a.  if v4 == 0 then goto L3f911c;
  #L3f909e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f90a2.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f90a8.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f90ac.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f90b2.  v7:= temp @kind object;
  #L3f90b4.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L3f90b8.  if v6 == 0 then goto L3f90f4;
  #L3f90bc.  if v7 == 0 then goto L3f90cc;
  #L3f90c0.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3f90c6.  v6:= temp;
  #L3f90c8.  if v6 == 0 then goto L3f90f4;
  #L3f90cc.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f90d0.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L3f90d6.  v6:= temp @kind object;
  #L3f90d8.  if v6 == 0 then goto L3f90e8;
  #L3f90dc.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f90e0.  call `onError`(v7, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f90e6.  goto L3f90f2;
  #L3f90e8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f90ec.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3f90f2.  return @kind void;
  #L3f90f4.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f90f8.  v0:= 1L;
  #L3f90fc.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f9102.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L3f9106.  v7:= 2147483647I;
  #L3f910c.  if v6 == v7 then goto L3f912e;
  #L3f9110.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9114.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f911a.  goto L3f912e;
  #L3f911c.  call temp:= `getOrCreateQueue`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L3f9122.  v6:= temp @kind object;
  #L3f9124.  @monitorenter v6
  #L3f9126.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f912c.  @monitorexit v6
  #L3f912e.  call temp:= `decrementAndGet`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.decrementAndGet:()I` @kind virtual;
  #L3f9134.  v6:= temp;
  #L3f9136.  if v6 != 0 then goto L3f916c;
  #L3f913a.  return @kind void;
  #L3f913c.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f913e.  @monitorexit v6
  #L3f9140.  throw v7;
  #L3f9142.  call temp:= `getOrCreateQueue`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L3f9148.  v6:= temp @kind object;
  #L3f914a.  @monitorenter v6
  #L3f914c.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f9152.  @monitorexit v6
  #L3f9154.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f9158.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f915e.  call temp:= `getAndIncrement`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.getAndIncrement:()I` @kind virtual;
  #L3f9164.  v6:= temp;
  #L3f9166.  if v6 == 0 then goto L3f916c;
  #L3f916a.  return @kind void;
  #L3f916c.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drainLoop:()V` @kind virtual;
  #L3f9172.  return @kind void;
  #L3f9174.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f9176.  @monitorexit v6
  #L3f9178.  throw v7;
  catch `java.lang.Throwable` @[L3f9126..L3f912e] goto L3f913c;
  catch `java.lang.Throwable` @[L3f913e..L3f9140] goto L3f913c;
  catch `java.lang.Throwable` @[L3f914c..L3f9154] goto L3f9174;
  catch `java.lang.Throwable` @[L3f9176..L3f9178] goto L3f9174;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f91b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f91b8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f91be.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L3f91c4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f91d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f91dc.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3f91e2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3f91e6.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3f91ec.  v0:= temp;
  #L3f91ee.  if v0 == 0 then goto L3f920c;
  #L3f91f2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L3f91f6.  if v2 != 0 then goto L3f9204;
  #L3f91fa.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f91fe.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L3f9204.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L3f920a.  goto L3f9212;
  #L3f920c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f9212.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f9224.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L3f9228.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f922e.  v3:= temp @kind object;
  #L3f9230.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L3f9234.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f923a.  v3:= temp @kind object;
  #L3f923c.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L3f9240.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f9244.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3f924a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver`;
  #L3f924e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;)V` @kind direct;
  #L3f9254.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3f9258.  if v1 != 0 then goto L3f9272;
  #L3f925c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L3f9260.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3f9266.  v1:= temp;
  #L3f9268.  if v1 == 0 then goto L3f9272;
  #L3f926c.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L3f9272.  return @kind void;
  #L3f9274.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f9276.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f927c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f9280.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3f9286.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f928c.  return @kind void;
  catch `java.lang.Throwable` @[L3f9224..L3f9240] goto L3f9274;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f92ac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3f92b0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3f92b6.  v0:= temp;
  #L3f92b8.  if v0 == 0 then goto L3f92f2;
  #L3f92bc.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3f92c0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f92c4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3f92ca.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L3f92ce.  v1:= 2147483647I;
  #L3f92d4.  if v0 != v1 then goto L3f92ea;
  #L3f92d8.  v0:= 9223372036854775807L;
  #L3f92e2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f92e8.  goto L3f92f2;
  #L3f92ea.  v0:= (`long`) v0 @kind i2l;
  #L3f92ec.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f92f2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9304.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3f930a.  v0:= temp;
  #L3f930c.  if v0 == 0 then goto L3f9320;
  #L3f9310.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f9314.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3f931a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L3f9320.  return @kind void;
}
