record `io.reactivex.internal.operators.flowable.FlowableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.flowables.ConnectableFlowable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamPublisher` @kind interface, `io.reactivex.internal.disposables.ResettableConnectable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableReplay.bufferFactory` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay.current` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableReplay.onSubscribe` @AccessFlag FINAL;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableReplay.source` @AccessFlag FINAL;
}
global `java.util.concurrent.Callable` `@@io.reactivex.internal.operators.flowable.FlowableReplay.DEFAULT_UNBOUNDED_FACTORY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L405638.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$DefaultUnboundedFactory`;
  #L40563c.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$DefaultUnboundedFactory;.<init>:()V` @kind direct;
  #L405642.  `@@io.reactivex.internal.operators.flowable.FlowableReplay.DEFAULT_UNBOUNDED_FACTORY` @type ^`java.util.concurrent.Callable` := v0 @kind object;
  #L405646.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.Flowable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L405658.  call `<init>`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L40565e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.onSubscribe` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L405662.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.source` @type ^`io.reactivex.Flowable` := v2 @kind object;
  #L405666.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L40566a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.bufferFactory` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L40566e.  return @kind void;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40550c.  v0:= 2147483647I;
  #L405512.  if v2 != v0 then goto L405520;
  #L405516.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L40551c.  v1:= temp @kind object;
  #L40551e.  return v1 @kind object;
  #L405520.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBufferTask`;
  #L405524.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBufferTask;.<init>:(I)V` @kind direct;
  #L40552a.  call temp:= `create`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L405530.  v1:= temp @kind object;
  #L405532.  return v1 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40557c.  v5:= 2147483647I;
  #L405582.  v0:= v6 @kind object;
  #L405584.  v1:= v7 @kind wide;
  #L405586.  v3:= v9 @kind object;
  #L405588.  v4:= v10 @kind object;
  #L40558a.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L405590.  v6:= temp @kind object;
  #L405592.  return v6 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4055a4.  v6:= new `io.reactivex.internal.operators.flowable.FlowableReplay$ScheduledReplayBufferTask`;
  #L4055a8.  v0:= v6 @kind object;
  #L4055aa.  v1:= v12;
  #L4055ac.  v2:= v8 @kind wide;
  #L4055ae.  v4:= v10 @kind object;
  #L4055b0.  v5:= v11 @kind object;
  #L4055b2.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ScheduledReplayBufferTask;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L4055b8.  call temp:= `create`(v7, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L4055be.  v7:= temp @kind object;
  #L4055c0.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L405544.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L405548.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40554e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$ReplayPublisher`;
  #L405552.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayPublisher;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L405558.  v2:= new `io.reactivex.internal.operators.flowable.FlowableReplay`;
  #L40555c.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L405562.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L405568.  v3:= temp @kind object;
  #L40556a.  return v3 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `createFrom`(`io.reactivex.Flowable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4055d4.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay.DEFAULT_UNBOUNDED_FACTORY` @type ^`java.util.concurrent.Callable` @kind object;
  #L4055d8.  call temp:= `create`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L4055de.  v1:= temp @kind object;
  #L4055e0.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `multicastSelector`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4054f0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$MulticastFlowable`;
  #L4054f4.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$MulticastFlowable;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L4054fa.  return v0 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `observeOn`(`io.reactivex.flowables.ConnectableFlowable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4055f4.  call temp:= `observeOn`(v1, v2) @signature `Lio/reactivex/flowables/ConnectableFlowable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4055fa.  v2:= temp @kind object;
  #L4055fc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay`;
  #L405600.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ConnectableFlowableReplay;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Flowable;)V` @kind direct;
  #L405606.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L40560c.  v1:= temp @kind object;
  #L40560e.  return v1 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.flowable.FlowableReplay` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L405680.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405684.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40568a.  v0:= temp @kind object;
  #L40568c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber`) v0 @kind object;
  #L405690.  if v0 == 0 then goto L4056a0;
  #L405694.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.isDisposed:()Z` @kind virtual;
  #L40569a.  v1:= temp;
  #L40569c.  if v1 == 0 then goto L4056ce;
  #L4056a0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.bufferFactory` @type ^`java.util.concurrent.Callable` @kind object;
  #L4056a4.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4056aa.  v1:= temp @kind object;
  #L4056ac.  v1:= (`io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer`) v1 @kind object;
  #L4056b0.  v2:= new `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber`;
  #L4056b4.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer;)V` @kind direct;
  #L4056ba.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4056be.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4056c4.  v0:= temp;
  #L4056c6.  if v0 != 0 then goto L4056cc;
  #L4056ca.  goto L405680;
  #L4056cc.  v0:= v2 @kind object;
  #L4056ce.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4056d2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4056d8.  v1:= temp;
  #L4056da.  v2:= 1I;
  #L4056dc.  v3:= 0I;
  #L4056de.  if v1 != 0 then goto L4056f6;
  #L4056e2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4056e6.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4056ec.  v1:= temp;
  #L4056ee.  if v1 == 0 then goto L4056f6;
  #L4056f2.  v1:= 1I;
  #L4056f4.  goto L4056f8;
  #L4056f6.  v1:= 0I;
  #L4056f8.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4056fe.  if v1 == 0 then goto L40570c;
  #L405702.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.source` @type ^`io.reactivex.Flowable` @kind object;
  #L405706.  call `subscribe`(v5, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40570c.  return @kind void;
  #L40570e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L405710.  if v1 == 0 then goto L40571e;
  #L405714.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L405718.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40571e.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L405724.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L40572a.  v5:= temp @kind object;
  #L40572c.  throw v5;
  #L40572e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L405730.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L405736.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L40573c.  v5:= temp @kind object;
  #L40573e.  goto L405742;
  #L405740.  throw v5;
  #L405742.  goto L405740;
  catch `java.lang.Throwable` @[L4056a0..L4056b0] goto L40572e;
  catch `java.lang.Throwable` @[L4056f8..L4056fe] goto L40570e;
}
procedure `void` `resetIf`(`io.reactivex.internal.operators.flowable.FlowableReplay` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40576c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405770.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber`) v3 @kind object;
  #L405774.  v1:= 0I;
  #L405776.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40577c.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.internal.operators.flowable.FlowableReplay` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405620.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay.source` @type ^`io.reactivex.Flowable` @kind object;
  #L405624.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableReplay` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L405790.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay.onSubscribe` @type ^`org.reactivestreams.Publisher` @kind object;
  #L405794.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40579a.  return @kind void;
}
