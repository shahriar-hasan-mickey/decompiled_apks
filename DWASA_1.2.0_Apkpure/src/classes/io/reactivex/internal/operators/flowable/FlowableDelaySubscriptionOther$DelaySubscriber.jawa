record `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.child` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.done` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.serial` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther` v1 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f52e4.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther` := v1 @kind object;
  #L3f52e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f52ee.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.serial` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v2 @kind object;
  #L3f52f2.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.child` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L3f52f6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5308.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.done` @type ^`boolean` @kind boolean;
  #L3f530c.  if v0 == 0 then goto L3f5312;
  #L3f5310.  return @kind void;
  #L3f5312.  v0:= 1I;
  #L3f5314.  v2.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f5318.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther` @kind object;
  #L3f531c.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther.main` @type ^`org.reactivestreams.Publisher` @kind object;
  #L3f5320.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber$OnCompleteSubscriber`;
  #L3f5324.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber$OnCompleteSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber;)V` @kind direct;
  #L3f532a.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3f5330.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5344.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.done` @type ^`boolean` @kind boolean;
  #L3f5348.  if v0 == 0 then goto L3f5354;
  #L3f534c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f5352.  return @kind void;
  #L3f5354.  v0:= 1I;
  #L3f5356.  v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3f535a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.child` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3f535e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3f5364.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3f5378.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber;.onComplete:()V` @kind virtual;
  #L3f537e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5390.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber.serial` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L3f5394.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$DelaySubscriber$DelaySubscription`;
  #L3f5398.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber$DelaySubscription;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$DelaySubscriber;Lorg/reactivestreams/Subscription;)V` @kind direct;
  #L3f539e.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L3f53a4.  v0:= 9223372036854775807L;
  #L3f53ae.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3f53b4.  return @kind void;
}
