record `io.reactivex.internal.operators.flowable.FlowableWindow` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow.bufferSize` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow.size` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow.skip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow;.<init>:(Lio/reactivex/Flowable;JJI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40eac4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40eaca.  v0.`io.reactivex.internal.operators.flowable.FlowableWindow.size` @type ^`long` := v2 @kind wide;
  #L40eace.  v0.`io.reactivex.internal.operators.flowable.FlowableWindow.skip` @type ^`long` := v4 @kind wide;
  #L40ead2.  v0.`io.reactivex.internal.operators.flowable.FlowableWindow.bufferSize` @type ^`int` := v6;
  #L40ead6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableWindow` v9 @kind this, `org.reactivestreams.Subscriber` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L40eae8.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.skip` @type ^`long` @kind wide;
  #L40eaec.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.size` @type ^`long` @kind wide;
  #L40eaf0.  v4:= lcmp(v0, v2);
  #L40eaf4.  if v4 != 0 then goto L40eb16;
  #L40eaf8.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40eafc.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber`;
  #L40eb00.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.size` @type ^`long` @kind wide;
  #L40eb04.  v4:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.bufferSize` @type ^`int`;
  #L40eb08.  call `<init>`(v1, v10, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JI)V` @kind direct;
  #L40eb0e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40eb14.  goto L40eb68;
  #L40eb16.  v4:= lcmp(v0, v2);
  #L40eb1a.  if v4 <= 0 then goto L40eb44;
  #L40eb1e.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40eb22.  v8:= new `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber`;
  #L40eb26.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.size` @type ^`long` @kind wide;
  #L40eb2a.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.skip` @type ^`long` @kind wide;
  #L40eb2e.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.bufferSize` @type ^`int`;
  #L40eb32.  v1:= v8 @kind object;
  #L40eb34.  v2:= v10 @kind object;
  #L40eb36.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @kind direct;
  #L40eb3c.  call `subscribe`(v0, v8) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40eb42.  goto L40eb68;
  #L40eb44.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40eb48.  v8:= new `io.reactivex.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber`;
  #L40eb4c.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.size` @type ^`long` @kind wide;
  #L40eb50.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.skip` @type ^`long` @kind wide;
  #L40eb54.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.bufferSize` @type ^`int`;
  #L40eb58.  v1:= v8 @kind object;
  #L40eb5a.  v2:= v10 @kind object;
  #L40eb5c.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowOverlapSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @kind direct;
  #L40eb62.  call `subscribe`(v0, v8) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40eb68.  return @kind void;
}
