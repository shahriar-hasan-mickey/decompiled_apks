record `io.reactivex.internal.operators.flowable.FlowableRetryPredicate` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate.count` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate.predicate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate;.<init>:(Lio/reactivex/Flowable;JLio/reactivex/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L405b20.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L405b26.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate.predicate` @type ^`io.reactivex.functions.Predicate` := v4 @kind object;
  #L405b2a.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate.count` @type ^`long` := v2 @kind wide;
  #L405b2e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate` v8 @kind this, `org.reactivestreams.Subscriber` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L405b40.  v5:= new `io.reactivex.internal.subscriptions.SubscriptionArbiter`;
  #L405b44.  call `<init>`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L405b4a.  call `onSubscribe`(v9, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L405b50.  v7:= new `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber`;
  #L405b54.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate.count` @type ^`long` @kind wide;
  #L405b58.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L405b5c.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate.source` @type ^`io.reactivex.Flowable` @kind object;
  #L405b60.  v0:= v7 @kind object;
  #L405b62.  v1:= v9 @kind object;
  #L405b64.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JLio/reactivex/functions/Predicate;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L405b6a.  call `subscribeNext`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.subscribeNext:()V` @kind virtual;
  #L405b70.  return @kind void;
}
