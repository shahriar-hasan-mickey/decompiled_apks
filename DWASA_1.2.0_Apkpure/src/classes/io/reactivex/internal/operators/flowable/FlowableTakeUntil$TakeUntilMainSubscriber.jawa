record `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L409bc0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L409bc6.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L409bca.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L409bce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L409bd4.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L409bd8.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L409bdc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L409be2.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L409be6.  v1:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber`;
  #L409bea.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;)V` @kind direct;
  #L409bf0.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` := v1 @kind object;
  #L409bf4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L409bf8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L409bfe.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L409c02.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409c14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L409c18.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L409c1e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` @kind object;
  #L409c22.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L409c28.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409c3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` @kind object;
  #L409c40.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L409c46.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409c4a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L409c4e.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L409c54.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409c68.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` @kind object;
  #L409c6c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L409c72.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409c76.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L409c7a.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L409c80.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409c94.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L409c98.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L409c9c.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L409ca2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409cb4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L409cb8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L409cbc.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L409cc2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409cd4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L409cd8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L409cdc.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L409ce2.  return @kind void;
}
