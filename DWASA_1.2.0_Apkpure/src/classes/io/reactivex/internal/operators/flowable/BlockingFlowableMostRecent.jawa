record `io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Iterable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent.initialValue` @AccessFlag FINAL;
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableMostRecent;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ed718.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ed71e.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent.source` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L3ed722.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent.initialValue` @type ^`java.lang.Object` := v2 @kind object;
  #L3ed726.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableMostRecent;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed6e4.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent$MostRecentSubscriber`;
  #L3ed6e8.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent.initialValue` @type ^`java.lang.Object` @kind object;
  #L3ed6ec.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableMostRecent$MostRecentSubscriber;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3ed6f2.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent.source` @type ^`io.reactivex.Flowable` @kind object;
  #L3ed6f6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3ed6fc.  call temp:= `getIterable`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableMostRecent$MostRecentSubscriber;.getIterable:()Lio/reactivex/internal/operators/flowable/BlockingFlowableMostRecent$MostRecentSubscriber$Iterator;` @kind virtual;
  #L3ed702.  v0:= temp @kind object;
  #L3ed704.  return v0 @kind object;
}
