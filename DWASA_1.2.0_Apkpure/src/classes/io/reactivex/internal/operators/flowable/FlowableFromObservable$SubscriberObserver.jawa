record `io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$SubscriberObserver;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fae3c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fae42.  v0.`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L3fae46.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$SubscriberObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fae58.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L3fae5c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3fae62.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$SubscriberObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fae74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fae78.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fae7e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$SubscriberObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fae90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fae94.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fae9a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$SubscriberObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3faeac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3faeb0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3faeb6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$SubscriberObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L3faec8.  v0.`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L3faecc.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3faed0.  call `onSubscribe`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3faed6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$SubscriberObserver` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$SubscriberObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3faee8.  return @kind void;
}
