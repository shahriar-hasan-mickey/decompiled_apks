record `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.bufferSize` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.count` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.delayError` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `int` v8 , `boolean` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4099e8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L4099ee.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.count` @type ^`long` := v2 @kind wide;
  #L4099f2.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.time` @type ^`long` := v4 @kind wide;
  #L4099f6.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.unit` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4099fa.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.scheduler` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L4099fe.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.bufferSize` @type ^`int` := v8;
  #L409a02.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.delayError` @type ^`boolean` := v9 @kind boolean;
  #L409a06.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed` v12 @kind this, `org.reactivestreams.Subscriber` v13 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L409a18.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.source` @type ^`io.reactivex.Flowable` @kind object;
  #L409a1c.  v11:= new `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber`;
  #L409a20.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.count` @type ^`long` @kind wide;
  #L409a24.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.time` @type ^`long` @kind wide;
  #L409a28.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L409a2c.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L409a30.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.bufferSize` @type ^`int`;
  #L409a34.  v10:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.delayError` @type ^`boolean` @kind boolean;
  #L409a38.  v1:= v11 @kind object;
  #L409a3a.  v2:= v13 @kind object;
  #L409a3c.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @kind direct;
  #L409a42.  call `subscribe`(v0, v11) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L409a48.  return @kind void;
}
