record `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.onAfterNext` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f5de8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L3f5dee.  v0.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.onAfterNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L3f5df2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5e04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f5e08.  call `onNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3f5e0e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.sourceMode` @type ^`int`;
  #L3f5e12.  if v0 != 0 then goto L3f5e2a;
  #L3f5e16.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.onAfterNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f5e1a.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f5e20.  goto L3f5e2a;
  #L3f5e22.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5e24.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f5e2a.  return @kind void;
  catch `java.lang.Throwable` @[L3f5e16..L3f5e20] goto L3f5e22;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5dbc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L3f5dc0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L3f5dc6.  v0:= temp @kind object;
  #L3f5dc8.  if v0 == 0 then goto L3f5dd6;
  #L3f5dcc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.onAfterNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f5dd0.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f5dd6.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L3f5da0.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L3f5da6.  v1:= temp;
  #L3f5da8.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5d60.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L3f5d64.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L3f5d6a.  v0:= temp;
  #L3f5d6c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber.onAfterNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f5d70.  call `accept`(v1, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f5d76.  goto L3f5d80;
  #L3f5d78.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5d7a.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$DoAfterConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3f5d80.  return v0;
  catch `java.lang.Throwable` @[L3f5d6c..L3f5d76] goto L3f5d78;
}
