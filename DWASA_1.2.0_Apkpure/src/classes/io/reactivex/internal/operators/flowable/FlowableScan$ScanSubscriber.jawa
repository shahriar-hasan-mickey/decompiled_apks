record `io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.accumulator` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$ScanSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L406660.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L406666.  v0.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40666a.  v0.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.accumulator` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L40666e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$ScanSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406680.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L406684.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40668a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$ScanSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40669c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.done` @type ^`boolean` @kind boolean;
  #L4066a0.  if v0 == 0 then goto L4066a6;
  #L4066a4.  return @kind void;
  #L4066a6.  v0:= 1I;
  #L4066a8.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4066ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4066b0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4066b6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$ScanSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4066c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.done` @type ^`boolean` @kind boolean;
  #L4066cc.  if v0 == 0 then goto L4066d8;
  #L4066d0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4066d6.  return @kind void;
  #L4066d8.  v0:= 1I;
  #L4066da.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4066de.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4066e2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4066e8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$ScanSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4066fc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.done` @type ^`boolean` @kind boolean;
  #L406700.  if v0 == 0 then goto L406706;
  #L406704.  return @kind void;
  #L406706.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40670a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L40670e.  if v1 != 0 then goto L40671e;
  #L406712.  v3.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.value` @type ^`java.lang.Object` := v4 @kind object;
  #L406716.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40671c.  goto L406740;
  #L40671e.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.accumulator` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L406722.  call temp:= `apply`(v2, v1, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L406728.  v4:= temp @kind object;
  #L40672a.  v1:= "The value returned by the accumulator is null" @kind object;
  #L40672e.  call temp:= `requireNonNull`(v4, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L406734.  v4:= temp @kind object;
  #L406736.  v3.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.value` @type ^`java.lang.Object` := v4 @kind object;
  #L40673a.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L406740.  return @kind void;
  #L406742.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L406744.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40674a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40674e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L406754.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$ScanSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40675a.  return @kind void;
  catch `java.lang.Throwable` @[L40671e..L406736] goto L406742;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$ScanSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406778.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40677c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L406782.  v0:= temp;
  #L406784.  if v0 == 0 then goto L406796;
  #L406788.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40678c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L406790.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L406796.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$ScanSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4067a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$ScanSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4067ac.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4067b2.  return @kind void;
}
