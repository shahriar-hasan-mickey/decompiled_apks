record `io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.lastTime` @AccessFlag ;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.unit` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval$TimeIntervalSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40a6d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40a6d6.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40a6da.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.scheduler` @type ^`io.reactivex.Scheduler` := v3 @kind object;
  #L40a6de.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L40a6e2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval$TimeIntervalSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a6f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a6f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a6fe.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval$TimeIntervalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a710.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a714.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40a71a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval$TimeIntervalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a72c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a730.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a736.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval$TimeIntervalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40a748.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40a74c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40a750.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L40a756.  v0:= temp @kind wide;
  #L40a758.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.lastTime` @type ^`long` @kind wide;
  #L40a75c.  v5.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.lastTime` @type ^`long` := v0 @kind wide;
  #L40a760.  v0:= v0 - v2 @kind long;
  #L40a762.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a766.  v3:= new `io.reactivex.schedulers.Timed`;
  #L40a76a.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40a76e.  call `<init>`(v3, v6, v0, v4) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L40a774.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40a77a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval$TimeIntervalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a78c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a790.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40a796.  v0:= temp;
  #L40a798.  if v0 == 0 then goto L40a7be;
  #L40a79c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L40a7a0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40a7a4.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L40a7aa.  v0:= temp @kind wide;
  #L40a7ac.  v2.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.lastTime` @type ^`long` := v0 @kind wide;
  #L40a7b0.  v2.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40a7b4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a7b8.  call `onSubscribe`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40a7be.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval$TimeIntervalSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a7d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a7d4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40a7da.  return @kind void;
}
