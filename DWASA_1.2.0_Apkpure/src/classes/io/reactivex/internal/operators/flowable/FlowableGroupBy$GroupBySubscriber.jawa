record `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.bufferSize` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @AccessFlag ;
  `java.util.Queue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.keySelector` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.outputFused` @AccessFlag ;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @AccessFlag ;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.valueSelector` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.NULL_KEY` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fb3a0.  v0:= new `java.lang.Object`;
  #L3fb3a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fb3aa.  `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` := v0 @kind object;
  #L3fb3ae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.Function` v5 @kind object, `int` v6 , `boolean` v7 , `java.util.Map` v8 @kind object, `java.util.Queue` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZLjava/util/Map;Ljava/util/Queue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3fb3c0.  call `<init>`(v2) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L3fb3c6.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3fb3ca.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3fb3d0.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L3fb3d4.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3fb3d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3fb3de.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L3fb3e2.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3fb3e6.  v1:= 1I;
  #L3fb3e8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L3fb3ee.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L3fb3f2.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L3fb3f6.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.keySelector` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L3fb3fa.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.valueSelector` @type ^`io.reactivex.functions.Function` := v5 @kind object;
  #L3fb3fe.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.bufferSize` @type ^`int` := v6;
  #L3fb402.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @type ^`boolean` := v7 @kind boolean;
  #L3fb406.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` := v8 @kind object;
  #L3fb40a.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` := v9 @kind object;
  #L3fb40e.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L3fb412.  call `<init>`(v3, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L3fb418.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v3 @kind object;
  #L3fb41c.  return @kind void;
}
procedure `void` `completeEvictions`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.completeEvictions:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3fb4ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` @kind object;
  #L3fb4f0.  if v0 == 0 then goto L3fb526;
  #L3fb4f4.  v0:= 0I;
  #L3fb4f6.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` @kind object;
  #L3fb4fa.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3fb500.  v1:= temp @kind object;
  #L3fb502.  v1:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast`) v1 @kind object;
  #L3fb506.  if v1 == 0 then goto L3fb516;
  #L3fb50a.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.onComplete:()V` @kind virtual;
  #L3fb510.  v0:= v0 + 1;
  #L3fb514.  goto L3fb4f6;
  #L3fb516.  if v0 == 0 then goto L3fb526;
  #L3fb51a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3fb51e.  v0:= -v0 @kind int;
  #L3fb520.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L3fb526.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fb430.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3fb434.  v1:= 0I;
  #L3fb436.  v2:= 1I;
  #L3fb438.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L3fb43e.  v0:= temp;
  #L3fb440.  if v0 == 0 then goto L3fb464;
  #L3fb444.  call `completeEvictions`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.completeEvictions:()V` @kind direct;
  #L3fb44a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3fb44e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3fb454.  v0:= temp;
  #L3fb456.  if v0 != 0 then goto L3fb464;
  #L3fb45a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fb45e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fb464.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb478.  if v2 == 0 then goto L3fb47e;
  #L3fb47c.  goto L3fb482;
  #L3fb47e.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L3fb482.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L3fb486.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fb48c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3fb490.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3fb496.  v2:= temp;
  #L3fb498.  if v2 != 0 then goto L3fb4bc;
  #L3fb49c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fb4a0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fb4a6.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.getAndIncrement:()I` @kind virtual;
  #L3fb4ac.  v2:= temp;
  #L3fb4ae.  if v2 != 0 then goto L3fb4bc;
  #L3fb4b2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fb4b6.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fb4bc.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fb2a0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3fb2a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3fb2aa.  v0:= temp;
  #L3fb2ac.  v1:= 1I;
  #L3fb2ae.  if v0 == 0 then goto L3fb2ba;
  #L3fb2b2.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fb2b8.  return v1;
  #L3fb2ba.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L3fb2be.  if v0 == 0 then goto L3fb2e2;
  #L3fb2c2.  if v3 == 0 then goto L3fb308;
  #L3fb2c6.  if v4 == 0 then goto L3fb308;
  #L3fb2ca.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3fb2ce.  if v3 == 0 then goto L3fb2da;
  #L3fb2d2.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fb2d8.  goto L3fb2e0;
  #L3fb2da.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fb2e0.  return v1;
  #L3fb2e2.  if v3 == 0 then goto L3fb308;
  #L3fb2e6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3fb2ea.  if v3 == 0 then goto L3fb2fc;
  #L3fb2ee.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fb2f4.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fb2fa.  return v1;
  #L3fb2fc.  if v4 == 0 then goto L3fb308;
  #L3fb300.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fb306.  return v1;
  #L3fb308.  v3:= 0I;
  #L3fb30a.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb4d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fb4d4.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fb4da.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L3fb538.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.getAndIncrement:()I` @kind virtual;
  #L3fb53e.  v0:= temp;
  #L3fb540.  if v0 == 0 then goto L3fb546;
  #L3fb544.  return @kind void;
  #L3fb546.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L3fb54a.  if v0 == 0 then goto L3fb556;
  #L3fb54e.  call `drainFused`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drainFused:()V` @kind virtual;
  #L3fb554.  goto L3fb55c;
  #L3fb556.  call `drainNormal`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drainNormal:()V` @kind virtual;
  #L3fb55c.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fb570.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fb574.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fb578.  v2:= 1I;
  #L3fb57a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3fb57e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3fb584.  v3:= temp;
  #L3fb586.  if v3 == 0 then goto L3fb592;
  #L3fb58a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fb590.  return @kind void;
  #L3fb592.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` @kind boolean;
  #L3fb596.  if v3 == 0 then goto L3fb5b8;
  #L3fb59a.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L3fb59e.  if v4 != 0 then goto L3fb5b8;
  #L3fb5a2.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3fb5a6.  if v4 == 0 then goto L3fb5b8;
  #L3fb5aa.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L3fb5b0.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fb5b6.  return @kind void;
  #L3fb5b8.  v4:= 0I;
  #L3fb5ba.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fb5c0.  if v3 == 0 then goto L3fb5dc;
  #L3fb5c4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3fb5c8.  if v0 == 0 then goto L3fb5d4;
  #L3fb5cc.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3fb5d2.  goto L3fb5da;
  #L3fb5d4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3fb5da.  return @kind void;
  #L3fb5dc.  v2:= -v2 @kind int;
  #L3fb5de.  call temp:= `addAndGet`(v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.addAndGet:(I)I` @kind virtual;
  #L3fb5e4.  v2:= temp;
  #L3fb5e6.  if v2 != 0 then goto L3fb57a;
  #L3fb5ea.  return @kind void;
}
procedure `void` `drainNormal`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3fb5fc.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fb600.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fb604.  v2:= 1I;
  #L3fb606.  v3:= 1I;
  #L3fb608.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fb60c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3fb612.  v4:= temp @kind wide;
  #L3fb614.  v6:= 0L;
  #L3fb618.  v8:= v6 @kind wide;
  #L3fb61a.  v10:= lcmp(v8, v4);
  #L3fb61e.  if v10 == 0 then goto L3fb65e;
  #L3fb622.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` @kind boolean;
  #L3fb626.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3fb62c.  v11:= temp @kind object;
  #L3fb62e.  v11:= (`io.reactivex.flowables.GroupedFlowable`) v11 @kind object;
  #L3fb632.  if v11 != 0 then goto L3fb63a;
  #L3fb636.  v12:= 1I;
  #L3fb638.  goto L3fb63c;
  #L3fb63a.  v12:= 0I;
  #L3fb63c.  call temp:= `checkTerminated`(v13, v10, v12, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L3fb642.  v10:= temp;
  #L3fb644.  if v10 == 0 then goto L3fb64a;
  #L3fb648.  return @kind void;
  #L3fb64a.  if v12 == 0 then goto L3fb650;
  #L3fb64e.  goto L3fb65e;
  #L3fb650.  call `onNext`(v1, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3fb656.  v10:= 1L;
  #L3fb65a.  v8:= v8 + v10 @kind long;
  #L3fb65c.  goto L3fb61a;
  #L3fb65e.  v10:= lcmp(v8, v4);
  #L3fb662.  if v10 != 0 then goto L3fb680;
  #L3fb666.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` @kind boolean;
  #L3fb66a.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3fb670.  v11:= temp;
  #L3fb672.  call temp:= `checkTerminated`(v13, v10, v11, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L3fb678.  v10:= temp;
  #L3fb67a.  if v10 == 0 then goto L3fb680;
  #L3fb67e.  return @kind void;
  #L3fb680.  v10:= lcmp(v8, v6);
  #L3fb684.  if v10 == 0 then goto L3fb6b0;
  #L3fb688.  v6:= 9223372036854775807L;
  #L3fb692.  v10:= lcmp(v4, v6);
  #L3fb696.  if v10 == 0 then goto L3fb6a6;
  #L3fb69a.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fb69e.  v5:= -v8 @kind long;
  #L3fb6a0.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L3fb6a6.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fb6aa.  call `request`(v4, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3fb6b0.  v3:= -v3 @kind int;
  #L3fb6b2.  call temp:= `addAndGet`(v13, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.addAndGet:(I)I` @kind virtual;
  #L3fb6b8.  v3:= temp;
  #L3fb6ba.  if v3 != 0 then goto L3fb608;
  #L3fb6be.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb31c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fb320.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L3fb326.  v0:= temp;
  #L3fb328.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fb6d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L3fb6d4.  if v0 != 0 then goto L3fb734;
  #L3fb6d8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L3fb6dc.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3fb6e2.  v0:= temp @kind object;
  #L3fb6e4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3fb6ea.  v0:= temp @kind object;
  #L3fb6ec.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fb6f2.  v1:= temp;
  #L3fb6f4.  if v1 == 0 then goto L3fb70c;
  #L3fb6f8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3fb6fe.  v1:= temp @kind object;
  #L3fb700.  v1:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast`) v1 @kind object;
  #L3fb704.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.onComplete:()V` @kind virtual;
  #L3fb70a.  goto L3fb6ec;
  #L3fb70c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L3fb710.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3fb716.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` @kind object;
  #L3fb71a.  if v0 == 0 then goto L3fb724;
  #L3fb71e.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L3fb724.  v0:= 1I;
  #L3fb726.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3fb72a.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` := v0 @kind boolean;
  #L3fb72e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L3fb734.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fb748.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L3fb74c.  if v0 == 0 then goto L3fb758;
  #L3fb750.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3fb756.  return @kind void;
  #L3fb758.  v0:= 1I;
  #L3fb75a.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3fb75e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L3fb762.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3fb768.  v1:= temp @kind object;
  #L3fb76a.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3fb770.  v1:= temp @kind object;
  #L3fb772.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fb778.  v2:= temp;
  #L3fb77a.  if v2 == 0 then goto L3fb792;
  #L3fb77e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3fb784.  v2:= temp @kind object;
  #L3fb786.  v2:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast`) v2 @kind object;
  #L3fb78a.  call `onError`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fb790.  goto L3fb772;
  #L3fb792.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L3fb796.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3fb79c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` @kind object;
  #L3fb7a0.  if v1 == 0 then goto L3fb7aa;
  #L3fb7a4.  call `clear`(v1) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L3fb7aa.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` := v4 @kind object;
  #L3fb7ae.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` := v0 @kind boolean;
  #L3fb7b2.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L3fb7b8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fb7cc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L3fb7d0.  if v0 == 0 then goto L3fb7d6;
  #L3fb7d4.  return @kind void;
  #L3fb7d6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fb7da.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.keySelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fb7de.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fb7e4.  v1:= temp @kind object;
  #L3fb7e6.  v2:= 0I;
  #L3fb7e8.  if v1 == 0 then goto L3fb7f0;
  #L3fb7ec.  v3:= v1 @kind object;
  #L3fb7ee.  goto L3fb7f4;
  #L3fb7f0.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L3fb7f4.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L3fb7f8.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fb7fe.  v4:= temp @kind object;
  #L3fb800.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupedUnicast`) v4 @kind object;
  #L3fb804.  if v4 != 0 then goto L3fb840;
  #L3fb808.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3fb80c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3fb812.  v2:= temp;
  #L3fb814.  if v2 == 0 then goto L3fb81a;
  #L3fb818.  return @kind void;
  #L3fb81a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.bufferSize` @type ^`int`;
  #L3fb81e.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L3fb822.  call temp:= `createWith`(v1, v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.createWith:(Ljava/lang/Object;ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Z)Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;` @kind static;
  #L3fb828.  v4:= temp @kind object;
  #L3fb82a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L3fb82e.  call temp:= `put`(v1, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fb834.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3fb838.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3fb83e.  v2:= 1I;
  #L3fb840.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.valueSelector` @type ^`io.reactivex.functions.Function` @kind object;
  #L3fb844.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fb84a.  v6:= temp @kind object;
  #L3fb84c.  v1:= "The valueSelector returned null" @kind object;
  #L3fb850.  call temp:= `requireNonNull`(v6, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3fb856.  v6:= temp @kind object;
  #L3fb858.  call `onNext`(v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L3fb85e.  call `completeEvictions`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.completeEvictions:()V` @kind direct;
  #L3fb864.  if v2 == 0 then goto L3fb874;
  #L3fb868.  call temp:= `offer`(v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fb86e.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L3fb874.  return @kind void;
  #L3fb876.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fb878.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fb87e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fb882.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fb888.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fb88e.  return @kind void;
  #L3fb890.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fb892.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3fb898.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fb89c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L3fb8a2.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3fb8a8.  return @kind void;
  catch `java.lang.Throwable` @[L3fb7da..L3fb7e6] goto L3fb890;
  catch `java.lang.Throwable` @[L3fb840..L3fb858] goto L3fb876;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fb8d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L3fb8d8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3fb8de.  v0:= temp;
  #L3fb8e0.  if v0 == 0 then goto L3fb8fe;
  #L3fb8e4.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L3fb8e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3fb8ec.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L3fb8f2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.bufferSize` @type ^`int`;
  #L3fb8f6.  v0:= (`long`) v0 @kind i2l;
  #L3fb8f8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L3fb8fe.  return @kind void;
}
procedure `io.reactivex.flowables.GroupedFlowable` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Lio/reactivex/flowables/GroupedFlowable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb360.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L3fb364.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3fb36a.  v0:= temp @kind object;
  #L3fb36c.  v0:= (`io.reactivex.flowables.GroupedFlowable`) v0 @kind object;
  #L3fb370.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3fb384.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Lio/reactivex/flowables/GroupedFlowable;` @kind virtual;
  #L3fb38a.  v0:= temp @kind object;
  #L3fb38c.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb910.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L3fb916.  v0:= temp;
  #L3fb918.  if v0 == 0 then goto L3fb92c;
  #L3fb91c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3fb920.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3fb926.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L3fb92c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb33c.  v0:= 2I;
  #L3fb33e.  v2:= v2 ^& v0 @kind int;
  #L3fb340.  if v2 == 0 then goto L3fb34c;
  #L3fb344.  v2:= 1I;
  #L3fb346.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L3fb34a.  return v0;
  #L3fb34c.  v2:= 0I;
  #L3fb34e.  return v2;
}
