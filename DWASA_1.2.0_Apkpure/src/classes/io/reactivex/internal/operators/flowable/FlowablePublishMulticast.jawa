record `io.reactivex.internal.operators.flowable.FlowablePublishMulticast` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast.delayError` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast.prefetch` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast.selector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4027dc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L4027e2.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast.selector` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4027e6.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast.prefetch` @type ^`int` := v3;
  #L4027ea.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast.delayError` @type ^`boolean` := v4 @kind boolean;
  #L4027ee.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L402800.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor`;
  #L402804.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast.prefetch` @type ^`int`;
  #L402808.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast.delayError` @type ^`boolean` @kind boolean;
  #L40280c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L402812.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast.selector` @type ^`io.reactivex.functions.Function` @kind object;
  #L402816.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40281c.  v1:= temp @kind object;
  #L40281e.  v2:= "selector returned a null Publisher" @kind object;
  #L402822.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L402828.  v1:= temp @kind object;
  #L40282a.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L40282e.  v2:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$OutputCanceller`;
  #L402832.  call `<init>`(v2, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$OutputCanceller;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor;)V` @kind direct;
  #L402838.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40283e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast.source` @type ^`io.reactivex.Flowable` @kind object;
  #L402842.  call `subscribe`(v4, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L402848.  return @kind void;
  #L40284a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40284c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L402852.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L402858.  return @kind void;
  catch `java.lang.Throwable` @[L402812..L40282e] goto L40284a;
}
