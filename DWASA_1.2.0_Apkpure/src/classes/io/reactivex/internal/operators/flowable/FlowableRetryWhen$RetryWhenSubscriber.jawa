record `io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.FlowableProcessor` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen$RetryWhenSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/FlowableProcessor;Lorg/reactivestreams/Subscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L405b84.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/FlowableProcessor;Lorg/reactivestreams/Subscription;)V` @kind direct;
  #L405b8a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen$RetryWhenSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405b9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber.receiver` @type ^`org.reactivestreams.Subscription` @kind object;
  #L405ba0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L405ba6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L405baa.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L405bb0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen$RetryWhenSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L405bc4.  call `again`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen$RetryWhenSubscriber;.again:(Ljava/lang/Object;)V` @kind virtual;
  #L405bca.  return @kind void;
}
