record `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.connection` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRefCount` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.parent` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableRefCount` v2 @kind object, `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4037cc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4037d2.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4037d6.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` := v2 @kind object;
  #L4037da.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` := v3 @kind object;
  #L4037de.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4037f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4037f4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4037fa.  v0:= 0I;
  #L4037fc.  v1:= 1I;
  #L4037fe.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.compareAndSet:(ZZ)Z` @kind virtual;
  #L403804.  v0:= temp;
  #L403806.  if v0 == 0 then goto L403818;
  #L40380a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L40380e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L403812.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.cancel:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @kind virtual;
  #L403818.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40382c.  v0:= 0I;
  #L40382e.  v1:= 1I;
  #L403830.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.compareAndSet:(ZZ)Z` @kind virtual;
  #L403836.  v0:= temp;
  #L403838.  if v0 == 0 then goto L403854;
  #L40383c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L403840.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L403844.  call `terminated`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.terminated:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @kind virtual;
  #L40384a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40384e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L403854.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L403868.  v0:= 0I;
  #L40386a.  v1:= 1I;
  #L40386c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.compareAndSet:(ZZ)Z` @kind virtual;
  #L403872.  v0:= temp;
  #L403874.  if v0 == 0 then goto L403892;
  #L403878.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L40387c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind object;
  #L403880.  call `terminated`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.terminated:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @kind virtual;
  #L403886.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40388a.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L403890.  goto L403898;
  #L403892.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L403898.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4038ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4038b0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4038b6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4038c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4038cc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4038d2.  v0:= temp;
  #L4038d4.  if v0 == 0 then goto L4038e6;
  #L4038d8.  v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4038dc.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4038e0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4038e6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4038f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4038fc.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L403902.  return @kind void;
}
