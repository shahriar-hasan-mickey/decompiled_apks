record `io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.defaultValue` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.done` @AccessFlag ;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.downstream` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.value` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$SingleElementSubscriber;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4079e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4079e6.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L4079ea.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.defaultValue` @type ^`java.lang.Object` := v2 @kind object;
  #L4079ee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$SingleElementSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407a00.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407a04.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L407a0a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L407a0e.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L407a12.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$SingleElementSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4079bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4079c0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4079c4.  if v0 != v1 then goto L4079cc;
  #L4079c8.  v0:= 1I;
  #L4079ca.  goto L4079ce;
  #L4079cc.  v0:= 0I;
  #L4079ce.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$SingleElementSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407a24.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L407a28.  if v0 == 0 then goto L407a2e;
  #L407a2c.  return @kind void;
  #L407a2e.  v0:= 1I;
  #L407a30.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L407a34.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L407a38.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L407a3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L407a40.  v1:= 0I;
  #L407a42.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.value` @type ^`java.lang.Object` := v1 @kind object;
  #L407a46.  if v0 != 0 then goto L407a4e;
  #L407a4a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.defaultValue` @type ^`java.lang.Object` @kind object;
  #L407a4e.  if v0 == 0 then goto L407a5e;
  #L407a52.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407a56.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L407a5c.  goto L407a72;
  #L407a5e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407a62.  v1:= new `java.util.NoSuchElementException`;
  #L407a66.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L407a6c.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407a72.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$SingleElementSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407a84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L407a88.  if v0 == 0 then goto L407a94;
  #L407a8c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L407a92.  return @kind void;
  #L407a94.  v0:= 1I;
  #L407a96.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L407a9a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L407a9e.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L407aa2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407aa6.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407aac.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$SingleElementSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407ac0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L407ac4.  if v0 == 0 then goto L407aca;
  #L407ac8.  return @kind void;
  #L407aca.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L407ace.  if v0 == 0 then goto L407b04;
  #L407ad2.  v3:= 1I;
  #L407ad4.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L407ad8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407adc.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L407ae2.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L407ae6.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L407aea.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407aee.  v0:= new `java.lang.IllegalArgumentException`;
  #L407af2.  v1:= "Sequence contains more than one element!" @kind object;
  #L407af6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L407afc.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407b02.  return @kind void;
  #L407b04.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L407b08.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$SingleElementSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407b1c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407b20.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L407b26.  v0:= temp;
  #L407b28.  if v0 == 0 then goto L407b4a;
  #L407b2c.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L407b30.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L407b34.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L407b3a.  v0:= 9223372036854775807L;
  #L407b44.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407b4a.  return @kind void;
}
