record `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4379a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4379ae.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` := v1 @kind object;
  #L4379b2.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.prefetch` @type ^`int` := v2;
  #L4379b6.  v1:= v2 ^> 2;
  #L4379ba.  v2:= v2 - v1 @kind int;
  #L4379bc.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.limit` @type ^`int` := v2;
  #L4379c0.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.cancel:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437960.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L437966.  v0:= temp;
  #L437968.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `getQueue`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.getQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43797c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L437980.  if v0 != 0 then goto L437996;
  #L437984.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L437988.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.prefetch` @type ^`int`;
  #L43798c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L437992.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L437996.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4379d4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind object;
  #L4379d8.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onComplete:()V` @kind virtual;
  #L4379de.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4379f0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind object;
  #L4379f4.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4379fa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437a0c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind object;
  #L437a10.  call `onNext`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onNext:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;Ljava/lang/Object;)V` @kind virtual;
  #L437a16.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L437a28.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.prefetch` @type ^`int`;
  #L437a2c.  v0:= (`long`) v0 @kind i2l;
  #L437a2e.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L437a34.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L437a48.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` @kind wide;
  #L437a4c.  v0:= v0 + v4 @kind long;
  #L437a4e.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.limit` @type ^`int`;
  #L437a52.  v4:= (`long`) v4 @kind i2l;
  #L437a54.  v2:= lcmp(v0, v4);
  #L437a58.  if v2 < 0 then goto L437a78;
  #L437a5c.  v4:= 0L;
  #L437a60.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` := v4 @kind wide;
  #L437a64.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L437a6a.  v4:= temp @kind object;
  #L437a6c.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L437a70.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L437a76.  goto L437a7c;
  #L437a78.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L437a7c.  return @kind void;
}
procedure `void` `requestOne`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.requestOne:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L437a90.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` @kind wide;
  #L437a94.  v2:= 1L;
  #L437a98.  v0:= v0 + v2 @kind long;
  #L437a9a.  v2:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.limit` @type ^`int`;
  #L437a9e.  v2:= (`long`) v2 @kind i2l;
  #L437aa0.  v4:= lcmp(v0, v2);
  #L437aa4.  if v4 != 0 then goto L437ac4;
  #L437aa8.  v2:= 0L;
  #L437aac.  v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L437ab0.  call temp:= `get`(v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L437ab6.  v2:= temp @kind object;
  #L437ab8.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L437abc.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L437ac2.  goto L437ac8;
  #L437ac4.  v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L437ac8.  return @kind void;
}
