record `io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.downstream` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436a24.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$BaseFilterSubscriber;.<init>:(Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L436a2a.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L436a2e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436a40.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L436a44.  if v0 != 0 then goto L436a58;
  #L436a48.  v0:= 1I;
  #L436a4a.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L436a4e.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L436a52.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L436a58.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436a6c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L436a70.  if v0 == 0 then goto L436a7c;
  #L436a74.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436a7a.  return @kind void;
  #L436a7c.  v0:= 1I;
  #L436a7e.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L436a82.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L436a86.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436a8c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436aa0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436aa4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L436aaa.  v0:= temp;
  #L436aac.  if v0 == 0 then goto L436abe;
  #L436ab0.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L436ab4.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L436ab8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L436abe.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4369c8.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4369cc.  v1:= 0I;
  #L4369ce.  if v0 != 0 then goto L436a04;
  #L4369d2.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L4369d6.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4369dc.  v0:= temp;
  #L4369de.  if v0 == 0 then goto L436a04;
  #L4369e2.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4369e6.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4369ec.  v3:= temp;
  #L4369ee.  return v3;
  #L4369f0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4369f2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4369f8.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterConditionalSubscriber;.cancel:()V` @kind virtual;
  #L4369fe.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436a04.  return v1;
  catch `java.lang.Throwable` @[L4369d2..L4369de] goto L4369f0;
}
