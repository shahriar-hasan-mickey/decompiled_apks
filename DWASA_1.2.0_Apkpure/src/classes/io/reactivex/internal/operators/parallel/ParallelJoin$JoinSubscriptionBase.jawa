record `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L437adc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L437ae2.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L437ae6.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L437aec.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L437af0.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L437af4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L437afa.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L437afe.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L437b02.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L437b08.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L437b0c.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L437b10.  v3:= new `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[v4];
  #L437b14.  v0:= 0I;
  #L437b16.  if v0 >= v4 then goto L437b2e;
  #L437b1a.  v1:= new `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`;
  #L437b1e.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;I)V` @kind direct;
  #L437b24.  v3[v0]:= v1 @kind object;
  #L437b28.  v0:= v0 + 1;
  #L437b2c.  goto L437b16;
  #L437b2e.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] := v3 @kind object;
  #L437b32.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L437b36.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L437b3c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437b50.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @type ^`boolean` @kind boolean;
  #L437b54.  if v0 != 0 then goto L437b76;
  #L437b58.  v0:= 1I;
  #L437b5a.  v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L437b5e.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancelAll:()V` @kind virtual;
  #L437b64.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.getAndIncrement:()I` @kind virtual;
  #L437b6a.  v0:= temp;
  #L437b6c.  if v0 != 0 then goto L437b76;
  #L437b70.  call `cleanup`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @kind virtual;
  #L437b76.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v3 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L437b88.  v0:= 0I;
  #L437b8a.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] @kind object;
  #L437b8e.  v2:= length @variable v1;
  #L437b90.  if v0 >= v2 then goto L437ba4;
  #L437b94.  v1:= v1[v0] @kind object;
  #L437b98.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.cancel:()Z` @kind virtual;
  #L437b9e.  v0:= v0 + 1;
  #L437ba2.  goto L437b8a;
  #L437ba4.  return @kind void;
}
procedure `void` `cleanup`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v3 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L437bb8.  v0:= 0I;
  #L437bba.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] @kind object;
  #L437bbe.  v2:= length @variable v1;
  #L437bc0.  if v0 >= v2 then goto L437bd4;
  #L437bc4.  v1:= v1[v0] @kind object;
  #L437bc8.  v2:= 0I;
  #L437bca.  v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L437bce.  v0:= v0 + 1;
  #L437bd2.  goto L437bba;
  #L437bd4.  return @kind void;
}
procedure `void` `drain`() @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.drain:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onComplete`() @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onComplete:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onError`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onError:(Ljava/lang/Throwable;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onNext:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437be8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L437bee.  v0:= temp;
  #L437bf0.  if v0 == 0 then goto L437c04;
  #L437bf4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L437bf8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L437bfe.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.drain:()V` @kind virtual;
  #L437c04.  return @kind void;
}
