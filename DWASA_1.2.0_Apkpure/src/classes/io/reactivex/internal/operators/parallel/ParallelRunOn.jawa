record `io.reactivex.internal.operators.parallel.ParallelRunOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn.prefetch` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.parallel.ParallelRunOn.scheduler` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelRunOn.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/Scheduler;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L439d10.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L439d16.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L439d1a.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L439d1e.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn.prefetch` @type ^`int` := v3;
  #L439d22.  return @kind void;
}
procedure `void` `createSubscriber`(`io.reactivex.internal.operators.parallel.ParallelRunOn` v3 @kind this, `int` v4 , `org.reactivestreams.Subscriber`[] v5 @kind object, `org.reactivestreams.Subscriber`[] v6 @kind object, `io.reactivex.Scheduler$Worker` v7 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.createSubscriber:(I[Lorg/reactivestreams/Subscriber;[Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L439d34.  v5:= v5[v4] @kind object;
  #L439d38.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L439d3c.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelRunOn.prefetch` @type ^`int`;
  #L439d40.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L439d46.  v1:= instanceof @variable v5 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L439d4a.  if v1 == 0 then goto L439d66;
  #L439d4e.  v1:= new `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber`;
  #L439d52.  v5:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v5 @kind object;
  #L439d56.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelRunOn.prefetch` @type ^`int`;
  #L439d5a.  call `<init>`(v1, v5, v2, v0, v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L439d60.  v6[v4]:= v1 @kind object;
  #L439d64.  goto L439d78;
  #L439d66.  v1:= new `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber`;
  #L439d6a.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelRunOn.prefetch` @type ^`int`;
  #L439d6e.  call `<init>`(v1, v5, v2, v0, v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L439d74.  v6[v4]:= v1 @kind object;
  #L439d78.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelRunOn` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439cf0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L439cf4.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L439cfa.  v0:= temp;
  #L439cfc.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn` v4 @kind this, `org.reactivestreams.Subscriber`[] v5 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L439d8c.  call temp:= `validate`(v4, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L439d92.  v0:= temp;
  #L439d94.  if v0 != 0 then goto L439d9a;
  #L439d98.  return @kind void;
  #L439d9a.  v0:= length @variable v5;
  #L439d9c.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L439da0.  v2:= v4.`io.reactivex.internal.operators.parallel.ParallelRunOn.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L439da4.  v3:= instanceof @variable v2 @type ^`io.reactivex.internal.schedulers.SchedulerMultiWorkerSupport` @kind boolean;
  #L439da8.  if v3 == 0 then goto L439dc2;
  #L439dac.  v2:= (`io.reactivex.internal.schedulers.SchedulerMultiWorkerSupport`) v2 @kind object;
  #L439db0.  v3:= new `io.reactivex.internal.operators.parallel.ParallelRunOn$MultiWorkerCallback`;
  #L439db4.  call `<init>`(v3, v4, v5, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$MultiWorkerCallback;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelRunOn;[Lorg/reactivestreams/Subscriber;[Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L439dba.  call `createWorkers`(v2, v0, v3) @signature `Lio/reactivex/internal/schedulers/SchedulerMultiWorkerSupport;.createWorkers:(ILio/reactivex/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @kind interface;
  #L439dc0.  goto L439de0;
  #L439dc2.  v2:= 0I;
  #L439dc4.  if v2 >= v0 then goto L439de0;
  #L439dc8.  v3:= v4.`io.reactivex.internal.operators.parallel.ParallelRunOn.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L439dcc.  call temp:= `createWorker`(v3) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L439dd2.  v3:= temp @kind object;
  #L439dd4.  call `createSubscriber`(v4, v2, v5, v1, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.createSubscriber:(I[Lorg/reactivestreams/Subscriber;[Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;)V` @kind virtual;
  #L439dda.  v2:= v2 + 1;
  #L439dde.  goto L439dc4;
  #L439de0.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelRunOn.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L439de4.  call `subscribe`(v5, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L439dea.  return @kind void;
}
