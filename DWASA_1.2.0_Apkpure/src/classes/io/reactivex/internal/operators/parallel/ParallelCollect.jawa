record `io.reactivex.internal.operators.parallel.ParallelCollect` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.parallel.ParallelCollect.collector` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.parallel.ParallelCollect.initialCollection` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelCollect.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelCollect` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L436248.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L43624e.  v0.`io.reactivex.internal.operators.parallel.ParallelCollect.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L436252.  v0.`io.reactivex.internal.operators.parallel.ParallelCollect.initialCollection` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L436256.  v0.`io.reactivex.internal.operators.parallel.ParallelCollect.collector` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L43625a.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelCollect` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436228.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelCollect.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L43622c.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L436232.  v0:= temp;
  #L436234.  return v0;
}
procedure `void` `reportError`(`io.reactivex.internal.operators.parallel.ParallelCollect` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.reportError:([Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43626c.  v0:= length @variable v4;
  #L43626e.  v1:= 0I;
  #L436270.  if v1 >= v0 then goto L436284;
  #L436274.  v2:= v4[v1] @kind object;
  #L436278.  call `error`(v5, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43627e.  v1:= v1 + 1;
  #L436282.  goto L436270;
  #L436284.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelCollect` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L436298.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L43629e.  v0:= temp;
  #L4362a0.  if v0 != 0 then goto L4362a6;
  #L4362a4.  return @kind void;
  #L4362a6.  v0:= length @variable v8;
  #L4362a8.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4362ac.  v2:= 0I;
  #L4362ae.  if v2 >= v0 then goto L4362f6;
  #L4362b2.  v3:= v7.`io.reactivex.internal.operators.parallel.ParallelCollect.initialCollection` @type ^`java.util.concurrent.Callable` @kind object;
  #L4362b6.  call temp:= `call`(v3) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4362bc.  v3:= temp @kind object;
  #L4362be.  v4:= "The initialSupplier returned a null value" @kind object;
  #L4362c2.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4362c8.  v3:= temp @kind object;
  #L4362ca.  v4:= new `io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber`;
  #L4362ce.  v5:= v8[v2] @kind object;
  #L4362d2.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelCollect.collector` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L4362d6.  call `<init>`(v4, v5, v3, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L4362dc.  v1[v2]:= v4 @kind object;
  #L4362e0.  v2:= v2 + 1;
  #L4362e4.  goto L4362ae;
  #L4362e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4362e8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4362ee.  call `reportError`(v7, v8, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.reportError:([Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L4362f4.  return @kind void;
  #L4362f6.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelCollect.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L4362fa.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L436300.  return @kind void;
  catch `java.lang.Throwable` @[L4362b2..L4362ca] goto L4362e6;
}
