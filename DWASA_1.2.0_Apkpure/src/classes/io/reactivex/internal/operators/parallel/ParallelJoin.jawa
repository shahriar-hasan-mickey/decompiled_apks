record `io.reactivex.internal.operators.parallel.ParallelJoin` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelJoin.delayErrors` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin.prefetch` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelJoin.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L438328.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L43832e.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L438332.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.prefetch` @type ^`int` := v2;
  #L438336.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L43833a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.parallel.ParallelJoin` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L43834c.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.delayErrors` @type ^`boolean` @kind boolean;
  #L438350.  if v0 == 0 then goto L438370;
  #L438354.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError`;
  #L438358.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L43835c.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L438362.  v1:= temp;
  #L438364.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.prefetch` @type ^`int`;
  #L438368.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L43836e.  goto L43838a;
  #L438370.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription`;
  #L438374.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L438378.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L43837e.  v1:= temp;
  #L438380.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.prefetch` @type ^`int`;
  #L438384.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L43838a.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L438390.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L438394.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] @kind object;
  #L438398.  call `subscribe`(v4, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L43839e.  return @kind void;
}
