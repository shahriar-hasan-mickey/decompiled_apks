record `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @AccessFlag VOLATILE;
  `long`[] `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.emissions` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.limit` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.produced` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLongArray` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscriberCount` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber`[] `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.<init>:([Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4373b4.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4373ba.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4373be.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4373c4.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscriberCount` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4373c8.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @type ^`org.reactivestreams.Subscriber`[] := v4 @kind object;
  #L4373cc.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @type ^`int` := v5;
  #L4373d0.  v0:= v5 ^> 2;
  #L4373d4.  v5:= v5 - v0 @kind int;
  #L4373d6.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.limit` @type ^`int` := v5;
  #L4373da.  v4:= length @variable v4;
  #L4373dc.  v5:= new `java.util.concurrent.atomic.AtomicLongArray`;
  #L4373e0.  v0:= v4 + v4 @kind int;
  #L4373e4.  v1:= v0 + 1;
  #L4373e8.  call `<init>`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.<init>:(I)V` @kind direct;
  #L4373ee.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` := v5 @kind object;
  #L4373f2.  v5:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L4373f6.  v1:= (`long`) v4 @kind i2l;
  #L4373f8.  call `lazySet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.lazySet:(IJ)V` @kind virtual;
  #L4373fe.  v4:= new `long`[v4];
  #L437402.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.emissions` @type ^`long`[] := v4 @kind object;
  #L437406.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.cancel:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L437418.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L43741c.  call temp:= `decrementAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.decrementAndGet:(I)J` @kind virtual;
  #L437422.  v0:= temp @kind wide;
  #L437424.  v2:= 0L;
  #L437428.  v5:= lcmp(v0, v2);
  #L43742c.  if v5 != 0 then goto L437456;
  #L437430.  v5:= 1I;
  #L437432.  v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @type ^`boolean` := v5 @kind boolean;
  #L437436.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43743a.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L437440.  call temp:= `getAndIncrement`(v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.getAndIncrement:()I` @kind virtual;
  #L437446.  v5:= temp;
  #L437448.  if v5 != 0 then goto L437456;
  #L43744c.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L437450.  call `clear`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L437456.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L437468.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.getAndIncrement:()I` @kind virtual;
  #L43746e.  v0:= temp;
  #L437470.  if v0 == 0 then goto L437476;
  #L437474.  return @kind void;
  #L437476.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @type ^`int`;
  #L43747a.  v1:= 1I;
  #L43747c.  if v0 != v1 then goto L437488;
  #L437480.  call `drainSync`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drainSync:()V` @kind virtual;
  #L437486.  goto L43748e;
  #L437488.  call `drainAsync`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drainAsync:()V` @kind virtual;
  #L43748e.  return @kind void;
}
procedure `void` `drainAsync`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v19 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drainAsync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L4374a0.  v1:= v19 @kind object;
  #L4374a4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4374a8.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L4374ac.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L4374b0.  v4:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.emissions` @type ^`long`[] @kind object;
  #L4374b4.  v5:= length @variable v4;
  #L4374b6.  v6:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @type ^`int`;
  #L4374ba.  v7:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.produced` @type ^`int`;
  #L4374be.  v8:= 1I;
  #L4374c0.  v9:= 1I;
  #L4374c2.  v10:= 0I;
  #L4374c4.  v11:= v7;
  #L4374c6.  v7:= 0I;
  #L4374c8.  v12:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @type ^`boolean` @kind boolean;
  #L4374cc.  if v12 == 0 then goto L4374d8;
  #L4374d0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4374d6.  return @kind void;
  #L4374d8.  v12:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @type ^`boolean` @kind boolean;
  #L4374dc.  if v12 == 0 then goto L437506;
  #L4374e0.  v13:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.error` @type ^`java.lang.Throwable` @kind object;
  #L4374e4.  if v13 == 0 then goto L437506;
  #L4374e8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4374ee.  v0:= length @variable v2;
  #L4374f0.  if v10 >= v0 then goto L437504;
  #L4374f4.  v3:= v2[v10] @kind object;
  #L4374f8.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4374fe.  v10:= v10 + 1;
  #L437502.  goto L4374f0;
  #L437504.  return @kind void;
  #L437506.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L43750c.  v13:= temp;
  #L43750e.  if v12 == 0 then goto L43752e;
  #L437512.  if v13 == 0 then goto L43752e;
  #L437516.  v0:= length @variable v2;
  #L437518.  if v10 >= v0 then goto L43752c;
  #L43751c.  v3:= v2[v10] @kind object;
  #L437520.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L437526.  v10:= v10 + 1;
  #L43752a.  goto L437518;
  #L43752c.  return @kind void;
  #L43752e.  if v13 == 0 then goto L437534;
  #L437532.  goto L43756c;
  #L437534.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L43753a.  v12:= temp @kind wide;
  #L43753c.  v14:= v4[v6] @kind wide;
  #L437540.  v16:= lcmp(v12, v14);
  #L437544.  if v16 == 0 then goto L4375d0;
  #L437548.  v12:= v5 + v6 @kind int;
  #L43754c.  call temp:= `get`(v3, v12) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L437552.  v12:= temp @kind wide;
  #L437554.  v16:= 0L;
  #L437558.  v18:= lcmp(v12, v16);
  #L43755c.  if v18 != 0 then goto L4375d0;
  #L437560.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L437566.  v7:= temp @kind object;
  #L437568.  if v7 != 0 then goto L437570;
  #L43756c.  v7:= v11;
  #L43756e.  goto L4375e2;
  #L437570.  v12:= v2[v6] @kind object;
  #L437574.  call `onNext`(v12, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43757a.  v12:= 1L;
  #L43757e.  v14:= v14 + v12 @kind long;
  #L437580.  v4[v6]:= v14 @kind wide;
  #L437584.  v7:= v11 + 1;
  #L437588.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.limit` @type ^`int`;
  #L43758c.  if v7 != v11 then goto L43759e;
  #L437590.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L437594.  v12:= (`long`) v7 @kind i2l;
  #L437596.  call `request`(v11, v12) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43759c.  v7:= 0I;
  #L43759e.  v11:= v7;
  #L4375a0.  v7:= 0I;
  #L4375a2.  goto L4375d2;
  #L4375a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4375a6.  v3:= v0 @kind object;
  #L4375a8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4375ae.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4375b2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4375b8.  v0:= length @variable v2;
  #L4375ba.  if v10 >= v0 then goto L4375ce;
  #L4375be.  v4:= v2[v10] @kind object;
  #L4375c2.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4375c8.  v10:= v10 + 1;
  #L4375cc.  goto L4375ba;
  #L4375ce.  return @kind void;
  #L4375d0.  v7:= v7 + v8 @kind int;
  #L4375d2.  v6:= v6 + 1;
  #L4375d6.  if v6 != v5 then goto L4375dc;
  #L4375da.  v6:= 0I;
  #L4375dc.  if v7 != v5 then goto L4374c8;
  #L4375e0.  goto L43756c;
  #L4375e2.  call temp:= `get`(v19) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.get:()I` @kind virtual;
  #L4375e8.  v10:= temp;
  #L4375ea.  if v10 != v9 then goto L437606;
  #L4375ee.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @type ^`int` := v6;
  #L4375f2.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.produced` @type ^`int` := v7;
  #L4375f6.  v9:= -v9 @kind int;
  #L4375f8.  call temp:= `addAndGet`(v1, v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.addAndGet:(I)I` @kind virtual;
  #L4375fe.  v9:= temp;
  #L437600.  if v9 != 0 then goto L4374c2;
  #L437604.  return @kind void;
  #L437606.  v9:= v10;
  #L437608.  goto L4374c2;
  catch `java.lang.Throwable` @[L437560..L437568] goto L4375a4;
}
procedure `void` `drainSync`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drainSync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L437628.  v1:= v18 @kind object;
  #L43762c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L437630.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L437634.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L437638.  v4:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.emissions` @type ^`long`[] @kind object;
  #L43763c.  v5:= length @variable v4;
  #L43763e.  v6:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @type ^`int`;
  #L437642.  v7:= 1I;
  #L437644.  v8:= 1I;
  #L437646.  v9:= 0I;
  #L437648.  v10:= 0I;
  #L43764a.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @type ^`boolean` @kind boolean;
  #L43764e.  if v11 == 0 then goto L43765a;
  #L437652.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L437658.  return @kind void;
  #L43765a.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L437660.  v11:= temp;
  #L437662.  if v11 == 0 then goto L43767e;
  #L437666.  v0:= length @variable v2;
  #L437668.  if v9 >= v0 then goto L43767c;
  #L43766c.  v3:= v2[v9] @kind object;
  #L437670.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L437676.  v9:= v9 + 1;
  #L43767a.  goto L437668;
  #L43767c.  return @kind void;
  #L43767e.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L437684.  v11:= temp @kind wide;
  #L437686.  v13:= v4[v6] @kind wide;
  #L43768a.  v15:= lcmp(v11, v13);
  #L43768e.  if v15 == 0 then goto L437712;
  #L437692.  v11:= v5 + v6 @kind int;
  #L437696.  call temp:= `get`(v3, v11) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L43769c.  v11:= temp @kind wide;
  #L43769e.  v15:= 0L;
  #L4376a2.  v17:= lcmp(v11, v15);
  #L4376a6.  if v17 != 0 then goto L437712;
  #L4376aa.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4376b0.  v10:= temp @kind object;
  #L4376b2.  if v10 != 0 then goto L4376ce;
  #L4376b6.  v0:= length @variable v2;
  #L4376b8.  if v9 >= v0 then goto L4376cc;
  #L4376bc.  v3:= v2[v9] @kind object;
  #L4376c0.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4376c6.  v9:= v9 + 1;
  #L4376ca.  goto L4376b8;
  #L4376cc.  return @kind void;
  #L4376ce.  v11:= v2[v6] @kind object;
  #L4376d2.  call `onNext`(v11, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4376d8.  v10:= 1L;
  #L4376dc.  v13:= v13 + v10 @kind long;
  #L4376de.  v4[v6]:= v13 @kind wide;
  #L4376e2.  v10:= 0I;
  #L4376e4.  goto L437714;
  #L4376e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4376e8.  v3:= v0 @kind object;
  #L4376ea.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4376f0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4376f4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4376fa.  v0:= length @variable v2;
  #L4376fc.  if v9 >= v0 then goto L437710;
  #L437700.  v4:= v2[v9] @kind object;
  #L437704.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43770a.  v9:= v9 + 1;
  #L43770e.  goto L4376fc;
  #L437710.  return @kind void;
  #L437712.  v10:= v10 + v7 @kind int;
  #L437714.  v6:= v6 + 1;
  #L437718.  if v6 != v5 then goto L43771e;
  #L43771c.  v6:= 0I;
  #L43771e.  if v10 != v5 then goto L43764a;
  #L437722.  call temp:= `get`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.get:()I` @kind virtual;
  #L437728.  v9:= temp;
  #L43772a.  if v9 != v8 then goto L437742;
  #L43772e.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @type ^`int` := v6;
  #L437732.  v8:= -v8 @kind int;
  #L437734.  call temp:= `addAndGet`(v1, v8) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.addAndGet:(I)I` @kind virtual;
  #L43773a.  v8:= temp;
  #L43773c.  if v8 != 0 then goto L437646;
  #L437740.  return @kind void;
  #L437742.  v8:= v9;
  #L437744.  goto L437646;
  catch `java.lang.Throwable` @[L4376aa..L4376b2] goto L4376e6;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437764.  v0:= 1I;
  #L437766.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @type ^`boolean` := v0 @kind boolean;
  #L43776a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L437770.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L437784.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L437788.  v1:= 1I;
  #L43778a.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @type ^`boolean` := v1 @kind boolean;
  #L43778e.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L437794.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4377a8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @type ^`int`;
  #L4377ac.  if v0 != 0 then goto L4377e0;
  #L4377b0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4377b4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4377ba.  v2:= temp;
  #L4377bc.  if v2 != 0 then goto L4377e0;
  #L4377c0.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4377c4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4377ca.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4377ce.  v0:= "Queue is full?" @kind object;
  #L4377d2.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4377d8.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4377de.  return @kind void;
  #L4377e0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L4377e6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4377f8.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4377fc.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L437802.  v0:= temp;
  #L437804.  if v0 == 0 then goto L43788a;
  #L437808.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L43780c.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L437810.  if v0 == 0 then goto L437866;
  #L437814.  v0:= v4 @kind object;
  #L437816.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L43781a.  v1:= 7I;
  #L43781c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L437822.  v1:= temp;
  #L437824.  v2:= 1I;
  #L437826.  if v1 != v2 then goto L437844;
  #L43782a.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @type ^`int` := v1;
  #L43782e.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L437832.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @type ^`boolean` := v2 @kind boolean;
  #L437836.  call `setupSubscribers`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.setupSubscribers:()V` @kind virtual;
  #L43783c.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L437842.  return @kind void;
  #L437844.  v2:= 2I;
  #L437846.  if v1 != v2 then goto L437866;
  #L43784a.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @type ^`int` := v1;
  #L43784e.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L437852.  call `setupSubscribers`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.setupSubscribers:()V` @kind virtual;
  #L437858.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @type ^`int`;
  #L43785c.  v0:= (`long`) v0 @kind i2l;
  #L43785e.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L437864.  return @kind void;
  #L437866.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L43786a.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @type ^`int`;
  #L43786e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L437874.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L437878.  call `setupSubscribers`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.setupSubscribers:()V` @kind virtual;
  #L43787e.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @type ^`int`;
  #L437882.  v0:= (`long`) v0 @kind i2l;
  #L437884.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43788a.  return @kind void;
}
procedure `void` `setupSubscribers`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v6 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.setupSubscribers:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43789c.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L4378a0.  v1:= length @variable v0;
  #L4378a2.  v2:= 0I;
  #L4378a4.  if v2 >= v1 then goto L4378d8;
  #L4378a8.  v3:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @type ^`boolean` @kind boolean;
  #L4378ac.  if v3 == 0 then goto L4378b2;
  #L4378b0.  return @kind void;
  #L4378b2.  v3:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscriberCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4378b6.  v4:= v2 + 1;
  #L4378ba.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4378c0.  v3:= v0[v2] @kind object;
  #L4378c4.  v5:= new `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription`;
  #L4378c8.  call `<init>`(v5, v6, v2, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher$RailSubscription;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;II)V` @kind direct;
  #L4378ce.  call `onSubscribe`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4378d4.  v2:= v4;
  #L4378d6.  goto L4378a4;
  #L4378d8.  return @kind void;
}
