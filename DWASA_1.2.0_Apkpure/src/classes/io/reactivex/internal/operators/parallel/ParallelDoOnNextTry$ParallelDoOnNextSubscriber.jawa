record `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.errorHandler` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.onNext` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436768.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43676e.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L436772.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L436776.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L43677a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43678c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436790.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L436796.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4367a8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L4367ac.  if v0 == 0 then goto L4367b2;
  #L4367b0.  return @kind void;
  #L4367b2.  v0:= 1I;
  #L4367b4.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4367b8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4367bc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4367c2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4367d4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L4367d8.  if v0 == 0 then goto L4367e4;
  #L4367dc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4367e2.  return @kind void;
  #L4367e4.  v0:= 1I;
  #L4367e6.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4367ea.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4367ee.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4367f4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436808.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L43680e.  v3:= temp;
  #L436810.  if v3 != 0 then goto L436822;
  #L436814.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436818.  v0:= 1L;
  #L43681c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L436822.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436834.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436838.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43683e.  v0:= temp;
  #L436840.  if v0 == 0 then goto L436852;
  #L436844.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L436848.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43684c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L436852.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436864.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436868.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43686e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L43667c.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L436680.  v1:= 0I;
  #L436682.  if v0 == 0 then goto L436688;
  #L436686.  return v1;
  #L436688.  v2:= 0L;
  #L43668c.  v0:= 1I;
  #L43668e.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L436692.  call `accept`(v4, v10) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L436698.  v1:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43669c.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4366a2.  return v0;
  #L4366a4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4366a6.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4366ac.  v5:= 2I;
  #L4366ae.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4366b2.  v7:= 1L;
  #L4366b6.  v2:= v2 + v7 @kind long;
  #L4366b8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4366be.  v7:= temp @kind object;
  #L4366c0.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4366c6.  v6:= temp @kind object;
  #L4366c8.  v7:= "The errorHandler returned a null item" @kind object;
  #L4366cc.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4366d2.  v6:= temp @kind object;
  #L4366d4.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4366d8.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$1.$SwitchMap$io$reactivex$parallel$ParallelFailureHandling` @type ^`int`[] @kind object;
  #L4366dc.  call temp:= `ordinal`(v6) @signature `Lio/reactivex/parallel/ParallelFailureHandling;.ordinal:()I` @kind virtual;
  #L4366e2.  v6:= temp;
  #L4366e4.  v6:= v7[v6];
  #L4366e8.  if v6 == v0 then goto L43668c;
  #L4366ec.  if v6 == v5 then goto L436710;
  #L4366f0.  v10:= 3I;
  #L4366f2.  if v6 == v10 then goto L436704;
  #L4366f6.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.cancel:()V` @kind virtual;
  #L4366fc.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436702.  return v1;
  #L436704.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.cancel:()V` @kind virtual;
  #L43670a.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.onComplete:()V` @kind virtual;
  #L436710.  return v1;
  #L436712.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436714.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43671a.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.cancel:()V` @kind virtual;
  #L436720.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L436724.  v3:= new `java.lang.Throwable`[v5];
  #L436728.  v3[v1]:= v4 @kind object;
  #L43672c.  v3[v0]:= v10 @kind object;
  #L436730.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L436736.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43673c.  return v1;
  catch `java.lang.Throwable` @[L43668e..L436698] goto L4366a4;
  catch `java.lang.Throwable` @[L4366ae..L4366d8] goto L436712;
}
