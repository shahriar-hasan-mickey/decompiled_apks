record `io.reactivex.internal.operators.parallel.ParallelFilter` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.parallel.ParallelFilter.predicate` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelFilter.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilter` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L437114.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L43711a.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L43711e.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L437122.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelFilter` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4370f4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L4370f8.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4370fe.  v0:= temp;
  #L437100.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelFilter` v6 @kind this, `org.reactivestreams.Subscriber`[] v7 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L437134.  call temp:= `validate`(v6, v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L43713a.  v0:= temp;
  #L43713c.  if v0 != 0 then goto L437142;
  #L437140.  return @kind void;
  #L437142.  v0:= length @variable v7;
  #L437144.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L437148.  v2:= 0I;
  #L43714a.  if v2 >= v0 then goto L43718a;
  #L43714e.  v3:= v7[v2] @kind object;
  #L437152.  v4:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L437156.  if v4 == 0 then goto L437172;
  #L43715a.  v4:= new `io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber`;
  #L43715e.  v3:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L437162.  v5:= v6.`io.reactivex.internal.operators.parallel.ParallelFilter.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L437166.  call `<init>`(v4, v3, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L43716c.  v1[v2]:= v4 @kind object;
  #L437170.  goto L437184;
  #L437172.  v4:= new `io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber`;
  #L437176.  v5:= v6.`io.reactivex.internal.operators.parallel.ParallelFilter.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L43717a.  call `<init>`(v4, v3, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L437180.  v1[v2]:= v4 @kind object;
  #L437184.  v2:= v2 + 1;
  #L437188.  goto L43714a;
  #L43718a.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelFilter.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L43718e.  call `subscribe`(v7, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L437194.  return @kind void;
}
