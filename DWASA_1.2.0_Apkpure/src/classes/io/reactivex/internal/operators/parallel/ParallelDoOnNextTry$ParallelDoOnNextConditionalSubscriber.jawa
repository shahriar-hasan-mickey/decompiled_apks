record `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.done` @AccessFlag ;
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.errorHandler` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.onNext` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43655c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L436562.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L436566.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L43656a.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L43656e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436580.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436584.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43658a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43659c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4365a0.  if v0 == 0 then goto L4365a6;
  #L4365a4.  return @kind void;
  #L4365a6.  v0:= 1I;
  #L4365a8.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4365ac.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4365b0.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L4365b6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4365c8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4365cc.  if v0 == 0 then goto L4365d8;
  #L4365d0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4365d6.  return @kind void;
  #L4365d8.  v0:= 1I;
  #L4365da.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4365de.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4365e2.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4365e8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4365fc.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L436602.  v3:= temp;
  #L436604.  if v3 != 0 then goto L43661e;
  #L436608.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L43660c.  if v3 != 0 then goto L43661e;
  #L436610.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436614.  v0:= 1L;
  #L436618.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43661e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436630.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436634.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43663a.  v0:= temp;
  #L43663c.  if v0 == 0 then goto L43664e;
  #L436640.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L436644.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L436648.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43664e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436660.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436664.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43666a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L436470.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L436474.  v1:= 0I;
  #L436476.  if v0 == 0 then goto L43647c;
  #L43647a.  return v1;
  #L43647c.  v2:= 0L;
  #L436480.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L436484.  call `accept`(v0, v10) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43648a.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43648e.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L436494.  v10:= temp;
  #L436496.  return v10;
  #L436498.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43649a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4364a0.  v4:= 1I;
  #L4364a2.  v5:= 2I;
  #L4364a4.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4364a8.  v7:= 1L;
  #L4364ac.  v2:= v2 + v7 @kind long;
  #L4364ae.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4364b4.  v7:= temp @kind object;
  #L4364b6.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4364bc.  v6:= temp @kind object;
  #L4364be.  v7:= "The errorHandler returned a null item" @kind object;
  #L4364c2.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4364c8.  v6:= temp @kind object;
  #L4364ca.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4364ce.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$1.$SwitchMap$io$reactivex$parallel$ParallelFailureHandling` @type ^`int`[] @kind object;
  #L4364d2.  call temp:= `ordinal`(v6) @signature `Lio/reactivex/parallel/ParallelFailureHandling;.ordinal:()I` @kind virtual;
  #L4364d8.  v6:= temp;
  #L4364da.  v6:= v7[v6];
  #L4364de.  if v6 == v4 then goto L436480;
  #L4364e2.  if v6 == v5 then goto L436506;
  #L4364e6.  v10:= 3I;
  #L4364e8.  if v6 == v10 then goto L4364fa;
  #L4364ec.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.cancel:()V` @kind virtual;
  #L4364f2.  call `onError`(v9, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4364f8.  return v1;
  #L4364fa.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.cancel:()V` @kind virtual;
  #L436500.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.onComplete:()V` @kind virtual;
  #L436506.  return v1;
  #L436508.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43650a.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L436510.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.cancel:()V` @kind virtual;
  #L436516.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L43651a.  v3:= new `java.lang.Throwable`[v5];
  #L43651e.  v3[v1]:= v0 @kind object;
  #L436522.  v3[v4]:= v10 @kind object;
  #L436526.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L43652c.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436532.  return v1;
  catch `java.lang.Throwable` @[L436480..L43648a] goto L436498;
  catch `java.lang.Throwable` @[L4364a4..L4364ce] goto L436508;
}
