record `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind class {
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L437f9c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L437fa2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L437fb4.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.getAndIncrement:()I` @kind virtual;
  #L437fba.  v0:= temp;
  #L437fbc.  if v0 == 0 then goto L437fc2;
  #L437fc0.  return @kind void;
  #L437fc2.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drainLoop:()V` @kind virtual;
  #L437fc8.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v17 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L437fdc.  v0:= v17 @kind object;
  #L437fe0.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] @kind object;
  #L437fe4.  v2:= length @variable v1;
  #L437fe6.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437fea.  v5:= 1I;
  #L437fec.  v6:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L437ff0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L437ff6.  v6:= temp @kind wide;
  #L437ff8.  v8:= 0L;
  #L437ffc.  v10:= v8 @kind wide;
  #L437ffe.  v13:= lcmp(v10, v6);
  #L438002.  if v13 == 0 then goto L4380b6;
  #L438006.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L43800a.  if v13 == 0 then goto L438016;
  #L43800e.  call `cleanup`(v17) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.cleanup:()V` @kind virtual;
  #L438014.  return @kind void;
  #L438016.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43801a.  call temp:= `get`(v13) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L438020.  v13:= temp @kind object;
  #L438022.  v13:= (`java.lang.Throwable`) v13 @kind object;
  #L438026.  if v13 == 0 then goto L438038;
  #L43802a.  call `cleanup`(v17) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.cleanup:()V` @kind virtual;
  #L438030.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L438036.  return @kind void;
  #L438038.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43803c.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L438042.  v13:= temp;
  #L438044.  if v13 != 0 then goto L43804c;
  #L438048.  v13:= 1I;
  #L43804a.  goto L43804e;
  #L43804c.  v13:= 0I;
  #L43804e.  v14:= v10 @kind wide;
  #L438050.  v10:= 0I;
  #L438052.  v11:= 1I;
  #L438054.  v4:= length @variable v1;
  #L438056.  if v10 >= v4 then goto L43809a;
  #L43805a.  v4:= v1[v10] @kind object;
  #L43805e.  v12:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L438062.  if v12 == 0 then goto L438094;
  #L438066.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43806c.  v12:= temp @kind object;
  #L43806e.  if v12 == 0 then goto L438094;
  #L438072.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438078.  call `requestOne`(v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.requestOne:()V` @kind virtual;
  #L43807e.  v11:= 1L;
  #L438082.  v11:= v11 + v14 @kind long;
  #L438084.  v4:= lcmp(v11, v6);
  #L438088.  if v4 != 0 then goto L438090;
  #L43808c.  v10:= v11 @kind wide;
  #L43808e.  goto L4380b6;
  #L438090.  v14:= v11 @kind wide;
  #L438092.  v11:= 0I;
  #L438094.  v10:= v10 + 1;
  #L438098.  goto L438054;
  #L43809a.  if v13 == 0 then goto L4380aa;
  #L43809e.  if v11 == 0 then goto L4380aa;
  #L4380a2.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4380a8.  return @kind void;
  #L4380aa.  if v11 == 0 then goto L4380b2;
  #L4380ae.  v10:= v14 @kind wide;
  #L4380b0.  goto L4380b6;
  #L4380b2.  v10:= v14 @kind wide;
  #L4380b4.  goto L437ffe;
  #L4380b6.  v4:= lcmp(v10, v6);
  #L4380ba.  if v4 != 0 then goto L438144;
  #L4380be.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L4380c2.  if v4 == 0 then goto L4380ce;
  #L4380c6.  call `cleanup`(v17) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.cleanup:()V` @kind virtual;
  #L4380cc.  return @kind void;
  #L4380ce.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4380d2.  call temp:= `get`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L4380d8.  v4:= temp @kind object;
  #L4380da.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4380de.  if v4 == 0 then goto L4380f0;
  #L4380e2.  call `cleanup`(v17) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.cleanup:()V` @kind virtual;
  #L4380e8.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4380ee.  return @kind void;
  #L4380f0.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4380f4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4380fa.  v4:= temp;
  #L4380fc.  if v4 != 0 then goto L438104;
  #L438100.  v4:= 1I;
  #L438102.  goto L438106;
  #L438104.  v4:= 0I;
  #L438106.  v12:= 0I;
  #L438108.  if v12 >= v2 then goto L438130;
  #L43810c.  v13:= v1[v12] @kind object;
  #L438110.  v13:= v13.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L438114.  if v13 == 0 then goto L43812a;
  #L438118.  call temp:= `isEmpty`(v13) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L43811e.  v13:= temp;
  #L438120.  if v13 != 0 then goto L43812a;
  #L438124.  v16:= 0I;
  #L438128.  goto L438134;
  #L43812a.  v12:= v12 + 1;
  #L43812e.  goto L438108;
  #L438130.  v16:= 1I;
  #L438134.  if v4 == 0 then goto L438144;
  #L438138.  if v16 == 0 then goto L438144;
  #L43813c.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L438142.  return @kind void;
  #L438144.  v4:= lcmp(v10, v8);
  #L438148.  if v4 == 0 then goto L43816a;
  #L43814c.  v8:= 9223372036854775807L;
  #L438156.  v4:= lcmp(v6, v8);
  #L43815a.  if v4 == 0 then goto L43816a;
  #L43815e.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L438162.  v6:= -v10 @kind long;
  #L438164.  call temp:= `addAndGet`(v4, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43816a.  call temp:= `get`(v17) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.get:()I` @kind virtual;
  #L438170.  v4:= temp;
  #L438172.  if v4 != v5 then goto L438186;
  #L438176.  v4:= -v5 @kind int;
  #L438178.  call temp:= `addAndGet`(v0, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.addAndGet:(I)I` @kind virtual;
  #L43817e.  v4:= temp;
  #L438180.  if v4 != 0 then goto L438186;
  #L438184.  return @kind void;
  #L438186.  v5:= v4;
  #L438188.  goto L437fec;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43819c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4381a0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4381a6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L4381ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4381c0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4381c4.  v1:= 0I;
  #L4381c6.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4381cc.  v0:= temp;
  #L4381ce.  if v0 == 0 then goto L4381e0;
  #L4381d2.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L4381d8.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L4381de.  goto L4381f6;
  #L4381e0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4381e4.  call temp:= `get`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.get:()Ljava/lang/Object;` @kind virtual;
  #L4381ea.  v0:= temp @kind object;
  #L4381ec.  if v3 == v0 then goto L4381f6;
  #L4381f0.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4381f6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v6 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.onNext:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L438208.  call temp:= `get`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.get:()I` @kind virtual;
  #L43820e.  v0:= temp;
  #L438210.  v1:= "Queue full?!" @kind object;
  #L438214.  if v0 != 0 then goto L4382d6;
  #L438218.  v0:= 0I;
  #L43821a.  v2:= 1I;
  #L43821c.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.compareAndSet:(II)Z` @kind virtual;
  #L438222.  v0:= temp;
  #L438224.  if v0 == 0 then goto L4382d6;
  #L438228.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43822c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L438232.  v2:= temp @kind wide;
  #L438234.  v4:= 0L;
  #L438238.  v0:= lcmp(v2, v4);
  #L43823c.  if v0 == 0 then goto L43827e;
  #L438240.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438244.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43824a.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43824e.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L438254.  v0:= temp @kind wide;
  #L438256.  v2:= 9223372036854775807L;
  #L438260.  v8:= lcmp(v0, v2);
  #L438264.  if v8 == 0 then goto L438272;
  #L438268.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43826c.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L438272.  v0:= 1L;
  #L438276.  call `request`(v7, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.request:(J)V` @kind virtual;
  #L43827c.  goto L4382c8;
  #L43827e.  call temp:= `getQueue`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.getQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L438284.  v7:= temp @kind object;
  #L438286.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L43828c.  v7:= temp;
  #L43828e.  if v7 != 0 then goto L4382c8;
  #L438292.  call `cancelAll`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L438298.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L43829c.  call `<init>`(v7, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4382a2.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4382a6.  v0:= 0I;
  #L4382a8.  call temp:= `compareAndSet`(v8, v0, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4382ae.  v8:= temp;
  #L4382b0.  if v8 == 0 then goto L4382c0;
  #L4382b4.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4382b8.  call `onError`(v8, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4382be.  goto L4382c6;
  #L4382c0.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4382c6.  return @kind void;
  #L4382c8.  call temp:= `decrementAndGet`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.decrementAndGet:()I` @kind virtual;
  #L4382ce.  v7:= temp;
  #L4382d0.  if v7 != 0 then goto L438310;
  #L4382d4.  return @kind void;
  #L4382d6.  call temp:= `getQueue`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.getQueue:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4382dc.  v7:= temp @kind object;
  #L4382de.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4382e4.  v7:= temp;
  #L4382e6.  if v7 != 0 then goto L438302;
  #L4382ea.  call `cancelAll`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L4382f0.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4382f4.  call `<init>`(v7, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4382fa.  call `onError`(v6, v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438300.  return @kind void;
  #L438302.  call temp:= `getAndIncrement`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.getAndIncrement:()I` @kind virtual;
  #L438308.  v7:= temp;
  #L43830a.  if v7 == 0 then goto L438310;
  #L43830e.  return @kind void;
  #L438310.  call `drainLoop`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drainLoop:()V` @kind virtual;
  #L438316.  return @kind void;
}
