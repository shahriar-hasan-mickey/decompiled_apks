record `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.limit` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscArrayQueue` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L439738.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43973e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L439742.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L439748.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L43974c.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.prefetch` @type ^`int` := v2;
  #L439750.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` := v3 @kind object;
  #L439754.  v3:= v2 ^> 2;
  #L439758.  v2:= v2 - v3 @kind int;
  #L43975a.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.limit` @type ^`int` := v2;
  #L43975e.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` := v4 @kind object;
  #L439762.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L439774.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L439778.  if v0 != 0 then goto L4397ac;
  #L43977c.  v0:= 1I;
  #L43977e.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L439782.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439786.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43978c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L439790.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L439796.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.getAndIncrement:()I` @kind virtual;
  #L43979c.  v0:= temp;
  #L43979e.  if v0 != 0 then goto L4397ac;
  #L4397a2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L4397a6.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L4397ac.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4397c0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L4397c4.  if v0 == 0 then goto L4397ca;
  #L4397c8.  return @kind void;
  #L4397ca.  v0:= 1I;
  #L4397cc.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4397d0.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @kind virtual;
  #L4397d6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4397e8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L4397ec.  if v0 == 0 then goto L4397f8;
  #L4397f0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4397f6.  return @kind void;
  #L4397f8.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4397fc.  v2:= 1I;
  #L4397fe.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L439802.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @kind virtual;
  #L439808.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43981c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L439820.  if v0 == 0 then goto L439826;
  #L439824.  return @kind void;
  #L439826.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L43982a.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L439830.  v2:= temp;
  #L439832.  if v2 != 0 then goto L439856;
  #L439836.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43983a.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L439840.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L439844.  v0:= "Queue is full?!" @kind object;
  #L439848.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43984e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L439854.  return @kind void;
  #L439856.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @kind virtual;
  #L43985c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L439870.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L439876.  v0:= temp;
  #L439878.  if v0 == 0 then goto L43988c;
  #L43987c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L439880.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L439886.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @kind virtual;
  #L43988c.  return @kind void;
}
procedure `void` `schedule`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L4398a0.  call temp:= `getAndIncrement`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.getAndIncrement:()I` @kind virtual;
  #L4398a6.  v0:= temp;
  #L4398a8.  if v0 != 0 then goto L4398b6;
  #L4398ac.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4398b0.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4398b6.  return @kind void;
}
