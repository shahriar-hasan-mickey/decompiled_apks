record `io.reactivex.internal.operators.parallel.ParallelMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMap.mapper` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelMap.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMap` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L438c48.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L438c4e.  v0.`io.reactivex.internal.operators.parallel.ParallelMap.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L438c52.  v0.`io.reactivex.internal.operators.parallel.ParallelMap.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438c56.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelMap` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438c28.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L438c2c.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L438c32.  v0:= temp;
  #L438c34.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelMap` v6 @kind this, `org.reactivestreams.Subscriber`[] v7 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L438c68.  call temp:= `validate`(v6, v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L438c6e.  v0:= temp;
  #L438c70.  if v0 != 0 then goto L438c76;
  #L438c74.  return @kind void;
  #L438c76.  v0:= length @variable v7;
  #L438c78.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L438c7c.  v2:= 0I;
  #L438c7e.  if v2 >= v0 then goto L438cbe;
  #L438c82.  v3:= v7[v2] @kind object;
  #L438c86.  v4:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L438c8a.  if v4 == 0 then goto L438ca6;
  #L438c8e.  v4:= new `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber`;
  #L438c92.  v3:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L438c96.  v5:= v6.`io.reactivex.internal.operators.parallel.ParallelMap.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L438c9a.  call `<init>`(v4, v3, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;)V` @kind direct;
  #L438ca0.  v1[v2]:= v4 @kind object;
  #L438ca4.  goto L438cb8;
  #L438ca6.  v4:= new `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber`;
  #L438caa.  v5:= v6.`io.reactivex.internal.operators.parallel.ParallelMap.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L438cae.  call `<init>`(v4, v3, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @kind direct;
  #L438cb4.  v1[v2]:= v4 @kind object;
  #L438cb8.  v2:= v2 + 1;
  #L438cbc.  goto L438c7e;
  #L438cbe.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelMap.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L438cc2.  call `subscribe`(v7, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L438cc8.  return @kind void;
}
