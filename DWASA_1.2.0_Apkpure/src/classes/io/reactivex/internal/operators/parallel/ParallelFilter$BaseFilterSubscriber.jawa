record `io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber.done` @AccessFlag ;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber.predicate` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber` v0 @kind this, `io.reactivex.functions.Predicate` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$BaseFilterSubscriber;.<init>:(Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436940.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L436946.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` := v1 @kind object;
  #L43694a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$BaseFilterSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43695c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436960.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L436966.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$BaseFilterSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L436978.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$BaseFilterSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L43697e.  v3:= temp;
  #L436980.  if v3 != 0 then goto L43699a;
  #L436984.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L436988.  if v3 != 0 then goto L43699a;
  #L43698c.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436990.  v0:= 1L;
  #L436994.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43699a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$BaseFilterSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4369ac.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4369b0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4369b6.  return @kind void;
}
