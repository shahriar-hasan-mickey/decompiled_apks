record `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L439b04.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L439b0a.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L439b0e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439b20.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439b24.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L439b2a.  v0:= temp;
  #L439b2c.  if v0 == 0 then goto L439b4a;
  #L439b30.  v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L439b34.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L439b38.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L439b3e.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.prefetch` @type ^`int`;
  #L439b42.  v0:= (`long`) v0 @kind i2l;
  #L439b44.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L439b4a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber` v17 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L439b5c.  v0:= v17 @kind object;
  #L439b60.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.consumed` @type ^`int`;
  #L439b64.  v2:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L439b68.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L439b6c.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.limit` @type ^`int`;
  #L439b70.  v6:= 1I;
  #L439b72.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L439b76.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L439b7c.  v7:= temp @kind wide;
  #L439b7e.  v9:= 0L;
  #L439b82.  v11:= v9 @kind wide;
  #L439b84.  v13:= lcmp(v11, v7);
  #L439b88.  if v13 == 0 then goto L439c2e;
  #L439b8c.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L439b90.  if v13 == 0 then goto L439b9c;
  #L439b94.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L439b9a.  return @kind void;
  #L439b9c.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L439ba0.  if v13 == 0 then goto L439bc4;
  #L439ba4.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L439ba8.  if v14 == 0 then goto L439bc4;
  #L439bac.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L439bb2.  call `onError`(v3, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L439bb8.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L439bbc.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L439bc2.  return @kind void;
  #L439bc4.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L439bca.  v14:= temp @kind object;
  #L439bcc.  v15:= 0I;
  #L439bce.  if v14 != 0 then goto L439bd8;
  #L439bd2.  v16:= 1I;
  #L439bd6.  goto L439bdc;
  #L439bd8.  v16:= 0I;
  #L439bdc.  if v13 == 0 then goto L439bf6;
  #L439be0.  if v16 == 0 then goto L439bf6;
  #L439be4.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L439bea.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L439bee.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L439bf4.  return @kind void;
  #L439bf6.  if v16 == 0 then goto L439bfc;
  #L439bfa.  goto L439c2e;
  #L439bfc.  call `onNext`(v3, v14) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L439c02.  v13:= 1L;
  #L439c06.  v11:= v11 + v13 @kind long;
  #L439c08.  v1:= v1 + 1;
  #L439c0c.  if v1 != v4 then goto L439c24;
  #L439c10.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439c14.  v16:= v6;
  #L439c18.  v5:= (`long`) v1 @kind i2l;
  #L439c1a.  call `request`(v13, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L439c20.  v1:= 0I;
  #L439c22.  goto L439c28;
  #L439c24.  v16:= v6;
  #L439c28.  v6:= v16;
  #L439c2c.  goto L439b84;
  #L439c2e.  v16:= v6;
  #L439c32.  v5:= lcmp(v11, v7);
  #L439c36.  if v5 != 0 then goto L439c90;
  #L439c3a.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L439c3e.  if v5 == 0 then goto L439c4a;
  #L439c42.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L439c48.  return @kind void;
  #L439c4a.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L439c4e.  if v5 == 0 then goto L439c90;
  #L439c52.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L439c56.  if v5 == 0 then goto L439c72;
  #L439c5a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L439c60.  call `onError`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L439c66.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L439c6a.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L439c70.  return @kind void;
  #L439c72.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L439c78.  v5:= temp;
  #L439c7a.  if v5 == 0 then goto L439c90;
  #L439c7e.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L439c84.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L439c88.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L439c8e.  return @kind void;
  #L439c90.  v5:= lcmp(v11, v9);
  #L439c94.  if v5 == 0 then goto L439cb6;
  #L439c98.  v5:= 9223372036854775807L;
  #L439ca2.  v9:= lcmp(v7, v5);
  #L439ca6.  if v9 == 0 then goto L439cb6;
  #L439caa.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L439cae.  v6:= -v11 @kind long;
  #L439cb0.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L439cb6.  call temp:= `get`(v17) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.get:()I` @kind virtual;
  #L439cbc.  v5:= temp;
  #L439cbe.  v6:= v16;
  #L439cc2.  if v5 != v6 then goto L439cda;
  #L439cc6.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.consumed` @type ^`int` := v1;
  #L439cca.  v5:= -v6 @kind int;
  #L439ccc.  call temp:= `addAndGet`(v0, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.addAndGet:(I)I` @kind virtual;
  #L439cd2.  v5:= temp;
  #L439cd4.  if v5 != 0 then goto L439cda;
  #L439cd8.  return @kind void;
  #L439cda.  v6:= v5;
  #L439cdc.  goto L439b72;
}
