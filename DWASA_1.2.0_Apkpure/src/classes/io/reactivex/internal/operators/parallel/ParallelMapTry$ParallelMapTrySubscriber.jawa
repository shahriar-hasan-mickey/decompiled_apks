record `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.errorHandler` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.mapper` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L438a48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L438a4e.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L438a52.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438a56.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L438a5a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438a6c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438a70.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L438a76.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438a88.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.done` @type ^`boolean` @kind boolean;
  #L438a8c.  if v0 == 0 then goto L438a92;
  #L438a90.  return @kind void;
  #L438a92.  v0:= 1I;
  #L438a94.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L438a98.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438a9c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L438aa2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438ab4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.done` @type ^`boolean` @kind boolean;
  #L438ab8.  if v0 == 0 then goto L438ac4;
  #L438abc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438ac2.  return @kind void;
  #L438ac4.  v0:= 1I;
  #L438ac6.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L438aca.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438ace.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L438ad4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438ae8.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L438aee.  v3:= temp;
  #L438af0.  if v3 != 0 then goto L438b0a;
  #L438af4.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.done` @type ^`boolean` @kind boolean;
  #L438af8.  if v3 != 0 then goto L438b0a;
  #L438afc.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438b00.  v0:= 1L;
  #L438b04.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L438b0a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438b1c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438b20.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L438b26.  v0:= temp;
  #L438b28.  if v0 == 0 then goto L438b3a;
  #L438b2c.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L438b30.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438b34.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L438b3a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438b4c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438b50.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L438b56.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L438950.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.done` @type ^`boolean` @kind boolean;
  #L438954.  v1:= 0I;
  #L438956.  if v0 == 0 then goto L43895c;
  #L43895a.  return v1;
  #L43895c.  v2:= 0L;
  #L438960.  v0:= 1I;
  #L438962.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L438966.  call temp:= `apply`(v4, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43896c.  v4:= temp @kind object;
  #L43896e.  v5:= "The mapper returned a null value" @kind object;
  #L438972.  call temp:= `requireNonNull`(v4, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L438978.  v10:= temp @kind object;
  #L43897a.  v1:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43897e.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438984.  return v0;
  #L438986.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438988.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43898e.  v5:= 2I;
  #L438990.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L438994.  v7:= 1L;
  #L438998.  v2:= v2 + v7 @kind long;
  #L43899a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4389a0.  v7:= temp @kind object;
  #L4389a2.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4389a8.  v6:= temp @kind object;
  #L4389aa.  v7:= "The errorHandler returned a null item" @kind object;
  #L4389ae.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4389b4.  v6:= temp @kind object;
  #L4389b6.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4389ba.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelMapTry$1.$SwitchMap$io$reactivex$parallel$ParallelFailureHandling` @type ^`int`[] @kind object;
  #L4389be.  call temp:= `ordinal`(v6) @signature `Lio/reactivex/parallel/ParallelFailureHandling;.ordinal:()I` @kind virtual;
  #L4389c4.  v6:= temp;
  #L4389c6.  v6:= v7[v6];
  #L4389ca.  if v6 == v0 then goto L438960;
  #L4389ce.  if v6 == v5 then goto L4389f2;
  #L4389d2.  v10:= 3I;
  #L4389d4.  if v6 == v10 then goto L4389e6;
  #L4389d8.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.cancel:()V` @kind virtual;
  #L4389de.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4389e4.  return v1;
  #L4389e6.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.cancel:()V` @kind virtual;
  #L4389ec.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.onComplete:()V` @kind virtual;
  #L4389f2.  return v1;
  #L4389f4.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4389f6.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4389fc.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.cancel:()V` @kind virtual;
  #L438a02.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L438a06.  v3:= new `java.lang.Throwable`[v5];
  #L438a0a.  v3[v1]:= v4 @kind object;
  #L438a0e.  v3[v0]:= v10 @kind object;
  #L438a12.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L438a18.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438a1e.  return v1;
  catch `java.lang.Throwable` @[L438962..L43897a] goto L438986;
  catch `java.lang.Throwable` @[L438990..L4389ba] goto L4389f4;
}
