record `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.mapper` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43855c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L438562.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L438566.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43856a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43857c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438580.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L438586.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438598.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.done` @type ^`boolean` @kind boolean;
  #L43859c.  if v0 == 0 then goto L4385a2;
  #L4385a0.  return @kind void;
  #L4385a2.  v0:= 1I;
  #L4385a4.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4385a8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4385ac.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4385b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4385c4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.done` @type ^`boolean` @kind boolean;
  #L4385c8.  if v0 == 0 then goto L4385d4;
  #L4385cc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4385d2.  return @kind void;
  #L4385d4.  v0:= 1I;
  #L4385d6.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4385da.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4385de.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4385e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4385f8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.done` @type ^`boolean` @kind boolean;
  #L4385fc.  if v0 == 0 then goto L438602;
  #L438600.  return @kind void;
  #L438602.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L438606.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43860c.  v2:= temp @kind object;
  #L43860e.  v0:= "The mapper returned a null value" @kind object;
  #L438612.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L438618.  v2:= temp @kind object;
  #L43861a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43861e.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438624.  return @kind void;
  #L438626.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438628.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43862e.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.cancel:()V` @kind virtual;
  #L438634.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43863a.  return @kind void;
  catch `java.lang.Throwable` @[L438602..L43861a] goto L438626;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438658.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43865c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L438662.  v0:= temp;
  #L438664.  if v0 == 0 then goto L438676;
  #L438668.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L43866c.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438670.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L438676.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438688.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43868c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L438692.  return @kind void;
}
