record `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.j` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.m` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription` v0 @kind this, `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher$RailSubscription;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4372c4.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.this$0` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` := v1 @kind object;
  #L4372c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4372ce.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.j` @type ^`int` := v2;
  #L4372d2.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.m` @type ^`int` := v3;
  #L4372d6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription` v7 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher$RailSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4372e8.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.this$0` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L4372ec.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L4372f0.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.m` @type ^`int`;
  #L4372f4.  v2:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.j` @type ^`int`;
  #L4372f8.  v2:= v2 + v0 @kind int;
  #L4372fa.  v3:= 0L;
  #L4372fe.  v5:= 1L;
  #L437302.  call temp:= `compareAndSet`(v1, v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.compareAndSet:(IJJ)Z` @kind virtual;
  #L437308.  v0:= temp;
  #L43730a.  if v0 == 0 then goto L43731e;
  #L43730e.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.this$0` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L437312.  v1:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.m` @type ^`int`;
  #L437316.  v1:= v1 + v1 @kind int;
  #L437318.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.cancel:(I)V` @kind virtual;
  #L43731e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher$RailSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L437330.  call temp:= `validate`(v8) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L437336.  v0:= temp;
  #L437338.  if v0 == 0 then goto L4373a0;
  #L43733c.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.this$0` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L437340.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L437344.  v1:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.j` @type ^`int`;
  #L437348.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L43734e.  v3:= temp @kind wide;
  #L437350.  v1:= 9223372036854775807L;
  #L43735a.  v5:= lcmp(v3, v1);
  #L43735e.  if v5 != 0 then goto L437364;
  #L437362.  return @kind void;
  #L437364.  call temp:= `addCap`(v3, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L43736a.  v5:= temp @kind wide;
  #L43736c.  v2:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.j` @type ^`int`;
  #L437370.  v1:= v0 @kind object;
  #L437372.  call temp:= `compareAndSet`(v1, v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.compareAndSet:(IJJ)Z` @kind virtual;
  #L437378.  v1:= temp;
  #L43737a.  if v1 == 0 then goto L437344;
  #L43737e.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.this$0` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L437382.  v8:= v8.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscriberCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L437386.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43738c.  v8:= temp;
  #L43738e.  v9:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.m` @type ^`int`;
  #L437392.  if v8 != v9 then goto L4373a0;
  #L437396.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription.this$0` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L43739a.  call `drain`(v8) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L4373a0.  return @kind void;
}
