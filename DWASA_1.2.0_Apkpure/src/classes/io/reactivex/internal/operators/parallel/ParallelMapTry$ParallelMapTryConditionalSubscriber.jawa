record `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.done` @AccessFlag ;
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.errorHandler` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.mapper` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L438830.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L438836.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L43883a.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43883e.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L438842.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438854.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438858.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43885e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438870.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L438874.  if v0 == 0 then goto L43887a;
  #L438878.  return @kind void;
  #L43887a.  v0:= 1I;
  #L43887c.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L438880.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L438884.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L43888a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43889c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4388a0.  if v0 == 0 then goto L4388ac;
  #L4388a4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4388aa.  return @kind void;
  #L4388ac.  v0:= 1I;
  #L4388ae.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4388b2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4388b6.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4388bc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4388d0.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4388d6.  v3:= temp;
  #L4388d8.  if v3 != 0 then goto L4388f2;
  #L4388dc.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4388e0.  if v3 != 0 then goto L4388f2;
  #L4388e4.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4388e8.  v0:= 1L;
  #L4388ec.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4388f2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438904.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438908.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43890e.  v0:= temp;
  #L438910.  if v0 == 0 then goto L438922;
  #L438914.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L438918.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43891c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L438922.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438934.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438938.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43893e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L438734.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L438738.  v1:= 0I;
  #L43873a.  if v0 == 0 then goto L438740;
  #L43873e.  return v1;
  #L438740.  v2:= 0L;
  #L438744.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L438748.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43874e.  v0:= temp @kind object;
  #L438750.  v4:= "The mapper returned a null value" @kind object;
  #L438754.  call temp:= `requireNonNull`(v0, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43875a.  v10:= temp @kind object;
  #L43875c.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L438760.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L438766.  v10:= temp;
  #L438768.  return v10;
  #L43876a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43876c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438772.  v4:= 1I;
  #L438774.  v5:= 2I;
  #L438776.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43877a.  v7:= 1L;
  #L43877e.  v2:= v2 + v7 @kind long;
  #L438780.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L438786.  v7:= temp @kind object;
  #L438788.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43878e.  v6:= temp @kind object;
  #L438790.  v7:= "The errorHandler returned a null item" @kind object;
  #L438794.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43879a.  v6:= temp @kind object;
  #L43879c.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4387a0.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelMapTry$1.$SwitchMap$io$reactivex$parallel$ParallelFailureHandling` @type ^`int`[] @kind object;
  #L4387a4.  call temp:= `ordinal`(v6) @signature `Lio/reactivex/parallel/ParallelFailureHandling;.ordinal:()I` @kind virtual;
  #L4387aa.  v6:= temp;
  #L4387ac.  v6:= v7[v6];
  #L4387b0.  if v6 == v4 then goto L438744;
  #L4387b4.  if v6 == v5 then goto L4387d8;
  #L4387b8.  v10:= 3I;
  #L4387ba.  if v6 == v10 then goto L4387cc;
  #L4387be.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.cancel:()V` @kind virtual;
  #L4387c4.  call `onError`(v9, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4387ca.  return v1;
  #L4387cc.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.cancel:()V` @kind virtual;
  #L4387d2.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.onComplete:()V` @kind virtual;
  #L4387d8.  return v1;
  #L4387da.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4387dc.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4387e2.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.cancel:()V` @kind virtual;
  #L4387e8.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L4387ec.  v3:= new `java.lang.Throwable`[v5];
  #L4387f0.  v3[v1]:= v0 @kind object;
  #L4387f4.  v3[v4]:= v10 @kind object;
  #L4387f8.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4387fe.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438804.  return v1;
  catch `java.lang.Throwable` @[L438744..L43875c] goto L43876a;
  catch `java.lang.Throwable` @[L438776..L4387a0] goto L4387da;
}
