record `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.errorHandler` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.onNext` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4368a0.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4368a6.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L4368aa.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.onNext` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L4368ae.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L4368b2.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436880.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L436884.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L43688a.  v0:= temp;
  #L43688c.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4368c4.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4368ca.  v0:= temp;
  #L4368cc.  if v0 != 0 then goto L4368d2;
  #L4368d0.  return @kind void;
  #L4368d2.  v0:= length @variable v8;
  #L4368d4.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4368d8.  v2:= 0I;
  #L4368da.  if v2 >= v0 then goto L436922;
  #L4368de.  v3:= v8[v2] @kind object;
  #L4368e2.  v4:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4368e6.  if v4 == 0 then goto L436906;
  #L4368ea.  v4:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber`;
  #L4368ee.  v3:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L4368f2.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4368f6.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4368fa.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L436900.  v1[v2]:= v4 @kind object;
  #L436904.  goto L43691c;
  #L436906.  v4:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber`;
  #L43690a.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43690e.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L436912.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$ParallelDoOnNextSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L436918.  v1[v2]:= v4 @kind object;
  #L43691c.  v2:= v2 + 1;
  #L436920.  goto L4368da;
  #L436922.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L436926.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L43692c.  return @kind void;
}
