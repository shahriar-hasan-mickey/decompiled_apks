record `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.current` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.error` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.reducer` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.remaining` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullInnerSubscriber`[] `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.subscribers` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `int` v4 , `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4393c0.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4393c6.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4393ca.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4393d0.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4393d4.  v3:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4393d8.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4393de.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` := v3 @kind object;
  #L4393e2.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4393e6.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4393ec.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4393f0.  v3:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullInnerSubscriber`[v4];
  #L4393f4.  v0:= 0I;
  #L4393f6.  if v0 >= v4 then goto L43940e;
  #L4393fa.  v1:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullInnerSubscriber`;
  #L4393fe.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L439404.  v3[v0]:= v1 @kind object;
  #L439408.  v0:= v0 + 1;
  #L43940c.  goto L4393f6;
  #L43940e.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullInnerSubscriber`[] := v3 @kind object;
  #L439412.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.reducer` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L439416.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43941a.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L439420.  return @kind void;
}
procedure `io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair` `addValue`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.addValue:(Ljava/lang/Object;)Lio/reactivex/internal/operators/parallel/ParallelReduceFull$SlotPair;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43933c.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L439340.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L439346.  v0:= temp @kind object;
  #L439348.  v0:= (`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair`) v0 @kind object;
  #L43934c.  v1:= 0I;
  #L43934e.  if v0 != 0 then goto L43936e;
  #L439352.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair`;
  #L439356.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$SlotPair;.<init>:()V` @kind direct;
  #L43935c.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L439360.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L439366.  v2:= temp;
  #L439368.  if v2 != 0 then goto L43936e;
  #L43936c.  goto L43933c;
  #L43936e.  call temp:= `tryAcquireSlot`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$SlotPair;.tryAcquireSlot:()I` @kind virtual;
  #L439374.  v2:= temp;
  #L439376.  if v2 >= 0 then goto L439386;
  #L43937a.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43937e.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L439384.  goto L43933c;
  #L439386.  if v2 != 0 then goto L439390;
  #L43938a.  v0.`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.first` @type ^`java.lang.Object` := v4 @kind object;
  #L43938e.  goto L439394;
  #L439390.  v0.`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.second` @type ^`java.lang.Object` := v4 @kind object;
  #L439394.  call temp:= `releaseSlot`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$SlotPair;.releaseSlot:()Z` @kind virtual;
  #L43939a.  v4:= temp;
  #L43939c.  if v4 == 0 then goto L4393ac;
  #L4393a0.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4393a4.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4393aa.  return v0 @kind object;
  #L4393ac.  return v1 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L439434.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullInnerSubscriber`[] @kind object;
  #L439438.  v1:= length @variable v0;
  #L43943a.  v2:= 0I;
  #L43943c.  if v2 >= v1 then goto L439450;
  #L439440.  v3:= v0[v2] @kind object;
  #L439444.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullInnerSubscriber;.cancel:()V` @kind virtual;
  #L43944a.  v2:= v2 + 1;
  #L43944e.  goto L43943c;
  #L439450.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.innerComplete:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L439464.  if v3 == 0 then goto L4394a6;
  #L439468.  call temp:= `addValue`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.addValue:(Ljava/lang/Object;)Lio/reactivex/internal/operators/parallel/ParallelReduceFull$SlotPair;` @kind virtual;
  #L43946e.  v3:= temp @kind object;
  #L439470.  if v3 == 0 then goto L4394a6;
  #L439474.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.reducer` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L439478.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.first` @type ^`java.lang.Object` @kind object;
  #L43947c.  v3:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.second` @type ^`java.lang.Object` @kind object;
  #L439480.  call temp:= `apply`(v0, v1, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L439486.  v3:= temp @kind object;
  #L439488.  v0:= "The reducer returned a null value" @kind object;
  #L43948c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L439492.  v3:= temp @kind object;
  #L439494.  goto L439468;
  #L439496.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439498.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43949e.  call `innerError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4394a4.  return @kind void;
  #L4394a6.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4394aa.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4394b0.  v3:= temp;
  #L4394b2.  if v3 != 0 then goto L4394ec;
  #L4394b6.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4394ba.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4394c0.  v3:= temp @kind object;
  #L4394c2.  v3:= (`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair`) v3 @kind object;
  #L4394c6.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4394ca.  v1:= 0I;
  #L4394cc.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4394d2.  if v3 == 0 then goto L4394e2;
  #L4394d6.  v3:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.first` @type ^`java.lang.Object` @kind object;
  #L4394da.  call `complete`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4394e0.  goto L4394ec;
  #L4394e2.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4394e6.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4394ec.  return @kind void;
  catch `java.lang.Throwable` @[L439474..L439494] goto L439496;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43950c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L439510.  v1:= 0I;
  #L439512.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L439518.  v0:= temp;
  #L43951a.  if v0 == 0 then goto L439530;
  #L43951e.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$ParallelReduceFullMainSubscriber;.cancel:()V` @kind virtual;
  #L439524.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L439528.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43952e.  goto L439546;
  #L439530.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$ParallelReduceFullMainSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L439534.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43953a.  v0:= temp @kind object;
  #L43953c.  if v3 == v0 then goto L439546;
  #L439540.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439546.  return @kind void;
}
