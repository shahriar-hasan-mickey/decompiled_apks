record `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.done` @AccessFlag ;
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.mapper` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L438414.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43841a.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L43841e.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438422.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438434.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438438.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43843e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438450.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L438454.  if v0 == 0 then goto L43845a;
  #L438458.  return @kind void;
  #L43845a.  v0:= 1I;
  #L43845c.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L438460.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L438464.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L43846a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43847c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L438480.  if v0 == 0 then goto L43848c;
  #L438484.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43848a.  return @kind void;
  #L43848c.  v0:= 1I;
  #L43848e.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L438492.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L438496.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43849c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4384b0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4384b4.  if v0 == 0 then goto L4384ba;
  #L4384b8.  return @kind void;
  #L4384ba.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L4384be.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4384c4.  v2:= temp @kind object;
  #L4384c6.  v0:= "The mapper returned a null value" @kind object;
  #L4384ca.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4384d0.  v2:= temp @kind object;
  #L4384d2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4384d6.  call `onNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4384dc.  return @kind void;
  #L4384de.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4384e0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4384e6.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.cancel:()V` @kind virtual;
  #L4384ec.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4384f2.  return @kind void;
  catch `java.lang.Throwable` @[L4384ba..L4384d2] goto L4384de;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438510.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438514.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43851a.  v0:= temp;
  #L43851c.  if v0 == 0 then goto L43852e;
  #L438520.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L438524.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L438528.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43852e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438540.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438544.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43854a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4383b0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4383b4.  v1:= 0I;
  #L4383b6.  if v0 == 0 then goto L4383bc;
  #L4383ba.  return v1;
  #L4383bc.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L4383c0.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4383c6.  v3:= temp @kind object;
  #L4383c8.  v0:= "The mapper returned a null value" @kind object;
  #L4383cc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4383d2.  v3:= temp @kind object;
  #L4383d4.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4383d8.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4383de.  v3:= temp;
  #L4383e0.  return v3;
  #L4383e2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4383e4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4383ea.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.cancel:()V` @kind virtual;
  #L4383f0.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4383f6.  return v1;
  catch `java.lang.Throwable` @[L4383bc..L4383d4] goto L4383e2;
}
