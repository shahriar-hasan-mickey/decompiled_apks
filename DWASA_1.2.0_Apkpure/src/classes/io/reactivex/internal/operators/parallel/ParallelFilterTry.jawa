record `io.reactivex.internal.operators.parallel.ParallelFilterTry` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelFilterTry.errorHandler` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.parallel.ParallelFilterTry.predicate` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelFilterTry.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilterTry` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L437054.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L43705a.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L43705e.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry.predicate` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L437062.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L437066.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelFilterTry` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437034.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L437038.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L43703e.  v0:= temp;
  #L437040.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelFilterTry` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L437078.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L43707e.  v0:= temp;
  #L437080.  if v0 != 0 then goto L437086;
  #L437084.  return @kind void;
  #L437086.  v0:= length @variable v8;
  #L437088.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L43708c.  v2:= 0I;
  #L43708e.  if v2 >= v0 then goto L4370d6;
  #L437092.  v3:= v8[v2] @kind object;
  #L437096.  v4:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L43709a.  if v4 == 0 then goto L4370ba;
  #L43709e.  v4:= new `io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber`;
  #L4370a2.  v3:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L4370a6.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelFilterTry.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L4370aa.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelFilterTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4370ae.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L4370b4.  v1[v2]:= v4 @kind object;
  #L4370b8.  goto L4370d0;
  #L4370ba.  v4:= new `io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber`;
  #L4370be.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelFilterTry.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L4370c2.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelFilterTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4370c6.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L4370cc.  v1[v2]:= v4 @kind object;
  #L4370d0.  v2:= v2 + 1;
  #L4370d4.  goto L43708e;
  #L4370d6.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelFilterTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L4370da.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4370e0.  return @kind void;
}
