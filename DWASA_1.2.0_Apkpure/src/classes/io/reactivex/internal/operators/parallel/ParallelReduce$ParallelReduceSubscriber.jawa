record `io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.DeferredScalarSubscriber` @kind class {
  `java.lang.Object` `io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @AccessFlag ;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.reducer` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4390c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/DeferredScalarSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4390c6.  v0.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` := v2 @kind object;
  #L4390ca.  v0.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.reducer` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L4390ce.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4390e0.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscribers/DeferredScalarSubscriber;.cancel:()V` @kind super;
  #L4390e6.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4390ea.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4390f0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439104.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L439108.  if v0 != 0 then goto L439122;
  #L43910c.  v0:= 1I;
  #L43910e.  v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L439112.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` @kind object;
  #L439116.  v1:= 0I;
  #L439118.  v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` := v1 @kind object;
  #L43911c.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L439122.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439134.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L439138.  if v0 == 0 then goto L439144;
  #L43913c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439142.  return @kind void;
  #L439144.  v0:= 1I;
  #L439146.  v1.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L43914a.  v0:= 0I;
  #L43914c.  v1.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` := v0 @kind object;
  #L439150.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L439154.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43915a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43916c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L439170.  if v0 != 0 then goto L4391aa;
  #L439174.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.reducer` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L439178.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` @kind object;
  #L43917c.  call temp:= `apply`(v0, v1, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L439182.  v3:= temp @kind object;
  #L439184.  v0:= "The reducer returned a null value" @kind object;
  #L439188.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43918e.  v3:= temp @kind object;
  #L439190.  v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` := v3 @kind object;
  #L439194.  goto L4391aa;
  #L439196.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439198.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43919e.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.cancel:()V` @kind virtual;
  #L4391a4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4391aa.  return @kind void;
  catch `java.lang.Throwable` @[L439174..L439190] goto L439196;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4391c8.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4391cc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4391d2.  v0:= temp;
  #L4391d4.  if v0 == 0 then goto L4391f6;
  #L4391d8.  v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4391dc.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4391e0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4391e6.  v0:= 9223372036854775807L;
  #L4391f0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4391f6.  return @kind void;
}
