record `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L439910.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L439916.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L43991a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43992c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439930.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L439936.  v0:= temp;
  #L439938.  if v0 == 0 then goto L439956;
  #L43993c.  v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L439940.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L439944.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43994a.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.prefetch` @type ^`int`;
  #L43994e.  v0:= (`long`) v0 @kind i2l;
  #L439950.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L439956.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber` v17 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L439968.  v0:= v17 @kind object;
  #L43996c.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.consumed` @type ^`int`;
  #L439970.  v2:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L439974.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L439978.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.limit` @type ^`int`;
  #L43997c.  v6:= 1I;
  #L43997e.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L439982.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L439988.  v7:= temp @kind wide;
  #L43998a.  v9:= 0L;
  #L43998e.  v11:= v9 @kind wide;
  #L439990.  v13:= lcmp(v11, v7);
  #L439994.  if v13 == 0 then goto L439a40;
  #L439998.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L43999c.  if v13 == 0 then goto L4399a8;
  #L4399a0.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L4399a6.  return @kind void;
  #L4399a8.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4399ac.  if v13 == 0 then goto L4399d0;
  #L4399b0.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4399b4.  if v14 == 0 then goto L4399d0;
  #L4399b8.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L4399be.  call `onError`(v3, v14) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4399c4.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4399c8.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L4399ce.  return @kind void;
  #L4399d0.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4399d6.  v14:= temp @kind object;
  #L4399d8.  v15:= 0I;
  #L4399da.  if v14 != 0 then goto L4399e4;
  #L4399de.  v16:= 1I;
  #L4399e2.  goto L4399e8;
  #L4399e4.  v16:= 0I;
  #L4399e8.  if v13 == 0 then goto L439a02;
  #L4399ec.  if v16 == 0 then goto L439a02;
  #L4399f0.  call `onComplete`(v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L4399f6.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4399fa.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L439a00.  return @kind void;
  #L439a02.  if v16 == 0 then goto L439a08;
  #L439a06.  goto L439a40;
  #L439a08.  call temp:= `tryOnNext`(v3, v14) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L439a0e.  v13:= temp;
  #L439a10.  if v13 == 0 then goto L439a1a;
  #L439a14.  v13:= 1L;
  #L439a18.  v11:= v11 + v13 @kind long;
  #L439a1a.  v1:= v1 + 1;
  #L439a1e.  if v1 != v4 then goto L439a36;
  #L439a22.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439a26.  v16:= v6;
  #L439a2a.  v5:= (`long`) v1 @kind i2l;
  #L439a2c.  call `request`(v13, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L439a32.  v1:= 0I;
  #L439a34.  goto L439a3a;
  #L439a36.  v16:= v6;
  #L439a3a.  v6:= v16;
  #L439a3e.  goto L439990;
  #L439a40.  v16:= v6;
  #L439a44.  v5:= lcmp(v11, v7);
  #L439a48.  if v5 != 0 then goto L439aa2;
  #L439a4c.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L439a50.  if v5 == 0 then goto L439a5c;
  #L439a54.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L439a5a.  return @kind void;
  #L439a5c.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L439a60.  if v5 == 0 then goto L439aa2;
  #L439a64.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L439a68.  if v5 == 0 then goto L439a84;
  #L439a6c.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L439a72.  call `onError`(v3, v5) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L439a78.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L439a7c.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L439a82.  return @kind void;
  #L439a84.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L439a8a.  v5:= temp;
  #L439a8c.  if v5 == 0 then goto L439aa2;
  #L439a90.  call `onComplete`(v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L439a96.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.worker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L439a9a.  call `dispose`(v1) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L439aa0.  return @kind void;
  #L439aa2.  v5:= lcmp(v11, v9);
  #L439aa6.  if v5 == 0 then goto L439ac8;
  #L439aaa.  v5:= 9223372036854775807L;
  #L439ab4.  v9:= lcmp(v7, v5);
  #L439ab8.  if v9 == 0 then goto L439ac8;
  #L439abc.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L439ac0.  v6:= -v11 @kind long;
  #L439ac2.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L439ac8.  call temp:= `get`(v17) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.get:()I` @kind virtual;
  #L439ace.  v5:= temp;
  #L439ad0.  v6:= v16;
  #L439ad4.  if v5 != v6 then goto L439aec;
  #L439ad8.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.consumed` @type ^`int` := v1;
  #L439adc.  v5:= -v6 @kind int;
  #L439ade.  call temp:= `addAndGet`(v0, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.addAndGet:(I)I` @kind virtual;
  #L439ae4.  v5:= temp;
  #L439ae6.  if v5 != 0 then goto L439aec;
  #L439aea.  return @kind void;
  #L439aec.  v6:= v5;
  #L439aee.  goto L43997e;
}
