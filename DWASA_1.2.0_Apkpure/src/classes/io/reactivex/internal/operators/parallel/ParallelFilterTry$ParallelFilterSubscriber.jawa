record `io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelFilterTry$BaseFilterSubscriber` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.downstream` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436f88.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$BaseFilterSubscriber;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L436f8e.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L436f92.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436fa4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L436fa8.  if v0 != 0 then goto L436fbc;
  #L436fac.  v0:= 1I;
  #L436fae.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L436fb2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436fb6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L436fbc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436fd0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L436fd4.  if v0 == 0 then goto L436fe0;
  #L436fd8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436fde.  return @kind void;
  #L436fe0.  v0:= 1I;
  #L436fe2.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L436fe6.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436fea.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436ff0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437004.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L437008.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43700e.  v0:= temp;
  #L437010.  if v0 == 0 then goto L437022;
  #L437014.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L437018.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43701c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L437022.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L436e98.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L436e9c.  v1:= 0I;
  #L436e9e.  if v0 != 0 then goto L436f5e;
  #L436ea2.  v2:= 0L;
  #L436ea6.  v0:= 1I;
  #L436ea8.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L436eac.  call temp:= `test`(v4, v10) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L436eb2.  v2:= temp;
  #L436eb4.  if v2 == 0 then goto L436ec4;
  #L436eb8.  v1:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436ebc.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L436ec2.  return v0;
  #L436ec4.  return v1;
  #L436ec6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436ec8.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L436ece.  v5:= 2I;
  #L436ed0.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterSubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L436ed4.  v7:= 1L;
  #L436ed8.  v2:= v2 + v7 @kind long;
  #L436eda.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L436ee0.  v7:= temp @kind object;
  #L436ee2.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L436ee8.  v6:= temp @kind object;
  #L436eea.  v7:= "The errorHandler returned a null item" @kind object;
  #L436eee.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L436ef4.  v6:= temp @kind object;
  #L436ef6.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L436efa.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelFilterTry$1.$SwitchMap$io$reactivex$parallel$ParallelFailureHandling` @type ^`int`[] @kind object;
  #L436efe.  call temp:= `ordinal`(v6) @signature `Lio/reactivex/parallel/ParallelFailureHandling;.ordinal:()I` @kind virtual;
  #L436f04.  v6:= temp;
  #L436f06.  v6:= v7[v6];
  #L436f0a.  if v6 == v0 then goto L436ea6;
  #L436f0e.  if v6 == v5 then goto L436f32;
  #L436f12.  v10:= 3I;
  #L436f14.  if v6 == v10 then goto L436f26;
  #L436f18.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.cancel:()V` @kind virtual;
  #L436f1e.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436f24.  return v1;
  #L436f26.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.cancel:()V` @kind virtual;
  #L436f2c.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.onComplete:()V` @kind virtual;
  #L436f32.  return v1;
  #L436f34.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436f36.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L436f3c.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.cancel:()V` @kind virtual;
  #L436f42.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L436f46.  v3:= new `java.lang.Throwable`[v5];
  #L436f4a.  v3[v1]:= v4 @kind object;
  #L436f4e.  v3[v0]:= v10 @kind object;
  #L436f52.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L436f58.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436f5e.  return v1;
  catch `java.lang.Throwable` @[L436ea8..L436eb4] goto L436ec6;
  catch `java.lang.Throwable` @[L436ed0..L436efa] goto L436f34;
}
