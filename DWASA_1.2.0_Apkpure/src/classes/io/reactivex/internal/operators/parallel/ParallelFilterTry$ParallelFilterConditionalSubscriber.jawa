record `io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelFilterTry$BaseFilterSubscriber` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.downstream` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436dec.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$BaseFilterSubscriber;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L436df2.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L436df6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436e08.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L436e0c.  if v0 != 0 then goto L436e20;
  #L436e10.  v0:= 1I;
  #L436e12.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L436e16.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L436e1a.  call `onComplete`(v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onComplete:()V` @kind interface;
  #L436e20.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436e34.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L436e38.  if v0 == 0 then goto L436e44;
  #L436e3c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436e42.  return @kind void;
  #L436e44.  v0:= 1I;
  #L436e46.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L436e4a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L436e4e.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436e54.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436e68.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436e6c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L436e72.  v0:= temp;
  #L436e74.  if v0 == 0 then goto L436e86;
  #L436e78.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L436e7c.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L436e80.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L436e86.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L436cf4.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L436cf8.  v1:= 0I;
  #L436cfa.  if v0 != 0 then goto L436dc2;
  #L436cfe.  v2:= 0L;
  #L436d02.  v0:= 1I;
  #L436d04.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L436d08.  call temp:= `test`(v4, v10) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L436d0e.  v2:= temp;
  #L436d10.  if v2 == 0 then goto L436d26;
  #L436d14.  v2:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L436d18.  call temp:= `tryOnNext`(v2, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L436d1e.  v10:= temp;
  #L436d20.  if v10 == 0 then goto L436d26;
  #L436d24.  goto L436d28;
  #L436d26.  v0:= 0I;
  #L436d28.  return v0;
  #L436d2a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436d2c.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L436d32.  v5:= 2I;
  #L436d34.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L436d38.  v7:= 1L;
  #L436d3c.  v2:= v2 + v7 @kind long;
  #L436d3e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L436d44.  v7:= temp @kind object;
  #L436d46.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L436d4c.  v6:= temp @kind object;
  #L436d4e.  v7:= "The errorHandler returned a null item" @kind object;
  #L436d52.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L436d58.  v6:= temp @kind object;
  #L436d5a.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L436d5e.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelFilterTry$1.$SwitchMap$io$reactivex$parallel$ParallelFailureHandling` @type ^`int`[] @kind object;
  #L436d62.  call temp:= `ordinal`(v6) @signature `Lio/reactivex/parallel/ParallelFailureHandling;.ordinal:()I` @kind virtual;
  #L436d68.  v6:= temp;
  #L436d6a.  v6:= v7[v6];
  #L436d6e.  if v6 == v0 then goto L436d02;
  #L436d72.  if v6 == v5 then goto L436d96;
  #L436d76.  v10:= 3I;
  #L436d78.  if v6 == v10 then goto L436d8a;
  #L436d7c.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.cancel:()V` @kind virtual;
  #L436d82.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436d88.  return v1;
  #L436d8a.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.cancel:()V` @kind virtual;
  #L436d90.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.onComplete:()V` @kind virtual;
  #L436d96.  return v1;
  #L436d98.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436d9a.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L436da0.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.cancel:()V` @kind virtual;
  #L436da6.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L436daa.  v3:= new `java.lang.Throwable`[v5];
  #L436dae.  v3[v1]:= v4 @kind object;
  #L436db2.  v3[v0]:= v10 @kind object;
  #L436db6.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L436dbc.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$ParallelFilterConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436dc2.  return v1;
  catch `java.lang.Throwable` @[L436d04..L436d10] goto L436d2a;
  catch `java.lang.Throwable` @[L436d34..L436d5e] goto L436d98;
}
