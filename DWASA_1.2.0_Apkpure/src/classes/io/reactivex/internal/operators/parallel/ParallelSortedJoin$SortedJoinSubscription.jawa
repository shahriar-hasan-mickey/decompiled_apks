record `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @AccessFlag VOLATILE;
  `java.util.Comparator` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.comparator` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @AccessFlag FINAL;
  `int`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.indexes` @AccessFlag FINAL;
  `java.util.List`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.subscribers` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `java.util.Comparator` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/Comparator;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L439ec4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L439eca.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L439ece.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L439ed4.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L439ed8.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L439edc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L439ee2.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L439ee6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L439eea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L439ef0.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L439ef4.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L439ef8.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.comparator` @type ^`java.util.Comparator` := v4 @kind object;
  #L439efc.  v2:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`[v3];
  #L439f00.  v4:= 0I;
  #L439f02.  if v4 >= v3 then goto L439f1a;
  #L439f06.  v0:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`;
  #L439f0a.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;I)V` @kind direct;
  #L439f10.  v2[v4]:= v0 @kind object;
  #L439f14.  v4:= v4 + 1;
  #L439f18.  goto L439f02;
  #L439f1a.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`[] := v2 @kind object;
  #L439f1e.  v2:= new `java.util.List`[v3];
  #L439f22.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @type ^`java.util.List`[] := v2 @kind object;
  #L439f26.  v2:= new `int`[v3];
  #L439f2a.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.indexes` @type ^`int`[] := v2 @kind object;
  #L439f2e.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L439f32.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L439f38.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439f4c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L439f50.  if v0 != 0 then goto L439f78;
  #L439f54.  v0:= 1I;
  #L439f56.  v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L439f5a.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @kind virtual;
  #L439f60.  call temp:= `getAndIncrement`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.getAndIncrement:()I` @kind virtual;
  #L439f66.  v0:= temp;
  #L439f68.  if v0 != 0 then goto L439f78;
  #L439f6c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @type ^`java.util.List`[] @kind object;
  #L439f70.  v1:= 0I;
  #L439f72.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L439f78.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L439f8c.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`[] @kind object;
  #L439f90.  v1:= length @variable v0;
  #L439f92.  v2:= 0I;
  #L439f94.  if v2 >= v1 then goto L439fa8;
  #L439f98.  v3:= v0[v2] @kind object;
  #L439f9c.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinInnerSubscriber;.cancel:()V` @kind virtual;
  #L439fa2.  v2:= v2 + 1;
  #L439fa6.  goto L439f94;
  #L439fa8.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L439fbc.  v1:= v18 @kind object;
  #L439fc0.  call temp:= `getAndIncrement`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.getAndIncrement:()I` @kind virtual;
  #L439fc6.  v0:= temp;
  #L439fc8.  if v0 == 0 then goto L439fce;
  #L439fcc.  return @kind void;
  #L439fce.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L439fd2.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @type ^`java.util.List`[] @kind object;
  #L439fd6.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.indexes` @type ^`int`[] @kind object;
  #L439fda.  v4:= length @variable v0;
  #L439fdc.  v6:= 1I;
  #L439fde.  v7:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L439fe2.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L439fe8.  v7:= temp @kind wide;
  #L439fea.  v11:= 0L;
  #L439fee.  v14:= 0I;
  #L439ff0.  v15:= lcmp(v11, v7);
  #L439ff4.  if v15 == 0 then goto L43a100;
  #L439ff8.  v15:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L439ffc.  if v15 == 0 then goto L43a008;
  #L43a000.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L43a006.  return @kind void;
  #L43a008.  v15:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a00c.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a012.  v15:= temp @kind object;
  #L43a014.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L43a018.  if v15 == 0 then goto L43a030;
  #L43a01c.  call `cancelAll`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @kind virtual;
  #L43a022.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L43a028.  call `onError`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a02e.  return @kind void;
  #L43a030.  v15:= -1I;
  #L43a032.  v13:= v14 @kind object;
  #L43a034.  v15:= 0I;
  #L43a036.  v17:= -1I;
  #L43a03a.  if v15 >= v4 then goto L43a0d2;
  #L43a03e.  v9:= v3[v15] @kind object;
  #L43a042.  v10:= v0[v15];
  #L43a046.  call temp:= `size`(v9) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L43a04c.  v5:= temp;
  #L43a04e.  if v5 == v10 then goto L43a0cc;
  #L43a052.  if v13 != 0 then goto L43a066;
  #L43a056.  call temp:= `get`(v9, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L43a05c.  v5:= temp @kind object;
  #L43a05e.  v13:= v5 @kind object;
  #L43a060.  v17:= v15;
  #L43a064.  goto L43a0cc;
  #L43a066.  call temp:= `get`(v9, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L43a06c.  v5:= temp @kind object;
  #L43a06e.  v9:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.comparator` @type ^`java.util.Comparator` @kind object;
  #L43a072.  call temp:= `compare`(v9, v13, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L43a078.  v9:= temp;
  #L43a07a.  if v9 <= 0 then goto L43a082;
  #L43a07e.  v9:= 1I;
  #L43a080.  goto L43a084;
  #L43a082.  v9:= 0I;
  #L43a084.  if v9 == 0 then goto L43a0cc;
  #L43a088.  goto L43a05e;
  #L43a08a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43a08c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43a092.  call `cancelAll`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @kind virtual;
  #L43a098.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L43a09e.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a0a2.  call temp:= `compareAndSet`(v3, v14, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43a0a8.  v3:= temp;
  #L43a0aa.  if v3 != 0 then goto L43a0b4;
  #L43a0ae.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43a0b4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a0b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a0be.  v0:= temp @kind object;
  #L43a0c0.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L43a0c4.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a0ca.  return @kind void;
  #L43a0cc.  v15:= v15 + 1;
  #L43a0d0.  goto L43a03a;
  #L43a0d2.  if v13 != 0 then goto L43a0e4;
  #L43a0d6.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L43a0dc.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43a0e2.  return @kind void;
  #L43a0e4.  call `onNext`(v2, v13) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43a0ea.  v5:= v0[v17];
  #L43a0ee.  v9:= 1I;
  #L43a0f0.  v5:= v5 + v9 @kind int;
  #L43a0f2.  v0[v17]:= v5;
  #L43a0f6.  v13:= 1L;
  #L43a0fa.  v11:= v11 + v13 @kind long;
  #L43a0fc.  goto L439fee;
  #L43a100.  v9:= 1I;
  #L43a102.  v5:= lcmp(v11, v7);
  #L43a106.  if v5 != 0 then goto L43a17e;
  #L43a10a.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L43a10e.  if v5 == 0 then goto L43a11a;
  #L43a112.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L43a118.  return @kind void;
  #L43a11a.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a11e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a124.  v5:= temp @kind object;
  #L43a126.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L43a12a.  if v5 == 0 then goto L43a142;
  #L43a12e.  call `cancelAll`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @kind virtual;
  #L43a134.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L43a13a.  call `onError`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a140.  return @kind void;
  #L43a142.  v5:= 0I;
  #L43a144.  if v5 >= v4 then goto L43a168;
  #L43a148.  v10:= v0[v5];
  #L43a14c.  v13:= v3[v5] @kind object;
  #L43a150.  call temp:= `size`(v13) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L43a156.  v13:= temp;
  #L43a158.  if v10 == v13 then goto L43a162;
  #L43a15c.  v16:= 0I;
  #L43a160.  goto L43a16c;
  #L43a162.  v5:= v5 + 1;
  #L43a166.  goto L43a144;
  #L43a168.  v16:= 1I;
  #L43a16c.  if v16 == 0 then goto L43a17e;
  #L43a170.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L43a176.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43a17c.  return @kind void;
  #L43a17e.  v13:= 0L;
  #L43a182.  v5:= lcmp(v11, v13);
  #L43a186.  if v5 == 0 then goto L43a1a8;
  #L43a18a.  v13:= 9223372036854775807L;
  #L43a194.  v5:= lcmp(v7, v13);
  #L43a198.  if v5 == 0 then goto L43a1a8;
  #L43a19c.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43a1a0.  v7:= -v11 @kind long;
  #L43a1a2.  call temp:= `addAndGet`(v5, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43a1a8.  call temp:= `get`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.get:()I` @kind virtual;
  #L43a1ae.  v5:= temp;
  #L43a1b0.  if v5 != v6 then goto L43a1c4;
  #L43a1b4.  v5:= -v6 @kind int;
  #L43a1b6.  call temp:= `addAndGet`(v1, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.addAndGet:(I)I` @kind virtual;
  #L43a1bc.  v5:= temp;
  #L43a1be.  if v5 != 0 then goto L43a1c4;
  #L43a1c2.  return @kind void;
  #L43a1c4.  v6:= v5;
  #L43a1c6.  goto L439fde;
  catch `java.lang.Throwable` @[L43a06e..L43a07a] goto L43a08a;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43a1e8.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a1ec.  v1:= 0I;
  #L43a1ee.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43a1f4.  v0:= temp;
  #L43a1f6.  if v0 == 0 then goto L43a202;
  #L43a1fa.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.drain:()V` @kind virtual;
  #L43a200.  goto L43a218;
  #L43a202.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a206.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a20c.  v0:= temp @kind object;
  #L43a20e.  if v3 == v0 then goto L43a218;
  #L43a212.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43a218.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v1 @kind this, `java.util.List` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.innerNext:(Ljava/util/List;I)V` @AccessFlag  {
    temp;
    v0;

  #L43a22c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @type ^`java.util.List`[] @kind object;
  #L43a230.  v0[v3]:= v2 @kind object;
  #L43a234.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a238.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a23e.  v2:= temp;
  #L43a240.  if v2 != 0 then goto L43a24a;
  #L43a244.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.drain:()V` @kind virtual;
  #L43a24a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a25c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43a262.  v0:= temp;
  #L43a264.  if v0 == 0 then goto L43a288;
  #L43a268.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43a26c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43a272.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a276.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43a27c.  v2:= temp;
  #L43a27e.  if v2 != 0 then goto L43a288;
  #L43a282.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.drain:()V` @kind virtual;
  #L43a288.  return @kind void;
}
