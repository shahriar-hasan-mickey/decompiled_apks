record `io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelFilter$BaseFilterSubscriber` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.downstream` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436b2c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$BaseFilterSubscriber;.<init>:(Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L436b32.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L436b36.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436b48.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L436b4c.  if v0 != 0 then goto L436b60;
  #L436b50.  v0:= 1I;
  #L436b52.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L436b56.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436b5a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L436b60.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436b74.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L436b78.  if v0 == 0 then goto L436b84;
  #L436b7c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436b82.  return @kind void;
  #L436b84.  v0:= 1I;
  #L436b86.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L436b8a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436b8e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436b94.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436ba8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436bac.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L436bb2.  v0:= temp;
  #L436bb4.  if v0 == 0 then goto L436bc6;
  #L436bb8.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L436bbc.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436bc0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L436bc6.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436ad0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.done` @type ^`boolean` @kind boolean;
  #L436ad4.  v1:= 0I;
  #L436ad6.  if v0 != 0 then goto L436b0c;
  #L436ada.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.predicate` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L436ade.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L436ae4.  v0:= temp;
  #L436ae6.  if v0 == 0 then goto L436b0c;
  #L436aea.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$ParallelFilterSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436aee.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L436af4.  v3:= 1I;
  #L436af6.  return v3;
  #L436af8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436afa.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L436b00.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterSubscriber;.cancel:()V` @kind virtual;
  #L436b06.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$ParallelFilterSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436b0c.  return v1;
  catch `java.lang.Throwable` @[L436ada..L436ae6] goto L436af8;
}
