record `io.reactivex.internal.operators.parallel.ParallelMapTry` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelMapTry.errorHandler` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMapTry.mapper` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelMapTry.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMapTry` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L438b88.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L438b8e.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L438b92.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438b96.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L438b9a.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelMapTry` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438b68.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L438b6c.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L438b72.  v0:= temp;
  #L438b74.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelMapTry` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L438bac.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L438bb2.  v0:= temp;
  #L438bb4.  if v0 != 0 then goto L438bba;
  #L438bb8.  return @kind void;
  #L438bba.  v0:= length @variable v8;
  #L438bbc.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L438bc0.  v2:= 0I;
  #L438bc2.  if v2 >= v0 then goto L438c0a;
  #L438bc6.  v3:= v8[v2] @kind object;
  #L438bca.  v4:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L438bce.  if v4 == 0 then goto L438bee;
  #L438bd2.  v4:= new `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber`;
  #L438bd6.  v3:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L438bda.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L438bde.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L438be2.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTryConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L438be8.  v1[v2]:= v4 @kind object;
  #L438bec.  goto L438c04;
  #L438bee.  v4:= new `io.reactivex.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber`;
  #L438bf2.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L438bf6.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.errorHandler` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L438bfa.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$ParallelMapTrySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L438c00.  v1[v2]:= v4 @kind object;
  #L438c04.  v2:= v2 + 1;
  #L438c08.  goto L438bc2;
  #L438c0a.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L438c0e.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L438c14.  return @kind void;
}
