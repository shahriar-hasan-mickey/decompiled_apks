record `io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.done` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelPeek` `io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.upstream` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.parallel.ParallelPeek` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/parallel/ParallelPeek;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L438cdc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L438ce2.  v0.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L438ce6.  v0.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` := v2 @kind object;
  #L438cea.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438cfc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438d00.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.onCancel` @type ^`io.reactivex.functions.Action` @kind object;
  #L438d04.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L438d0a.  goto L438d1a;
  #L438d0c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438d0e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438d14.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438d1a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438d1e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L438d24.  return @kind void;
  catch `java.lang.Throwable` @[L438cfc..L438d0a] goto L438d0c;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438d44.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.done` @type ^`boolean` @kind boolean;
  #L438d48.  if v0 != 0 then goto L438d9c;
  #L438d4c.  v0:= 1I;
  #L438d4e.  v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L438d52.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438d56.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.onComplete` @type ^`io.reactivex.functions.Action` @kind object;
  #L438d5a.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L438d60.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438d64.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L438d6a.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438d6e.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.onAfterTerminated` @type ^`io.reactivex.functions.Action` @kind object;
  #L438d72.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L438d78.  goto L438d9c;
  #L438d7a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438d7c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438d82.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438d88.  goto L438d9c;
  #L438d8a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438d8c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438d92.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438d96.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L438d9c.  return @kind void;
  catch `java.lang.Throwable` @[L438d52..L438d60] goto L438d8a;
  catch `java.lang.Throwable` @[L438d6a..L438d78] goto L438d7a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L438dc8.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.done` @type ^`boolean` @kind boolean;
  #L438dcc.  if v0 == 0 then goto L438dd8;
  #L438dd0.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438dd6.  return @kind void;
  #L438dd8.  v0:= 1I;
  #L438dda.  v5.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L438dde.  v1:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438de2.  v1:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek.onError` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L438de6.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L438dec.  goto L438e12;
  #L438dee.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438df0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438df6.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L438dfa.  v3:= 2I;
  #L438dfc.  v3:= new `java.lang.Throwable`[v3];
  #L438e00.  v4:= 0I;
  #L438e02.  v3[v4]:= v6 @kind object;
  #L438e06.  v3[v0]:= v1 @kind object;
  #L438e0a.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L438e10.  v6:= v2 @kind object;
  #L438e12.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438e16.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L438e1c.  v6:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438e20.  v6:= v6.`io.reactivex.internal.operators.parallel.ParallelPeek.onAfterTerminated` @type ^`io.reactivex.functions.Action` @kind object;
  #L438e24.  call `run`(v6) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L438e2a.  goto L438e3a;
  #L438e2c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438e2e.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438e34.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438e3a.  return @kind void;
  catch `java.lang.Throwable` @[L438dde..L438dec] goto L438dee;
  catch `java.lang.Throwable` @[L438e1c..L438e2a] goto L438e2c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438e64.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.done` @type ^`boolean` @kind boolean;
  #L438e68.  if v0 != 0 then goto L438eb2;
  #L438e6c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438e70.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.onNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L438e74.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L438e7a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438e7e.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438e84.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438e88.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.onAfterNext` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L438e8c.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L438e92.  goto L438eb2;
  #L438e94.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438e96.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438e9c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438ea2.  goto L438eb2;
  #L438ea4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438ea6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438eac.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438eb2.  return @kind void;
  catch `java.lang.Throwable` @[L438e6c..L438e7a] goto L438ea4;
  catch `java.lang.Throwable` @[L438e84..L438e92] goto L438e94;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438edc.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438ee0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L438ee6.  v0:= temp;
  #L438ee8.  if v0 == 0 then goto L438f2c;
  #L438eec.  v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L438ef0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438ef4.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.onSubscribe` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L438ef8.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L438efe.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438f02.  call `onSubscribe`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L438f08.  goto L438f2c;
  #L438f0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438f0c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438f12.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L438f18.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438f1c.  v1:= `@@io.reactivex.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.internal.subscriptions.EmptySubscription` @kind object;
  #L438f20.  call `onSubscribe`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L438f26.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438f2c.  return @kind void;
  catch `java.lang.Throwable` @[L438ef0..L438efe] goto L438f0a;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$ParallelPeekSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438f4c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L438f50.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.onRequest` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L438f54.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/LongConsumer;.accept:(J)V` @kind interface;
  #L438f5a.  goto L438f6a;
  #L438f5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438f5e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438f64.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438f6a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$ParallelPeekSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438f6e.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L438f74.  return @kind void;
  catch `java.lang.Throwable` @[L438f4c..L438f5a] goto L438f5c;
}
