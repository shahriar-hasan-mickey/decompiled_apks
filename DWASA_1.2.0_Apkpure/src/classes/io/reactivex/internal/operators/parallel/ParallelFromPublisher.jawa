record `io.reactivex.internal.operators.parallel.ParallelFromPublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher.parallelism` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher.prefetch` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.parallel.ParallelFromPublisher.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L437904.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L43790a.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher.source` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L43790e.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher.parallelism` @type ^`int` := v2;
  #L437912.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher.prefetch` @type ^`int` := v3;
  #L437916.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4378ec.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher.parallelism` @type ^`int`;
  #L4378f0.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L437928.  call temp:= `validate`(v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L43792e.  v0:= temp;
  #L437930.  if v0 != 0 then goto L437936;
  #L437934.  return @kind void;
  #L437936.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L43793a.  v1:= new `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher`;
  #L43793e.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher.prefetch` @type ^`int`;
  #L437942.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.<init>:([Lorg/reactivestreams/Subscriber;I)V` @kind direct;
  #L437948.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43794e.  return @kind void;
}
