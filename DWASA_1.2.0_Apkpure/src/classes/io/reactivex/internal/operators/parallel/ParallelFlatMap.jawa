record `io.reactivex.internal.operators.parallel.ParallelFlatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFlatMap.delayError` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelFlatMap.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFlatMap.maxConcurrency` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFlatMap.prefetch` @AccessFlag FINAL;
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelFlatMap.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFlatMap` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFlatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ZII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4371c8.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4371ce.  v0.`io.reactivex.internal.operators.parallel.ParallelFlatMap.source` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L4371d2.  v0.`io.reactivex.internal.operators.parallel.ParallelFlatMap.mapper` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4371d6.  v0.`io.reactivex.internal.operators.parallel.ParallelFlatMap.delayError` @type ^`boolean` := v3 @kind boolean;
  #L4371da.  v0.`io.reactivex.internal.operators.parallel.ParallelFlatMap.maxConcurrency` @type ^`int` := v4;
  #L4371de.  v0.`io.reactivex.internal.operators.parallel.ParallelFlatMap.prefetch` @type ^`int` := v5;
  #L4371e2.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelFlatMap` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFlatMap;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4371a8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFlatMap.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L4371ac.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4371b2.  v0:= temp;
  #L4371b4.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelFlatMap` v8 @kind this, `org.reactivestreams.Subscriber`[] v9 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFlatMap;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4371f4.  call temp:= `validate`(v8, v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFlatMap;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4371fa.  v0:= temp;
  #L4371fc.  if v0 != 0 then goto L437202;
  #L437200.  return @kind void;
  #L437202.  v0:= length @variable v9;
  #L437204.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L437208.  v2:= 0I;
  #L43720a.  if v2 >= v0 then goto L437234;
  #L43720e.  v3:= v9[v2] @kind object;
  #L437212.  v4:= v8.`io.reactivex.internal.operators.parallel.ParallelFlatMap.mapper` @type ^`io.reactivex.functions.Function` @kind object;
  #L437216.  v5:= v8.`io.reactivex.internal.operators.parallel.ParallelFlatMap.delayError` @type ^`boolean` @kind boolean;
  #L43721a.  v6:= v8.`io.reactivex.internal.operators.parallel.ParallelFlatMap.maxConcurrency` @type ^`int`;
  #L43721e.  v7:= v8.`io.reactivex.internal.operators.parallel.ParallelFlatMap.prefetch` @type ^`int`;
  #L437222.  call temp:= `subscribe`(v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZII)Lio/reactivex/FlowableSubscriber;` @kind static;
  #L437228.  v3:= temp @kind object;
  #L43722a.  v1[v2]:= v3 @kind object;
  #L43722e.  v2:= v2 + 1;
  #L437232.  goto L43720a;
  #L437234.  v9:= v8.`io.reactivex.internal.operators.parallel.ParallelFlatMap.source` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L437238.  call `subscribe`(v9, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L43723e.  return @kind void;
}
