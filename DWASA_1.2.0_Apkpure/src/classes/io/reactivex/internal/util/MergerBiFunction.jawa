record `io.reactivex.internal.util.MergerBiFunction` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.functions.BiFunction` @kind interface {
  `java.util.Comparator` `io.reactivex.internal.util.MergerBiFunction.comparator` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.util.MergerBiFunction` v0 @kind this, `java.util.Comparator` v1 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L446734.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44673a.  v0.`io.reactivex.internal.util.MergerBiFunction.comparator` @type ^`java.util.Comparator` := v1 @kind object;
  #L44673e.  return @kind void;
}
procedure `java.lang.Object` `apply`(`io.reactivex.internal.util.MergerBiFunction` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4465f4.  v1:= (`java.util.List`) v1 @kind object;
  #L4465f8.  v2:= (`java.util.List`) v2 @kind object;
  #L4465fc.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/util/List;Ljava/util/List;)Ljava/util/List;` @kind virtual;
  #L446602.  v1:= temp @kind object;
  #L446604.  return v1 @kind object;
}
procedure `java.util.List` `apply`(`io.reactivex.internal.util.MergerBiFunction` v5 @kind this, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/util/List;Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L446618.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44661e.  v0:= temp;
  #L446620.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L446626.  v1:= temp;
  #L446628.  v0:= v0 + v1 @kind int;
  #L44662a.  if v0 != 0 then goto L44663a;
  #L44662e.  v6:= new `java.util.ArrayList`;
  #L446632.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L446638.  return v6 @kind object;
  #L44663a.  v1:= new `java.util.ArrayList`;
  #L44663e.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L446644.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44664a.  v6:= temp @kind object;
  #L44664c.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L446652.  v7:= temp @kind object;
  #L446654.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44665a.  v0:= temp;
  #L44665c.  v2:= 0I;
  #L44665e.  if v0 == 0 then goto L44666c;
  #L446662.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L446668.  v0:= temp @kind object;
  #L44666a.  goto L44666e;
  #L44666c.  v0:= v2 @kind object;
  #L44666e.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L446674.  v3:= temp;
  #L446676.  if v3 == 0 then goto L446684;
  #L44667a.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L446680.  v3:= temp @kind object;
  #L446682.  goto L446686;
  #L446684.  v3:= v2 @kind object;
  #L446686.  if v0 == 0 then goto L4466da;
  #L44668a.  if v3 == 0 then goto L4466da;
  #L44668e.  v4:= v5.`io.reactivex.internal.util.MergerBiFunction.comparator` @type ^`java.util.Comparator` @kind object;
  #L446692.  call temp:= `compare`(v4, v0, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L446698.  v4:= temp;
  #L44669a.  if v4 >= 0 then goto L4466be;
  #L44669e.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4466a4.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4466aa.  v0:= temp;
  #L4466ac.  if v0 == 0 then goto L4466ba;
  #L4466b0.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4466b6.  v0:= temp @kind object;
  #L4466b8.  goto L446686;
  #L4466ba.  v0:= v2 @kind object;
  #L4466bc.  goto L446686;
  #L4466be.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4466c4.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4466ca.  v3:= temp;
  #L4466cc.  if v3 == 0 then goto L446684;
  #L4466d0.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4466d6.  v3:= temp @kind object;
  #L4466d8.  goto L446686;
  #L4466da.  if v0 == 0 then goto L446700;
  #L4466de.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4466e4.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4466ea.  v7:= temp;
  #L4466ec.  if v7 == 0 then goto L446722;
  #L4466f0.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4466f6.  v7:= temp @kind object;
  #L4466f8.  call temp:= `add`(v1, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4466fe.  goto L4466e4;
  #L446700.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L446706.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44670c.  v6:= temp;
  #L44670e.  if v6 == 0 then goto L446722;
  #L446712.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L446718.  v6:= temp @kind object;
  #L44671a.  call temp:= `add`(v1, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L446720.  goto L446706;
  #L446722.  return v1 @kind object;
}
