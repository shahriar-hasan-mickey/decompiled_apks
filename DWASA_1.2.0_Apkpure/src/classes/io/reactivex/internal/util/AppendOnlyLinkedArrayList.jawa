record `io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind class @AccessFlag PUBLIC {
  `int` `io.reactivex.internal.util.AppendOnlyLinkedArrayList.capacity` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.util.AppendOnlyLinkedArrayList.head` @AccessFlag FINAL;
  `int` `io.reactivex.internal.util.AppendOnlyLinkedArrayList.offset` @AccessFlag ;
  `java.lang.Object`[] `io.reactivex.internal.util.AppendOnlyLinkedArrayList.tail` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L445424.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44542a.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.capacity` @type ^`int` := v1;
  #L44542e.  v1:= v1 + 1;
  #L445432.  v1:= new `java.lang.Object`[v1];
  #L445436.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] := v1 @kind object;
  #L44543a.  v1:= v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L44543e.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.tail` @type ^`java.lang.Object`[] := v1 @kind object;
  #L445442.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lio/reactivex/Observer;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44537c.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L445380.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.capacity` @type ^`int`;
  #L445384.  v2:= 0I;
  #L445386.  if v0 == 0 then goto L4453bc;
  #L44538a.  if v2 >= v1 then goto L4453ae;
  #L44538e.  v3:= v0[v2] @kind object;
  #L445392.  if v3 != 0 then goto L445398;
  #L445396.  goto L4453ae;
  #L445398.  call temp:= `acceptFull`(v3, v5) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L44539e.  v3:= temp;
  #L4453a0.  if v3 == 0 then goto L4453a8;
  #L4453a4.  v5:= 1I;
  #L4453a6.  return v5;
  #L4453a8.  v2:= v2 + 1;
  #L4453ac.  goto L44538a;
  #L4453ae.  v0:= v0[v1] @kind object;
  #L4453b2.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4453b6.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4453ba.  goto L445384;
  #L4453bc.  return v2;
}
procedure `boolean` `accept`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4453d0.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L4453d4.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.capacity` @type ^`int`;
  #L4453d8.  v2:= 0I;
  #L4453da.  if v0 == 0 then goto L445410;
  #L4453de.  if v2 >= v1 then goto L445402;
  #L4453e2.  v3:= v0[v2] @kind object;
  #L4453e6.  if v3 != 0 then goto L4453ec;
  #L4453ea.  goto L445402;
  #L4453ec.  call temp:= `acceptFull`(v3, v5) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L4453f2.  v3:= temp;
  #L4453f4.  if v3 == 0 then goto L4453fc;
  #L4453f8.  v5:= 1I;
  #L4453fa.  return v5;
  #L4453fc.  v2:= v2 + 1;
  #L445400.  goto L4453de;
  #L445402.  v0:= v0[v1] @kind object;
  #L445406.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L44540a.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L44540e.  goto L4453d8;
  #L445410.  return v2;
}
procedure `void` `add`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L445454.  v0:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.capacity` @type ^`int`;
  #L445458.  v1:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.offset` @type ^`int`;
  #L44545c.  if v1 != v0 then goto L445476;
  #L445460.  v1:= v0 + 1;
  #L445464.  v1:= new `java.lang.Object`[v1];
  #L445468.  v2:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.tail` @type ^`java.lang.Object`[] @kind object;
  #L44546c.  v2[v0]:= v1 @kind object;
  #L445470.  v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.tail` @type ^`java.lang.Object`[] := v1 @kind object;
  #L445474.  v1:= 0I;
  #L445476.  v0:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.tail` @type ^`java.lang.Object`[] @kind object;
  #L44547a.  v0[v1]:= v4 @kind object;
  #L44547e.  v1:= v1 + 1;
  #L445482.  v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.offset` @type ^`int` := v1;
  #L445486.  return @kind void;
}
procedure `void` `forEachWhile`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L445498.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L44549c.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.capacity` @type ^`int`;
  #L4454a0.  if v0 == 0 then goto L4454d6;
  #L4454a4.  v2:= 0I;
  #L4454a6.  if v2 >= v1 then goto L4454c8;
  #L4454aa.  v3:= v0[v2] @kind object;
  #L4454ae.  if v3 != 0 then goto L4454b4;
  #L4454b2.  goto L4454c8;
  #L4454b4.  call temp:= `test`(v5, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4454ba.  v3:= temp;
  #L4454bc.  if v3 == 0 then goto L4454c2;
  #L4454c0.  return @kind void;
  #L4454c2.  v2:= v2 + 1;
  #L4454c6.  goto L4454a6;
  #L4454c8.  v0:= v0[v1] @kind object;
  #L4454cc.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4454d0.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4454d4.  goto L4454a0;
  #L4454d6.  return @kind void;
}
procedure `void` `forEachWhile`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `java.lang.Object` v5 @kind object, `io.reactivex.functions.BiPredicate` v6 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Ljava/lang/Object;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4454e8.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L4454ec.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.capacity` @type ^`int`;
  #L4454f0.  v2:= 0I;
  #L4454f2.  if v2 >= v1 then goto L445514;
  #L4454f6.  v3:= v0[v2] @kind object;
  #L4454fa.  if v3 != 0 then goto L445500;
  #L4454fe.  return @kind void;
  #L445500.  call temp:= `test`(v6, v5, v3) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L445506.  v3:= temp;
  #L445508.  if v3 == 0 then goto L44550e;
  #L44550c.  return @kind void;
  #L44550e.  v2:= v2 + 1;
  #L445512.  goto L4454f2;
  #L445514.  v0:= v0[v1] @kind object;
  #L445518.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L44551c.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L445520.  goto L4454f0;
}
procedure `void` `setFirst`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L445534.  v0:= v2.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L445538.  v1:= 0I;
  #L44553a.  v0[v1]:= v3 @kind object;
  #L44553e.  return @kind void;
}
