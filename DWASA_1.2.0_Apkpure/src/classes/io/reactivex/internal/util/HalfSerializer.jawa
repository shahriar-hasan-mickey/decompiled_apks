record `io.reactivex.internal.util.HalfSerializer` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.util.HalfSerializer` v2 @kind this) @signature `Lio/reactivex/internal/util/HalfSerializer;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L446110.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L446116.  v0:= new `java.lang.IllegalStateException`;
  #L44611a.  v1:= "No instances!" @kind object;
  #L44611e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L446124.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.Observer` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L446138.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44613e.  v1:= temp;
  #L446140.  if v1 != 0 then goto L44615e;
  #L446144.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44614a.  v1:= temp @kind object;
  #L44614c.  if v1 == 0 then goto L446158;
  #L446150.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L446156.  goto L44615e;
  #L446158.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L44615e.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.Subscriber` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L446170.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L446176.  v1:= temp;
  #L446178.  if v1 != 0 then goto L446196;
  #L44617c.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L446182.  v1:= temp @kind object;
  #L446184.  if v1 == 0 then goto L446190;
  #L446188.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44618e.  goto L446196;
  #L446190.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L446196.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.Observer` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object, `io.reactivex.internal.util.AtomicThrowable` v4 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4461a8.  call temp:= `addThrowable`(v4, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4461ae.  v0:= temp;
  #L4461b0.  if v0 == 0 then goto L4461d0;
  #L4461b4.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4461ba.  v2:= temp;
  #L4461bc.  if v2 != 0 then goto L4461d6;
  #L4461c0.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4461c6.  v2:= temp @kind object;
  #L4461c8.  call `onError`(v1, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4461ce.  goto L4461d6;
  #L4461d0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4461d6.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object, `io.reactivex.internal.util.AtomicThrowable` v4 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4461e8.  call temp:= `addThrowable`(v4, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4461ee.  v0:= temp;
  #L4461f0.  if v0 == 0 then goto L446210;
  #L4461f4.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4461fa.  v2:= temp;
  #L4461fc.  if v2 != 0 then goto L446216;
  #L446200.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L446206.  v2:= temp @kind object;
  #L446208.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44620e.  goto L446216;
  #L446210.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L446216.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.Observer` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L446228.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44622e.  v0:= temp;
  #L446230.  if v0 != 0 then goto L446270;
  #L446234.  v0:= 0I;
  #L446236.  v1:= 1I;
  #L446238.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L44623e.  v0:= temp;
  #L446240.  if v0 == 0 then goto L446270;
  #L446244.  call `onNext`(v2, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44624a.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L446250.  v3:= temp;
  #L446252.  if v3 == 0 then goto L446270;
  #L446256.  call temp:= `terminate`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44625c.  v3:= temp @kind object;
  #L44625e.  if v3 == 0 then goto L44626a;
  #L446262.  call `onError`(v2, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L446268.  goto L446270;
  #L44626a.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L446270.  return @kind void;
}
procedure `void` `onNext`(`org.reactivestreams.Subscriber` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L446284.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44628a.  v0:= temp;
  #L44628c.  if v0 != 0 then goto L4462cc;
  #L446290.  v0:= 0I;
  #L446292.  v1:= 1I;
  #L446294.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L44629a.  v0:= temp;
  #L44629c.  if v0 == 0 then goto L4462cc;
  #L4462a0.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4462a6.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4462ac.  v3:= temp;
  #L4462ae.  if v3 == 0 then goto L4462cc;
  #L4462b2.  call temp:= `terminate`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4462b8.  v3:= temp @kind object;
  #L4462ba.  if v3 == 0 then goto L4462c6;
  #L4462be.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4462c4.  goto L4462cc;
  #L4462c6.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4462cc.  return @kind void;
}
