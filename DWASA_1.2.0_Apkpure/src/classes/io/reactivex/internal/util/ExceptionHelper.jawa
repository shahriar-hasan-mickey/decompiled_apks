record `io.reactivex.internal.util.ExceptionHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Throwable` `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/util/ExceptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4460c8.  v0:= new `io.reactivex.internal.util.ExceptionHelper$Termination`;
  #L4460cc.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper$Termination;.<init>:()V` @kind direct;
  #L4460d2.  `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4460d6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.ExceptionHelper` v2 @kind this) @signature `Lio/reactivex/internal/util/ExceptionHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4460e8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4460ee.  v0:= new `java.lang.IllegalStateException`;
  #L4460f2.  v1:= "No instances!" @kind object;
  #L4460f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4460fc.  throw v0;
}
procedure `boolean` `addThrowable`(`java.util.concurrent.atomic.AtomicReference` v5 @kind object, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L445f60.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L445f66.  v0:= temp @kind object;
  #L445f68.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L445f6c.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L445f70.  v2:= 0I;
  #L445f72.  if v0 != v1 then goto L445f78;
  #L445f76.  return v2;
  #L445f78.  v1:= 1I;
  #L445f7a.  if v0 != 0 then goto L445f82;
  #L445f7e.  v3:= v6 @kind object;
  #L445f80.  goto L445f9a;
  #L445f82.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L445f86.  v4:= 2I;
  #L445f88.  v4:= new `java.lang.Throwable`[v4];
  #L445f8c.  v4[v2]:= v0 @kind object;
  #L445f90.  v4[v1]:= v6 @kind object;
  #L445f94.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L445f9a.  call temp:= `compareAndSet`(v5, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L445fa0.  v0:= temp;
  #L445fa2.  if v0 == 0 then goto L445f60;
  #L445fa6.  return v1;
}
procedure `java.util.List` `flatten`(`java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.flatten:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L446044.  v0:= new `java.util.ArrayList`;
  #L446048.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L44604e.  v1:= new `java.util.ArrayDeque`;
  #L446052.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L446058.  call temp:= `offer`(v1, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L44605e.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L446064.  v4:= temp;
  #L446066.  if v4 != 0 then goto L4460b6;
  #L44606a.  call temp:= `removeFirst`(v1) @signature `Ljava/util/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L446070.  v4:= temp @kind object;
  #L446072.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L446076.  v2:= instanceof @variable v4 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L44607a.  if v2 == 0 then goto L4460ae;
  #L44607e.  v4:= (`io.reactivex.exceptions.CompositeException`) v4 @kind object;
  #L446082.  call temp:= `getExceptions`(v4) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L446088.  v4:= temp @kind object;
  #L44608a.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L446090.  v2:= temp;
  #L446092.  v2:= v2 + -1;
  #L446096.  if v2 < 0 then goto L44605e;
  #L44609a.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4460a0.  v3:= temp @kind object;
  #L4460a2.  call temp:= `offerFirst`(v1, v3) @signature `Ljava/util/ArrayDeque;.offerFirst:(Ljava/lang/Object;)Z` @kind virtual;
  #L4460a8.  v2:= v2 + -1;
  #L4460ac.  goto L446096;
  #L4460ae.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4460b4.  goto L44605e;
  #L4460b6.  return v0 @kind object;
}
procedure `java.lang.Throwable` `terminate`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L446010.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L446016.  v0:= temp @kind object;
  #L446018.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L44601c.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L446020.  if v0 == v1 then goto L446032;
  #L446024.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44602a.  v2:= temp @kind object;
  #L44602c.  v0:= v2 @kind object;
  #L44602e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L446032.  return v0 @kind object;
}
procedure `java.lang.Exception` `throwIfThrowable`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445fb8.  v0:= instanceof @variable v1 @type ^`java.lang.Exception` @kind boolean;
  #L445fbc.  if v0 == 0 then goto L445fc6;
  #L445fc0.  v1:= (`java.lang.Exception`) v1 @kind object;
  #L445fc4.  return v1 @kind object;
  #L445fc6.  throw v1;
}
procedure `java.lang.RuntimeException` `wrapOrThrow`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445fd8.  v0:= instanceof @variable v1 @type ^`java.lang.Error` @kind boolean;
  #L445fdc.  if v0 != 0 then goto L445ffa;
  #L445fe0.  v0:= instanceof @variable v1 @type ^`java.lang.RuntimeException` @kind boolean;
  #L445fe4.  if v0 == 0 then goto L445fee;
  #L445fe8.  v1:= (`java.lang.RuntimeException`) v1 @kind object;
  #L445fec.  return v1 @kind object;
  #L445fee.  v0:= new `java.lang.RuntimeException`;
  #L445ff2.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L445ff8.  return v0 @kind object;
  #L445ffa.  v1:= (`java.lang.Error`) v1 @kind object;
  #L445ffe.  throw v1;
}
