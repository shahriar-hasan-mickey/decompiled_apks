record `io.reactivex.internal.util.BackpressureHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.util.BackpressureHelper` v2 @kind this) @signature `Lio/reactivex/internal/util/BackpressureHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L445910.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L445916.  v0:= new `java.lang.IllegalStateException`;
  #L44591a.  v1:= "No instances!" @kind object;
  #L44591e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L445924.  throw v0;
}
procedure `long` `add`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L445700.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L445706.  v0:= temp @kind wide;
  #L445708.  v2:= 9223372036854775807L;
  #L445712.  v4:= lcmp(v0, v2);
  #L445716.  if v4 != 0 then goto L44571c;
  #L44571a.  return v2 @kind wide;
  #L44571c.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L445722.  v2:= temp @kind wide;
  #L445724.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44572a.  v2:= temp;
  #L44572c.  if v2 == 0 then goto L445700;
  #L445730.  return v0 @kind wide;
}
procedure `long` `addCancel`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L445744.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44574a.  v0:= temp @kind wide;
  #L44574c.  v2:= -9223372036854775808L;
  #L445750.  v4:= lcmp(v0, v2);
  #L445754.  if v4 != 0 then goto L44575a;
  #L445758.  return v2 @kind wide;
  #L44575a.  v2:= 9223372036854775807L;
  #L445764.  v4:= lcmp(v0, v2);
  #L445768.  if v4 != 0 then goto L44576e;
  #L44576c.  return v2 @kind wide;
  #L44576e.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L445774.  v2:= temp @kind wide;
  #L445776.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44577c.  v2:= temp;
  #L44577e.  if v2 == 0 then goto L445744;
  #L445782.  return v0 @kind wide;
}
procedure `long` `addCap`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445794.  v1:= v1 + v3 @kind long;
  #L445796.  v3:= 0L;
  #L44579a.  v0:= lcmp(v1, v3);
  #L44579e.  if v0 >= 0 then goto L4457ac;
  #L4457a2.  v1:= 9223372036854775807L;
  #L4457ac.  return v1 @kind wide;
}
procedure `long` `multiplyCap`(`long` v7 , `long` v9 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4457c0.  v0:= v7 * v9 @kind long;
  #L4457c4.  v2:= v7 ^| v9 @kind long;
  #L4457c8.  v4:= 31I;
  #L4457cc.  v2:= v2 ^>> v4 @kind long;
  #L4457ce.  v4:= 0L;
  #L4457d2.  v6:= lcmp(v2, v4);
  #L4457d6.  if v6 == 0 then goto L4457f2;
  #L4457da.  v7:= v0 / v7 @kind long;
  #L4457de.  v2:= lcmp(v7, v9);
  #L4457e2.  if v2 == 0 then goto L4457f2;
  #L4457e6.  v7:= 9223372036854775807L;
  #L4457f0.  return v7 @kind wide;
  #L4457f2.  return v0 @kind wide;
}
procedure `long` `produced`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L445804.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44580a.  v0:= temp @kind wide;
  #L44580c.  v2:= 9223372036854775807L;
  #L445816.  v4:= lcmp(v0, v2);
  #L44581a.  if v4 != 0 then goto L445820;
  #L44581e.  return v2 @kind wide;
  #L445820.  v2:= v0 - v10 @kind long;
  #L445824.  v4:= 0L;
  #L445828.  v6:= lcmp(v2, v4);
  #L44582c.  if v6 >= 0 then goto L445864;
  #L445830.  v6:= new `java.lang.IllegalStateException`;
  #L445834.  v7:= new `java.lang.StringBuilder`;
  #L445838.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44583e.  v8:= "More produced than requested: " @kind object;
  #L445842.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L445848.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L44584e.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L445854.  v2:= temp @kind object;
  #L445856.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44585c.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L445862.  v2:= v4 @kind wide;
  #L445864.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44586a.  v0:= temp;
  #L44586c.  if v0 == 0 then goto L445804;
  #L445870.  return v2 @kind wide;
}
procedure `long` `producedCancel`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L445884.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44588a.  v0:= temp @kind wide;
  #L44588c.  v2:= -9223372036854775808L;
  #L445890.  v4:= lcmp(v0, v2);
  #L445894.  if v4 != 0 then goto L44589a;
  #L445898.  return v2 @kind wide;
  #L44589a.  v2:= 9223372036854775807L;
  #L4458a4.  v4:= lcmp(v0, v2);
  #L4458a8.  if v4 != 0 then goto L4458ae;
  #L4458ac.  return v2 @kind wide;
  #L4458ae.  v2:= v0 - v10 @kind long;
  #L4458b2.  v4:= 0L;
  #L4458b6.  v6:= lcmp(v2, v4);
  #L4458ba.  if v6 >= 0 then goto L4458f2;
  #L4458be.  v6:= new `java.lang.IllegalStateException`;
  #L4458c2.  v7:= new `java.lang.StringBuilder`;
  #L4458c6.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4458cc.  v8:= "More produced than requested: " @kind object;
  #L4458d0.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4458d6.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4458dc.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4458e2.  v2:= temp @kind object;
  #L4458e4.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4458ea.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4458f0.  v2:= v4 @kind wide;
  #L4458f2.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4458f8.  v0:= temp;
  #L4458fa.  if v0 == 0 then goto L445884;
  #L4458fe.  return v2 @kind wide;
}
