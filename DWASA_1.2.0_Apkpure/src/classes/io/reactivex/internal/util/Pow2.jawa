record `io.reactivex.internal.util.Pow2` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.util.Pow2` v2 @kind this) @signature `Lio/reactivex/internal/util/Pow2;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L446f14.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L446f1a.  v0:= new `java.lang.IllegalStateException`;
  #L446f1e.  v1:= "No instances!" @kind object;
  #L446f22.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L446f28.  throw v0;
}
procedure `boolean` `isPowerOfTwo`(`int` v1 ) @signature `Lio/reactivex/internal/util/Pow2;.isPowerOfTwo:(I)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L446ec8.  v0:= v1 + -1;
  #L446ecc.  v1:= v1 ^& v0 @kind int;
  #L446ece.  if v1 != 0 then goto L446ed6;
  #L446ed2.  v1:= 1I;
  #L446ed4.  goto L446ed8;
  #L446ed6.  v1:= 0I;
  #L446ed8.  return v1;
}
procedure `int` `roundToPowerOfTwo`(`int` v1 ) @signature `Lio/reactivex/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L446eec.  v0:= 1I;
  #L446eee.  v1:= v1 - v0 @kind int;
  #L446ef0.  call temp:= `numberOfLeadingZeros`(v1) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L446ef6.  v1:= temp;
  #L446ef8.  v1:= v1 - 32;
  #L446efc.  v1:= v0 ^< v1 @kind int;
  #L446f00.  return v1;
}
