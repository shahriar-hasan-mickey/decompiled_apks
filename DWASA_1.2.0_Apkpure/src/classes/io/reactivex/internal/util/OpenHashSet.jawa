record `io.reactivex.internal.util.OpenHashSet` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object`[] `io.reactivex.internal.util.OpenHashSet.keys` @AccessFlag ;
  `float` `io.reactivex.internal.util.OpenHashSet.loadFactor` @AccessFlag FINAL;
  `int` `io.reactivex.internal.util.OpenHashSet.mask` @AccessFlag ;
  `int` `io.reactivex.internal.util.OpenHashSet.maxSize` @AccessFlag ;
  `int` `io.reactivex.internal.util.OpenHashSet.size` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.util.OpenHashSet.INT_PHI` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v2 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L446db4.  v0:= 16I;
  #L446db8.  v1:= 0.75F;
  #L446dbc.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L446dc2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L446dd4.  v0:= 0.75F;
  #L446dd8.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L446dde.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this, `int` v2 , `float` v3 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L446df0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L446df6.  v1.`io.reactivex.internal.util.OpenHashSet.loadFactor` @type ^`float` := v3;
  #L446dfa.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lio/reactivex/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L446e00.  v2:= temp;
  #L446e02.  v0:= v2 + -1;
  #L446e06.  v1.`io.reactivex.internal.util.OpenHashSet.mask` @type ^`int` := v0;
  #L446e0a.  v0:= (`float`) v2 @kind i2f;
  #L446e0c.  v3:= v3 * v0 @kind float;
  #L446e10.  v3:= (`int`) v3 @kind f2i;
  #L446e12.  v1.`io.reactivex.internal.util.OpenHashSet.maxSize` @type ^`int` := v3;
  #L446e16.  v2:= new `java.lang.Object`[v2];
  #L446e1a.  v2:= (`java.lang.Object`[]) v2 @kind object;
  #L446e1e.  v1.`io.reactivex.internal.util.OpenHashSet.keys` @type ^`java.lang.Object`[] := v2 @kind object;
  #L446e22.  return @kind void;
}
procedure `int` `mix`(`int` v1 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.mix:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L446d60.  v0:= -1640531527I;
  #L446d66.  v1:= v1 * v0 @kind int;
  #L446d6a.  v0:= v1 ^>> 16;
  #L446d6e.  v1:= v1 ^~ v0 @kind int;
  #L446d70.  return v1;
}
procedure `boolean` `add`(`io.reactivex.internal.util.OpenHashSet` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/util/OpenHashSet;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L446c04.  v0:= v6.`io.reactivex.internal.util.OpenHashSet.keys` @type ^`java.lang.Object`[] @kind object;
  #L446c08.  v1:= v6.`io.reactivex.internal.util.OpenHashSet.mask` @type ^`int`;
  #L446c0c.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L446c12.  v2:= temp;
  #L446c14.  call temp:= `mix`(v2) @signature `Lio/reactivex/internal/util/OpenHashSet;.mix:(I)I` @kind static;
  #L446c1a.  v2:= temp;
  #L446c1c.  v2:= v2 ^& v1 @kind int;
  #L446c1e.  v3:= v0[v2] @kind object;
  #L446c22.  v4:= 1I;
  #L446c24.  if v3 == 0 then goto L446c54;
  #L446c28.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L446c2e.  v3:= temp;
  #L446c30.  v5:= 0I;
  #L446c32.  if v3 == 0 then goto L446c38;
  #L446c36.  return v5;
  #L446c38.  v2:= v2 + v4 @kind int;
  #L446c3a.  v2:= v2 ^& v1 @kind int;
  #L446c3c.  v3:= v0[v2] @kind object;
  #L446c40.  if v3 != 0 then goto L446c46;
  #L446c44.  goto L446c54;
  #L446c46.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L446c4c.  v3:= temp;
  #L446c4e.  if v3 == 0 then goto L446c38;
  #L446c52.  return v5;
  #L446c54.  v0[v2]:= v7 @kind object;
  #L446c58.  v7:= v6.`io.reactivex.internal.util.OpenHashSet.size` @type ^`int`;
  #L446c5c.  v7:= v7 + v4 @kind int;
  #L446c5e.  v6.`io.reactivex.internal.util.OpenHashSet.size` @type ^`int` := v7;
  #L446c62.  v0:= v6.`io.reactivex.internal.util.OpenHashSet.maxSize` @type ^`int`;
  #L446c66.  if v7 < v0 then goto L446c70;
  #L446c6a.  call `rehash`(v6) @signature `Lio/reactivex/internal/util/OpenHashSet;.rehash:()V` @kind virtual;
  #L446c70.  return v4;
}
procedure `java.lang.Object`[] `keys`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.keys:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446d9c.  v0:= v1.`io.reactivex.internal.util.OpenHashSet.keys` @type ^`java.lang.Object`[] @kind object;
  #L446da0.  return v0 @kind object;
}
procedure `void` `rehash`(`io.reactivex.internal.util.OpenHashSet` v8 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.rehash:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L446e34.  v0:= v8.`io.reactivex.internal.util.OpenHashSet.keys` @type ^`java.lang.Object`[] @kind object;
  #L446e38.  v1:= length @variable v0;
  #L446e3a.  v2:= v1 ^< 1;
  #L446e3e.  v3:= v2 + -1;
  #L446e42.  v4:= new `java.lang.Object`[v2];
  #L446e46.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L446e4a.  v5:= v8.`io.reactivex.internal.util.OpenHashSet.size` @type ^`int`;
  #L446e4e.  v6:= v5 + -1;
  #L446e52.  if v5 == 0 then goto L446e9c;
  #L446e56.  v1:= v1 + -1;
  #L446e5a.  v5:= v0[v1] @kind object;
  #L446e5e.  if v5 != 0 then goto L446e64;
  #L446e62.  goto L446e56;
  #L446e64.  v5:= v0[v1] @kind object;
  #L446e68.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L446e6e.  v5:= temp;
  #L446e70.  call temp:= `mix`(v5) @signature `Lio/reactivex/internal/util/OpenHashSet;.mix:(I)I` @kind static;
  #L446e76.  v5:= temp;
  #L446e78.  v5:= v5 ^& v3 @kind int;
  #L446e7a.  v7:= v4[v5] @kind object;
  #L446e7e.  if v7 == 0 then goto L446e90;
  #L446e82.  v5:= v5 + 1;
  #L446e86.  v5:= v5 ^& v3 @kind int;
  #L446e88.  v7:= v4[v5] @kind object;
  #L446e8c.  if v7 != 0 then goto L446e82;
  #L446e90.  v7:= v0[v1] @kind object;
  #L446e94.  v4[v5]:= v7 @kind object;
  #L446e98.  v5:= v6;
  #L446e9a.  goto L446e4e;
  #L446e9c.  v8.`io.reactivex.internal.util.OpenHashSet.mask` @type ^`int` := v3;
  #L446ea0.  v0:= (`float`) v2 @kind i2f;
  #L446ea2.  v1:= v8.`io.reactivex.internal.util.OpenHashSet.loadFactor` @type ^`float`;
  #L446ea6.  v0:= v0 * v1 @kind float;
  #L446eaa.  v0:= (`int`) v0 @kind f2i;
  #L446eac.  v8.`io.reactivex.internal.util.OpenHashSet.maxSize` @type ^`int` := v0;
  #L446eb0.  v8.`io.reactivex.internal.util.OpenHashSet.keys` @type ^`java.lang.Object`[] := v4 @kind object;
  #L446eb4.  return @kind void;
}
procedure `boolean` `remove`(`io.reactivex.internal.util.OpenHashSet` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/util/OpenHashSet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L446c84.  v0:= v5.`io.reactivex.internal.util.OpenHashSet.keys` @type ^`java.lang.Object`[] @kind object;
  #L446c88.  v1:= v5.`io.reactivex.internal.util.OpenHashSet.mask` @type ^`int`;
  #L446c8c.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L446c92.  v2:= temp;
  #L446c94.  call temp:= `mix`(v2) @signature `Lio/reactivex/internal/util/OpenHashSet;.mix:(I)I` @kind static;
  #L446c9a.  v2:= temp;
  #L446c9c.  v2:= v2 ^& v1 @kind int;
  #L446c9e.  v3:= v0[v2] @kind object;
  #L446ca2.  v4:= 0I;
  #L446ca4.  if v3 != 0 then goto L446caa;
  #L446ca8.  return v4;
  #L446caa.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L446cb0.  v3:= temp;
  #L446cb2.  if v3 == 0 then goto L446cc0;
  #L446cb6.  call temp:= `removeEntry`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.removeEntry:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L446cbc.  v6:= temp;
  #L446cbe.  return v6;
  #L446cc0.  v2:= v2 + 1;
  #L446cc4.  v2:= v2 ^& v1 @kind int;
  #L446cc6.  v3:= v0[v2] @kind object;
  #L446cca.  if v3 != 0 then goto L446cd0;
  #L446cce.  return v4;
  #L446cd0.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L446cd6.  v3:= temp;
  #L446cd8.  if v3 == 0 then goto L446cc0;
  #L446cdc.  call temp:= `removeEntry`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.removeEntry:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L446ce2.  v6:= temp;
  #L446ce4.  return v6;
}
procedure `boolean` `removeEntry`(`io.reactivex.internal.util.OpenHashSet` v4 @kind this, `int` v5 , `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.removeEntry:(I[Ljava/lang/Object;I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L446cf8.  v0:= v4.`io.reactivex.internal.util.OpenHashSet.size` @type ^`int`;
  #L446cfc.  v1:= 1I;
  #L446cfe.  v0:= v0 - v1 @kind int;
  #L446d00.  v4.`io.reactivex.internal.util.OpenHashSet.size` @type ^`int` := v0;
  #L446d04.  v0:= v5 + 1;
  #L446d08.  v0:= v0 ^& v7 @kind int;
  #L446d0a.  v2:= v6[v0] @kind object;
  #L446d0e.  if v2 != 0 then goto L446d1a;
  #L446d12.  v7:= 0I;
  #L446d14.  v6[v5]:= v7 @kind object;
  #L446d18.  return v1;
  #L446d1a.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L446d20.  v3:= temp;
  #L446d22.  call temp:= `mix`(v3) @signature `Lio/reactivex/internal/util/OpenHashSet;.mix:(I)I` @kind static;
  #L446d28.  v3:= temp;
  #L446d2a.  v3:= v3 ^& v7 @kind int;
  #L446d2c.  if v5 > v0 then goto L446d3a;
  #L446d30.  if v5 >= v3 then goto L446d42;
  #L446d34.  if v3 <= v0 then goto L446d4a;
  #L446d38.  goto L446d42;
  #L446d3a.  if v5 < v3 then goto L446d4a;
  #L446d3e.  if v3 <= v0 then goto L446d4a;
  #L446d42.  v6[v5]:= v2 @kind object;
  #L446d46.  v5:= v0;
  #L446d48.  goto L446d04;
  #L446d4a.  v0:= v0 + 1;
  #L446d4e.  goto L446d08;
}
procedure `int` `size`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446d84.  v0:= v1.`io.reactivex.internal.util.OpenHashSet.size` @type ^`int`;
  #L446d88.  return v0;
}
