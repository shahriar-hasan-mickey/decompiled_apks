record `io.reactivex.internal.util.LinkedArrayList` @kind class @AccessFlag PUBLIC {
  `int` `io.reactivex.internal.util.LinkedArrayList.capacityHint` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.util.LinkedArrayList.head` @AccessFlag ;
  `int` `io.reactivex.internal.util.LinkedArrayList.indexInTail` @AccessFlag ;
  `int` `io.reactivex.internal.util.LinkedArrayList.size` @AccessFlag VOLATILE;
  `java.lang.Object`[] `io.reactivex.internal.util.LinkedArrayList.tail` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.LinkedArrayList` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/util/LinkedArrayList;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L446460.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L446466.  v0.`io.reactivex.internal.util.LinkedArrayList.capacityHint` @type ^`int` := v1;
  #L44646a.  return @kind void;
}
procedure `void` `add`(`io.reactivex.internal.util.LinkedArrayList` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/util/LinkedArrayList;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44647c.  v0:= v4.`io.reactivex.internal.util.LinkedArrayList.size` @type ^`int`;
  #L446480.  v1:= 0I;
  #L446482.  v2:= 1I;
  #L446484.  if v0 != 0 then goto L4464ac;
  #L446488.  v0:= v4.`io.reactivex.internal.util.LinkedArrayList.capacityHint` @type ^`int`;
  #L44648c.  v0:= v0 + v2 @kind int;
  #L44648e.  v0:= new `java.lang.Object`[v0];
  #L446492.  v4.`io.reactivex.internal.util.LinkedArrayList.head` @type ^`java.lang.Object`[] := v0 @kind object;
  #L446496.  v0:= v4.`io.reactivex.internal.util.LinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L44649a.  v4.`io.reactivex.internal.util.LinkedArrayList.tail` @type ^`java.lang.Object`[] := v0 @kind object;
  #L44649e.  v0[v1]:= v5 @kind object;
  #L4464a2.  v4.`io.reactivex.internal.util.LinkedArrayList.indexInTail` @type ^`int` := v2;
  #L4464a6.  v4.`io.reactivex.internal.util.LinkedArrayList.size` @type ^`int` := v2;
  #L4464aa.  goto L4464f8;
  #L4464ac.  v0:= v4.`io.reactivex.internal.util.LinkedArrayList.indexInTail` @type ^`int`;
  #L4464b0.  v3:= v4.`io.reactivex.internal.util.LinkedArrayList.capacityHint` @type ^`int`;
  #L4464b4.  if v0 != v3 then goto L4464e0;
  #L4464b8.  v0:= v3 + 1;
  #L4464bc.  v0:= new `java.lang.Object`[v0];
  #L4464c0.  v0[v1]:= v5 @kind object;
  #L4464c4.  v5:= v4.`io.reactivex.internal.util.LinkedArrayList.tail` @type ^`java.lang.Object`[] @kind object;
  #L4464c8.  v5[v3]:= v0 @kind object;
  #L4464cc.  v4.`io.reactivex.internal.util.LinkedArrayList.tail` @type ^`java.lang.Object`[] := v0 @kind object;
  #L4464d0.  v4.`io.reactivex.internal.util.LinkedArrayList.indexInTail` @type ^`int` := v2;
  #L4464d4.  v5:= v4.`io.reactivex.internal.util.LinkedArrayList.size` @type ^`int`;
  #L4464d8.  v5:= v5 + v2 @kind int;
  #L4464da.  v4.`io.reactivex.internal.util.LinkedArrayList.size` @type ^`int` := v5;
  #L4464de.  goto L4464f8;
  #L4464e0.  v1:= v4.`io.reactivex.internal.util.LinkedArrayList.tail` @type ^`java.lang.Object`[] @kind object;
  #L4464e4.  v1[v0]:= v5 @kind object;
  #L4464e8.  v0:= v0 + v2 @kind int;
  #L4464ea.  v4.`io.reactivex.internal.util.LinkedArrayList.indexInTail` @type ^`int` := v0;
  #L4464ee.  v5:= v4.`io.reactivex.internal.util.LinkedArrayList.size` @type ^`int`;
  #L4464f2.  v5:= v5 + v2 @kind int;
  #L4464f4.  v4.`io.reactivex.internal.util.LinkedArrayList.size` @type ^`int` := v5;
  #L4464f8.  return @kind void;
}
procedure `java.lang.Object`[] `head`(`io.reactivex.internal.util.LinkedArrayList` v1 @kind this) @signature `Lio/reactivex/internal/util/LinkedArrayList;.head:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4463e0.  v0:= v1.`io.reactivex.internal.util.LinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L4463e4.  return v0 @kind object;
}
procedure `int` `size`(`io.reactivex.internal.util.LinkedArrayList` v1 @kind this) @signature `Lio/reactivex/internal/util/LinkedArrayList;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4463c8.  v0:= v1.`io.reactivex.internal.util.LinkedArrayList.size` @type ^`int`;
  #L4463cc.  return v0;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.util.LinkedArrayList` v8 @kind this) @signature `Lio/reactivex/internal/util/LinkedArrayList;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4463f8.  v0:= v8.`io.reactivex.internal.util.LinkedArrayList.capacityHint` @type ^`int`;
  #L4463fc.  v1:= v8.`io.reactivex.internal.util.LinkedArrayList.size` @type ^`int`;
  #L446400.  v2:= new `java.util.ArrayList`;
  #L446404.  v3:= v1 + 1;
  #L446408.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L44640e.  call temp:= `head`(v8) @signature `Lio/reactivex/internal/util/LinkedArrayList;.head:()[Ljava/lang/Object;` @kind virtual;
  #L446414.  v3:= temp @kind object;
  #L446416.  v4:= 0I;
  #L446418.  v5:= v3 @kind object;
  #L44641a.  v3:= 0I;
  #L44641c.  v6:= 0I;
  #L44641e.  if v3 >= v1 then goto L446446;
  #L446422.  v7:= v5[v6] @kind object;
  #L446426.  call temp:= `add`(v2, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44642c.  v3:= v3 + 1;
  #L446430.  v6:= v6 + 1;
  #L446434.  if v6 != v0 then goto L44641e;
  #L446438.  v5:= v5[v0] @kind object;
  #L44643c.  v5:= (`java.lang.Object`[]) v5 @kind object;
  #L446440.  v5:= (`java.lang.Object`[]) v5 @kind object;
  #L446444.  goto L44641c;
  #L446446.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L44644c.  v0:= temp @kind object;
  #L44644e.  return v0 @kind object;
}
