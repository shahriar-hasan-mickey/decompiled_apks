record `io.reactivex.internal.schedulers.SingleScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.SingleScheduler.executor` @AccessFlag FINAL;
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.SingleScheduler.threadFactory` @AccessFlag FINAL;
}
global `java.lang.String` `@@io.reactivex.internal.schedulers.SingleScheduler.KEY_SINGLE_PRIORITY` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ScheduledExecutorService` `@@io.reactivex.internal.schedulers.SingleScheduler.SHUTDOWN` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.SingleScheduler.SINGLE_THREAD_FACTORY` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@io.reactivex.internal.schedulers.SingleScheduler.THREAD_NAME_PREFIX` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L442134.  v0:= 0I;
  #L442136.  call temp:= `newScheduledThreadPool`(v0) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(I)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L44213c.  v0:= temp @kind object;
  #L44213e.  `@@io.reactivex.internal.schedulers.SingleScheduler.SHUTDOWN` @type ^`java.util.concurrent.ScheduledExecutorService` := v0 @kind object;
  #L442142.  v0:= `@@io.reactivex.internal.schedulers.SingleScheduler.SHUTDOWN` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L442146.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L44214c.  v0:= "rx2.single-priority" @kind object;
  #L442150.  v1:= 5I;
  #L442152.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L442158.  v0:= temp @kind object;
  #L44215a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L442160.  v0:= temp;
  #L442162.  v1:= 10I;
  #L442166.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L44216c.  v0:= temp;
  #L44216e.  v1:= 1I;
  #L442170.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L442176.  v0:= temp;
  #L442178.  v2:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L44217c.  v3:= "RxSingleScheduler" @kind object;
  #L442180.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L442186.  `@@io.reactivex.internal.schedulers.SingleScheduler.SINGLE_THREAD_FACTORY` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v2 @kind object;
  #L44218a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SingleScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44219c.  v0:= `@@io.reactivex.internal.schedulers.SingleScheduler.SINGLE_THREAD_FACTORY` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L4421a0.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4421a6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SingleScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4421b8.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L4421be.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4421c2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4421c8.  v1.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4421cc.  v1.`io.reactivex.internal.schedulers.SingleScheduler.threadFactory` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L4421d0.  v0:= v1.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4421d4.  call temp:= `createExecutor`(v2) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.createExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L4421da.  v2:= temp @kind object;
  #L4421dc.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4421e2.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `createExecutor`(`java.util.concurrent.ThreadFactory` v0 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.createExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag STATIC {
    temp;

  #L442118.  call temp:= `create`(v0) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.create:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L44211e.  v0:= temp @kind object;
  #L442120.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.SingleScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441f98.  v0:= new `io.reactivex.internal.schedulers.SingleScheduler$ScheduledWorker`;
  #L441f9c.  v1:= v2.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441fa0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441fa6.  v1:= temp @kind object;
  #L441fa8.  v1:= (`java.util.concurrent.ScheduledExecutorService`) v1 @kind object;
  #L441fac.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/SingleScheduler$ScheduledWorker;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;)V` @kind direct;
  #L441fb2.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `scheduleDirect`(`io.reactivex.internal.schedulers.SingleScheduler` v3 @kind this, `java.lang.Runnable` v4 @kind object, `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L441fc4.  v0:= new `io.reactivex.internal.schedulers.ScheduledDirectTask`;
  #L441fc8.  call temp:= `onSchedule`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L441fce.  v4:= temp @kind object;
  #L441fd0.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L441fd6.  v1:= 0L;
  #L441fda.  v4:= lcmp(v5, v1);
  #L441fde.  if v4 > 0 then goto L441ffc;
  #L441fe2.  v4:= v3.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441fe6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441fec.  v4:= temp @kind object;
  #L441fee.  v4:= (`java.util.concurrent.ScheduledExecutorService`) v4 @kind object;
  #L441ff2.  call temp:= `submit`(v4, v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L441ff8.  v4:= temp @kind object;
  #L441ffa.  goto L442014;
  #L441ffc.  v4:= v3.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442000.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L442006.  v4:= temp @kind object;
  #L442008.  v4:= (`java.util.concurrent.ScheduledExecutorService`) v4 @kind object;
  #L44200c.  call temp:= `schedule`(v4, v0, v5, v7) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L442012.  v4:= temp @kind object;
  #L442014.  call `setFuture`(v0, v4) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L44201a.  return v0 @kind object;
  #L44201c.  v4:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L44201e.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442024.  v4:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L442028.  return v4 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L441fe2..L44201a] goto L44201c;
}
procedure `io.reactivex.disposables.Disposable` `schedulePeriodicallyDirect`(`io.reactivex.internal.schedulers.SingleScheduler` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L44204c.  call temp:= `onSchedule`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L442052.  v9:= temp @kind object;
  #L442054.  v0:= 0L;
  #L442058.  v2:= lcmp(v12, v0);
  #L44205c.  if v2 > 0 then goto L4420aa;
  #L442060.  v12:= v8.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442064.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44206a.  v12:= temp @kind object;
  #L44206c.  v12:= (`java.util.concurrent.ScheduledExecutorService`) v12 @kind object;
  #L442070.  v13:= new `io.reactivex.internal.schedulers.InstantPeriodicTask`;
  #L442074.  call `<init>`(v13, v9, v12) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.<init>:(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;)V` @kind direct;
  #L44207a.  v9:= lcmp(v10, v0);
  #L44207e.  if v9 > 0 then goto L44208c;
  #L442082.  call temp:= `submit`(v12, v13) @signature `Ljava/util/concurrent/ScheduledExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L442088.  v9:= temp @kind object;
  #L44208a.  goto L442094;
  #L44208c.  call temp:= `schedule`(v12, v13, v10, v14) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L442092.  v9:= temp @kind object;
  #L442094.  call `setFirst`(v13, v9) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.setFirst:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L44209a.  return v13 @kind object;
  #L44209c.  v9:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L44209e.  call `onError`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4420a4.  v9:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4420a8.  return v9 @kind object;
  #L4420aa.  v7:= new `io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask`;
  #L4420ae.  call `<init>`(v7, v9) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L4420b4.  v9:= v8.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4420b8.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4420be.  v9:= temp @kind object;
  #L4420c0.  v0:= v9 @kind object;
  #L4420c2.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L4420c6.  v1:= v7 @kind object;
  #L4420c8.  v2:= v10 @kind wide;
  #L4420ca.  v4:= v12 @kind wide;
  #L4420cc.  v6:= v14 @kind object;
  #L4420ce.  call temp:= `scheduleAtFixedRate`(v0, v1, v2, v4, v6) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L4420d4.  v9:= temp @kind object;
  #L4420d6.  call `setFuture`(v7, v9) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L4420dc.  return v7 @kind object;
  #L4420de.  v9:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L4420e0.  call `onError`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4420e6.  v9:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4420ea.  return v9 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L442082..L44209a] goto L44209c;
  catch `java.util.concurrent.RejectedExecutionException` @[L4420b4..L4420dc] goto L4420de;
}
procedure `void` `shutdown`(`io.reactivex.internal.schedulers.SingleScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4421f4.  v0:= v2.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4421f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4421fe.  v0:= temp @kind object;
  #L442200.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L442204.  v1:= `@@io.reactivex.internal.schedulers.SingleScheduler.SHUTDOWN` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L442208.  if v0 == v1 then goto L44222a;
  #L44220c.  v0:= v2.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442210.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L442216.  v0:= temp @kind object;
  #L442218.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L44221c.  v1:= `@@io.reactivex.internal.schedulers.SingleScheduler.SHUTDOWN` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L442220.  if v0 == v1 then goto L44222a;
  #L442224.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L44222a.  return @kind void;
}
procedure `void` `start`(`io.reactivex.internal.schedulers.SingleScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44223c.  v0:= 0I;
  #L44223e.  v1:= v3.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442242.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L442248.  v1:= temp @kind object;
  #L44224a.  v1:= (`java.util.concurrent.ScheduledExecutorService`) v1 @kind object;
  #L44224e.  v2:= `@@io.reactivex.internal.schedulers.SingleScheduler.SHUTDOWN` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L442252.  if v1 == v2 then goto L442262;
  #L442256.  if v0 == 0 then goto L442260;
  #L44225a.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L442260.  return @kind void;
  #L442262.  if v0 != 0 then goto L442272;
  #L442266.  v0:= v3.`io.reactivex.internal.schedulers.SingleScheduler.threadFactory` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L44226a.  call temp:= `createExecutor`(v0) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.createExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L442270.  v0:= temp @kind object;
  #L442272.  v2:= v3.`io.reactivex.internal.schedulers.SingleScheduler.executor` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442276.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44227c.  v1:= temp;
  #L44227e.  if v1 == 0 then goto L44223e;
  #L442282.  return @kind void;
}
