record `io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.execTime` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.run` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.schedulers.TrampolineScheduler$TrampolineWorker` `io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.worker` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.internal.schedulers.TrampolineScheduler$TrampolineWorker` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$SleepingRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/schedulers/TrampolineScheduler$TrampolineWorker;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442294.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44229a.  v0.`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.run` @type ^`java.lang.Runnable` := v1 @kind object;
  #L44229e.  v0.`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.worker` @type ^`io.reactivex.internal.schedulers.TrampolineScheduler$TrampolineWorker` := v2 @kind object;
  #L4422a2.  v0.`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.execTime` @type ^`long` := v3 @kind wide;
  #L4422a6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$SleepingRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4422b8.  v0:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.worker` @type ^`io.reactivex.internal.schedulers.TrampolineScheduler$TrampolineWorker` @kind object;
  #L4422bc.  v0:= v0.`io.reactivex.internal.schedulers.TrampolineScheduler$TrampolineWorker.disposed` @type ^`boolean` @kind boolean;
  #L4422c0.  if v0 != 0 then goto L442318;
  #L4422c4.  v0:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.worker` @type ^`io.reactivex.internal.schedulers.TrampolineScheduler$TrampolineWorker` @kind object;
  #L4422c8.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4422cc.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$TrampolineWorker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4422d2.  v0:= temp @kind wide;
  #L4422d4.  v2:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.execTime` @type ^`long` @kind wide;
  #L4422d8.  v4:= lcmp(v2, v0);
  #L4422dc.  if v4 <= 0 then goto L442302;
  #L4422e0.  v2:= v2 - v0 @kind long;
  #L4422e2.  call `sleep`(v2) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L4422e8.  goto L442302;
  #L4422ea.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4422ec.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4422f2.  v1:= temp @kind object;
  #L4422f4.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L4422fa.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442300.  return @kind void;
  #L442302.  v0:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.worker` @type ^`io.reactivex.internal.schedulers.TrampolineScheduler$TrampolineWorker` @kind object;
  #L442306.  v0:= v0.`io.reactivex.internal.schedulers.TrampolineScheduler$TrampolineWorker.disposed` @type ^`boolean` @kind boolean;
  #L44230a.  if v0 != 0 then goto L442318;
  #L44230e.  v0:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$SleepingRunnable.run` @type ^`java.lang.Runnable` @kind object;
  #L442312.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L442318.  return @kind void;
  catch `java.lang.InterruptedException` @[L4422e2..L4422e8] goto L4422ea;
}
