record `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable.actual` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4400a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4400a6.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable.actual` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4400aa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4400bc.  v0:= 1I;
  #L4400be.  call `lazySet`(v1, v0) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.lazySet:(Z)V` @kind virtual;
  #L4400c4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440084.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.get:()Z` @kind virtual;
  #L44008a.  v0:= temp;
  #L44008c.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4400d8.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.get:()Z` @kind virtual;
  #L4400de.  v0:= temp;
  #L4400e0.  if v0 == 0 then goto L4400e6;
  #L4400e4.  return @kind void;
  #L4400e6.  v0:= 1I;
  #L4400e8.  v1:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$BooleanRunnable.actual` @type ^`java.lang.Runnable` @kind object;
  #L4400ec.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4400f2.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.lazySet:(Z)V` @kind virtual;
  #L4400f8.  return @kind void;
  #L4400fa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4400fc.  call `lazySet`(v2, v0) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$BooleanRunnable;.lazySet:(Z)V` @kind virtual;
  #L440102.  throw v1;
  catch `java.lang.Throwable` @[L4400e8..L4400f2] goto L4400fa;
}
