record `io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L441c84.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441c88.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L441c8e.  return @kind void;
}
procedure `void` `call`(`io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` v2 @kind this, `io.reactivex.Scheduler$Worker` v3 @kind object, `io.reactivex.CompletableObserver` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.call:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L441ca0.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.get:()Ljava/lang/Object;` @kind virtual;
  #L441ca6.  v0:= temp @kind object;
  #L441ca8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L441cac.  v1:= `@@io.reactivex.internal.schedulers.SchedulerWhen.DISPOSED` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441cb0.  if v0 != v1 then goto L441cb6;
  #L441cb4.  return @kind void;
  #L441cb6.  v1:= `@@io.reactivex.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441cba.  if v0 == v1 then goto L441cc0;
  #L441cbe.  return @kind void;
  #L441cc0.  call temp:= `callActual`(v2, v3, v4) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.callActual:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L441cc6.  v3:= temp @kind object;
  #L441cc8.  v4:= `@@io.reactivex.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441ccc.  call temp:= `compareAndSet`(v2, v4, v3) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L441cd2.  v4:= temp;
  #L441cd4.  if v4 != 0 then goto L441cde;
  #L441cd8.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L441cde.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `callActual`(`io.reactivex.Scheduler$Worker` v0 @kind object, `io.reactivex.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.callActual:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)Lio/reactivex/disposables/Disposable;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L441cf0.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.DISPOSED` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441cf4.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.get:()Ljava/lang/Object;` @kind virtual;
  #L441cfa.  v1:= temp @kind object;
  #L441cfc.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L441d00.  v2:= `@@io.reactivex.internal.schedulers.SchedulerWhen.DISPOSED` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441d04.  if v1 != v2 then goto L441d0a;
  #L441d08.  return @kind void;
  #L441d0a.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L441d10.  v2:= temp;
  #L441d12.  if v2 == 0 then goto L441cf4;
  #L441d16.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441d1a.  if v1 == v0 then goto L441d24;
  #L441d1e.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L441d24.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441c5c.  call temp:= `get`(v1) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.get:()Ljava/lang/Object;` @kind virtual;
  #L441c62.  v0:= temp @kind object;
  #L441c64.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L441c68.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L441c6e.  v0:= temp;
  #L441c70.  return v0;
}
