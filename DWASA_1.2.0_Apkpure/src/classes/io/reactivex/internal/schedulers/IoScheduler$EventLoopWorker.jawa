record `io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.once` @AccessFlag FINAL;
  `io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool` `io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.pool` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.tasks` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.schedulers.IoScheduler$ThreadWorker` `io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.threadWorker` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker` v1 @kind this, `io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/IoScheduler$EventLoopWorker;.<init>:(Lio/reactivex/internal/schedulers/IoScheduler$CachedWorkerPool;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L440be0.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L440be6.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L440bea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L440bf0.  v1.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L440bf4.  v1.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.pool` @type ^`io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool` := v2 @kind object;
  #L440bf8.  v0:= new `io.reactivex.disposables.CompositeDisposable`;
  #L440bfc.  call `<init>`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L440c02.  v1.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.tasks` @type ^`io.reactivex.disposables.CompositeDisposable` := v0 @kind object;
  #L440c06.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/schedulers/IoScheduler$CachedWorkerPool;.get:()Lio/reactivex/internal/schedulers/IoScheduler$ThreadWorker;` @kind virtual;
  #L440c0c.  v2:= temp @kind object;
  #L440c0e.  v1.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.threadWorker` @type ^`io.reactivex.internal.schedulers.IoScheduler$ThreadWorker` := v2 @kind object;
  #L440c12.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler$EventLoopWorker;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L440c24.  v0:= v3.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L440c28.  v1:= 0I;
  #L440c2a.  v2:= 1I;
  #L440c2c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L440c32.  v0:= temp;
  #L440c34.  if v0 == 0 then goto L440c50;
  #L440c38.  v0:= v3.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.tasks` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440c3c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L440c42.  v0:= v3.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.pool` @type ^`io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool` @kind object;
  #L440c46.  v1:= v3.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.threadWorker` @type ^`io.reactivex.internal.schedulers.IoScheduler$ThreadWorker` @kind object;
  #L440c4a.  call `release`(v0, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$CachedWorkerPool;.release:(Lio/reactivex/internal/schedulers/IoScheduler$ThreadWorker;)V` @kind virtual;
  #L440c50.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler$EventLoopWorker;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440b80.  v0:= v1.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L440b84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L440b8a.  v0:= temp;
  #L440b8c.  return v0;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker` v6 @kind this, `java.lang.Runnable` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/internal/schedulers/IoScheduler$EventLoopWorker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L440ba0.  v0:= v6.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.tasks` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440ba4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L440baa.  v0:= temp;
  #L440bac.  if v0 == 0 then goto L440bb6;
  #L440bb0.  v7:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L440bb4.  return v7 @kind object;
  #L440bb6.  v0:= v6.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.threadWorker` @type ^`io.reactivex.internal.schedulers.IoScheduler$ThreadWorker` @kind object;
  #L440bba.  v5:= v6.`io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker.tasks` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440bbe.  v1:= v7 @kind object;
  #L440bc0.  v2:= v8 @kind wide;
  #L440bc2.  v4:= v10 @kind object;
  #L440bc4.  call temp:= `scheduleActual`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/schedulers/IoScheduler$ThreadWorker;.scheduleActual:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/internal/disposables/DisposableContainer;)Lio/reactivex/internal/schedulers/ScheduledRunnable;` @kind virtual;
  #L440bca.  v7:= temp @kind object;
  #L440bcc.  return v7 @kind object;
}
