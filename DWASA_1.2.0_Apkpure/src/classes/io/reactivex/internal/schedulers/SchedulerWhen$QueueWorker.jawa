record `io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class {
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.actionProcessor` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.actualWorker` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.unsubscribed` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker` v0 @kind this, `io.reactivex.processors.FlowableProcessor` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$QueueWorker;.<init>:(Lio/reactivex/processors/FlowableProcessor;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L441bf0.  call `<init>`(v0) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L441bf6.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.actionProcessor` @type ^`io.reactivex.processors.FlowableProcessor` := v1 @kind object;
  #L441bfa.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.actualWorker` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L441bfe.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L441c02.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L441c08.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.unsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L441c0c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$QueueWorker;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L441c20.  v0:= v3.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.unsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L441c24.  v1:= 0I;
  #L441c26.  v2:= 1I;
  #L441c28.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L441c2e.  v0:= temp;
  #L441c30.  if v0 == 0 then goto L441c48;
  #L441c34.  v0:= v3.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.actionProcessor` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L441c38.  call `onComplete`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.onComplete:()V` @kind virtual;
  #L441c3e.  v0:= v3.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.actualWorker` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L441c42.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L441c48.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$QueueWorker;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441b80.  v0:= v1.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.unsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L441b84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L441b8a.  v0:= temp;
  #L441b8c.  return v0;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$QueueWorker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441ba0.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen$ImmediateAction`;
  #L441ba4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ImmediateAction;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L441baa.  v2:= v1.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.actionProcessor` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L441bae.  call `onNext`(v2, v0) @signature `Lio/reactivex/processors/FlowableProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L441bb4.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$QueueWorker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441bc8.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen$DelayedAction`;
  #L441bcc.  call `<init>`(v0, v2, v3, v5) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$DelayedAction;.<init>:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L441bd2.  v2:= v1.`io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker.actionProcessor` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L441bd6.  call `onNext`(v2, v0) @signature `Lio/reactivex/processors/FlowableProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L441bdc.  return v0 @kind object;
}
