record `io.reactivex.internal.schedulers.InstantPeriodicTask` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.ExecutorService` `io.reactivex.internal.schedulers.InstantPeriodicTask.executor` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.InstantPeriodicTask.first` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.InstantPeriodicTask.rest` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.InstantPeriodicTask.runner` @AccessFlag ;
  `java.lang.Runnable` `io.reactivex.internal.schedulers.InstantPeriodicTask.task` @AccessFlag FINAL;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4407d8.  v0:= new `java.util.concurrent.FutureTask`;
  #L4407dc.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L4407e0.  v2:= 0I;
  #L4407e2.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L4407e8.  `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L4407ec.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.InstantPeriodicTask` v0 @kind this, `java.lang.Runnable` v1 @kind object, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.<init>:(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L440800.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L440806.  v0.`io.reactivex.internal.schedulers.InstantPeriodicTask.task` @type ^`java.lang.Runnable` := v1 @kind object;
  #L44080a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44080e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L440814.  v0.`io.reactivex.internal.schedulers.InstantPeriodicTask.first` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L440818.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44081c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L440822.  v0.`io.reactivex.internal.schedulers.InstantPeriodicTask.rest` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L440826.  v0.`io.reactivex.internal.schedulers.InstantPeriodicTask.executor` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L44082a.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.InstantPeriodicTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L440760.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.call:()Ljava/lang/Void;` @kind virtual;
  #L440766.  v0:= temp @kind object;
  #L440768.  return v0 @kind object;
}
procedure `java.lang.Void` `call`(`io.reactivex.internal.schedulers.InstantPeriodicTask` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.call:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44077c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L440782.  v0:= temp @kind object;
  #L440784.  v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L440788.  v0:= 0I;
  #L44078a.  v1:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.task` @type ^`java.lang.Runnable` @kind object;
  #L44078e.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L440794.  v1:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.executor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L440798.  call temp:= `submit`(v1, v2) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L44079e.  v1:= temp @kind object;
  #L4407a0.  call `setRest`(v2, v1) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.setRest:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L4407a6.  v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L4407aa.  goto L4407b8;
  #L4407ac.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4407ae.  v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L4407b2.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4407b8.  return v0 @kind object;
  catch `java.lang.Throwable` @[L44078a..L4407aa] goto L4407ac;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.InstantPeriodicTask` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44083c.  v0:= v5.`io.reactivex.internal.schedulers.InstantPeriodicTask.first` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440840.  v1:= `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L440844.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44084a.  v0:= temp @kind object;
  #L44084c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L440850.  v1:= 1I;
  #L440852.  v2:= 0I;
  #L440854.  if v0 == 0 then goto L44087c;
  #L440858.  v3:= `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L44085c.  if v0 == v3 then goto L44087c;
  #L440860.  v3:= v5.`io.reactivex.internal.schedulers.InstantPeriodicTask.runner` @type ^`java.lang.Thread` @kind object;
  #L440864.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44086a.  v4:= temp @kind object;
  #L44086c.  if v3 == v4 then goto L440874;
  #L440870.  v3:= 1I;
  #L440872.  goto L440876;
  #L440874.  v3:= 0I;
  #L440876.  call temp:= `cancel`(v0, v3) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L44087c.  v0:= v5.`io.reactivex.internal.schedulers.InstantPeriodicTask.rest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440880.  v3:= `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L440884.  call temp:= `getAndSet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44088a.  v0:= temp @kind object;
  #L44088c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L440890.  if v0 == 0 then goto L4408b6;
  #L440894.  v3:= `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L440898.  if v0 == v3 then goto L4408b6;
  #L44089c.  v3:= v5.`io.reactivex.internal.schedulers.InstantPeriodicTask.runner` @type ^`java.lang.Thread` @kind object;
  #L4408a0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4408a6.  v4:= temp @kind object;
  #L4408a8.  if v3 == v4 then goto L4408ae;
  #L4408ac.  goto L4408b0;
  #L4408ae.  v1:= 0I;
  #L4408b0.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4408b6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.InstantPeriodicTask` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L440734.  v0:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.first` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440738.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44073e.  v0:= temp @kind object;
  #L440740.  v1:= `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L440744.  if v0 != v1 then goto L44074c;
  #L440748.  v0:= 1I;
  #L44074a.  goto L44074e;
  #L44074c.  v0:= 0I;
  #L44074e.  return v0;
}
procedure `void` `setFirst`(`io.reactivex.internal.schedulers.InstantPeriodicTask` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.setFirst:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4408c8.  v0:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.first` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4408cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4408d2.  v0:= temp @kind object;
  #L4408d4.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4408d8.  v1:= `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4408dc.  if v0 != v1 then goto L4408fe;
  #L4408e0.  v0:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.runner` @type ^`java.lang.Thread` @kind object;
  #L4408e4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4408ea.  v1:= temp @kind object;
  #L4408ec.  if v0 == v1 then goto L4408f4;
  #L4408f0.  v0:= 1I;
  #L4408f2.  goto L4408f6;
  #L4408f4.  v0:= 0I;
  #L4408f6.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4408fc.  return @kind void;
  #L4408fe.  v1:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.first` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440902.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L440908.  v0:= temp;
  #L44090a.  if v0 == 0 then goto L4408c8;
  #L44090e.  return @kind void;
}
procedure `void` `setRest`(`io.reactivex.internal.schedulers.InstantPeriodicTask` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/InstantPeriodicTask;.setRest:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L440920.  v0:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.rest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440924.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44092a.  v0:= temp @kind object;
  #L44092c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L440930.  v1:= `@@io.reactivex.internal.schedulers.InstantPeriodicTask.CANCELLED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L440934.  if v0 != v1 then goto L440956;
  #L440938.  v0:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.runner` @type ^`java.lang.Thread` @kind object;
  #L44093c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L440942.  v1:= temp @kind object;
  #L440944.  if v0 == v1 then goto L44094c;
  #L440948.  v0:= 1I;
  #L44094a.  goto L44094e;
  #L44094c.  v0:= 0I;
  #L44094e.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L440954.  return @kind void;
  #L440956.  v1:= v2.`io.reactivex.internal.schedulers.InstantPeriodicTask.rest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44095a.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L440960.  v0:= temp;
  #L440962.  if v0 == 0 then goto L440920;
  #L440966.  return @kind void;
}
