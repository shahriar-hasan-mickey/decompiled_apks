record `io.reactivex.internal.schedulers.AbstractDirectTask` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.AbstractDirectTask.runner` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.AbstractDirectTask.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L43f888.  v0:= new `java.util.concurrent.FutureTask`;
  #L43f88c.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L43f890.  v2:= 0I;
  #L43f892.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L43f898.  `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L43f89c.  v0:= new `java.util.concurrent.FutureTask`;
  #L43f8a0.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L43f8a4.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L43f8aa.  `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L43f8ae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.AbstractDirectTask` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43f8c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43f8c6.  v0.`io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @type ^`java.lang.Runnable` := v1 @kind object;
  #L43f8ca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.AbstractDirectTask` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43f8dc.  call temp:= `get`(v3) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f8e2.  v0:= temp @kind object;
  #L43f8e4.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L43f8e8.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L43f8ec.  if v0 == v1 then goto L43f924;
  #L43f8f0.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L43f8f4.  if v0 == v1 then goto L43f924;
  #L43f8f8.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f8fe.  v1:= temp;
  #L43f900.  if v1 == 0 then goto L43f924;
  #L43f904.  if v0 == 0 then goto L43f924;
  #L43f908.  v1:= v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` @kind object;
  #L43f90c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L43f912.  v2:= temp @kind object;
  #L43f914.  if v1 == v2 then goto L43f91c;
  #L43f918.  v1:= 1I;
  #L43f91a.  goto L43f91e;
  #L43f91c.  v1:= 0I;
  #L43f91e.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L43f924.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.AbstractDirectTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f870.  v0:= v1.`io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @type ^`java.lang.Runnable` @kind object;
  #L43f874.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.AbstractDirectTask` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43f838.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f83e.  v0:= temp @kind object;
  #L43f840.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L43f844.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L43f848.  if v0 == v1 then goto L43f85a;
  #L43f84c.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L43f850.  if v0 != v1 then goto L43f856;
  #L43f854.  goto L43f85a;
  #L43f856.  v0:= 0I;
  #L43f858.  goto L43f85c;
  #L43f85a.  v0:= 1I;
  #L43f85c.  return v0;
}
procedure `void` `setFuture`(`io.reactivex.internal.schedulers.AbstractDirectTask` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43f938.  call temp:= `get`(v2) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f93e.  v0:= temp @kind object;
  #L43f940.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L43f944.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L43f948.  if v0 != v1 then goto L43f94e;
  #L43f94c.  goto L43f980;
  #L43f94e.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L43f952.  if v0 != v1 then goto L43f974;
  #L43f956.  v0:= v2.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` @kind object;
  #L43f95a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L43f960.  v1:= temp @kind object;
  #L43f962.  if v0 == v1 then goto L43f96a;
  #L43f966.  v0:= 1I;
  #L43f968.  goto L43f96c;
  #L43f96a.  v0:= 0I;
  #L43f96c.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L43f972.  goto L43f980;
  #L43f974.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f97a.  v0:= temp;
  #L43f97c.  if v0 == 0 then goto L43f938;
  #L43f980.  return @kind void;
}
