record `io.reactivex.internal.schedulers.SchedulerWhen` @kind class @AccessFlag PUBLIC extends `io.reactivex.Scheduler` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Scheduler` `io.reactivex.internal.schedulers.SchedulerWhen.actualScheduler` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.schedulers.SchedulerWhen.disposable` @AccessFlag PRIVATE;
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.internal.schedulers.SchedulerWhen.workerProcessor` @AccessFlag PRIVATE_FINAL;
}
global `io.reactivex.disposables.Disposable` `@@io.reactivex.internal.schedulers.SchedulerWhen.DISPOSED` @AccessFlag STATIC_FINAL;
global `io.reactivex.disposables.Disposable` `@@io.reactivex.internal.schedulers.SchedulerWhen.SUBSCRIBED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L441dec.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen$SubscribedDisposable`;
  #L441df0.  call `<init>`(v0) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$SubscribedDisposable;.<init>:()V` @kind direct;
  #L441df6.  `@@io.reactivex.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L441dfa.  call temp:= `disposed`() @signature `Lio/reactivex/disposables/Disposables;.disposed:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L441e00.  v0:= temp @kind object;
  #L441e02.  `@@io.reactivex.internal.schedulers.SchedulerWhen.DISPOSED` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L441e06.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen` v0 @kind this, `io.reactivex.functions.Function` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.<init>:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L441e18.  call `<init>`(v0) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L441e1e.  v0.`io.reactivex.internal.schedulers.SchedulerWhen.actualScheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L441e22.  call temp:= `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L441e28.  v2:= temp @kind object;
  #L441e2a.  call temp:= `toSerialized`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.toSerialized:()Lio/reactivex/processors/FlowableProcessor;` @kind virtual;
  #L441e30.  v2:= temp @kind object;
  #L441e32.  v0.`io.reactivex.internal.schedulers.SchedulerWhen.workerProcessor` @type ^`io.reactivex.processors.FlowableProcessor` := v2 @kind object;
  #L441e36.  v2:= v0.`io.reactivex.internal.schedulers.SchedulerWhen.workerProcessor` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L441e3a.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L441e40.  v1:= temp @kind object;
  #L441e42.  v1:= (`io.reactivex.Completable`) v1 @kind object;
  #L441e46.  call temp:= `subscribe`(v1) @signature `Lio/reactivex/Completable;.subscribe:()Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L441e4c.  v1:= temp @kind object;
  #L441e4e.  v0.`io.reactivex.internal.schedulers.SchedulerWhen.disposable` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L441e52.  return @kind void;
  #L441e54.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L441e56.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L441e5c.  v1:= temp @kind object;
  #L441e5e.  throw v1;
  catch `java.lang.Throwable` @[L441e36..L441e52] goto L441e54;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.SchedulerWhen` v4 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L441d98.  v0:= v4.`io.reactivex.internal.schedulers.SchedulerWhen.actualScheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L441d9c.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L441da2.  v0:= temp @kind object;
  #L441da4.  call temp:= `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L441daa.  v1:= temp @kind object;
  #L441dac.  call temp:= `toSerialized`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.toSerialized:()Lio/reactivex/processors/FlowableProcessor;` @kind virtual;
  #L441db2.  v1:= temp @kind object;
  #L441db4.  v2:= new `io.reactivex.internal.schedulers.SchedulerWhen$CreateWorkerFunction`;
  #L441db8.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$CreateWorkerFunction;.<init>:(Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L441dbe.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/processors/FlowableProcessor;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L441dc4.  v2:= temp @kind object;
  #L441dc6.  v3:= new `io.reactivex.internal.schedulers.SchedulerWhen$QueueWorker`;
  #L441dca.  call `<init>`(v3, v1, v0) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$QueueWorker;.<init>:(Lio/reactivex/processors/FlowableProcessor;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L441dd0.  v0:= v4.`io.reactivex.internal.schedulers.SchedulerWhen.workerProcessor` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L441dd4.  call `onNext`(v0, v2) @signature `Lio/reactivex/processors/FlowableProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L441dda.  return v3 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.SchedulerWhen` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441e7c.  v0:= v1.`io.reactivex.internal.schedulers.SchedulerWhen.disposable` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441e80.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L441e86.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.SchedulerWhen` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441d78.  v0:= v1.`io.reactivex.internal.schedulers.SchedulerWhen.disposable` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L441d7c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L441d82.  v0:= temp;
  #L441d84.  return v0;
}
