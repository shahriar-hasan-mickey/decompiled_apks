record `io.reactivex.internal.schedulers.RxThreadFactory` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `java.util.concurrent.ThreadFactory` @kind interface {
  `boolean` `io.reactivex.internal.schedulers.RxThreadFactory.nonBlocking` @AccessFlag FINAL;
  `java.lang.String` `io.reactivex.internal.schedulers.RxThreadFactory.prefix` @AccessFlag FINAL;
  `int` `io.reactivex.internal.schedulers.RxThreadFactory.priority` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.schedulers.RxThreadFactory.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4412ac.  v0:= 5I;
  #L4412ae.  v1:= 0I;
  #L4412b0.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L4412b6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4412c8.  v0:= 0I;
  #L4412ca.  call `<init>`(v1, v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L4412d0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4412e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4412ea.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.prefix` @type ^`java.lang.String` := v1 @kind object;
  #L4412ee.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.priority` @type ^`int` := v2;
  #L4412f2.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.nonBlocking` @type ^`boolean` := v3 @kind boolean;
  #L4412f6.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`io.reactivex.internal.schedulers.RxThreadFactory` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44123c.  v0:= new `java.lang.StringBuilder`;
  #L441240.  v1:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.prefix` @type ^`java.lang.String` @kind object;
  #L441244.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44124a.  v1:= 45I;
  #L44124e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L441254.  call temp:= `incrementAndGet`(v3) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.incrementAndGet:()J` @kind virtual;
  #L44125a.  v1:= temp @kind wide;
  #L44125c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L441262.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L441268.  v0:= temp @kind object;
  #L44126a.  v1:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.nonBlocking` @type ^`boolean` @kind boolean;
  #L44126e.  if v1 == 0 then goto L44127e;
  #L441272.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory$RxCustomThread`;
  #L441276.  call `<init>`(v1, v4, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory$RxCustomThread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L44127c.  goto L441288;
  #L44127e.  v1:= new `java.lang.Thread`;
  #L441282.  call `<init>`(v1, v4, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L441288.  v4:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.priority` @type ^`int`;
  #L44128c.  call `setPriority`(v1, v4) @signature `Ljava/lang/Thread;.setPriority:(I)V` @kind virtual;
  #L441292.  v4:= 1I;
  #L441294.  call `setDaemon`(v1, v4) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L44129a.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.schedulers.RxThreadFactory` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4411f8.  v0:= new `java.lang.StringBuilder`;
  #L4411fc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L441202.  v1:= "RxThreadFactory[" @kind object;
  #L441206.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44120c.  v1:= v2.`io.reactivex.internal.schedulers.RxThreadFactory.prefix` @type ^`java.lang.String` @kind object;
  #L441210.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L441216.  v1:= "]" @kind object;
  #L44121a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L441220.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L441226.  v0:= temp @kind object;
  #L441228.  return v0 @kind object;
}
