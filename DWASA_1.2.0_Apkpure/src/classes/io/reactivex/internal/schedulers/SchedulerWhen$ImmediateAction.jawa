record `io.reactivex.internal.schedulers.SchedulerWhen$ImmediateAction` @kind class @AccessFlag  extends `io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` @kind class {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.SchedulerWhen$ImmediateAction.action` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$ImmediateAction` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ImmediateAction;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L441b04.  call `<init>`(v0) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.<init>:()V` @kind direct;
  #L441b0a.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$ImmediateAction.action` @type ^`java.lang.Runnable` := v1 @kind object;
  #L441b0e.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `callActual`(`io.reactivex.internal.schedulers.SchedulerWhen$ImmediateAction` v2 @kind this, `io.reactivex.Scheduler$Worker` v3 @kind object, `io.reactivex.CompletableObserver` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ImmediateAction;.callActual:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)Lio/reactivex/disposables/Disposable;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L441adc.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen$OnCompletedAction`;
  #L441ae0.  v1:= v2.`io.reactivex.internal.schedulers.SchedulerWhen$ImmediateAction.action` @type ^`java.lang.Runnable` @kind object;
  #L441ae4.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$OnCompletedAction;.<init>:(Ljava/lang/Runnable;Lio/reactivex/CompletableObserver;)V` @kind direct;
  #L441aea.  call temp:= `schedule`(v3, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L441af0.  v3:= temp @kind object;
  #L441af2.  return v3 @kind object;
}
