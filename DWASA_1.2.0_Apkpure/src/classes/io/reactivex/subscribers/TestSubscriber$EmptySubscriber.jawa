record `io.reactivex.subscribers.TestSubscriber$EmptySubscriber` @kind class @AccessFlag FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
}
global `io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[] `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.subscribers.TestSubscriber$EmptySubscriber` `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L454dc4.  v0:= new `io.reactivex.subscribers.TestSubscriber$EmptySubscriber`;
  #L454dc8.  v1:= 0I;
  #L454dca.  v2:= "INSTANCE" @kind object;
  #L454dce.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L454dd4.  `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.INSTANCE` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` := v0 @kind object;
  #L454dd8.  v0:= 1I;
  #L454dda.  v0:= new `io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[v0];
  #L454dde.  v2:= `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.INSTANCE` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` @kind object;
  #L454de2.  v0[v1]:= v2 @kind object;
  #L454de6.  `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.$VALUES` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[] := v0 @kind object;
  #L454dea.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L454dfc.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L454e02.  return @kind void;
}
procedure `io.reactivex.subscribers.TestSubscriber$EmptySubscriber` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.valueOf:(Ljava/lang/String;)Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L454d7c.  v0:= constclass @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` @kind object;
  #L454d80.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L454d86.  v1:= temp @kind object;
  #L454d88.  v1:= (`io.reactivex.subscribers.TestSubscriber$EmptySubscriber`) v1 @kind object;
  #L454d8c.  return v1 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[] `values`() @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.values:()[Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L454da0.  v0:= `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.$VALUES` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[] @kind object;
  #L454da4.  call temp:= `clone`(v0) @signature `[Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.clone:()Ljava/lang/Object;` @kind virtual;
  #L454daa.  v0:= temp @kind object;
  #L454dac.  v0:= (`io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[]) v0 @kind object;
  #L454db0.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L454e14.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L454e28.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L454e3c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L454e50.  return @kind void;
}
