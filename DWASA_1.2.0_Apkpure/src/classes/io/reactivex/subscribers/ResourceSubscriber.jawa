record `io.reactivex.subscribers.ResourceSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.subscribers.ResourceSubscriber.missedRequested` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.disposables.ListCompositeDisposable` `io.reactivex.subscribers.ResourceSubscriber.resources` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subscribers.ResourceSubscriber.upstream` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.subscribers.ResourceSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L454444.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45444a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45444e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L454454.  v1.`io.reactivex.subscribers.ResourceSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L454458.  v0:= new `io.reactivex.internal.disposables.ListCompositeDisposable`;
  #L45445c.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.<init>:()V` @kind direct;
  #L454462.  v1.`io.reactivex.subscribers.ResourceSubscriber.resources` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` := v0 @kind object;
  #L454466.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45446a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L454470.  v1.`io.reactivex.subscribers.ResourceSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L454474.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subscribers.ResourceSubscriber` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.add:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L454488.  v0:= "resource is null" @kind object;
  #L45448c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L454492.  v0:= v1.`io.reactivex.subscribers.ResourceSubscriber.resources` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L454496.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L45449c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subscribers.ResourceSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4544b0.  v0:= v1.`io.reactivex.subscribers.ResourceSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4544b4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4544ba.  v0:= temp;
  #L4544bc.  if v0 == 0 then goto L4544ca;
  #L4544c0.  v0:= v1.`io.reactivex.subscribers.ResourceSubscriber.resources` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L4544c4.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.dispose:()V` @kind virtual;
  #L4544ca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subscribers.ResourceSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L454418.  v0:= v1.`io.reactivex.subscribers.ResourceSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45441c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454422.  v0:= temp @kind object;
  #L454424.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L454428.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45442e.  v0:= temp;
  #L454430.  return v0;
}
procedure `void` `onStart`(`io.reactivex.subscribers.ResourceSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.onStart:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4544dc.  v0:= 9223372036854775807L;
  #L4544e6.  call `request`(v2, v0) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.request:(J)V` @kind virtual;
  #L4544ec.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.ResourceSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L454500.  v0:= v5.`io.reactivex.subscribers.ResourceSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454504.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L45450a.  v1:= temp @kind object;
  #L45450c.  call temp:= `setOnce`(v0, v6, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;Ljava/lang/Class;)Z` @kind static;
  #L454512.  v0:= temp;
  #L454514.  if v0 == 0 then goto L45453c;
  #L454518.  v0:= v5.`io.reactivex.subscribers.ResourceSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45451c.  v1:= 0L;
  #L454520.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L454526.  v3:= temp @kind wide;
  #L454528.  v0:= lcmp(v3, v1);
  #L45452c.  if v0 == 0 then goto L454536;
  #L454530.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L454536.  call `onStart`(v5) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.onStart:()V` @kind virtual;
  #L45453c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.subscribers.ResourceSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/subscribers/ResourceSubscriber;.request:(J)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L454550.  v0:= v2.`io.reactivex.subscribers.ResourceSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454554.  v1:= v2.`io.reactivex.subscribers.ResourceSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L454558.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L45455e.  return @kind void;
}
