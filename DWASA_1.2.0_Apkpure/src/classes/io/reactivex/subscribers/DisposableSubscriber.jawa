record `io.reactivex.subscribers.DisposableSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subscribers.DisposableSubscriber.upstream` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.subscribers.DisposableSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L454330.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L454336.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45433a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L454340.  v1.`io.reactivex.subscribers.DisposableSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L454344.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.subscribers.DisposableSubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.cancel:()V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L454358.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L45435e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subscribers.DisposableSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L454370.  v0:= v1.`io.reactivex.subscribers.DisposableSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454374.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45437a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subscribers.DisposableSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L454304.  v0:= v2.`io.reactivex.subscribers.DisposableSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454308.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45430e.  v0:= temp @kind object;
  #L454310.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L454314.  if v0 != v1 then goto L45431c;
  #L454318.  v0:= 1I;
  #L45431a.  goto L45431e;
  #L45431c.  v0:= 0I;
  #L45431e.  return v0;
}
procedure `void` `onStart`(`io.reactivex.subscribers.DisposableSubscriber` v3 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.onStart:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L45438c.  v0:= v3.`io.reactivex.subscribers.DisposableSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454390.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454396.  v0:= temp @kind object;
  #L454398.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L45439c.  v1:= 9223372036854775807L;
  #L4543a6.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4543ac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.DisposableSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4543c0.  v0:= v2.`io.reactivex.subscribers.DisposableSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4543c4.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4543ca.  v1:= temp @kind object;
  #L4543cc.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;Ljava/lang/Class;)Z` @kind static;
  #L4543d2.  v3:= temp;
  #L4543d4.  if v3 == 0 then goto L4543de;
  #L4543d8.  call `onStart`(v2) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.onStart:()V` @kind virtual;
  #L4543de.  return @kind void;
}
procedure `void` `request`(`io.reactivex.subscribers.DisposableSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.request:(J)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4543f0.  v0:= v1.`io.reactivex.subscribers.DisposableSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4543f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4543fa.  v0:= temp @kind object;
  #L4543fc.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L454400.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L454406.  return @kind void;
}
