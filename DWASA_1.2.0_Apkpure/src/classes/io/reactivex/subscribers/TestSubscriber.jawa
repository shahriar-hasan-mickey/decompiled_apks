record `io.reactivex.subscribers.TestSubscriber` @kind class @AccessFlag PUBLIC extends `io.reactivex.observers.BaseTestConsumer` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.subscribers.TestSubscriber.cancelled` @AccessFlag PRIVATE_VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.subscribers.TestSubscriber.downstream` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.subscribers.TestSubscriber.missedRequested` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.subscribers.TestSubscriber.qs` @AccessFlag PRIVATE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subscribers.TestSubscriber.upstream` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L455160.  v0:= `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.INSTANCE` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` @kind object;
  #L455164.  v1:= 9223372036854775807L;
  #L45516e.  call `<init>`(v3, v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L455174.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L455188.  v0:= `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.INSTANCE` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` @kind object;
  #L45518c.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L455192.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4551a4.  v0:= 9223372036854775807L;
  #L4551ae.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L4551b4.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4551c8.  call `<init>`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L4551ce.  v0:= 0L;
  #L4551d2.  v2:= lcmp(v5, v0);
  #L4551d6.  if v2 < 0 then goto L4551fc;
  #L4551da.  v3.`io.reactivex.subscribers.TestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L4551de.  v4:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4551e2.  call `<init>`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4551e8.  v3.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v4 @kind object;
  #L4551ec.  v4:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4551f0.  call `<init>`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4551f6.  v3.`io.reactivex.subscribers.TestSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v4 @kind object;
  #L4551fa.  return @kind void;
  #L4551fc.  v4:= new `java.lang.IllegalArgumentException`;
  #L455200.  v5:= "Negative initial request not allowed" @kind object;
  #L455204.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45520a.  throw v4;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`() @signature `Lio/reactivex/subscribers/TestSubscriber;.create:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45507c.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L455080.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @kind direct;
  #L455086.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`(`long` v1 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.create:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L455098.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L45509c.  call `<init>`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L4550a2.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`(`org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.create:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4550b4.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L4550b8.  call `<init>`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4550be.  return v0 @kind object;
}
procedure `java.lang.String` `fusionModeToString`(`int` v2 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.fusionModeToString:(I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L455100.  if v2 == 0 then goto L45514a;
  #L455104.  v0:= 1I;
  #L455106.  if v2 == v0 then goto L455144;
  #L45510a.  v0:= 2I;
  #L45510c.  if v2 == v0 then goto L45513e;
  #L455110.  v0:= new `java.lang.StringBuilder`;
  #L455114.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45511a.  v1:= "Unknown(" @kind object;
  #L45511e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L455124.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45512a.  v2:= ")" @kind object;
  #L45512e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L455134.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45513a.  v2:= temp @kind object;
  #L45513c.  return v2 @kind object;
  #L45513e.  v2:= "ASYNC" @kind object;
  #L455142.  return v2 @kind object;
  #L455144.  v2:= "SYNC" @kind object;
  #L455148.  return v2 @kind object;
  #L45514a.  v2:= "NONE" @kind object;
  #L45514e.  return v2 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertFuseable`(`io.reactivex.subscribers.TestSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertFuseable:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L454ef4.  v0:= v2.`io.reactivex.subscribers.TestSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L454ef8.  if v0 == 0 then goto L454efe;
  #L454efc.  return v2 @kind object;
  #L454efe.  v0:= new `java.lang.AssertionError`;
  #L454f02.  v1:= "Upstream is not fuseable." @kind object;
  #L454f06.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L454f0c.  throw v0;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertFusionMode`(`io.reactivex.subscribers.TestSubscriber` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertFusionMode:(I)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L454f20.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.establishedFusionMode` @type ^`int`;
  #L454f24.  if v0 == v5 then goto L454f8c;
  #L454f28.  v1:= v4.`io.reactivex.subscribers.TestSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L454f2c.  if v1 == 0 then goto L454f7e;
  #L454f30.  v1:= new `java.lang.AssertionError`;
  #L454f34.  v2:= new `java.lang.StringBuilder`;
  #L454f38.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L454f3e.  v3:= "Fusion mode different. Expected: " @kind object;
  #L454f42.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L454f48.  call temp:= `fusionModeToString`(v5) @signature `Lio/reactivex/subscribers/TestSubscriber;.fusionModeToString:(I)Ljava/lang/String;` @kind static;
  #L454f4e.  v5:= temp @kind object;
  #L454f50.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L454f56.  v5:= ", actual: " @kind object;
  #L454f5a.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L454f60.  call temp:= `fusionModeToString`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.fusionModeToString:(I)Ljava/lang/String;` @kind static;
  #L454f66.  v5:= temp @kind object;
  #L454f68.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L454f6e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L454f74.  v5:= temp @kind object;
  #L454f76.  call `<init>`(v1, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L454f7c.  throw v1;
  #L454f7e.  v5:= "Upstream is not fuseable" @kind object;
  #L454f82.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/subscribers/TestSubscriber;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L454f88.  v5:= temp @kind object;
  #L454f8a.  throw v5;
  #L454f8c.  return v4 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertNotFuseable`(`io.reactivex.subscribers.TestSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotFuseable:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L454fa0.  v0:= v2.`io.reactivex.subscribers.TestSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L454fa4.  if v0 != 0 then goto L454faa;
  #L454fa8.  return v2 @kind object;
  #L454faa.  v0:= new `java.lang.AssertionError`;
  #L454fae.  v1:= "Upstream is fuseable." @kind object;
  #L454fb2.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L454fb8.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L454ebc.  call temp:= `assertNotSubscribed`(v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @kind virtual;
  #L454ec2.  v0:= temp @kind object;
  #L454ec4.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertNotSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L454fcc.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454fd0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454fd6.  v0:= temp @kind object;
  #L454fd8.  if v0 != 0 then goto L454ffc;
  #L454fdc.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L454fe0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L454fe6.  v0:= temp;
  #L454fe8.  if v0 == 0 then goto L454fee;
  #L454fec.  return v1 @kind object;
  #L454fee.  v0:= "Not subscribed but errors found" @kind object;
  #L454ff2.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L454ff8.  v0:= temp @kind object;
  #L454ffa.  throw v0;
  #L454ffc.  v0:= "Subscribed!" @kind object;
  #L455000.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L455006.  v0:= temp @kind object;
  #L455008.  throw v0;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertOf`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertOf:(Lio/reactivex/functions/Consumer;)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L45501c.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L455022.  return v0 @kind object;
  #L455024.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L455026.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45502c.  v1:= temp @kind object;
  #L45502e.  throw v1;
  catch `java.lang.Throwable` @[L45501c..L455022] goto L455024;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L454ed8.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @kind virtual;
  #L454ede.  v0:= temp @kind object;
  #L454ee0.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45504c.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455050.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455056.  v0:= temp @kind object;
  #L455058.  if v0 == 0 then goto L45505e;
  #L45505c.  return v1 @kind object;
  #L45505e.  v0:= "Not subscribed!" @kind object;
  #L455062.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L455068.  v0:= temp @kind object;
  #L45506a.  throw v0;
}
procedure `void` `cancel`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45521c.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L455220.  if v0 != 0 then goto L455234;
  #L455224.  v0:= 1I;
  #L455226.  v1.`io.reactivex.subscribers.TestSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L45522a.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45522e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L455234.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L455248.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @kind virtual;
  #L45524e.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L454e64.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454e68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454e6e.  v0:= temp @kind object;
  #L454e70.  if v0 == 0 then goto L454e78;
  #L454e74.  v0:= 1I;
  #L454e76.  goto L454e7a;
  #L454e78.  v0:= 0I;
  #L454e7a.  return v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L454e8c.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L454e90.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L454ea4.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L454ea8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subscribers.TestSubscriber` v4 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L455260.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L455264.  if v0 != 0 then goto L455296;
  #L455268.  v0:= 1I;
  #L45526a.  v4.`io.reactivex.subscribers.TestSubscriber.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L45526e.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455272.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455278.  v0:= temp @kind object;
  #L45527a.  if v0 != 0 then goto L455296;
  #L45527e.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L455282.  v1:= new `java.lang.IllegalStateException`;
  #L455286.  v2:= "onSubscribe not called in proper order" @kind object;
  #L45528a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L455290.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L455296.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45529c.  v0:= temp @kind object;
  #L45529e.  v4.`io.reactivex.subscribers.TestSubscriber.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4552a2.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.completions` @type ^`long` @kind wide;
  #L4552a6.  v2:= 1L;
  #L4552aa.  v0:= v0 + v2 @kind long;
  #L4552ac.  v4.`io.reactivex.subscribers.TestSubscriber.completions` @type ^`long` := v0 @kind wide;
  #L4552b0.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4552b4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4552ba.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4552be.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4552c4.  return @kind void;
  #L4552c6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4552c8.  v1:= v4.`io.reactivex.subscribers.TestSubscriber.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4552cc.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4552d2.  throw v0;
  catch `java.lang.Throwable` @[L455296..L4552ba] goto L4552c6;
}
procedure `void` `onError`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4552f0.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4552f4.  if v0 != 0 then goto L455326;
  #L4552f8.  v0:= 1I;
  #L4552fa.  v3.`io.reactivex.subscribers.TestSubscriber.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4552fe.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455302.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455308.  v0:= temp @kind object;
  #L45530a.  if v0 != 0 then goto L455326;
  #L45530e.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L455312.  v1:= new `java.lang.NullPointerException`;
  #L455316.  v2:= "onSubscribe not called in proper order" @kind object;
  #L45531a.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L455320.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L455326.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45532c.  v0:= temp @kind object;
  #L45532e.  v3.`io.reactivex.subscribers.TestSubscriber.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L455332.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L455336.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45533c.  if v4 != 0 then goto L455358;
  #L455340.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L455344.  v1:= new `java.lang.IllegalStateException`;
  #L455348.  v2:= "onError received a null Throwable" @kind object;
  #L45534c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L455352.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L455358.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45535c.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L455362.  v4:= v3.`io.reactivex.subscribers.TestSubscriber.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L455366.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L45536c.  return @kind void;
  #L45536e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L455370.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L455374.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L45537a.  throw v4;
  catch `java.lang.Throwable` @[L455326..L455362] goto L45536e;
}
procedure `void` `onNext`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L455398.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L45539c.  if v0 != 0 then goto L4553ce;
  #L4553a0.  v0:= 1I;
  #L4553a2.  v3.`io.reactivex.subscribers.TestSubscriber.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4553a6.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4553aa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4553b0.  v0:= temp @kind object;
  #L4553b2.  if v0 != 0 then goto L4553ce;
  #L4553b6.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L4553ba.  v1:= new `java.lang.IllegalStateException`;
  #L4553be.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4553c2.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4553c8.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4553ce.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4553d4.  v0:= temp @kind object;
  #L4553d6.  v3.`io.reactivex.subscribers.TestSubscriber.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4553da.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.establishedFusionMode` @type ^`int`;
  #L4553de.  v1:= 2I;
  #L4553e0.  if v0 != v1 then goto L455418;
  #L4553e4.  v4:= v3.`io.reactivex.subscribers.TestSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4553e8.  call temp:= `poll`(v4) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L4553ee.  v4:= temp @kind object;
  #L4553f0.  if v4 == 0 then goto L455416;
  #L4553f4.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.values` @type ^`java.util.List` @kind object;
  #L4553f8.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4553fe.  goto L4553e4;
  #L455400.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L455402.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L455406.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45540c.  v4:= v3.`io.reactivex.subscribers.TestSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L455410.  call `cancel`(v4) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.cancel:()V` @kind interface;
  #L455416.  return @kind void;
  #L455418.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.values` @type ^`java.util.List` @kind object;
  #L45541c.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L455422.  if v4 != 0 then goto L45543e;
  #L455426.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L45542a.  v1:= new `java.lang.NullPointerException`;
  #L45542e.  v2:= "onNext received a null value" @kind object;
  #L455432.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L455438.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45543e.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L455442.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L455448.  return @kind void;
  catch `java.lang.Throwable` @[L4553e4..L4553fe] goto L455400;
}
procedure `void` `onStart`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L455468.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.TestSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45547c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L455482.  v0:= temp @kind object;
  #L455484.  v5.`io.reactivex.subscribers.TestSubscriber.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L455488.  if v6 != 0 then goto L4554a6;
  #L45548c.  v6:= v5.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L455490.  v0:= new `java.lang.NullPointerException`;
  #L455494.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L455498.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45549e.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4554a4.  return @kind void;
  #L4554a6.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4554aa.  v1:= 0I;
  #L4554ac.  call temp:= `compareAndSet`(v0, v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4554b2.  v0:= temp;
  #L4554b4.  if v0 != 0 then goto L45550a;
  #L4554b8.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4554be.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4554c2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4554c8.  v0:= temp @kind object;
  #L4554ca.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4554ce.  if v0 == v1 then goto L455508;
  #L4554d2.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L4554d6.  v1:= new `java.lang.IllegalStateException`;
  #L4554da.  v2:= new `java.lang.StringBuilder`;
  #L4554de.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4554e4.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L4554e8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4554ee.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4554f4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4554fa.  v6:= temp @kind object;
  #L4554fc.  call `<init>`(v1, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L455502.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L455508.  return @kind void;
  #L45550a.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.initialFusionMode` @type ^`int`;
  #L45550e.  if v0 == 0 then goto L455588;
  #L455512.  v0:= instanceof @variable v6 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L455516.  if v0 == 0 then goto L455588;
  #L45551a.  v0:= v6 @kind object;
  #L45551c.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L455520.  v5.`io.reactivex.subscribers.TestSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v0 @kind object;
  #L455524.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L455528.  v1:= v5.`io.reactivex.subscribers.TestSubscriber.initialFusionMode` @type ^`int`;
  #L45552c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.requestFusion:(I)I` @kind interface;
  #L455532.  v0:= temp;
  #L455534.  v5.`io.reactivex.subscribers.TestSubscriber.establishedFusionMode` @type ^`int` := v0;
  #L455538.  v1:= 1I;
  #L45553a.  if v0 != v1 then goto L455588;
  #L45553e.  v5.`io.reactivex.subscribers.TestSubscriber.checkSubscriptionOnce` @type ^`boolean` := v1 @kind boolean;
  #L455542.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L455548.  v6:= temp @kind object;
  #L45554a.  v5.`io.reactivex.subscribers.TestSubscriber.lastThread` @type ^`java.lang.Thread` := v6 @kind object;
  #L45554e.  v6:= v5.`io.reactivex.subscribers.TestSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L455552.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/fuseable/QueueSubscription;.poll:()Ljava/lang/Object;` @kind interface;
  #L455558.  v6:= temp @kind object;
  #L45555a.  if v6 == 0 then goto L45556a;
  #L45555e.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.values` @type ^`java.util.List` @kind object;
  #L455562.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L455568.  goto L45554e;
  #L45556a.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.completions` @type ^`long` @kind wide;
  #L45556e.  v2:= 1L;
  #L455572.  v0:= v0 + v2 @kind long;
  #L455574.  v5.`io.reactivex.subscribers.TestSubscriber.completions` @type ^`long` := v0 @kind wide;
  #L455578.  goto L455586;
  #L45557a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45557c.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.errors` @type ^`java.util.List` @kind object;
  #L455580.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L455586.  return @kind void;
  #L455588.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45558c.  call `onSubscribe`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L455592.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L455596.  v1:= 0L;
  #L45559a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4555a0.  v3:= temp @kind wide;
  #L4555a2.  v0:= lcmp(v3, v1);
  #L4555a6.  if v0 == 0 then goto L4555b0;
  #L4555aa.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4555b0.  call `onStart`(v5) @signature `Lio/reactivex/subscribers/TestSubscriber;.onStart:()V` @kind virtual;
  #L4555b6.  return @kind void;
  catch `java.lang.Throwable` @[L45554e..L455578] goto L45557a;
}
procedure `void` `request`(`io.reactivex.subscribers.TestSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4555d4.  v0:= v2.`io.reactivex.subscribers.TestSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4555d8.  v1:= v2.`io.reactivex.subscribers.TestSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4555dc.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4555e2.  return @kind void;
}
procedure `io.reactivex.subscribers.TestSubscriber` `requestMore`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.requestMore:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4550d0.  call `request`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.request:(J)V` @kind virtual;
  #L4550d6.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `setInitialFusionMode`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.setInitialFusionMode:(I)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag FINAL {
    temp;

  #L4550e8.  v0.`io.reactivex.subscribers.TestSubscriber.initialFusionMode` @type ^`int` := v1;
  #L4550ec.  return v0 @kind object;
}
