record `io.reactivex.subjects.ReplaySubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `io.reactivex.subjects.ReplaySubject$ReplayBuffer` `io.reactivex.subjects.ReplaySubject.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.ReplaySubject.done` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.ReplaySubject.observers` @AccessFlag FINAL;
}
global `io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] `@@io.reactivex.subjects.ReplaySubject.EMPTY` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@io.reactivex.subjects.ReplaySubject.EMPTY_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] `@@io.reactivex.subjects.ReplaySubject.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/ReplaySubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4530a8.  v0:= 0I;
  #L4530aa.  v1:= new `io.reactivex.subjects.ReplaySubject$ReplayDisposable`[v0];
  #L4530ae.  `@@io.reactivex.subjects.ReplaySubject.EMPTY` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] := v1 @kind object;
  #L4530b2.  v1:= new `io.reactivex.subjects.ReplaySubject$ReplayDisposable`[v0];
  #L4530b6.  `@@io.reactivex.subjects.ReplaySubject.TERMINATED` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] := v1 @kind object;
  #L4530ba.  v0:= new `java.lang.Object`[v0];
  #L4530be.  `@@io.reactivex.subjects.ReplaySubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] := v0 @kind object;
  #L4530c2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayBuffer` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4530d4.  call `<init>`(v1) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4530da.  v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` := v2 @kind object;
  #L4530de.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4530e2.  v0:= `@@io.reactivex.subjects.ReplaySubject.EMPTY` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] @kind object;
  #L4530e6.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4530ec.  v1.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4530f0.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject` `create`() @signature `Lio/reactivex/subjects/ReplaySubject;.create:()Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L452eb4.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L452eb8.  v1:= new `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer`;
  #L452ebc.  v2:= 16I;
  #L452ec0.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.<init>:(I)V` @kind direct;
  #L452ec6.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L452ecc.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `create`(`int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject;.create:(I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L452ee0.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L452ee4.  v1:= new `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer`;
  #L452ee8.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.<init>:(I)V` @kind direct;
  #L452eee.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L452ef4.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createUnbounded`() @signature `Lio/reactivex/subjects/ReplaySubject;.createUnbounded:()Lio/reactivex/subjects/ReplaySubject;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L452f08.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L452f0c.  v1:= new `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer`;
  #L452f10.  v2:= 2147483647I;
  #L452f16.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L452f1c.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L452f22.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithSize:(I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L452f34.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L452f38.  v1:= new `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer`;
  #L452f3c.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L452f42.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L452f48.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L452f5c.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L452f60.  v7:= new `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer`;
  #L452f64.  v2:= 2147483647I;
  #L452f6a.  v1:= v7 @kind object;
  #L452f6c.  v3:= v8 @kind wide;
  #L452f6e.  v5:= v10 @kind object;
  #L452f70.  v6:= v11 @kind object;
  #L452f72.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L452f78.  call `<init>`(v0, v7) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L452f7e.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L452f90.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L452f94.  v7:= new `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer`;
  #L452f98.  v1:= v7 @kind object;
  #L452f9a.  v2:= v12;
  #L452f9c.  v3:= v8 @kind wide;
  #L452f9e.  v5:= v10 @kind object;
  #L452fa0.  v6:= v11 @kind object;
  #L452fa2.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L452fa8.  call `<init>`(v0, v7) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;)V` @kind direct;
  #L452fae.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayDisposable` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.add:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L452d74.  v0:= v4.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452d78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L452d7e.  v0:= temp @kind object;
  #L452d80.  v0:= (`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[]) v0 @kind object;
  #L452d84.  v1:= `@@io.reactivex.subjects.ReplaySubject.TERMINATED` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] @kind object;
  #L452d88.  v2:= 0I;
  #L452d8a.  if v0 != v1 then goto L452d90;
  #L452d8e.  return v2;
  #L452d90.  v1:= length @variable v0;
  #L452d92.  v3:= v1 + 1;
  #L452d96.  v3:= new `io.reactivex.subjects.ReplaySubject$ReplayDisposable`[v3];
  #L452d9a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L452da0.  v3[v1]:= v5 @kind object;
  #L452da4.  v1:= v4.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452da8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L452dae.  v0:= temp;
  #L452db0.  if v0 == 0 then goto L452d74;
  #L452db4.  v5:= 1I;
  #L452db6.  return v5;
}
procedure `void` `cleanupBuffer`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.cleanupBuffer:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453104.  v0:= v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L453108.  call `trimHead`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.trimHead:()V` @kind interface;
  #L45310e.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453070.  v0:= v2.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L453074.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.get:()Ljava/lang/Object;` @kind interface;
  #L45307a.  v0:= temp @kind object;
  #L45307c.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L453082.  v1:= temp;
  #L453084.  if v1 == 0 then goto L453092;
  #L453088.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L45308e.  v0:= temp @kind object;
  #L453090.  return v0 @kind object;
  #L453092.  v0:= 0I;
  #L453094.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453000.  v0:= v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L453004.  call temp:= `getValue`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.getValue:()Ljava/lang/Object;` @kind interface;
  #L45300a.  v0:= temp @kind object;
  #L45300c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453020.  v0:= `@@io.reactivex.subjects.ReplaySubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L453024.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L453028.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L45302e.  v0:= temp @kind object;
  #L453030.  v1:= `@@io.reactivex.subjects.ReplaySubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L453034.  if v0 != v1 then goto L45303e;
  #L453038.  v0:= 0I;
  #L45303a.  v0:= new `java.lang.Object`[v0];
  #L45303e.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453050.  v0:= v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L453054.  call temp:= `getValues`(v0, v2) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L45305a.  v2:= temp @kind object;
  #L45305c.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452dc8.  v0:= v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L452dcc.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.get:()Ljava/lang/Object;` @kind interface;
  #L452dd2.  v0:= temp @kind object;
  #L452dd4.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L452dda.  v0:= temp;
  #L452ddc.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452df0.  v0:= v1.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452df4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L452dfa.  v0:= temp @kind object;
  #L452dfc.  v0:= (`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[]) v0 @kind object;
  #L452e00.  v0:= length @variable v0;
  #L452e02.  if v0 == 0 then goto L452e0a;
  #L452e06.  v0:= 1I;
  #L452e08.  goto L452e0c;
  #L452e0a.  v0:= 0I;
  #L452e0c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452e20.  v0:= v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L452e24.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.get:()Ljava/lang/Object;` @kind interface;
  #L452e2a.  v0:= temp @kind object;
  #L452e2c.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L452e32.  v0:= temp;
  #L452e34.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452e48.  v0:= v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L452e4c.  call temp:= `size`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.size:()I` @kind interface;
  #L452e52.  v0:= temp;
  #L452e54.  if v0 == 0 then goto L452e5c;
  #L452e58.  v0:= 1I;
  #L452e5a.  goto L452e5e;
  #L452e5c.  v0:= 0I;
  #L452e5e.  return v0;
}
procedure `int` `observerCount`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.observerCount:()I` @AccessFlag  {
    temp;
    v0;

  #L452e70.  v0:= v1.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452e74.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L452e7a.  v0:= temp @kind object;
  #L452e7c.  v0:= (`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[]) v0 @kind object;
  #L452e80.  v0:= length @variable v0;
  #L452e82.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.ReplaySubject` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L453120.  v0:= v5.`io.reactivex.subjects.ReplaySubject.done` @type ^`boolean` @kind boolean;
  #L453124.  if v0 == 0 then goto L45312a;
  #L453128.  return @kind void;
  #L45312a.  v0:= 1I;
  #L45312c.  v5.`io.reactivex.subjects.ReplaySubject.done` @type ^`boolean` := v0 @kind boolean;
  #L453130.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L453136.  v0:= temp @kind object;
  #L453138.  v1:= v5.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L45313c.  call `addFinal`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @kind interface;
  #L453142.  call temp:= `terminate`(v5, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.terminate:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;` @kind virtual;
  #L453148.  v0:= temp @kind object;
  #L45314a.  v2:= length @variable v0;
  #L45314c.  v3:= 0I;
  #L45314e.  if v3 >= v2 then goto L453162;
  #L453152.  v4:= v0[v3] @kind object;
  #L453156.  call `replay`(v1, v4) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @kind interface;
  #L45315c.  v3:= v3 + 1;
  #L453160.  goto L45314e;
  #L453162.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L453174.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L453178.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45317e.  v0:= v4.`io.reactivex.subjects.ReplaySubject.done` @type ^`boolean` @kind boolean;
  #L453182.  if v0 == 0 then goto L45318e;
  #L453186.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45318c.  return @kind void;
  #L45318e.  v0:= 1I;
  #L453190.  v4.`io.reactivex.subjects.ReplaySubject.done` @type ^`boolean` := v0 @kind boolean;
  #L453194.  call temp:= `error`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L45319a.  v5:= temp @kind object;
  #L45319c.  v0:= v4.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4531a0.  call `addFinal`(v0, v5) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @kind interface;
  #L4531a6.  call temp:= `terminate`(v4, v5) @signature `Lio/reactivex/subjects/ReplaySubject;.terminate:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;` @kind virtual;
  #L4531ac.  v5:= temp @kind object;
  #L4531ae.  v1:= length @variable v5;
  #L4531b0.  v2:= 0I;
  #L4531b2.  if v2 >= v1 then goto L4531c6;
  #L4531b6.  v3:= v5[v2] @kind object;
  #L4531ba.  call `replay`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @kind interface;
  #L4531c0.  v2:= v2 + 1;
  #L4531c4.  goto L4531b2;
  #L4531c6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4531d8.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4531dc.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4531e2.  v0:= v4.`io.reactivex.subjects.ReplaySubject.done` @type ^`boolean` @kind boolean;
  #L4531e6.  if v0 == 0 then goto L4531ec;
  #L4531ea.  return @kind void;
  #L4531ec.  v0:= v4.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L4531f0.  call `add`(v0, v5) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.add:(Ljava/lang/Object;)V` @kind interface;
  #L4531f6.  v5:= v4.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4531fa.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453200.  v5:= temp @kind object;
  #L453202.  v5:= (`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[]) v5 @kind object;
  #L453206.  v1:= length @variable v5;
  #L453208.  v2:= 0I;
  #L45320a.  if v2 >= v1 then goto L45321e;
  #L45320e.  v3:= v5[v2] @kind object;
  #L453212.  call `replay`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @kind interface;
  #L453218.  v2:= v2 + 1;
  #L45321c.  goto L45320a;
  #L45321e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453230.  v0:= v1.`io.reactivex.subjects.ReplaySubject.done` @type ^`boolean` @kind boolean;
  #L453234.  if v0 == 0 then goto L45323e;
  #L453238.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45323e.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.subjects.ReplaySubject` v6 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayDisposable` v7 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.remove:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L453250.  v0:= v6.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453254.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45325a.  v0:= temp @kind object;
  #L45325c.  v0:= (`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[]) v0 @kind object;
  #L453260.  v1:= `@@io.reactivex.subjects.ReplaySubject.TERMINATED` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] @kind object;
  #L453264.  if v0 == v1 then goto L4532d0;
  #L453268.  v1:= `@@io.reactivex.subjects.ReplaySubject.EMPTY` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] @kind object;
  #L45326c.  if v0 != v1 then goto L453272;
  #L453270.  goto L4532d0;
  #L453272.  v1:= length @variable v0;
  #L453274.  v2:= -1I;
  #L453276.  v3:= 0I;
  #L453278.  v4:= 0I;
  #L45327a.  if v4 >= v1 then goto L453290;
  #L45327e.  v5:= v0[v4] @kind object;
  #L453282.  if v5 != v7 then goto L45328a;
  #L453286.  v2:= v4;
  #L453288.  goto L453290;
  #L45328a.  v4:= v4 + 1;
  #L45328e.  goto L45327a;
  #L453290.  if v2 >= 0 then goto L453296;
  #L453294.  return @kind void;
  #L453296.  v4:= 1I;
  #L453298.  if v1 != v4 then goto L4532a2;
  #L45329c.  v1:= `@@io.reactivex.subjects.ReplaySubject.EMPTY` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] @kind object;
  #L4532a0.  goto L4532c0;
  #L4532a2.  v5:= v1 + -1;
  #L4532a6.  v5:= new `io.reactivex.subjects.ReplaySubject$ReplayDisposable`[v5];
  #L4532aa.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4532b0.  v3:= v2 + 1;
  #L4532b4.  v1:= v1 - v2 @kind int;
  #L4532b6.  v1:= v1 - v4 @kind int;
  #L4532b8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4532be.  v1:= v5 @kind object;
  #L4532c0.  v2:= v6.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4532c4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4532ca.  v0:= temp;
  #L4532cc.  if v0 == 0 then goto L453250;
  #L4532d0.  return @kind void;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L452e94.  v0:= v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L452e98.  call temp:= `size`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.size:()I` @kind interface;
  #L452e9e.  v0:= temp;
  #L452ea0.  return v0;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4532e4.  v0:= new `io.reactivex.subjects.ReplaySubject$ReplayDisposable`;
  #L4532e8.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/ReplaySubject;)V` @kind direct;
  #L4532ee.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4532f4.  v2:= v0.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L4532f8.  if v2 != 0 then goto L453322;
  #L4532fc.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.add:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)Z` @kind virtual;
  #L453302.  v2:= temp;
  #L453304.  if v2 == 0 then goto L453318;
  #L453308.  v2:= v0.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L45330c.  if v2 == 0 then goto L453318;
  #L453310.  call `remove`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.remove:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @kind virtual;
  #L453316.  return @kind void;
  #L453318.  v2:= v1.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L45331c.  call `replay`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @kind interface;
  #L453322.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] `terminate`(`io.reactivex.subjects.ReplaySubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.terminate:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L452fc0.  v0:= v2.`io.reactivex.subjects.ReplaySubject.buffer` @type ^`io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind object;
  #L452fc4.  v1:= 0I;
  #L452fc6.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L452fcc.  v3:= temp;
  #L452fce.  if v3 == 0 then goto L452fe8;
  #L452fd2.  v3:= v2.`io.reactivex.subjects.ReplaySubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452fd6.  v0:= `@@io.reactivex.subjects.ReplaySubject.TERMINATED` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] @kind object;
  #L452fda.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L452fe0.  v3:= temp @kind object;
  #L452fe2.  v3:= (`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[]) v3 @kind object;
  #L452fe6.  return v3 @kind object;
  #L452fe8.  v3:= `@@io.reactivex.subjects.ReplaySubject.TERMINATED` @type ^`io.reactivex.subjects.ReplaySubject$ReplayDisposable`[] @kind object;
  #L452fec.  return v3 @kind object;
}
