record `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `boolean` `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.Observer` `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.emitting` @AccessFlag ;
  `boolean` `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.fastPath` @AccessFlag ;
  `long` `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.index` @AccessFlag ;
  `boolean` `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.next` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.queue` @AccessFlag ;
  `io.reactivex.subjects.BehaviorSubject` `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.BehaviorSubject` v2 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/BehaviorSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L450c18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L450c1e.  v0.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L450c22.  v0.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.state` @type ^`io.reactivex.subjects.BehaviorSubject` := v2 @kind object;
  #L450c26.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450c38.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L450c3c.  if v0 != 0 then goto L450c50;
  #L450c40.  v0:= 1I;
  #L450c42.  v1.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L450c46.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.state` @type ^`io.reactivex.subjects.BehaviorSubject` @kind object;
  #L450c4a.  call `remove`(v0, v1) @signature `Lio/reactivex/subjects/BehaviorSubject;.remove:(Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;)V` @kind virtual;
  #L450c50.  return @kind void;
}
procedure `void` `emitFirst`(`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v4 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.emitFirst:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L450c64.  v0:= v4.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L450c68.  if v0 == 0 then goto L450c6e;
  #L450c6c.  return @kind void;
  #L450c6e.  @monitorenter v4
  #L450c70.  v0:= v4.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L450c74.  if v0 == 0 then goto L450c7c;
  #L450c78.  @monitorexit v4
  #L450c7a.  return @kind void;
  #L450c7c.  v0:= v4.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.next` @type ^`boolean` @kind boolean;
  #L450c80.  if v0 == 0 then goto L450c88;
  #L450c84.  @monitorexit v4
  #L450c86.  return @kind void;
  #L450c88.  v0:= v4.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.state` @type ^`io.reactivex.subjects.BehaviorSubject` @kind object;
  #L450c8c.  v1:= v0.`io.reactivex.subjects.BehaviorSubject.readLock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L450c90.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L450c96.  v2:= v0.`io.reactivex.subjects.BehaviorSubject.index` @type ^`long` @kind wide;
  #L450c9a.  v4.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.index` @type ^`long` := v2 @kind wide;
  #L450c9e.  v0:= v0.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450ca2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450ca8.  v0:= temp @kind object;
  #L450caa.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L450cb0.  v1:= 1I;
  #L450cb2.  if v0 == 0 then goto L450cba;
  #L450cb6.  v2:= 1I;
  #L450cb8.  goto L450cbc;
  #L450cba.  v2:= 0I;
  #L450cbc.  v4.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.emitting` @type ^`boolean` := v2 @kind boolean;
  #L450cc0.  v4.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.next` @type ^`boolean` := v1 @kind boolean;
  #L450cc4.  @monitorexit v4
  #L450cc6.  if v0 == 0 then goto L450cde;
  #L450cca.  call temp:= `test`(v4, v0) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L450cd0.  v0:= temp;
  #L450cd2.  if v0 == 0 then goto L450cd8;
  #L450cd6.  return @kind void;
  #L450cd8.  call `emitLoop`(v4) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.emitLoop:()V` @kind virtual;
  #L450cde.  return @kind void;
  #L450ce0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450ce2.  @monitorexit v4
  #L450ce4.  throw v0;
  catch `java.lang.Throwable` @[L450c70..L450cc6] goto L450ce0;
  catch `java.lang.Throwable` @[L450ce2..L450ce4] goto L450ce0;
}
procedure `void` `emitLoop`(`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.emitLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L450d0c.  v0:= v2.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L450d10.  if v0 == 0 then goto L450d16;
  #L450d14.  return @kind void;
  #L450d16.  @monitorenter v2
  #L450d18.  v0:= v2.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L450d1c.  if v0 != 0 then goto L450d2a;
  #L450d20.  v0:= 0I;
  #L450d22.  v2.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.emitting` @type ^`boolean` := v0 @kind boolean;
  #L450d26.  @monitorexit v2
  #L450d28.  return @kind void;
  #L450d2a.  v1:= 0I;
  #L450d2c.  v2.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L450d30.  @monitorexit v2
  #L450d32.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L450d38.  goto L450d0c;
  #L450d3a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450d3c.  @monitorexit v2
  #L450d3e.  goto L450d42;
  #L450d40.  throw v0;
  #L450d42.  goto L450d40;
  catch `java.lang.Throwable` @[L450d18..L450d32] goto L450d3a;
  catch `java.lang.Throwable` @[L450d3c..L450d3e] goto L450d3a;
}
procedure `void` `emitNext`(`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.emitNext:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L450d68.  v0:= v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L450d6c.  if v0 == 0 then goto L450d72;
  #L450d70.  return @kind void;
  #L450d72.  v0:= v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.fastPath` @type ^`boolean` @kind boolean;
  #L450d76.  if v0 != 0 then goto L450dd6;
  #L450d7a.  @monitorenter v3
  #L450d7c.  v0:= v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L450d80.  if v0 == 0 then goto L450d88;
  #L450d84.  @monitorexit v3
  #L450d86.  return @kind void;
  #L450d88.  v0:= v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.index` @type ^`long` @kind wide;
  #L450d8c.  v2:= lcmp(v0, v5);
  #L450d90.  if v2 != 0 then goto L450d98;
  #L450d94.  @monitorexit v3
  #L450d96.  return @kind void;
  #L450d98.  v5:= v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.emitting` @type ^`boolean` @kind boolean;
  #L450d9c.  if v5 == 0 then goto L450dc2;
  #L450da0.  v5:= v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L450da4.  if v5 != 0 then goto L450db8;
  #L450da8.  v5:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L450dac.  v6:= 4I;
  #L450dae.  call `<init>`(v5, v6) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L450db4.  v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v5 @kind object;
  #L450db8.  call `add`(v5, v4) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L450dbe.  @monitorexit v3
  #L450dc0.  return @kind void;
  #L450dc2.  v5:= 1I;
  #L450dc4.  v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.next` @type ^`boolean` := v5 @kind boolean;
  #L450dc8.  @monitorexit v3
  #L450dca.  v3.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.fastPath` @type ^`boolean` := v5 @kind boolean;
  #L450dce.  goto L450dd6;
  #L450dd0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450dd2.  @monitorexit v3
  #L450dd4.  throw v4;
  #L450dd6.  call temp:= `test`(v3, v4) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L450ddc.  return @kind void;
  catch `java.lang.Throwable` @[L450d7c..L450dca] goto L450dd0;
  catch `java.lang.Throwable` @[L450dd2..L450dd4] goto L450dd0;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450bcc.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L450bd0.  return v0;
}
procedure `boolean` `test`(`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450be4.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L450be8.  if v0 != 0 then goto L450c02;
  #L450bec.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L450bf0.  call temp:= `accept`(v2, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L450bf6.  v2:= temp;
  #L450bf8.  if v2 == 0 then goto L450bfe;
  #L450bfc.  goto L450c02;
  #L450bfe.  v2:= 0I;
  #L450c00.  goto L450c04;
  #L450c02.  v2:= 1I;
  #L450c04.  return v2;
}
