record `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind interface {
  `boolean` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.done` @AccessFlag VOLATILE;
  `io.reactivex.subjects.ReplaySubject$TimedNode` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @AccessFlag VOLATILE;
  `long` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxSize` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject$TimedNode` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v1 @kind this, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4523dc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4523e2.  v0:= "maxSize" @kind object;
  #L4523e6.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4523ec.  v2:= temp;
  #L4523ee.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxSize` @type ^`int` := v2;
  #L4523f2.  v2:= "maxAge" @kind object;
  #L4523f6.  call temp:= `verifyPositive`(v3, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L4523fc.  v2:= temp @kind wide;
  #L4523fe.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` := v2 @kind wide;
  #L452402.  v2:= "unit is null" @kind object;
  #L452406.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45240c.  v2:= temp @kind object;
  #L45240e.  v2:= (`java.util.concurrent.TimeUnit`) v2 @kind object;
  #L452412.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L452416.  v2:= "scheduler is null" @kind object;
  #L45241a.  call temp:= `requireNonNull`(v6, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L452420.  v2:= temp @kind object;
  #L452422.  v2:= (`io.reactivex.Scheduler`) v2 @kind object;
  #L452426.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L45242a.  v2:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L45242e.  v3:= 0I;
  #L452430.  v4:= 0L;
  #L452434.  call `<init>`(v2, v3, v4) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L45243a.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L45243e.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L452442.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L452454.  v0:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L452458.  v1:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L45245c.  v2:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L452460.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L452466.  v1:= temp @kind wide;
  #L452468.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L45246e.  v4:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L452472.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L452476.  v1:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L45247a.  v1:= v1 + 1;
  #L45247e.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v1;
  #L452482.  call `set`(v4, v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L452488.  call `trim`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trim:()V` @kind virtual;
  #L45248e.  return @kind void;
}
procedure `void` `addFinal`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4524a0.  v0:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L4524a4.  v1:= 9223372036854775807L;
  #L4524ae.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4524b4.  v4:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L4524b8.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L4524bc.  v1:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4524c0.  v2:= 1I;
  #L4524c2.  v1:= v1 + v2 @kind int;
  #L4524c4.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v1;
  #L4524c8.  call `lazySet`(v4, v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4524ce.  call `trimFinal`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trimFinal:()V` @kind virtual;
  #L4524d4.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` := v2 @kind boolean;
  #L4524d8.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject$TimedNode` `getHead`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/subjects/ReplaySubject$TimedNode;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L452278.  v0:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L45227c.  v1:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L452280.  v2:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L452284.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L45228a.  v1:= temp @kind wide;
  #L45228c.  v3:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L452290.  v1:= v1 - v3 @kind long;
  #L452292.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L452298.  v3:= temp @kind object;
  #L45229a.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L45229e.  v7:= v3 @kind object;
  #L4522a0.  v3:= v0 @kind object;
  #L4522a2.  v0:= v7 @kind object;
  #L4522a4.  if v0 == 0 then goto L4522c4;
  #L4522a8.  v4:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.time` @type ^`long` @kind wide;
  #L4522ac.  v6:= lcmp(v4, v1);
  #L4522b0.  if v6 <= 0 then goto L4522b6;
  #L4522b4.  goto L4522c4;
  #L4522b6.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L4522bc.  v3:= temp @kind object;
  #L4522be.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L4522c2.  goto L45229e;
  #L4522c4.  return v3 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4522d8.  v0:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L4522dc.  v1:= 0I;
  #L4522de.  v2:= v1 @kind object;
  #L4522e0.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L4522e6.  v3:= temp @kind object;
  #L4522e8.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L4522ec.  if v3 != 0 then goto L452340;
  #L4522f0.  v3:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L4522f4.  v4:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4522f8.  call temp:= `now`(v3, v4) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4522fe.  v3:= temp @kind wide;
  #L452300.  v5:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L452304.  v3:= v3 - v5 @kind long;
  #L452306.  v5:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.time` @type ^`long` @kind wide;
  #L45230a.  v7:= lcmp(v5, v3);
  #L45230e.  if v7 >= 0 then goto L452314;
  #L452312.  return v1 @kind object;
  #L452314.  v0:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L452318.  if v0 != 0 then goto L45231e;
  #L45231c.  return v1 @kind object;
  #L45231e.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L452324.  v1:= temp;
  #L452326.  if v1 != 0 then goto L45233a;
  #L45232a.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L452330.  v1:= temp;
  #L452332.  if v1 == 0 then goto L452338;
  #L452336.  goto L45233a;
  #L452338.  return v0 @kind object;
  #L45233a.  v0:= v2.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L45233e.  return v0 @kind object;
  #L452340.  v2:= v0 @kind object;
  #L452342.  v0:= v3 @kind object;
  #L452344.  goto L4522e0;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L452358.  call temp:= `getHead`(v5) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/subjects/ReplaySubject$TimedNode;` @kind virtual;
  #L45235e.  v0:= temp @kind object;
  #L452360.  call temp:= `size`(v5, v0) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/subjects/ReplaySubject$TimedNode;)I` @kind virtual;
  #L452366.  v1:= temp;
  #L452368.  v2:= 0I;
  #L45236a.  v3:= 0I;
  #L45236c.  if v1 != 0 then goto L45237c;
  #L452370.  v0:= length @variable v6;
  #L452372.  if v0 == 0 then goto L4523ca;
  #L452376.  v6[v3]:= v2 @kind object;
  #L45237a.  goto L4523ca;
  #L45237c.  v4:= length @variable v6;
  #L45237e.  if v4 >= v1 then goto L4523a2;
  #L452382.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L452388.  v6:= temp @kind object;
  #L45238a.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L452390.  v6:= temp @kind object;
  #L452392.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L452398.  v6:= temp @kind object;
  #L45239a.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L45239e.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4523a2.  if v3 == v1 then goto L4523c0;
  #L4523a6.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L4523ac.  v0:= temp @kind object;
  #L4523ae.  v0:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v0 @kind object;
  #L4523b2.  v4:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L4523b6.  v6[v3]:= v4 @kind object;
  #L4523ba.  v3:= v3 + 1;
  #L4523be.  goto L4523a2;
  #L4523c0.  v0:= length @variable v6;
  #L4523c2.  if v0 <= v1 then goto L4523ca;
  #L4523c6.  v6[v1]:= v2 @kind object;
  #L4523ca.  return v6 @kind object;
}
procedure `void` `replay`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v7 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayDisposable` v8 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4524ec.  call temp:= `getAndIncrement`(v8) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.getAndIncrement:()I` @kind virtual;
  #L4524f2.  v0:= temp;
  #L4524f4.  if v0 == 0 then goto L4524fa;
  #L4524f8.  return @kind void;
  #L4524fa.  v0:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4524fe.  v1:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` @kind object;
  #L452502.  v1:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v1 @kind object;
  #L452506.  v2:= 1I;
  #L452508.  if v1 != 0 then goto L452514;
  #L45250c.  call temp:= `getHead`(v7) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/subjects/ReplaySubject$TimedNode;` @kind virtual;
  #L452512.  v1:= temp @kind object;
  #L452514.  v3:= 1I;
  #L452516.  v4:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L45251a.  v5:= 0I;
  #L45251c.  if v4 == 0 then goto L452526;
  #L452520.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L452524.  return @kind void;
  #L452526.  v4:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L45252a.  if v4 == 0 then goto L452534;
  #L45252e.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L452532.  return @kind void;
  #L452534.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L45253a.  v4:= temp @kind object;
  #L45253c.  v4:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v4 @kind object;
  #L452540.  if v4 != 0 then goto L452566;
  #L452544.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L45254a.  v4:= temp @kind object;
  #L45254c.  if v4 == 0 then goto L452552;
  #L452550.  goto L452516;
  #L452552.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v1 @kind object;
  #L452556.  v3:= -v3 @kind int;
  #L452558.  call temp:= `addAndGet`(v8, v3) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.addAndGet:(I)I` @kind virtual;
  #L45255e.  v3:= temp;
  #L452560.  if v3 != 0 then goto L452516;
  #L452564.  return @kind void;
  #L452566.  v1:= v4.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L45256a.  v6:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L45256e.  if v6 == 0 then goto L4525aa;
  #L452572.  call temp:= `get`(v4) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L452578.  v6:= temp @kind object;
  #L45257a.  if v6 != 0 then goto L4525aa;
  #L45257e.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L452584.  v3:= temp;
  #L452586.  if v3 == 0 then goto L452592;
  #L45258a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L452590.  goto L4525a0;
  #L452592.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L452598.  v1:= temp @kind object;
  #L45259a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4525a0.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L4525a4.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` := v2 @kind boolean;
  #L4525a8.  return @kind void;
  #L4525aa.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4525b0.  v1:= v4 @kind object;
  #L4525b2.  goto L452526;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4521fc.  call temp:= `getHead`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/subjects/ReplaySubject$TimedNode;` @kind virtual;
  #L452202.  v0:= temp @kind object;
  #L452204.  call temp:= `size`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/subjects/ReplaySubject$TimedNode;)I` @kind virtual;
  #L45220a.  v0:= temp;
  #L45220c.  return v0;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v2 @kind this, `io.reactivex.subjects.ReplaySubject$TimedNode` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/subjects/ReplaySubject$TimedNode;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L452220.  v0:= 0I;
  #L452222.  v1:= 2147483647I;
  #L452228.  if v0 == v1 then goto L452266;
  #L45222c.  call temp:= `get`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L452232.  v1:= temp @kind object;
  #L452234.  v1:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v1 @kind object;
  #L452238.  if v1 != 0 then goto L45225e;
  #L45223c.  v3:= v3.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L452240.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L452246.  v1:= temp;
  #L452248.  if v1 != 0 then goto L452258;
  #L45224c.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L452252.  v3:= temp;
  #L452254.  if v3 == 0 then goto L452266;
  #L452258.  v0:= v0 + -1;
  #L45225c.  goto L452266;
  #L45225e.  v0:= v0 + 1;
  #L452262.  v3:= v1 @kind object;
  #L452264.  goto L452222;
  #L452266.  return v0;
}
procedure `void` `trim`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v7 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trim:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4525c4.  v0:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4525c8.  v1:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxSize` @type ^`int`;
  #L4525cc.  if v0 <= v1 then goto L4525ec;
  #L4525d0.  v0:= v0 + -1;
  #L4525d4.  v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v0;
  #L4525d8.  v0:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L4525dc.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L4525e2.  v0:= temp @kind object;
  #L4525e4.  v0:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v0 @kind object;
  #L4525e8.  v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L4525ec.  v0:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L4525f0.  v1:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4525f4.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4525fa.  v0:= temp @kind wide;
  #L4525fc.  v2:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L452600.  v0:= v0 - v2 @kind long;
  #L452602.  v2:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L452606.  call temp:= `get`(v2) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L45260c.  v3:= temp @kind object;
  #L45260e.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L452612.  if v3 != 0 then goto L45261c;
  #L452616.  v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L45261a.  goto L45262c;
  #L45261c.  v4:= v3.`io.reactivex.subjects.ReplaySubject$TimedNode.time` @type ^`long` @kind wide;
  #L452620.  v6:= lcmp(v4, v0);
  #L452624.  if v6 <= 0 then goto L45262e;
  #L452628.  v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L45262c.  return @kind void;
  #L45262e.  v2:= v3 @kind object;
  #L452630.  goto L452606;
}
procedure `void` `trimFinal`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v10 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trimFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L452644.  v0:= v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L452648.  v1:= v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L45264c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L452652.  v0:= temp @kind wide;
  #L452654.  v2:= v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L452658.  v0:= v0 - v2 @kind long;
  #L45265a.  v2:= v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L45265e.  call temp:= `get`(v2) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L452664.  v3:= temp @kind object;
  #L452666.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L45266a.  call temp:= `get`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L452670.  v4:= temp @kind object;
  #L452672.  v5:= 0L;
  #L452676.  v7:= 0I;
  #L452678.  if v4 != 0 then goto L4526a8;
  #L45267c.  v0:= v2.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L452680.  if v0 == 0 then goto L4526a2;
  #L452684.  v0:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L452688.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L45268e.  call temp:= `get`(v2) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L452694.  v1:= temp @kind object;
  #L452696.  call `lazySet`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L45269c.  v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L4526a0.  goto L4526de;
  #L4526a2.  v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L4526a6.  goto L4526de;
  #L4526a8.  v8:= v3.`io.reactivex.subjects.ReplaySubject$TimedNode.time` @type ^`long` @kind wide;
  #L4526ac.  v4:= lcmp(v8, v0);
  #L4526b0.  if v4 <= 0 then goto L4526e0;
  #L4526b4.  v0:= v2.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L4526b8.  if v0 == 0 then goto L4526da;
  #L4526bc.  v0:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L4526c0.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4526c6.  call temp:= `get`(v2) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L4526cc.  v1:= temp @kind object;
  #L4526ce.  call `lazySet`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4526d4.  v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L4526d8.  goto L4526de;
  #L4526da.  v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L4526de.  return @kind void;
  #L4526e0.  v2:= v3 @kind object;
  #L4526e2.  goto L45265e;
}
procedure `void` `trimHead`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4526f4.  v0:= v5.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L4526f8.  v1:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L4526fc.  if v1 == 0 then goto L452722;
  #L452700.  v1:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L452704.  v2:= 0I;
  #L452706.  v3:= 0L;
  #L45270a.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L452710.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L452716.  v0:= temp @kind object;
  #L452718.  call `lazySet`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L45271e.  v5.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v1 @kind object;
  #L452722.  return @kind void;
}
