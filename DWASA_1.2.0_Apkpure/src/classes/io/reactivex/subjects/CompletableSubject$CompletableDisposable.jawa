record `io.reactivex.subjects.CompletableSubject$CompletableDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.subjects.CompletableSubject$CompletableDisposable.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.CompletableSubject$CompletableDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.CompletableSubject$CompletableDisposable` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.subjects.CompletableSubject` v2 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/subjects/CompletableSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L451458.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45145e.  v0.`io.reactivex.subjects.CompletableSubject$CompletableDisposable.downstream` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L451462.  call `lazySet`(v0, v2) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L451468.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.CompletableSubject$CompletableDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45147c.  v0:= 0I;
  #L45147e.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451484.  v0:= temp @kind object;
  #L451486.  v0:= (`io.reactivex.subjects.CompletableSubject`) v0 @kind object;
  #L45148a.  if v0 == 0 then goto L451494;
  #L45148e.  call `remove`(v0, v1) @signature `Lio/reactivex/subjects/CompletableSubject;.remove:(Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;)V` @kind virtual;
  #L451494.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.CompletableSubject$CompletableDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451434.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L45143a.  v0:= temp @kind object;
  #L45143c.  if v0 != 0 then goto L451444;
  #L451440.  v0:= 1I;
  #L451442.  goto L451446;
  #L451444.  v0:= 0I;
  #L451446.  return v0;
}
