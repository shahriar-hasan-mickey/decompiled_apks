record `io.reactivex.subjects.BehaviorSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `long` `io.reactivex.subjects.BehaviorSubject.index` @AccessFlag ;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.subjects.BehaviorSubject.lock` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.subjects.BehaviorSubject.readLock` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.subscribers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.terminalEvent` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.value` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.subjects.BehaviorSubject.writeLock` @AccessFlag FINAL;
}
global `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] `@@io.reactivex.subjects.BehaviorSubject.EMPTY` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@io.reactivex.subjects.BehaviorSubject.EMPTY_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] `@@io.reactivex.subjects.BehaviorSubject.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/BehaviorSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4510e4.  v0:= 0I;
  #L4510e6.  v1:= new `java.lang.Object`[v0];
  #L4510ea.  `@@io.reactivex.subjects.BehaviorSubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4510ee.  v1:= new `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[v0];
  #L4510f2.  `@@io.reactivex.subjects.BehaviorSubject.EMPTY` @type ^`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] := v1 @kind object;
  #L4510f6.  v0:= new `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[v0];
  #L4510fa.  `@@io.reactivex.subjects.BehaviorSubject.TERMINATED` @type ^`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] := v0 @kind object;
  #L4510fe.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L451110.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L451116.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L45111a.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L451120.  v2.`io.reactivex.subjects.BehaviorSubject.lock` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L451124.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.lock` @type ^`java.util.concurrent.locks.ReadWriteLock` @kind object;
  #L451128.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L45112e.  v0:= temp @kind object;
  #L451130.  v2.`io.reactivex.subjects.BehaviorSubject.readLock` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L451134.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.lock` @type ^`java.util.concurrent.locks.ReadWriteLock` @kind object;
  #L451138.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L45113e.  v0:= temp @kind object;
  #L451140.  v2.`io.reactivex.subjects.BehaviorSubject.writeLock` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L451144.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L451148.  v1:= `@@io.reactivex.subjects.BehaviorSubject.EMPTY` @type ^`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] @kind object;
  #L45114c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L451152.  v2.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L451156.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45115a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L451160.  v2.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L451164.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L451168.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45116e.  v2.`io.reactivex.subjects.BehaviorSubject.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L451172.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L451184.  call `<init>`(v2) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @kind direct;
  #L45118a.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45118e.  v1:= "defaultValue is null" @kind object;
  #L451192.  call temp:= `requireNonNull`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L451198.  v3:= temp @kind object;
  #L45119a.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4511a0.  return @kind void;
}
procedure `io.reactivex.subjects.BehaviorSubject` `create`() @signature `Lio/reactivex/subjects/BehaviorSubject;.create:()Lio/reactivex/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L450f3c.  v0:= new `io.reactivex.subjects.BehaviorSubject`;
  #L450f40.  call `<init>`(v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @kind direct;
  #L450f46.  return v0 @kind object;
}
procedure `io.reactivex.subjects.BehaviorSubject` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.createDefault:(Ljava/lang/Object;)Lio/reactivex/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L450f58.  v0:= new `io.reactivex.subjects.BehaviorSubject`;
  #L450f5c.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L450f62.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.subjects.BehaviorSubject` v4 @kind this, `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v5 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.add:(Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L450e04.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450e08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450e0e.  v0:= temp @kind object;
  #L450e10.  v0:= (`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[]) v0 @kind object;
  #L450e14.  v1:= `@@io.reactivex.subjects.BehaviorSubject.TERMINATED` @type ^`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] @kind object;
  #L450e18.  v2:= 0I;
  #L450e1a.  if v0 != v1 then goto L450e20;
  #L450e1e.  return v2;
  #L450e20.  v1:= length @variable v0;
  #L450e22.  v3:= v1 + 1;
  #L450e26.  v3:= new `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[v3];
  #L450e2a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L450e30.  v3[v1]:= v5 @kind object;
  #L450e34.  v1:= v4.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450e38.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L450e3e.  v0:= temp;
  #L450e40.  if v0 == 0 then goto L450e04;
  #L450e44.  v5:= 1I;
  #L450e46.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4510ac.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4510b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4510b6.  v0:= temp @kind object;
  #L4510b8.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4510be.  v1:= temp;
  #L4510c0.  if v1 == 0 then goto L4510ce;
  #L4510c4.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4510ca.  v0:= temp @kind object;
  #L4510cc.  return v0 @kind object;
  #L4510ce.  v0:= 0I;
  #L4510d0.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450fa8.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450fac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450fb2.  v0:= temp @kind object;
  #L450fb4.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L450fba.  v1:= temp;
  #L450fbc.  if v1 != 0 then goto L450fd8;
  #L450fc0.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L450fc6.  v1:= temp;
  #L450fc8.  if v1 == 0 then goto L450fce;
  #L450fcc.  goto L450fd8;
  #L450fce.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L450fd4.  v0:= temp @kind object;
  #L450fd6.  return v0 @kind object;
  #L450fd8.  v0:= 0I;
  #L450fda.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450fec.  v0:= `@@io.reactivex.subjects.BehaviorSubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L450ff0.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L450ff4.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L450ffa.  v0:= temp @kind object;
  #L450ffc.  v1:= `@@io.reactivex.subjects.BehaviorSubject.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L451000.  if v0 != v1 then goto L45100a;
  #L451004.  v0:= 0I;
  #L451006.  v0:= new `java.lang.Object`[v0];
  #L45100a.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.BehaviorSubject` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45101c.  v0:= v5.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451020.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451026.  v0:= temp @kind object;
  #L451028.  v1:= 0I;
  #L45102a.  v2:= 0I;
  #L45102c.  if v0 == 0 then goto L451090;
  #L451030.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L451036.  v3:= temp;
  #L451038.  if v3 != 0 then goto L451090;
  #L45103c.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L451042.  v3:= temp;
  #L451044.  if v3 == 0 then goto L45104a;
  #L451048.  goto L451090;
  #L45104a.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L451050.  v0:= temp @kind object;
  #L451052.  v3:= length @variable v6;
  #L451054.  v4:= 1I;
  #L451056.  if v3 == 0 then goto L45106a;
  #L45105a.  v6[v2]:= v0 @kind object;
  #L45105e.  v0:= length @variable v6;
  #L451060.  if v0 == v4 then goto L45108e;
  #L451064.  v6[v4]:= v1 @kind object;
  #L451068.  goto L45108e;
  #L45106a.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L451070.  v6:= temp @kind object;
  #L451072.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L451078.  v6:= temp @kind object;
  #L45107a.  call temp:= `newInstance`(v6, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L451080.  v6:= temp @kind object;
  #L451082.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L451086.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L45108a.  v6[v2]:= v0 @kind object;
  #L45108e.  return v6 @kind object;
  #L451090.  v0:= length @variable v6;
  #L451092.  if v0 == 0 then goto L45109a;
  #L451096.  v6[v2]:= v1 @kind object;
  #L45109a.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450e58.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450e5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450e62.  v0:= temp @kind object;
  #L450e64.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L450e6a.  v0:= temp;
  #L450e6c.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450e80.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450e84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450e8a.  v0:= temp @kind object;
  #L450e8c.  v0:= (`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[]) v0 @kind object;
  #L450e90.  v0:= length @variable v0;
  #L450e92.  if v0 == 0 then goto L450e9a;
  #L450e96.  v0:= 1I;
  #L450e98.  goto L450e9c;
  #L450e9a.  v0:= 0I;
  #L450e9c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450eb0.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450eb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450eba.  v0:= temp @kind object;
  #L450ebc.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L450ec2.  v0:= temp;
  #L450ec4.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450ed8.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450edc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450ee2.  v0:= temp @kind object;
  #L450ee4.  if v0 == 0 then goto L450f04;
  #L450ee8.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L450eee.  v1:= temp;
  #L450ef0.  if v1 != 0 then goto L450f04;
  #L450ef4.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L450efa.  v0:= temp;
  #L450efc.  if v0 != 0 then goto L450f04;
  #L450f00.  v0:= 1I;
  #L450f02.  goto L450f06;
  #L450f04.  v0:= 0I;
  #L450f06.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.BehaviorSubject` v7 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4511b4.  v0:= v7.`io.reactivex.subjects.BehaviorSubject.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4511b8.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4511bc.  v2:= 0I;
  #L4511be.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4511c4.  v0:= temp;
  #L4511c6.  if v0 != 0 then goto L4511cc;
  #L4511ca.  return @kind void;
  #L4511cc.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4511d2.  v0:= temp @kind object;
  #L4511d4.  call temp:= `terminate`(v7, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.terminate:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;` @kind virtual;
  #L4511da.  v1:= temp @kind object;
  #L4511dc.  v2:= length @variable v1;
  #L4511de.  v3:= 0I;
  #L4511e0.  if v3 >= v2 then goto L4511f8;
  #L4511e4.  v4:= v1[v3] @kind object;
  #L4511e8.  v5:= v7.`io.reactivex.subjects.BehaviorSubject.index` @type ^`long` @kind wide;
  #L4511ec.  call `emitNext`(v4, v0, v5) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.emitNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L4511f2.  v3:= v3 + 1;
  #L4511f6.  goto L4511e0;
  #L4511f8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45120c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L451210.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L451216.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45121a.  v1:= 0I;
  #L45121c.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L451222.  v0:= temp;
  #L451224.  if v0 != 0 then goto L451230;
  #L451228.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45122e.  return @kind void;
  #L451230.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L451236.  v7:= temp @kind object;
  #L451238.  call temp:= `terminate`(v6, v7) @signature `Lio/reactivex/subjects/BehaviorSubject;.terminate:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;` @kind virtual;
  #L45123e.  v0:= temp @kind object;
  #L451240.  v1:= length @variable v0;
  #L451242.  v2:= 0I;
  #L451244.  if v2 >= v1 then goto L45125c;
  #L451248.  v3:= v0[v2] @kind object;
  #L45124c.  v4:= v6.`io.reactivex.subjects.BehaviorSubject.index` @type ^`long` @kind wide;
  #L451250.  call `emitNext`(v3, v7, v4) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.emitNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L451256.  v2:= v2 + 1;
  #L45125a.  goto L451244;
  #L45125c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L451270.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L451274.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45127a.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45127e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451284.  v0:= temp @kind object;
  #L451286.  if v0 == 0 then goto L45128c;
  #L45128a.  return @kind void;
  #L45128c.  call temp:= `next`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L451292.  v7:= temp @kind object;
  #L451294.  call `setCurrent`(v6, v7) @signature `Lio/reactivex/subjects/BehaviorSubject;.setCurrent:(Ljava/lang/Object;)V` @kind virtual;
  #L45129a.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45129e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4512a4.  v0:= temp @kind object;
  #L4512a6.  v0:= (`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[]) v0 @kind object;
  #L4512aa.  v1:= length @variable v0;
  #L4512ac.  v2:= 0I;
  #L4512ae.  if v2 >= v1 then goto L4512c6;
  #L4512b2.  v3:= v0[v2] @kind object;
  #L4512b6.  v4:= v6.`io.reactivex.subjects.BehaviorSubject.index` @type ^`long` @kind wide;
  #L4512ba.  call `emitNext`(v3, v7, v4) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.emitNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L4512c0.  v2:= v2 + 1;
  #L4512c4.  goto L4512ae;
  #L4512c6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4512d8.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4512dc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4512e2.  v0:= temp @kind object;
  #L4512e4.  if v0 == 0 then goto L4512ee;
  #L4512e8.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4512ee.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.remove:(Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L451300.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451304.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45130a.  v0:= temp @kind object;
  #L45130c.  v0:= (`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[]) v0 @kind object;
  #L451310.  v1:= length @variable v0;
  #L451312.  if v1 != 0 then goto L451318;
  #L451316.  return @kind void;
  #L451318.  v2:= -1I;
  #L45131a.  v3:= 0I;
  #L45131c.  v4:= 0I;
  #L45131e.  if v4 >= v1 then goto L451334;
  #L451322.  v5:= v0[v4] @kind object;
  #L451326.  if v5 != v7 then goto L45132e;
  #L45132a.  v2:= v4;
  #L45132c.  goto L451334;
  #L45132e.  v4:= v4 + 1;
  #L451332.  goto L45131e;
  #L451334.  if v2 >= 0 then goto L45133a;
  #L451338.  return @kind void;
  #L45133a.  v4:= 1I;
  #L45133c.  if v1 != v4 then goto L451346;
  #L451340.  v1:= `@@io.reactivex.subjects.BehaviorSubject.EMPTY` @type ^`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] @kind object;
  #L451344.  goto L451364;
  #L451346.  v5:= v1 + -1;
  #L45134a.  v5:= new `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[v5];
  #L45134e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L451354.  v3:= v2 + 1;
  #L451358.  v1:= v1 - v2 @kind int;
  #L45135a.  v1:= v1 - v4 @kind int;
  #L45135c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L451362.  v1:= v5 @kind object;
  #L451364.  v2:= v6.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451368.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45136e.  v0:= temp;
  #L451370.  if v0 == 0 then goto L451300;
  #L451374.  return @kind void;
}
procedure `void` `setCurrent`(`io.reactivex.subjects.BehaviorSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.setCurrent:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L451388.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.writeLock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L45138c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L451392.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.index` @type ^`long` @kind wide;
  #L451396.  v2:= 1L;
  #L45139a.  v0:= v0 + v2 @kind long;
  #L45139c.  v4.`io.reactivex.subjects.BehaviorSubject.index` @type ^`long` := v0 @kind wide;
  #L4513a0.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4513a4.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4513aa.  v5:= v4.`io.reactivex.subjects.BehaviorSubject.writeLock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4513ae.  call `unlock`(v5) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4513b4.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4513c8.  v0:= new `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`;
  #L4513cc.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/BehaviorSubject;)V` @kind direct;
  #L4513d2.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4513d8.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.add:(Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;)Z` @kind virtual;
  #L4513de.  v1:= temp;
  #L4513e0.  if v1 == 0 then goto L4513fc;
  #L4513e4.  v3:= v0.`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L4513e8.  if v3 == 0 then goto L4513f4;
  #L4513ec.  call `remove`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.remove:(Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;)V` @kind virtual;
  #L4513f2.  goto L451422;
  #L4513f4.  call `emitFirst`(v0) @signature `Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;.emitFirst:()V` @kind virtual;
  #L4513fa.  goto L451422;
  #L4513fc.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.terminalEvent` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451400.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451406.  v0:= temp @kind object;
  #L451408.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L45140c.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L451410.  if v0 != v1 then goto L45141c;
  #L451414.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45141a.  goto L451422;
  #L45141c.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451422.  return @kind void;
}
procedure `int` `subscriberCount`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.subscriberCount:()I` @AccessFlag  {
    temp;
    v0;

  #L450f18.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450f1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450f22.  v0:= temp @kind object;
  #L450f24.  v0:= (`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[]) v0 @kind object;
  #L450f28.  v0:= length @variable v0;
  #L450f2a.  return v0;
}
procedure `io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] `terminate`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.terminate:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L450f74.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450f78.  v1:= `@@io.reactivex.subjects.BehaviorSubject.TERMINATED` @type ^`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] @kind object;
  #L450f7c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L450f82.  v0:= temp @kind object;
  #L450f84.  v0:= (`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[]) v0 @kind object;
  #L450f88.  v1:= `@@io.reactivex.subjects.BehaviorSubject.TERMINATED` @type ^`io.reactivex.subjects.BehaviorSubject$BehaviorDisposable`[] @kind object;
  #L450f8c.  if v0 == v1 then goto L450f96;
  #L450f90.  call `setCurrent`(v2, v3) @signature `Lio/reactivex/subjects/BehaviorSubject;.setCurrent:(Ljava/lang/Object;)V` @kind virtual;
  #L450f96.  return v0 @kind object;
}
