record `io.reactivex.subjects.SingleSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `java.lang.Throwable` `io.reactivex.subjects.SingleSubject.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.SingleSubject.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.SingleSubject.once` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.subjects.SingleSubject.value` @AccessFlag ;
}
global `io.reactivex.subjects.SingleSubject$SingleDisposable`[] `@@io.reactivex.subjects.SingleSubject.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.SingleSubject$SingleDisposable`[] `@@io.reactivex.subjects.SingleSubject.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/SingleSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4538b0.  v0:= 0I;
  #L4538b2.  v1:= new `io.reactivex.subjects.SingleSubject$SingleDisposable`[v0];
  #L4538b6.  `@@io.reactivex.subjects.SingleSubject.EMPTY` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] := v1 @kind object;
  #L4538ba.  v0:= new `io.reactivex.subjects.SingleSubject$SingleDisposable`[v0];
  #L4538be.  `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] := v0 @kind object;
  #L4538c2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4538d4.  call `<init>`(v2) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L4538da.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4538de.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4538e4.  v2.`io.reactivex.subjects.SingleSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4538e8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4538ec.  v1:= `@@io.reactivex.subjects.SingleSubject.EMPTY` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L4538f0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4538f6.  v2.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4538fa.  return @kind void;
}
procedure `io.reactivex.subjects.SingleSubject` `create`() @signature `Lio/reactivex/subjects/SingleSubject;.create:()Lio/reactivex/subjects/SingleSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L453834.  v0:= new `io.reactivex.subjects.SingleSubject`;
  #L453838.  call `<init>`(v0) @signature `Lio/reactivex/subjects/SingleSubject;.<init>:()V` @kind direct;
  #L45383e.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.subjects.SingleSubject` v4 @kind this, `io.reactivex.subjects.SingleSubject$SingleDisposable` v5 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.add:(Lio/reactivex/subjects/SingleSubject$SingleDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L453724.  v0:= v4.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453728.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45372e.  v0:= temp @kind object;
  #L453730.  v0:= (`io.reactivex.subjects.SingleSubject$SingleDisposable`[]) v0 @kind object;
  #L453734.  v1:= `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L453738.  v2:= 0I;
  #L45373a.  if v0 != v1 then goto L453740;
  #L45373e.  return v2;
  #L453740.  v1:= length @variable v0;
  #L453742.  v3:= v1 + 1;
  #L453746.  v3:= new `io.reactivex.subjects.SingleSubject$SingleDisposable`[v3];
  #L45374a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L453750.  v3[v1]:= v5 @kind object;
  #L453754.  v1:= v4.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453758.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45375e.  v0:= temp;
  #L453760.  if v0 == 0 then goto L453724;
  #L453764.  v5:= 1I;
  #L453766.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453880.  v0:= v2.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453884.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45388a.  v0:= temp @kind object;
  #L45388c.  v1:= `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L453890.  if v0 != v1 then goto L45389a;
  #L453894.  v0:= v2.`io.reactivex.subjects.SingleSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L453898.  return v0 @kind object;
  #L45389a.  v0:= 0I;
  #L45389c.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453850.  v0:= v2.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453854.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45385a.  v0:= temp @kind object;
  #L45385c.  v1:= `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L453860.  if v0 != v1 then goto L45386a;
  #L453864.  v0:= v2.`io.reactivex.subjects.SingleSubject.value` @type ^`java.lang.Object` @kind object;
  #L453868.  return v0 @kind object;
  #L45386a.  v0:= 0I;
  #L45386c.  return v0 @kind object;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.SingleSubject` v1 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453778.  v0:= v1.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45377c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453782.  v0:= temp @kind object;
  #L453784.  v0:= (`io.reactivex.subjects.SingleSubject$SingleDisposable`[]) v0 @kind object;
  #L453788.  v0:= length @variable v0;
  #L45378a.  if v0 == 0 then goto L453792;
  #L45378e.  v0:= 1I;
  #L453790.  goto L453794;
  #L453792.  v0:= 0I;
  #L453794.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4537a8.  v0:= v2.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4537ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4537b2.  v0:= temp @kind object;
  #L4537b4.  v1:= `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L4537b8.  if v0 != v1 then goto L4537c8;
  #L4537bc.  v0:= v2.`io.reactivex.subjects.SingleSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L4537c0.  if v0 == 0 then goto L4537c8;
  #L4537c4.  v0:= 1I;
  #L4537c6.  goto L4537ca;
  #L4537c8.  v0:= 0I;
  #L4537ca.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4537dc.  v0:= v2.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4537e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4537e6.  v0:= temp @kind object;
  #L4537e8.  v1:= `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L4537ec.  if v0 != v1 then goto L4537fc;
  #L4537f0.  v0:= v2.`io.reactivex.subjects.SingleSubject.value` @type ^`java.lang.Object` @kind object;
  #L4537f4.  if v0 == 0 then goto L4537fc;
  #L4537f8.  v0:= 1I;
  #L4537fa.  goto L4537fe;
  #L4537fc.  v0:= 0I;
  #L4537fe.  return v0;
}
procedure `int` `observerCount`(`io.reactivex.subjects.SingleSubject` v1 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.observerCount:()I` @AccessFlag  {
    temp;
    v0;

  #L453810.  v0:= v1.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453814.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45381a.  v0:= temp @kind object;
  #L45381c.  v0:= (`io.reactivex.subjects.SingleSubject$SingleDisposable`[]) v0 @kind object;
  #L453820.  v0:= length @variable v0;
  #L453822.  return v0;
}
procedure `void` `onError`(`io.reactivex.subjects.SingleSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45390c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L453910.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L453916.  v0:= v4.`io.reactivex.subjects.SingleSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45391a.  v1:= 1I;
  #L45391c.  v2:= 0I;
  #L45391e.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L453924.  v0:= temp;
  #L453926.  if v0 == 0 then goto L45395c;
  #L45392a.  v4.`io.reactivex.subjects.SingleSubject.error` @type ^`java.lang.Throwable` := v5 @kind object;
  #L45392e.  v0:= v4.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453932.  v1:= `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L453936.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45393c.  v0:= temp @kind object;
  #L45393e.  v0:= (`io.reactivex.subjects.SingleSubject$SingleDisposable`[]) v0 @kind object;
  #L453942.  v1:= length @variable v0;
  #L453944.  if v2 >= v1 then goto L453962;
  #L453948.  v3:= v0[v2] @kind object;
  #L45394c.  v3:= v3.`io.reactivex.subjects.SingleSubject$SingleDisposable.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L453950.  call `onError`(v3, v5) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L453956.  v2:= v2 + 1;
  #L45395a.  goto L453944;
  #L45395c.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L453962.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.SingleSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453974.  v0:= v2.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453978.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45397e.  v0:= temp @kind object;
  #L453980.  v1:= `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L453984.  if v0 != v1 then goto L45398e;
  #L453988.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45398e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.subjects.SingleSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4539a0.  v0:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4539a4.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4539aa.  v0:= v4.`io.reactivex.subjects.SingleSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4539ae.  v1:= 1I;
  #L4539b0.  v2:= 0I;
  #L4539b2.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4539b8.  v0:= temp;
  #L4539ba.  if v0 == 0 then goto L4539f0;
  #L4539be.  v4.`io.reactivex.subjects.SingleSubject.value` @type ^`java.lang.Object` := v5 @kind object;
  #L4539c2.  v0:= v4.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4539c6.  v1:= `@@io.reactivex.subjects.SingleSubject.TERMINATED` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L4539ca.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4539d0.  v0:= temp @kind object;
  #L4539d2.  v0:= (`io.reactivex.subjects.SingleSubject$SingleDisposable`[]) v0 @kind object;
  #L4539d6.  v1:= length @variable v0;
  #L4539d8.  if v2 >= v1 then goto L4539f0;
  #L4539dc.  v3:= v0[v2] @kind object;
  #L4539e0.  v3:= v3.`io.reactivex.subjects.SingleSubject$SingleDisposable.downstream` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4539e4.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4539ea.  v2:= v2 + 1;
  #L4539ee.  goto L4539d8;
  #L4539f0.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.subjects.SingleSubject` v6 @kind this, `io.reactivex.subjects.SingleSubject$SingleDisposable` v7 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.remove:(Lio/reactivex/subjects/SingleSubject$SingleDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L453a04.  v0:= v6.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453a08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453a0e.  v0:= temp @kind object;
  #L453a10.  v0:= (`io.reactivex.subjects.SingleSubject$SingleDisposable`[]) v0 @kind object;
  #L453a14.  v1:= length @variable v0;
  #L453a16.  if v1 != 0 then goto L453a1c;
  #L453a1a.  return @kind void;
  #L453a1c.  v2:= -1I;
  #L453a1e.  v3:= 0I;
  #L453a20.  v4:= 0I;
  #L453a22.  if v4 >= v1 then goto L453a38;
  #L453a26.  v5:= v0[v4] @kind object;
  #L453a2a.  if v5 != v7 then goto L453a32;
  #L453a2e.  v2:= v4;
  #L453a30.  goto L453a38;
  #L453a32.  v4:= v4 + 1;
  #L453a36.  goto L453a22;
  #L453a38.  if v2 >= 0 then goto L453a3e;
  #L453a3c.  return @kind void;
  #L453a3e.  v4:= 1I;
  #L453a40.  if v1 != v4 then goto L453a4a;
  #L453a44.  v1:= `@@io.reactivex.subjects.SingleSubject.EMPTY` @type ^`io.reactivex.subjects.SingleSubject$SingleDisposable`[] @kind object;
  #L453a48.  goto L453a68;
  #L453a4a.  v5:= v1 + -1;
  #L453a4e.  v5:= new `io.reactivex.subjects.SingleSubject$SingleDisposable`[v5];
  #L453a52.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L453a58.  v3:= v2 + 1;
  #L453a5c.  v1:= v1 - v2 @kind int;
  #L453a5e.  v1:= v1 - v4 @kind int;
  #L453a60.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L453a66.  v1:= v5 @kind object;
  #L453a68.  v2:= v6.`io.reactivex.subjects.SingleSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453a6c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L453a72.  v0:= temp;
  #L453a74.  if v0 == 0 then goto L453a04;
  #L453a78.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.SingleSubject` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L453a8c.  v0:= new `io.reactivex.subjects.SingleSubject$SingleDisposable`;
  #L453a90.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/subjects/SingleSubject;)V` @kind direct;
  #L453a96.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L453a9c.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/subjects/SingleSubject;.add:(Lio/reactivex/subjects/SingleSubject$SingleDisposable;)Z` @kind virtual;
  #L453aa2.  v1:= temp;
  #L453aa4.  if v1 == 0 then goto L453abc;
  #L453aa8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.isDisposed:()Z` @kind virtual;
  #L453aae.  v3:= temp;
  #L453ab0.  if v3 == 0 then goto L453ad6;
  #L453ab4.  call `remove`(v2, v0) @signature `Lio/reactivex/subjects/SingleSubject;.remove:(Lio/reactivex/subjects/SingleSubject$SingleDisposable;)V` @kind virtual;
  #L453aba.  goto L453ad6;
  #L453abc.  v0:= v2.`io.reactivex.subjects.SingleSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L453ac0.  if v0 == 0 then goto L453acc;
  #L453ac4.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L453aca.  goto L453ad6;
  #L453acc.  v0:= v2.`io.reactivex.subjects.SingleSubject.value` @type ^`java.lang.Object` @kind object;
  #L453ad0.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L453ad6.  return @kind void;
}
