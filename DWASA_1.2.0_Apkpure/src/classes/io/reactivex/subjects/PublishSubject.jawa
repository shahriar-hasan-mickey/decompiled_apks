record `io.reactivex.subjects.PublishSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `java.lang.Throwable` `io.reactivex.subjects.PublishSubject.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.PublishSubject.subscribers` @AccessFlag FINAL;
}
global `io.reactivex.subjects.PublishSubject$PublishDisposable`[] `@@io.reactivex.subjects.PublishSubject.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.PublishSubject$PublishDisposable`[] `@@io.reactivex.subjects.PublishSubject.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/PublishSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L451f1c.  v0:= 0I;
  #L451f1e.  v1:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`[v0];
  #L451f22.  `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] := v1 @kind object;
  #L451f26.  v0:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`[v0];
  #L451f2a.  `@@io.reactivex.subjects.PublishSubject.EMPTY` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] := v0 @kind object;
  #L451f2e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L451f40.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L451f46.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L451f4a.  v1:= `@@io.reactivex.subjects.PublishSubject.EMPTY` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L451f4e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L451f54.  v2.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L451f58.  return @kind void;
}
procedure `io.reactivex.subjects.PublishSubject` `create`() @signature `Lio/reactivex/subjects/PublishSubject;.create:()Lio/reactivex/subjects/PublishSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L451ed0.  v0:= new `io.reactivex.subjects.PublishSubject`;
  #L451ed4.  call `<init>`(v0) @signature `Lio/reactivex/subjects/PublishSubject;.<init>:()V` @kind direct;
  #L451eda.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `io.reactivex.subjects.PublishSubject$PublishDisposable` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.add:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L451de4.  v0:= v4.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451de8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451dee.  v0:= temp @kind object;
  #L451df0.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L451df4.  v1:= `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L451df8.  v2:= 0I;
  #L451dfa.  if v0 != v1 then goto L451e00;
  #L451dfe.  return v2;
  #L451e00.  v1:= length @variable v0;
  #L451e02.  v3:= v1 + 1;
  #L451e06.  v3:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`[v3];
  #L451e0a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L451e10.  v3[v1]:= v5 @kind object;
  #L451e14.  v1:= v4.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451e18.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L451e1e.  v0:= temp;
  #L451e20.  if v0 == 0 then goto L451de4;
  #L451e24.  v5:= 1I;
  #L451e26.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451eec.  v0:= v2.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451ef0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451ef6.  v0:= temp @kind object;
  #L451ef8.  v1:= `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L451efc.  if v0 != v1 then goto L451f06;
  #L451f00.  v0:= v2.`io.reactivex.subjects.PublishSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451f04.  return v0 @kind object;
  #L451f06.  v0:= 0I;
  #L451f08.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451e38.  v0:= v2.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451e3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451e42.  v0:= temp @kind object;
  #L451e44.  v1:= `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L451e48.  if v0 != v1 then goto L451e58;
  #L451e4c.  v0:= v2.`io.reactivex.subjects.PublishSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451e50.  if v0 != 0 then goto L451e58;
  #L451e54.  v0:= 1I;
  #L451e56.  goto L451e5a;
  #L451e58.  v0:= 0I;
  #L451e5a.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.PublishSubject` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451e6c.  v0:= v1.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451e70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451e76.  v0:= temp @kind object;
  #L451e78.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L451e7c.  v0:= length @variable v0;
  #L451e7e.  if v0 == 0 then goto L451e86;
  #L451e82.  v0:= 1I;
  #L451e84.  goto L451e88;
  #L451e86.  v0:= 0I;
  #L451e88.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451e9c.  v0:= v2.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451ea0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451ea6.  v0:= temp @kind object;
  #L451ea8.  v1:= `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L451eac.  if v0 != v1 then goto L451ebc;
  #L451eb0.  v0:= v2.`io.reactivex.subjects.PublishSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451eb4.  if v0 == 0 then goto L451ebc;
  #L451eb8.  v0:= 1I;
  #L451eba.  goto L451ebe;
  #L451ebc.  v0:= 0I;
  #L451ebe.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.PublishSubject` v4 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L451f6c.  v0:= v4.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451f70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451f76.  v0:= temp @kind object;
  #L451f78.  v1:= `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L451f7c.  if v0 != v1 then goto L451f82;
  #L451f80.  return @kind void;
  #L451f82.  v0:= v4.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451f86.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451f8c.  v0:= temp @kind object;
  #L451f8e.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L451f92.  v1:= length @variable v0;
  #L451f94.  v2:= 0I;
  #L451f96.  if v2 >= v1 then goto L451faa;
  #L451f9a.  v3:= v0[v2] @kind object;
  #L451f9e.  call `onComplete`(v3) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onComplete:()V` @kind virtual;
  #L451fa4.  v2:= v2 + 1;
  #L451fa8.  goto L451f96;
  #L451faa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L451fbc.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L451fc0.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L451fc6.  v0:= v4.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451fca.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451fd0.  v0:= temp @kind object;
  #L451fd2.  v1:= `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L451fd6.  if v0 != v1 then goto L451fe2;
  #L451fda.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L451fe0.  return @kind void;
  #L451fe2.  v4.`io.reactivex.subjects.PublishSubject.error` @type ^`java.lang.Throwable` := v5 @kind object;
  #L451fe6.  v0:= v4.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451fea.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451ff0.  v0:= temp @kind object;
  #L451ff2.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L451ff6.  v1:= length @variable v0;
  #L451ff8.  v2:= 0I;
  #L451ffa.  if v2 >= v1 then goto L45200e;
  #L451ffe.  v3:= v0[v2] @kind object;
  #L452002.  call `onError`(v3, v5) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L452008.  v2:= v2 + 1;
  #L45200c.  goto L451ffa;
  #L45200e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L452020.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L452024.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45202a.  v0:= v4.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45202e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L452034.  v0:= temp @kind object;
  #L452036.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L45203a.  v1:= length @variable v0;
  #L45203c.  v2:= 0I;
  #L45203e.  if v2 >= v1 then goto L452052;
  #L452042.  v3:= v0[v2] @kind object;
  #L452046.  call `onNext`(v3, v5) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L45204c.  v2:= v2 + 1;
  #L452050.  goto L45203e;
  #L452052.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.PublishSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L452064.  v0:= v2.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452068.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45206e.  v0:= temp @kind object;
  #L452070.  v1:= `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L452074.  if v0 != v1 then goto L45207e;
  #L452078.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45207e.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.subjects.PublishSubject` v6 @kind this, `io.reactivex.subjects.PublishSubject$PublishDisposable` v7 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.remove:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L452090.  v0:= v6.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452094.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45209a.  v0:= temp @kind object;
  #L45209c.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L4520a0.  v1:= `@@io.reactivex.subjects.PublishSubject.TERMINATED` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L4520a4.  if v0 == v1 then goto L452110;
  #L4520a8.  v1:= `@@io.reactivex.subjects.PublishSubject.EMPTY` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L4520ac.  if v0 != v1 then goto L4520b2;
  #L4520b0.  goto L452110;
  #L4520b2.  v1:= length @variable v0;
  #L4520b4.  v2:= -1I;
  #L4520b6.  v3:= 0I;
  #L4520b8.  v4:= 0I;
  #L4520ba.  if v4 >= v1 then goto L4520d0;
  #L4520be.  v5:= v0[v4] @kind object;
  #L4520c2.  if v5 != v7 then goto L4520ca;
  #L4520c6.  v2:= v4;
  #L4520c8.  goto L4520d0;
  #L4520ca.  v4:= v4 + 1;
  #L4520ce.  goto L4520ba;
  #L4520d0.  if v2 >= 0 then goto L4520d6;
  #L4520d4.  return @kind void;
  #L4520d6.  v4:= 1I;
  #L4520d8.  if v1 != v4 then goto L4520e2;
  #L4520dc.  v1:= `@@io.reactivex.subjects.PublishSubject.EMPTY` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L4520e0.  goto L452100;
  #L4520e2.  v5:= v1 + -1;
  #L4520e6.  v5:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`[v5];
  #L4520ea.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4520f0.  v3:= v2 + 1;
  #L4520f4.  v1:= v1 - v2 @kind int;
  #L4520f6.  v1:= v1 - v4 @kind int;
  #L4520f8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4520fe.  v1:= v5 @kind object;
  #L452100.  v2:= v6.`io.reactivex.subjects.PublishSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452104.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45210a.  v0:= temp;
  #L45210c.  if v0 == 0 then goto L452090;
  #L452110.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.PublishSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L452124.  v0:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`;
  #L452128.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/PublishSubject;)V` @kind direct;
  #L45212e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L452134.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/subjects/PublishSubject;.add:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)Z` @kind virtual;
  #L45213a.  v1:= temp;
  #L45213c.  if v1 == 0 then goto L452154;
  #L452140.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.isDisposed:()Z` @kind virtual;
  #L452146.  v3:= temp;
  #L452148.  if v3 == 0 then goto L45216a;
  #L45214c.  call `remove`(v2, v0) @signature `Lio/reactivex/subjects/PublishSubject;.remove:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)V` @kind virtual;
  #L452152.  goto L45216a;
  #L452154.  v0:= v2.`io.reactivex.subjects.PublishSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L452158.  if v0 == 0 then goto L452164;
  #L45215c.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L452162.  goto L45216a;
  #L452164.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45216a.  return @kind void;
}
