record `io.reactivex.subjects.AsyncSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `java.lang.Throwable` `io.reactivex.subjects.AsyncSubject.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.AsyncSubject.subscribers` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.subjects.AsyncSubject.value` @AccessFlag ;
}
global `io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] `@@io.reactivex.subjects.AsyncSubject.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/AsyncSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45094c.  v0:= 0I;
  #L45094e.  v1:= new `io.reactivex.subjects.AsyncSubject$AsyncDisposable`[v0];
  #L450952.  `@@io.reactivex.subjects.AsyncSubject.EMPTY` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] := v1 @kind object;
  #L450956.  v0:= new `io.reactivex.subjects.AsyncSubject$AsyncDisposable`[v0];
  #L45095a.  `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] := v0 @kind object;
  #L45095e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L450970.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L450976.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45097a.  v1:= `@@io.reactivex.subjects.AsyncSubject.EMPTY` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L45097e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L450984.  v2.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L450988.  return @kind void;
}
procedure `io.reactivex.subjects.AsyncSubject` `create`() @signature `Lio/reactivex/subjects/AsyncSubject;.create:()Lio/reactivex/subjects/AsyncSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L450854.  v0:= new `io.reactivex.subjects.AsyncSubject`;
  #L450858.  call `<init>`(v0) @signature `Lio/reactivex/subjects/AsyncSubject;.<init>:()V` @kind direct;
  #L45085e.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.subjects.AsyncSubject` v4 @kind this, `io.reactivex.subjects.AsyncSubject$AsyncDisposable` v5 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.add:(Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L450734.  v0:= v4.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450738.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45073e.  v0:= temp @kind object;
  #L450740.  v0:= (`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[]) v0 @kind object;
  #L450744.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L450748.  v2:= 0I;
  #L45074a.  if v0 != v1 then goto L450750;
  #L45074e.  return v2;
  #L450750.  v1:= length @variable v0;
  #L450752.  v3:= v1 + 1;
  #L450756.  v3:= new `io.reactivex.subjects.AsyncSubject$AsyncDisposable`[v3];
  #L45075a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L450760.  v3[v1]:= v5 @kind object;
  #L450764.  v1:= v4.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450768.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45076e.  v0:= temp;
  #L450770.  if v0 == 0 then goto L450734;
  #L450774.  v5:= 1I;
  #L450776.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45091c.  v0:= v2.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450920.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450926.  v0:= temp @kind object;
  #L450928.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L45092c.  if v0 != v1 then goto L450936;
  #L450930.  v0:= v2.`io.reactivex.subjects.AsyncSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L450934.  goto L450938;
  #L450936.  v0:= 0I;
  #L450938.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450870.  v0:= v2.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450874.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45087a.  v0:= temp @kind object;
  #L45087c.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L450880.  if v0 != v1 then goto L45088a;
  #L450884.  v0:= v2.`io.reactivex.subjects.AsyncSubject.value` @type ^`java.lang.Object` @kind object;
  #L450888.  goto L45088c;
  #L45088a.  v0:= 0I;
  #L45088c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.AsyncSubject` v3 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4508a0.  call temp:= `getValue`(v3) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4508a6.  v0:= temp @kind object;
  #L4508a8.  v1:= 0I;
  #L4508aa.  if v0 == 0 then goto L4508ba;
  #L4508ae.  v2:= 1I;
  #L4508b0.  v2:= new `java.lang.Object`[v2];
  #L4508b4.  v2[v1]:= v0 @kind object;
  #L4508b8.  goto L4508be;
  #L4508ba.  v2:= new `java.lang.Object`[v1];
  #L4508be.  return v2 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.AsyncSubject` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4508d0.  call temp:= `getValue`(v5) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4508d6.  v0:= temp @kind object;
  #L4508d8.  v1:= 0I;
  #L4508da.  v2:= 0I;
  #L4508dc.  if v0 != 0 then goto L4508ec;
  #L4508e0.  v0:= length @variable v6;
  #L4508e2.  if v0 == 0 then goto L4508ea;
  #L4508e6.  v6[v2]:= v1 @kind object;
  #L4508ea.  return v6 @kind object;
  #L4508ec.  v3:= length @variable v6;
  #L4508ee.  v4:= 1I;
  #L4508f0.  if v3 != 0 then goto L4508fc;
  #L4508f4.  call temp:= `copyOf`(v6, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L4508fa.  v6:= temp @kind object;
  #L4508fc.  v6[v2]:= v0 @kind object;
  #L450900.  v0:= length @variable v6;
  #L450902.  if v0 == v4 then goto L45090a;
  #L450906.  v6[v4]:= v1 @kind object;
  #L45090a.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450788.  v0:= v2.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45078c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450792.  v0:= temp @kind object;
  #L450794.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L450798.  if v0 != v1 then goto L4507a8;
  #L45079c.  v0:= v2.`io.reactivex.subjects.AsyncSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L4507a0.  if v0 != 0 then goto L4507a8;
  #L4507a4.  v0:= 1I;
  #L4507a6.  goto L4507aa;
  #L4507a8.  v0:= 0I;
  #L4507aa.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.AsyncSubject` v1 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4507bc.  v0:= v1.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4507c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4507c6.  v0:= temp @kind object;
  #L4507c8.  v0:= (`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[]) v0 @kind object;
  #L4507cc.  v0:= length @variable v0;
  #L4507ce.  if v0 == 0 then goto L4507d6;
  #L4507d2.  v0:= 1I;
  #L4507d4.  goto L4507d8;
  #L4507d6.  v0:= 0I;
  #L4507d8.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4507ec.  v0:= v2.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4507f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4507f6.  v0:= temp @kind object;
  #L4507f8.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L4507fc.  if v0 != v1 then goto L45080c;
  #L450800.  v0:= v2.`io.reactivex.subjects.AsyncSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L450804.  if v0 == 0 then goto L45080c;
  #L450808.  v0:= 1I;
  #L45080a.  goto L45080e;
  #L45080c.  v0:= 0I;
  #L45080e.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450820.  v0:= v2.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450824.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45082a.  v0:= temp @kind object;
  #L45082c.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L450830.  if v0 != v1 then goto L450840;
  #L450834.  v0:= v2.`io.reactivex.subjects.AsyncSubject.value` @type ^`java.lang.Object` @kind object;
  #L450838.  if v0 == 0 then goto L450840;
  #L45083c.  v0:= 1I;
  #L45083e.  goto L450842;
  #L450840.  v0:= 0I;
  #L450842.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.AsyncSubject` v5 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45099c.  v0:= v5.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4509a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4509a6.  v0:= temp @kind object;
  #L4509a8.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L4509ac.  if v0 != v1 then goto L4509b2;
  #L4509b0.  return @kind void;
  #L4509b2.  v0:= v5.`io.reactivex.subjects.AsyncSubject.value` @type ^`java.lang.Object` @kind object;
  #L4509b6.  v2:= v5.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4509ba.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4509c0.  v1:= temp @kind object;
  #L4509c2.  v1:= (`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[]) v1 @kind object;
  #L4509c6.  v2:= 0I;
  #L4509c8.  if v0 != 0 then goto L4509e2;
  #L4509cc.  v0:= length @variable v1;
  #L4509ce.  if v2 >= v0 then goto L4509f8;
  #L4509d2.  v3:= v1[v2] @kind object;
  #L4509d6.  call `onComplete`(v3) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.onComplete:()V` @kind virtual;
  #L4509dc.  v2:= v2 + 1;
  #L4509e0.  goto L4509ce;
  #L4509e2.  v3:= length @variable v1;
  #L4509e4.  if v2 >= v3 then goto L4509f8;
  #L4509e8.  v4:= v1[v2] @kind object;
  #L4509ec.  call `complete`(v4, v0) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4509f2.  v2:= v2 + 1;
  #L4509f6.  goto L4509e4;
  #L4509f8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.AsyncSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L450a0c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L450a10.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L450a16.  v0:= v4.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450a1a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450a20.  v0:= temp @kind object;
  #L450a22.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L450a26.  if v0 != v1 then goto L450a32;
  #L450a2a.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L450a30.  return @kind void;
  #L450a32.  v0:= 0I;
  #L450a34.  v4.`io.reactivex.subjects.AsyncSubject.value` @type ^`java.lang.Object` := v0 @kind object;
  #L450a38.  v4.`io.reactivex.subjects.AsyncSubject.error` @type ^`java.lang.Throwable` := v5 @kind object;
  #L450a3c.  v0:= v4.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450a40.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L450a46.  v0:= temp @kind object;
  #L450a48.  v0:= (`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[]) v0 @kind object;
  #L450a4c.  v1:= length @variable v0;
  #L450a4e.  v2:= 0I;
  #L450a50.  if v2 >= v1 then goto L450a64;
  #L450a54.  v3:= v0[v2] @kind object;
  #L450a58.  call `onError`(v3, v5) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L450a5e.  v2:= v2 + 1;
  #L450a62.  goto L450a50;
  #L450a64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450a78.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L450a7c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L450a82.  v0:= v2.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450a86.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450a8c.  v0:= temp @kind object;
  #L450a8e.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L450a92.  if v0 != v1 then goto L450a98;
  #L450a96.  return @kind void;
  #L450a98.  v2.`io.reactivex.subjects.AsyncSubject.value` @type ^`java.lang.Object` := v3 @kind object;
  #L450a9c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450ab0.  v0:= v2.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450ab4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450aba.  v0:= temp @kind object;
  #L450abc.  v1:= `@@io.reactivex.subjects.AsyncSubject.TERMINATED` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L450ac0.  if v0 != v1 then goto L450aca;
  #L450ac4.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L450aca.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.subjects.AsyncSubject` v6 @kind this, `io.reactivex.subjects.AsyncSubject$AsyncDisposable` v7 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.remove:(Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L450adc.  v0:= v6.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450ae0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450ae6.  v0:= temp @kind object;
  #L450ae8.  v0:= (`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[]) v0 @kind object;
  #L450aec.  v1:= length @variable v0;
  #L450aee.  if v1 != 0 then goto L450af4;
  #L450af2.  return @kind void;
  #L450af4.  v2:= -1I;
  #L450af6.  v3:= 0I;
  #L450af8.  v4:= 0I;
  #L450afa.  if v4 >= v1 then goto L450b10;
  #L450afe.  v5:= v0[v4] @kind object;
  #L450b02.  if v5 != v7 then goto L450b0a;
  #L450b06.  v2:= v4;
  #L450b08.  goto L450b10;
  #L450b0a.  v4:= v4 + 1;
  #L450b0e.  goto L450afa;
  #L450b10.  if v2 >= 0 then goto L450b16;
  #L450b14.  return @kind void;
  #L450b16.  v4:= 1I;
  #L450b18.  if v1 != v4 then goto L450b22;
  #L450b1c.  v1:= `@@io.reactivex.subjects.AsyncSubject.EMPTY` @type ^`io.reactivex.subjects.AsyncSubject$AsyncDisposable`[] @kind object;
  #L450b20.  goto L450b40;
  #L450b22.  v5:= v1 + -1;
  #L450b26.  v5:= new `io.reactivex.subjects.AsyncSubject$AsyncDisposable`[v5];
  #L450b2a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L450b30.  v3:= v2 + 1;
  #L450b34.  v1:= v1 - v2 @kind int;
  #L450b36.  v1:= v1 - v4 @kind int;
  #L450b38.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L450b3e.  v1:= v5 @kind object;
  #L450b40.  v2:= v6.`io.reactivex.subjects.AsyncSubject.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450b44.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L450b4a.  v0:= temp;
  #L450b4c.  if v0 == 0 then goto L450adc;
  #L450b50.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L450b64.  v0:= new `io.reactivex.subjects.AsyncSubject$AsyncDisposable`;
  #L450b68.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/AsyncSubject;)V` @kind direct;
  #L450b6e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L450b74.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/subjects/AsyncSubject;.add:(Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;)Z` @kind virtual;
  #L450b7a.  v1:= temp;
  #L450b7c.  if v1 == 0 then goto L450b94;
  #L450b80.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.isDisposed:()Z` @kind virtual;
  #L450b86.  v3:= temp;
  #L450b88.  if v3 == 0 then goto L450bba;
  #L450b8c.  call `remove`(v2, v0) @signature `Lio/reactivex/subjects/AsyncSubject;.remove:(Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;)V` @kind virtual;
  #L450b92.  goto L450bba;
  #L450b94.  v1:= v2.`io.reactivex.subjects.AsyncSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L450b98.  if v1 == 0 then goto L450ba4;
  #L450b9c.  call `onError`(v3, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450ba2.  goto L450bba;
  #L450ba4.  v3:= v2.`io.reactivex.subjects.AsyncSubject.value` @type ^`java.lang.Object` @kind object;
  #L450ba8.  if v3 == 0 then goto L450bb4;
  #L450bac.  call `complete`(v0, v3) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L450bb2.  goto L450bba;
  #L450bb4.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.onComplete:()V` @kind virtual;
  #L450bba.  return @kind void;
}
