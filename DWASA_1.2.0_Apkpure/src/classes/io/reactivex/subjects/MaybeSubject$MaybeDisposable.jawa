record `io.reactivex.subjects.MaybeSubject$MaybeDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.subjects.MaybeSubject$MaybeDisposable.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.MaybeSubject$MaybeDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.MaybeSubject$MaybeDisposable` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.subjects.MaybeSubject` v2 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/subjects/MaybeSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45184c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L451852.  v0.`io.reactivex.subjects.MaybeSubject$MaybeDisposable.downstream` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L451856.  call `lazySet`(v0, v2) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L45185c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.MaybeSubject$MaybeDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451870.  v0:= 0I;
  #L451872.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451878.  v0:= temp @kind object;
  #L45187a.  v0:= (`io.reactivex.subjects.MaybeSubject`) v0 @kind object;
  #L45187e.  if v0 == 0 then goto L451888;
  #L451882.  call `remove`(v0, v1) @signature `Lio/reactivex/subjects/MaybeSubject;.remove:(Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;)V` @kind virtual;
  #L451888.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.MaybeSubject$MaybeDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451828.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L45182e.  v0:= temp @kind object;
  #L451830.  if v0 != 0 then goto L451838;
  #L451834.  v0:= 1I;
  #L451836.  goto L45183a;
  #L451838.  v0:= 0I;
  #L45183a.  return v0;
}
