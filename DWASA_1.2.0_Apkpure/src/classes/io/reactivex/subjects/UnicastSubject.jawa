record `io.reactivex.subjects.UnicastSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `boolean` `io.reactivex.subjects.UnicastSubject.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.UnicastSubject.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.subjects.UnicastSubject.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.UnicastSubject.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.UnicastSubject.enableOperatorFusion` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.subjects.UnicastSubject.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.UnicastSubject.onTerminate` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.UnicastSubject.once` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.subjects.UnicastSubject.queue` @AccessFlag FINAL;
  `io.reactivex.internal.observers.BasicIntQueueDisposable` `io.reactivex.subjects.UnicastSubject.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L453e4c.  v0:= 1I;
  #L453e4e.  call `<init>`(v1, v2, v3, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L453e54.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L453e68.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L453e6e.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L453e72.  v1:= "capacityHint" @kind object;
  #L453e76.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L453e7c.  v3:= temp;
  #L453e7e.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L453e84.  v2.`io.reactivex.subjects.UnicastSubject.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L453e88.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L453e8c.  v0:= "onTerminate" @kind object;
  #L453e90.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L453e96.  v4:= temp @kind object;
  #L453e98.  call `<init>`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L453e9e.  v2.`io.reactivex.subjects.UnicastSubject.onTerminate` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L453ea2.  v2.`io.reactivex.subjects.UnicastSubject.delayError` @type ^`boolean` := v5 @kind boolean;
  #L453ea6.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L453eaa.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L453eb0.  v2.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L453eb4.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L453eb8.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L453ebe.  v2.`io.reactivex.subjects.UnicastSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L453ec2.  v3:= new `io.reactivex.subjects.UnicastSubject$UnicastQueueDisposable`;
  #L453ec6.  call `<init>`(v3, v2) @signature `Lio/reactivex/subjects/UnicastSubject$UnicastQueueDisposable;.<init>:(Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L453ecc.  v2.`io.reactivex.subjects.UnicastSubject.wip` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` := v3 @kind object;
  #L453ed0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L453ddc.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L453de2.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L453de6.  v1:= "capacityHint" @kind object;
  #L453dea.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L453df0.  v3:= temp;
  #L453df2.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L453df8.  v2.`io.reactivex.subjects.UnicastSubject.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L453dfc.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L453e00.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L453e06.  v2.`io.reactivex.subjects.UnicastSubject.onTerminate` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L453e0a.  v2.`io.reactivex.subjects.UnicastSubject.delayError` @type ^`boolean` := v4 @kind boolean;
  #L453e0e.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L453e12.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L453e18.  v2.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L453e1c.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L453e20.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L453e26.  v2.`io.reactivex.subjects.UnicastSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L453e2a.  v3:= new `io.reactivex.subjects.UnicastSubject$UnicastQueueDisposable`;
  #L453e2e.  call `<init>`(v3, v2) @signature `Lio/reactivex/subjects/UnicastSubject$UnicastQueueDisposable;.<init>:(Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L453e34.  v2.`io.reactivex.subjects.UnicastSubject.wip` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` := v3 @kind object;
  #L453e38.  return @kind void;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`() @signature `Lio/reactivex/subjects/UnicastSubject;.create:()Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L453d10.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L453d14.  call temp:= `bufferSize`() @signature `Lio/reactivex/subjects/UnicastSubject;.bufferSize:()I` @kind static;
  #L453d1a.  v1:= temp;
  #L453d1c.  v2:= 1I;
  #L453d1e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L453d24.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v2 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L453d5c.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L453d60.  v1:= 1I;
  #L453d62.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L453d68.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L453d7c.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L453d80.  v1:= 1I;
  #L453d82.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L453d88.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L453d9c.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L453da0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L453da6.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`boolean` v2 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(Z)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L453d38.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L453d3c.  call temp:= `bufferSize`() @signature `Lio/reactivex/subjects/UnicastSubject;.bufferSize:()I` @kind static;
  #L453d42.  v1:= temp;
  #L453d44.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L453d4a.  return v0 @kind object;
}
procedure `void` `doTerminate`(`io.reactivex.subjects.UnicastSubject` v3 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.doTerminate:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L453ee4.  v0:= v3.`io.reactivex.subjects.UnicastSubject.onTerminate` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453ee8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453eee.  v0:= temp @kind object;
  #L453ef0.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L453ef4.  if v0 == 0 then goto L453f10;
  #L453ef8.  v1:= v3.`io.reactivex.subjects.UnicastSubject.onTerminate` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453efc.  v2:= 0I;
  #L453efe.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L453f04.  v1:= temp;
  #L453f06.  if v1 == 0 then goto L453f10;
  #L453f0a.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L453f10.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.subjects.UnicastSubject` v2 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L453f24.  v0:= v2.`io.reactivex.subjects.UnicastSubject.wip` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L453f28.  call temp:= `getAndIncrement`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.getAndIncrement:()I` @kind virtual;
  #L453f2e.  v0:= temp;
  #L453f30.  if v0 == 0 then goto L453f36;
  #L453f34.  return @kind void;
  #L453f36.  v0:= v2.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453f3a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453f40.  v0:= temp @kind object;
  #L453f42.  v0:= (`io.reactivex.Observer`) v0 @kind object;
  #L453f46.  v1:= 1I;
  #L453f48.  if v0 == 0 then goto L453f64;
  #L453f4c.  v1:= v2.`io.reactivex.subjects.UnicastSubject.enableOperatorFusion` @type ^`boolean` @kind boolean;
  #L453f50.  if v1 == 0 then goto L453f5c;
  #L453f54.  call `drainFused`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.drainFused:(Lio/reactivex/Observer;)V` @kind virtual;
  #L453f5a.  goto L453f62;
  #L453f5c.  call `drainNormal`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.drainNormal:(Lio/reactivex/Observer;)V` @kind virtual;
  #L453f62.  return @kind void;
  #L453f64.  v0:= v2.`io.reactivex.subjects.UnicastSubject.wip` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L453f68.  v1:= -v1 @kind int;
  #L453f6a.  call temp:= `addAndGet`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.addAndGet:(I)I` @kind virtual;
  #L453f70.  v1:= temp;
  #L453f72.  if v1 != 0 then goto L453f78;
  #L453f76.  return @kind void;
  #L453f78.  v0:= v2.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453f7c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453f82.  v0:= temp @kind object;
  #L453f84.  v0:= (`io.reactivex.Observer`) v0 @kind object;
  #L453f88.  goto L453f48;
}
procedure `void` `drainFused`(`io.reactivex.subjects.UnicastSubject` v6 @kind this, `io.reactivex.Observer` v7 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.drainFused:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L453f9c.  v0:= v6.`io.reactivex.subjects.UnicastSubject.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L453fa0.  v1:= v6.`io.reactivex.subjects.UnicastSubject.delayError` @type ^`boolean` @kind boolean;
  #L453fa4.  v2:= 1I;
  #L453fa6.  v1:= v1 ^~ v2 @kind int;
  #L453fa8.  v3:= v6.`io.reactivex.subjects.UnicastSubject.disposed` @type ^`boolean` @kind boolean;
  #L453fac.  v4:= 0I;
  #L453fae.  if v3 == 0 then goto L453fc4;
  #L453fb2.  v7:= v6.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453fb6.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L453fbc.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L453fc2.  return @kind void;
  #L453fc4.  v3:= v6.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L453fc8.  if v1 == 0 then goto L453fde;
  #L453fcc.  if v3 == 0 then goto L453fde;
  #L453fd0.  call temp:= `failedFast`(v6, v0, v7) @signature `Lio/reactivex/subjects/UnicastSubject;.failedFast:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @kind virtual;
  #L453fd6.  v5:= temp;
  #L453fd8.  if v5 == 0 then goto L453fde;
  #L453fdc.  return @kind void;
  #L453fde.  call `onNext`(v7, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L453fe4.  if v3 == 0 then goto L453ff0;
  #L453fe8.  call `errorOrComplete`(v6, v7) @signature `Lio/reactivex/subjects/UnicastSubject;.errorOrComplete:(Lio/reactivex/Observer;)V` @kind virtual;
  #L453fee.  return @kind void;
  #L453ff0.  v3:= v6.`io.reactivex.subjects.UnicastSubject.wip` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L453ff4.  v2:= -v2 @kind int;
  #L453ff6.  call temp:= `addAndGet`(v3, v2) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.addAndGet:(I)I` @kind virtual;
  #L453ffc.  v2:= temp;
  #L453ffe.  if v2 != 0 then goto L453fa8;
  #L454002.  return @kind void;
}
procedure `void` `drainNormal`(`io.reactivex.subjects.UnicastSubject` v9 @kind this, `io.reactivex.Observer` v10 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.drainNormal:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L454014.  v0:= v9.`io.reactivex.subjects.UnicastSubject.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L454018.  v1:= v9.`io.reactivex.subjects.UnicastSubject.delayError` @type ^`boolean` @kind boolean;
  #L45401c.  v2:= 1I;
  #L45401e.  v1:= v1 ^~ v2 @kind int;
  #L454020.  v3:= 1I;
  #L454022.  v4:= 1I;
  #L454024.  v5:= v9.`io.reactivex.subjects.UnicastSubject.disposed` @type ^`boolean` @kind boolean;
  #L454028.  if v5 == 0 then goto L454040;
  #L45402c.  v10:= v9.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454030.  v1:= 0I;
  #L454032.  call `lazySet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L454038.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45403e.  return @kind void;
  #L454040.  v5:= v9.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L454044.  v6:= v9.`io.reactivex.subjects.UnicastSubject.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L454048.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L45404e.  v6:= temp @kind object;
  #L454050.  v7:= 0I;
  #L454052.  if v6 != 0 then goto L45405a;
  #L454056.  v8:= 1I;
  #L454058.  goto L45405c;
  #L45405a.  v8:= 0I;
  #L45405c.  if v5 == 0 then goto L454084;
  #L454060.  if v1 == 0 then goto L454078;
  #L454064.  if v3 == 0 then goto L454078;
  #L454068.  call temp:= `failedFast`(v9, v0, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.failedFast:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @kind virtual;
  #L45406e.  v3:= temp;
  #L454070.  if v3 == 0 then goto L454076;
  #L454074.  return @kind void;
  #L454076.  v3:= 0I;
  #L454078.  if v8 == 0 then goto L454084;
  #L45407c.  call `errorOrComplete`(v9, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.errorOrComplete:(Lio/reactivex/Observer;)V` @kind virtual;
  #L454082.  return @kind void;
  #L454084.  if v8 == 0 then goto L45409c;
  #L454088.  v5:= v9.`io.reactivex.subjects.UnicastSubject.wip` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L45408c.  v4:= -v4 @kind int;
  #L45408e.  call temp:= `addAndGet`(v5, v4) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.addAndGet:(I)I` @kind virtual;
  #L454094.  v4:= temp;
  #L454096.  if v4 != 0 then goto L454024;
  #L45409a.  return @kind void;
  #L45409c.  call `onNext`(v10, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4540a2.  goto L454024;
}
procedure `void` `errorOrComplete`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.errorOrComplete:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4540b4.  v0:= v2.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4540b8.  v1:= 0I;
  #L4540ba.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4540c0.  v0:= v2.`io.reactivex.subjects.UnicastSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L4540c4.  if v0 == 0 then goto L4540d0;
  #L4540c8.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4540ce.  goto L4540d6;
  #L4540d0.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4540d6.  return @kind void;
}
procedure `boolean` `failedFast`(`io.reactivex.subjects.UnicastSubject` v3 @kind this, `io.reactivex.internal.fuseable.SimpleQueue` v4 @kind object, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.failedFast:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L453c60.  v0:= v3.`io.reactivex.subjects.UnicastSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L453c64.  if v0 == 0 then goto L453c84;
  #L453c68.  v1:= v3.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453c6c.  v2:= 0I;
  #L453c6e.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L453c74.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L453c7a.  call `onError`(v5, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L453c80.  v4:= 1I;
  #L453c82.  return v4;
  #L453c84.  v4:= 0I;
  #L453c86.  return v4;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453db8.  v0:= v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L453dbc.  if v0 == 0 then goto L453dc6;
  #L453dc0.  v0:= v1.`io.reactivex.subjects.UnicastSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L453dc4.  return v0 @kind object;
  #L453dc6.  v0:= 0I;
  #L453dc8.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453c98.  v0:= v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L453c9c.  if v0 == 0 then goto L453cac;
  #L453ca0.  v0:= v1.`io.reactivex.subjects.UnicastSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L453ca4.  if v0 != 0 then goto L453cac;
  #L453ca8.  v0:= 1I;
  #L453caa.  goto L453cae;
  #L453cac.  v0:= 0I;
  #L453cae.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453cc0.  v0:= v1.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453cc4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453cca.  v0:= temp @kind object;
  #L453ccc.  if v0 == 0 then goto L453cd4;
  #L453cd0.  v0:= 1I;
  #L453cd2.  goto L453cd6;
  #L453cd4.  v0:= 0I;
  #L453cd6.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453ce8.  v0:= v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L453cec.  if v0 == 0 then goto L453cfc;
  #L453cf0.  v0:= v1.`io.reactivex.subjects.UnicastSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L453cf4.  if v0 == 0 then goto L453cfc;
  #L453cf8.  v0:= 1I;
  #L453cfa.  goto L453cfe;
  #L453cfc.  v0:= 0I;
  #L453cfe.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4540e8.  v0:= v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L4540ec.  if v0 != 0 then goto L45410c;
  #L4540f0.  v0:= v1.`io.reactivex.subjects.UnicastSubject.disposed` @type ^`boolean` @kind boolean;
  #L4540f4.  if v0 == 0 then goto L4540fa;
  #L4540f8.  goto L45410c;
  #L4540fa.  v0:= 1I;
  #L4540fc.  v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` := v0 @kind boolean;
  #L454100.  call `doTerminate`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.doTerminate:()V` @kind virtual;
  #L454106.  call `drain`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.drain:()V` @kind virtual;
  #L45410c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454120.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L454124.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45412a.  v0:= v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L45412e.  if v0 != 0 then goto L454154;
  #L454132.  v0:= v1.`io.reactivex.subjects.UnicastSubject.disposed` @type ^`boolean` @kind boolean;
  #L454136.  if v0 == 0 then goto L45413c;
  #L45413a.  goto L454154;
  #L45413c.  v1.`io.reactivex.subjects.UnicastSubject.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L454140.  v2:= 1I;
  #L454142.  v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` := v2 @kind boolean;
  #L454146.  call `doTerminate`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.doTerminate:()V` @kind virtual;
  #L45414c.  call `drain`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.drain:()V` @kind virtual;
  #L454152.  return @kind void;
  #L454154.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45415a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45416c.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L454170.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L454176.  v0:= v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L45417a.  if v0 != 0 then goto L454198;
  #L45417e.  v0:= v1.`io.reactivex.subjects.UnicastSubject.disposed` @type ^`boolean` @kind boolean;
  #L454182.  if v0 == 0 then goto L454188;
  #L454186.  goto L454198;
  #L454188.  v0:= v1.`io.reactivex.subjects.UnicastSubject.queue` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L45418c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L454192.  call `drain`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.drain:()V` @kind virtual;
  #L454198.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4541ac.  v0:= v1.`io.reactivex.subjects.UnicastSubject.done` @type ^`boolean` @kind boolean;
  #L4541b0.  if v0 != 0 then goto L4541bc;
  #L4541b4.  v0:= v1.`io.reactivex.subjects.UnicastSubject.disposed` @type ^`boolean` @kind boolean;
  #L4541b8.  if v0 == 0 then goto L4541c2;
  #L4541bc.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4541c2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.UnicastSubject` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4541d4.  v0:= v3.`io.reactivex.subjects.UnicastSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4541d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4541de.  v0:= temp;
  #L4541e0.  if v0 != 0 then goto L45422a;
  #L4541e4.  v0:= v3.`io.reactivex.subjects.UnicastSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4541e8.  v1:= 0I;
  #L4541ea.  v2:= 1I;
  #L4541ec.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4541f2.  v0:= temp;
  #L4541f4.  if v0 == 0 then goto L45422a;
  #L4541f8.  v0:= v3.`io.reactivex.subjects.UnicastSubject.wip` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4541fc.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L454202.  v0:= v3.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454206.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L45420c.  v4:= v3.`io.reactivex.subjects.UnicastSubject.disposed` @type ^`boolean` @kind boolean;
  #L454210.  if v4 == 0 then goto L454222;
  #L454214.  v4:= v3.`io.reactivex.subjects.UnicastSubject.downstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454218.  v0:= 0I;
  #L45421a.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L454220.  return @kind void;
  #L454222.  call `drain`(v3) @signature `Lio/reactivex/subjects/UnicastSubject;.drain:()V` @kind virtual;
  #L454228.  goto L45423e;
  #L45422a.  v0:= new `java.lang.IllegalStateException`;
  #L45422e.  v1:= "Only a single observer allowed." @kind object;
  #L454232.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L454238.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L45423e.  return @kind void;
}
