record `io.reactivex.subjects.PublishSubject$PublishDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @AccessFlag FINAL;
  `io.reactivex.subjects.PublishSubject` `io.reactivex.subjects.PublishSubject$PublishDisposable.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.PublishSubject$PublishDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.PublishSubject` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/PublishSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L451d18.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L451d1e.  v0.`io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L451d22.  v0.`io.reactivex.subjects.PublishSubject$PublishDisposable.parent` @type ^`io.reactivex.subjects.PublishSubject` := v2 @kind object;
  #L451d26.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451d38.  v0:= 0I;
  #L451d3a.  v1:= 1I;
  #L451d3c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.compareAndSet:(ZZ)Z` @kind virtual;
  #L451d42.  v0:= temp;
  #L451d44.  if v0 == 0 then goto L451d52;
  #L451d48.  v0:= v2.`io.reactivex.subjects.PublishSubject$PublishDisposable.parent` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L451d4c.  call `remove`(v0, v2) @signature `Lio/reactivex/subjects/PublishSubject;.remove:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)V` @kind virtual;
  #L451d52.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451cfc.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.get:()Z` @kind virtual;
  #L451d02.  v0:= temp;
  #L451d04.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451d64.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.get:()Z` @kind virtual;
  #L451d6a.  v0:= temp;
  #L451d6c.  if v0 != 0 then goto L451d7a;
  #L451d70.  v0:= v1.`io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L451d74.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L451d7a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451d8c.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.get:()Z` @kind virtual;
  #L451d92.  v0:= temp;
  #L451d94.  if v0 == 0 then goto L451da0;
  #L451d98.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L451d9e.  goto L451daa;
  #L451da0.  v0:= v1.`io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L451da4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451daa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451dbc.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.get:()Z` @kind virtual;
  #L451dc2.  v0:= temp;
  #L451dc4.  if v0 != 0 then goto L451dd2;
  #L451dc8.  v0:= v1.`io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L451dcc.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L451dd2.  return @kind void;
}
