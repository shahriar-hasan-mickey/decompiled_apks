record `io.reactivex.subjects.MaybeSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `java.lang.Throwable` `io.reactivex.subjects.MaybeSubject.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.MaybeSubject.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.MaybeSubject.once` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.subjects.MaybeSubject.value` @AccessFlag ;
}
global `io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] `@@io.reactivex.subjects.MaybeSubject.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/MaybeSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L451a64.  v0:= 0I;
  #L451a66.  v1:= new `io.reactivex.subjects.MaybeSubject$MaybeDisposable`[v0];
  #L451a6a.  `@@io.reactivex.subjects.MaybeSubject.EMPTY` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] := v1 @kind object;
  #L451a6e.  v0:= new `io.reactivex.subjects.MaybeSubject$MaybeDisposable`[v0];
  #L451a72.  `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] := v0 @kind object;
  #L451a76.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L451a88.  call `<init>`(v2) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L451a8e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L451a92.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L451a98.  v2.`io.reactivex.subjects.MaybeSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L451a9c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L451aa0.  v1:= `@@io.reactivex.subjects.MaybeSubject.EMPTY` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451aa4.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L451aaa.  v2.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L451aae.  return @kind void;
}
procedure `io.reactivex.subjects.MaybeSubject` `create`() @signature `Lio/reactivex/subjects/MaybeSubject;.create:()Lio/reactivex/subjects/MaybeSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4519e8.  v0:= new `io.reactivex.subjects.MaybeSubject`;
  #L4519ec.  call `<init>`(v0) @signature `Lio/reactivex/subjects/MaybeSubject;.<init>:()V` @kind direct;
  #L4519f2.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `io.reactivex.subjects.MaybeSubject$MaybeDisposable` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.add:(Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45189c.  v0:= v4.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4518a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4518a6.  v0:= temp @kind object;
  #L4518a8.  v0:= (`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[]) v0 @kind object;
  #L4518ac.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L4518b0.  v2:= 0I;
  #L4518b2.  if v0 != v1 then goto L4518b8;
  #L4518b6.  return v2;
  #L4518b8.  v1:= length @variable v0;
  #L4518ba.  v3:= v1 + 1;
  #L4518be.  v3:= new `io.reactivex.subjects.MaybeSubject$MaybeDisposable`[v3];
  #L4518c2.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4518c8.  v3[v1]:= v5 @kind object;
  #L4518cc.  v1:= v4.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4518d0.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4518d6.  v0:= temp;
  #L4518d8.  if v0 == 0 then goto L45189c;
  #L4518dc.  v5:= 1I;
  #L4518de.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451a34.  v0:= v2.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451a38.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451a3e.  v0:= temp @kind object;
  #L451a40.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451a44.  if v0 != v1 then goto L451a4e;
  #L451a48.  v0:= v2.`io.reactivex.subjects.MaybeSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451a4c.  return v0 @kind object;
  #L451a4e.  v0:= 0I;
  #L451a50.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451a04.  v0:= v2.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451a08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451a0e.  v0:= temp @kind object;
  #L451a10.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451a14.  if v0 != v1 then goto L451a1e;
  #L451a18.  v0:= v2.`io.reactivex.subjects.MaybeSubject.value` @type ^`java.lang.Object` @kind object;
  #L451a1c.  return v0 @kind object;
  #L451a1e.  v0:= 0I;
  #L451a20.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4518f0.  v0:= v2.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4518f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4518fa.  v0:= temp @kind object;
  #L4518fc.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451900.  if v0 != v1 then goto L451918;
  #L451904.  v0:= v2.`io.reactivex.subjects.MaybeSubject.value` @type ^`java.lang.Object` @kind object;
  #L451908.  if v0 != 0 then goto L451918;
  #L45190c.  v0:= v2.`io.reactivex.subjects.MaybeSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451910.  if v0 != 0 then goto L451918;
  #L451914.  v0:= 1I;
  #L451916.  goto L45191a;
  #L451918.  v0:= 0I;
  #L45191a.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.MaybeSubject` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45192c.  v0:= v1.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451930.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451936.  v0:= temp @kind object;
  #L451938.  v0:= (`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[]) v0 @kind object;
  #L45193c.  v0:= length @variable v0;
  #L45193e.  if v0 == 0 then goto L451946;
  #L451942.  v0:= 1I;
  #L451944.  goto L451948;
  #L451946.  v0:= 0I;
  #L451948.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45195c.  v0:= v2.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451960.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451966.  v0:= temp @kind object;
  #L451968.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L45196c.  if v0 != v1 then goto L45197c;
  #L451970.  v0:= v2.`io.reactivex.subjects.MaybeSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451974.  if v0 == 0 then goto L45197c;
  #L451978.  v0:= 1I;
  #L45197a.  goto L45197e;
  #L45197c.  v0:= 0I;
  #L45197e.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451990.  v0:= v2.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451994.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45199a.  v0:= temp @kind object;
  #L45199c.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L4519a0.  if v0 != v1 then goto L4519b0;
  #L4519a4.  v0:= v2.`io.reactivex.subjects.MaybeSubject.value` @type ^`java.lang.Object` @kind object;
  #L4519a8.  if v0 == 0 then goto L4519b0;
  #L4519ac.  v0:= 1I;
  #L4519ae.  goto L4519b2;
  #L4519b0.  v0:= 0I;
  #L4519b2.  return v0;
}
procedure `int` `observerCount`(`io.reactivex.subjects.MaybeSubject` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.observerCount:()I` @AccessFlag  {
    temp;
    v0;

  #L4519c4.  v0:= v1.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4519c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4519ce.  v0:= temp @kind object;
  #L4519d0.  v0:= (`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[]) v0 @kind object;
  #L4519d4.  v0:= length @variable v0;
  #L4519d6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.MaybeSubject` v4 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L451ac0.  v0:= v4.`io.reactivex.subjects.MaybeSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L451ac4.  v1:= 1I;
  #L451ac6.  v2:= 0I;
  #L451ac8.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L451ace.  v0:= temp;
  #L451ad0.  if v0 == 0 then goto L451b02;
  #L451ad4.  v0:= v4.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451ad8.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451adc.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451ae2.  v0:= temp @kind object;
  #L451ae4.  v0:= (`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[]) v0 @kind object;
  #L451ae8.  v1:= length @variable v0;
  #L451aea.  if v2 >= v1 then goto L451b02;
  #L451aee.  v3:= v0[v2] @kind object;
  #L451af2.  v3:= v3.`io.reactivex.subjects.MaybeSubject$MaybeDisposable.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L451af6.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L451afc.  v2:= v2 + 1;
  #L451b00.  goto L451aea;
  #L451b02.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L451b14.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L451b18.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L451b1e.  v0:= v4.`io.reactivex.subjects.MaybeSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L451b22.  v1:= 1I;
  #L451b24.  v2:= 0I;
  #L451b26.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L451b2c.  v0:= temp;
  #L451b2e.  if v0 == 0 then goto L451b64;
  #L451b32.  v4.`io.reactivex.subjects.MaybeSubject.error` @type ^`java.lang.Throwable` := v5 @kind object;
  #L451b36.  v0:= v4.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451b3a.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451b3e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451b44.  v0:= temp @kind object;
  #L451b46.  v0:= (`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[]) v0 @kind object;
  #L451b4a.  v1:= length @variable v0;
  #L451b4c.  if v2 >= v1 then goto L451b6a;
  #L451b50.  v3:= v0[v2] @kind object;
  #L451b54.  v3:= v3.`io.reactivex.subjects.MaybeSubject$MaybeDisposable.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L451b58.  call `onError`(v3, v5) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451b5e.  v2:= v2 + 1;
  #L451b62.  goto L451b4c;
  #L451b64.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L451b6a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.MaybeSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451b7c.  v0:= v2.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451b80.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451b86.  v0:= temp @kind object;
  #L451b88.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451b8c.  if v0 != v1 then goto L451b96;
  #L451b90.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L451b96.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L451ba8.  v0:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L451bac.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L451bb2.  v0:= v4.`io.reactivex.subjects.MaybeSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L451bb6.  v1:= 1I;
  #L451bb8.  v2:= 0I;
  #L451bba.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L451bc0.  v0:= temp;
  #L451bc2.  if v0 == 0 then goto L451bf8;
  #L451bc6.  v4.`io.reactivex.subjects.MaybeSubject.value` @type ^`java.lang.Object` := v5 @kind object;
  #L451bca.  v0:= v4.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451bce.  v1:= `@@io.reactivex.subjects.MaybeSubject.TERMINATED` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451bd2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451bd8.  v0:= temp @kind object;
  #L451bda.  v0:= (`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[]) v0 @kind object;
  #L451bde.  v1:= length @variable v0;
  #L451be0.  if v2 >= v1 then goto L451bf8;
  #L451be4.  v3:= v0[v2] @kind object;
  #L451be8.  v3:= v3.`io.reactivex.subjects.MaybeSubject$MaybeDisposable.downstream` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L451bec.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L451bf2.  v2:= v2 + 1;
  #L451bf6.  goto L451be0;
  #L451bf8.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.subjects.MaybeSubject` v6 @kind this, `io.reactivex.subjects.MaybeSubject$MaybeDisposable` v7 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.remove:(Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L451c0c.  v0:= v6.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451c10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451c16.  v0:= temp @kind object;
  #L451c18.  v0:= (`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[]) v0 @kind object;
  #L451c1c.  v1:= length @variable v0;
  #L451c1e.  if v1 != 0 then goto L451c24;
  #L451c22.  return @kind void;
  #L451c24.  v2:= -1I;
  #L451c26.  v3:= 0I;
  #L451c28.  v4:= 0I;
  #L451c2a.  if v4 >= v1 then goto L451c40;
  #L451c2e.  v5:= v0[v4] @kind object;
  #L451c32.  if v5 != v7 then goto L451c3a;
  #L451c36.  v2:= v4;
  #L451c38.  goto L451c40;
  #L451c3a.  v4:= v4 + 1;
  #L451c3e.  goto L451c2a;
  #L451c40.  if v2 >= 0 then goto L451c46;
  #L451c44.  return @kind void;
  #L451c46.  v4:= 1I;
  #L451c48.  if v1 != v4 then goto L451c52;
  #L451c4c.  v1:= `@@io.reactivex.subjects.MaybeSubject.EMPTY` @type ^`io.reactivex.subjects.MaybeSubject$MaybeDisposable`[] @kind object;
  #L451c50.  goto L451c70;
  #L451c52.  v5:= v1 + -1;
  #L451c56.  v5:= new `io.reactivex.subjects.MaybeSubject$MaybeDisposable`[v5];
  #L451c5a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L451c60.  v3:= v2 + 1;
  #L451c64.  v1:= v1 - v2 @kind int;
  #L451c66.  v1:= v1 - v4 @kind int;
  #L451c68.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L451c6e.  v1:= v5 @kind object;
  #L451c70.  v2:= v6.`io.reactivex.subjects.MaybeSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451c74.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L451c7a.  v0:= temp;
  #L451c7c.  if v0 == 0 then goto L451c0c;
  #L451c80.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.MaybeSubject` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L451c94.  v0:= new `io.reactivex.subjects.MaybeSubject$MaybeDisposable`;
  #L451c98.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/subjects/MaybeSubject;)V` @kind direct;
  #L451c9e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L451ca4.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/subjects/MaybeSubject;.add:(Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;)Z` @kind virtual;
  #L451caa.  v1:= temp;
  #L451cac.  if v1 == 0 then goto L451cc4;
  #L451cb0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.isDisposed:()Z` @kind virtual;
  #L451cb6.  v3:= temp;
  #L451cb8.  if v3 == 0 then goto L451cea;
  #L451cbc.  call `remove`(v2, v0) @signature `Lio/reactivex/subjects/MaybeSubject;.remove:(Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;)V` @kind virtual;
  #L451cc2.  goto L451cea;
  #L451cc4.  v0:= v2.`io.reactivex.subjects.MaybeSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451cc8.  if v0 == 0 then goto L451cd4;
  #L451ccc.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451cd2.  goto L451cea;
  #L451cd4.  v0:= v2.`io.reactivex.subjects.MaybeSubject.value` @type ^`java.lang.Object` @kind object;
  #L451cd8.  if v0 != 0 then goto L451ce4;
  #L451cdc.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L451ce2.  goto L451cea;
  #L451ce4.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L451cea.  return @kind void;
}
