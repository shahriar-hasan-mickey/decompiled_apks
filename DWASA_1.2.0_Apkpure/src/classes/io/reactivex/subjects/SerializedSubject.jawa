record `io.reactivex.subjects.SerializedSubject` @kind class @AccessFlag FINAL extends `io.reactivex.subjects.Subject` @kind class, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `io.reactivex.subjects.Subject` `io.reactivex.subjects.SerializedSubject.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.SerializedSubject.done` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.subjects.SerializedSubject.emitting` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.subjects.SerializedSubject.queue` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.subjects.SerializedSubject` v0 @kind this, `io.reactivex.subjects.Subject` v1 @kind object) @signature `Lio/reactivex/subjects/SerializedSubject;.<init>:(Lio/reactivex/subjects/Subject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4533d4.  call `<init>`(v0) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4533da.  v0.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` := v1 @kind object;
  #L4533de.  return @kind void;
}
procedure `void` `emitLoop`(`io.reactivex.subjects.SerializedSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SerializedSubject;.emitLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4533f0.  @monitorenter v2
  #L4533f2.  v0:= v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4533f6.  if v0 != 0 then goto L453404;
  #L4533fa.  v0:= 0I;
  #L4533fc.  v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` := v0 @kind boolean;
  #L453400.  @monitorexit v2
  #L453402.  return @kind void;
  #L453404.  v1:= 0I;
  #L453406.  v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L45340a.  @monitorexit v2
  #L45340c.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L453412.  goto L4533f0;
  #L453414.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L453416.  @monitorexit v2
  #L453418.  goto L45341c;
  #L45341a.  throw v0;
  #L45341c.  goto L45341a;
  catch `java.lang.Throwable` @[L4533f2..L45340c] goto L453414;
  catch `java.lang.Throwable` @[L453416..L453418] goto L453414;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.SerializedSubject` v1 @kind this) @signature `Lio/reactivex/subjects/SerializedSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4533b4.  v0:= v1.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4533b8.  call temp:= `getThrowable`(v0) @signature `Lio/reactivex/subjects/Subject;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L4533be.  v0:= temp @kind object;
  #L4533c0.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.SerializedSubject` v1 @kind this) @signature `Lio/reactivex/subjects/SerializedSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453334.  v0:= v1.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L453338.  call temp:= `hasComplete`(v0) @signature `Lio/reactivex/subjects/Subject;.hasComplete:()Z` @kind virtual;
  #L45333e.  v0:= temp;
  #L453340.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.SerializedSubject` v1 @kind this) @signature `Lio/reactivex/subjects/SerializedSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453354.  v0:= v1.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L453358.  call temp:= `hasObservers`(v0) @signature `Lio/reactivex/subjects/Subject;.hasObservers:()Z` @kind virtual;
  #L45335e.  v0:= temp;
  #L453360.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.SerializedSubject` v1 @kind this) @signature `Lio/reactivex/subjects/SerializedSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453374.  v0:= v1.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L453378.  call temp:= `hasThrowable`(v0) @signature `Lio/reactivex/subjects/Subject;.hasThrowable:()Z` @kind virtual;
  #L45337e.  v0:= temp;
  #L453380.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.SerializedSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SerializedSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453444.  v0:= v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` @kind boolean;
  #L453448.  if v0 == 0 then goto L45344e;
  #L45344c.  return @kind void;
  #L45344e.  @monitorenter v2
  #L453450.  v0:= v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` @kind boolean;
  #L453454.  if v0 == 0 then goto L45345c;
  #L453458.  @monitorexit v2
  #L45345a.  return @kind void;
  #L45345c.  v0:= 1I;
  #L45345e.  v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` := v0 @kind boolean;
  #L453462.  v1:= v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` @kind boolean;
  #L453466.  if v1 == 0 then goto L453494;
  #L45346a.  v0:= v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L45346e.  if v0 != 0 then goto L453482;
  #L453472.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L453476.  v1:= 4I;
  #L453478.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L45347e.  v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L453482.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L453488.  v1:= temp @kind object;
  #L45348a.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L453490.  @monitorexit v2
  #L453492.  return @kind void;
  #L453494.  v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` := v0 @kind boolean;
  #L453498.  @monitorexit v2
  #L45349a.  v0:= v2.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L45349e.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/Subject;.onComplete:()V` @kind virtual;
  #L4534a4.  return @kind void;
  #L4534a6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4534a8.  @monitorexit v2
  #L4534aa.  throw v0;
  catch `java.lang.Throwable` @[L453450..L45349a] goto L4534a6;
  catch `java.lang.Throwable` @[L4534a8..L4534aa] goto L4534a6;
}
procedure `void` `onError`(`io.reactivex.subjects.SerializedSubject` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/subjects/SerializedSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4534d0.  v0:= v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` @kind boolean;
  #L4534d4.  if v0 == 0 then goto L4534e0;
  #L4534d8.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4534de.  return @kind void;
  #L4534e0.  @monitorenter v2
  #L4534e2.  v0:= v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` @kind boolean;
  #L4534e6.  v1:= 1I;
  #L4534e8.  if v0 == 0 then goto L4534f0;
  #L4534ec.  v0:= 1I;
  #L4534ee.  goto L45352c;
  #L4534f0.  v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` := v1 @kind boolean;
  #L4534f4.  v0:= v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` @kind boolean;
  #L4534f8.  if v0 == 0 then goto L453526;
  #L4534fc.  v0:= v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L453500.  if v0 != 0 then goto L453514;
  #L453504.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L453508.  v1:= 4I;
  #L45350a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L453510.  v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L453514.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L45351a.  v3:= temp @kind object;
  #L45351c.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L453522.  @monitorexit v2
  #L453524.  return @kind void;
  #L453526.  v0:= 0I;
  #L453528.  v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` := v1 @kind boolean;
  #L45352c.  @monitorexit v2
  #L45352e.  if v0 == 0 then goto L45353a;
  #L453532.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L453538.  return @kind void;
  #L45353a.  v0:= v2.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L45353e.  call `onError`(v0, v3) @signature `Lio/reactivex/subjects/Subject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L453544.  return @kind void;
  #L453546.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L453548.  @monitorexit v2
  #L45354a.  throw v3;
  catch `java.lang.Throwable` @[L4534e2..L45352e] goto L453546;
  catch `java.lang.Throwable` @[L453548..L45354a] goto L453546;
}
procedure `void` `onNext`(`io.reactivex.subjects.SerializedSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/SerializedSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453570.  v0:= v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` @kind boolean;
  #L453574.  if v0 == 0 then goto L45357a;
  #L453578.  return @kind void;
  #L45357a.  @monitorenter v2
  #L45357c.  v0:= v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` @kind boolean;
  #L453580.  if v0 == 0 then goto L453588;
  #L453584.  @monitorexit v2
  #L453586.  return @kind void;
  #L453588.  v0:= v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` @kind boolean;
  #L45358c.  if v0 == 0 then goto L4535ba;
  #L453590.  v0:= v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L453594.  if v0 != 0 then goto L4535a8;
  #L453598.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L45359c.  v1:= 4I;
  #L45359e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4535a4.  v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4535a8.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4535ae.  v3:= temp @kind object;
  #L4535b0.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4535b6.  @monitorexit v2
  #L4535b8.  return @kind void;
  #L4535ba.  v0:= 1I;
  #L4535bc.  v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4535c0.  @monitorexit v2
  #L4535c2.  v0:= v2.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4535c6.  call `onNext`(v0, v3) @signature `Lio/reactivex/subjects/Subject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4535cc.  call `emitLoop`(v2) @signature `Lio/reactivex/subjects/SerializedSubject;.emitLoop:()V` @kind virtual;
  #L4535d2.  return @kind void;
  #L4535d4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4535d6.  @monitorexit v2
  #L4535d8.  throw v3;
  catch `java.lang.Throwable` @[L45357c..L4535c2] goto L4535d4;
  catch `java.lang.Throwable` @[L4535d6..L4535d8] goto L4535d4;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.SerializedSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/SerializedSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453600.  v0:= v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` @kind boolean;
  #L453604.  v1:= 1I;
  #L453606.  if v0 != 0 then goto L45365a;
  #L45360a.  @monitorenter v2
  #L45360c.  v0:= v2.`io.reactivex.subjects.SerializedSubject.done` @type ^`boolean` @kind boolean;
  #L453610.  if v0 == 0 then goto L453616;
  #L453614.  goto L453650;
  #L453616.  v0:= v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` @kind boolean;
  #L45361a.  if v0 == 0 then goto L453648;
  #L45361e.  v0:= v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L453622.  if v0 != 0 then goto L453636;
  #L453626.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L45362a.  v1:= 4I;
  #L45362c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L453632.  v2.`io.reactivex.subjects.SerializedSubject.queue` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L453636.  call temp:= `disposable`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.disposable:(Lio/reactivex/disposables/Disposable;)Ljava/lang/Object;` @kind static;
  #L45363c.  v3:= temp @kind object;
  #L45363e.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L453644.  @monitorexit v2
  #L453646.  return @kind void;
  #L453648.  v2.`io.reactivex.subjects.SerializedSubject.emitting` @type ^`boolean` := v1 @kind boolean;
  #L45364c.  v0:= 0I;
  #L45364e.  v1:= 0I;
  #L453650.  @monitorexit v2
  #L453652.  goto L45365a;
  #L453654.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L453656.  @monitorexit v2
  #L453658.  throw v3;
  #L45365a.  if v1 == 0 then goto L453666;
  #L45365e.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L453664.  goto L453676;
  #L453666.  v0:= v2.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L45366a.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/subjects/Subject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L453670.  call `emitLoop`(v2) @signature `Lio/reactivex/subjects/SerializedSubject;.emitLoop:()V` @kind virtual;
  #L453676.  return @kind void;
  catch `java.lang.Throwable` @[L45360c..L453658] goto L453654;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.SerializedSubject` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/subjects/SerializedSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L453694.  v0:= v1.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L453698.  call `subscribe`(v0, v2) @signature `Lio/reactivex/subjects/Subject;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L45369e.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.subjects.SerializedSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/SerializedSubject;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453394.  v0:= v1.`io.reactivex.subjects.SerializedSubject.actual` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L453398.  call temp:= `acceptFull`(v2, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L45339e.  v2:= temp;
  #L4533a0.  return v2;
}
