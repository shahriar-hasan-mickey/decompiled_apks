record `io.reactivex.subjects.CompletableSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `java.lang.Throwable` `io.reactivex.subjects.CompletableSubject.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.CompletableSubject.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.CompletableSubject.once` @AccessFlag FINAL;
}
global `io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] `@@io.reactivex.subjects.CompletableSubject.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/CompletableSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L451604.  v0:= 0I;
  #L451606.  v1:= new `io.reactivex.subjects.CompletableSubject$CompletableDisposable`[v0];
  #L45160a.  `@@io.reactivex.subjects.CompletableSubject.EMPTY` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] := v1 @kind object;
  #L45160e.  v0:= new `io.reactivex.subjects.CompletableSubject$CompletableDisposable`[v0];
  #L451612.  `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] := v0 @kind object;
  #L451616.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L451628.  call `<init>`(v2) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L45162e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L451632.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L451638.  v2.`io.reactivex.subjects.CompletableSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L45163c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L451640.  v1:= `@@io.reactivex.subjects.CompletableSubject.EMPTY` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L451644.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45164a.  v2.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L45164e.  return @kind void;
}
procedure `io.reactivex.subjects.CompletableSubject` `create`() @signature `Lio/reactivex/subjects/CompletableSubject;.create:()Lio/reactivex/subjects/CompletableSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4515b8.  v0:= new `io.reactivex.subjects.CompletableSubject`;
  #L4515bc.  call `<init>`(v0) @signature `Lio/reactivex/subjects/CompletableSubject;.<init>:()V` @kind direct;
  #L4515c2.  return v0 @kind object;
}
procedure `boolean` `add`(`io.reactivex.subjects.CompletableSubject` v4 @kind this, `io.reactivex.subjects.CompletableSubject$CompletableDisposable` v5 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.add:(Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4514a8.  v0:= v4.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4514ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4514b2.  v0:= temp @kind object;
  #L4514b4.  v0:= (`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[]) v0 @kind object;
  #L4514b8.  v1:= `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L4514bc.  v2:= 0I;
  #L4514be.  if v0 != v1 then goto L4514c4;
  #L4514c2.  return v2;
  #L4514c4.  v1:= length @variable v0;
  #L4514c6.  v3:= v1 + 1;
  #L4514ca.  v3:= new `io.reactivex.subjects.CompletableSubject$CompletableDisposable`[v3];
  #L4514ce.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4514d4.  v3[v1]:= v5 @kind object;
  #L4514d8.  v1:= v4.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4514dc.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4514e2.  v0:= temp;
  #L4514e4.  if v0 == 0 then goto L4514a8;
  #L4514e8.  v5:= 1I;
  #L4514ea.  return v5;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4515d4.  v0:= v2.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4515d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4515de.  v0:= temp @kind object;
  #L4515e0.  v1:= `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L4515e4.  if v0 != v1 then goto L4515ee;
  #L4515e8.  v0:= v2.`io.reactivex.subjects.CompletableSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L4515ec.  return v0 @kind object;
  #L4515ee.  v0:= 0I;
  #L4515f0.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4514fc.  v0:= v2.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451500.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451506.  v0:= temp @kind object;
  #L451508.  v1:= `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L45150c.  if v0 != v1 then goto L45151c;
  #L451510.  v0:= v2.`io.reactivex.subjects.CompletableSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451514.  if v0 != 0 then goto L45151c;
  #L451518.  v0:= 1I;
  #L45151a.  goto L45151e;
  #L45151c.  v0:= 0I;
  #L45151e.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.CompletableSubject` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451530.  v0:= v1.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451534.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45153a.  v0:= temp @kind object;
  #L45153c.  v0:= (`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[]) v0 @kind object;
  #L451540.  v0:= length @variable v0;
  #L451542.  if v0 == 0 then goto L45154a;
  #L451546.  v0:= 1I;
  #L451548.  goto L45154c;
  #L45154a.  v0:= 0I;
  #L45154c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451560.  v0:= v2.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451564.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45156a.  v0:= temp @kind object;
  #L45156c.  v1:= `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L451570.  if v0 != v1 then goto L451580;
  #L451574.  v0:= v2.`io.reactivex.subjects.CompletableSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451578.  if v0 == 0 then goto L451580;
  #L45157c.  v0:= 1I;
  #L45157e.  goto L451582;
  #L451580.  v0:= 0I;
  #L451582.  return v0;
}
procedure `int` `observerCount`(`io.reactivex.subjects.CompletableSubject` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.observerCount:()I` @AccessFlag  {
    temp;
    v0;

  #L451594.  v0:= v1.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451598.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45159e.  v0:= temp @kind object;
  #L4515a0.  v0:= (`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[]) v0 @kind object;
  #L4515a4.  v0:= length @variable v0;
  #L4515a6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.CompletableSubject` v4 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L451660.  v0:= v4.`io.reactivex.subjects.CompletableSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L451664.  v1:= 1I;
  #L451666.  v2:= 0I;
  #L451668.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L45166e.  v0:= temp;
  #L451670.  if v0 == 0 then goto L4516a2;
  #L451674.  v0:= v4.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451678.  v1:= `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L45167c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451682.  v0:= temp @kind object;
  #L451684.  v0:= (`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[]) v0 @kind object;
  #L451688.  v1:= length @variable v0;
  #L45168a.  if v2 >= v1 then goto L4516a2;
  #L45168e.  v3:= v0[v2] @kind object;
  #L451692.  v3:= v3.`io.reactivex.subjects.CompletableSubject$CompletableDisposable.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L451696.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L45169c.  v2:= v2 + 1;
  #L4516a0.  goto L45168a;
  #L4516a2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.CompletableSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4516b4.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4516b8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4516be.  v0:= v4.`io.reactivex.subjects.CompletableSubject.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4516c2.  v1:= 1I;
  #L4516c4.  v2:= 0I;
  #L4516c6.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4516cc.  v0:= temp;
  #L4516ce.  if v0 == 0 then goto L451704;
  #L4516d2.  v4.`io.reactivex.subjects.CompletableSubject.error` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4516d6.  v0:= v4.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4516da.  v1:= `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L4516de.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4516e4.  v0:= temp @kind object;
  #L4516e6.  v0:= (`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[]) v0 @kind object;
  #L4516ea.  v1:= length @variable v0;
  #L4516ec.  if v2 >= v1 then goto L45170a;
  #L4516f0.  v3:= v0[v2] @kind object;
  #L4516f4.  v3:= v3.`io.reactivex.subjects.CompletableSubject$CompletableDisposable.downstream` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4516f8.  call `onError`(v3, v5) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4516fe.  v2:= v2 + 1;
  #L451702.  goto L4516ec;
  #L451704.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45170a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.CompletableSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45171c.  v0:= v2.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451720.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451726.  v0:= temp @kind object;
  #L451728.  v1:= `@@io.reactivex.subjects.CompletableSubject.TERMINATED` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L45172c.  if v0 != v1 then goto L451736;
  #L451730.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L451736.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.subjects.CompletableSubject` v6 @kind this, `io.reactivex.subjects.CompletableSubject$CompletableDisposable` v7 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.remove:(Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L451748.  v0:= v6.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45174c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451752.  v0:= temp @kind object;
  #L451754.  v0:= (`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[]) v0 @kind object;
  #L451758.  v1:= length @variable v0;
  #L45175a.  if v1 != 0 then goto L451760;
  #L45175e.  return @kind void;
  #L451760.  v2:= -1I;
  #L451762.  v3:= 0I;
  #L451764.  v4:= 0I;
  #L451766.  if v4 >= v1 then goto L45177c;
  #L45176a.  v5:= v0[v4] @kind object;
  #L45176e.  if v5 != v7 then goto L451776;
  #L451772.  v2:= v4;
  #L451774.  goto L45177c;
  #L451776.  v4:= v4 + 1;
  #L45177a.  goto L451766;
  #L45177c.  if v2 >= 0 then goto L451782;
  #L451780.  return @kind void;
  #L451782.  v4:= 1I;
  #L451784.  if v1 != v4 then goto L45178e;
  #L451788.  v1:= `@@io.reactivex.subjects.CompletableSubject.EMPTY` @type ^`io.reactivex.subjects.CompletableSubject$CompletableDisposable`[] @kind object;
  #L45178c.  goto L4517ac;
  #L45178e.  v5:= v1 + -1;
  #L451792.  v5:= new `io.reactivex.subjects.CompletableSubject$CompletableDisposable`[v5];
  #L451796.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45179c.  v3:= v2 + 1;
  #L4517a0.  v1:= v1 - v2 @kind int;
  #L4517a2.  v1:= v1 - v4 @kind int;
  #L4517a4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4517aa.  v1:= v5 @kind object;
  #L4517ac.  v2:= v6.`io.reactivex.subjects.CompletableSubject.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4517b0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4517b6.  v0:= temp;
  #L4517b8.  if v0 == 0 then goto L451748;
  #L4517bc.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.CompletableSubject` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4517d0.  v0:= new `io.reactivex.subjects.CompletableSubject$CompletableDisposable`;
  #L4517d4.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/subjects/CompletableSubject;)V` @kind direct;
  #L4517da.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4517e0.  call temp:= `add`(v2, v0) @signature `Lio/reactivex/subjects/CompletableSubject;.add:(Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;)Z` @kind virtual;
  #L4517e6.  v1:= temp;
  #L4517e8.  if v1 == 0 then goto L451800;
  #L4517ec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.isDisposed:()Z` @kind virtual;
  #L4517f2.  v3:= temp;
  #L4517f4.  if v3 == 0 then goto L451816;
  #L4517f8.  call `remove`(v2, v0) @signature `Lio/reactivex/subjects/CompletableSubject;.remove:(Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;)V` @kind virtual;
  #L4517fe.  goto L451816;
  #L451800.  v0:= v2.`io.reactivex.subjects.CompletableSubject.error` @type ^`java.lang.Throwable` @kind object;
  #L451804.  if v0 == 0 then goto L451810;
  #L451808.  call `onError`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45180e.  goto L451816;
  #L451810.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L451816.  return @kind void;
}
