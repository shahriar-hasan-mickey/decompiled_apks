record `io.reactivex.subjects.SingleSubject$SingleDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.subjects.SingleSubject$SingleDisposable.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.SingleSubject$SingleDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.SingleSubject$SingleDisposable` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.subjects.SingleSubject` v2 @kind object) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/subjects/SingleSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4536d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4536da.  v0.`io.reactivex.subjects.SingleSubject$SingleDisposable.downstream` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L4536de.  call `lazySet`(v0, v2) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4536e4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.SingleSubject$SingleDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4536f8.  v0:= 0I;
  #L4536fa.  call temp:= `getAndSet`(v1, v0) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L453700.  v0:= temp @kind object;
  #L453702.  v0:= (`io.reactivex.subjects.SingleSubject`) v0 @kind object;
  #L453706.  if v0 == 0 then goto L453710;
  #L45370a.  call `remove`(v0, v1) @signature `Lio/reactivex/subjects/SingleSubject;.remove:(Lio/reactivex/subjects/SingleSubject$SingleDisposable;)V` @kind virtual;
  #L453710.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.SingleSubject$SingleDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4536b0.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.get:()Ljava/lang/Object;` @kind virtual;
  #L4536b6.  v0:= temp @kind object;
  #L4536b8.  if v0 != 0 then goto L4536c0;
  #L4536bc.  v0:= 1I;
  #L4536be.  goto L4536c2;
  #L4536c0.  v0:= 0I;
  #L4536c2.  return v0;
}
