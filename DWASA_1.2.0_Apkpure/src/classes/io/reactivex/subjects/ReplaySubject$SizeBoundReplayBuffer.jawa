record `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind interface {
  `boolean` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.done` @AccessFlag VOLATILE;
  `io.reactivex.subjects.ReplaySubject$Node` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @AccessFlag VOLATILE;
  `int` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.maxSize` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject$Node` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @AccessFlag ;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45286c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L452872.  v0:= "maxSize" @kind object;
  #L452876.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45287c.  v2:= temp;
  #L45287e.  v1.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.maxSize` @type ^`int` := v2;
  #L452882.  v2:= new `io.reactivex.subjects.ReplaySubject$Node`;
  #L452886.  v0:= 0I;
  #L452888.  call `<init>`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45288e.  v1.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v2 @kind object;
  #L452892.  v1.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v2 @kind object;
  #L452896.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4528a8.  v0:= new `io.reactivex.subjects.ReplaySubject$Node`;
  #L4528ac.  call `<init>`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4528b2.  v3:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L4528b6.  v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v0 @kind object;
  #L4528ba.  v1:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int`;
  #L4528be.  v1:= v1 + 1;
  #L4528c2.  v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int` := v1;
  #L4528c6.  call `set`(v3, v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4528cc.  call `trim`(v2) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.trim:()V` @kind virtual;
  #L4528d2.  return @kind void;
}
procedure `void` `addFinal`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4528e4.  v0:= new `io.reactivex.subjects.ReplaySubject$Node`;
  #L4528e8.  call `<init>`(v0, v4) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4528ee.  v4:= v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L4528f2.  v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v0 @kind object;
  #L4528f6.  v1:= v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int`;
  #L4528fa.  v2:= 1I;
  #L4528fc.  v1:= v1 + v2 @kind int;
  #L4528fe.  v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int` := v1;
  #L452902.  call `lazySet`(v4, v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L452908.  call `trimHead`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.trimHead:()V` @kind virtual;
  #L45290e.  v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.done` @type ^`boolean` := v2 @kind boolean;
  #L452912.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L452790.  v0:= v4.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L452794.  v1:= 0I;
  #L452796.  v2:= v1 @kind object;
  #L452798.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L45279e.  v3:= temp @kind object;
  #L4527a0.  v3:= (`io.reactivex.subjects.ReplaySubject$Node`) v3 @kind object;
  #L4527a4.  if v3 != 0 then goto L4527d4;
  #L4527a8.  v0:= v0.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L4527ac.  if v0 != 0 then goto L4527b2;
  #L4527b0.  return v1 @kind object;
  #L4527b2.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4527b8.  v1:= temp;
  #L4527ba.  if v1 != 0 then goto L4527ce;
  #L4527be.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4527c4.  v1:= temp;
  #L4527c6.  if v1 == 0 then goto L4527cc;
  #L4527ca.  goto L4527ce;
  #L4527cc.  return v0 @kind object;
  #L4527ce.  v0:= v2.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L4527d2.  return v0 @kind object;
  #L4527d4.  v2:= v0 @kind object;
  #L4527d6.  v0:= v3 @kind object;
  #L4527d8.  goto L452798;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4527ec.  v0:= v5.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L4527f0.  call temp:= `size`(v5) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.size:()I` @kind virtual;
  #L4527f6.  v1:= temp;
  #L4527f8.  v2:= 0I;
  #L4527fa.  v3:= 0I;
  #L4527fc.  if v1 != 0 then goto L45280c;
  #L452800.  v0:= length @variable v6;
  #L452802.  if v0 == 0 then goto L45285a;
  #L452806.  v6[v3]:= v2 @kind object;
  #L45280a.  goto L45285a;
  #L45280c.  v4:= length @variable v6;
  #L45280e.  if v4 >= v1 then goto L452832;
  #L452812.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L452818.  v6:= temp @kind object;
  #L45281a.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L452820.  v6:= temp @kind object;
  #L452822.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L452828.  v6:= temp @kind object;
  #L45282a.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L45282e.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L452832.  if v3 == v1 then goto L452850;
  #L452836.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L45283c.  v0:= temp @kind object;
  #L45283e.  v0:= (`io.reactivex.subjects.ReplaySubject$Node`) v0 @kind object;
  #L452842.  v4:= v0.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L452846.  v6[v3]:= v4 @kind object;
  #L45284a.  v3:= v3 + 1;
  #L45284e.  goto L452832;
  #L452850.  v0:= length @variable v6;
  #L452852.  if v0 <= v1 then goto L45285a;
  #L452856.  v6[v1]:= v2 @kind object;
  #L45285a.  return v6 @kind object;
}
procedure `void` `replay`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v7 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayDisposable` v8 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L452924.  call temp:= `getAndIncrement`(v8) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.getAndIncrement:()I` @kind virtual;
  #L45292a.  v0:= temp;
  #L45292c.  if v0 == 0 then goto L452932;
  #L452930.  return @kind void;
  #L452932.  v0:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L452936.  v1:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` @kind object;
  #L45293a.  v1:= (`io.reactivex.subjects.ReplaySubject$Node`) v1 @kind object;
  #L45293e.  v2:= 1I;
  #L452940.  if v1 != 0 then goto L452948;
  #L452944.  v1:= v7.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L452948.  v3:= 1I;
  #L45294a.  v4:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L45294e.  v5:= 0I;
  #L452950.  if v4 == 0 then goto L45295a;
  #L452954.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L452958.  return @kind void;
  #L45295a.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L452960.  v4:= temp @kind object;
  #L452962.  v4:= (`io.reactivex.subjects.ReplaySubject$Node`) v4 @kind object;
  #L452966.  if v4 != 0 then goto L45298c;
  #L45296a.  call temp:= `get`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L452970.  v4:= temp @kind object;
  #L452972.  if v4 == 0 then goto L452978;
  #L452976.  goto L45294a;
  #L452978.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v1 @kind object;
  #L45297c.  v3:= -v3 @kind int;
  #L45297e.  call temp:= `addAndGet`(v8, v3) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.addAndGet:(I)I` @kind virtual;
  #L452984.  v3:= temp;
  #L452986.  if v3 != 0 then goto L45294a;
  #L45298a.  return @kind void;
  #L45298c.  v1:= v4.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L452990.  v6:= v7.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L452994.  if v6 == 0 then goto L4529d0;
  #L452998.  call temp:= `get`(v4) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L45299e.  v6:= temp @kind object;
  #L4529a0.  if v6 != 0 then goto L4529d0;
  #L4529a4.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4529aa.  v3:= temp;
  #L4529ac.  if v3 == 0 then goto L4529b8;
  #L4529b0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4529b6.  goto L4529c6;
  #L4529b8.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4529be.  v1:= temp @kind object;
  #L4529c0.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4529c6.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L4529ca.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` := v2 @kind boolean;
  #L4529ce.  return @kind void;
  #L4529d0.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4529d6.  v1:= v4 @kind object;
  #L4529d8.  goto L45294a;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v3 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L452734.  v0:= v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L452738.  v1:= 0I;
  #L45273a.  v2:= 2147483647I;
  #L452740.  if v1 == v2 then goto L45277e;
  #L452744.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L45274a.  v2:= temp @kind object;
  #L45274c.  v2:= (`io.reactivex.subjects.ReplaySubject$Node`) v2 @kind object;
  #L452750.  if v2 != 0 then goto L452776;
  #L452754.  v0:= v0.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L452758.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L45275e.  v2:= temp;
  #L452760.  if v2 != 0 then goto L452770;
  #L452764.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L45276a.  v0:= temp;
  #L45276c.  if v0 == 0 then goto L45277e;
  #L452770.  v1:= v1 + -1;
  #L452774.  goto L45277e;
  #L452776.  v1:= v1 + 1;
  #L45277a.  v0:= v2 @kind object;
  #L45277c.  goto L45273a;
  #L45277e.  return v1;
}
procedure `void` `trim`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.trim:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4529ec.  v0:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int`;
  #L4529f0.  v1:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.maxSize` @type ^`int`;
  #L4529f4.  if v0 <= v1 then goto L452a14;
  #L4529f8.  v0:= v0 + -1;
  #L4529fc.  v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int` := v0;
  #L452a00.  v0:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L452a04.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L452a0a.  v0:= temp @kind object;
  #L452a0c.  v0:= (`io.reactivex.subjects.ReplaySubject$Node`) v0 @kind object;
  #L452a10.  v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v0 @kind object;
  #L452a14.  return @kind void;
}
procedure `void` `trimHead`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v3 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L452a28.  v0:= v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L452a2c.  v1:= v0.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L452a30.  if v1 == 0 then goto L452a52;
  #L452a34.  v1:= new `io.reactivex.subjects.ReplaySubject$Node`;
  #L452a38.  v2:= 0I;
  #L452a3a.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L452a40.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L452a46.  v0:= temp @kind object;
  #L452a48.  call `lazySet`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L452a4e.  v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v1 @kind object;
  #L452a52.  return @kind void;
}
