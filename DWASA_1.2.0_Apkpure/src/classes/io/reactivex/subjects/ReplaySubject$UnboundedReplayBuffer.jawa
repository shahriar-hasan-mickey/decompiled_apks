record `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind interface {
  `java.util.List` `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L452bdc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L452be2.  v0:= new `java.util.ArrayList`;
  #L452be6.  v1:= "capacityHint" @kind object;
  #L452bea.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L452bf0.  v3:= temp;
  #L452bf2.  call `<init>`(v0, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L452bf8.  v2.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` := v0 @kind object;
  #L452bfc.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452c10.  v0:= v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L452c14.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L452c1a.  v2:= v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L452c1e.  v2:= v2 + 1;
  #L452c22.  v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int` := v2;
  #L452c26.  return @kind void;
}
procedure `void` `addFinal`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452c38.  v0:= v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L452c3c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L452c42.  call `trimHead`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.trimHead:()V` @kind virtual;
  #L452c48.  v2:= v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L452c4c.  v0:= 1I;
  #L452c4e.  v2:= v2 + v0 @kind int;
  #L452c50.  v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int` := v2;
  #L452c54.  v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.done` @type ^`boolean` := v0 @kind boolean;
  #L452c58.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L452ad0.  v0:= v5.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L452ad4.  v1:= 0I;
  #L452ad6.  if v0 == 0 then goto L452b1c;
  #L452ada.  v2:= v5.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L452ade.  v3:= v0 + -1;
  #L452ae2.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L452ae8.  v3:= temp @kind object;
  #L452aea.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L452af0.  v4:= temp;
  #L452af2.  if v4 != 0 then goto L452b06;
  #L452af6.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L452afc.  v4:= temp;
  #L452afe.  if v4 == 0 then goto L452b04;
  #L452b02.  goto L452b06;
  #L452b04.  return v3 @kind object;
  #L452b06.  v3:= 1I;
  #L452b08.  if v0 != v3 then goto L452b0e;
  #L452b0c.  return v1 @kind object;
  #L452b0e.  v0:= v0 + -2;
  #L452b12.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L452b18.  v0:= temp @kind object;
  #L452b1a.  return v0 @kind object;
  #L452b1c.  return v1 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L452b30.  v0:= v6.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L452b34.  v1:= 0I;
  #L452b36.  v2:= 0I;
  #L452b38.  if v0 != 0 then goto L452b48;
  #L452b3c.  v0:= length @variable v7;
  #L452b3e.  if v0 == 0 then goto L452b46;
  #L452b42.  v7[v2]:= v1 @kind object;
  #L452b46.  return v7 @kind object;
  #L452b48.  v3:= v6.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L452b4c.  v4:= v0 + -1;
  #L452b50.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L452b56.  v4:= temp @kind object;
  #L452b58.  call temp:= `isComplete`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L452b5e.  v5:= temp;
  #L452b60.  if v5 != 0 then goto L452b70;
  #L452b64.  call temp:= `isError`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L452b6a.  v4:= temp;
  #L452b6c.  if v4 == 0 then goto L452b84;
  #L452b70.  v0:= v0 + -1;
  #L452b74.  if v0 != 0 then goto L452b84;
  #L452b78.  v0:= length @variable v7;
  #L452b7a.  if v0 == 0 then goto L452b82;
  #L452b7e.  v7[v2]:= v1 @kind object;
  #L452b82.  return v7 @kind object;
  #L452b84.  v4:= length @variable v7;
  #L452b86.  if v4 >= v0 then goto L452baa;
  #L452b8a.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L452b90.  v7:= temp @kind object;
  #L452b92.  call temp:= `getComponentType`(v7) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L452b98.  v7:= temp @kind object;
  #L452b9a.  call temp:= `newInstance`(v7, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L452ba0.  v7:= temp @kind object;
  #L452ba2.  v7:= (`java.lang.Object`[]) v7 @kind object;
  #L452ba6.  v7:= (`java.lang.Object`[]) v7 @kind object;
  #L452baa.  if v2 >= v0 then goto L452bc0;
  #L452bae.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L452bb4.  v4:= temp @kind object;
  #L452bb6.  v7[v2]:= v4 @kind object;
  #L452bba.  v2:= v2 + 1;
  #L452bbe.  goto L452baa;
  #L452bc0.  v2:= length @variable v7;
  #L452bc2.  if v2 <= v0 then goto L452bca;
  #L452bc6.  v7[v0]:= v1 @kind object;
  #L452bca.  return v7 @kind object;
}
procedure `void` `replay`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v9 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayDisposable` v10 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L452c6c.  call temp:= `getAndIncrement`(v10) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.getAndIncrement:()I` @kind virtual;
  #L452c72.  v0:= temp;
  #L452c74.  if v0 == 0 then goto L452c7a;
  #L452c78.  return @kind void;
  #L452c7a.  v0:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L452c7e.  v1:= v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L452c82.  v2:= v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` @kind object;
  #L452c86.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L452c8a.  v3:= 0I;
  #L452c8c.  v4:= 1I;
  #L452c8e.  if v2 == 0 then goto L452c9c;
  #L452c92.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L452c98.  v3:= temp;
  #L452c9a.  goto L452ca8;
  #L452c9c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L452ca2.  v2:= temp @kind object;
  #L452ca4.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v2 @kind object;
  #L452ca8.  v2:= 1I;
  #L452caa.  v5:= v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L452cae.  v6:= 0I;
  #L452cb0.  if v5 == 0 then goto L452cba;
  #L452cb4.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v6 @kind object;
  #L452cb8.  return @kind void;
  #L452cba.  v5:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L452cbe.  if v5 == v3 then goto L452d28;
  #L452cc2.  v7:= v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L452cc6.  if v7 == 0 then goto L452cd0;
  #L452cca.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v6 @kind object;
  #L452cce.  return @kind void;
  #L452cd0.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L452cd6.  v7:= temp @kind object;
  #L452cd8.  v8:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L452cdc.  if v8 == 0 then goto L452d1c;
  #L452ce0.  v8:= v3 + 1;
  #L452ce4.  if v8 != v5 then goto L452d1c;
  #L452ce8.  v5:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L452cec.  if v8 != v5 then goto L452d1c;
  #L452cf0.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L452cf6.  v0:= temp;
  #L452cf8.  if v0 == 0 then goto L452d04;
  #L452cfc.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L452d02.  goto L452d12;
  #L452d04.  call temp:= `getError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L452d0a.  v0:= temp @kind object;
  #L452d0c.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L452d12.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v6 @kind object;
  #L452d16.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L452d1a.  return @kind void;
  #L452d1c.  call `onNext`(v1, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L452d22.  v3:= v3 + 1;
  #L452d26.  goto L452cbe;
  #L452d28.  v5:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L452d2c.  if v3 == v5 then goto L452d32;
  #L452d30.  goto L452caa;
  #L452d32.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L452d38.  v5:= temp @kind object;
  #L452d3a.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L452d3e.  v2:= -v2 @kind int;
  #L452d40.  call temp:= `addAndGet`(v10, v2) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.addAndGet:(I)I` @kind virtual;
  #L452d46.  v2:= temp;
  #L452d48.  if v2 != 0 then goto L452caa;
  #L452d4c.  return @kind void;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L452a84.  v0:= v4.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L452a88.  if v0 == 0 then goto L452aba;
  #L452a8c.  v1:= v4.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L452a90.  v2:= v0 + -1;
  #L452a94.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L452a9a.  v1:= temp @kind object;
  #L452a9c.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L452aa2.  v3:= temp;
  #L452aa4.  if v3 != 0 then goto L452ab8;
  #L452aa8.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L452aae.  v1:= temp;
  #L452ab0.  if v1 == 0 then goto L452ab6;
  #L452ab4.  goto L452ab8;
  #L452ab6.  return v0;
  #L452ab8.  return v2;
  #L452aba.  v0:= 0I;
  #L452abc.  return v0;
}
procedure `void` `trimHead`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;

  #L452d60.  return @kind void;
}
