record `io.reactivex.subjects.ReplaySubject$ReplayBuffer` @kind interface @AccessFlag ABSTRACT_INTERFACE {
}
procedure `void` `add`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `addFinal`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `compareAndSet`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `get`() @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getValue`() @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object`[] `getValues`(`java.lang.Object`[] v0 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `replay`(`io.reactivex.subjects.ReplaySubject$ReplayDisposable` v0 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `size`() @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.size:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `trimHead`() @signature `Lio/reactivex/subjects/ReplaySubject$ReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
